package org.lwjglx.debug;
import java.util.Map;
import java.util.HashMap;
public class GLmetadata {
  private static final int GLboolean = 1;
  private static final int GLenum = 2;
  private static final int GLbitfield = 3;
  private static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973;
  private static final int GL_TRANSFORM_FEEDBACK_BINDING = 36389;
  private static final int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 32801;
  private static final int GL_INTENSITY8UI_EXT = 36223;
  private static final int GL_SAMPLE_LOCATION_ARB = 36432;
  private static final int GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;
  private static final int GL_COLOR_ATTACHMENT5_EXT = 36069;
  private static final int GL_EIGHTH_BIT_ATI = 32;
  private static final int GL_WEIGHT_ARRAY_POINTER_ARB = 34476;
  private static final int GL_TEXTURE_GEN_MODE = 9472;
  private static final int GL_CLIPPING_INPUT_PRIMITIVES = 33526;
  private static final int GL_MAGNITUDE_BIAS_NV = 34584;
  private static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 34767;
  private static final int GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937;
  private static final int GL_TESS_CONTROL_PROGRAM_NV = 35102;
  private static final int GL_SYNC_STATUS_APPLE = 37140;
  private static final int GL_ACCUM_CLEAR_VALUE = 2944;
  private static final int GL_SHADER_KHR = 33505;
  private static final int GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 35767;
  private static final int GL_MULTISAMPLE_FILTER_HINT_NV = 34100;
  private static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334;
  private static final int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164;
  private static final int GL_MAX_IMAGE_UNITS = 36664;
  private static final int GL_MAP2_VERTEX_ATTRIB11_4_NV = 34427;
  private static final int GL_RENDERBUFFER_SAMPLES_APPLE = 36011;
  private static final int GL_TESS_EVALUATION_PROGRAM_NV = 35103;
  private static final int GL_MODELVIEW_STACK_DEPTH = 2979;
  private static final int GL_TEXTURE_MIN_LOD = 33082;
  private static final int GL_FLOAT_MAT3x4 = 35688;
  private static final int GL_FLOAT_MAT3x2 = 35687;
  private static final int GL_FRAMEBUFFER_BARRIER_BIT = 1024;
  private static final int GL_DEPTH_COMPONENT16_SGIX = 33189;
  private static final int GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;
  private static final int GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
  private static final int GL_POINT_SPRITE = 34913;
  private static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
  private static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 36646;
  private static final int GL_READ_FRAMEBUFFER_NV = 36008;
  private static final int GL_VERTEX_ATTRIB_ARRAY6_NV = 34390;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309;
  private static final int GL_RECT_NV = 246;
  private static final int GL_UNIFORM_SIZE = 35384;
  private static final int GL_FIRST_VERTEX_CONVENTION_OES = 36429;
  private static final int GL_RGBA_DXT5_S3TC = 33700;
  private static final int GL_SECONDARY_INTERPOLATOR_ATI = 35181;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 37582;
  private static final int GL_MODELVIEW8_ARB = 34600;
  private static final int GL_TRANSLATE_X_NV = 37006;
  private static final int GL_REG_12_ATI = 35117;
  private static final int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767;
  private static final int GL_INVALID_OPERATION = 1282;
  private static final int GL_SOURCE0_RGB = 34176;
  private static final int GL_IMAGE_BINDING_ACCESS = 36670;
  private static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = 36648;
  private static final int GL_SAMPLE_BUFFERS_SGIS = 32936;
  private static final int GL_TEXTURE_COMPARE_SGIX = 33178;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
  private static final int GL_LUMINANCE_ALPHA8I_EXT = 36243;
  private static final int GL_QUERY_WAIT_NV = 36371;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;
  private static final int GL_BLUE_MAX_CLAMP_INGR = 34150;
  private static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804;
  private static final int GL_SAMPLER_2D_ARRAY_SHADOW = 36292;
  private static final int GL_POST_COLOR_MATRIX_RED_SCALE = 32948;
  private static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;
  private static final int GL_FILL_RECTANGLE_NV = 37692;
  private static final int GL_TEXTURE_CLIPMAP_CENTER_SGIX = 33137;
  private static final int GL_PROGRAM_ERROR_STRING_ARB = 34932;
  private static final int GL_INT64_VEC2_NV = 36841;
  private static final int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888;
  private static final int GL_ALPHA8UI_EXT = 36222;
  private static final int GL_RGB32F_EXT = 34837;
  private static final int GL_UNSIGNED_INT64_ARB = 5135;
  private static final int GL_MIRROR_CLAMP_EXT = 34626;
  private static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;
  private static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996;
  private static final int GL_COVERAGE_AUTOMATIC_NV = 36567;
  private static final int GL_IMAGE_BINDING_LAYER = 36669;
  private static final int GL_RGBA_FLOAT32_APPLE = 34836;
  private static final int GL_SET = 5391;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716;
  private static final int GL_TEXTURE5_ARB = 33989;
  private static final int GL_DEBUG_TYPE_PERFORMANCE_ARB = 33360;
  private static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080;
  private static final int GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 35956;
  private static final int GL_TEXTURE_EXTERNAL_OES = 36197;
  private static final int GL_CUBIC_EXT = 33588;
  private static final int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;
  private static final int GL_NORMAL_ARRAY_TYPE_EXT = 32894;
  private static final int GL_VIRTUAL_PAGE_SIZE_Y_ARB = 37270;
  private static final int GL_MULTICAST_GPUS_NV = 37562;
  private static final int GL_PARAMETER_BUFFER_BINDING = 33007;
  private static final int GL_UNIFORM_BLOCK_DATA_SIZE = 35392;
  private static final int GL_PACK_IMAGE_HEIGHT = 32876;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 37861;
  private static final int GL_ASYNC_DRAW_PIXELS_SGIX = 33629;
  private static final int GL_FOG_COORD_ARRAY_TYPE = 33876;
  private static final int GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
  private static final int GL_FRAMEBUFFER_UNDEFINED = 33305;
  private static final int GL_DEDICATED_MEMORY_OBJECT_EXT = 38273;
  private static final int GL_UNKNOWN_CONTEXT_RESET_ARB = 33365;
  private static final int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772;
  private static final int GL_MAX_TEXTURE_UNITS = 34018;
  private static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351;
  private static final int GL_GREEN_INTEGER = 36245;
  private static final int GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130;
  private static final int GL_OPERAND3_ALPHA_NV = 34203;
  private static final int GL_MAX_PATCH_VERTICES_EXT = 36477;
  private static final int GL_LINES_ADJACENCY = 10;
  private static final int GL_IMAGE_BINDING_LAYER_EXT = 36669;
  private static final int GL_LINES_ADJACENCY_ARB = 10;
  private static final int GL_VERTEX_STREAM0_ATI = 34668;
  private static final int GL_CONVOLUTION_FORMAT_EXT = 32791;
  private static final int GL_DSDT_NV = 34549;
  private static final int GL_MATRIX22_ARB = 35030;
  private static final int GL_DEPENDENT_GB_TEXTURE_2D_NV = 34538;
  private static final int GL_STENCIL_BUFFER_BIT2_QCOM = 262144;
  private static final int GL_DYNAMIC_DRAW = 35048;
  private static final int GL_SLUMINANCE8 = 35911;
  private static final int GL_MULTISAMPLE_BUFFER_BIT7_QCOM = -2147483648;
  private static final int GL_WARP_SIZE_NV = 37689;
  private static final int GL_Z400_BINARY_AMD = 34624;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101;
  private static final int GL_VERSION_ES_CM_1_1 = 1;
  private static final int GL_MIRRORED_REPEAT_ARB = 33648;
  private static final int GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0;
  private static final int GL_COMBINER_SUM_OUTPUT_NV = 34124;
  private static final int GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442;
  private static final int GL_PROGRAM_BINARY_FORMATS = 34815;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875;
  private static final int GL_RGB16F_ARB = 34843;
  private static final int GL_ISOLINES_OES = 36474;
  private static final int GL_INTENSITY_SNORM = 36883;
  private static final int GL_REG_21_ATI = 35126;
  private static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;
  private static final int GL_COMPRESSED_SRGB_ALPHA = 35913;
  private static final int GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022;
  private static final int GL_EVAL_VERTEX_ATTRIB2_NV = 34504;
  private static final int GL_BINORMAL_ARRAY_POINTER_EXT = 33859;
  private static final int GL_SPARE1_NV = 34095;
  private static final int GL_PIXEL_MAP_A_TO_A = 3193;
  private static final int GL_BLEND_COLOR_COMMAND_NV = 11;
  private static final int GL_SHARED_EDGE_NV = 192;
  private static final int GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;
  private static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;
  private static final int GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346;
  private static final int GL_RGB5_EXT = 32848;
  private static final int GL_SWIZZLE_STRQ_DQ_ATI = 35195;
  private static final int GL_ALL_BARRIER_BITS = -1;
  private static final int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;
  private static final int GL_TEXTURE_FETCH_BARRIER_BIT = 8;
  private static final int GL_PRIMARY_COLOR_ARB = 34167;
  private static final int GL_RGB_FLOAT16_APPLE = 34843;
  private static final int GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484;
  private static final int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924;
  private static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 36483;
  private static final int GL_FLOAT_MAT4_ARB = 35676;
  private static final int GL_FLOAT_RGBA16_NV = 34954;
  private static final int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 35077;
  private static final int GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
  private static final int GL_IMAGE_ROTATE_ORIGIN_X_HP = 33114;
  private static final int GL_OP_MOV_EXT = 34713;
  private static final int GL_FLOAT_VEC2 = 35664;
  private static final int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 34904;
  private static final int GL_OBJECT_DISTANCE_TO_POINT_SGIS = 33265;
  private static final int GL_FLOAT_VEC4 = 35666;
  private static final int GL_FLOAT_VEC3 = 35665;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074;
  private static final int GL_TEXTURE_GATHER = 33442;
  private static final int GL_PATH_MITER_LIMIT_NV = 36986;
  private static final int GL_COLOR_TABLE_ALPHA_SIZE = 32989;
  private static final int GL_MAX_SAMPLES_ANGLE = 36183;
  private static final int GL_OUTPUT_TEXTURE_COORD5_EXT = 34722;
  private static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347;
  private static final int GL_MAX_PALETTE_MATRICES_OES = 34882;
  private static final int GL_REG_5_ATI = 35110;
  private static final int GL_OP_MUL_EXT = 34694;
  private static final int GL_NORMAL_ARRAY_POINTER_EXT = 32911;
  private static final int GL_MAX_LABEL_LENGTH_KHR = 33512;
  private static final int GL_IMAGE_CLASS_10_10_10_2 = 33475;
  private static final int GL_IMAGE_2D_ARRAY = 36947;
  private static final int GL_NORMALIZED_RANGE_EXT = 34784;
  private static final int GL_REPLACE_EXT = 32866;
  private static final int GL_ZERO_TO_ONE_EXT = 37727;
  private static final int GL_HSL_HUE = 37549;
  private static final int GL_TEXTURE29_ARB = 34013;
  private static final int GL_ALPHA_MIN_SGIX = 33568;
  private static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36383;
  private static final int GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677;
  private static final int GL_FRONT_FACE = 2886;
  private static final int GL_TEXTURE_GREEN_TYPE = 35857;
  private static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;
  private static final int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 34370;
  private static final int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952;
  private static final int GL_TESS_EVALUATION_TEXTURE = 33437;
  private static final int GL_ALPHA32UI_EXT = 36210;
  private static final int GL_VERTEX_SHADER_BIT = 1;
  private static final int GL_OUTPUT_TEXTURE_COORD14_EXT = 34731;
  private static final int GL_COLOR_MATERIAL_FACE = 2901;
  private static final int GL_EVAL_2D_NV = 34496;
  private static final int GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 35766;
  private static final int GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020;
  private static final int GL_COMMAND_BARRIER_BIT = 64;
  private static final int GL_FLOAT_VEC4_ARB = 35666;
  private static final int GL_LIGHTEN_NV = 37528;
  private static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971;
  private static final int GL_BLEND_DST_RGB_OES = 32968;
  private static final int GL_OP_RECIP_SQRT_EXT = 34709;
  private static final int GL_MAP2_TANGENT_EXT = 33861;
  private static final int GL_BACK_LEFT = 1026;
  private static final int GL_LINE_TO_NV = 4;
  private static final int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547;
  private static final int GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536;
  private static final int GL_TERMINATE_SEQUENCE_COMMAND_NV = 0;
  private static final int GL_RENDERBUFFER_BINDING_ANGLE = 36007;
  private static final int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 34541;
  private static final int GL_MATRIX_PALETTE_ARB = 34880;
  private static final int GL_TEXTURE_BINDING_RENDERBUFFER_NV = 36435;
  private static final int GL_COMBINER5_NV = 34133;
  private static final int GL_SHADER_BINARY_VIV = 36804;
  private static final int GL_UNSIGNED_INT_VEC3_EXT = 36295;
  private static final int GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32;
  private static final int GL_MAX_TESS_PATCH_COMPONENTS_OES = 36484;
  private static final int GL_QUERY_BY_REGION_NO_WAIT = 36374;
  private static final int GL_SECONDARY_COLOR_ARRAY_SIZE = 33882;
  private static final int GL_CURRENT_PROGRAM = 35725;
  private static final int GL_POLYGON_OFFSET_POINT = 10753;
  private static final int GL_ALPHA_TEST_FUNC = 3009;
  private static final int GL_CON_3_ATI = 35140;
  private static final int GL_SIGNED_RGBA8_NV = 34556;
  private static final int GL_FOG_COORDINATE = 33873;
  private static final int GL_LIST_MODE = 2864;
  private static final int GL_RGB_S3TC = 33696;
  private static final int GL_MAX_VERTEX_STREAMS_ATI = 34667;
  private static final int GL_INCR = 7682;
  private static final int GL_ACTIVE_RESOURCES = 37621;
  private static final int GL_TEXTURE_BUFFER_SIZE_EXT = 37278;
  private static final int GL_MATRIX3_ARB = 35011;
  private static final int GL_READ_FRAMEBUFFER_BINDING_EXT = 36010;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x8 = 37815;
  private static final int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 34529;
  private static final int GL_IMAGE_CUBE_MAP_ARRAY_OES = 36948;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 37859;
  private static final int GL_RENDER_GPU_MASK_NV = 38232;
  private static final int GL_TEXTURE_BLUE_SIZE = 32862;
  private static final int GL_SAMPLER_3D_ARB = 35679;
  private static final int GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757;
  private static final int GL_WIDE_LINE_HINT_PGI = 107042;
  private static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x6 = 37814;
  private static final int GL_UNSIGNED_INT8_VEC4_NV = 36847;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x5 = 37813;
  private static final int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978;
  private static final int GL_RGB32F = 34837;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_OES = 36876;
  private static final int GL_ACTIVE_UNIFORM_BLOCKS = 35382;
  private static final int GL_CONSERVATIVE_RASTERIZATION_NV = 37702;
  private static final int GL_RGB4_S3TC = 33697;
  private static final int GL_RGB32I = 36227;
  private static final int GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;
  private static final int GL_AUX_DEPTH_STENCIL_APPLE = 35348;
  private static final int GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 8;
  private static final int GL_YCRCB_SGIX = 33560;
  private static final int GL_FUNC_SUBTRACT_EXT = 32778;
  private static final int GL_FILL_NV = 6914;
  private static final int GL_GPU_ADDRESS_NV = 36660;
  private static final int GL_DRAW_FRAMEBUFFER_NV = 36009;
  private static final int GL_EXCLUSION_NV = 37536;
  private static final int GL_REFERENCED_BY_VERTEX_SHADER = 37638;
  private static final int GL_MATRIX6_NV = 34358;
  private static final int GL_SHADING_LANGUAGE_VERSION_ARB = 35724;
  private static final int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258;
  private static final int GL_DEPTH32F_STENCIL8_NV = 36268;
  private static final int GL_MULTISAMPLE_LINE_WIDTH_RANGE = 37761;
  private static final int GL_DISTANCE_ATTENUATION_SGIS = 33065;
  private static final int GL_COLOR_ATTACHMENT14_EXT = 36078;
  private static final int GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291;
  private static final int GL_COLOR_TABLE_SGI = 32976;
  private static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824;
  private static final int GL_FUNC_REVERSE_SUBTRACT_EXT = 32779;
  private static final int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884;
  private static final int GL_SHADER_SOURCE_LENGTH = 35720;
  private static final int GL_TEXTURE_COMPRESSION_HINT = 34031;
  private static final int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;
  private static final int GL_LUMINANCE_SNORM = 36881;
  private static final int GL_TEXTURE_STORAGE_HINT_APPLE = 34236;
  private static final int GL_OP_INDEX_EXT = 34690;
  private static final int GL_VIEW_CLASS_RGTC1_RED = 33488;
  private static final int GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 37827;
  private static final int GL_CULL_FACE_MODE = 2885;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 37567;
  private static final int GL_TEXTURE_VIEW_MIN_LAYER_OES = 33501;
  private static final int GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352;
  private static final int GL_TEXTURE_SWIZZLE_R = 36418;
  private static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;
  private static final int GL_ETC1_SRGB8_NV = 35054;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36479;
  private static final int GL_PREVIOUS_ARB = 34168;
  private static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274;
  private static final int GL_RESAMPLE_ZERO_FILL_OML = 35207;
  private static final int GL_MINUS_CLAMPED_NV = 37555;
  private static final int GL_LINE_STRIP_ADJACENCY_ARB = 11;
  private static final int GL_OFFSET_HILO_TEXTURE_2D_NV = 34900;
  private static final int GL_SAMPLE_POSITION_NV = 36432;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 37857;
  private static final int GL_TEXTURE_SWIZZLE_B = 36420;
  private static final int GL_TEXTURE_SWIZZLE_A = 36421;
  private static final int GL_PALETTE8_RGB8_OES = 35733;
  private static final int GL_MAX_TESS_GEN_LEVEL_OES = 36478;
  private static final int GL_TEXTURE_SWIZZLE_G = 36419;
  private static final int GL_VARIABLE_B_NV = 34084;
  private static final int GL_COLOR_SUM = 33880;
  private static final int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917;
  private static final int GL_MATRIX31_ARB = 35039;
  private static final int GL_DARKEN_NV = 37527;
  private static final int GL_COLOR_TABLE_FORMAT_SGI = 32984;
  private static final int GL_PIXEL_PACK_BUFFER_BINDING = 35053;
  private static final int GL_FLOAT_MAT3x2_NV = 35687;
  private static final int GL_COLOR_SUM_CLAMP_NV = 34127;
  private static final int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011;
  private static final int GL_DU8DV8_ATI = 34682;
  private static final int GL_FUNC_REVERSE_SUBTRACT_OES = 32779;
  private static final int GL_DRAW_BUFFER8_ATI = 34861;
  private static final int GL_QUERY_BY_REGION_NO_WAIT_NV = 36374;
  private static final int GL_DRAW_BUFFER14_NV = 34867;
  private static final int GL_FOG_COORDINATE_ARRAY_STRIDE = 33877;
  private static final int GL_TEXTURE_VIEW = 33461;
  private static final int GL_DOT_PRODUCT_NV = 34540;
  private static final int GL_TEXTURE_INTENSITY_SIZE = 32865;
  private static final int GL_EVAL_VERTEX_ATTRIB13_NV = 34515;
  private static final int GL_STENCIL_INDEX16_EXT = 36169;
  private static final int GL_QUAD_MESH_SUN = 34324;
  private static final int GL_UPPER_LEFT_EXT = 36002;
  private static final int GL_PROGRAM_PIPELINE_BINDING = 33370;
  private static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899;
  private static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 35414;
  private static final int GL_R32UI = 33334;
  private static final int GL_TEXTURE_LOD_BIAS_T_SGIX = 33167;
  private static final int GL_TANGENT_ARRAY_EXT = 33849;
  private static final int GL_TEXTURE1_ARB = 33985;
  private static final int GL_LUMINANCE_ALPHA32I_EXT = 36231;
  private static final int GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
  private static final int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 34887;
  private static final int GL_EVAL_VERTEX_ATTRIB5_NV = 34507;
  private static final int GL_DOT2_ADD_ATI = 35180;
  private static final int GL_ALPHA32I_EXT = 36228;
  private static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469;
  private static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484;
  private static final int GL_R1UI_C4F_N3F_V3F_SUN = 34248;
  private static final int GL_DSDT_MAG_VIB_NV = 34551;
  private static final int GL_SIGNED_INTENSITY_NV = 34567;
  private static final int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967;
  private static final int GL_TEXTURE_SWIZZLE_A_EXT = 36421;
  private static final int GL_DRAW_BUFFER8_ARB = 34861;
  private static final int GL_OP_DOT4_EXT = 34693;
  private static final int GL_MAX_ELEMENTS_INDICES_EXT = 33001;
  private static final int GL_ANY_SAMPLES_PASSED = 35887;
  private static final int GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
  private static final int GL_DEPTH_BUFFER_BIT0_QCOM = 256;
  private static final int GL_TEXTURE_4DSIZE_SGIS = 33078;
  private static final int GL_DOUBLE_MAT3x2_EXT = 36683;
  private static final int GL_MAX_CULL_DISTANCES_EXT = 33529;
  private static final int GL_LESS = 513;
  private static final int GL_GREEN_BIT_ATI = 2;
  private static final int GL_DEPTH_BUFFER_BIT4_QCOM = 4096;
  private static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350;
  private static final int GL_Z4Y12Z4CB12Z4CR12_444_NV = 36919;
  private static final int GL_TEXTURE_COORD_ARRAY = 32888;
  private static final int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
  private static final int GL_COMPRESSED_RG11_EAC = 37490;
  private static final int GL_RGB_RAW_422_APPLE = 35409;
  private static final int GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385;
  private static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040;
  private static final int GL_IMAGE_BINDING_NAME = 36666;
  private static final int GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017;
  private static final int GL_INT8_VEC4_NV = 36835;
  private static final int GL_TESS_CONTROL_SHADER_PATCHES = 33521;
  private static final int GL_TRANSFORM_FEEDBACK_PAUSED = 36387;
  private static final int GL_MIN_SPARSE_LEVEL_AMD = 37275;
  private static final int GL_FLOAT_RGBA32_NV = 34955;
  private static final int GL_NUM_FRAGMENT_REGISTERS_ATI = 35182;
  private static final int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879;
  private static final int GL_PATH_DASH_CAPS_NV = 36987;
  private static final int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE = 36960;
  private static final int GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 35916;
  private static final int GL_COMBINER2_NV = 34130;
  private static final int GL_QUADRATIC_ATTENUATION = 4617;
  private static final int GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2;
  private static final int GL_MATRIX26_ARB = 35034;
  private static final int GL_DECAL = 8449;
  private static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4;
  private static final int GL_MODULATE_SUBTRACT_ATI = 34630;
  private static final int GL_RGBA_INTEGER_EXT = 36249;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;
  private static final int GL_INVERT_RGB_NV = 37539;
  private static final int GL_INTERPOLATE_ARB = 34165;
  private static final int GL_DRAW_BUFFER9 = 34862;
  private static final int GL_FORCE_BLUE_TO_ONE_NV = 34912;
  private static final int GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587;
  private static final int GL_4X_BIT_ATI = 2;
  private static final int GL_DRAW_BUFFER5 = 34858;
  private static final int GL_CONSERVE_MEMORY_HINT_PGI = 107005;
  private static final int GL_DRAW_BUFFER6 = 34859;
  private static final int GL_DRAW_BUFFER7 = 34860;
  private static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339;
  private static final int GL_DRAW_BUFFER8 = 34861;
  private static final int GL_DRAW_BUFFER1 = 34854;
  private static final int GL_DRAW_BUFFER2 = 34855;
  private static final int GL_TEXTURE13_ARB = 33997;
  private static final int GL_DRAW_BUFFER3 = 34856;
  private static final int GL_STENCIL_BACK_VALUE_MASK = 36004;
  private static final int GL_TRIANGLES = 4;
  private static final int GL_DRAW_BUFFER4 = 34857;
  private static final int GL_DEPTH_COMPONENTS = 33412;
  private static final int GL_STREAM_RASTERIZATION_AMD = 37280;
  private static final int GL_MAX_NUM_ACTIVE_VARIABLES = 37623;
  private static final int GL_COMBINE_RGB_EXT = 34161;
  private static final int GL_DRAW_BUFFER0 = 34853;
  private static final int GL_OP_CLAMP_EXT = 34702;
  private static final int GL_DRAW_BUFFER8_NV = 34861;
  private static final int GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071;
  private static final int GL_REFERENCED_BY_COMPUTE_SHADER = 37643;
  private static final int GL_MAX_ASYNC_READ_PIXELS_SGIX = 33633;
  private static final int GL_POINT_SIZE_ARRAY_TYPE_OES = 35210;
  private static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999;
  private static final int GL_STACK_UNDERFLOW_KHR = 1284;
  private static final int GL_MAP1_VERTEX_ATTRIB3_4_NV = 34403;
  private static final int GL_MIN_EXT = 32775;
  private static final int GL_EYE_LINEAR_NV = 9216;
  private static final int GL_OPERAND0_RGB_EXT = 34192;
  private static final int GL_COLOR_TABLE_RED_SIZE_SGI = 32986;
  private static final int GL_RGBA = 6408;
  private static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 33375;
  private static final int GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 35902;
  private static final int GL_RGB5 = 32848;
  private static final int GL_RGB4 = 32847;
  private static final int GL_GS_SHADER_BINARY_MTK = 38464;
  private static final int GL_GUILTY_CONTEXT_RESET_KHR = 33363;
  private static final int GL_RGB8 = 32849;
  private static final int GL_FRAMEBUFFER_RENDERABLE = 33417;
  private static final int GL_CON_12_ATI = 35149;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 36387;
  private static final int GL_MATRIX17_ARB = 35025;
  private static final int GL_MAX_TESS_GEN_LEVEL_EXT = 36478;
  private static final int GL_UNPACK_ROW_BYTES_APPLE = 35350;
  private static final int GL_PERFMON_RESULT_AMD = 35782;
  private static final int GL_RELATIVE_RECT_NV = 247;
  private static final int GL_3DC_XY_AMD = 34810;
  private static final int GL_PACK_ROW_LENGTH = 3330;
  private static final int GL_MINUS_NV = 37535;
  private static final int GL_FRAGMENT_SHADER_INVOCATIONS = 33524;
  private static final int GL_UNSIGNED_BYTE_3_3_2_EXT = 32818;
  private static final int GL_DEPTH_STENCIL = 34041;
  private static final int GL_BYTE = 5120;
  private static final int GL_LUMINANCE8UI_EXT = 36224;
  private static final int GL_RGB5_A1 = 32855;
  private static final int GL_OUTPUT_TEXTURE_COORD1_EXT = 34718;
  private static final int GL_ZOOM_X = 3350;
  private static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 36494;
  private static final int GL_ZOOM_Y = 3351;
  private static final int GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
  private static final int GL_UNPACK_RESAMPLE_OML = 35205;
  private static final int GL_SOFTLIGHT_KHR = 37532;
  private static final int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905;
  private static final int GL_COMBINE4_NV = 34051;
  private static final int GL_MAX_TEXTURE_UNITS_ARB = 34018;
  private static final int GL_QUERY_WAIT = 36371;
  private static final int GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002;
  private static final int GL_STATIC_ATI = 34656;
  private static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;
  private static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
  private static final int GL_VERTEX_ARRAY_BINDING_APPLE = 34229;
  private static final int GL_PACK_RESAMPLE_SGIX = 33838;
  private static final int GL_CONVOLUTION_FORMAT = 32791;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 37840;
  private static final int GL_ARC_TO_NV = 254;
  private static final int GL_LINE_STIPPLE_REPEAT = 2854;
  private static final int GL_DYNAMIC_COPY_ARB = 35050;
  private static final int GL_COMPRESSED_LUMINANCE_ARB = 34026;
  private static final int GL_OP_EXP_BASE_2_EXT = 34705;
  private static final int GL_VERTEX_PROGRAM_POSITION_MESA = 35764;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
  private static final int GL_DRAW_BUFFER6_EXT = 34859;
  private static final int GL_DEBUG_OUTPUT = 37600;
  private static final int GL_PROGRAM_SEPARABLE = 33368;
  private static final int GL_EDGE_FLAG_ARRAY_EXT = 32889;
  private static final int GL_OUTPUT_FOG_EXT = 34749;
  private static final int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 36398;
  private static final int GL_TEXTURE_LIGHTING_MODE_HP = 33127;
  private static final int GL_LO_BIAS_NV = 34581;
  private static final int GL_UNPACK_IMAGE_HEIGHT_EXT = 32878;
  private static final int GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716;
  private static final int GL_MULTISAMPLE_BIT_ARB = 536870912;
  private static final int GL_CON_28_ATI = 35165;
  private static final int GL_GPU_DISJOINT_EXT = 36795;
  private static final int GL_TEXTURE_PROTECTED_EXT = 35834;
  private static final int GL_COLOR_ATTACHMENT9_NV = 36073;
  private static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 33618;
  private static final int GL_VERTEX_ATTRIB_ARRAY_LONG = 34638;
  private static final int GL_REG_25_ATI = 35130;
  private static final int GL_SPHERE_MAP = 9218;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;
  private static final int GL_VERTEX_ARRAY_KHR = 32884;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582;
  private static final int GL_OPERAND0_ALPHA_ARB = 34200;
  private static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;
  private static final int GL_IMAGE_ROTATE_ANGLE_HP = 33113;
  private static final int GL_CLIP_DISTANCE6_EXT = 12294;
  private static final int GL_MODELVIEW17_ARB = 34609;
  private static final int GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 37761;
  private static final int GL_COLOR_TABLE = 32976;
  private static final int GL_MAP2_BINORMAL_EXT = 33863;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 33064;
  private static final int GL_LAYER_PROVOKING_VERTEX_OES = 33374;
  private static final int GL_PROGRAM_PIPELINE = 33508;
  private static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650;
  private static final int GL_UNSIGNED_INT64_AMD = 35778;
  private static final int GL_NO_RESET_NOTIFICATION = 33377;
  private static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
  private static final int GL_SYNC_STATUS = 37140;
  private static final int GL_IS_PER_PATCH_OES = 37607;
  private static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 36486;
  private static final int GL_TEXTURE_RECTANGLE = 34037;
  private static final int GL_RED_BIT_ATI = 1;
  private static final int GL_POLYGON_OFFSET_UNITS = 10752;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;
  private static final int GL_SRGB8_ALPHA8 = 35907;
  private static final int GL_PHONG_WIN = 33002;
  private static final int GL_TESS_GEN_MODE_OES = 36470;
  private static final int GL_DEBUG_TYPE_PUSH_GROUP = 33385;
  private static final int GL_CURRENT_MATRIX_NV = 34369;
  private static final int GL_RELATIVE_ARC_TO_NV = 255;
  private static final int GL_CURRENT_FOG_COORD = 33875;
  private static final int GL_INVERT_OVG_NV = 37556;
  private static final int GL_LUMINANCE16_ALPHA16_SNORM = 36890;
  private static final int GL_UNIFORM_NAME_LENGTH = 35385;
  private static final int GL_DEBUG_CATEGORY_API_ERROR_AMD = 37193;
  private static final int GL_EMBOSS_MAP_NV = 34143;
  private static final int GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 16777216;
  private static final int GL_BOOL_VEC3_ARB = 35672;
  private static final int GL_UNSIGNED_INT_IMAGE_2D = 36963;
  private static final int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192;
  private static final int GL_DATA_BUFFER_AMD = 37201;
  private static final int GL_STACK_OVERFLOW = 1283;
  private static final int GL_OBJECT_COMPILE_STATUS_ARB = 35713;
  private static final int GL_MAX_PATCH_VERTICES = 36477;
  private static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;
  private static final int GL_SLUMINANCE8_ALPHA8 = 35909;
  private static final int GL_CULL_VERTEX_EYE_POSITION_EXT = 33195;
  private static final int GL_INNOCENT_CONTEXT_RESET = 33364;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718;
  private static final int GL_ALREADY_SIGNALED_APPLE = 37146;
  private static final int GL_DEBUG_SEVERITY_LOW_AMD = 37192;
  private static final int GL_VERTEX_ATTRIB_ARRAY3_NV = 34387;
  private static final int GL_GLYPH_HEIGHT_BIT_NV = 2;
  private static final int GL_C4F_N3F_V3F = 10790;
  private static final int GL_VIEWPORT_BOUNDS_RANGE = 33373;
  private static final int GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684;
  private static final int GL_RED_INTEGER = 36244;
  private static final int GL_NORMAL_ARRAY_COUNT_EXT = 32896;
  private static final int GL_MAP1_VERTEX_ATTRIB6_4_NV = 34406;
  private static final int GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
  private static final int GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 36164;
  private static final int GL_IGNORE_BORDER_HP = 33104;
  private static final int GL_WRAP_BORDER_SUN = 33236;
  private static final int GL_TEXTURE_STENCIL_SIZE_EXT = 35057;
  private static final int GL_LAYOUT_TRANSFER_SRC_EXT = 38290;
  private static final int GL_BLEND_EQUATION_RGB = 32777;
  private static final int GL_OUTPUT_TEXTURE_COORD18_EXT = 34735;
  private static final int GL_UNSIGNED_INT_IMAGE_1D = 36962;
  private static final int GL_MATRIX13_ARB = 35021;
  private static final int GL_T2F_N3F_V3F = 10795;
  private static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992;
  private static final int GL_MAX_TEXTURE_COORDS = 34929;
  private static final int GL_COMPRESSED_RGB_ARB = 34029;
  private static final int GL_DOUBLE_VEC3_EXT = 36861;
  private static final int GL_MULTISAMPLE_COVERAGE_MODES_NV = 36370;
  private static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464;
  private static final int GL_WRITE_ONLY = 35001;
  private static final int GL_TEXTURE_BINDING_BUFFER_ARB = 35884;
  private static final int GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 37693;
  private static final int GL_NUM_DEVICE_UUIDS_EXT = 38294;
  private static final int GL_MODELVIEW_MATRIX = 2982;
  private static final int GL_SLICE_ACCUM_SUN = 34252;
  private static final int GL_CULL_FRAGMENT_NV = 34535;
  private static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 34917;
  private static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878;
  private static final int GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 2048;
  private static final int GL_INDEX_WRITEMASK = 3105;
  private static final int GL_MAP_INVALIDATE_RANGE_BIT_EXT = 4;
  private static final int GL_PRIMARY_COLOR_NV = 34092;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING = 36006;
  private static final int GL_TESS_CONTROL_TEXTURE = 33436;
  private static final int GL_OBJECT_VALIDATE_STATUS_ARB = 35715;
  private static final int GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674;
  private static final int GL_PROXY_COLOR_TABLE_SGI = 32979;
  private static final int GL_PATH_GEN_COLOR_FORMAT_NV = 37042;
  private static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657;
  private static final int GL_PIXEL_MODE_BIT = 32;
  private static final int GL_RASTER_SAMPLES_EXT = 37672;
  private static final int GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758;
  private static final int GL_QUERY_OBJECT_EXT = 37203;
  private static final int GL_DEPTH_BUFFER_BIT7_QCOM = 32768;
  private static final int GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038;
  private static final int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
  private static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825;
  private static final int GL_PURGEABLE_APPLE = 35357;
  private static final int GL_MAP_PERSISTENT_BIT_EXT = 64;
  private static final int GL_COMPUTE_SHADER_INVOCATIONS = 33525;
  private static final int GL_UNSIGNED_INT_IMAGE_3D = 36964;
  private static final int GL_FRAGMENT_PROGRAM_BINDING_NV = 34931;
  private static final int GL_OPERAND2_RGB = 34194;
  private static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 37873;
  private static final int GL_TEXTURE_MAG_FILTER = 10240;
  private static final int GL_ELEMENT_ARRAY_POINTER_ATI = 34666;
  private static final int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 33779;
  private static final int GL_READ_PIXELS = 33420;
  private static final int GL_OPERAND2_ALPHA_ARB = 34202;
  private static final int GL_DRAW_ELEMENTS_COMMAND_NV = 2;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 36319;
  private static final int GL_OBJECT_LINEAR_NV = 9217;
  private static final int GL_LOW_INT = 36339;
  private static final int GL_STRICT_LIGHTING_HINT_PGI = 107031;
  private static final int GL_IMAGE_TRANSLATE_Y_HP = 33112;
  private static final int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573;
  private static final int GL_RGB10_A2 = 32857;
  private static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;
  private static final int GL_NUM_SPARSE_LEVELS_EXT = 37290;
  private static final int GL_TEXTURE_PRE_SPECULAR_HP = 33129;
  private static final int GL_MAP1_VERTEX_3 = 3479;
  private static final int GL_MAP1_VERTEX_4 = 3480;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;
  private static final int GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010;
  private static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938;
  private static final int GL_READ_FRAMEBUFFER_BINDING_ANGLE = 36010;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY_ARB = 13;
  private static final int GL_PROGRAM_OUTPUT = 37604;
  private static final int GL_MAP_ATTRIB_U_ORDER_NV = 34499;
  private static final int GL_FLOAT16_VEC3_NV = 36858;
  private static final int GL_POLYGON_SMOOTH_HINT = 3155;
  private static final int GL_BGR = 32992;
  private static final int GL_INT_IMAGE_1D = 36951;
  private static final int GL_OPERAND1_ALPHA_ARB = 34201;
  private static final int GL_BLEND_ADVANCED_COHERENT_KHR = 37509;
  private static final int GL_COMPRESSED_SIGNED_RG11_EAC = 37491;
  private static final int GL_TEXTURE16_ARB = 34000;
  private static final int GL_COMBINE_ALPHA_ARB = 34162;
  private static final int GL_POINT = 6912;
  private static final int GL_DEBUG_TYPE_ERROR = 33356;
  private static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;
  private static final int GL_VERTEX_SHADER_INVOCATIONS_ARB = 33520;
  private static final int GL_CONVOLUTION_FILTER_SCALE_EXT = 32788;
  private static final int GL_SECONDARY_COLOR_NV = 34093;
  private static final int GL_RED_INTEGER_EXT = 36244;
  private static final int GL_MAX_WINDOW_RECTANGLES_EXT = 36628;
  private static final int GL_CLEAR = 5376;
  private static final int GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 36707;
  private static final int GL_INT_IMAGE_3D = 36953;
  private static final int GL_INT_IMAGE_2D = 36952;
  private static final int GL_COLOR_ATTACHMENT9_EXT = 36073;
  private static final int GL_NORMAL_ARRAY_LENGTH_NV = 36652;
  private static final int GL_PROGRAM_LENGTH_ARB = 34343;
  private static final int GL_4PASS_3_EXT = 32935;
  private static final int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259;
  private static final int GL_SAMPLER_CUBE_SHADOW_EXT = 36293;
  private static final int GL_PROGRAM_MATRIX_EXT = 36397;
  private static final int GL_IMAGE_1D_ARRAY = 36946;
  private static final int GL_VERTEX_BINDING_DIVISOR = 33494;
  private static final int GL_SRG8_EXT = 36798;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 37825;
  private static final int GL_UNSIGNED_SHORT_5_5_5_1_EXT = 32820;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
  private static final int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920;
  private static final int GL_POINT_SIZE_MAX = 33063;
  private static final int GL_COMPUTE_SHADER_INVOCATIONS_ARB = 33525;
  private static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
  private static final int GL_UNSIGNALED = 37144;
  private static final int GL_INT_SAMPLER_2D_ARRAY = 36303;
  private static final int GL_SAMPLER_2D_ARRAY = 36289;
  private static final int GL_RGB_SCALE_EXT = 34163;
  private static final int GL_TEXTURE_GEN_MODE_OES = 9472;
  private static final int GL_ATTRIB_ARRAY_TYPE_NV = 34341;
  private static final int GL_POLYGON_OFFSET_LINE = 10754;
  private static final int GL_SURFACE_STATE_NV = 34539;
  private static final int GL_TESS_GEN_VERTEX_ORDER_OES = 36472;
  private static final int GL_PIXEL_TEX_GEN_MODE_SGIX = 33579;
  private static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;
  private static final int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070;
  private static final int GL_COMBINER_AB_DOT_PRODUCT_NV = 34117;
  private static final int GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140;
  private static final int GL_PRESERVE_ATI = 34658;
  private static final int GL_TEXTURE_CUBE_MAP = 34067;
  private static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801;
  private static final int GL_TEXTURE_COMPARE_MODE_ARB = 34892;
  private static final int GL_RENDERBUFFER_SAMPLES = 36011;
  private static final int GL_QUERY_BUFFER_BINDING_AMD = 37267;
  private static final int GL_NORMAL_MAP_OES = 34065;
  private static final int GL_DEPENDENT_AR_TEXTURE_2D_NV = 34537;
  private static final int GL_INTERNALFORMAT_STENCIL_TYPE = 33405;
  private static final int GL_DEBUG_SEVERITY_LOW_ARB = 37192;
  private static final int GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242;
  private static final int GL_PATH_COMPUTED_LENGTH_NV = 37024;
  private static final int GL_PROXY_TEXTURE_2D_STACK_MESAX = 34652;
  private static final int GL_INVERSE_TRANSPOSE_NV = 34349;
  private static final int GL_CIRCULAR_CCW_ARC_TO_NV = 248;
  private static final int GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100;
  private static final int GL_COLOR_ARRAY_POINTER = 32912;
  private static final int GL_MAX_WIDTH = 33406;
  private static final int GL_STANDARD_FONT_FORMAT_NV = 37740;
  private static final int GL_BINORMAL_ARRAY_TYPE_EXT = 33856;
  private static final int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959;
  private static final int GL_BUFFER_MAPPED = 35004;
  private static final int GL_BLEND_EQUATION_ALPHA = 34877;
  private static final int GL_UNPACK_FLIP_Y_WEBGL = 37440;
  private static final int GL_TESS_CONTROL_SHADER_PATCHES_ARB = 33521;
  private static final int GL_MIRRORED_REPEAT_IBM = 33648;
  private static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;
  private static final int GL_SPRITE_SGIX = 33096;
  private static final int GL_NEGATIVE_W_EXT = 34780;
  private static final int GL_E_TIMES_F_NV = 34097;
  private static final int GL_PRIMITIVES_SUBMITTED_ARB = 33519;
  private static final int GL_UNPACK_COMPRESSED_SIZE_SGIX = 33562;
  private static final int GL_COLOR_SUM_ARB = 33880;
  private static final int GL_FOG_HINT = 3156;
  private static final int GL_COLOR_TABLE_SCALE_SGI = 32982;
  private static final int GL_VERTEX_SHADER_ARB = 35633;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 36182;
  private static final int GL_VIDEO_COLOR_CONVERSION_MAX_NV = 36906;
  private static final int GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14;
  private static final int GL_FLOAT_MAT4x3 = 35690;
  private static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36382;
  private static final int GL_OP_SET_LT_EXT = 34701;
  private static final int GL_UNSIGNED_INT_10_10_10_2 = 32822;
  private static final int GL_FLOAT_MAT4x2 = 35689;
  private static final int GL_SMALL_CW_ARC_TO_NV = 20;
  private static final int GL_ACCUM_BLUE_BITS = 3418;
  private static final int GL_R16UI = 33332;
  private static final int GL_VIEW_CLASS_24_BITS = 33481;
  private static final int GL_LINEAR_MIPMAP_NEAREST = 9985;
  private static final int GL_SYNC_CL_EVENT_ARB = 33344;
  private static final int GL_TEXTURE_LOD_BIAS = 34049;
  private static final int GL_STENCIL_BACK_FAIL = 34817;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308;
  private static final int GL_LIST_INDEX = 2867;
  private static final int GL_REPLACE = 7681;
  private static final int GL_TIMEOUT_IGNORED_APPLE = -1;
  private static final int GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 134217728;
  private static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 35415;
  private static final int GL_MAP_WRITE_BIT_EXT = 2;
  private static final int GL_TEXTURE_RED_TYPE_ARB = 35856;
  private static final int GL_COPY_WRITE_BUFFER = 36663;
  private static final int GL_MEDIUM_FLOAT = 36337;
  private static final int GL_SHADER_BINARY_DMP = 37456;
  private static final int GL_INDEX_ARRAY_STRIDE = 32902;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
  private static final int GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 33527;
  private static final int GL_MAP1_GRID_DOMAIN = 3536;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;
  private static final int GL_TEXTURE_RANGE_LENGTH_APPLE = 34231;
  private static final int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722;
  private static final int GL_SHININESS = 5633;
  private static final int GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 33530;
  private static final int GL_READ_FRAMEBUFFER = 36008;
  private static final int GL_SHADER_STORAGE_BUFFER = 37074;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 37828;
  private static final int GL_1PASS_EXT = 32929;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;
  private static final int GL_CON_24_ATI = 35161;
  private static final int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019;
  private static final int GL_MATRIX3_NV = 34355;
  private static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347;
  private static final int GL_VARIANT_ARRAY_STRIDE_EXT = 34790;
  private static final int GL_DRAW_BUFFER14_EXT = 34867;
  private static final int GL_ONE_MINUS_SRC1_COLOR = 35066;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973;
  private static final int GL_INTERNALFORMAT_GREEN_SIZE = 33394;
  private static final int GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64;
  private static final int GL_DEBUG_SEVERITY_HIGH_KHR = 37190;
  private static final int GL_MAX_MULTIVIEW_BUFFERS_EXT = 37106;
  private static final int GL_DEBUG_SOURCE_API_KHR = 33350;
  private static final int GL_SET_AMD = 34634;
  private static final int GL_SAMPLER_3D = 35679;
  private static final int GL_MAX_LGPU_GPUS_NVX = 37562;
  private static final int GL_INVARIANT_VALUE_EXT = 34794;
  private static final int GL_BLEND_SRC_RGB_OES = 32969;
  private static final int GL_PATH_COORD_COUNT_NV = 37022;
  private static final int GL_IMAGE_SCALE_Y_HP = 33110;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 35070;
  private static final int GL_GEOMETRY_SHADER_BIT_EXT = 4;
  private static final int GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 38225;
  private static final int GL_NUM_PROGRAM_BINARY_FORMATS_OES = 34814;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265;
  private static final int GL_MATRIX_EXT = 34752;
  private static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 36443;
  private static final int GL_FLOAT16_MAT2x3_AMD = 37320;
  private static final int GL_MAP_INVALIDATE_BUFFER_BIT = 8;
  private static final int GL_FLOAT16_MAT2_AMD = 37317;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 35967;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 36969;
  private static final int GL_TEXTURE_TYPE_QCOM = 35799;
  private static final int GL_IMAGE_CUBE_MAP_ARRAY = 36948;
  private static final int GL_INDEX_BIT_PGI = 524288;
  private static final int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187;
  private static final int GL_SLUMINANCE_ALPHA = 35908;
  private static final int GL_PRIMITIVES_GENERATED_NV = 35975;
  private static final int GL_COLOR_ARRAY_BUFFER_BINDING = 34968;
  private static final int GL_TEXTURE_ALPHA_SIZE_EXT = 32863;
  private static final int GL_FALSE = 0;
  private static final int GL_TIMESTAMP = 36392;
  private static final int GL_SUBSAMPLE_DISTANCE_AMD = 34879;
  private static final int GL_SAMPLER_2D = 35678;
  private static final int GL_TRIANGLES_ADJACENCY_EXT = 12;
  private static final int GL_FONT_UNAVAILABLE_NV = 37738;
  private static final int GL_SPRITE_MODE_SGIX = 33097;
  private static final int GL_TEXCOORD4_BIT_PGI = -2147483648;
  private static final int GL_REG_1_ATI = 35106;
  private static final int GL_ARRAY_BUFFER_ARB = 34962;
  private static final int GL_INT_SAMPLER_CUBE_EXT = 36300;
  private static final int GL_UNSIGNED_SHORT_8_8_MESA = 34234;
  private static final int GL_RGBA_INTEGER_MODE_EXT = 36254;
  private static final int GL_IS_PER_PATCH_EXT = 37607;
  private static final int GL_MIRROR_CLAMP_TO_EDGE = 34627;
  private static final int GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 38562;
  private static final int GL_PROXY_HISTOGRAM_EXT = 32805;
  private static final int GL_MODELVIEW0_ARB = 5888;
  private static final int GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 4096;
  private static final int GL_TEXT_FRAGMENT_SHADER_ATI = 33280;
  private static final int GL_OFFSET_TEXTURE_MATRIX_NV = 34529;
  private static final int GL_MAX_CONVOLUTION_WIDTH_EXT = 32794;
  private static final int GL_CLEAR_TEXTURE = 37733;
  private static final int GL_COMPRESSED_INTENSITY = 34028;
  private static final int GL_SAMPLE_SHADING_OES = 35894;
  private static final int GL_INT = 5124;
  private static final int GL_SAMPLER_1D = 35677;
  private static final int GL_FRAMEBUFFER_BINDING = 36006;
  private static final int GL_TEXTURE31_ARB = 34015;
  private static final int GL_MEDIUM_INT = 36340;
  private static final int GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 37288;
  private static final int GL_SAMPLES_PASSED = 35092;
  private static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = 36326;
  private static final int GL_CLIP_DISTANCE1 = 12289;
  private static final int GL_CLIP_DISTANCE0 = 12288;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;
  private static final int GL_CLIP_DISTANCE3 = 12291;
  private static final int GL_CLIP_DISTANCE2 = 12290;
  private static final int GL_ARRAY_OBJECT_OFFSET_ATI = 34663;
  private static final int GL_CLIP_DISTANCE5 = 12293;
  private static final int GL_R8I = 33329;
  private static final int GL_STREAM_COPY_ARB = 35042;
  private static final int GL_COMPLETION_STATUS_ARB = 37297;
  private static final int GL_CLIP_DISTANCE4 = 12292;
  private static final int GL_CLIP_DISTANCE7 = 12295;
  private static final int GL_CLIP_DISTANCE6 = 12294;
  private static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898;
  private static final int GL_MAX_HEIGHT = 33407;
  private static final int GL_EVAL_VERTEX_ATTRIB8_NV = 34510;
  private static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655;
  private static final int GL_SGX_BINARY_IMG = 35850;
  private static final int GL_SAMPLER_BUFFER_OES = 36290;
  private static final int GL_VALIDATE_STATUS = 35715;
  private static final int GL_INTENSITY16 = 32845;
  private static final int GL_PIXEL_SUBSAMPLE_4242_SGIX = 34212;
  private static final int GL_NORMAL_ARRAY_POINTER = 32911;
  private static final int GL_TESS_EVALUATION_SHADER_EXT = 36487;
  private static final int GL_INTENSITY12 = 32844;
  private static final int GL_REDUCE = 32790;
  private static final int GL_SAMPLE_MASK_SGIS = 32928;
  private static final int GL_PROGRAM_ATTRIBS_ARB = 34988;
  private static final int GL_TEXTURE_SWIZZLE_RGBA = 36422;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 37829;
  private static final int GL_COLOR_BUFFER_BIT2_QCOM = 4;
  private static final int GL_TESS_GEN_VERTEX_ORDER = 36472;
  private static final int GL_YCBCR_MESA = 34647;
  private static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878;
  private static final int GL_MODELVIEW13_ARB = 34605;
  private static final int GL_COLOR_ATTACHMENT4_NV = 36068;
  private static final int GL_FRAGMENT_DEPTH = 33874;
  private static final int GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 268435456;
  private static final int GL_REG_29_ATI = 35134;
  private static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337;
  private static final int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798;
  private static final int GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;
  private static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357;
  private static final int GL_UNPACK_SKIP_IMAGES = 32877;
  private static final int GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936;
  private static final int GL_NORMAL_ARRAY_LIST_IBM = 103071;
  private static final int GL_FIXED_ONLY = 35101;
  private static final int GL_TEXTURE_HI_SIZE_NV = 34587;
  private static final int GL_RASTERIZER_DISCARD_EXT = 35977;
  private static final int GL_DRAW_BUFFER12_ARB = 34865;
  private static final int GL_TIME_ELAPSED_EXT = 35007;
  private static final int GL_TESS_CONTROL_SHADER_EXT = 36488;
  private static final int GL_INT_IMAGE_2D_EXT = 36952;
  private static final int GL_COLOR_ATTACHMENT10_NV = 36074;
  private static final int GL_PROGRAM_OBJECT_ARB = 35648;
  private static final int GL_TEXTURE26_ARB = 34010;
  private static final int GL_TEXTURE_IMMUTABLE_FORMAT = 37167;
  private static final int GL_TEXTURE_1D_ARRAY = 35864;
  private static final int GL_STORAGE_CLIENT_APPLE = 34228;
  private static final int GL_TEXTURE_SHADOW = 33441;
  private static final int GL_PRIMITIVES_GENERATED_EXT = 35975;
  private static final int GL_422_REV_EXT = 32973;
  private static final int GL_DEPTH_STENCIL_ATTACHMENT = 33306;
  private static final int GL_FRAGMENT_PROGRAM_NV = 34928;
  private static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;
  private static final int GL_POLYGON_STIPPLE = 2882;
  private static final int GL_PATH_MODELVIEW_STACK_DEPTH_NV = 2979;
  private static final int GL_COMPRESSED_SLUMINANCE = 35914;
  private static final int GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;
  private static final int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
  private static final int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 32918;
  private static final int GL_GEOMETRY_DEFORMATION_BIT_SGIX = 2;
  private static final int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352;
  private static final int GL_QUERY_BUFFER_BARRIER_BIT = 32768;
  private static final int GL_HISTOGRAM_ALPHA_SIZE = 32811;
  private static final int GL_MODELVIEW22_ARB = 34614;
  private static final int GL_LINE_STRIP_ADJACENCY = 11;
  private static final int GL_LUMINANCE16_SNORM = 36889;
  private static final int GL_RELATIVE_ROUNDED_RECT4_NV = 237;
  private static final int GL_CON_16_ATI = 35153;
  private static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289;
  private static final int GL_UNKNOWN_CONTEXT_RESET_KHR = 33365;
  private static final int GL_TEXTURE_MAG_SIZE_NV = 34591;
  private static final int GL_POINT_SIZE_GRANULARITY = 2835;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 34070;
  private static final int GL_PLUS_DARKER_NV = 37522;
  private static final int GL_DRAW_BUFFER12_ATI = 34865;
  private static final int GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1;
  private static final int GL_UNIFORM_MATRIX_STRIDE = 35389;
  private static final int GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 16;
  private static final int GL_FLOAT_MAT2x3_NV = 35685;
  private static final int GL_PROGRAM_ATTRIB_COMPONENTS_NV = 35078;
  private static final int GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 8;
  private static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;
  private static final int GL_POST_COLOR_MATRIX_RED_BIAS = 32952;
  private static final int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458;
  private static final int GL_FIRST_VERTEX_CONVENTION_EXT = 36429;
  private static final int GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387;
  private static final int GL_COMPARE_R_TO_TEXTURE_ARB = 34894;
  private static final int GL_CLIP_PLANE3_IMG = 12291;
  private static final int GL_MAP2_VERTEX_ATTRIB15_4_NV = 34431;
  private static final int GL_VERTEX_ARRAY_POINTER = 32910;
  private static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572;
  private static final int GL_DOUBLE_MAT4x3_EXT = 36686;
  private static final int GL_IDENTITY_NV = 34346;
  private static final int GL_TRIANGLE_MESH_SUN = 34325;
  private static final int GL_TEXTURE_1D_STACK_BINDING_MESAX = 34653;
  private static final int GL_SAMPLE_MASK_VALUE = 36434;
  private static final int GL_COMPILE_AND_EXECUTE = 4865;
  private static final int GL_MAX_RATIONAL_EVAL_ORDER_NV = 34519;
  private static final int GL_LUMINANCE6_ALPHA2 = 32836;
  private static final int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144;
  private static final int GL_DRAW_BUFFER0_NV = 34853;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069;
  private static final int GL_FRAMEBUFFER_SRGB = 36281;
  private static final int GL_OP_FLOOR_EXT = 34703;
  private static final int GL_DRAW_BUFFER5_ARB = 34858;
  private static final int GL_SLUMINANCE8_EXT = 35911;
  private static final int GL_DOT4_ATI = 35175;
  private static final int GL_UNSIGNED_IDENTITY_NV = 34102;
  private static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483;
  private static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;
  private static final int GL_RGBA16F_ARB = 34842;
  private static final int GL_DEPTH_BOUNDS_TEST_EXT = 34960;
  private static final int GL_MAX_SHADER_COMPILER_THREADS_ARB = 37296;
  private static final int GL_CONFORMANT_NV = 37748;
  private static final int GL_EYE_DISTANCE_TO_POINT_SGIS = 33264;
  private static final int GL_DRAW_BUFFER3_EXT = 34856;
  private static final int GL_MODULATE = 8448;
  private static final int GL_ALPHA_TEST_QCOM = 3008;
  private static final int GL_MATRIX10_ARB = 35018;
  private static final int GL_MAX_PROGRAM_ATTRIBS_ARB = 34989;
  private static final int GL_VERTICES_SUBMITTED_ARB = 33518;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 33637;
  private static final int GL_SCREEN = 37525;
  private static final int GL_PATCH_VERTICES_OES = 36466;
  private static final int GL_BLEND_EQUATION_ALPHA_OES = 34877;
  private static final int GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 37311;
  private static final int GL_SAMPLER_1D_SHADOW_ARB = 35681;
  private static final int GL_TEXTURE_SAMPLES = 37126;
  private static final int GL_MULTIPLY_KHR = 37524;
  private static final int GL_LARGE_CW_ARC_TO_NV = 24;
  private static final int GL_LUMINANCE32F_ARB = 34840;
  private static final int GL_TRANSPOSE_MODELVIEW_MATRIX = 34019;
  private static final int GL_DRAW_BUFFER5_ATI = 34858;
  private static final int GL_BLUE_BIAS = 3355;
  private static final int GL_LUMINANCE32UI_EXT = 36212;
  private static final int GL_AUTO_NORMAL = 3456;
  private static final int GL_CURRENT_QUERY_ARB = 34917;
  private static final int GL_INT16_VEC2_NV = 36837;
  private static final int GL_POINT_SIZE_MIN = 33062;
  private static final int GL_CLIP_DISTANCE2_EXT = 12290;
  private static final int GL_ROUNDED_RECT2_NV = 234;
  private static final int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 35185;
  private static final int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880;
  private static final int GL_CULL_VERTEX_IBM = 103050;
  private static final int GL_MIPMAP = 33427;
  private static final int GL_MAP1_VERTEX_ATTRIB12_4_NV = 34412;
  private static final int GL_SINGLE_COLOR = 33273;
  private static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317;
  private static final int GL_CLAMP_FRAGMENT_COLOR_ARB = 35099;
  private static final int GL_INT_SAMPLER_1D_EXT = 36297;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 37161;
  private static final int GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513;
  private static final int GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675;
  private static final int GL_TEXTURE_SRGB_DECODE_EXT = 35400;
  private static final int GL_ACCUM_ADJACENT_PAIRS_NV = 37037;
  private static final int GL_SHADOW_AMBIENT_SGIX = 32959;
  private static final int GL_MOVE_TO_NV = 2;
  private static final int GL_ALPHA8_SNORM = 36884;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
  private static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;
  private static final int GL_STATIC_READ_ARB = 35045;
  private static final int GL_TEXTURE_INTERNAL_FORMAT_QCOM = 35797;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 36182;
  private static final int GL_COLOR_ATTACHMENT1_NV = 36065;
  private static final int GL_SIGNED_NORMALIZED = 36764;
  private static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;
  private static final int GL_DELETE_STATUS = 35712;
  private static final int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486;
  private static final int GL_QUERY_RESULT_EXT = 34918;
  private static final int GL_SAMPLE_PATTERN_SGIS = 32940;
  private static final int GL_OUTPUT_TEXTURE_COORD20_EXT = 34737;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_OES = 34068;
  private static final int GL_EVAL_TRIANGULAR_2D_NV = 34497;
  private static final int GL_DRAW_BUFFER1_ATI = 34854;
  private static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640;
  private static final int GL_SURFACE_REGISTERED_NV = 34557;
  private static final int GL_INT64_VEC3_ARB = 36842;
  private static final int GL_R11F_G11F_B10F_APPLE = 35898;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 36312;
  private static final int GL_HARDMIX_NV = 37545;
  private static final int GL_MAX_VERTEX_HINT_PGI = 107053;
  private static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 36968;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 34070;
  private static final int GL_RGB10_A2_EXT = 32857;
  private static final int GL_PIXEL_MAP_R_TO_R = 3190;
  private static final int GL_OFFSET_TEXTURE_2D_NV = 34536;
  private static final int GL_VERTEX_ATTRIB_MAP1_APPLE = 35328;
  private static final int GL_SAMPLE_COVERAGE_VALUE = 32938;
  private static final int GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 256;
  private static final int GL_PIXEL_TEX_GEN_SGIX = 33081;
  private static final int GL_ALPHA_INTEGER = 36247;
  private static final int GL_UNKNOWN_CONTEXT_RESET = 33365;
  private static final int GL_MAX_VARYING_FLOATS_ARB = 35659;
  private static final int GL_MAX_PROJECTION_STACK_DEPTH = 3384;
  private static final int GL_TOP_LEVEL_ARRAY_STRIDE = 37645;
  private static final int GL_R3_G3_B2 = 10768;
  private static final int GL_LINE_STRIP = 3;
  private static final int GL_READ_BUFFER_NV = 3074;
  private static final int GL_QUERY = 33507;
  private static final int GL_PROGRAM_FORMAT_ARB = 34934;
  private static final int GL_TEXTURE_ENV_COLOR = 8705;
  private static final int GL_TEXTURE_VIEW_NUM_LEVELS_OES = 33500;
  private static final int GL_SAMPLES_SGIS = 32937;
  private static final int GL_UPPER_LEFT = 36002;
  private static final int GL_INNOCENT_CONTEXT_RESET_KHR = 33364;
  private static final int GL_PATH_PROJECTION_NV = 5889;
  private static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958;
  private static final int GL_DEBUG_TYPE_OTHER_KHR = 33361;
  private static final int GL_DUAL_LUMINANCE4_SGIS = 33044;
  private static final int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 36492;
  private static final int GL_COLOR_BUFFER_BIT5_QCOM = 32;
  private static final int GL_SIGNED_ALPHA_NV = 34565;
  private static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;
  private static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982;
  private static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720;
  private static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 36493;
  private static final int GL_RGBA_FLOAT16_ATI = 34842;
  private static final int GL_TEXTURE_LUMINANCE_SIZE = 32864;
  private static final int GL_DRAW_BUFFER1_ARB = 34854;
  private static final int GL_UNSIGNED_NORMALIZED_ARB = 35863;
  private static final int GL_STENCIL_REF_COMMAND_NV = 12;
  private static final int GL_RESET_NOTIFICATION_STRATEGY = 33366;
  private static final int GL_COLOR_ATTACHMENT13_NV = 36077;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x6 = 37817;
  private static final int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 33146;
  private static final int GL_MATRIX6_ARB = 35014;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x8 = 37818;
  private static final int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x5 = 37816;
  private static final int GL_LIST_BIT = 131072;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876;
  private static final int GL_RESTART_PATH_NV = 240;
  private static final int GL_CURRENT_WEIGHT_ARB = 34472;
  private static final int GL_LAYER_NV = 36266;
  private static final int GL_ELEMENT_ARRAY_BUFFER = 34963;
  private static final int GL_HANDLE_TYPE_D3D12_FENCE_EXT = 38292;
  private static final int GL_SPOT_CUTOFF = 4614;
  private static final int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 33263;
  private static final int GL_COLOR_ATTACHMENT1_EXT = 36065;
  private static final int GL_DYNAMIC_COPY = 35050;
  private static final int GL_VERTEX_ATTRIB_ARRAY0_NV = 34384;
  private static final int GL_CON_20_ATI = 35157;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715;
  private static final int GL_OBJECT_POINT_SGIS = 33269;
  private static final int GL_ALPHA_MAX_CLAMP_INGR = 34151;
  private static final int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242;
  private static final int GL_DEPTH_CLAMP_FAR_AMD = 36895;
  private static final int GL_MAX_RENDERBUFFER_SIZE_EXT = 34024;
  private static final int GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;
  private static final int GL_AND_INVERTED = 5380;
  private static final int GL_VERTEX_ATTRIB_ARRAY11_NV = 34395;
  private static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
  private static final int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 34078;
  private static final int GL_RENDERBUFFER_BINDING_EXT = 36007;
  private static final int GL_MAX_3D_TEXTURE_SIZE_EXT = 32883;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 36204;
  private static final int GL_MODELVIEW4_ARB = 34596;
  private static final int GL_FIELD_LOWER_NV = 36899;
  private static final int GL_LUMINANCE6_ALPHA2_EXT = 32836;
  private static final int GL_TEXTURE_BUFFER_OFFSET = 37277;
  private static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;
  private static final int GL_POINT_SIZE_MIN_SGIS = 33062;
  private static final int GL_PROJECTION = 5889;
  private static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;
  private static final int GL_OUTPUT_TEXTURE_COORD11_EXT = 34728;
  private static final int GL_2PASS_1_SGIS = 32931;
  private static final int GL_LINEAR = 9729;
  private static final int GL_VIEWPORT_POSITION_W_SCALE_NV = 37756;
  private static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;
  private static final int GL_INDEX_CLEAR_VALUE = 3104;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305;
  private static final int GL_WEIGHTED_AVERAGE_ARB = 37735;
  private static final int GL_WEIGHT_ARRAY_TYPE_ARB = 34473;
  private static final int GL_ALPHA12_EXT = 32829;
  private static final int GL_RGB9_E5_APPLE = 35901;
  private static final int GL_TEXTURE9_ARB = 33993;
  private static final int GL_BGRA_INTEGER = 36251;
  private static final int GL_DOT3_RGB_ARB = 34478;
  private static final int GL_REG_16_ATI = 35121;
  private static final int GL_COLOR_ATTACHMENT11_EXT = 36075;
  private static final int GL_SGX_PROGRAM_BINARY_IMG = 37168;
  private static final int GL_HSL_SATURATION = 37550;
  private static final int GL_REPLICATE_BORDER = 33107;
  private static final int GL_TEXTURE_2D_STACK_BINDING_MESAX = 34654;
  private static final int GL_UNSIGNED_SHORT_5_6_5 = 33635;
  private static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;
  private static final int GL_TEXTURE_VIEW_MIN_LAYER = 33501;
  private static final int GL_ALPHA_FLOAT16_APPLE = 34844;
  private static final int GL_OUTPUT_TEXTURE_COORD26_EXT = 34743;
  private static final int GL_SPARSE_STORAGE_BIT_ARB = 1024;
  private static final int GL_MAX_PROGRAM_MATRICES_ARB = 34351;
  private static final int GL_CLAMP_FRAGMENT_COLOR = 35099;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;
  private static final int GL_ANY_SAMPLES_PASSED_EXT = 35887;
  private static final int GL_MAX_TESS_GEN_LEVEL = 36478;
  private static final int GL_FRAMEBUFFER_BARRIER_BIT_EXT = 1024;
  private static final int GL_INTENSITY32I_EXT = 36229;
  private static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696;
  private static final int GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 37860;
  private static final int GL_SEPARABLE_2D_EXT = 32786;
  private static final int GL_VIDEO_BUFFER_NV = 36896;
  private static final int GL_PATH_TERMINAL_DASH_CAP_NV = 36989;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982;
  private static final int GL_GEOMETRY_PROGRAM_NV = 35878;
  private static final int GL_AND = 5377;
  private static final int GL_UNIFORM_BUFFER_SIZE = 35370;
  private static final int GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 38283;
  private static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995;
  private static final int GL_BACK = 1029;
  private static final int GL_COLOR_ARRAY_TYPE = 32898;
  private static final int GL_TEXTURE_MAX_LOD_SGIS = 33083;
  private static final int GL_WEIGHT_ARRAY_SIZE_ARB = 34475;
  private static final int GL_PIXEL_SUBSAMPLE_4444_SGIX = 34210;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP = 34068;
  private static final int GL_LOAD = 257;
  private static final int GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704;
  private static final int GL_SAMPLER_CUBE_SHADOW_NV = 36293;
  private static final int GL_DRAW_BUFFER10_EXT = 34863;
  private static final int GL_4PASS_0_SGIS = 32932;
  private static final int GL_LAST_VERTEX_CONVENTION_EXT = 36430;
  private static final int GL_NEGATIVE_ONE_TO_ONE = 37726;
  private static final int GL_T2F_V3F = 10791;
  private static final int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 2;
  private static final int GL_READ_FRAMEBUFFER_APPLE = 36008;
  private static final int GL_CONVOLUTION_2D_EXT = 32785;
  private static final int GL_CURRENT_VERTEX_WEIGHT_EXT = 34059;
  private static final int GL_RASTER_POSITION_UNCLIPPED_IBM = 103010;
  private static final int GL_LOGIC_OP_MODE = 3056;
  private static final int GL_TRANSPOSE_AFFINE_2D_NV = 37014;
  private static final int GL_PACK_SKIP_IMAGES = 32875;
  private static final int GL_COMBINER_SCALE_NV = 34120;
  private static final int GL_VIRTUAL_PAGE_SIZE_Y_AMD = 37270;
  private static final int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 38482;
  private static final int GL_FILE_NAME_NV = 36980;
  private static final int GL_ARRAY_STRIDE = 37630;
  private static final int GL_VARIANT_ARRAY_POINTER_EXT = 34793;
  private static final int GL_R1UI_C4UB_V3F_SUN = 34245;
  private static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
  private static final int GL_INT_SAMPLER_2D_ARRAY_EXT = 36303;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 35070;
  private static final int GL_MAX_DRAW_BUFFERS = 34852;
  private static final int GL_PATH_DASH_OFFSET_NV = 36990;
  private static final int GL_TEXTURE_BORDER = 4101;
  private static final int GL_DRAW_BUFFER = 3073;
  private static final int GL_COMPRESSED_RED_RGTC1 = 36283;
  private static final int GL_HORIZONTAL_LINE_TO_NV = 6;
  private static final int GL_PACK_IMAGE_HEIGHT_EXT = 32876;
  private static final int GL_RENDERBUFFER_ALPHA_SIZE = 36179;
  private static final int GL_SIGNED_HILO16_NV = 34554;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763;
  private static final int GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;
  private static final int GL_MAX_GENERAL_COMBINERS_NV = 34125;
  private static final int GL_MAP_WRITE_BIT = 2;
  private static final int GL_BLUE_INTEGER_EXT = 36246;
  private static final int GL_LUMINANCE_ALPHA16F_ARB = 34847;
  private static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766;
  private static final int GL_FRAGMENT_SUBROUTINE = 37612;
  private static final int GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;
  private static final int GL_TEXTURE22_ARB = 34006;
  private static final int GL_CON_7_ATI = 35144;
  private static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;
  private static final int GL_HISTOGRAM_SINK_EXT = 32813;
  private static final int GL_UNSIGNED_INT_24_8_MESA = 34641;
  private static final int GL_DIFFERENCE_KHR = 37534;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006;
  private static final int GL_R1UI_N3F_V3F_SUN = 34247;
  private static final int GL_ACTIVE_PROGRAM = 33369;
  private static final int GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 34073;
  private static final int GL_DISPLAY_LIST = 33511;
  private static final int GL_COLOR_ATTACHMENT0 = 36064;
  private static final int GL_MAX_FRAMEZOOM_FACTOR_SGIX = 33165;
  private static final int GL_REG_9_ATI = 35114;
  private static final int GL_COLOR_ATTACHMENT4 = 36068;
  private static final int GL_QUERY_RESULT_NO_WAIT = 37268;
  private static final int GL_COLOR_ATTACHMENT3 = 36067;
  private static final int GL_COLOR_ATTACHMENT2 = 36066;
  private static final int GL_COMPRESSED_RGB8_ETC2 = 37492;
  private static final int GL_COLOR_ATTACHMENT1 = 36065;
  private static final int GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 37072;
  private static final int GL_COLOR_ATTACHMENT8 = 36072;
  private static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;
  private static final int GL_COLOR_ATTACHMENT7 = 36071;
  private static final int GL_COLOR_ATTACHMENT6 = 36070;
  private static final int GL_COLOR_ATTACHMENT5 = 36069;
  private static final int GL_CLIP_DISTANCE0_APPLE = 12288;
  private static final int GL_CONSTANT_COLOR_EXT = 32769;
  private static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076;
  private static final int GL_UNSIGNED_INT8_NV = 36844;
  private static final int GL_COMPUTE_SUBROUTINE = 37613;
  private static final int GL_BLEND_OVERLAP_NV = 37505;
  private static final int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 37762;
  private static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;
  private static final int GL_NUM_PROGRAM_BINARY_FORMATS = 34814;
  private static final int GL_LINEAR_MIPMAP_LINEAR = 9987;
  private static final int GL_ALPHA16 = 32830;
  private static final int GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316;
  private static final int GL_NEGATE_BIT_ATI = 4;
  private static final int GL_OPERAND1_RGB_EXT = 34193;
  private static final int GL_OP_MIN_EXT = 34699;
  private static final int GL_CUBIC_MIPMAP_LINEAR_IMG = 37179;
  private static final int GL_VERTEX_SUBROUTINE = 37608;
  private static final int GL_ALPHA12 = 32829;
  private static final int GL_ALPHA16_EXT = 32830;
  private static final int GL_INTERNALFORMAT_SHARED_SIZE = 33399;
  private static final int GL_GEOMETRY_TEXTURE = 33438;
  private static final int GL_SIGNED_RGBA_NV = 34555;
  private static final int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 33554;
  private static final int GL_NEAREST_MIPMAP_NEAREST = 9984;
  private static final int GL_CURRENT_ATTRIB_NV = 34342;
  private static final int GL_FONT_HEIGHT_BIT_NV = 8388608;
  private static final int GL_OUTPUT_TEXTURE_COORD9_EXT = 34726;
  private static final int GL_OBJECT_DISTANCE_TO_LINE_SGIS = 33267;
  private static final int GL_COLOR_ATTACHMENT9 = 36073;
  private static final int GL_LUMINANCE_FLOAT16_ATI = 34846;
  private static final int GL_DRAW_BUFFER_EXT = 3073;
  private static final int GL_IMAGE_CLASS_1_X_8 = 33473;
  private static final int GL_TRACE_ARRAYS_BIT_MESA = 4;
  private static final int GL_DRAW_BUFFER3_NV = 34856;
  private static final int GL_TEXTURE_BUFFER = 35882;
  private static final int GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 38481;
  private static final int GL_SPOT_DIRECTION = 4612;
  private static final int GL_LUMINANCE16_ALPHA16 = 32840;
  private static final int GL_LIGHT6 = 16390;
  private static final int GL_LIGHT7 = 16391;
  private static final int GL_LIGHT4 = 16388;
  private static final int GL_LIGHT5 = 16389;
  private static final int GL_BLUE_BITS = 3412;
  private static final int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;
  private static final int GL_FRAGMENT_LIGHT2_SGIX = 33806;
  private static final int GL_RELATIVE_VERTICAL_LINE_TO_NV = 9;
  private static final int GL_TEXTURE_2D_STACK_MESAX = 34650;
  private static final int GL_LIGHT2 = 16386;
  private static final int GL_LIGHT3 = 16387;
  private static final int GL_LIGHT0 = 16384;
  private static final int GL_LIGHT1 = 16385;
  private static final int GL_INDEX_ARRAY_STRIDE_EXT = 32902;
  private static final int GL_UNSIGNED_INT_IMAGE_3D_EXT = 36964;
  private static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;
  private static final int GL_DEVICE_UUID_EXT = 38295;
  private static final int GL_RED = 6403;
  private static final int GL_MODELVIEW26_ARB = 34618;
  private static final int GL_CLIP_DISTANCE5_APPLE = 12293;
  private static final int GL_CONVOLUTION_WIDTH = 32792;
  private static final int GL_BROWSER_DEFAULT_WEBGL = 37444;
  private static final int GL_TEXTURE_MIN_FILTER = 10241;
  private static final int GL_ALL_BARRIER_BITS_EXT = -1;
  private static final int GL_CONTEXT_LOST_KHR = 1287;
  private static final int GL_ELEMENT_ADDRESS_COMMAND_NV = 8;
  private static final int GL_DUAL_ALPHA12_SGIS = 33042;
  private static final int GL_MATRIX0_NV = 34352;
  private static final int GL_IMAGE_1D_EXT = 36940;
  private static final int GL_R16_EXT = 33322;
  private static final int GL_VIEWPORT_SWIZZLE_X_NV = 37720;
  private static final int GL_DEBUG_OUTPUT_KHR = 37600;
  private static final int GL_ZERO_TO_ONE = 37727;
  private static final int GL_ADD = 260;
  private static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 35068;
  private static final int GL_BUFFER_OBJECT_EXT = 37201;
  private static final int GL_DOUBLE = 5130;
  private static final int GL_TESS_EVALUATION_SHADER_BIT_EXT = 16;
  private static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235;
  private static final int GL_DOUBLE_MAT3_EXT = 36679;
  private static final int GL_QUERY_WAIT_INVERTED = 36375;
  private static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;
  private static final int GL_GEOMETRY_VERTICES_OUT_EXT = 36314;
  private static final int GL_VIEWPORT_COMMAND_NV = 16;
  private static final int GL_VERTEX_STREAM7_ATI = 34675;
  private static final int GL_DEPTH_STENCIL_NV = 34041;
  private static final int GL_DST_OVER_NV = 37513;
  private static final int GL_PACK_REVERSE_ROW_ORDER_ANGLE = 37796;
  private static final int GL_MAP2_VERTEX_ATTRIB0_4_NV = 34416;
  private static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573;
  private static final int GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288;
  private static final int GL_HSL_COLOR = 37551;
  private static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719;
  private static final int GL_MINOR_VERSION = 33308;
  private static final int GL_QUERY_BY_REGION_WAIT = 36373;
  private static final int GL_TEXTURE_BINDING_1D_ARRAY = 35868;
  private static final int GL_STENCIL_BUFFER_BIT6_QCOM = 4194304;
  private static final int GL_UNIFORM_BARRIER_BIT_EXT = 4;
  private static final int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 32927;
  private static final int GL_RG8 = 33323;
  private static final int GL_PIXEL_MAG_FILTER_EXT = 33585;
  private static final int GL_Z_EXT = 34775;
  private static final int GL_SLIM12S_SGIX = 33567;
  private static final int GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25;
  private static final int GL_MAP_COHERENT_BIT = 128;
  private static final int GL_RGB = 6407;
  private static final int GL_VARIABLE_G_NV = 34089;
  private static final int GL_4PASS_3_SGIS = 32935;
  private static final int GL_TRACE_TEXTURES_BIT_MESA = 8;
  private static final int GL_INT16_NV = 36836;
  private static final int GL_INDEX_TEST_FUNC_EXT = 33206;
  private static final int GL_MAT_EMISSION_BIT_PGI = 8388608;
  private static final int GL_SAMPLE_MASK_INVERT_EXT = 32939;
  private static final int GL_UNSIGNED_INT64_VEC2_ARB = 36853;
  private static final int GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 37699;
  private static final int GL_VERTEX_ARRAY_BINDING = 34229;
  private static final int GL_UNPACK_SKIP_PIXELS_EXT = 3316;
  private static final int GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 512;
  private static final int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 32812;
  private static final int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847;
  private static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330;
  private static final int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 33156;
  private static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486;
  private static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328;
  private static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695;
  private static final int GL_CLIP_DISTANCE4_APPLE = 12292;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 36321;
  private static final int GL_HSL_COLOR_NV = 37551;
  private static final int GL_IMAGE_2D_ARRAY_EXT = 36947;
  private static final int GL_CONSTANT_ATTENUATION = 4615;
  private static final int GL_BLEND_SRC_RGB_EXT = 32969;
  private static final int GL_COLOR_ARRAY_SIZE_EXT = 32897;
  private static final int GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 33522;
  private static final int GL_OCCLUSION_TEST_HP = 33125;
  private static final int GL_PALETTE4_RGBA4_OES = 35731;
  private static final int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869;
  private static final int GL_MATRIX4_NV = 34356;
  private static final int GL_VERTEX_BINDING_STRIDE = 33496;
  private static final int GL_STENCIL_INDEX1_EXT = 36166;
  private static final int GL_POST_CONVOLUTION_BLUE_SCALE = 32798;
  private static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
  private static final int GL_EVAL_VERTEX_ATTRIB0_NV = 34502;
  private static final int GL_PIXEL_PACK_BUFFER_ARB = 35051;
  private static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924;
  private static final int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194;
  private static final int GL_PIXEL_BUFFER_BARRIER_BIT = 128;
  private static final int GL_DISCARD_NV = 34096;
  private static final int GL_MAP1_VERTEX_ATTRIB9_4_NV = 34409;
  private static final int GL_DARKEN_KHR = 37527;
  private static final int GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17;
  private static final int GL_UNPACK_SKIP_IMAGES_EXT = 32877;
  private static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;
  private static final int GL_PROGRAM_BINARY_LENGTH_OES = 34625;
  private static final int GL_CURRENT_RASTER_SECONDARY_COLOR = 33887;
  private static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
  private static final int GL_DRAW_INDIRECT_ADDRESS_NV = 36673;
  private static final int GL_RESET_NOTIFICATION_STRATEGY_EXT = 33366;
  private static final int GL_T4F_C4F_N3F_V4F = 10797;
  private static final int GL_SRC2_ALPHA = 34186;
  private static final int GL_CURRENT_MATRIX_ARB = 34369;
  private static final int GL_RGBA16UI = 36214;
  private static final int GL_RASTERIZER_DISCARD = 35977;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060;
  private static final int GL_LUMINANCE_INTEGER_EXT = 36252;
  private static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 37188;
  private static final int GL_SECONDARY_COLOR_ARRAY_EXT = 33886;
  private static final int GL_SHADER_COMPILER = 36346;
  private static final int GL_MAX_CLIPMAP_DEPTH_SGIX = 33143;
  private static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661;
  private static final int GL_TEXTURE_4D_BINDING_SGIS = 33103;
  private static final int GL_ALPHA32F_ARB = 34838;
  private static final int GL_FRAMEBUFFER_EXT = 36160;
  private static final int GL_POINT_DISTANCE_ATTENUATION_ARB = 33065;
  private static final int GL_DOUBLE_MAT4_EXT = 36680;
  private static final int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901;
  private static final int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 35055;
  private static final int GL_TESS_CONTROL_SUBROUTINE = 37609;
  private static final int GL_COMPUTE_SHADER = 37305;
  private static final int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080;
  private static final int GL_UNSIGNED_INT64_VEC3_ARB = 36854;
  private static final int GL_OUTPUT_TEXTURE_COORD24_EXT = 34741;
  private static final int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060;
  private static final int GL_DEBUG_SEVERITY_MEDIUM_AMD = 37191;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
  private static final int GL_2_BYTES_NV = 5127;
  private static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 36665;
  private static final int GL_TESS_CONTROL_SHADER_BIT = 8;
  private static final int GL_RGBA16UI_EXT = 36214;
  private static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358;
  private static final int GL_DEBUG_SEVERITY_HIGH = 37190;
  private static final int GL_SIGNED_ALPHA8_NV = 34566;
  private static final int GL_COLOR_ATTACHMENT13_EXT = 36077;
  private static final int GL_POLYGON_OFFSET_FACTOR = 32824;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 36877;
  private static final int GL_SRC_OUT_NV = 37516;
  private static final int GL_INT_SAMPLER_3D_EXT = 36299;
  private static final int GL_MAX_ASYNC_TEX_IMAGE_SGIX = 33631;
  private static final int GL_EYE_POINT_SGIS = 33268;
  private static final int GL_CONVOLUTION_FILTER_SCALE = 32788;
  private static final int GL_BGR_EXT = 32992;
  private static final int GL_SKIP_COMPONENTS3_NV = -4;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
  private static final int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;
  private static final int GL_UNSIGNED_INT16_VEC3_NV = 36850;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320;
  private static final int GL_PURGED_CONTEXT_RESET_NV = 37563;
  private static final int GL_PRESENT_TIME_NV = 36394;
  private static final int GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 36873;
  private static final int GL_KEEP = 7680;
  private static final int GL_DOT_PRODUCT_PASS_THROUGH_NV = 34907;
  private static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 36424;
  private static final int GL_VIBRANCE_SCALE_NV = 34579;
  private static final int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
  private static final int GL_CONDITION_SATISFIED_APPLE = 37148;
  private static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 37121;
  private static final int GL_UNIFORM_BUFFER_BINDING_EXT = 36335;
  private static final int GL_STENCIL_BUFFER_BIT3_QCOM = 524288;
  private static final int GL_TEXTURE_MEMORY_LAYOUT_INTEL = 33791;
  private static final int GL_TEXTURE_GREEN_SIZE_EXT = 32861;
  private static final int GL_UNPACK_IMAGE_HEIGHT = 32878;
  private static final int GL_SQUARE_NV = 37027;
  private static final int GL_PACK_IMAGE_DEPTH_SGIS = 33073;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;
  private static final int GL_SOURCE1_ALPHA_EXT = 34185;
  private static final int GL_UNIFORM_BUFFER_ADDRESS_NV = 37743;
  private static final int GL_VIRTUAL_PAGE_SIZE_X_AMD = 37269;
  private static final int GL_TEXTURE_MAX_CLAMP_T_SGIX = 33642;
  private static final int GL_VERTEX_ARRAY_TYPE = 32891;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 34069;
  private static final int GL_QUERY_RESULT_NO_WAIT_AMD = 37268;
  private static final int GL_INT_SAMPLER_3D = 36299;
  private static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 36485;
  private static final int GL_INT64_VEC4_NV = 36843;
  private static final int GL_MAX_IMAGE_UNITS_EXT = 36664;
  private static final int GL_VERTEX_ID_SWIZZLE_AMD = 37285;
  private static final int GL_UNSIGNED_INT_VEC2_EXT = 36294;
  private static final int GL_VERTEX_ID_NV = 35963;
  private static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 32;
  private static final int GL_COLOR_TABLE_BIAS_SGI = 32983;
  private static final int GL_DUAL_LUMINANCE_ALPHA8_SGIS = 33053;
  private static final int GL_BGRA_EXT = 32993;
  private static final int GL_COMPARE_REF_TO_TEXTURE = 34894;
  private static final int GL_INTERLACE_OML = 35200;
  private static final int GL_REG_6_ATI = 35111;
  private static final int GL_SAMPLER_2D_ARRAY_EXT = 36289;
  private static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 37273;
  private static final int GL_DEBUG_TYPE_PORTABILITY_KHR = 33359;
  private static final int GL_MAGNITUDE_SCALE_NV = 34578;
  private static final int GL_OUTPUT_TEXTURE_COORD31_EXT = 34748;
  private static final int GL_MAX_VARYING_FLOATS = 35659;
  private static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841;
  private static final int GL_MAX_TRACK_MATRICES_NV = 34351;
  private static final int GL_GEOMETRY_DEFORMATION_SGIX = 33172;
  private static final int GL_TRANSFORM_HINT_APPLE = 34225;
  private static final int GL_MAX_ELEMENTS_VERTICES = 33000;
  private static final int GL_MAP2_VERTEX_ATTRIB3_4_NV = 34419;
  private static final int GL_COLOR_WRITEMASK = 3107;
  private static final int GL_IUI_N3F_V2F_EXT = 33199;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_NV = 35982;
  private static final int GL_COLOR_ATTACHMENT6_EXT = 36070;
  private static final int GL_INT_SAMPLER_2D = 36298;
  private static final int GL_TESS_EVALUATION_SHADER_INVOCATIONS = 33522;
  private static final int GL_SOURCE0_RGB_ARB = 34176;
  private static final int GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 37755;
  private static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123;
  private static final int GL_R8UI = 33330;
  private static final int GL_MATRIX16_ARB = 35024;
  private static final int GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 36967;
  private static final int GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927;
  private static final int GL_GLYPH_HAS_KERNING_BIT_NV = 256;
  private static final int GL_LINEAR_SHARPEN_ALPHA_SGIS = 32942;
  private static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940;
  private static final int GL_MITER_REVERT_NV = 37031;
  private static final int GL_HINT_BIT = 32768;
  private static final int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 33064;
  private static final int GL_COLOR_INDEX2_EXT = 32995;
  private static final int GL_DEBUG_LOGGED_MESSAGES_AMD = 37189;
  private static final int GL_EYE_DISTANCE_TO_LINE_SGIS = 33266;
  private static final int GL_COMPRESSED_SLUMINANCE_EXT = 35914;
  private static final int GL_COLORDODGE_NV = 37529;
  private static final int GL_SOURCE1_RGB = 34177;
  private static final int GL_OUTPUT_TEXTURE_COORD15_EXT = 34732;
  private static final int GL_QUERY_BY_REGION_WAIT_NV = 36373;
  private static final int GL_ALPHA_TEST = 3008;
  private static final int GL_INTERLACE_SGIX = 32916;
  private static final int GL_INTENSITY_EXT = 32841;
  private static final int GL_DOUBLE_VEC4_EXT = 36862;
  private static final int GL_T2F_C4F_N3F_V3F = 10796;
  private static final int GL_BLEND_ADVANCED_COHERENT_NV = 37509;
  private static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986;
  private static final int GL_FRAGMENT_SHADER_ARB = 35632;
  private static final int GL_FRACTIONAL_EVEN_OES = 36476;
  private static final int GL_INT64_NV = 5134;
  private static final int GL_MAP1_VERTEX_ATTRIB15_4_NV = 34415;
  private static final int GL_DOUBLE_MAT4x2 = 36685;
  private static final int GL_DOUBLE_MAT4x3 = 36686;
  private static final int GL_INTERNALFORMAT_RED_SIZE = 33393;
  private static final int GL_BLEND_EQUATION_ALPHA_EXT = 34877;
  private static final int GL_TEXTURE_RED_TYPE = 35856;
  private static final int GL_DEBUG_CALLBACK_USER_PARAM = 33349;
  private static final int GL_PATCH_VERTICES_EXT = 36466;
  private static final int GL_VERTEX_PROGRAM_NV = 34336;
  private static final int GL_FRAMEZOOM_FACTOR_SGIX = 33164;
  private static final int GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 2;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 37858;
  private static final int GL_MAX_SHADER_COMPILER_THREADS_KHR = 37296;
  private static final int GL_DEBUG_TYPE_ERROR_KHR = 33356;
  private static final int GL_NORMAL_MAP_EXT = 34065;
  private static final int GL_NORMAL_ARRAY_EXT = 32885;
  private static final int GL_INTENSITY16F_ARB = 34845;
  private static final int GL_REPLACEMENT_CODE_SUN = 33240;
  private static final int GL_SCISSOR_BOX = 3088;
  private static final int GL_RENDER = 7168;
  private static final int GL_GREEN_INTEGER_EXT = 36245;
  private static final int GL_OP_CROSS_PRODUCT_EXT = 34711;
  private static final int GL_CON_0_ATI = 35137;
  private static final int GL_TEXTURE_ALPHA_TYPE_ARB = 35859;
  private static final int GL_MATRIX4_ARB = 35012;
  private static final int GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;
  private static final int GL_TEXTURE_WRAP_R_EXT = 32882;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
  private static final int GL_TRANSPOSE_NV = 34348;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
  private static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 37164;
  private static final int GL_FLOAT_RGB32_NV = 34953;
  private static final int GL_FETCH_PER_SAMPLE_ARM = 36709;
  private static final int GL_HALF_FLOAT_OES = 36193;
  private static final int GL_VIDEO_BUFFER_BINDING_NV = 36897;
  private static final int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800;
  private static final int GL_IMAGE_BINDING_FORMAT = 36974;
  private static final int GL_COLORBURN = 37530;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579;
  private static final int GL_STORAGE_SHARED_APPLE = 34239;
  private static final int GL_DEPTH_BUFFER_BIT1_QCOM = 512;
  private static final int GL_VERTEX23_BIT_PGI = 4;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x6 = 37812;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x5 = 37811;
  private static final int GL_INT_SAMPLER_2D_RECT_EXT = 36301;
  private static final int GL_INTENSITY_FLOAT16_ATI = 34845;
  private static final int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795;
  private static final int GL_SAMPLE_BUFFERS_3DFX = 34483;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE = 33064;
  private static final int GL_YCBCR_422_APPLE = 34233;
  private static final int GL_FLOAT_RG32_NV = 34951;
  private static final int GL_SAMPLER_BUFFER = 36290;
  private static final int GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23;
  private static final int GL_FUNC_ADD = 32774;
  private static final int GL_OBJECT_SUBTYPE_ARB = 35663;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 36006;
  private static final int GL_CLIENT_ACTIVE_TEXTURE = 34017;
  private static final int GL_GEOMETRY_INPUT_TYPE_EXT = 36315;
  private static final int GL_LINES = 1;
  private static final int GL_MIN_SAMPLE_SHADING_VALUE_ARB = 35895;
  private static final int GL_SELECT = 7170;
  private static final int GL_COMPRESSED_ALPHA = 34025;
  private static final int GL_RGB_FLOAT32_ATI = 34837;
  private static final int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965;
  private static final int GL_SKIP_DECODE_EXT = 35402;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;
  private static final int GL_SAMPLER_EXTERNAL_OES = 36198;
  private static final int GL_MODELVIEW29_ARB = 34621;
  private static final int GL_TEXTURE_VIEW_NUM_LAYERS_OES = 33502;
  private static final int GL_UNSIGNED_INT64_VEC4_NV = 36855;
  private static final int GL_ALPHA_BITS = 3413;
  private static final int GL_PERSPECTIVE_CORRECTION_HINT = 3152;
  private static final int GL_RGBA8_SNORM = 36759;
  private static final int GL_TEXTURE_APPLICATION_MODE_EXT = 33615;
  private static final int GL_PROGRAM_BINARY_LENGTH = 34625;
  private static final int GL_INVARIANT_EXT = 34754;
  private static final int GL_ONE_MINUS_SRC1_ALPHA = 35067;
  private static final int GL_STANDARD_FONT_NAME_NV = 36978;
  private static final int GL_SAMPLE_COVERAGE_INVERT_ARB = 32939;
  private static final int GL_CULL_VERTEX_EXT = 33194;
  private static final int GL_COMPRESSED_SRGB_ALPHA_EXT = 35913;
  private static final int GL_COLOR_ARRAY_STRIDE_EXT = 32899;
  private static final int GL_OUTPUT_TEXTURE_COORD2_EXT = 34719;
  private static final int GL_INT_SAMPLER_1D = 36297;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 37843;
  private static final int GL_RENDERBUFFER_ALPHA_SIZE_OES = 36179;
  private static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 37844;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 37695;
  private static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650;
  private static final int GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618;
  private static final int GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
  private static final int GL_FLOAT_R16_NV = 34948;
  private static final int GL_COLOR_ARRAY_COUNT_EXT = 32900;
  private static final int GL_PIXEL_UNPACK_BUFFER = 35052;
  private static final int GL_SAMPLER_BUFFER_AMD = 36865;
  private static final int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 34098;
  private static final int GL_MAX_DRAW_BUFFERS_EXT = 34852;
  private static final int GL_MAP2_VERTEX_ATTRIB10_4_NV = 34426;
  private static final int GL_T2F_IUI_N3F_V3F_EXT = 33204;
  private static final int GL_FOG_MODE = 2917;
  private static final int GL_DSDT8_MAG8_INTENSITY8_NV = 34571;
  private static final int GL_DEBUG_LOGGED_MESSAGES_ARB = 37189;
  private static final int GL_VERTEX_ATTRIB_ARRAY8_NV = 34392;
  private static final int GL_TEXTURE2_ARB = 33986;
  private static final int GL_LOWER_LEFT = 36001;
  private static final int GL_FORMAT_SUBSAMPLE_24_24_OML = 35202;
  private static final int GL_TEXTURE_COMPRESSION_HINT_ARB = 34031;
  private static final int GL_REGISTER_COMBINERS_NV = 34082;
  private static final int GL_FOG_DISTANCE_MODE_NV = 34138;
  private static final int GL_IMAGE_PIXEL_TYPE = 33450;
  private static final int GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 35055;
  private static final int GL_RENDERBUFFER_HEIGHT = 36163;
  private static final int GL_POLYGON_OFFSET_FILL = 32823;
  private static final int GL_SAMPLE_BUFFERS_ARB = 32936;
  private static final int GL_FOG_COORDINATE_ARRAY = 33879;
  private static final int GL_NORMALIZE = 2977;
  private static final int GL_FOVEATION_ENABLE_BIT_QCOM = 1;
  private static final int GL_BOOL_ARB = 35670;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072;
  private static final int GL_GEOMETRY_SHADER_INVOCATIONS = 34943;
  private static final int GL_LOCAL_CONSTANT_DATATYPE_EXT = 34797;
  private static final int GL_PROGRAM_POINT_SIZE_ARB = 34370;
  private static final int GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;
  private static final int GL_DEPTH_RENDERABLE = 33415;
  private static final int GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053;
  private static final int GL_SAMPLER_2D_SHADOW = 35682;
  private static final int GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
  private static final int GL_DISTANCE_ATTENUATION_EXT = 33065;
  private static final int GL_VERTEX_ARRAY_RANGE_VALID_NV = 34079;
  private static final int GL_TEXTURE_BUFFER_BINDING_EXT = 35882;
  private static final int GL_TANGENT_ARRAY_STRIDE_EXT = 33855;
  private static final int GL_DSDT_MAG_NV = 34550;
  private static final int GL_GEOMETRY_SHADER_ARB = 36313;
  private static final int GL_STENCIL_BACK_OP_VALUE_AMD = 34637;
  private static final int GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676;
  private static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 37067;
  private static final int GL_RESAMPLE_AVERAGE_OML = 35208;
  private static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 33313;
  private static final int GL_ACTIVE_SUBROUTINES = 36325;
  private static final int GL_T2F_C4UB_V3F = 10793;
  private static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224;
  private static final int GL_RGB565 = 36194;
  private static final int GL_INT16_VEC3_NV = 36838;
  private static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188;
  private static final int GL_VERTEX_ELEMENT_SWIZZLE_AMD = 37284;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 37159;
  private static final int GL_TEXTURE_RECTANGLE_ARB = 34037;
  private static final int GL_PIXEL_SUBSAMPLE_2424_SGIX = 34211;
  private static final int GL_SCALE_BY_TWO_NV = 34110;
  private static final int GL_VERTEX_STREAM3_ATI = 34671;
  private static final int GL_MATRIX25_ARB = 35033;
  private static final int GL_MINMAX_FORMAT = 32815;
  private static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;
  private static final int GL_COMBINER3_NV = 34131;
  private static final int GL_BACK_NORMALS_HINT_PGI = 107043;
  private static final int GL_FLOAT_MAT4x3_NV = 35690;
  private static final int GL_TEXTURE_2D_ARRAY = 35866;
  private static final int GL_ABGR_EXT = 32768;
  private static final int GL_PIXEL_PACK_BUFFER = 35051;
  private static final int GL_INTERNALFORMAT_BLUE_TYPE = 33402;
  private static final int GL_SRGB_WRITE = 33432;
  private static final int GL_MAP1_NORMAL = 3474;
  private static final int GL_MAX_VARYING_COMPONENTS_EXT = 35659;
  private static final int GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
  private static final int GL_TESS_EVALUATION_SHADER_OES = 36487;
  private static final int GL_POINT_SIZE_MAX_ARB = 33063;
  private static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 35976;
  private static final int GL_MAX_FRAMEBUFFER_WIDTH = 37653;
  private static final int GL_FRAGMENT_COLOR_EXT = 33612;
  private static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257;
  private static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125;
  private static final int GL_TIMEOUT_EXPIRED = 37147;
  private static final int GL_UNPACK_SKIP_ROWS_EXT = 3315;
  private static final int GL_MAX_ELEMENT_INDEX = 36203;
  private static final int GL_TESS_GEN_SPACING = 36471;
  private static final int GL_FRAGMENT_NORMAL_EXT = 33610;
  private static final int GL_OPERAND0_ALPHA = 34200;
  private static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990;
  private static final int GL_VIRTUAL_PAGE_SIZE_X_ARB = 37269;
  private static final int GL_EVAL_VERTEX_ATTRIB15_NV = 34517;
  private static final int GL_PALETTE4_R5_G6_B5_OES = 35730;
  private static final int GL_YCBYCR8_422_NV = 36913;
  private static final int GL_3DC_X_AMD = 34809;
  private static final int GL_SYNC_FENCE_APPLE = 37142;
  private static final int GL_DUAL_INTENSITY12_SGIS = 33050;
  private static final int GL_REG_13_ATI = 35118;
  private static final int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 33553;
  private static final int GL_MULTISAMPLE_EXT = 32925;
  private static final int GL_UNSIGNED_NORMALIZED = 35863;
  private static final int GL_COLOR_ATTACHMENT15 = 36079;
  private static final int GL_RED_MIN_CLAMP_INGR = 34144;
  private static final int GL_COLOR_ATTACHMENT14 = 36078;
  private static final int GL_DEPTH_CLAMP_NEAR_AMD = 36894;
  private static final int GL_DRAW_FRAMEBUFFER_EXT = 36009;
  private static final int GL_COLOR_ATTACHMENT17 = 36081;
  private static final int GL_COLOR_ATTACHMENT16 = 36080;
  private static final int GL_LEQUAL = 515;
  private static final int GL_VIEW_CLASS_BPTC_UNORM = 33490;
  private static final int GL_COLOR_ATTACHMENT11 = 36075;
  private static final int GL_COLOR_ATTACHMENT10 = 36074;
  private static final int GL_COLOR_ATTACHMENT13 = 36077;
  private static final int GL_COLOR_ATTACHMENT12 = 36076;
  private static final int GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445;
  private static final int GL_EVAL_BIT = 65536;
  private static final int GL_LUMINANCE8_OES = 32832;
  private static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
  private static final int GL_INT_VEC4_ARB = 35669;
  private static final int GL_TEXTURE_GEQUAL_R_SGIX = 33181;
  private static final int GL_LUMINANCE12_ALPHA12_EXT = 32839;
  private static final int GL_LINE_NV = 6913;
  private static final int GL_SAMPLER_2D_SHADOW_EXT = 35682;
  private static final int GL_GREEN_BITS = 3411;
  private static final int GL_ACTIVE_UNIFORMS = 35718;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717;
  private static final int GL_OUTPUT_TEXTURE_COORD19_EXT = 34736;
  private static final int GL_COVERAGE_MODULATION_NV = 37682;
  private static final int GL_CLIPPING_INPUT_PRIMITIVES_ARB = 33526;
  private static final int GL_TEXTURE12_ARB = 33996;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36879;
  private static final int GL_DOUBLEBUFFER = 3122;
  private static final int GL_RED_BITS = 3410;
  private static final int GL_R16 = 33322;
  private static final int GL_COLOR_ATTACHMENT26 = 36090;
  private static final int GL_SOURCE0_ALPHA_ARB = 34184;
  private static final int GL_COLOR_ATTACHMENT25 = 36089;
  private static final int GL_COLOR_ATTACHMENT28 = 36092;
  private static final int GL_COLOR_ATTACHMENT27 = 36091;
  private static final int GL_COLOR_ATTACHMENT22 = 36086;
  private static final int GL_COLOR_ATTACHMENT21 = 36085;
  private static final int GL_RGB2_EXT = 32846;
  private static final int GL_PROGRAM_PARAMETERS_ARB = 34984;
  private static final int GL_COLOR_ATTACHMENT24 = 36088;
  private static final int GL_COLOR_ATTACHMENT23 = 36087;
  private static final int GL_SYSTEM_FONT_NAME_NV = 36979;
  private static final int GL_COLOR_ATTACHMENT20 = 36084;
  private static final int GL_TEXTURE19_ARB = 34003;
  private static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;
  private static final int GL_LIGHT_MODEL_AMBIENT = 2899;
  private static final int GL_OFFSET_TEXTURE_RECTANGLE_NV = 34380;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 33160;
  private static final int GL_SHADER_IMAGE_STORE = 33445;
  private static final int GL_DEPTH_STENCIL_TO_BGRA_NV = 34927;
  private static final int GL_COLOR_ATTACHMENT19 = 36083;
  private static final int GL_COLOR_ATTACHMENT18 = 36082;
  private static final int GL_DUAL_ALPHA4_SGIS = 33040;
  private static final int GL_MAX_RENDERBUFFER_SIZE_OES = 34024;
  private static final int GL_TEXTURE_DEPTH_TYPE = 35862;
  private static final int GL_RENDERBUFFER_BINDING_OES = 36007;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867;
  private static final int GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2;
  private static final int GL_SAMPLER_1D_ARRAY_EXT = 36288;
  private static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 256;
  private static final int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452;
  private static final int GL_COMPRESSED_RG = 33318;
  private static final int GL_CON_27_ATI = 35164;
  private static final int GL_COLOR_ATTACHMENT31 = 36095;
  private static final int GL_SHADER_STORAGE_BUFFER_SIZE = 37077;
  private static final int GL_PROXY_TEXTURE_2D_EXT = 32868;
  private static final int GL_COLOR_ATTACHMENT30 = 36094;
  private static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930;
  private static final int GL_STENCIL_BUFFER_BIT1_QCOM = 131072;
  private static final int GL_FRAMEBUFFER_COMPLETE_EXT = 36053;
  private static final int GL_CONVOLUTION_1D = 32784;
  private static final int GL_DEPTH_PASS_INSTRUMENT_SGIX = 33552;
  private static final int GL_OUTPUT_COLOR0_EXT = 34715;
  private static final int GL_BUFFER_MAPPED_ARB = 35004;
  private static final int GL_VARIANT_ARRAY_TYPE_EXT = 34791;
  private static final int GL_DRAW_BUFFER6_NV = 34859;
  private static final int GL_OPERAND3_RGB_NV = 34195;
  private static final int GL_COLOR_ENCODING = 33430;
  private static final int GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 37073;
  private static final int GL_GLOBAL_ALPHA_SUN = 33241;
  private static final int GL_COLOR_ATTACHMENT29 = 36093;
  private static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975;
  private static final int GL_MAX_NAME_STACK_DEPTH = 3383;
  private static final int GL_SELECTION_BUFFER_SIZE = 3572;
  private static final int GL_VIDEO_BUFFER_PITCH_NV = 36904;
  private static final int GL_VERTEX_BINDING_BUFFER = 36687;
  private static final int GL_BLEND_DST_ALPHA_EXT = 32970;
  private static final int GL_TEXTURE_WRAP_R = 32882;
  private static final int GL_TEXTURE_WRAP_S = 10242;
  private static final int GL_DEPTH_COMPONENT = 6402;
  private static final int GL_NUM_GENERAL_COMBINERS_NV = 34126;
  private static final int GL_DRAW_BUFFER7_EXT = 34860;
  private static final int GL_TEXTURE_WRAP_T = 10243;
  private static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987;
  private static final int GL_TEXTURE28_ARB = 34012;
  private static final int GL_CLEAR_BUFFER = 33460;
  private static final int GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090;
  private static final int GL_COLOR_SAMPLES_NV = 36384;
  private static final int GL_IS_PER_PATCH = 37607;
  private static final int GL_UNSIGNED_SHORT_8_8_REV_MESA = 34235;
  private static final int GL_LUID_SIZE_EXT = 8;
  private static final int GL_MODULATE_ADD_ATI = 34628;
  private static final int GL_COVERAGE_SAMPLES_NV = 36564;
  private static final int GL_NUM_LOOPBACK_COMPONENTS_ATI = 35188;
  private static final int GL_INTENSITY8_EXT = 32843;
  private static final int GL_TRIANGULAR_NV = 37029;
  private static final int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318;
  private static final int GL_FRACTIONAL_ODD_OES = 36475;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 36051;
  private static final int GL_CONTEXT_ROBUST_ACCESS_EXT = 37107;
  private static final int GL_TEXTURE_2D = 3553;
  private static final int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 34371;
  private static final int GL_ACTIVE_VERTEX_UNITS_ARB = 34469;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182;
  private static final int GL_MATRIX12_ARB = 35020;
  private static final int GL_NO_RESET_NOTIFICATION_KHR = 33377;
  private static final int GL_COLOR_TABLE_RED_SIZE = 32986;
  private static final int GL_INT8_NV = 36832;
  private static final int GL_VIEWPORT_SUBPIXEL_BITS = 33372;
  private static final int GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142;
  private static final int GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131;
  private static final int GL_COLOR_MATRIX = 32945;
  private static final int GL_QUERY_COUNTER_BITS_ARB = 34916;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 37710;
  private static final int GL_ALREADY_SIGNALED = 37146;
  private static final int GL_TEXTURE_COMPARE_FUNC_EXT = 34893;
  private static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 35372;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 33159;
  private static final int GL_SHADER_BINARY_FORMAT_SPIR_V = 38225;
  private static final int GL_REG_22_ATI = 35127;
  private static final int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921;
  private static final int GL_QUERY_BUFFER_BINDING = 37267;
  private static final int GL_TEXTURE_1D = 3552;
  private static final int GL_HISTOGRAM_FORMAT_EXT = 32807;
  private static final int GL_TEXTURE_INTERNAL_FORMAT = 4099;
  private static final int GL_OBJECT_PLANE = 9473;
  private static final int GL_DEBUG_TYPE_OTHER_ARB = 33361;
  private static final int GL_MAX_NAME_LENGTH = 37622;
  private static final int GL_DIFFERENCE_NV = 37534;
  private static final int GL_ACTIVE_TEXTURE = 34016;
  private static final int GL_FOG_COORDINATE_ARRAY_POINTER = 33878;
  private static final int GL_DRAW_INDIRECT_LENGTH_NV = 36674;
  private static final int GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382;
  private static final int GL_TEXTURE_NUM_LEVELS_QCOM = 35801;
  private static final int GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179;
  private static final int GL_INNOCENT_CONTEXT_RESET_EXT = 33364;
  private static final int GL_TRANSFORM_BIT = 4096;
  private static final int GL_GENERATE_MIPMAP_SGIS = 33169;
  private static final int GL_UNIFORM = 37601;
  private static final int GL_SCISSOR_BIT = 524288;
  private static final int GL_FILTER = 33434;
  private static final int GL_DRAW_BUFFER12_NV = 34865;
  private static final int GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467;
  private static final int GL_MAP1_TEXTURE_COORD_3 = 3477;
  private static final int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 32957;
  private static final int GL_MAP1_TEXTURE_COORD_2 = 3476;
  private static final int GL_COPY_INVERTED = 5388;
  private static final int GL_MAP1_TEXTURE_COORD_4 = 3478;
  private static final int GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253;
  private static final int GL_PATH_GEN_MODE_NV = 37040;
  private static final int GL_MAP1_TEXTURE_COORD_1 = 3475;
  private static final int GL_COLOR = 6144;
  private static final int GL_PACK_COMPRESSED_SIZE_SGIX = 33564;
  private static final int GL_MATRIX0_ARB = 35008;
  private static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;
  private static final int GL_TEXTURE_DT_SIZE_NV = 34590;
  private static final int GL_RG8_SNORM = 36757;
  private static final int GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899;
  private static final int GL_PATH_STROKE_BOUNDING_BOX_NV = 37026;
  private static final int GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
  private static final int GL_BUFFER_USAGE = 34661;
  private static final int GL_HISTOGRAM_EXT = 32804;
  private static final int GL_OBJECT_BUFFER_SIZE_ATI = 34660;
  private static final int GL_PATH_INITIAL_END_CAP_NV = 36983;
  private static final int GL_TESS_EVALUATION_SHADER_BIT_OES = 16;
  private static final int GL_LUMINANCE_ALPHA32UI_EXT = 36213;
  private static final int GL_TEXTURE_3D = 32879;
  private static final int GL_GREEN = 6404;
  private static final int GL_SAMPLE_LOCATION_NV = 36432;
  private static final int GL_INT_SAMPLER_2D_RECT = 36301;
  private static final int GL_ALPHA_BIAS = 3357;
  private static final int GL_LAYOUT_TRANSFER_DST_EXT = 38291;
  private static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 34941;
  private static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;
  private static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
  private static final int GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 35412;
  private static final int GL_SMOOTH = 7425;
  private static final int GL_LINE_LOOP = 2;
  private static final int GL_VIEWPORT_SWIZZLE_Y_NV = 37721;
  private static final int GL_LUMINANCE4_EXT = 32831;
  private static final int GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 37099;
  private static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762;
  private static final int GL_TEXTURE_CUBE_MAP_EXT = 34067;
  private static final int GL_TEXTURE30_ARB = 34014;
  private static final int GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 36708;
  private static final int GL_SHADER_OBJECT_ARB = 35656;
  private static final int GL_ROUNDED_RECT8_NV = 238;
  private static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397;
  private static final int GL_PACK_CMYK_HINT_EXT = 32782;
  private static final int GL_TIMEOUT_EXPIRED_APPLE = 37147;
  private static final int GL_PACK_SKIP_VOLUMES_SGIS = 33072;
  private static final int GL_PROGRAM_KHR = 33506;
  private static final int GL_PROGRAM_BINDING_ARB = 34423;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877;
  private static final int GL_TRIANGLE_FAN = 6;
  private static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;
  private static final int GL_HSL_COLOR_KHR = 37551;
  private static final int GL_CONSTANT_ALPHA_EXT = 32771;
  private static final int GL_ALPHA16F_ARB = 34844;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979;
  private static final int GL_RENDERBUFFER_DEPTH_SIZE = 36180;
  private static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645;
  private static final int GL_DEBUG_SEVERITY_MEDIUM_ARB = 37191;
  private static final int GL_VIEW_COMPATIBILITY_CLASS = 33462;
  private static final int GL_NEGATIVE_X_EXT = 34777;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951;
  private static final int GL_READ_FRAMEBUFFER_BINDING_NV = 36010;
  private static final int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801;
  private static final int GL_IMAGE_CLASS_2_X_16 = 33469;
  private static final int GL_FRAGMENT_SHADER_ATI = 35104;
  private static final int GL_BOOL_VEC4 = 35673;
  private static final int GL_BOOL_VEC3 = 35672;
  private static final int GL_ADJACENT_PAIRS_NV = 37038;
  private static final int GL_BOOL_VEC2 = 35671;
  private static final int GL_NUM_SAMPLE_COUNTS = 37760;
  private static final int GL_TRANSFORM_FEEDBACK_NV = 36386;
  private static final int GL_TANGENT_ARRAY_TYPE_EXT = 33854;
  private static final int GL_COMBINER0_NV = 34128;
  private static final int GL_3_BYTES_NV = 5128;
  private static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36446;
  private static final int GL_COLOR_TABLE_ALPHA_SIZE_SGI = 32989;
  private static final int GL_BUFFER_KHR = 33504;
  private static final int GL_MAX_PROGRAM_PARAMETERS_ARB = 34985;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264;
  private static final int GL_DECR_WRAP = 34056;
  private static final int GL_BUFFER_STORAGE_FLAGS = 33312;
  private static final int GL_SHADER_TYPE = 35663;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306;
  private static final int GL_FRAGMENT_SHADER_BIT_EXT = 2;
  private static final int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
  private static final int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916;
  private static final int GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284;
  private static final int GL_BINORMAL_ARRAY_EXT = 33850;
  private static final int GL_SIGNED_HILO8_NV = 34911;
  private static final int GL_OBJECT_LINEAR = 9217;
  private static final int GL_R1UI_T2F_N3F_V3F_SUN = 34250;
  private static final int GL_ACTIVE_ATTRIBUTES = 35721;
  private static final int GL_MAX_TEXTURE_COORDS_NV = 34929;
  private static final int GL_MAP2_VERTEX_ATTRIB5_4_NV = 34421;
  private static final int GL_INT_SAMPLER_1D_ARRAY_EXT = 36302;
  private static final int GL_POLYGON_OFFSET_CLAMP_EXT = 36379;
  private static final int GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
  private static final int GL_STATIC_COPY_ARB = 35046;
  private static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
  private static final int GL_TEXTURE_SPARSE_ARB = 37286;
  private static final int GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938;
  private static final int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148;
  private static final int GL_EVAL_VERTEX_ATTRIB3_NV = 34505;
  private static final int GL_SLUMINANCE_ALPHA_EXT = 35908;
  private static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;
  private static final int GL_TABLE_TOO_LARGE_EXT = 32817;
  private static final int GL_4PASS_2_EXT = 32934;
  private static final int GL_GEOMETRY_OUTPUT_TYPE = 35096;
  private static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351;
  private static final int GL_RECLAIM_MEMORY_HINT_PGI = 107006;
  private static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068;
  private static final int GL_UNSIGNED_SHORT_15_1_MESA = 34643;
  private static final int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742;
  private static final int GL_IMAGE_CLASS_2_X_32 = 33466;
  private static final int GL_POINT_SPRITE_NV = 34913;
  private static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
  private static final int GL_GET_TEXTURE_IMAGE_TYPE = 33426;
  private static final int GL_CMYKA_EXT = 32781;
  private static final int GL_INT_VEC4 = 35669;
  private static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341;
  private static final int GL_INT_VEC2 = 35667;
  private static final int GL_BUFFER_ACCESS_FLAGS = 37151;
  private static final int GL_INT_VEC3 = 35668;
  private static final int GL_DEPTH24_STENCIL8_EXT = 35056;
  private static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;
  private static final int GL_WAIT_FAILED_APPLE = 37149;
  private static final int GL_MATRIX29_ARB = 35037;
  private static final int GL_LINE_QUALITY_HINT_SGIX = 33627;
  private static final int GL_MAX_SAMPLES_APPLE = 36183;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714;
  private static final int GL_WEIGHT_ARRAY_STRIDE_OES = 34474;
  private static final int GL_RGB16UI = 36215;
  private static final int GL_VERTEX_ATTRIB_ARRAY14_NV = 34398;
  private static final int GL_DS_SCALE_NV = 34576;
  private static final int GL_SAMPLER_2D_RECT_SHADOW = 35684;
  private static final int GL_SAMPLE_MASK_NV = 36433;
  private static final int GL_LUMINANCE8_ALPHA8 = 32837;
  private static final int GL_SURFACE_MAPPED_NV = 34560;
  private static final int GL_UNSIGNED_BYTE_3_3_2 = 32818;
  private static final int GL_IMAGE_CLASS_11_11_10 = 33474;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 35881;
  private static final int GL_DRAW_BUFFER9_ATI = 34862;
  private static final int GL_CURRENT_INDEX = 2817;
  private static final int GL_REFLECTION_MAP_EXT = 34066;
  private static final int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908;
  private static final int GL_CLIP_DISTANCE7_EXT = 12295;
  private static final int GL_ONE_MINUS_SRC1_ALPHA_EXT = 35067;
  private static final int GL_FOG_DENSITY = 2914;
  private static final int GL_TEXTURE_3D_OES = 32879;
  private static final int GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
  private static final int GL_OBJECT_TYPE = 37138;
  private static final int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950;
  private static final int GL_RELATIVE_CONIC_CURVE_TO_NV = 27;
  private static final int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901;
  private static final int GL_BOOL_VEC2_ARB = 35671;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;
  private static final int GL_CONTEXT_CORE_PROFILE_BIT = 1;
  private static final int GL_CONVOLUTION_2D = 32785;
  private static final int GL_QUERY_RESULT_AVAILABLE_EXT = 34919;
  private static final int GL_MAP_COLOR = 3344;
  private static final int GL_ARRAY_SIZE = 37627;
  private static final int GL_INTERNALFORMAT_DEPTH_TYPE = 33404;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;
  private static final int GL_BGRA_INTEGER_EXT = 36251;
  private static final int GL_STENCIL_FAIL = 2964;
  private static final int GL_GUILTY_CONTEXT_RESET = 33363;
  private static final int GL_DEBUG_PRINT_MESA = 34650;
  private static final int GL_DEBUG_TYPE_POP_GROUP_KHR = 33386;
  private static final int GL_COLOR_ATTACHMENT14_NV = 36078;
  private static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466;
  private static final int GL_COLOR_ATTACHMENT7_NV = 36071;
  private static final int GL_LUMINANCE_ALPHA16UI_EXT = 36219;
  private static final int GL_RGB16_SNORM_EXT = 36762;
  private static final int GL_TESSELLATION_MODE_AMD = 36868;
  private static final int GL_DRAW_BUFFER9_ARB = 34862;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 36874;
  private static final int GL_AVERAGE_HP = 33120;
  private static final int GL_FLOAT16_MAT4_AMD = 37319;
  private static final int GL_RENDERBUFFER_SAMPLES_EXT = 36011;
  private static final int GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 33524;
  private static final int GL_UNPACK_SKIP_VOLUMES_SGIS = 33074;
  private static final int GL_MAP2_GRID_DOMAIN = 3538;
  private static final int GL_ARRAY_BUFFER_BINDING_ARB = 34964;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;
  private static final int GL_INT_IMAGE_1D_ARRAY_EXT = 36957;
  private static final int GL_WEIGHT_ARRAY_SIZE_OES = 34475;
  private static final int GL_LOCAL_EXT = 34756;
  private static final int GL_INTENSITY_FLOAT32_APPLE = 34839;
  private static final int GL_MATRIX_INDEX_ARRAY_ARB = 34884;
  private static final int GL_MAX_IMAGE_SAMPLES = 36973;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 37583;
  private static final int GL_MAX_CONVOLUTION_HEIGHT_EXT = 32795;
  private static final int GL_COMBINE_ALPHA = 34162;
  private static final int GL_OPERAND2_RGB_ARB = 34194;
  private static final int GL_FLOAT_RGB16_NV = 34952;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;
  private static final int GL_DRIVER_UUID_EXT = 38296;
  private static final int GL_VIEW_CLASS_32_BITS = 33480;
  private static final int GL_ADD_ATI = 35171;
  private static final int GL_COLOR_BUFFER_BIT3_QCOM = 8;
  private static final int GL_REPLACEMENT_CODE_ARRAY_SUN = 34240;
  private static final int GL_MATRIX1_NV = 34353;
  private static final int GL_COMPUTE_SUBROUTINE_UNIFORM = 37619;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071;
  private static final int GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 33502;
  private static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;
  private static final int GL_MAX_SAMPLES_EXT = 36183;
  private static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980;
  private static final int GL_CLAMP_READ_COLOR_ARB = 35100;
  private static final int GL_SIGNED_IDENTITY_NV = 34108;
  private static final int GL_UNSIGNED_INT_VEC4 = 36296;
  private static final int GL_C4UB_V2F = 10786;
  private static final int GL_FRAMEBUFFER_COMPLETE = 36053;
  private static final int GL_DEBUG_SOURCE_OTHER = 33355;
  private static final int GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19;
  private static final int GL_ALIASED_LINE_WIDTH_RANGE = 33902;
  private static final int GL_BUMP_ROT_MATRIX_ATI = 34677;
  private static final int GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717;
  private static final int GL_INDEX_MATERIAL_PARAMETER_EXT = 33209;
  private static final int GL_SWIZZLE_STQ_DQ_ATI = 35193;
  private static final int GL_MAP_ATTRIB_V_ORDER_NV = 34500;
  private static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445;
  private static final int GL_T2F_IUI_V2F_EXT = 33201;
  private static final int GL_MODELVIEW31_ARB = 34623;
  private static final int GL_INT_IMAGE_CUBE_EXT = 36955;
  private static final int GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410;
  private static final int GL_TEXTURE_VIEW_MIN_LAYER_EXT = 33501;
  private static final int GL_MODELVIEW1_EXT = 34058;
  private static final int GL_CON_23_ATI = 35160;
  private static final int GL_NUM_SHADER_BINARY_FORMATS = 36345;
  private static final int GL_INT_IMAGE_1D_EXT = 36951;
  private static final int GL_LUMINANCE32I_EXT = 36230;
  private static final int GL_ISOLINES = 36474;
  private static final int GL_PATH_FILL_MASK_NV = 36993;
  private static final int GL_DEBUG_CATEGORY_APPLICATION_AMD = 37199;
  private static final int GL_DEBUG_TYPE_PORTABILITY_ARB = 33359;
  private static final int GL_STACK_OVERFLOW_KHR = 1283;
  private static final int GL_DARKEN = 37527;
  private static final int GL_UNSIGNED_INT_VEC3 = 36295;
  private static final int GL_UNSIGNED_INT_VEC2 = 36294;
  private static final int GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 37287;
  private static final int GL_IMAGE_BINDING_NAME_EXT = 36666;
  private static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
  private static final int GL_BINORMAL_ARRAY_STRIDE_EXT = 33857;
  private static final int GL_SMALL_CCW_ARC_TO_NV = 18;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577;
  private static final int GL_HISTOGRAM_FORMAT = 32807;
  private static final int GL_CLAMP_TO_BORDER_OES = 33069;
  private static final int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784;
  private static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922;
  private static final int GL_COPY_READ_BUFFER = 36662;
  private static final int GL_PATH_STROKE_MASK_NV = 36996;
  private static final int GL_DOWNSAMPLE_SCALES_IMG = 37182;
  private static final int GL_PROXY_TEXTURE_1D_STACK_MESAX = 34651;
  private static final int GL_SLUMINANCE_ALPHA_NV = 35908;
  private static final int GL_STENCIL_PASS_DEPTH_PASS = 2966;
  private static final int GL_QUERY_COUNTER_BITS = 34916;
  private static final int GL_LAYOUT_SHADER_READ_ONLY_EXT = 38289;
  private static final int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 36966;
  private static final int GL_FEEDBACK = 7169;
  private static final int GL_MAX_SERVER_WAIT_TIMEOUT = 37137;
  private static final int GL_QUADS_EXT = 7;
  private static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;
  private static final int GL_POINT_SIZE_MIN_EXT = 33062;
  private static final int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 34886;
  private static final int GL_MAX_PATCH_VERTICES_OES = 36477;
  private static final int GL_SCALE_BY_ONE_HALF_NV = 34112;
  private static final int GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
  private static final int GL_LUMINANCE8 = 32832;
  private static final int GL_FRONT_AND_BACK = 1032;
  private static final int GL_FLOAT_RG16_NV = 34950;
  private static final int GL_POINT_SIZE_MAX_SGIS = 33063;
  private static final int GL_LUMINANCE4 = 32831;
  private static final int GL_TEXTURE_WRAP_R_OES = 32882;
  private static final int GL_POINT_SIZE_ARRAY_POINTER_OES = 35212;
  private static final int GL_AUX_BUFFERS = 3072;
  private static final int GL_LUMINANCE_ALPHA32F_EXT = 34841;
  private static final int GL_LUMINANCE_ALPHA = 6410;
  private static final int GL_XOR = 5382;
  private static final int GL_UNSIGNED_INT_24_8_NV = 34042;
  private static final int GL_FENCE_APPLE = 35339;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 37694;
  private static final int GL_BUFFER = 33504;
  private static final int GL_COPY = 5379;
  private static final int GL_QUADRATIC_CURVE_TO_NV = 10;
  private static final int GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 34871;
  private static final int GL_SAMPLES_ARB = 32937;
  private static final int GL_SLIM10U_SGIX = 33566;
  private static final int GL_SAMPLER_2D_MULTISAMPLE = 37128;
  private static final int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008;
  private static final int GL_C4UB_V3F = 10787;
  private static final int GL_RGBA_S3TC = 33698;
  private static final int GL_CURRENT_BINORMAL_EXT = 33852;
  private static final int GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 4;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY = 13;
  private static final int GL_VERTEX_BLEND_ARB = 34471;
  private static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972;
  private static final int GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;
  private static final int GL_MAX_VIEWS_OVR = 38449;
  private static final int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 33157;
  private static final int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802;
  private static final int GL_PASS_THROUGH_TOKEN = 1792;
  private static final int GL_TEXTURE_BASE_LEVEL_SGIS = 33084;
  private static final int GL_MODELVIEW16_ARB = 34608;
  private static final int GL_POINT_SPRITE_ARB = 34913;
  private static final int GL_SHADER = 33505;
  private static final int GL_REG_26_ATI = 35131;
  private static final int GL_SOFTLIGHT = 37532;
  private static final int GL_MAP_READ_BIT_EXT = 1;
  private static final int GL_OP_POWER_EXT = 34707;
  private static final int GL_CIRCULAR_CW_ARC_TO_NV = 250;
  private static final int GL_PROGRAM = 33506;
  private static final int GL_IMAGE_ROTATE_ORIGIN_Y_HP = 33115;
  private static final int GL_COMBINER_MAPPING_NV = 34115;
  private static final int GL_NOOP = 5381;
  private static final int GL_RGBA_SNORM = 36755;
  private static final int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959;
  private static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 36495;
  private static final int GL_PATH_STROKE_WIDTH_NV = 36981;
  private static final int GL_UNPACK_ROW_LENGTH = 3314;
  private static final int GL_VERTEX_ATTRIB_ARRAY5_NV = 34389;
  private static final int GL_LINE_STIPPLE = 2852;
  private static final int GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 37167;
  private static final int GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 37272;
  private static final int GL_TRACE_PRIMITIVES_BIT_MESA = 2;
  private static final int GL_R8_SNORM = 36756;
  private static final int GL_RELATIVE_ROUNDED_RECT2_NV = 235;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 33161;
  private static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;
  private static final int GL_COMBINER_CD_OUTPUT_NV = 34123;
  private static final int GL_DEPTH_COMPONENT32F_NV = 36267;
  private static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 34974;
  private static final int GL_OUT_OF_MEMORY = 1285;
  private static final int GL_CON_8_ATI = 35145;
  private static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947;
  private static final int GL_CONSTANT_BORDER = 33105;
  private static final int GL_DEPTH_BUFFER_BIT6_QCOM = 16384;
  private static final int GL_DUAL_TEXTURE_SELECT_SGIS = 33060;
  private static final int GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 35094;
  private static final int GL_UNSIGNED_INT_2_10_10_10_REV = 33640;
  private static final int GL_DOUBLE_MAT3x4 = 36684;
  private static final int GL_UNSIGNED_INT16_NV = 36848;
  private static final int GL_DOUBLE_MAT3x2 = 36683;
  private static final int GL_NONE = 0;
  private static final int GL_TYPE = 37626;
  private static final int GL_SIGNALED = 37145;
  private static final int GL_DRAW_FRAMEBUFFER_ANGLE = 36009;
  private static final int GL_MINMAX = 32814;
  private static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;
  private static final int GL_UNSIGNED_INT_8_8_8_8 = 32821;
  private static final int GL_TEXTURE_IMAGE_VALID_QCOM = 35800;
  private static final int GL_ALPHA = 6406;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;
  private static final int GL_UNSIGNED_INT_8_8_8_8_REV = 33639;
  private static final int GL_COMBINER6_NV = 34134;
  private static final int GL_DONT_CARE = 4352;
  private static final int GL_DUAL_LUMINANCE16_SGIS = 33047;
  private static final int GL_EYE_LINE_SGIS = 33270;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589;
  private static final int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459;
  private static final int GL_READ_ONLY_ARB = 35000;
  private static final int GL_TEXTURE_CUBE_MAP_OES = 34067;
  private static final int GL_MAP2_VERTEX_4 = 3512;
  private static final int GL_MAP2_VERTEX_3 = 3511;
  private static final int GL_TEXTURE25_ARB = 34009;
  private static final int GL_MAX_COLOR_ATTACHMENTS_NV = 36063;
  private static final int GL_COLOR4_BIT_PGI = 131072;
  private static final int GL_R1UI_C3F_V3F_SUN = 34246;
  private static final int GL_INTENSITY32UI_EXT = 36211;
  private static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981;
  private static final int GL_COLORDODGE_KHR = 37529;
  private static final int GL_W_EXT = 34776;
  private static final int GL_TEXTURE_BUFFER_BINDING_OES = 35882;
  private static final int GL_LAYOUT_GENERAL_EXT = 38285;
  private static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 34040;
  private static final int GL_CLIP_ORIGIN_EXT = 37724;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x5 = 37810;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x4 = 37809;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY_OES = 13;
  private static final int GL_COMPRESSED_LUMINANCE_LATC1_EXT = 35952;
  private static final int GL_POINT_TOKEN = 1793;
  private static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358;
  private static final int GL_SAMPLER_2D_ARRAY_SHADOW_NV = 36292;
  private static final int GL_INTENSITY4_EXT = 32842;
  private static final int GL_CLAMP_TO_BORDER_NV = 33069;
  private static final int GL_MINMAX_EXT = 32814;
  private static final int GL_SLUMINANCE8_ALPHA8_EXT = 35909;
  private static final int GL_OFFSET_TEXTURE_BIAS_NV = 34531;
  private static final int GL_LUMINANCE16F_EXT = 34846;
  private static final int GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
  private static final int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;
  private static final int GL_DEPTH_WRITEMASK = 2930;
  private static final int GL_CONSTANT_ARB = 34166;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE_OES = 35883;
  private static final int GL_SRC_OVER_NV = 37512;
  private static final int GL_COMBINE_RGB = 34161;
  private static final int GL_EYE_RADIAL_NV = 34139;
  private static final int GL_VIEWPORT_SUBPIXEL_BITS_NV = 33372;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
  private static final int GL_TEXTURE_LOD_BIAS_S_SGIX = 33166;
  private static final int GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627;
  private static final int GL_FUNC_REVERSE_SUBTRACT = 32779;
  private static final int GL_POST_CONVOLUTION_GREEN_BIAS = 32801;
  private static final int GL_OUTPUT_TEXTURE_COORD29_EXT = 34746;
  private static final int GL_PROJECTION_STACK_DEPTH = 2980;
  private static final int GL_UNPACK_SKIP_ROWS = 3315;
  private static final int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 34905;
  private static final int GL_STENCIL_INDEX4 = 36167;
  private static final int GL_TEXTURE_DS_SIZE_NV = 34589;
  private static final int GL_PERFORMANCE_MONITOR_AMD = 37202;
  private static final int GL_VERTEX_PRECLIP_SGIX = 33774;
  private static final int GL_STENCIL_INDEX1 = 36166;
  private static final int GL_RENDERBUFFER_RED_SIZE_OES = 36176;
  private static final int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782;
  private static final int GL_USE_MISSING_GLYPH_NV = 37034;
  private static final int GL_TEXTURE_GEN_STR_OES = 36192;
  private static final int GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617;
  private static final int GL_RENDERER = 7937;
  private static final int GL_UNIFORM_OFFSET = 35387;
  private static final int GL_CON_13_ATI = 35150;
  private static final int GL_TESS_GEN_POINT_MODE = 36473;
  private static final int GL_MODELVIEW3_ARB = 34595;
  private static final int GL_DRAW_BUFFER6_ARB = 34859;
  private static final int GL_DEBUG_TYPE_PERFORMANCE = 33360;
  private static final int GL_DS_BIAS_NV = 34582;
  private static final int GL_PACK_SUBSAMPLE_RATE_SGIX = 34208;
  private static final int GL_TEXTURE_TILING_EXT = 38272;
  private static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;
  private static final int GL_INT_SAMPLER_BUFFER = 36304;
  private static final int GL_DRAW_BUFFER9_NV = 34862;
  private static final int GL_COMPRESSED_RG_RGTC2 = 36285;
  private static final int GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 67108864;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464;
  private static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 33375;
  private static final int GL_STENCIL_INDEX8 = 36168;
  private static final int GL_ALWAYS_SOFT_HINT_PGI = 107021;
  private static final int GL_REPLICATE_BORDER_HP = 33107;
  private static final int GL_COLOR_BUFFER_BIT4_QCOM = 16;
  private static final int GL_TEXTURE_RANGE_POINTER_APPLE = 34232;
  private static final int GL_MAX_PIXEL_MAP_TABLE = 3380;
  private static final int GL_MAX_ELEMENTS_VERTICES_EXT = 33000;
  private static final int GL_WRITE_ONLY_OES = 35001;
  private static final int GL_STEREO = 3123;
  private static final int GL_DOT3_ATI = 35174;
  private static final int GL_STATIC_DRAW = 35044;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
  private static final int GL_CLIP_PLANE4_IMG = 12292;
  private static final int GL_SOURCE2_RGB_ARB = 34178;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;
  private static final int GL_SOFTLIGHT_NV = 37532;
  private static final int GL_COPY_READ_BUFFER_BINDING = 36662;
  private static final int GL_UTF16_NV = 37019;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 37581;
  private static final int GL_POINTS = 0;
  private static final int GL_LIGHTING = 2896;
  private static final int GL_DOT3_RGBA_IMG = 34479;
  private static final int GL_MIRRORED_REPEAT_OES = 33648;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312;
  private static final int GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 36469;
  private static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 34924;
  private static final int GL_FACTOR_ALPHA_MODULATE_IMG = 35847;
  private static final int GL_LUMINANCE8_EXT = 32832;
  private static final int GL_UNPACK_SWAP_BYTES = 3312;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;
  private static final int GL_SYNC_FLUSH_COMMANDS_BIT = 1;
  private static final int GL_STENCIL_BUFFER_BIT7_QCOM = 8388608;
  private static final int GL_RGB_SNORM = 36754;
  private static final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738;
  private static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067;
  private static final int GL_DEPTH_COMPONENT32_OES = 33191;
  private static final int GL_STORAGE_CACHED_APPLE = 34238;
  private static final int GL_PIXEL_UNPACK_BUFFER_NV = 35052;
  private static final int GL_MAP1_VERTEX_ATTRIB10_4_NV = 34410;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879;
  private static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;
  private static final int GL_AVERAGE_EXT = 33589;
  private static final int GL_UNIFORM_BUFFER_UNIFIED_NV = 37742;
  private static final int GL_VERTEX_PROGRAM_TWO_SIDE = 34371;
  private static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;
  private static final int GL_COVERAGE_COMPONENT4_NV = 36561;
  private static final int GL_INT_SAMPLER_BUFFER_AMD = 36866;
  private static final int GL_BUMP_ROT_MATRIX_SIZE_ATI = 34678;
  private static final int GL_NUM_PASSES_ATI = 35184;
  private static final int GL_TEXTURE_SHARED_SIZE_EXT = 35903;
  private static final int GL_PACK_SKIP_IMAGES_EXT = 32875;
  private static final int GL_DRAW_BUFFER6_ATI = 34859;
  private static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
  private static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
  private static final int GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141;
  private static final int GL_SLUMINANCE = 35910;
  private static final int GL_REG_2_ATI = 35107;
  private static final int GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 38217;
  private static final int GL_LOCATION_INDEX = 37647;
  private static final int GL_DEBUG_CATEGORY_DEPRECATION_AMD = 37195;
  private static final int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 32977;
  private static final int GL_SRC0_RGB = 34176;
  private static final int GL_HISTOGRAM_GREEN_SIZE_EXT = 32809;
  private static final int GL_MAX_CONVOLUTION_HEIGHT = 32795;
  private static final int GL_CONSTANT_NV = 34166;
  private static final int GL_SWIZZLE_STR_ATI = 35190;
  private static final int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333;
  private static final int GL_DRAW_BUFFER11_EXT = 34864;
  private static final int GL_CLIP_DISTANCE3_EXT = 12291;
  private static final int GL_PIXEL_TILE_HEIGHT_SGIX = 33089;
  private static final int GL_ALL_STATIC_DATA_IBM = 103060;
  private static final int GL_HISTOGRAM_WIDTH = 32806;
  private static final int GL_DEPTH_RANGE = 2928;
  private static final int GL_ACCUM_ALPHA_BITS = 3419;
  private static final int GL_PERFQUERY_COUNTER_RAW_INTEL = 38132;
  private static final int GL_DEVICE_LUID_EXT = 38297;
  private static final int GL_SAMPLE_COVERAGE_ARB = 32928;
  private static final int GL_MAX_CLIP_PLANES = 3378;
  private static final int GL_PHONG_HINT_WIN = 33003;
  private static final int GL_GEOMETRY_VERTICES_OUT = 35094;
  private static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274;
  private static final int GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
  private static final int GL_BLUE = 6405;
  private static final int GL_LINES_ADJACENCY_OES = 10;
  private static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;
  private static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;
  private static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
  private static final int GL_FRAMEBUFFER_UNSUPPORTED = 36061;
  private static final int GL_MODELVIEW1_STACK_DEPTH_EXT = 34050;
  private static final int GL_CURRENT_RASTER_POSITION = 2823;
  private static final int GL_INDEX_ARRAY_EXT = 32887;
  private static final int GL_DRAW_BUFFER13_ARB = 34866;
  private static final int GL_INT8_VEC2_NV = 36833;
  private static final int GL_LINE_TOKEN = 1794;
  private static final int GL_PATCHES = 14;
  private static final int GL_CURRENT_PALETTE_MATRIX_ARB = 34883;
  private static final int GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;
  private static final int GL_FRAGMENT_SHADER_BIT = 2;
  private static final int GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072;
  private static final int GL_SOURCE2_ALPHA_EXT = 34186;
  private static final int GL_DEBUG_TYPE_ERROR_ARB = 33356;
  private static final int GL_HSL_HUE_KHR = 37549;
  private static final int GL_INDEX_ARRAY_LENGTH_NV = 36654;
  private static final int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 34889;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 35885;
  private static final int GL_VERTEX_BINDING_OFFSET = 33495;
  private static final int GL_FLOAT_RG_NV = 34945;
  private static final int GL_TANGENT_ARRAY_POINTER_EXT = 33858;
  private static final int GL_OPERAND2_ALPHA = 34202;
  private static final int GL_BUFFER_MAP_LENGTH = 37152;
  private static final int GL_LINEAR_TILING_EXT = 38277;
  private static final int GL_SAMPLES = 32937;
  private static final int GL_SAMPLER = 33510;
  private static final int GL_LERP_ATI = 35177;
  private static final int GL_INT_2_10_10_10_REV = 36255;
  private static final int GL_T2F_C3F_V3F = 10794;
  private static final int GL_DMP_PROGRAM_BINARY_DMP = 37459;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 35973;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 37853;
  private static final int GL_TEXTURE_FILTER_CONTROL = 34048;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 37852;
  private static final int GL_NORMAL_ARRAY_STRIDE = 32895;
  private static final int GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360;
  private static final int GL_FILTER4_SGIS = 33094;
  private static final int GL_VERTEX_ARRAY_OBJECT_AMD = 37204;
  private static final int GL_ALPHA4 = 32827;
  private static final int GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177;
  private static final int GL_SCALED_RESOLVE_FASTEST_EXT = 37050;
  private static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;
  private static final int GL_FRAGMENT_PROGRAM_ARB = 34820;
  private static final int GL_ALPHA8 = 32828;
  private static final int GL_EDGE_FLAG_ARRAY_POINTER = 32915;
  private static final int GL_DT_BIAS_NV = 34583;
  private static final int GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
  private static final int GL_RENDERBUFFER_GREEN_SIZE = 36177;
  private static final int GL_MODELVIEW21_ARB = 34613;
  private static final int GL_BUFFER_SIZE_ARB = 34660;
  private static final int GL_DRAW_BUFFER4_EXT = 34857;
  private static final int GL_VIEW_CLASS_RGTC2_RG = 33489;
  private static final int GL_RGB32UI_EXT = 36209;
  private static final int GL_FOG_COLOR = 2918;
  private static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 35723;
  private static final int GL_MAX_DEFORMATION_ORDER_SGIX = 33175;
  private static final int GL_PIXEL_CUBIC_WEIGHT_EXT = 33587;
  private static final int GL_MUL_ATI = 35172;
  private static final int GL_LINE = 6913;
  private static final int GL_PATCHES_OES = 14;
  private static final int GL_EXCLUSIVE_EXT = 36625;
  private static final int GL_DRAW_BUFFER13_ATI = 34866;
  private static final int GL_COLOR_ATTACHMENT2_NV = 36066;
  private static final int GL_TEXTURE_COLOR_TABLE_SGI = 32956;
  private static final int GL_FRAGMENT_COLOR_MATERIAL_SGIX = 33793;
  private static final int GL_PRIMITIVES_SUBMITTED = 33519;
  private static final int GL_IMAGE_COMPATIBILITY_CLASS = 33448;
  private static final int GL_COPY_READ_BUFFER_NV = 36662;
  private static final int GL_ELEMENT_ARRAY_BUFFER_ARB = 34963;
  private static final int GL_MANUAL_GENERATE_MIPMAP = 33428;
  private static final int GL_TEXTURE_BUFFER_FORMAT_ARB = 35886;
  private static final int GL_2PASS_0_EXT = 32930;
  private static final int GL_FRAGMENT_LIGHT3_SGIX = 33807;
  private static final int GL_STREAM_DRAW_ARB = 35040;
  private static final int GL_QUERY_NO_WAIT_INVERTED = 36376;
  private static final int GL_DRAW_BUFFER0_EXT = 34853;
  private static final int GL_FLOAT16_MAT4x2_AMD = 37324;
  private static final int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052;
  private static final int GL_COLOR_ATTACHMENT10_EXT = 36074;
  private static final int GL_FONT_TARGET_UNAVAILABLE_NV = 37737;
  private static final int GL_GUILTY_CONTEXT_RESET_ARB = 33363;
  private static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 35378;
  private static final int GL_STENCIL_CLEAR_TAG_VALUE_EXT = 35059;
  private static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590;
  private static final int GL_STENCIL_INDEX_OES = 6401;
  private static final int GL_RENDERBUFFER_GREEN_SIZE_OES = 36177;
  private static final int GL_STENCIL_INDEX = 6401;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955;
  private static final int GL_MAP1_INDEX = 3473;
  private static final int GL_SUCCESS_NV = 36911;
  private static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 37650;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637;
  private static final int GL_IMAGE_CUBE_EXT = 36944;
  private static final int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616;
  private static final int GL_RG16_EXT = 33324;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764;
  private static final int GL_TEXTURE_BUFFER_SIZE = 37278;
  private static final int GL_RG_INTEGER = 33320;
  private static final int GL_BUFFER_GPU_ADDRESS_NV = 36637;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;
  private static final int GL_COPY_PIXEL_TOKEN = 1798;
  private static final int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 32797;
  private static final int GL_VERTEX_WEIGHT_ARRAY_EXT = 34060;
  private static final int GL_OUTPUT_TEXTURE_COORD12_EXT = 34729;
  private static final int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 35955;
  private static final int GL_PROXY_TEXTURE_RECTANGLE = 34039;
  private static final int GL_FRONT_FACE_COMMAND_NV = 18;
  private static final int GL_DEPTH_COMPONENT16_NONLINEAR_NV = 36396;
  private static final int GL_RGBA4_DXT5_S3TC = 33701;
  private static final int GL_ALPHA_FLOAT32_ATI = 34838;
  private static final int GL_COLOR_MATERIAL = 2903;
  private static final int GL_NUM_WINDOW_RECTANGLES_EXT = 36629;
  private static final int GL_PROGRAM_STRING_ARB = 34344;
  private static final int GL_CURRENT_BIT = 1;
  private static final int GL_COEFF = 2560;
  private static final int GL_MAX_DEPTH = 33408;
  private static final int GL_READ_FRAMEBUFFER_EXT = 36008;
  private static final int GL_FRACTIONAL_ODD_EXT = 36475;
  private static final int GL_DEBUG_SEVERITY_LOW = 37192;
  private static final int GL_COLOR_TABLE_GREEN_SIZE_SGI = 32987;
  private static final int GL_VERTICES_SUBMITTED = 33518;
  private static final int GL_422_AVERAGE_EXT = 32974;
  private static final int GL_FRAGMENT_SHADER = 35632;
  private static final int GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 36378;
  private static final int GL_CULL_FACE = 2884;
  private static final int GL_SRC1_ALPHA_EXT = 34185;
  private static final int GL_DOUBLE_MAT2x4_EXT = 36682;
  private static final int GL_PATH_CLIENT_LENGTH_NV = 36991;
  private static final int GL_FRAGMENT_LIGHTING_SGIX = 33792;
  private static final int GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 36900;
  private static final int GL_EVAL_VERTEX_ATTRIB6_NV = 34508;
  private static final int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909;
  private static final int GL_VIEWPORT = 2978;
  private static final int GL_FACTOR_MAX_AMD = 36893;
  private static final int GL_SOURCE0_ALPHA = 34184;
  private static final int GL_ALLOW_DRAW_WIN_HINT_PGI = 107023;
  private static final int GL_TEXTURE_BUFFER_ARB = 35882;
  private static final int GL_TEXTURE_BINDING_BUFFER_OES = 35884;
  private static final int GL_TEXTURE_1D_BINDING_EXT = 32872;
  private static final int GL_OP_SET_GE_EXT = 34700;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581;
  private static final int GL_NO_RESET_NOTIFICATION_ARB = 33377;
  private static final int GL_MAX_FRAMEBUFFER_LAYERS = 37655;
  private static final int GL_DEBUG_SOURCE_APPLICATION = 33354;
  private static final int GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728;
  private static final int GL_SOURCE1_RGB_ARB = 34177;
  private static final int GL_PROGRAM_PIPELINE_KHR = 33508;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
  private static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;
  private static final int GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16;
  private static final int GL_OP_MAX_EXT = 34698;
  private static final int GL_COMBINE_ARB = 34160;
  private static final int GL_NUM_SPIR_V_EXTENSIONS = 38228;
  private static final int GL_SRGB8 = 35905;
  private static final int GL_TEXTURE21_ARB = 34005;
  private static final int GL_VIEWPORT_BIT = 2048;
  private static final int GL_ATTRIB_ARRAY_SIZE_NV = 34339;
  private static final int GL_BEVEL_NV = 37030;
  private static final int GL_PACK_SKIP_PIXELS = 3332;
  private static final int GL_PATH_END_CAPS_NV = 36982;
  private static final int GL_DISJOINT_NV = 37507;
  private static final int GL_COLOR_TABLE_WIDTH_SGI = 32985;
  private static final int GL_MAP1_VERTEX_ATTRIB4_4_NV = 34404;
  private static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357;
  private static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;
  private static final int GL_SOURCE2_ALPHA = 34186;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057;
  private static final int GL_DOMAIN = 2562;
  private static final int GL_COMMAND_BARRIER_BIT_EXT = 64;
  private static final int GL_SCREEN_COORDINATES_REND = 33936;
  private static final int GL_EYE_PLANE_ABSOLUTE_NV = 34140;
  private static final int GL_RGB_INTEGER = 36248;
  private static final int GL_OUTPUT_TEXTURE_COORD6_EXT = 34723;
  private static final int GL_TEXTURE_IMAGE_TYPE = 33424;
  private static final int GL_FOG_COORD_ARRAY_POINTER = 33878;
  private static final int GL_DEPTH_BUFFER_BIT = 256;
  private static final int GL_FRAMEBUFFER_DEFAULT = 33304;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 37842;
  private static final int GL_R16F = 33325;
  private static final int GL_QUAD_ALPHA8_SGIS = 33055;
  private static final int GL_PIXEL_COUNT_AVAILABLE_NV = 34919;
  private static final int GL_R16_SNORM_EXT = 36760;
  private static final int GL_DRAW_BUFFER2_ATI = 34855;
  private static final int GL_COLOR_ATTACHMENT11_NV = 36075;
  private static final int GL_UNPACK_CMYK_HINT_EXT = 32783;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 37841;
  private static final int GL_R16I = 33331;
  private static final int GL_C3F_V3F = 10788;
  private static final int GL_PROXY_TEXTURE_4D_SGIS = 33077;
  private static final int GL_TEXTURE_COORD_ARRAY_EXT = 32888;
  private static final int GL_SPRITE_AXIAL_SGIX = 33100;
  private static final int GL_DISCARD_ATI = 34659;
  private static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131;
  private static final int GL_DISPATCH_INDIRECT_BUFFER = 37102;
  private static final int GL_PATCHES_EXT = 14;
  private static final int GL_HILO_NV = 34548;
  private static final int GL_STENCIL_TEST_TWO_SIDE_EXT = 35088;
  private static final int GL_PRIMITIVE_ID_NV = 35964;
  private static final int GL_DOT3_RGBA_ARB = 34479;
  private static final int GL_COMPRESSED_SRGB8_ETC2 = 37493;
  private static final int GL_LOSE_CONTEXT_ON_RESET_ARB = 33362;
  private static final int GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292;
  private static final int GL_SHADER_STORAGE_BUFFER_START = 37076;
  private static final int GL_FEEDBACK_BUFFER_TYPE = 3570;
  private static final int GL_DRAW_INDIRECT_UNIFIED_NV = 36672;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 37697;
  private static final int GL_COLOR_TABLE_BIAS = 32983;
  private static final int GL_FOG_COORDINATE_EXT = 33873;
  private static final int GL_LINEAR_CLIPMAP_NEAREST_SGIX = 33871;
  private static final int GL_PATH_MODELVIEW_MATRIX_NV = 2982;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883;
  private static final int GL_2PASS_0_SGIS = 32930;
  private static final int GL_INTERNALFORMAT_ALPHA_SIZE = 33396;
  private static final int GL_CONSTANT = 34166;
  private static final int GL_VERTEX_CONSISTENT_HINT_PGI = 107051;
  private static final int GL_CON_17_ATI = 35154;
  private static final int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
  private static final int GL_PLUS_CLAMPED_NV = 37553;
  private static final int GL_MODELVIEW12_ARB = 34604;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310;
  private static final int GL_LUMINANCE4_ALPHA4_OES = 32835;
  private static final int GL_TEXTURE_MAX_LEVEL_SGIS = 33085;
  private static final int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;
  private static final int GL_RG16_SNORM_EXT = 36761;
  private static final int GL_MAP2_VERTEX_ATTRIB4_4_NV = 34420;
  private static final int GL_VIRTUAL_PAGE_SIZE_Z_EXT = 37271;
  private static final int GL_SAMPLES_3DFX = 34484;
  private static final int GL_DEPTH_COMPONENT24_ARB = 33190;
  private static final int GL_FOG_COORD_ARRAY_LENGTH_NV = 36658;
  private static final int GL_GEOMETRY_SHADER_BIT = 4;
  private static final int GL_IMAGE_CLASS_2_X_8 = 33472;
  private static final int GL_OUTPUT_TEXTURE_COORD21_EXT = 34738;
  private static final int GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223;
  private static final int GL_CON_4_ATI = 35141;
  private static final int GL_CURRENT_TANGENT_EXT = 33851;
  private static final int GL_SAMPLER_3D_OES = 35679;
  private static final int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966;
  private static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
  private static final int GL_ADD_SIGNED_EXT = 34164;
  private static final int GL_DRAW_BUFFER2_ARB = 34855;
  private static final int GL_RETURN = 258;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885;
  private static final int GL_COLOR_ATTACHMENT2_EXT = 36066;
  private static final int GL_ATTRIB_ARRAY_STRIDE_NV = 34340;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
  private static final int GL_MAX_SPOT_EXPONENT_NV = 34053;
  private static final int GL_TEXTURE_COMPRESSED_ARB = 34465;
  private static final int GL_TEXTURE_ALPHA_SIZE = 32863;
  private static final int GL_IMAGE_TEXEL_SIZE = 33447;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
  private static final int GL_DOT3_RGB = 34478;
  private static final int GL_VERTEX_ATTRIB_BINDING = 33492;
  private static final int GL_DYNAMIC_READ_ARB = 35049;
  private static final int GL_TRANSPOSE_COLOR_MATRIX = 34022;
  private static final int GL_SCALAR_EXT = 34750;
  private static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331;
  private static final int GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 33557;
  private static final int GL_MAX_SUBROUTINES = 36327;
  private static final int GL_STENCIL_RENDERABLE = 33416;
  private static final int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141;
  private static final int GL_POINT_SIZE = 2833;
  private static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;
  private static final int GL_VARIABLE_E_NV = 34087;
  private static final int GL_RGB565_OES = 36194;
  private static final int GL_MODELVIEW25_ARB = 34617;
  private static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428;
  private static final int GL_STENCIL_CLEAR_VALUE = 2961;
  private static final int GL_NUM_FILL_STREAMS_NV = 36393;
  private static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 36444;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 37862;
  private static final int GL_422_EXT = 32972;
  private static final int GL_R1UI_T2F_V3F_SUN = 34249;
  private static final int GL_VERTEX_STREAM6_ATI = 34674;
  private static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
  private static final int GL_COMPRESSED_LUMINANCE = 34026;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
  private static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36447;
  private static final int GL_CURRENT_FOG_COORDINATE = 33875;
  private static final int GL_COMBINER_MUX_SUM_NV = 34119;
  private static final int GL_COMP_BIT_ATI = 2;
  private static final int GL_TEXTURE_BUFFER_BINDING = 35882;
  private static final int GL_WRITE_PIXEL_DATA_RANGE_NV = 34936;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583;
  private static final int GL_OUTPUT_TEXTURE_COORD25_EXT = 34742;
  private static final int GL_SMAPHS30_PROGRAM_BINARY_DMP = 37457;
  private static final int GL_PATCH_VERTICES = 36466;
  private static final int GL_DIFFERENCE = 37534;
  private static final int GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530;
  private static final int GL_MATRIX_INDEX_ARRAY_TYPE_OES = 34887;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719;
  private static final int GL_AFFINE_2D_NV = 37010;
  private static final int GL_DST_NV = 37511;
  private static final int GL_REG_17_ATI = 35122;
  private static final int GL_LOCAL_CONSTANT_VALUE_EXT = 34796;
  private static final int GL_CLAMP_TO_EDGE = 33071;
  private static final int GL_UNIFORM_BUFFER_START = 35369;
  private static final int GL_MAP1_GRID_SEGMENTS = 3537;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051;
  private static final int GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971;
  private static final int GL_SAMPLE_MASK_INVERT_SGIS = 32939;
  private static final int GL_DOT3_RGBA = 34479;
  private static final int GL_GET_TEXTURE_IMAGE_FORMAT = 33425;
  private static final int GL_PROGRAM_BINARY_FORMATS_OES = 34815;
  private static final int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399;
  private static final int GL_BLEND_DST_ALPHA = 32970;
  private static final int GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11;
  private static final int GL_Q = 8195;
  private static final int GL_SUBTRACT = 34023;
  private static final int GL_RGBA32F_ARB = 34836;
  private static final int GL_S = 8192;
  private static final int GL_R = 8194;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 37587;
  private static final int GL_T = 8193;
  private static final int GL_PERCENTAGE_AMD = 35779;
  private static final int GL_QUARTER_BIT_ATI = 16;
  private static final int GL_SRC0_ALPHA = 34184;
  private static final int GL_PROXY_TEXTURE_3D_EXT = 32880;
  private static final int GL_MODULATE_SIGNED_ADD_ATI = 34629;
  private static final int GL_STATIC_COPY = 35046;
  private static final int GL_EDGE_FLAG_ARRAY = 32889;
  private static final int GL_CLIP_PLANE0_IMG = 12288;
  private static final int GL_FOG_BIT = 128;
  private static final int GL_NOP_COMMAND_NV = 1;
  private static final int GL_RGB10_EXT = 32850;
  private static final int GL_MAP1_BINORMAL_EXT = 33862;
  private static final int GL_COLOR_COMPONENTS = 33411;
  private static final int GL_IUI_N3F_V3F_EXT = 33200;
  private static final int GL_DEBUG_SOURCE_API = 33350;
  private static final int GL_CLAMP_TO_BORDER_EXT = 33069;
  private static final int GL_DOT_PRODUCT_TEXTURE_3D_NV = 34543;
  private static final int GL_FLOAT16_MAT3x4_AMD = 37323;
  private static final int GL_INTERLACE_READ_INGR = 34152;
  private static final int GL_BGR_INTEGER_EXT = 36250;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059;
  private static final int GL_MAX_INTEGER_SAMPLES = 37136;
  private static final int GL_RED_EXT = 6403;
  private static final int GL_QUADS_OES = 7;
  private static final int GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770;
  private static final int GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;
  private static final int GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 36787;
  private static final int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621;
  private static final int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944;
  private static final int GL_STENCIL_ATTACHMENT = 36128;
  private static final int GL_INVALID_VALUE = 1281;
  private static final int GL_INDEX_MODE = 3120;
  private static final int GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;
  private static final int GL_CONSERVATIVE_RASTERIZATION_INTEL = 33790;
  private static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959;
  private static final int GL_BUFFER_MAP_POINTER_OES = 35005;
  private static final int GL_MAT_AMBIENT_BIT_PGI = 1048576;
  private static final int GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
  private static final int GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36972;
  private static final int GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;
  private static final int GL_FRAMEBUFFER_COMPLETE_OES = 36053;
  private static final int GL_GEQUAL = 518;
  private static final int GL_MAX_LAYERS = 33409;
  private static final int GL_CONSTANT_COLOR1_NV = 34091;
  private static final int GL_GREEN_MIN_CLAMP_INGR = 34145;
  private static final int GL_NICEST = 4354;
  private static final int GL_MAX_UNIFORM_BLOCK_SIZE = 35376;
  private static final int GL_RENDERBUFFER_COLOR_SAMPLES_NV = 36368;
  private static final int GL_LUMINANCE_FLOAT32_APPLE = 34840;
  private static final int GL_DUAL_INTENSITY4_SGIS = 33048;
  private static final int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885;
  private static final int GL_PIXEL_UNPACK_BUFFER_ARB = 35052;
  private static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485;
  private static final int GL_MAX_VERTEX_STREAMS = 36465;
  private static final int GL_SINGLE_COLOR_EXT = 33273;
  private static final int GL_SPRITE_OBJECT_ALIGNED_SGIX = 33101;
  private static final int GL_BLEND_DST_ALPHA_OES = 32970;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
  private static final int GL_DEPTH_ATTACHMENT_EXT = 36096;
  private static final int GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 1;
  private static final int GL_COORD_REPLACE = 34914;
  private static final int GL_INT64_VEC2_ARB = 36841;
  private static final int GL_VERTEX_ATTRIB_ARRAY2_NV = 34386;
  private static final int GL_COMPRESSED_TEXTURE_FORMATS = 34467;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 37832;
  private static final int GL_GENERATE_MIPMAP = 33169;
  private static final int GL_SHADOW_ATTENUATION_EXT = 33614;
  private static final int GL_TESS_EVALUATION_SHADER = 36487;
  private static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36878;
  private static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388;
  private static final int GL_RESAMPLE_REPLICATE_SGIX = 33843;
  private static final int GL_DEBUG_GROUP_STACK_DEPTH = 33389;
  private static final int GL_EVAL_VERTEX_ATTRIB10_NV = 34512;
  private static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075;
  private static final int GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222;
  private static final int GL_MODELVIEW7_ARB = 34599;
  private static final int GL_QUERY_ALL_EVENT_BITS_AMD = -1;
  private static final int GL_MAX_VIEWPORTS = 33371;
  private static final int GL_SHADER_STORAGE_BARRIER_BIT = 8192;
  private static final int GL_RGBA16I_EXT = 36232;
  private static final int GL_INDEX_ARRAY_TYPE = 32901;
  private static final int GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698;
  private static final int GL_INSTRUMENT_BUFFER_POINTER_SGIX = 33152;
  private static final int GL_PIXEL_TILE_WIDTH_SGIX = 33088;
  private static final int GL_CONIC_CURVE_TO_NV = 26;
  private static final int GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144;
  private static final int GL_PROXY_TEXTURE_RECTANGLE_NV = 34039;
  private static final int GL_HISTOGRAM_RED_SIZE_EXT = 32808;
  private static final int GL_RED_NV = 6403;
  private static final int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243;
  private static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 35917;
  private static final int GL_SIGNED_RGB8_NV = 34559;
  private static final int GL_DRAW_BUFFER15_NV = 34868;
  private static final int GL_MATRIX7_ARB = 35015;
  private static final int GL_TEXTURE_MAX_LEVEL = 33085;
  private static final int GL_SRGB_READ = 33431;
  private static final int GL_TEXTURE_LO_SIZE_NV = 34588;
  private static final int GL_TEXTURE_BORDER_COLOR = 4100;
  private static final int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 34564;
  private static final int GL_MIRROR_CLAMP_ATI = 34626;
  private static final int GL_RED_SCALE = 3348;
  private static final int GL_TEXTURE6_ARB = 33990;
  private static final int GL_GEOMETRY_INPUT_TYPE = 35095;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 36960;
  private static final int GL_TEXTURE_2D_ARRAY_EXT = 35866;
  private static final int GL_PIXEL_GROUP_COLOR_SGIS = 33622;
  private static final int GL_VIBRANCE_BIAS_NV = 34585;
  private static final int GL_ONE_MINUS_SRC_COLOR = 769;
  private static final int GL_SCISSOR_TEST = 3089;
  private static final int GL_PATCH_DEFAULT_INNER_LEVEL = 36467;
  private static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;
  private static final int GL_PROGRAM_BINARY_ANGLE = 37798;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER = 35982;
  private static final int GL_ONE_MINUS_DST_COLOR = 775;
  private static final int GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949;
  private static final int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;
  private static final int GL_PROTECTED_MEMORY_OBJECT_EXT = 38299;
  private static final int GL_MAP_PERSISTENT_BIT = 64;
  private static final int GL_CURRENT_VERTEX_ATTRIB = 34342;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049;
  private static final int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020;
  private static final int GL_ALL_PIXELS_AMD = -1;
  private static final int GL_RENDERBUFFER_FREE_MEMORY_ATI = 34813;
  private static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 36950;
  private static final int GL_OUTPUT_TEXTURE_COORD3_EXT = 34720;
  private static final int GL_VERTEX_SHADER = 35633;
  private static final int GL_TEXTURE_CONSTANT_DATA_SUNX = 33238;
  private static final int GL_RASTER_MULTISAMPLE_EXT = 37671;
  private static final int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 32926;
  private static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;
  private static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156;
  private static final int GL_OVERLAY = 37526;
  private static final int GL_UNPACK_CLIENT_STORAGE_APPLE = 34226;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
  private static final int GL_VERTEX_ARRAY_STRIDE_EXT = 32892;
  private static final int GL_TOP_LEVEL_ARRAY_SIZE = 37644;
  private static final int GL_COLOR_ARRAY_LIST_IBM = 103072;
  private static final int GL_WEIGHT_ARRAY_OES = 34477;
  private static final int GL_COLOR_FLOAT_APPLE = 35343;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187;
  private static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;
  private static final int GL_COMPARE_R_TO_TEXTURE = 34894;
  private static final int GL_VERTEX_SHADER_LOCALS_EXT = 34771;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;
  private static final int GL_DRAW_BUFFER1_NV = 34854;
  private static final int GL_UNDEFINED_APPLE = 35356;
  private static final int GL_REG_7_ATI = 35112;
  private static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 33375;
  private static final int GL_PIXEL_COUNTER_BITS_NV = 34916;
  private static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155;
  private static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 37274;
  private static final int GL_LINE_STRIP_ADJACENCY_EXT = 11;
  private static final int GL_ACTIVE_TEXTURE_ARB = 34016;
  private static final int GL_HISTOGRAM = 32804;
  private static final int GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946;
  private static final int GL_SAMPLES_PASSED_ARB = 35092;
  private static final int GL_DEPTH_TEST = 2929;
  private static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 34761;
  private static final int GL_VERTEX_SHADER_BIT_EXT = 1;
  private static final int GL_QUERY_KHR = 33507;
  private static final int GL_ACCUM_BUFFER_BIT = 512;
  private static final int GL_MAX_TEXTURE_IMAGE_UNITS_NV = 34930;
  private static final int GL_PATH_FILL_COVER_MODE_NV = 36994;
  private static final int GL_OUTPUT_TEXTURE_COORD16_EXT = 34733;
  private static final int GL_RGBA_FLOAT16_APPLE = 34842;
  private static final int GL_NUM_COMPATIBLE_SUBROUTINES = 36426;
  private static final int GL_MAX_COMBINED_DIMENSIONS = 33410;
  private static final int GL_OPERAND0_RGB = 34192;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 36309;
  private static final int GL_MATRIX15_ARB = 35023;
  private static final int GL_UNCORRELATED_NV = 37506;
  private static final int GL_SHADER_STORAGE_BUFFER_BINDING = 37075;
  private static final int GL_SIGNED_LUMINANCE8_NV = 34562;
  private static final int GL_UNSIGNED_SHORT_5_6_5_REV = 33636;
  private static final int GL_PACK_INVERT_MESA = 34648;
  private static final int GL_HI_SCALE_NV = 34574;
  private static final int GL_MULTISAMPLE_SGIS = 32925;
  private static final int GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432;
  private static final int GL_UNIFORM_BLOCK_BINDING = 35391;
  private static final int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418;
  private static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970;
  private static final int GL_PALETTE8_RGBA4_OES = 35736;
  private static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080;
  private static final int GL_NEGATIVE_ONE_TO_ONE_EXT = 37726;
  private static final int GL_4PASS_2_SGIS = 32934;
  private static final int GL_TEXTURE_GREEN_SIZE = 32861;
  private static final int GL_CLIP_DEPTH_MODE_EXT = 37725;
  private static final int GL_DOUBLE_MAT2x4 = 36682;
  private static final int GL_ITALIC_BIT_NV = 2;
  private static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094;
  private static final int GL_MODELVIEW_PROJECTION_NV = 34345;
  private static final int GL_DOUBLE_MAT2x3 = 36681;
  private static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 36481;
  private static final int GL_SAMPLE_MASK_VALUE_NV = 36434;
  private static final int GL_INTENSITY = 32841;
  private static final int GL_SRC_ALPHA_SATURATE_EXT = 776;
  private static final int GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020;
  private static final int GL_INDEX_TEST_EXT = 33205;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
  private static final int GL_ACTIVE_PROGRAM_EXT = 35725;
  private static final int GL_WRITE_DISCARD_NV = 35006;
  private static final int GL_MAP1_VERTEX_ATTRIB14_4_NV = 34414;
  private static final int GL_DRAW_PIXELS_APPLE = 35338;
  private static final int GL_COLOR_ATTACHMENT5_NV = 36069;
  private static final int GL_WINDOW_RECTANGLE_EXT = 36626;
  private static final int GL_MATRIX_INDEX_ARRAY_POINTER_OES = 34889;
  private static final int GL_SRC1_COLOR = 35065;
  private static final int GL_STENCIL_BACK_FUNC = 34816;
  private static final int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 34957;
  private static final int GL_STENCIL_INDEX8_OES = 36168;
  private static final int GL_MAX_3D_TEXTURE_SIZE = 32883;
  private static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
  private static final int GL_4PASS_1_EXT = 32933;
  private static final int GL_MATRIX1_ARB = 35009;
  private static final int GL_RESCALE_NORMAL_EXT = 32826;
  private static final int GL_SKIP_COMPONENTS1_NV = -6;
  private static final int GL_FRAMEBUFFER_BINDING_EXT = 36006;
  private static final int GL_FRAGMENTS_INSTRUMENT_SGIX = 33555;
  private static final int GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953;
  private static final int GL_PATH_FILL_BOUNDING_BOX_NV = 37025;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319;
  private static final int GL_DEPTH_BUFFER_FLOAT_MODE_NV = 36271;
  private static final int GL_TEXTURE_SWIZZLE_R_EXT = 36418;
  private static final int GL_VIRTUAL_PAGE_SIZE_Y_EXT = 37270;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x4 = 37808;
  private static final int GL_HISTOGRAM_ALPHA_SIZE_EXT = 32811;
  private static final int GL_TRIANGLE_LIST_SUN = 33239;
  private static final int GL_LUMINANCE16_EXT = 32834;
  private static final int GL_COLOR_BUFFER_BIT7_QCOM = 128;
  private static final int GL_SAMPLER_1D_ARB = 35677;
  private static final int GL_TRANSPOSE_TEXTURE_MATRIX = 34021;
  private static final int GL_PROGRAM_ERROR_POSITION_NV = 34379;
  private static final int GL_SHADER_INCLUDE_ARB = 36270;
  private static final int GL_SRC1_COLOR_EXT = 35065;
  private static final int GL_UNIFORM_TYPE = 35383;
  private static final int GL_DEPTH_BITS = 3414;
  private static final int GL_SAMPLE_PATTERN_EXT = 32940;
  private static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903;
  private static final int GL_RESCALE_NORMAL = 32826;
  private static final int GL_GENERIC_ATTRIB_NV = 35965;
  private static final int GL_SCALE_BY_FOUR_NV = 34111;
  private static final int GL_COMBINER_BIAS_NV = 34121;
  private static final int GL_COMPILE_STATUS = 35713;
  private static final int GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389;
  private static final int GL_LIGHT_ENV_MODE_SGIX = 33799;
  private static final int GL_TEXTURE_HEIGHT = 4097;
  private static final int GL_RGB9_E5 = 35901;
  private static final int GL_RGB_SCALE = 34163;
  private static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36959;
  private static final int GL_FIELDS_NV = 36391;
  private static final int GL_PRIMARY_COLOR_EXT = 34167;
  private static final int GL_INDEX_ARRAY = 32887;
  private static final int GL_LINE_SMOOTH = 2848;
  private static final int GL_QUERY_TARGET = 33514;
  private static final int GL_TRANSFORM_FEEDBACK = 36386;
  private static final int GL_POST_CONVOLUTION_ALPHA_SCALE = 32799;
  private static final int GL_TEXTURE_BLUE_TYPE = 35858;
  private static final int GL_PROGRAM_RESULT_COMPONENTS_NV = 35079;
  private static final int GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966;
  private static final int GL_UNKNOWN_CONTEXT_RESET_EXT = 33365;
  private static final int GL_RENDERBUFFER_SAMPLES_NV = 36011;
  private static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36446;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 35983;
  private static final int GL_POST_CONVOLUTION_RED_SCALE_EXT = 32796;
  private static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;
  private static final int GL_SLUMINANCE8_NV = 35911;
  private static final int GL_NORMAL_BIT_PGI = 134217728;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 37711;
  private static final int GL_TEXTURE_FILTER4_SIZE_SGIS = 33095;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 36058;
  private static final int GL_UNSIGNED_INT64_VEC4_ARB = 36855;
  private static final int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915;
  private static final int GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935;
  private static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 36661;
  private static final int GL_FRACTIONAL_ODD = 36475;
  private static final int GL_TEXTURE_DEFORMATION_BIT_SGIX = 1;
  private static final int GL_VERTEX_ARRAY_RANGE_APPLE = 34077;
  private static final int GL_COLOR_BUFFER_BIT0_QCOM = 1;
  private static final int GL_TIMESTAMP_EXT = 36392;
  private static final int GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281;
  private static final int GL_VERTEX_PROGRAM_POINT_SIZE = 34370;
  private static final int GL_HSL_SATURATION_KHR = 37550;
  private static final int GL_MAX_LIGHTS = 3377;
  private static final int GL_ROUNDED_RECT_NV = 232;
  private static final int GL_TEXTURE3_ARB = 33987;
  private static final int GL_FLOAT_RGB_NV = 34946;
  private static final int GL_STENCIL_BUFFER_BIT = 1024;
  private static final int GL_LUMINANCE_ALPHA16I_EXT = 36237;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 37849;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 37848;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 37850;
  private static final int GL_LARGE_CCW_ARC_TO_NV = 22;
  private static final int GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 33523;
  private static final int GL_PATH_JOIN_STYLE_NV = 36985;
  private static final int GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4;
  private static final int GL_COLOR_ARRAY_POINTER_EXT = 32912;
  private static final int GL_COLOR_ATTACHMENT12_EXT = 36076;
  private static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;
  private static final int GL_LAYER_PROVOKING_VERTEX = 33374;
  private static final int GL_PARAMETER_BUFFER_ARB = 33006;
  private static final int GL_DEPTH_COMPONENT32_SGIX = 33191;
  private static final int GL_SYNC_OBJECT_APPLE = 35411;
  private static final int GL_VERTEX_ARRAY_LIST_IBM = 103070;
  private static final int GL_TEXTURE0 = 33984;
  private static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638;
  private static final int GL_TEXTURE4 = 33988;
  private static final int GL_TEXTURE3 = 33987;
  private static final int GL_TEXTURE2 = 33986;
  private static final int GL_TEXTURE1 = 33985;
  private static final int GL_TEXTURE8 = 33992;
  private static final int GL_SAMPLER_CUBE_SHADOW = 36293;
  private static final int GL_TEXTURE7 = 33991;
  private static final int GL_UNSIGNED_INT64_NV = 5135;
  private static final int GL_DEBUG_SOURCE_OTHER_KHR = 33355;
  private static final int GL_TEXTURE6 = 33990;
  private static final int GL_TEXTURE5 = 33989;
  private static final int GL_HSL_HUE_NV = 37549;
  private static final int GL_DEBUG_SEVERITY_NOTIFICATION = 33387;
  private static final int GL_TEXTURE9 = 33993;
  private static final int GL_ORDER = 2561;
  private static final int GL_DOUBLE_MAT2x3_EXT = 36681;
  private static final int GL_SAMPLER_2D_RECT_ARB = 35683;
  private static final int GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 35815;
  private static final int GL_MAX_EXT = 32776;
  private static final int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783;
  private static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939;
  private static final int GL_MATRIX24_ARB = 35032;
  private static final int GL_SYNC_FLAGS_APPLE = 37141;
  private static final int GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
  private static final int GL_BLEND_DST = 3040;
  private static final int GL_CONST_EYE_NV = 34533;
  private static final int GL_TEXTURE_STACK_DEPTH = 2981;
  private static final int GL_TEXTURE_RED_SIZE_EXT = 32860;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
  private static final int GL_LINES_ADJACENCY_EXT = 10;
  private static final int GL_1PASS_SGIS = 32929;
  private static final int GL_8X_BIT_ATI = 4;
  private static final int GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 33517;
  private static final int GL_RENDERBUFFER_STENCIL_SIZE_OES = 36181;
  private static final int GL_LINEAR_SHARPEN_COLOR_SGIS = 32943;
  private static final int GL_SCREEN_NV = 37525;
  private static final int GL_RGB5_A1_OES = 32855;
  private static final int GL_TRACE_ERRORS_BIT_MESA = 32;
  private static final int GL_STENCIL_OP_VALUE_AMD = 34636;
  private static final int GL_STATIC_READ = 35045;
  private static final int GL_RGBA8UI_EXT = 36220;
  private static final int GL_COLOR_ATTACHMENT3_EXT = 36067;
  private static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 37279;
  private static final int GL_PATH_PROJECTION_STACK_DEPTH_NV = 2980;
  private static final int GL_INTENSITY8 = 32843;
  private static final int GL_MAX_TEXTURE_COORDS_ARB = 34929;
  private static final int GL_INTENSITY4 = 32842;
  private static final int GL_SCALEBIAS_HINT_SGIX = 33570;
  private static final int GL_BLUE_NV = 6405;
  private static final int GL_SHARED_TEXTURE_PALETTE_EXT = 33275;
  private static final int GL_REG_14_ATI = 35119;
  private static final int GL_DOUBLE_VEC4 = 36862;
  private static final int GL_DOUBLE_VEC3 = 36861;
  private static final int GL_LINE_STIPPLE_PATTERN = 2853;
  private static final int GL_BUFFER_ACCESS = 35003;
  private static final int GL_DOUBLE_VEC2 = 36860;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 34074;
  private static final int GL_OR_REVERSE = 5387;
  private static final int GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;
  private static final int GL_FULL_STIPPLE_HINT_PGI = 107033;
  private static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976;
  private static final int GL_BUFFER_USAGE_ARB = 34661;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 36263;
  private static final int GL_VERTEX_STREAM2_ATI = 34670;
  private static final int GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284;
  private static final int GL_CON_1_ATI = 35138;
  private static final int GL_SECONDARY_COLOR_ARRAY_TYPE = 33883;
  private static final int GL_SRGB_ALPHA = 35906;
  private static final int GL_COMPRESSED_RGBA_BPTC_UNORM = 36492;
  private static final int GL_QUERY_BUFFER = 37266;
  private static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;
  private static final int GL_TEXTURE_MATRIX = 2984;
  private static final int GL_FRONT_RIGHT = 1025;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 37589;
  private static final int GL_TEXTURE_COMPARE_OPERATOR_SGIX = 33179;
  private static final int GL_DRAW_BUFFER10_NV = 34863;
  private static final int GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867;
  private static final int GL_IMAGE_BINDING_FORMAT_EXT = 36974;
  private static final int GL_LAYOUT_COLOR_ATTACHMENT_EXT = 38286;
  private static final int GL_MAX_ASYNC_HISTOGRAM_SGIX = 33581;
  private static final int GL_COLOR3_BIT_PGI = 65536;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978;
  private static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;
  private static final int GL_INVALID_INDEX = -1;
  private static final int GL_CMYK_EXT = 32780;
  private static final int GL_LINEAR_CLIPMAP_LINEAR_SGIX = 33136;
  private static final int GL_R32F = 33326;
  private static final int GL_COVERAGE_MODULATION_TABLE_NV = 37681;
  private static final int GL_PROXY_COLOR_TABLE = 32979;
  private static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 1;
  private static final int GL_TEXTURE11_ARB = 33995;
  private static final int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969;
  private static final int GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 37641;
  private static final int GL_DEPTH_COMPONENT32F = 36012;
  private static final int GL_QUAD_TEXTURE_SELECT_SGIS = 33061;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
  private static final int GL_TEXTURE_GATHER_SHADOW = 33443;
  private static final int GL_MAX_COLOR_ATTACHMENTS = 36063;
  private static final int GL_EVAL_VERTEX_ATTRIB9_NV = 34511;
  private static final int GL_TRANSFORM_FEEDBACK_VARYING = 37620;
  private static final int GL_DST_ALPHA = 772;
  private static final int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794;
  private static final int GL_R32I = 33333;
  private static final int GL_TEXTURE_MAX_LEVEL_APPLE = 33085;
  private static final int GL_SAMPLER_1D_ARRAY_SHADOW = 36291;
  private static final int GL_GENERATE_MIPMAP_HINT_SGIS = 33170;
  private static final int GL_RGBA8_EXT = 32856;
  private static final int GL_MAX_TEXTURE_STACK_DEPTH = 3385;
  private static final int GL_SRC_COLOR = 768;
  private static final int GL_INT_SAMPLER_BUFFER_OES = 36304;
  private static final int GL_TEXTURE_ENV = 8960;
  private static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378;
  private static final int GL_BITMAP = 6656;
  private static final int GL_EXPAND_NEGATE_NV = 34105;
  private static final int GL_NOTEQUAL = 517;
  private static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;
  private static final int GL_HANDLE_TYPE_OPAQUE_FD_EXT = 38278;
  private static final int GL_SRGB_DECODE_ARB = 33433;
  private static final int GL_VERTEX_PROGRAM_CALLBACK_MESA = 35765;
  private static final int GL_ALWAYS_FAST_HINT_PGI = 107020;
  private static final int GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 33353;
  private static final int GL_NOR = 5384;
  private static final int GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279;
  private static final int GL_IMAGE_BINDING_LAYERED = 36668;
  private static final int GL_EMBOSS_LIGHT_NV = 34141;
  private static final int GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 33563;
  private static final int GL_FLOAT_MAT2x4_NV = 35686;
  private static final int GL_INTENSITY12_EXT = 32844;
  private static final int GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307;
  private static final int GL_UNSIGNED_SHORT_8_8_APPLE = 34234;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 37845;
  private static final int GL_RGB32UI = 36209;
  private static final int GL_FASTEST = 4353;
  private static final int GL_STENCIL_INDEX4_EXT = 36167;
  private static final int GL_4D_COLOR_TEXTURE = 1540;
  private static final int GL_HALF_FLOAT_NV = 5131;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 37846;
  private static final int GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 33517;
  private static final int GL_COLORBURN_KHR = 37530;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 37847;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;
  private static final int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924;
  private static final int GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064;
  private static final int GL_R16F_EXT = 33325;
  private static final int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198;
  private static final int GL_COMPARE_REF_TO_TEXTURE_EXT = 34894;
  private static final int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 36200;
  private static final int GL_MATRIX11_ARB = 35019;
  private static final int GL_COLOR_ATTACHMENT12_NV = 36076;
  private static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256;
  private static final int GL_ALIASED_POINT_SIZE_RANGE = 33901;
  private static final int GL_RGB8I_EXT = 36239;
  private static final int GL_PATH_GEN_COEFF_NV = 37041;
  private static final int GL_TEXTURE_FLOAT_COMPONENTS_NV = 34956;
  private static final int GL_COLOR_ATTACHMENT0_OES = 36064;
  private static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340;
  private static final int GL_SECONDARY_COLOR_ARRAY_POINTER = 33885;
  private static final int GL_RGB16UI_EXT = 36215;
  private static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;
  private static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;
  private static final int GL_RG16I = 33337;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36970;
  private static final int GL_LUMINANCE12_ALPHA12 = 32839;
  private static final int GL_FRACTIONAL_EVEN = 36476;
  private static final int GL_STENCIL_COMPONENTS = 33413;
  private static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 35069;
  private static final int GL_POINT_SPRITE_COORD_ORIGIN = 36000;
  private static final int GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705;
  private static final int GL_SHORT = 5122;
  private static final int GL_RG16F = 33327;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 36388;
  private static final int GL_PER_GPU_STORAGE_NV = 38216;
  private static final int GL_COLOR_RENDERABLE = 33414;
  private static final int GL_COLOR_ALPHA_PAIRING_ATI = 35189;
  private static final int GL_NORMAL_ARRAY_ADDRESS_NV = 36642;
  private static final int GL_LUMINANCE4_ALPHA4_EXT = 32835;
  private static final int GL_ALPHA_FLOAT16_ATI = 34844;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
  private static final int GL_QUERY_OBJECT_AMD = 37203;
  private static final int GL_REG_23_ATI = 35128;
  private static final int GL_RGB8I = 36239;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 35968;
  private static final int GL_RENDERBUFFER_RED_SIZE_EXT = 36176;
  private static final int GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
  private static final int GL_EYE_LINEAR = 9216;
  private static final int GL_DETAIL_TEXTURE_MODE_SGIS = 32923;
  private static final int GL_RGBA16_SNORM = 36763;
  private static final int GL_SR8_EXT = 36797;
  private static final int GL_QUAD_INTENSITY8_SGIS = 33059;
  private static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 36971;
  private static final int GL_BLEND_EQUATION_EXT = 32777;
  private static final int GL_VERTEX_SUBROUTINE_UNIFORM = 37614;
  private static final int GL_ONE_MINUS_DST_ALPHA = 773;
  private static final int GL_PREVIOUS_EXT = 34168;
  private static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368;
  private static final int GL_POLYGON_MODE = 2880;
  private static final int GL_SIGNED_RGB_NV = 34558;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;
  private static final int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122;
  private static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 34076;
  private static final int GL_DST_IN_NV = 37515;
  private static final int GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
  private static final int GL_COORD_REPLACE_NV = 34914;
  private static final int GL_TEXTURE_GREEN_TYPE_ARB = 35857;
  private static final int GL_WRITE_ONLY_ARB = 35001;
  private static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;
  private static final int GL_PARAMETER_BUFFER_BINDING_ARB = 33007;
  private static final int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523;
  private static final int GL_STENCIL_EXT = 6146;
  private static final int GL_HALF_APPLE = 5131;
  private static final int GL_FLOAT_VEC2_ARB = 35664;
  private static final int GL_INTERPOLATE = 34165;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 36057;
  private static final int GL_DST_COLOR = 774;
  private static final int GL_DSDT8_MAG8_NV = 34570;
  private static final int GL_VIEWPORT_SWIZZLE_W_NV = 37723;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 33778;
  private static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641;
  private static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336;
  private static final int GL_SHADER_BINARY_FORMATS = 36344;
  private static final int GL_TEXTURE_SWIZZLE_RGBA_EXT = 36422;
  private static final int GL_SAMPLER_1D_SHADOW = 35681;
  private static final int GL_RGBA32UI = 36208;
  private static final int GL_TRANSLATE_3D_NV = 37009;
  private static final int GL_RESAMPLE_REPLICATE_OML = 35206;
  private static final int GL_TEXTURE_BINDING_3D_OES = 32874;
  private static final int GL_EYE_PLANE = 9474;
  private static final int GL_PRIMITIVE_RESTART_NV = 34136;
  private static final int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 37197;
  private static final int GL_ONE = 1;
  private static final int GL_FRAGMENT_MATERIAL_EXT = 33609;
  private static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078;
  private static final int GL_DEBUG_OBJECT_MESA = 34649;
  private static final int GL_TESS_CONTROL_SHADER_BIT_EXT = 8;
  private static final int GL_BLUE_BIT_ATI = 4;
  private static final int GL_PIXEL_MIN_FILTER_EXT = 33586;
  private static final int GL_MATRIX_PALETTE_OES = 34880;
  private static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981;
  private static final int GL_DECR_WRAP_EXT = 34056;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 37162;
  private static final int GL_SRGB_EXT = 35904;
  private static final int GL_RENDERBUFFER_STENCIL_SIZE = 36181;
  private static final int GL_RASTERIZER_DISCARD_NV = 35977;
  private static final int GL_TEXTURE_MAX_CLAMP_S_SGIX = 33641;
  private static final int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193;
  private static final int GL_VERTEX_SHADER_OPTIMIZED_EXT = 34772;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 36048;
  private static final int GL_PATH_ERROR_POSITION_NV = 37035;
  private static final int GL_TEXTURE_STENCIL_SIZE = 35057;
  private static final int GL_MODELVIEW1_MATRIX_EXT = 34054;
  private static final int GL_PIXEL_COUNT_NV = 34918;
  private static final int GL_INT_VEC3_ARB = 35668;
  private static final int GL_SPRITE_EYE_ALIGNED_SGIX = 33102;
  private static final int GL_FRAGMENT_LIGHT1_SGIX = 33805;
  private static final int GL_T2F_IUI_N3F_V2F_EXT = 33203;
  private static final int GL_CURRENT_VERTEX_EXT = 34786;
  private static final int GL_POSITION = 4611;
  private static final int GL_FOG_COORD_SRC = 33872;
  private static final int GL_FIXED = 5132;
  private static final int GL_COMPRESSED_RGB_FXT1_3DFX = 34480;
  private static final int GL_STENCIL_BUFFER_BIT4_QCOM = 1048576;
  private static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 36494;
  private static final int GL_INDEX_ARRAY_BUFFER_BINDING = 34969;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR = 33531;
  private static final int GL_MULT = 259;
  private static final int GL_TEXTURE_BINDING_BUFFER_EXT = 35884;
  private static final int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882;
  private static final int GL_NEAREST_MIPMAP_LINEAR = 9986;
  private static final int GL_DEBUG_TYPE_PORTABILITY = 33359;
  private static final int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196;
  private static final int GL_PALETTE8_RGBA8_OES = 35734;
  private static final int GL_VARIANT_DATATYPE_EXT = 34789;
  private static final int GL_MULTISAMPLE_BIT_EXT = 536870912;
  private static final int GL_EXTENSIONS = 7939;
  private static final int GL_PARTIAL_SUCCESS_NV = 36910;
  private static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 36006;
  private static final int GL_TEXTURE_1D_ARRAY_EXT = 35864;
  private static final int GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4;
  private static final int GL_RG32UI = 33340;
  private static final int GL_INTERPOLATE_EXT = 34165;
  private static final int GL_FOG_OFFSET_VALUE_SGIX = 33177;
  private static final int GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 37295;
  private static final int GL_TEXTURE18_ARB = 34002;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951;
  private static final int GL_TRANSPOSE_PROJECTION_MATRIX = 34020;
  private static final int GL_STATIC_VERTEX_ARRAY_IBM = 103061;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050;
  private static final int GL_PATH_STENCIL_FUNC_NV = 37047;
  private static final int GL_ALPHA_REF_COMMAND_NV = 15;
  private static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770;
  private static final int GL_BIAS_BIT_ATI = 8;
  private static final int GL_GENERATE_MIPMAP_HINT = 33170;
  private static final int GL_HALF_BIAS_NORMAL_NV = 34106;
  private static final int GL_UNSIGNED_INT_5_9_9_9_REV = 35902;
  private static final int GL_ASYNC_TEX_IMAGE_SGIX = 33628;
  private static final int GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981;
  private static final int GL_INCR_WRAP_EXT = 34055;
  private static final int GL_LOSE_CONTEXT_ON_RESET_KHR = 33362;
  private static final int GL_ALPHA16UI_EXT = 36216;
  private static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;
  private static final int GL_FLOAT_RGBA_MODE_NV = 34958;
  private static final int GL_FULL_SUPPORT = 33463;
  private static final int GL_COLOR_MATERIAL_PARAMETER = 2902;
  private static final int GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384;
  private static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
  private static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064;
  private static final int GL_EQUAL = 514;
  private static final int GL_3_BYTES = 5128;
  private static final int GL_HARDLIGHT = 37531;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320;
  private static final int GL_FENCE_STATUS_NV = 34035;
  private static final int GL_INDEX_OFFSET = 3347;
  private static final int GL_PALETTE8_RGB5_A1_OES = 35737;
  private static final int GL_VERTEX_ATTRIB_ARRAY12_NV = 34396;
  private static final int GL_COUNT_UP_NV = 37000;
  private static final int GL_CONVOLUTION_BORDER_COLOR_HP = 33108;
  private static final int GL_DEPTH_ATTACHMENT_OES = 36096;
  private static final int GL_ONE_MINUS_SRC_ALPHA = 771;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
  private static final int GL_DSDT8_NV = 34569;
  private static final int GL_UNDEFINED_VERTEX_OES = 33376;
  private static final int GL_CLIP_DISTANCE4_EXT = 12292;
  private static final int GL_LUMINANCE12_EXT = 32833;
  private static final int GL_POST_CONVOLUTION_GREEN_SCALE = 32797;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 36875;
  private static final int GL_PROXY_TEXTURE_1D_EXT = 32867;
  private static final int GL_SAMPLER_OBJECT_AMD = 37205;
  private static final int GL_TEXTURE_BORDER_COLOR_EXT = 4100;
  private static final int GL_MAX_UNIFORM_LOCATIONS = 33390;
  private static final int GL_MAX_4D_TEXTURE_SIZE_SGIS = 33080;
  private static final int GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 37792;
  private static final int GL_MAX_VARYING_VECTORS = 36348;
  private static final int GL_TEXTURE_BINDING_RECTANGLE = 34038;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055;
  private static final int GL_CONTEXT_ROBUST_ACCESS = 37107;
  private static final int GL_POINT_SMOOTH_HINT = 3153;
  private static final int GL_MAP2_VERTEX_ATTRIB9_4_NV = 34425;
  private static final int GL_INT_IMAGE_CUBE = 36955;
  private static final int GL_BUMP_TARGET_ATI = 34684;
  private static final int GL_COLOR_ATTACHMENT7_EXT = 36071;
  private static final int GL_DRAW_BUFFER4_NV = 34857;
  private static final int GL_MATRIX28_ARB = 35036;
  private static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902;
  private static final int GL_IMAGE_SCALE_X_HP = 33109;
  private static final int GL_VIEW_CLASS_128_BITS = 33476;
  private static final int GL_UNIFORM_BLOCK = 37602;
  private static final int GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280;
  private static final int GL_INT_10_10_10_2_OES = 36343;
  private static final int GL_MULTISAMPLE = 32925;
  private static final int GL_LUMINANCE_ALPHA_SNORM = 36882;
  private static final int GL_REG_10_ATI = 35115;
  private static final int GL_SAMPLE_MASK_VALUE_SGIS = 32938;
  private static final int GL_QUAD_LUMINANCE8_SGIS = 33057;
  private static final int GL_BUFFER_ACCESS_ARB = 35003;
  private static final int GL_DEBUG_CALLBACK_FUNCTION = 33348;
  private static final int GL_OUTPUT_TEXTURE_COORD30_EXT = 34747;
  private static final int GL_OFFSET = 37628;
  private static final int GL_ACCUM_GREEN_BITS = 3417;
  private static final int GL_RGBA8 = 32856;
  private static final int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883;
  private static final int GL_INT_SAMPLER_RENDERBUFFER_NV = 36439;
  private static final int GL_RGBA4 = 32854;
  private static final int GL_HALF_FLOAT = 5131;
  private static final int GL_TEXTURE_LIGHT_EXT = 33616;
  private static final int GL_DECODE_EXT = 35401;
  private static final int GL_RGBA2 = 32853;
  private static final int GL_COLOR_INDEX1_EXT = 32994;
  private static final int GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679;
  private static final int GL_STREAM_DRAW = 35040;
  private static final int GL_CONVOLUTION_FILTER_BIAS_EXT = 32789;
  private static final int GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 2;
  private static final int GL_RGBA12_EXT = 32858;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160;
  private static final int GL_DRAW_BUFFER15_EXT = 34868;
  private static final int GL_COLOR_TABLE_INTENSITY_SIZE = 32991;
  private static final int GL_VERTEX_SHADER_INVOCATIONS = 33520;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 34071;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;
  private static final int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;
  private static final int GL_ALPHA16I_EXT = 36234;
  private static final int GL_GREEN_NV = 6404;
  private static final int GL_TEXTURE_IMAGE_FORMAT = 33423;
  private static final int GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;
  private static final int GL_OPERAND0_ALPHA_EXT = 34200;
  private static final int GL_WEIGHT_ARRAY_POINTER_OES = 34476;
  private static final int GL_STENCIL_ATTACHMENT_OES = 36128;
  private static final int GL_COMBINE_RGB_ARB = 34161;
  private static final int GL_RELEASED_APPLE = 35353;
  private static final int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615;
  private static final int GL_FRAGMENT_LIGHT4_SGIX = 33808;
  private static final int GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 9;
  private static final int GL_COMBINER_INPUT_NV = 34114;
  private static final int GL_FLOAT16_MAT3_AMD = 37318;
  private static final int GL_FOG_COORD_ARRAY_STRIDE = 33877;
  private static final int GL_OFFSET_TEXTURE_2D_BIAS_NV = 34531;
  private static final int GL_COMPUTE_TEXTURE = 33440;
  private static final int GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;
  private static final int GL_ELEMENT_ARRAY_ADDRESS_NV = 36649;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 36052;
  private static final int GL_INTERLEAVED_ATTRIBS = 35980;
  private static final int GL_TIME_ELAPSED = 35007;
  private static final int GL_MAX_CLIP_DISTANCES = 3378;
  private static final int GL_UNSIGNED_INT_S8_S8_8_8_NV = 34522;
  private static final int GL_GPU_OPTIMIZED_QCOM = 36786;
  private static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 37156;
  private static final int GL_RGB16F_EXT = 34843;
  private static final int GL_COMPATIBLE_SUBROUTINES = 36427;
  private static final int GL_ELEMENT_ARRAY_LENGTH_NV = 36659;
  private static final int GL_TEXTURE_INTENSITY_TYPE = 35861;
  private static final int GL_INTENSITY16_SNORM = 36891;
  private static final int GL_SM_COUNT_NV = 37691;
  private static final int GL_VARIABLE_F_NV = 34088;
  private static final int GL_DEPTH_CLAMP = 34383;
  private static final int GL_SAMPLE_COVERAGE_INVERT = 32939;
  private static final int GL_TEXTURE_BLUE_TYPE_ARB = 35858;
  private static final int GL_EDGE_FLAG = 2883;
  private static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;
  private static final int GL_READ_FRAMEBUFFER_ANGLE = 36008;
  private static final int GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 33556;
  private static final int GL_POLYGON_MODE_NV = 2880;
  private static final int GL_FOG_COORDINATE_ARRAY_EXT = 33879;
  private static final int GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 37597;
  private static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983;
  private static final int GL_VERTEX4_BIT_PGI = 8;
  private static final int GL_OPERAND2_ALPHA_EXT = 34202;
  private static final int GL_VERTEX_SHADER_VARIANTS_EXT = 34768;
  private static final int GL_MAX_ATTRIB_STACK_DEPTH = 3381;
  private static final int GL_ALL_COMPLETED_NV = 34034;
  private static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
  private static final int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948;
  private static final int GL_RGB_FLOAT32_APPLE = 34837;
  private static final int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 37865;
  private static final int GL_MAP2_VERTEX_ATTRIB2_4_NV = 34418;
  private static final int GL_DRAW_BUFFER8_EXT = 34861;
  private static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 36269;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
  private static final int GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 36285;
  private static final int GL_VERSION = 7938;
  private static final int GL_INT_SAMPLER_2D_EXT = 36298;
  private static final int GL_STACK_UNDERFLOW = 1284;
  private static final int GL_NEGATIVE_Y_EXT = 34778;
  private static final int GL_OVERLAY_NV = 37526;
  private static final int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099;
  private static final int GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 33638;
  private static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
  private static final int GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894;
  private static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;
  private static final int GL_CON_10_ATI = 35147;
  private static final int GL_RESET_NOTIFICATION_STRATEGY_KHR = 33366;
  private static final int GL_RGB32F_ARB = 34837;
  private static final int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123;
  private static final int GL_ATTACHED_SHADERS = 35717;
  private static final int GL_DITHER = 3024;
  private static final int GL_MAT_COLOR_INDEXES_BIT_PGI = 16777216;
  private static final int GL_POST_CONVOLUTION_RED_BIAS_EXT = 32800;
  private static final int GL_DEBUG_SOURCE_THIRD_PARTY = 33353;
  private static final int GL_OUTPUT_COLOR1_EXT = 34716;
  private static final int GL_LAYOUT_LINEAR_INTEL = 1;
  private static final int GL_FOG = 2912;
  private static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 37863;
  private static final int GL_FOG_START = 2915;
  private static final int GL_FOG_SPECULAR_TEXTURE_WIN = 33004;
  private static final int GL_POLYGON_OFFSET_LINE_NV = 10754;
  private static final int GL_HARDLIGHT_KHR = 37531;
  private static final int GL_COLOR_MATRIX_STACK_DEPTH = 32946;
  private static final int GL_YCRCB_444_SGIX = 33212;
  private static final int GL_CLAMP_VERTEX_COLOR_ARB = 35098;
  private static final int GL_TILING_TYPES_EXT = 38275;
  private static final int GL_TEXTURE_RECTANGLE_NV = 34037;
  private static final int GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869;
  private static final int GL_SYNC_FLAGS = 37141;
  private static final int GL_STENCIL_INDEX8_EXT = 36168;
  private static final int GL_IMAGE_2D_MULTISAMPLE = 36949;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713;
  private static final int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 36049;
  private static final int GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 33499;
  private static final int GL_CON_26_ATI = 35163;
  private static final int GL_RECIP_ADD_SIGNED_ALPHA_IMG = 35845;
  private static final int GL_DEPTH_CLAMP_NV = 34383;
  private static final int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909;
  private static final int GL_OPERAND1_ALPHA_EXT = 34201;
  private static final int GL_TEXTURE_WIDTH = 4096;
  private static final int GL_TRACK_MATRIX_NV = 34376;
  private static final int GL_TEXTURE_DEPTH_SIZE_ARB = 34890;
  private static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 35096;
  private static final int GL_SYNC_X11_FENCE_EXT = 37089;
  private static final int GL_NUM_SPARSE_LEVELS_ARB = 37290;
  private static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532;
  private static final int GL_COMBINE_ALPHA_EXT = 34162;
  private static final int GL_RGBA4_EXT = 32854;
  private static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338;
  private static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;
  private static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993;
  private static final int GL_SAMPLE_SHADING_ARB = 35894;
  private static final int GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
  private static final int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487;
  private static final int GL_BLEND_SRC_ALPHA_OES = 32971;
  private static final int GL_MODELVIEW19_ARB = 34611;
  private static final int GL_CLAMP_VERTEX_COLOR = 35098;
  private static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;
  private static final int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021;
  private static final int GL_CURRENT_SECONDARY_COLOR = 33881;
  private static final int GL_CURRENT_FOG_COORDINATE_EXT = 33875;
  private static final int GL_IMAGE_3D = 36942;
  private static final int GL_COMPILE = 4864;
  private static final int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 37288;
  private static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 34074;
  private static final int GL_VIEW_CLASS_8_BITS = 33483;
  private static final int GL_LINE_BIT = 4;
  private static final int GL_PACK_LSB_FIRST = 3329;
  private static final int GL_REG_27_ATI = 35132;
  private static final int GL_TEXTURE_COMPARE_FUNC = 34893;
  private static final int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 37762;
  private static final int GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974;
  private static final int GL_CON_31_ATI = 35168;
  private static final int GL_LO_SCALE_NV = 34575;
  private static final int GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785;
  private static final int GL_INVALID_ENUM = 1280;
  private static final int GL_CON_9_ATI = 35146;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311;
  private static final int GL_POINT_NV = 6912;
  private static final int GL_DRAW_BUFFER14_ATI = 34867;
  private static final int GL_TRANSLATE_Y_NV = 37007;
  private static final int GL_RGB_SCALE_ARB = 34163;
  private static final int GL_DETAIL_TEXTURE_LEVEL_SGIS = 32922;
  private static final int GL_TEXTURE_FORMAT_QCOM = 35798;
  private static final int GL_TEXTURE24_ARB = 34008;
  private static final int GL_CURRENT_QUERY = 34917;
  private static final int GL_ALWAYS = 519;
  private static final int GL_COLOR_SUM_EXT = 33880;
  private static final int GL_LOWER_LEFT_EXT = 36001;
  private static final int GL_TEXTURE_RENDERBUFFER_NV = 36437;
  private static final int GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895;
  private static final int GL_MODELVIEW15_ARB = 34607;
  private static final int GL_DYNAMIC_STORAGE_BIT_EXT = 256;
  private static final int GL_INVERT = 5386;
  private static final int GL_GREEN_BIAS = 3353;
  private static final int GL_PASS_THROUGH_NV = 34534;
  private static final int GL_VIDEO_COLOR_CONVERSION_MIN_NV = 36907;
  private static final int GL_STENCIL_BACK_WRITEMASK = 36005;
  private static final int GL_READ_FRAMEBUFFER_BINDING_APPLE = 36010;
  private static final int GL_LUMINANCE = 6409;
  private static final int GL_MAP1_VERTEX_ATTRIB11_4_NV = 34411;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070;
  private static final int GL_OP_NEGATE_EXT = 34691;
  private static final int GL_PATH_STENCIL_REF_NV = 37048;
  private static final int GL_MAP2_VERTEX_ATTRIB6_4_NV = 34422;
  private static final int GL_ZERO_EXT = 34781;
  private static final int GL_UNSIGNED_INVERT_NV = 34103;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
  private static final int GL_VERTEX_SHADER_EXT = 34688;
  private static final int GL_DRAW_BUFFER14_ARB = 34867;
  private static final int GL_PROGRAM_ERROR_STRING_NV = 34932;
  private static final int GL_DYNAMIC_STORAGE_BIT = 256;
  private static final int GL_PACK_ROW_BYTES_APPLE = 35349;
  private static final int GL_CLIP_ORIGIN = 37724;
  private static final int GL_MAX_SAMPLES = 36183;
  private static final int GL_VARIABLE_C_NV = 34085;
  private static final int GL_COORD_REPLACE_ARB = 34914;
  private static final int GL_DEPTH24_STENCIL8_OES = 35056;
  private static final int GL_TEXTURE15_ARB = 33999;
  private static final int GL_POST_CONVOLUTION_RED_SCALE = 32796;
  private static final int GL_TEXTURE_LOD_BIAS_R_SGIX = 33168;
  private static final int GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 16;
  private static final int GL_LAST_VERTEX_CONVENTION = 36430;
  private static final int GL_2PASS_1_EXT = 32931;
  private static final int GL_MAP2_GRID_SEGMENTS = 3539;
  private static final int GL_HALF_FLOAT_ARB = 5131;
  private static final int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 34081;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 34069;
  private static final int GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 35761;
  private static final int GL_RG8_EXT = 33323;
  private static final int GL_MAX_VERTEX_UNITS_OES = 34468;
  private static final int GL_UNIFORM_BARRIER_BIT = 4;
  private static final int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;
  private static final int GL_CURRENT_COLOR = 2816;
  private static final int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721;
  private static final int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081;
  private static final int GL_YCBAYCR8A_4224_NV = 36914;
  private static final int GL_TRIANGLES_ADJACENCY_ARB = 12;
  private static final int GL_SRGB8_ALPHA8_EXT = 35907;
  private static final int GL_SRGB8_NV = 35905;
  private static final int GL_PROJECTION_MATRIX = 2983;
  private static final int GL_NEAREST_CLIPMAP_NEAREST_SGIX = 33869;
  private static final int GL_RGBA_SIGNED_COMPONENTS_EXT = 35900;
  private static final int GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133;
  private static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805;
  private static final int GL_MODELVIEW24_ARB = 34616;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265;
  private static final int GL_HSL_SATURATION_NV = 37550;
  private static final int GL_OR_INVERTED = 5389;
  private static final int GL_CONTEXT_FLAGS = 33310;
  private static final int GL_CLIP_DEPTH_MODE = 37725;
  private static final int GL_BGR_INTEGER = 36250;
  private static final int GL_MALI_PROGRAM_BINARY_ARM = 36705;
  private static final int GL_TEXTURE_VIEW_MIN_LEVEL_OES = 33499;
  private static final int GL_COMBINER_AB_OUTPUT_NV = 34122;
  private static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;
  private static final int GL_INT64_ARB = 5134;
  private static final int GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8;
  private static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;
  private static final int GL_MAP1_VERTEX_ATTRIB5_4_NV = 34405;
  private static final int GL_MODELVIEW30_ARB = 34622;
  private static final int GL_TEXTURE_LUMINANCE_SIZE_EXT = 32864;
  private static final int GL_EVAL_VERTEX_ATTRIB1_NV = 34503;
  private static final int GL_CLIP_PLANE5_IMG = 12293;
  private static final int GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054;
  private static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759;
  private static final int GL_INTERLEAVED_ATTRIBS_EXT = 35980;
  private static final int GL_PROGRAM_FORMAT_ASCII_ARB = 34933;
  private static final int GL_MAX_TEXTURE_SIZE = 3379;
  private static final int GL_SPARE0_NV = 34094;
  private static final int GL_CLIENT_VERTEX_ARRAY_BIT = 2;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073;
  private static final int GL_RENDERBUFFER_WIDTH = 36162;
  private static final int GL_2_BYTES = 5127;
  private static final int GL_MODELVIEW0_EXT = 5888;
  private static final int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 32798;
  private static final int GL_INDEX_ARRAY_LIST_IBM = 103073;
  private static final int GL_COMPUTE_PROGRAM_NV = 37115;
  private static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152;
  private static final int GL_DEPTH_BUFFER_BIT5_QCOM = 8192;
  private static final int GL_NEVER = 512;
  private static final int GL_PREVIOUS_TEXTURE_INPUT_NV = 34532;
  private static final int GL_UNSIGNED_INT16_VEC2_NV = 36849;
  private static final int GL_OBJECT_DELETE_STATUS_ARB = 35712;
  private static final int GL_IMAGE_CUBE = 36944;
  private static final int GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;
  private static final int GL_STRICT_SCISSOR_HINT_PGI = 107032;
  private static final int GL_TEXTURE_MAX_LOD = 33083;
  private static final int GL_CLIP_DISTANCE0_EXT = 12288;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY = 36876;
  private static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370;
  private static final int GL_RGBA32I_EXT = 36226;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;
  private static final int GL_MAD_ATI = 35176;
  private static final int GL_TRANSFORM_FEEDBACK_RECORD_NV = 35974;
  private static final int GL_YCRCB_422_SGIX = 33211;
  private static final int GL_STENCIL_BACK_REF = 36003;
  private static final int GL_CONVOLUTION_HEIGHT = 32793;
  private static final int GL_REFLECTION_MAP_OES = 34066;
  private static final int GL_ASYNC_MARKER_SGIX = 33577;
  private static final int GL_LINE_STRIP_ADJACENCY_OES = 11;
  private static final int GL_SEPARATE_ATTRIBS_NV = 35981;
  private static final int GL_DEPTH_COMPONENT16_OES = 33189;
  private static final int GL_INTERNALFORMAT_STENCIL_SIZE = 33398;
  private static final int GL_MAP_UNSYNCHRONIZED_BIT_EXT = 32;
  private static final int GL_FULL_RANGE_EXT = 34785;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060;
  private static final int GL_TEXTURE_COMPARE_MODE_EXT = 34892;
  private static final int GL_TRANSFORM_FEEDBACK_BINDING_NV = 36389;
  private static final int GL_STENCIL_BACK_FAIL_ATI = 34817;
  private static final int GL_XOR_NV = 5382;
  private static final int GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 6;
  private static final int GL_CLIENT_PIXEL_STORE_BIT = 1;
  private static final int GL_INT_IMAGE_2D_RECT = 36954;
  private static final int GL_MATERIAL_SIDE_HINT_PGI = 107052;
  private static final int GL_TESSELLATION_FACTOR_AMD = 36869;
  private static final int GL_TEXTURE_BINDING_RECTANGLE_NV = 34038;
  private static final int GL_RG32F = 33328;
  private static final int GL_PACK_ALIGNMENT = 3333;
  private static final int GL_RG32I = 33339;
  private static final int GL_ROUND_NV = 37028;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;
  private static final int GL_INDEX_ARRAY_POINTER_EXT = 32913;
  private static final int GL_PROGRAM_LENGTH_NV = 34343;
  private static final int GL_STREAM_COPY = 35042;
  private static final int GL_LUMINANCE16I_EXT = 36236;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068;
  private static final int GL_MINMAX_SINK = 32816;
  private static final int GL_CONVOLUTION_HINT_SGIX = 33558;
  private static final int GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061;
  private static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;
  private static final int GL_MATRIX7_NV = 34359;
  private static final int GL_LIGHTEN_KHR = 37528;
  private static final int GL_VBO_FREE_MEMORY_ATI = 34811;
  private static final int GL_FRACTIONAL_EVEN_EXT = 36476;
  private static final int GL_FEEDBACK_BUFFER_POINTER = 3568;
  private static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 37080;
  private static final int GL_FONT_UNINTELLIGIBLE_NV = 37739;
  private static final int GL_COLOR_TABLE_BLUE_SIZE = 32988;
  private static final int GL_FLOAT_MAT4x2_NV = 35689;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961;
  private static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807;
  private static final int GL_DRAW_BUFFER3_ATI = 34856;
  private static final int GL_MAX_FRAMEBUFFER_HEIGHT = 37654;
  private static final int GL_PATH_PROJECTION_MATRIX_NV = 2983;
  private static final int GL_UNDEFINED_VERTEX_EXT = 33376;
  private static final int GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 33523;
  private static final int GL_PATH_FILL_MODE_NV = 36992;
  private static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 37289;
  private static final int GL_RENDER_MODE = 3136;
  private static final int GL_CLIP_FAR_HINT_PGI = 107041;
  private static final int GL_ELEMENT_ARRAY_BARRIER_BIT = 2;
  private static final int GL_DEPTH_EXT = 6145;
  private static final int GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21;
  private static final int GL_TEXTURE_BUFFER_OFFSET_EXT = 37277;
  private static final int GL_SAMPLER_CUBE_ARB = 35680;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058;
  private static final int GL_PERTURB_EXT = 34222;
  private static final int GL_PRESENT_DURATION_NV = 36395;
  private static final int GL_MOVE_TO_RESETS_NV = 37045;
  private static final int GL_STENCIL_INDEX1_OES = 36166;
  private static final int GL_BUFFER_MAPPED_OES = 35004;
  private static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;
  private static final int GL_DRAW_BUFFER5_EXT = 34858;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
  private static final int GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 34888;
  private static final int GL_TEXTURE_HEIGHT_QCOM = 35795;
  private static final int GL_PACK_SKIP_ROWS = 3331;
  private static final int GL_TEXTURE_POST_SPECULAR_HP = 33128;
  private static final int GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693;
  private static final int GL_TEXTURE_INDEX_SIZE_EXT = 33005;
  private static final int GL_VIEWPORT_BOUNDS_RANGE_NV = 33373;
  private static final int GL_RGBA32I = 36226;
  private static final int GL_CURRENT_RASTER_DISTANCE = 2825;
  private static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;
  private static final int GL_PRIMITIVE_BOUNDING_BOX_OES = 37566;
  private static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32;
  private static final int GL_RGBA32F = 34836;
  private static final int GL_DRAW_PIXEL_TOKEN = 1797;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 36320;
  private static final int GL_COLOR_CLEAR_VALUE = 3106;
  private static final int GL_DT_SCALE_NV = 34577;
  private static final int GL_DRAW_FRAMEBUFFER = 36009;
  private static final int GL_POLYGON_SMOOTH = 2881;
  private static final int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545;
  private static final int GL_NUM_EXTENSIONS = 33309;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967;
  private static final int GL_SMOOTH_CUBIC_CURVE_TO_NV = 16;
  private static final int GL_OPERAND0_RGB_ARB = 34192;
  private static final int GL_FRAMEBUFFER_OES = 36160;
  private static final int GL_RGBA16F_EXT = 34842;
  private static final int GL_RGBA8_OES = 32856;
  private static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
  private static final int GL_NUM_FRAGMENT_CONSTANTS_ATI = 35183;
  private static final int GL_CLAMP = 10496;
  private static final int GL_DRAW_BUFFER3_ARB = 34856;
  private static final int GL_FENCE_CONDITION_NV = 34036;
  private static final int GL_MAX_CLIP_PLANES_IMG = 3378;
  private static final int GL_DISCRETE_AMD = 36870;
  private static final int GL_MATRIX_STRIDE = 37631;
  private static final int GL_COMPRESSED_ALPHA_ARB = 34025;
  private static final int GL_BLEND_EQUATION = 32777;
  private static final int GL_PATCH_DEFAULT_OUTER_LEVEL = 36468;
  private static final int GL_CON_14_ATI = 35151;
  private static final int GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181;
  private static final int GL_ACTIVE_VARIABLES = 37637;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;
  private static final int GL_MODELVIEW2_ARB = 34594;
  private static final int GL_STENCIL_SAMPLES_NV = 37678;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 35979;
  private static final int GL_PERFMON_RESULT_AVAILABLE_AMD = 35780;
  private static final int GL_INCR_WRAP_OES = 34055;
  private static final int GL_PROGRAM_OBJECT_EXT = 35648;
  private static final int GL_ADD_BLEND_IMG = 35849;
  private static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640;
  private static final int GL_DEBUG_SOURCE_OTHER_ARB = 33355;
  private static final int GL_YCRCBA_SGIX = 33561;
  private static final int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
  private static final int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;
  private static final int GL_CON_22_ATI = 35159;
  private static final int GL_POINT_SIZE_ARRAY_OES = 35740;
  private static final int GL_UNSIGNED_BYTE = 5121;
  private static final int GL_RGB5_A1_EXT = 32855;
  private static final int GL_OUTPUT_TEXTURE_COORD28_EXT = 34745;
  private static final int GL_TEXTURE_FREE_MEMORY_ATI = 34812;
  private static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284;
  private static final int GL_SHADING_LANGUAGE_VERSION = 35724;
  private static final int GL_GREEN_MAX_CLAMP_INGR = 34149;
  private static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317;
  private static final int GL_SUPERSAMPLE_SCALE_Y_NV = 37747;
  private static final int GL_MATRIX19_ARB = 35027;
  private static final int GL_PIXEL_TEXTURE_SGIS = 33619;
  private static final int GL_ELEMENT_ARRAY_POINTER_APPLE = 35342;
  private static final int GL_MAX_CULL_DISTANCES = 33529;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 36489;
  private static final int GL_VARIANT_VALUE_EXT = 34788;
  private static final int GL_CURRENT_QUERY_EXT = 34917;
  private static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279;
  private static final int GL_FOG_COORD_ARRAY = 33879;
  private static final int GL_UNSIGNED_NORMALIZED_EXT = 35863;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 37826;
  private static final int GL_DOUBLE_MAT4 = 36680;
  private static final int GL_PIXEL_PACK_BUFFER_NV = 35051;
  private static final int GL_COMBINER4_NV = 34132;
  private static final int GL_RENDERBUFFER_BLUE_SIZE = 36178;
  private static final int GL_MAX_CLIP_DISTANCES_EXT = 3378;
  private static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 36655;
  private static final int GL_FIELD_UPPER_NV = 36898;
  private static final int GL_COUNTER_RANGE_AMD = 35777;
  private static final int GL_ETC1_RGB8_OES = 36196;
  private static final int GL_BLUE_INTEGER = 36246;
  private static final int GL_VERTEX_STATE_PROGRAM_NV = 34337;
  private static final int GL_INTENSITY16UI_EXT = 36217;
  private static final int GL_DOUBLE_MAT3 = 36679;
  private static final int GL_DOUBLE_MAT2 = 36678;
  private static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 37068;
  private static final int GL_STENCIL_WRITEMASK = 2968;
  private static final int GL_MAX_CONVOLUTION_WIDTH = 32794;
  private static final int GL_TEXTURE_ALPHA_MODULATE_IMG = 35846;
  private static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973;
  private static final int GL_QUAD_LUMINANCE4_SGIS = 33056;
  private static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
  private static final int GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;
  private static final int GL_DRAW_BUFFER12_EXT = 34865;
  private static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;
  private static final int GL_STENCIL_BUFFER_BIT0_QCOM = 65536;
  private static final int GL_VERTEX_ARRAY_TYPE_EXT = 32891;
  private static final int GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019;
  private static final int GL_DEBUG_LOGGED_MESSAGES_KHR = 37189;
  private static final int GL_MULTISAMPLES_NV = 37745;
  private static final int GL_ELEMENT_ARRAY_APPLE = 35340;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;
  private static final int GL_BUMP_TEX_UNITS_ATI = 34680;
  private static final int GL_VERTEX_ATTRIB_ARRAY7_NV = 34391;
  private static final int GL_INTERNALFORMAT_GREEN_TYPE = 33401;
  private static final int GL_SWIZZLE_STQ_ATI = 35191;
  private static final int GL_SRC1_RGB = 34177;
  private static final int GL_SAMPLER_CUBE = 35680;
  private static final int GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136;
  private static final int GL_COLOR_TABLE_BLUE_SIZE_SGI = 32988;
  private static final int GL_EQUIV = 5385;
  private static final int GL_LINEARBURN_NV = 37541;
  private static final int GL_INDEX_ARRAY_POINTER = 32913;
  private static final int GL_CAVEAT_SUPPORT = 33464;
  private static final int GL_NORMAL_MAP_NV = 34065;
  private static final int GL_TEXTURE_TOO_LARGE_EXT = 32869;
  private static final int GL_LUMINANCE32F_EXT = 34840;
  private static final int GL_REG_3_ATI = 35108;
  private static final int GL_PERFMON_GLOBAL_MODE_QCOM = 36768;
  private static final int GL_ENABLE_BIT = 8192;
  private static final int GL_LOW_FLOAT = 36336;
  private static final int GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 36492;
  private static final int GL_PALETTE4_RGBA8_OES = 35729;
  private static final int GL_UNSIGNED_INT64_VEC2_NV = 36853;
  private static final int GL_DEPTH_TEXTURE_MODE = 34891;
  private static final int GL_UNSIGNED_INT = 5125;
  private static final int GL_STORAGE_PRIVATE_APPLE = 34237;
  private static final int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322;
  private static final int GL_TEXTURE_RESIDENT = 32871;
  private static final int GL_TEXTURE20_ARB = 34004;
  private static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;
  private static final int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241;
  private static final int GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138;
  private static final int GL_CONTEXT_ROBUST_ACCESS_KHR = 37107;
  private static final int GL_PRIMITIVE_BOUNDING_BOX = 37566;
  private static final int GL_ELEMENT_ARRAY_TYPE_ATI = 34665;
  private static final int GL_DRAW_BUFFER10_ARB = 34863;
  private static final int GL_EXP = 2048;
  private static final int GL_HISTOGRAM_WIDTH_EXT = 32806;
  private static final int GL_LINE_SMOOTH_HINT = 3154;
  private static final int GL_VIEW_CLASS_64_BITS = 33478;
  private static final int GL_4_BYTES_NV = 5129;
  private static final int GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865;
  private static final int GL_CLAMP_TO_EDGE_SGIS = 33071;
  private static final int GL_DEPTH_ATTACHMENT = 36096;
  private static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947;
  private static final int GL_SLUMINANCE_NV = 35910;
  private static final int GL_COLOR_ARRAY_SIZE = 32897;
  private static final int GL_FOG_COORDINATE_SOURCE_EXT = 33872;
  private static final int GL_OBJECT_LINE_SGIS = 33271;
  private static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832;
  private static final int GL_TEXTURE_DEPTH_EXT = 32881;
  private static final int GL_VIEWPORT_SUBPIXEL_BITS_OES = 33372;
  private static final int GL_CONVOLUTION_WIDTH_EXT = 32792;
  private static final int GL_DRAW_FRAMEBUFFER_APPLE = 36009;
  private static final int GL_CURRENT_NORMAL = 2818;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;
  private static final int GL_AND_REVERSE = 5378;
  private static final int GL_MODELVIEW11_ARB = 34603;
  private static final int GL_TRUE = 1;
  private static final int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 33632;
  private static final int GL_CON_18_ATI = 35155;
  private static final int GL_RGBA16_SNORM_EXT = 36763;
  private static final int GL_FOG_INDEX = 2913;
  private static final int GL_VERTEX_ARRAY_POINTER_EXT = 32910;
  private static final int GL_MIN_MAP_BUFFER_ALIGNMENT = 37052;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 36264;
  private static final int GL_SRC_IN_NV = 37514;
  private static final int GL_BLEND_SRC_RGB = 32969;
  private static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425;
  private static final int GL_FRAGMENT_LIGHT5_SGIX = 33809;
  private static final int GL_HISTOGRAM_LUMINANCE_SIZE = 32812;
  private static final int GL_UUID_SIZE_EXT = 16;
  private static final int GL_DRAW_BUFFER10_ATI = 34863;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 36055;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;
  private static final int GL_COMPRESSED_RGBA = 34030;
  private static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829;
  private static final int GL_CON_5_ATI = 35142;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
  private static final int GL_FORMAT_SUBSAMPLE_244_244_OML = 35203;
  private static final int GL_PATH_FORMAT_PS_NV = 36977;
  private static final int GL_DOT3_RGB_EXT = 34624;
  private static final int GL_BLEND_COLOR = 32773;
  private static final int GL_SIGNALED_APPLE = 37145;
  private static final int GL_DEPTH_BIAS = 3359;
  private static final int GL_REG_31_ATI = 35136;
  private static final int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920;
  private static final int GL_UNSIGNED_INT8_VEC2_NV = 36845;
  private static final int GL_SIGNED_INTENSITY8_NV = 34568;
  private static final int GL_OUTPUT_TEXTURE_COORD7_EXT = 34724;
  private static final int GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971;
  private static final int GL_CONVOLUTION_BORDER_MODE_EXT = 32787;
  private static final int GL_STENCIL_BACK_FUNC_ATI = 34816;
  private static final int GL_HISTOGRAM_SINK = 32813;
  private static final int GL_DEPTH_FUNC = 2932;
  private static final int GL_INT_IMAGE_1D_ARRAY = 36957;
  private static final int GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 128;
  private static final int GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 5;
  private static final int GL_TEXTURE_VIEW_NUM_LEVELS = 33500;
  private static final int GL_TEXTURE_3D_BINDING_EXT = 32874;
  private static final int GL_PROGRAM_INPUT = 37603;
  private static final int GL_RENDERBUFFER_OES = 36161;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070;
  private static final int GL_MODULATE_COLOR_IMG = 35844;
  private static final int GL_TEXTURE_BUFFER_OFFSET_OES = 37277;
  private static final int GL_FILL = 6914;
  private static final int GL_MAX_RENDERBUFFER_SIZE = 34024;
  private static final int GL_VERTEX_ARRAY_COUNT_EXT = 32893;
  private static final int GL_STENCIL_TAG_BITS_EXT = 35058;
  private static final int GL_WINDOW_RECTANGLE_MODE_EXT = 36627;
  private static final int GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954;
  private static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 34076;
  private static final int GL_IMAGE_CLASS_1_X_32 = 33467;
  private static final int GL_EVAL_VERTEX_ATTRIB12_NV = 34514;
  private static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36447;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 37851;
  private static final int GL_BUFFER_IMMUTABLE_STORAGE = 33311;
  private static final int GL_OP_ADD_EXT = 34695;
  private static final int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 35076;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;
  private static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 36493;
  private static final int GL_REFERENCE_PLANE_SGIX = 33149;
  private static final int GL_DRAW_BUFFER1_EXT = 34854;
  private static final int GL_FLOAT16_MAT4x3_AMD = 37325;
  private static final int GL_FLOAT_R_NV = 34944;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x10 = 37819;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881;
  private static final int GL_QUADS = 7;
  private static final int GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950;
  private static final int GL_RELATIVE_ROUNDED_RECT8_NV = 239;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 35972;
  private static final int GL_COMBINER1_NV = 34129;
  private static final int GL_LUMINANCE8I_EXT = 36242;
  private static final int GL_POINT_DISTANCE_ATTENUATION = 33065;
  private static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 35918;
  private static final int GL_DRAW_BUFFER13_NV = 34866;
  private static final int GL_SAMPLE_COVERAGE = 32928;
  private static final int GL_COMPRESSED_RGBA_ARB = 34030;
  private static final int GL_BUFFER_OBJECT_APPLE = 34227;
  private static final int GL_DYNAMIC_ATI = 34657;
  private static final int GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680;
  private static final int GL_ALPHA_MAX_SGIX = 33569;
  private static final int GL_MODELVIEW28_ARB = 34620;
  private static final int GL_ATOMIC_COUNTER_BUFFER_START = 37570;
  private static final int GL_IR_INSTRUMENT1_SGIX = 33151;
  private static final int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544;
  private static final int GL_OPERAND1_RGB_ARB = 34193;
  private static final int GL_DUAL_INTENSITY16_SGIS = 33051;
  private static final int GL_LINEAR_DETAIL_COLOR_SGIS = 32921;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 36876;
  private static final int GL_BUFFER_MAP_POINTER = 35005;
  private static final int GL_CONTEXT_LOST_WEBGL = 37442;
  private static final int GL_LIST_BASE = 2866;
  private static final int GL_SPOT_EXPONENT = 4613;
  private static final int GL_MAX_LABEL_LENGTH = 33512;
  private static final int GL_NAME_STACK_DEPTH = 3440;
  private static final int GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700;
  private static final int GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 37824;
  private static final int GL_SUB_ATI = 35173;
  private static final int GL_OFFSET_TEXTURE_SCALE_NV = 34530;
  private static final int GL_IMAGE_CLASS_1_X_16 = 33470;
  private static final int GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 35899;
  private static final int GL_PIXEL_MAP_G_TO_G = 3191;
  private static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;
  private static final int GL_MAP2_VERTEX_ATTRIB12_4_NV = 34428;
  private static final int GL_INDEX = 33314;
  private static final int GL_LUMINANCE_FLOAT16_APPLE = 34846;
  private static final int GL_DRAW_BUFFER14 = 34867;
  private static final int GL_DRAW_BUFFER15 = 34868;
  private static final int GL_AFFINE_3D_NV = 37012;
  private static final int GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 33554432;
  private static final int GL_VERTEX_STREAM5_ATI = 34673;
  private static final int GL_DRAW_BUFFER10 = 34863;
  private static final int GL_WEIGHT_SUM_UNITY_ARB = 34470;
  private static final int GL_DRAW_BUFFER11 = 34864;
  private static final int GL_CUBIC_IMG = 37177;
  private static final int GL_DRAW_BUFFER12 = 34865;
  private static final int GL_RED_MAX_CLAMP_INGR = 34148;
  private static final int GL_DRAW_BUFFER13 = 34866;
  private static final int GL_SWIZZLE_STRQ_ATI = 35194;
  private static final int GL_T2F_IUI_V3F_EXT = 33202;
  private static final int GL_INVERSE_NV = 34347;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983;
  private static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647;
  private static final int GL_BUMP_NUM_TEX_UNITS_ATI = 34679;
  private static final int GL_COVERAGE_ALL_FRAGMENTS_NV = 36565;
  private static final int GL_TEXTURE_VIEW_NUM_LAYERS = 33502;
  private static final int GL_INSTRUMENT_MEASUREMENTS_SGIX = 33153;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489;
  private static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;
  private static final int GL_FAILURE_NV = 36912;
  private static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079;
  private static final int GL_CLIP_PLANE1_IMG = 12289;
  private static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 33532;
  private static final int GL_DRAW_BUFFER7_NV = 34860;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 37795;
  private static final int GL_PALETTE4_RGB5_A1_OES = 35732;
  private static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384;
  private static final int GL_TEXTURE_3D_EXT = 32879;
  private static final int GL_MIN_SAMPLE_SHADING_VALUE = 35895;
  private static final int GL_PROXY_TEXTURE_2D = 32868;
  private static final int GL_DEPTH = 6145;
  private static final int GL_TEXTURE_CUBE_MAP_ARRAY_OES = 36873;
  private static final int GL_FACTOR_MIN_AMD = 36892;
  private static final int GL_COLOR_INDEX8_EXT = 32997;
  private static final int GL_SAMPLE_BUFFERS = 32936;
  private static final int GL_IMAGE_CLASS_4_X_16 = 33468;
  private static final int GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8;
  private static final int GL_COMPRESSED_RGB = 34029;
  private static final int GL_CLIENT_ALL_ATTRIB_BITS = -1;
  private static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 34040;
  private static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 33637;
  private static final int GL_IMAGE_BUFFER_EXT = 36945;
  private static final int GL_COLOR_TABLE_FORMAT = 32984;
  private static final int GL_FOG_FUNC_POINTS_SGIS = 33067;
  private static final int GL_MAP_TESSELLATION_NV = 34498;
  private static final int GL_OP_LOG_BASE_2_EXT = 34706;
  private static final int GL_SIGNED_LUMINANCE_ALPHA_NV = 34563;
  private static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096;
  private static final int GL_PROXY_TEXTURE_3D = 32880;
  private static final int GL_TEXTURE_BORDER_VALUES_NV = 34586;
  private static final int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 37833;
  private static final int GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 33528;
  private static final int GL_COLOR_LOGIC_OP = 3058;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712;
  private static final int GL_X_EXT = 34773;
  private static final int GL_MATRIX21_ARB = 35029;
  private static final int GL_CLIP_DISTANCE6_APPLE = 12294;
  private static final int GL_INTERNALFORMAT_SUPPORTED = 33391;
  private static final int GL_UNSIGNED_INT_IMAGE_BUFFER = 36967;
  private static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;
  private static final int GL_PER_STAGE_CONSTANTS_NV = 34101;
  private static final int GL_MINMAX_FORMAT_EXT = 32815;
  private static final int GL_TESS_CONTROL_SHADER_BIT_OES = 8;
  private static final int GL_SRC_NV = 37510;
  private static final int GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211;
  private static final int GL_CURRENT_RASTER_COLOR = 2820;
  private static final int GL_QUERY_NO_WAIT_NV = 36372;
  private static final int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918;
  private static final int GL_UNSIGNED_SHORT = 5123;
  private static final int GL_RGBA4_OES = 32854;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 37187;
  private static final int GL_READ_ONLY = 35000;
  private static final int GL_MODELVIEW0_MATRIX_EXT = 2982;
  private static final int GL_BLEND_SRC_ALPHA_EXT = 32971;
  private static final int GL_MAP1_VERTEX_ATTRIB8_4_NV = 34408;
  private static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657;
  private static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971;
  private static final int GL_MAX_COLOR_ATTACHMENTS_EXT = 36063;
  private static final int GL_ACCUM = 256;
  private static final int GL_MATRIX8_ARB = 35016;
  private static final int GL_READ_WRITE_ARB = 35002;
  private static final int GL_CONTEXT_FLAG_DEBUG_BIT = 2;
  private static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 16384;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;
  private static final int GL_TEXTURE_ENV_BIAS_SGIX = 32958;
  private static final int GL_PROGRAM_STRING_NV = 34344;
  private static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122;
  private static final int GL_TEXTURE7_ARB = 33991;
  private static final int GL_LOCAL_CONSTANT_EXT = 34755;
  private static final int GL_TRIANGLES_ADJACENCY = 12;
  private static final int GL_GEOMETRY_OUTPUT_TYPE_ARB = 36316;
  private static final int GL_CLIP_DISTANCE7_APPLE = 12295;
  private static final int GL_NORMAL_ARRAY_TYPE = 32894;
  private static final int GL_LUMINANCE_ALPHA16F_EXT = 34847;
  private static final int GL_PROXY_TEXTURE_1D = 32867;
  private static final int GL_MAX_IMAGE_SAMPLES_EXT = 36973;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
  private static final int GL_IS_ROW_MAJOR = 37632;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
  private static final int GL_INCR_WRAP = 34055;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36480;
  private static final int GL_QUERY_RESULT = 34918;
  private static final int GL_FRAMEBUFFER_BINDING_OES = 36006;
  private static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
  private static final int GL_TEXTURE_GEN_Q = 3171;
  private static final int GL_TEXTURE_GEN_R = 3170;
  private static final int GL_LUMINANCE12_ALPHA4 = 32838;
  private static final int GL_TEXTURE_GEN_S = 3168;
  private static final int GL_COMBINE = 34160;
  private static final int GL_TEXTURE_GEN_T = 3169;
  private static final int GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864;
  private static final int GL_CLIP_DISTANCE1_APPLE = 12289;
  private static final int GL_MAX_MAP_TESSELLATION_NV = 34518;
  private static final int GL_DST_OUT_NV = 37517;
  private static final int GL_OUTPUT_TEXTURE_COORD22_EXT = 34739;
  private static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428;
  private static final int GL_GEOMETRY_VERTICES_OUT_ARB = 36314;
  private static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 37155;
  private static final int GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137;
  private static final int GL_VIVIDLIGHT_NV = 37542;
  private static final int GL_REFERENCE_PLANE_EQUATION_SGIX = 33150;
  private static final int GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 37116;
  private static final int GL_DECR_WRAP_OES = 34056;
  private static final int GL_TESS_CONTROL_OUTPUT_VERTICES = 36469;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697;
  private static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967;
  private static final int GL_DOT_PRODUCT_TEXTURE_2D_NV = 34542;
  private static final int GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8;
  private static final int GL_REG_18_ATI = 35123;
  private static final int GL_CONTEXT_FLAG_NO_ERROR_BIT = 8;
  private static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464;
  private static final int GL_PATH_FORMAT_SVG_NV = 36976;
  private static final int GL_POINT_SPRITE_R_MODE_NV = 34915;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187;
  private static final int GL_SKIP_COMPONENTS4_NV = -3;
  private static final int GL_EVAL_VERTEX_ATTRIB4_NV = 34506;
  private static final int GL_FLOAT_MAT2_ARB = 35674;
  private static final int GL_COMPRESSED_SRGB = 35912;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 36050;
  private static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822;
  private static final int GL_COLOR_TABLE_LUMINANCE_SIZE = 32990;
  private static final int GL_CLIP_DISTANCE2_APPLE = 12290;
  private static final int GL_TEXTURE_BORDER_COLOR_OES = 4100;
  private static final int GL_TEXTURE_LUMINANCE_TYPE = 35860;
  private static final int GL_BACK_SECONDARY_COLOR_NV = 35960;
  private static final int GL_TEXTURE_SWIZZLE_G_EXT = 36419;
  private static final int GL_MODELVIEW6_ARB = 34598;
  private static final int GL_COLOR_ATTACHMENT8_NV = 36072;
  private static final int GL_ALL_SHADER_BITS = -1;
  private static final int GL_MAX_SAMPLE_MASK_WORDS_NV = 36441;
  private static final int GL_MAX_ACTIVE_LIGHTS_SGIX = 33797;
  private static final int GL_QUERY_BY_REGION_WAIT_INVERTED = 36377;
  private static final int GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282;
  private static final int GL_FLOAT16_VEC4_NV = 36859;
  private static final int GL_INDEX_MATERIAL_FACE_EXT = 33210;
  private static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 34803;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 35070;
  private static final int GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 34639;
  private static final int GL_SKIP_MISSING_GLYPH_NV = 37033;
  private static final int GL_CLIP_DISTANCE3_APPLE = 12291;
  private static final int GL_TEXTURE_REDUCTION_MODE_ARB = 37734;
  private static final int GL_QUERY_RESULT_ARB = 34918;
  private static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;
  private static final int GL_COLOR_ARRAY_TYPE_EXT = 32898;
  private static final int GL_UNSIGNED_INT_24_8 = 34042;
  private static final int GL_ALPHA_SNORM = 36880;
  private static final int GL_PROXY_TEXTURE_2D_ARRAY = 35867;
  private static final int GL_SHADER_OPERATION_NV = 34527;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048;
  private static final int GL_COMPRESSED_RED = 33317;
  private static final int GL_DETAIL_TEXTURE_2D_SGIS = 32917;
  private static final int GL_IMAGE_CLASS_4_X_32 = 33465;
  private static final int GL_STATIC_DRAW_ARB = 35044;
  private static final int GL_OVERLAY_KHR = 37526;
  private static final int GL_RED_BIAS = 3349;
  private static final int GL_RG16F_EXT = 33327;
  private static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069;
  private static final int GL_UNSIGNED_INT_10_10_10_2_EXT = 32822;
  private static final int GL_INTENSITY16_EXT = 32845;
  private static final int GL_TEXTURE_DEPTH = 32881;
  private static final int GL_IMAGE_1D = 36940;
  private static final int GL_PATH_COVER_DEPTH_FUNC_NV = 37055;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;
  private static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;
  private static final int GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
  private static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;
  private static final int GL_TEXTURE_OBJECT_VALID_QCOM = 35803;
  private static final int GL_BLEND_PREMULTIPLIED_SRC_NV = 37504;
  private static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286;
  private static final int GL_TESS_CONTROL_SHADER = 36488;
  private static final int GL_FLOAT_R32_NV = 34949;
  private static final int GL_COLOR_INDEX = 6400;
  private static final int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 33158;
  private static final int GL_MAX_ELEMENTS_INDICES = 33001;
  private static final int GL_VERTEX_ATTRIB_ARRAY15_NV = 34399;
  private static final int GL_OUTPUT_VERTEX_EXT = 34714;
  private static final int GL_BLEND_EQUATION_OES = 32777;
  private static final int GL_SAMPLER_2D_RECT = 35683;
  private static final int GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 33640;
  private static final int GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 36711;
  private static final int GL_STENCIL_INDEX16 = 36169;
  private static final int GL_SRC_ALPHA = 770;
  private static final int GL_IMAGE_2D = 36941;
  private static final int GL_DEPTH_BUFFER_BIT2_QCOM = 1024;
  private static final int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;
  private static final int GL_VERSION_ES_CL_1_1 = 1;
  private static final int GL_VERSION_ES_CL_1_0 = 1;
  private static final int GL_INTERNALFORMAT_BLUE_SIZE = 33395;
  private static final int GL_3D = 1537;
  private static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973;
  private static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638;
  private static final int GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 38480;
  private static final int GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912;
  private static final int GL_DEBUG_TYPE_POP_GROUP = 33386;
  private static final int GL_FRAGMENT_LIGHT7_SGIX = 33811;
  private static final int GL_TESS_EVALUATION_SHADER_BIT = 16;
  private static final int GL_COVERAGE_BUFFER_BIT_NV = 32768;
  private static final int GL_COMPRESSED_INTENSITY_ARB = 34028;
  private static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718;
  private static final int GL_RELATIVE_ROUNDED_RECT_NV = 233;
  private static final int GL_TRACE_MASK_MESA = 34645;
  private static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831;
  private static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 34758;
  private static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;
  private static final int GL_RENDERBUFFER_BINDING = 36007;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;
  private static final int GL_CONJOINT_NV = 37508;
  private static final int GL_COLOR_BUFFER_BIT = 16384;
  private static final int GL_UNIFORM_BUFFER = 35345;
  private static final int GL_OPERAND2_RGB_EXT = 34194;
  private static final int GL_POINT_SIZE_RANGE = 2834;
  private static final int GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 35971;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707;
  private static final int GL_GREEN_SCALE = 3352;
  private static final int GL_ELEMENT_ARRAY_UNIFIED_NV = 36639;
  private static final int GL_4PASS_0_EXT = 32932;
  private static final int GL_INTENSITY32F_ARB = 34839;
  private static final int GL_COPY_WRITE_BUFFER_NV = 36663;
  private static final int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990;
  private static final int GL_TEXTURE_RED_SIZE = 32860;
  private static final int GL_MATRIX23_ARB = 35031;
  private static final int GL_LUMINANCE8_SNORM = 36885;
  private static final int GL_VIRTUAL_PAGE_SIZE_X_EXT = 37269;
  private static final int GL_RENDERBUFFER_HEIGHT_EXT = 36163;
  private static final int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
  private static final int GL_POST_CONVOLUTION_COLOR_TABLE = 32977;
  private static final int GL_MATRIX2_ARB = 35010;
  private static final int GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;
  private static final int GL_RGB8UI_EXT = 36221;
  private static final int GL_ALPHA32F_EXT = 34838;
  private static final int GL_BOUNDING_BOX_NV = 37005;
  private static final int GL_CONVOLUTION_1D_EXT = 32784;
  private static final int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 33091;
  private static final int GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873;
  private static final int GL_RGBA32UI_EXT = 36208;
  private static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895;
  private static final int GL_REG_20_ATI = 35125;
  private static final int GL_RESET_NOTIFICATION_STRATEGY_ARB = 33366;
  private static final int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 35053;
  private static final int GL_HILO8_NV = 34910;
  private static final int GL_VERTEX_SHADER_INVARIANTS_EXT = 34769;
  private static final int GL_TRACK_MATRIX_TRANSFORM_NV = 34377;
  private static final int GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 34520;
  private static final int GL_DEBUG_SEVERITY_LOW_KHR = 37192;
  private static final int GL_PIXEL_PACK_BUFFER_EXT = 35051;
  private static final int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 32802;
  private static final int GL_LUMINANCE16_ALPHA16_EXT = 32840;
  private static final int GL_VERTEX_ARRAY_SIZE = 32890;
  private static final int GL_MAP_INVALIDATE_RANGE_BIT = 4;
  private static final int GL_UNIFORM_IS_ROW_MAJOR = 35390;
  private static final int GL_PACK_COMPRESSED_BLOCK_SIZE = 37166;
  private static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273;
  private static final int GL_UNIFORM_BLOCK_INDEX = 35386;
  private static final int GL_DEBUG_CATEGORY_OTHER_AMD = 37200;
  private static final int GL_OPTIMAL_TILING_EXT = 38276;
  private static final int GL_DUAL_LUMINANCE12_SGIS = 33046;
  private static final int GL_MATRIX30_ARB = 35038;
  private static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658;
  private static final int GL_SAMPLER_2D_ARB = 35678;
  private static final int GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 37698;
  private static final int GL_RENDERBUFFER_DEPTH_SIZE_OES = 36180;
  private static final int GL_UNIFORM_BUFFER_EXT = 36334;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_NV = 36006;
  private static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574;
  private static final int GL_TEXTURE_BASE_LEVEL = 33084;
  private static final int GL_ELEMENT_ARRAY_ATI = 34664;
  private static final int GL_CONVEX_HULL_NV = 37003;
  private static final int GL_SRC_ATOP_NV = 37518;
  private static final int GL_PATH_COMMAND_COUNT_NV = 37021;
  private static final int GL_SPRITE_TRANSLATION_SGIX = 33099;
  private static final int GL_COUNTER_TYPE_AMD = 35776;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064;
  private static final int GL_REPLACE_OLDEST_SUN = 3;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
  private static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592;
  private static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588;
  private static final int GL_NORMAL_ARRAY = 32885;
  private static final int GL_SOURCE0_RGB_EXT = 34176;
  private static final int GL_CONSTANT_BORDER_HP = 33105;
  private static final int GL_MAX_LIST_NESTING = 2865;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 37180;
  private static final int GL_PINLIGHT_NV = 37544;
  private static final int GL_CURRENT_PALETTE_MATRIX_OES = 34883;
  private static final int GL_VERTEX_ARRAY_LENGTH_NV = 36651;
  private static final int GL_TEXTURE_INTENSITY_TYPE_ARB = 35861;
  private static final int GL_TEXTURE4_ARB = 33988;
  private static final int GL_BUFFER_UPDATE_BARRIER_BIT = 512;
  private static final int GL_BLUE_MIN_CLAMP_INGR = 34146;
  private static final int GL_SIGNED_LUMINANCE_NV = 34561;
  private static final int GL_NUM_INSTRUCTIONS_TOTAL_ATI = 35186;
  private static final int GL_RGBA_MODE = 3121;
  private static final int GL_INT_IMAGE_2D_ARRAY_EXT = 36958;
  private static final int GL_SEPARATE_SPECULAR_COLOR_EXT = 33274;
  private static final int GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576;
  private static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943;
  private static final int GL_RGB16I = 36233;
  private static final int GL_SCISSOR_COMMAND_NV = 17;
  private static final int GL_COMBINER7_NV = 34135;
  private static final int GL_POST_CONVOLUTION_ALPHA_BIAS = 32803;
  private static final int GL_PER_GPU_STORAGE_BIT_NV = 2048;
  private static final int GL_FRAGMENT_PROGRAM_POSITION_MESA = 35760;
  private static final int GL_COMPRESSED_R11_EAC = 37488;
  private static final int GL_DEPTH_COMPONENT24_SGIX = 33190;
  private static final int GL_VARIABLE_D_NV = 34086;
  private static final int GL_RGB16F = 34843;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694;
  private static final int GL_COLOR_MATRIX_SGI = 32945;
  private static final int GL_NAMED_STRING_LENGTH_ARB = 36329;
  private static final int GL_RGBA4_S3TC = 33699;
  private static final int GL_DEPTH_STENCIL_TO_RGBA_NV = 34926;
  private static final int GL_VERTEX_PROGRAM_ARB = 34336;
  private static final int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061;
  private static final int GL_COLOR_BUFFER_BIT6_QCOM = 64;
  private static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 37273;
  private static final int GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490;
  private static final int GL_MIRRORED_REPEAT = 33648;
  private static final int GL_STATE_RESTORE = 35804;
  private static final int GL_TEXTURE_VIEW_MIN_LEVEL = 33499;
  private static final int GL_LIGHTING_BIT = 64;
  private static final int GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287;
  private static final int GL_AUTO_GENERATE_MIPMAP = 33429;
  private static final int GL_IMAGE_2D_RECT_EXT = 36943;
  private static final int GL_REG_11_ATI = 35116;
  private static final int GL_UNPACK_RESAMPLE_SGIX = 33839;
  private static final int GL_MAX_TEXTURE_LOD_BIAS = 34045;
  private static final int GL_PATH_DASH_ARRAY_COUNT_NV = 37023;
  private static final int GL_PROGRAM_SEPARABLE_EXT = 33368;
  private static final int GL_SOURCE1_ALPHA_ARB = 34185;
  private static final int GL_VERTEX_STREAM1_ATI = 34669;
  private static final int GL_BOOL = 35670;
  private static final int GL_VERTEX_ARRAY_BINDING_OES = 34229;
  private static final int GL_TEXTURE_COORD_NV = 35961;
  private static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069;
  private static final int GL_DUDV_ATI = 34681;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 36874;
  private static final int GL_COLOR_ARRAY_STRIDE = 32899;
  private static final int GL_COMBINER_CD_DOT_PRODUCT_NV = 34118;
  private static final int GL_TESS_GEN_VERTEX_ORDER_EXT = 36472;
  private static final int GL_VERTEX_ATTRIB_ARRAY4_NV = 34388;
  private static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
  private static final int GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927;
  private static final int GL_MODELVIEW9_ARB = 34601;
  private static final int GL_UNPACK_IMAGE_DEPTH_SGIS = 33075;
  private static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
  private static final int GL_COMPLETION_STATUS_KHR = 37297;
  private static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723;
  private static final int GL_R11F_G11F_B10F_EXT = 35898;
  private static final int GL_SAMPLER_RENDERBUFFER_NV = 36438;
  private static final int GL_FRAGMENT_LIGHT0_SGIX = 33804;
  private static final int GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699;
  private static final int GL_PRIMITIVE_RESTART_INDEX = 36766;
  private static final int GL_EDGEFLAG_BIT_PGI = 262144;
  private static final int GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701;
  private static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594;
  private static final int GL_FUNC_ADD_OES = 32774;
  private static final int GL_DEBUG_SEVERITY_HIGH_ARB = 37190;
  private static final int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949;
  private static final int GL_DUAL_INTENSITY8_SGIS = 33049;
  private static final int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323;
  private static final int GL_UNPACK_ROW_LENGTH_EXT = 3314;
  private static final int GL_GEOMETRY_INPUT_TYPE_ARB = 36315;
  private static final int GL_POINT_SIZE_MAX_EXT = 33063;
  private static final int GL_DEPTH_BUFFER_BIT3_QCOM = 2048;
  private static final int GL_MULTISAMPLE_ARB = 32925;
  private static final int GL_CLOSE_PATH_NV = 0;
  private static final int GL_VIRTUAL_PAGE_SIZE_Z_ARB = 37271;
  private static final int GL_DEBUG_SOURCE_API_ARB = 33350;
  private static final int GL_INVALID_FRAMEBUFFER_OPERATION_OES = 1286;
  private static final int GL_SOURCE3_ALPHA_NV = 34187;
  private static final int GL_INDEX_MATERIAL_EXT = 33208;
  private static final int GL_RGBA8I_EXT = 36238;
  private static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;
  private static final int GL_HSL_LUMINOSITY_KHR = 37552;
  private static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = 37165;
  private static final int GL_MULTISAMPLE_3DFX = 34482;
  private static final int GL_REPLACE_MIDDLE_SUN = 2;
  private static final int GL_TEXTURE10_ARB = 33994;
  private static final int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922;
  private static final int GL_BLEND_SRC = 3041;
  private static final int GL_HIGH_INT = 36341;
  private static final int GL_PIXEL_TRANSFORM_2D_EXT = 33584;
  private static final int GL_FOG_COORDINATE_SOURCE = 33872;
  private static final int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113;
  private static final int GL_OP_FRAC_EXT = 34697;
  private static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382;
  private static final int GL_DECR = 7683;
  private static final int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906;
  private static final int GL_DEPTH_COMPONENT32 = 33191;
  private static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
  private static final int GL_MVP_MATRIX_EXT = 34787;
  private static final int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
  private static final int GL_NUM_TILING_TYPES_EXT = 38274;
  private static final int GL_VIEW_CLASS_96_BITS = 33477;
  private static final int GL_NORMAL_MAP_ARB = 34065;
  private static final int GL_CURRENT_SECONDARY_COLOR_EXT = 33881;
  private static final int GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 1073741824;
  private static final int GL_MAX_DRAW_BUFFERS_ARB = 34852;
  private static final int GL_RGB4_EXT = 32847;
  private static final int GL_MAP1_TANGENT_EXT = 33860;
  private static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897;
  private static final int GL_BUFFER_IMMUTABLE_STORAGE_EXT = 33311;
  private static final int GL_COLOR_ATTACHMENT3_NV = 36067;
  private static final int GL_ALL_SHADER_BITS_EXT = -1;
  private static final int GL_SUPERSAMPLE_SCALE_X_NV = 37746;
  private static final int GL_BLUE_SCALE = 3354;
  private static final int GL_MAX_VERTEX_UNITS_ARB = 34468;
  private static final int GL_PATH_INITIAL_DASH_CAP_NV = 36988;
  private static final int GL_INDEX_ARRAY_ADDRESS_NV = 36644;
  private static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 37640;
  private static final int GL_MAP1_COLOR_4 = 3472;
  private static final int GL_SAMPLE_BUFFERS_EXT = 32936;
  private static final int GL_TEXTURE_SHADER_NV = 34526;
  private static final int GL_INT_IMAGE_BUFFER_EXT = 36956;
  private static final int GL_IMAGE_PIXEL_FORMAT = 33449;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032;
  private static final int GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 36710;
  private static final int GL_BLEND_SRC_ALPHA = 32971;
  private static final int GL_IMAGE_TRANSFORM_2D_HP = 33121;
  private static final int GL_MAX_VERTEX_ATTRIBS = 34921;
  private static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972;
  private static final int GL_COUNT_DOWN_NV = 37001;
  private static final int GL_FONT_UNITS_PER_EM_BIT_NV = 1048576;
  private static final int GL_TEXTURE_COMPONENTS = 4099;
  private static final int GL_TEXTURE_COMPRESSED = 34465;
  private static final int GL_CON_29_ATI = 35166;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818;
  private static final int GL_RED_SNORM = 36752;
  private static final int GL_HISTOGRAM_BLUE_SIZE_EXT = 32810;
  private static final int GL_SRGB_ALPHA_EXT = 35906;
  private static final int GL_FRAMEBUFFER_SRGB_EXT = 36281;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
  private static final int GL_PATH_TERMINAL_END_CAP_NV = 36984;
  private static final int GL_FOG_COORD = 33873;
  private static final int GL_CONSTANT_ALPHA = 32771;
  private static final int GL_LAST_VIDEO_CAPTURE_STATUS_NV = 36903;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 37172;
  private static final int GL_STENCIL_PASS_DEPTH_FAIL = 2965;
  private static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823;
  private static final int GL_GEOMETRY_SHADER_BIT_OES = 4;
  private static final int GL_MAX_FOG_FUNC_POINTS_SGIS = 33068;
  private static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 37872;
  private static final int GL_COLOR_ATTACHMENT15_EXT = 36079;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;
  private static final int GL_POLYGON_OFFSET_FACTOR_EXT = 32824;
  private static final int GL_REG_4_ATI = 35109;
  private static final int GL_TESS_CONTROL_SHADER_OES = 36488;
  private static final int GL_VARIANT_EXT = 34753;
  private static final int GL_SAMPLE_MASK = 36433;
  private static final int GL_UNSIGNED_BYTE_2_3_3_REV = 33634;
  private static final int GL_COLOR_INDEX12_EXT = 32998;
  private static final int GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063;
  private static final int GL_TRIANGLES_ADJACENCY_OES = 12;
  private static final int GL_COLOR_ATTACHMENT4_EXT = 36068;
  private static final int GL_FIXED_ONLY_ARB = 35101;
  private static final int GL_3D_COLOR = 1538;
  private static final int GL_TIMEOUT_IGNORED = -1;
  private static final int GL_DEPTH_COMPONENT32_ARB = 33191;
  private static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826;
  private static final int GL_LUMINANCE8_ALPHA8_EXT = 32837;
  private static final int GL_MAP1_VERTEX_ATTRIB2_4_NV = 34402;
  private static final int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 33145;
  private static final int GL_PROGRAM_POINT_SIZE_EXT = 34370;
  private static final int GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
  private static final int GL_COLOR_ATTACHMENT_EXT = 37104;
  private static final int GL_SWIZZLE_STR_DR_ATI = 35192;
  private static final int GL_FONT_GLYPHS_AVAILABLE_NV = 37736;
  private static final int GL_PROGRAM_TEMPORARIES_ARB = 34980;
  private static final int GL_DEBUG_SEVERITY_HIGH_AMD = 37190;
  private static final int GL_MAX_3D_TEXTURE_SIZE_OES = 32883;
  private static final int GL_LINK_STATUS = 35714;
  private static final int GL_SAMPLER_KHR = 33510;
  private static final int GL_RGB32I_EXT = 36227;
  private static final int GL_ALPHA16_SNORM = 36888;
  private static final int GL_OUTPUT_TEXTURE_COORD13_EXT = 34730;
  private static final int GL_OUTPUT_TEXTURE_COORD4_EXT = 34721;
  private static final int GL_LINE_WIDTH = 2849;
  private static final int GL_FIRST_TO_REST_NV = 37039;
  private static final int GL_INT8_VEC3_NV = 36834;
  private static final int GL_CONSERVATIVE_RASTER_DILATE_NV = 37753;
  private static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081;
  private static final int GL_SAMPLER_BUFFER_EXT = 36290;
  private static final int GL_OP_MULTIPLY_MATRIX_EXT = 34712;
  private static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
  private static final int GL_UNSIGNED_INT_8_24_REV_MESA = 34642;
  private static final int GL_CLIPPING_OUTPUT_PRIMITIVES = 33527;
  private static final int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055;
  private static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 34501;
  private static final int GL_VERTEX_ARRAY_SIZE_EXT = 32890;
  private static final int GL_RESAMPLE_DECIMATE_OML = 35209;
  private static final int GL_TESS_GEN_POINT_MODE_OES = 36473;
  private static final int GL_VERTEX_ATTRIB_MAP2_APPLE = 35329;
  private static final int GL_TEXTURE_SWIZZLE_B_EXT = 36420;
  private static final int GL_IMAGE_BINDING_ACCESS_EXT = 36670;
  private static final int GL_DEPTH_COMPONENT24 = 33190;
  private static final int GL_DEFORMATIONS_MASK_SGIX = 33174;
  private static final int GL_MAP2_VERTEX_ATTRIB1_4_NV = 34417;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 34072;
  private static final int GL_ALPHA8_OES = 32828;
  private static final int GL_INDEX_ARRAY_COUNT_EXT = 32903;
  private static final int GL_FOG_OFFSET_SGIX = 33176;
  private static final int GL_VERTEX_ARRAY_RANGE_NV = 34077;
  private static final int GL_COLOR_ARRAY_LENGTH_NV = 36653;
  private static final int GL_SPIR_V_BINARY = 38226;
  private static final int GL_MODELVIEW = 5888;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578;
  private static final int GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
  private static final int GL_QUERY_NO_WAIT = 36372;
  private static final int GL_CON_2_ATI = 35139;
  private static final int GL_TEXTURE_PRIORITY = 32870;
  private static final int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;
  private static final int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
  private static final int GL_PROXY_HISTOGRAM = 32805;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455;
  private static final int GL_MAX_DRAW_BUFFERS_ATI = 34852;
  private static final int GL_UNSIGNED_INT_VEC4_EXT = 36296;
  private static final int GL_GEOMETRY_SHADER_EXT = 36313;
  private static final int GL_DEPTH_COMPONENT16 = 33189;
  private static final int GL_SPRITE_AXIS_SGIX = 33098;
  private static final int GL_COLOR_INDEX4_EXT = 32996;
  private static final int GL_DUAL_LUMINANCE8_SGIS = 33045;
  private static final int GL_CW = 2304;
  private static final int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086;
  private static final int GL_422_REV_AVERAGE_EXT = 32975;
  private static final int GL_BGRA_IMG = 32993;
  private static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346;
  private static final int GL_INT_IMAGE_BUFFER_OES = 36956;
  private static final int GL_EXP2 = 2049;
  private static final int GL_POLYGON_TOKEN = 1795;
  private static final int GL_SAMPLE_MASK_VALUE_EXT = 32938;
  private static final int GL_SRGB8_EXT = 35905;
  private static final int GL_VERTEX_ATTRIB_ARRAY1_NV = 34385;
  private static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 36968;
  private static final int GL_COLOR_TABLE_SCALE = 32982;
  private static final int GL_TEXTURE_2D_MULTISAMPLE = 37120;
  private static final int GL_MAP2_VERTEX_ATTRIB8_4_NV = 34424;
  private static final int GL_TEXTURE_DEPTH_QCOM = 35796;
  private static final int GL_BUFFER_VARIABLE = 37605;
  private static final int GL_PIXEL_PACK_BUFFER_BINDING_NV = 35053;
  private static final int GL_PRIMITIVES_GENERATED_OES = 35975;
  private static final int GL_PN_TRIANGLES_ATI = 34800;
  private static final int GL_MAX_SHININESS_NV = 34052;
  private static final int GL_MAX_TEXTURE_MAX_ANISOTROPY = 34047;
  private static final int GL_INFO_LOG_LENGTH = 35716;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 37856;
  private static final int GL_VERTEX_ATTRIB_ARRAY10_NV = 34394;
  private static final int GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 37294;
  private static final int GL_IMAGE_BUFFER = 36945;
  private static final int GL_DEBUG_SOURCE_APPLICATION_ARB = 33354;
  private static final int GL_NEGATIVE_Z_EXT = 34779;
  private static final int GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407;
  private static final int GL_COMPRESSED_RED_RGTC1_EXT = 36283;
  private static final int GL_LAST_VERTEX_CONVENTION_OES = 36430;
  private static final int GL_UNSIGNED_INT_24_8_EXT = 34042;
  private static final int GL_CONSTANT_COLOR0_NV = 34090;
  private static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155;
  private static final int GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
  private static final int GL_MATRIX18_ARB = 35026;
  private static final int GL_SMAPHS_PROGRAM_BINARY_DMP = 37458;
  private static final int GL_CON_11_ATI = 35148;
  private static final int GL_RGB8_OES = 32849;
  private static final int GL_DEVICE_NODE_MASK_EXT = 38298;
  private static final int GL_PRIMARY_COLOR = 34167;
  private static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835;
  private static final int GL_QUAD_ALPHA4_SGIS = 33054;
  private static final int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 35953;
  private static final int GL_COMPRESSED_SIGNED_R11_EAC = 37489;
  private static final int GL_ARRAY_OBJECT_BUFFER_ATI = 34662;
  private static final int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324;
  private static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881;
  private static final int GL_MODELVIEW20_ARB = 34612;
  private static final int GL_HILO16_NV = 34552;
  private static final int GL_NO_ERROR = 0;
  private static final int GL_ATTENUATION_EXT = 33613;
  private static final int GL_COMPRESSED_RGBA_FXT1_3DFX = 34481;
  private static final int GL_LINEARLIGHT_NV = 37543;
  private static final int GL_BACK_RIGHT = 1027;
  private static final int GL_RESAMPLE_ZERO_FILL_SGIX = 33844;
  private static final int GL_MIN = 32775;
  private static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;
  private static final int GL_COMPRESSED_SRGB_EXT = 35912;
  private static final int GL_MAX_FRAMEBUFFER_LAYERS_OES = 37655;
  private static final int GL_MAP1_VERTEX_ATTRIB0_4_NV = 34400;
  private static final int GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 35762;
  private static final int GL_SAMPLE_SHADING = 35894;
  private static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332;
  private static final int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877;
  private static final int GL_COLOR_ATTACHMENT8_EXT = 36072;
  private static final int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350;
  private static final int GL_IMAGE_BUFFER_OES = 36945;
  private static final int GL_STENCIL_VALUE_MASK = 2963;
  private static final int GL_PRIMITIVE_BOUNDING_BOX_ARB = 37566;
  private static final int GL_LINEAR_DETAIL_ALPHA_SGIS = 32920;
  private static final int GL_MODELVIEW18_ARB = 34610;
  private static final int GL_DEPTH_CLEAR_VALUE = 2931;
  private static final int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 33139;
  private static final int GL_ATC_RGB_AMD = 35986;
  private static final int GL_INTERNALFORMAT_DEPTH_SIZE = 33397;
  private static final int GL_ONE_EXT = 34782;
  private static final int GL_NORMAL_ARRAY_STRIDE_EXT = 32895;
  private static final int GL_SOURCE2_ALPHA_ARB = 34186;
  private static final int GL_OUTPUT_TEXTURE_COORD0_EXT = 34717;
  private static final int GL_PLUS_CLAMPED_ALPHA_NV = 37554;
  private static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 37639;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
  private static final int GL_PERFQUERY_FLUSH_INTEL = 33786;
  private static final int GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939;
  private static final int GL_TABLE_TOO_LARGE = 32817;
  private static final int GL_CLIP_DISTANCE5_EXT = 12293;
  private static final int GL_LINE_WIDTH_COMMAND_NV = 13;
  private static final int GL_PROGRAM_PARAMETER_NV = 34372;
  private static final int GL_DEBUG_CALLBACK_FUNCTION_ARB = 33348;
  private static final int GL_BUFFER_MAP_POINTER_ARB = 35005;
  private static final int GL_PLUS_NV = 37521;
  private static final int GL_CURRENT_VERTEX_ATTRIB_ARB = 34342;
  private static final int GL_ALL_ATTRIB_BITS = -1;
  private static final int GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 33500;
  private static final int GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 36713;
  private static final int GL_TEXTURE_ENV_MODE = 8704;
  private static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;
  private static final int GL_FLOAT_RGBA_NV = 34947;
  private static final int GL_OP_SUB_EXT = 34710;
  private static final int GL_SLUMINANCE_EXT = 35910;
  private static final int GL_VECTOR_EXT = 34751;
  private static final int GL_TEXTURE_CLIPMAP_FRAME_SGIX = 33138;
  private static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;
  private static final int GL_RGB8UI = 36221;
  private static final int GL_ALPHA_SCALE = 3356;
  private static final int GL_CULL_MODES_NV = 34528;
  private static final int GL_TEXTURE0_ARB = 33984;
  private static final int GL_BOLD_BIT_NV = 1;
  private static final int GL_FLOAT_VEC3_ARB = 35665;
  private static final int GL_INNOCENT_CONTEXT_RESET_ARB = 33364;
  private static final int GL_VERTEX_ARRAY = 32884;
  private static final int GL_UNPACK_CONSTANT_DATA_SUNX = 33237;
  private static final int GL_COLOR_ATTACHMENT0_NV = 36064;
  private static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;
  private static final int GL_RENDERBUFFER_BLUE_SIZE_OES = 36178;
  private static final int GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7;
  private static final int GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318;
  private static final int GL_RENDERBUFFER_SAMPLES_ANGLE = 36011;
  private static final int GL_RGB16I_EXT = 36233;
  private static final int GL_DRAW_BUFFER7_ARB = 34860;
  private static final int GL_SAMPLER_2D_SHADOW_ARB = 35682;
  private static final int GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129;
  private static final int GL_MULTISAMPLE_BIT = 536870912;
  private static final int GL_SEPARABLE_2D = 32786;
  private static final int GL_TEXTURE_BINDING_2D_ARRAY = 35869;
  private static final int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147;
  private static final int GL_PACK_RESAMPLE_OML = 35204;
  private static final int GL_VERTEX_SHADER_BINDING_EXT = 34689;
  private static final int GL_INTERNALFORMAT_PREFERRED = 33392;
  private static final int GL_RGB_422_APPLE = 35359;
  private static final int GL_4_BYTES = 5129;
  private static final int GL_RGBA_FLOAT32_ATI = 34836;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;
  private static final int GL_ACTIVE_STENCIL_FACE_EXT = 35089;
  private static final int GL_COLORBURN_NV = 37530;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_EXT = 34068;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 37830;
  private static final int GL_STREAM_READ_ARB = 35041;
  private static final int GL_PIXEL_TILE_GRID_DEPTH_SGIX = 33092;
  private static final int GL_RG_EXT = 33319;
  private static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;
  private static final int GL_POST_CONVOLUTION_RED_BIAS = 32800;
  private static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
  private static final int GL_PATH_STROKE_COVER_MODE_NV = 36995;
  private static final int GL_CLAMP_READ_COLOR = 35100;
  private static final int GL_BOOL_VEC4_ARB = 35673;
  private static final int GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 35957;
  private static final int GL_POLYGON_BIT = 8;
  private static final int GL_OP_DOT3_EXT = 34692;
  private static final int GL_BITMAP_TOKEN = 1796;
  private static final int GL_DEBUG_ASSERT_MESA = 34651;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 36182;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321;
  private static final int GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349;
  private static final int GL_MATRIX27_ARB = 35035;
  private static final int GL_IMAGE_1D_ARRAY_EXT = 36946;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;
  private static final int GL_TEXTURE_4D_SGIS = 33076;
  private static final int GL_RGB9_E5_EXT = 35901;
  private static final int GL_INTENSITY_FLOAT16_APPLE = 34845;
  private static final int GL_CLIP_NEAR_HINT_PGI = 107040;
  private static final int GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;
  private static final int GL_SOURCE0_ALPHA_EXT = 34184;
  private static final int GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143;
  private static final int GL_LINEAR_ATTENUATION = 4616;
  private static final int GL_POLYGON_OFFSET_COMMAND_NV = 14;
  private static final int GL_SAMPLE_COVERAGE_VALUE_ARB = 32938;
  private static final int GL_EVAL_VERTEX_ATTRIB7_NV = 34509;
  private static final int GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 1;
  private static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = 33345;
  private static final int GL_DRAW_BUFFER7_ATI = 34860;
  private static final int GL_DEBUG_LOGGED_MESSAGES = 37189;
  private static final int GL_QUERY_COUNTER_BITS_EXT = 34916;
  private static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760;
  private static final int GL_TEXTURE_COMPARE_FUNC_ARB = 34893;
  private static final int GL_MOVE_TO_CONTINUES_NV = 37046;
  private static final int GL_GEOMETRY_SUBROUTINE = 37611;
  private static final int GL_FRAMEBUFFER_UNDEFINED_OES = 33305;
  private static final int GL_READ_PIXELS_TYPE = 33422;
  private static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335;
  private static final int GL_4PASS_1_SGIS = 32933;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 37709;
  private static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079;
  private static final int GL_DRAW_BUFFER9_EXT = 34862;
  private static final int GL_LIGHT_MODEL_COLOR_CONTROL = 33272;
  private static final int GL_CLAMP_TO_BORDER_SGIS = 33069;
  private static final int GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978;
  private static final int GL_INDEX_BITS = 3409;
  private static final int GL_INT_SAMPLER_1D_ARRAY = 36302;
  private static final int GL_INCLUSIVE_EXT = 36624;
  private static final int GL_MAX_VIEWPORTS_NV = 33371;
  private static final int GL_BUFFER_SIZE = 34660;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387;
  private static final int GL_RGBA2_EXT = 32853;
  private static final int GL_DIFFUSE = 4609;
  private static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;
  private static final int GL_PATH_MODELVIEW_NV = 5888;
  private static final int GL_UNSIGNED_INT_10_10_10_2_OES = 36342;
  private static final int GL_SMOOTH_POINT_SIZE_RANGE = 2834;
  private static final int GL_INT_VEC2_ARB = 35667;
  private static final int GL_SHADE_MODEL = 2900;
  private static final int GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 35763;
  private static final int GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180;
  private static final int GL_TEXTURE_MAX_ANISOTROPY = 34046;
  private static final int GL_SIGNED_HILO_NV = 34553;
  private static final int GL_RENDERBUFFER_EXT = 36161;
  private static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 36442;
  private static final int GL_PALETTE4_RGB8_OES = 35728;
  private static final int GL_NAND = 5390;
  private static final int GL_FIRST_VERTEX_CONVENTION = 36429;
  private static final int GL_FRAME_NV = 36390;
  private static final int GL_CON_25_ATI = 35162;
  private static final int GL_CONTRAST_NV = 37537;
  private static final int GL_REDUCE_EXT = 32790;
  private static final int GL_SHADER_OBJECT_EXT = 35656;
  private static final int GL_OPERAND1_RGB = 34193;
  private static final int GL_VERTEX_TEXTURE = 33435;
  private static final int GL_HI_BIAS_NV = 34580;
  private static final int GL_LUMINANCE16 = 32834;
  private static final int GL_TEXTURE20 = 34004;
  private static final int GL_DEBUG_TYPE_MARKER = 33384;
  private static final int GL_BUFFER_BINDING = 37634;
  private static final int GL_CURRENT_TIME_NV = 36392;
  private static final int GL_MAX_VIEWPORT_DIMS = 3386;
  private static final int GL_SAMPLE_ALPHA_TO_MASK_EXT = 32926;
  private static final int GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;
  private static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;
  private static final int GL_VERTEX_PRECLIP_HINT_SGIX = 33775;
  private static final int GL_TEXTURE17_ARB = 34001;
  private static final int GL_PROXY_TEXTURE_1D_ARRAY = 35865;
  private static final int GL_TEXTURE_SPARSE_EXT = 37286;
  private static final int GL_V2F = 10784;
  private static final int GL_FOG_END = 2916;
  private static final int GL_TEXTURE19 = 34003;
  private static final int GL_COORD_REPLACE_OES = 34914;
  private static final int GL_TEXTURE18 = 34002;
  private static final int GL_OP_ROUND_EXT = 34704;
  private static final int GL_IMAGE_2D_RECT = 36943;
  private static final int GL_POST_CONVOLUTION_BLUE_BIAS = 32802;
  private static final int GL_TEXTURE17 = 34001;
  private static final int GL_TEXTURE16 = 34000;
  private static final int GL_TEXTURE15 = 33999;
  private static final int GL_TEXTURE14 = 33998;
  private static final int GL_TEXTURE13 = 33997;
  private static final int GL_TEXTURE12 = 33996;
  private static final int GL_TEXTURE11 = 33995;
  private static final int GL_TEXTURE10 = 33994;
  private static final int GL_TEXTURE31 = 34015;
  private static final int GL_INTERLEAVED_ATTRIBS_NV = 35980;
  private static final int GL_PIXEL_MAP_B_TO_B = 3192;
  private static final int GL_TEXTURE30 = 34014;
  private static final int GL_EVAL_VERTEX_ATTRIB11_NV = 34513;
  private static final int GL_GEOMETRY_SHADER = 36313;
  private static final int GL_TEXTURE_BUFFER_OES = 35882;
  private static final int GL_MAX = 32776;
  private static final int GL_NORMAL_MAP = 34065;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 36877;
  private static final int GL_HSL_LUMINOSITY = 37552;
  private static final int GL_UNIFORM_ARRAY_STRIDE = 35388;
  private static final int GL_R1UI_T2F_C4F_N3F_V3F_SUN = 34251;
  private static final int GL_V3F = 10785;
  private static final int GL_CUBIC_CURVE_TO_NV = 12;
  private static final int GL_R8_EXT = 33321;
  private static final int GL_RENDERBUFFER_HEIGHT_OES = 36163;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;
  private static final int GL_OR = 5383;
  private static final int GL_ALPHA16F_EXT = 34844;
  private static final int GL_READ_BUFFER_EXT = 3074;
  private static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
  private static final int GL_SPIR_V_BINARY_ARB = 38226;
  private static final int GL_SPECULAR = 4610;
  private static final int GL_TEXTURE29 = 34013;
  private static final int GL_UNSIGNED_INT_IMAGE_1D_EXT = 36962;
  private static final int GL_MAP2_TEXTURE_COORD_4 = 3510;
  private static final int GL_TEXTURE28 = 34012;
  private static final int GL_MAP2_TEXTURE_COORD_3 = 3509;
  private static final int GL_TEXTURE27 = 34011;
  private static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;
  private static final int GL_MAP2_TEXTURE_COORD_2 = 3508;
  private static final int GL_TEXTURE26 = 34010;
  private static final int GL_MAP2_TEXTURE_COORD_1 = 3507;
  private static final int GL_TEXTURE25 = 34009;
  private static final int GL_LUMINANCE12 = 32833;
  private static final int GL_TEXTURE24 = 34008;
  private static final int GL_TEXTURE23 = 34007;
  private static final int GL_TEXTURE22 = 34006;
  private static final int GL_SLIM8U_SGIX = 33565;
  private static final int GL_TEXTURE21 = 34005;
  private static final int GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045;
  private static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371;
  private static final int GL_VOLATILE_APPLE = 35354;
  private static final int GL_AMBIENT_AND_DIFFUSE = 5634;
  private static final int GL_TEXCOORD3_BIT_PGI = 1073741824;
  private static final int GL_INDEX_SHIFT = 3346;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 34073;
  private static final int GL_SEPARATE_ATTRIBS = 35981;
  private static final int GL_PIXEL_MAP_I_TO_B = 3188;
  private static final int GL_PIXEL_MAP_I_TO_A = 3189;
  private static final int GL_QUAD_STRIP = 8;
  private static final int GL_VIEWPORT_BOUNDS_RANGE_OES = 33373;
  private static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896;
  private static final int GL_PIXEL_MAP_I_TO_G = 3187;
  private static final int GL_VERTEX_ARRAY_ADDRESS_NV = 36641;
  private static final int GL_TEXTURE_DEPTH_SIZE = 34890;
  private static final int GL_FRAMEBUFFER_UNSUPPORTED_OES = 36061;
  private static final int GL_CIRCULAR_TANGENT_ARC_TO_NV = 252;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP = 34075;
  private static final int GL_CND_ATI = 35178;
  private static final int GL_PIXEL_MAP_I_TO_I = 3184;
  private static final int GL_REFLECTION_MAP_ARB = 34066;
  private static final int GL_PROGRAM_POINT_SIZE = 34370;
  private static final int GL_REG_24_ATI = 35129;
  private static final int GL_PIXEL_MAP_I_TO_R = 3186;
  private static final int GL_TEXTURE_BLUE_SIZE_EXT = 32862;
  private static final int GL_IMAGE_MIN_FILTER_HP = 33117;
  private static final int GL_DEPTH_COMPONENT16_ARB = 33189;
  private static final int GL_TEXTURE_DEPTH_TYPE_ARB = 35862;
  private static final int GL_FRAGMENT_INPUT_NV = 37741;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE = 36966;
  private static final int GL_TRANSLATE_2D_NV = 37008;
  private static final int GL_INDEX_LOGIC_OP = 3057;
  private static final int GL_PATH_FOG_GEN_MODE_NV = 37036;
  private static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373;
  private static final int GL_MAP2_VERTEX_ATTRIB14_4_NV = 34430;
  private static final int GL_DEBUG_TYPE_MARKER_KHR = 33384;
  private static final int GL_IMAGE_3D_EXT = 36942;
  private static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 37069;
  private static final int GL_CONSTANT_COLOR = 32769;
  private static final int GL_MINMAX_SINK_EXT = 32816;
  private static final int GL_COLOR_INDEX16_EXT = 32999;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874;
  private static final int GL_DST_ATOP_NV = 37519;
  private static final int GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703;
  private static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095;
  private static final int GL_VERTEX_WEIGHTING_EXT = 34057;
  private static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
  private static final int GL_CURRENT_RASTER_NORMAL_SGIX = 33798;
  private static final int GL_T4F_V4F = 10792;
  private static final int GL_MAX_VIEWPORTS_OES = 33371;
  private static final int GL_LOCATION_INDEX_EXT = 37647;
  private static final int GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;
  private static final int GL_R16_SNORM = 36760;
  private static final int GL_GS_PROGRAM_BINARY_MTK = 38465;
  private static final int GL_NEAREST_CLIPMAP_LINEAR_SGIX = 33870;
  private static final int GL_FLOAT_MAT3x4_NV = 35688;
  private static final int GL_DOUBLE_VEC2_EXT = 36860;
  private static final int GL_RG = 33319;
  private static final int GL_ALPHA_MIN_CLAMP_INGR = 34147;
  private static final int GL_FRONT = 1028;
  private static final int GL_TEXTURE_1D_STACK_MESAX = 34649;
  private static final int GL_TESS_EVALUATION_SUBROUTINE = 37610;
  private static final int GL_SUBPIXEL_BITS = 3408;
  private static final int GL_R8 = 33321;
  private static final int GL_RENDERBUFFER_WIDTH_EXT = 36162;
  private static final int GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 7;
  private static final int GL_MAX_PROGRAM_IF_DEPTH_NV = 35062;
  private static final int GL_TEXTURE_CUBE_MAP_ARB = 34067;
  private static final int GL_PROGRAM_INSTRUCTIONS_ARB = 34976;
  private static final int GL_R1UI_V3F_SUN = 34244;
  private static final int GL_WEIGHT_ARRAY_TYPE_OES = 34473;
  private static final int GL_RGB_FLOAT16_ATI = 34843;
  private static final int GL_VERTEX_PROGRAM_BINDING_NV = 34378;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 35978;
  private static final int GL_QUERY_RESULT_AVAILABLE_ARB = 34919;
  private static final int GL_DRAW_ARRAYS_COMMAND_NV = 3;
  private static final int GL_MATRIX14_ARB = 35022;
  private static final int GL_ACTIVE_VARYING_MAX_LENGTH_NV = 35970;
  private static final int GL_TEXTURE_2D_BINDING_EXT = 32873;
  private static final int GL_MAX_EVAL_ORDER = 3376;
  private static final int GL_PRIMITIVE_RESTART = 36765;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 37864;
  private static final int GL_GEOMETRY_SHADER_INVOCATIONS_OES = 34943;
  private static final int GL_OBJECT_BUFFER_USAGE_ATI = 34661;
  private static final int GL_VARIANT_ARRAY_EXT = 34792;
  private static final int GL_OUTPUT_TEXTURE_COORD17_EXT = 34734;
  private static final int GL_VERTEX_SOURCE_ATI = 34676;
  private static final int GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039;
  private static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482;
  private static final int GL_PALETTE8_R5_G6_B5_OES = 35735;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 37696;
  private static final int GL_UNDEFINED_VERTEX = 33376;
  private static final int GL_MULTIPLY = 37524;
  private static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 37081;
  private static final int GL_SATURATE_BIT_ATI = 64;
  private static final int GL_STENCIL_ATTACHMENT_EXT = 36128;
  private static final int GL_COVERAGE_BUFFERS_NV = 36563;
  private static final int GL_ISOLINES_EXT = 36474;
  private static final int GL_MAX_PALETTE_MATRICES_ARB = 34882;
  private static final int GL_SPIR_V_EXTENSIONS = 38227;
  private static final int GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868;
  private static final int GL_DYNAMIC_READ = 35049;
  private static final int GL_IMAGE_MAG_FILTER_HP = 33116;
  private static final int GL_UNSIGNED_INT16_VEC4_NV = 36851;
  private static final int GL_TEXCOORD1_BIT_PGI = 268435456;
  private static final int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878;
  private static final int GL_DRAW_BUFFER4_ARB = 34857;
  private static final int GL_ARRAY_BUFFER_BINDING = 34964;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968;
  private static final int GL_DEPTH_TEXTURE_MODE_ARB = 34891;
  private static final int GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 35902;
  private static final int GL_TEXTURE_SHARED_SIZE = 35903;
  private static final int GL_COLORDODGE = 37529;
  private static final int GL_TESS_GEN_POINT_MODE_EXT = 36473;
  private static final int GL_RG8UI = 33336;
  private static final int GL_POINT_SIZE_MIN_ARB = 33062;
  private static final int GL_VENDOR = 7936;
  private static final int GL_PACK_SWAP_BYTES = 3328;
  private static final int GL_DOT_PRODUCT_TEXTURE_1D_NV = 34908;
  private static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442;
  private static final int GL_MULTISAMPLE_BIT_3DFX = 536870912;
  private static final int GL_RGB16_EXT = 32852;
  private static final int GL_CCW = 2305;
  private static final int GL_REG_19_ATI = 35124;
  private static final int GL_HSL_LUMINOSITY_NV = 37552;
  private static final int GL_D3D12_FENCE_VALUE_EXT = 38293;
  private static final int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440;
  private static final int GL_STENCIL_REF = 2967;
  private static final int GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 37143;
  private static final int GL_TEXTURE = 5890;
  private static final int GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;
  private static final int GL_TEXTURE_COLOR_SAMPLES_NV = 36934;
  private static final int GL_ELEMENT_ARRAY_TYPE_APPLE = 35341;
  private static final int GL_LUMINANCE_ALPHA32F_ARB = 34841;
  private static final int GL_TEXTURE_DEFORMATION_SGIX = 33173;
  private static final int GL_FLOAT16_MAT2x4_AMD = 37321;
  private static final int GL_TRACE_ALL_BITS_MESA = 65535;
  private static final int GL_RELATIVE_LINE_TO_NV = 5;
  private static final int GL_LINEAR_DETAIL_SGIS = 32919;
  private static final int GL_DEBUG_SEVERITY_MEDIUM = 37191;
  private static final int GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054;
  private static final int GL_TRACE_PIXELS_BIT_MESA = 16;
  private static final int GL_INT64_VEC3_NV = 36842;
  private static final int GL_RETAINED_APPLE = 35355;
  private static final int GL_CUBIC_MIPMAP_NEAREST_IMG = 37178;
  private static final int GL_INT_IMAGE_2D_RECT_EXT = 36954;
  private static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 37079;
  private static final int GL_DRAW_BUFFER4_ATI = 34857;
  private static final int GL_CLAMP_TO_BORDER = 33069;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972;
  private static final int GL_MAP2_INDEX = 3505;
  private static final int GL_TEXTURE_BUFFER_SIZE_OES = 37278;
  private static final int GL_PREVIOUS = 34168;
  private static final int GL_REG_0_ATI = 35105;
  private static final int GL_BUFFER_DATA_SIZE = 37635;
  private static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062;
  private static final int GL_FOG_FUNC_SGIS = 33066;
  private static final int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 37272;
  private static final int GL_RGBA16I = 36232;
  private static final int GL_DRAW_BUFFER13_EXT = 34866;
  private static final int GL_MAJOR_VERSION = 33307;
  private static final int GL_SUBTRACT_ARB = 34023;
  private static final int GL_RGBA16F = 34842;
  private static final int GL_CLIP_DISTANCE1_EXT = 12289;
  private static final int GL_SHADER_CONSISTENT_NV = 34525;
  private static final int GL_INT_IMAGE_BUFFER = 36956;
  private static final int GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16;
  private static final int GL_RGB16_SNORM = 36762;
  private static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830;
  private static final int GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 37754;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;
  private static final int GL_MATRIX5_NV = 34357;
  private static final int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287;
  private static final int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027;
  private static final int GL_TEXTURE_TARGET = 4102;
  private static final int GL_LUMINANCE_ALPHA8UI_EXT = 36225;
  private static final int GL_IUI_V3F_EXT = 33198;
  private static final int GL_CURRENT_TEXTURE_COORDS = 2819;
  private static final int GL_NUM_ACTIVE_VARIABLES = 37636;
  private static final int GL_COLOR_ATTACHMENT6_NV = 36070;
  private static final int GL_SOURCE1_ALPHA = 34185;
  private static final int GL_DUAL_LUMINANCE_ALPHA4_SGIS = 33052;
  private static final int GL_FLAT = 7424;
  private static final int GL_OBJECT_TYPE_APPLE = 37138;
  private static final int GL_SAMPLE_POSITION = 36432;
  private static final int GL_SRGB = 35904;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972;
  private static final int GL_TESS_GEN_MODE = 36470;
  private static final int GL_RENDERBUFFER_SAMPLES_IMG = 37171;
  private static final int GL_MODELVIEW1_ARB = 34058;
  private static final int GL_RELATIVE_CUBIC_CURVE_TO_NV = 13;
  private static final int GL_VIEW_CLASS_BPTC_FLOAT = 33491;
  private static final int GL_DOUBLE_MAT4x2_EXT = 36685;
  private static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665;
  private static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;
  private static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
  private static final int GL_CON_30_ATI = 35167;
  private static final int GL_FRAMEBUFFER = 36160;
  private static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36878;
  private static final int GL_NONE_OES = 0;
  private static final int GL_MATRIX_MODE = 2976;
  private static final int GL_DRAW_BUFFER15_ATI = 34868;
  private static final int GL_TEXTURE_RESIDENT_EXT = 32871;
  private static final int GL_COVERAGE_ATTACHMENT_NV = 36562;
  private static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;
  private static final int GL_ARRAY_BUFFER = 34962;
  private static final int GL_MAP_STENCIL = 3345;
  private static final int GL_CONVOLUTION_BORDER_COLOR = 33108;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 34072;
  private static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808;
  private static final int GL_QUERY_RESULT_AVAILABLE = 34919;
  private static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851;
  private static final int GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479;
  private static final int GL_PATH_DASH_OFFSET_RESET_NV = 37044;
  private static final int GL_MAT_SPECULAR_BIT_PGI = 67108864;
  private static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 36656;
  private static final int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 34368;
  private static final int GL_FLOAT16_MAT3x2_AMD = 37322;
  private static final int GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;
  private static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063;
  private static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 36495;
  private static final int GL_READ_FRAMEBUFFER_BINDING = 36010;
  private static final int GL_NAMED_STRING_TYPE_ARB = 36330;
  private static final int GL_VERTICAL_LINE_TO_NV = 8;
  private static final int GL_ROUNDED_RECT4_NV = 236;
  private static final int GL_RIGHT = 1031;
  private static final int GL_NEXT_BUFFER_NV = -2;
  private static final int GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076;
  private static final int GL_CLIENT_STORAGE_BIT = 512;
  private static final int GL_COVERAGE_EDGE_FRAGMENTS_NV = 36566;
  private static final int GL_TESS_GEN_SPACING_EXT = 36471;
  private static final int GL_EMBOSS_CONSTANT_NV = 34142;
  private static final int GL_ACTIVE_VARYINGS_NV = 35969;
  private static final int GL_COMPUTE_SHADER_BIT = 32;
  private static final int GL_SAMPLES_EXT = 32937;
  private static final int GL_ONE_MINUS_SRC1_COLOR_EXT = 35066;
  private static final int GL_NAME_LENGTH = 37625;
  private static final int GL_PIXEL_MAP_S_TO_S = 3185;
  private static final int GL_LINE_WIDTH_GRANULARITY = 2851;
  private static final int GL_MAX_FRAGMENT_LIGHTS_SGIX = 33796;
  private static final int GL_LUMINANCE16UI_EXT = 36218;
  private static final int GL_LUMINANCE_FLOAT32_ATI = 34840;
  private static final int GL_DRAW_BUFFER15_ARB = 34868;
  private static final int GL_VERTEX_ARRAY_STRIDE = 32892;
  private static final int GL_SECONDARY_COLOR_ARRAY = 33886;
  private static final int GL_BLEND_EQUATION_RGB_OES = 32777;
  private static final int GL_CLIP_PLANE0 = 12288;
  private static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1;
  private static final int GL_SKIP_COMPONENTS2_NV = -5;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE = 35883;
  private static final int GL_CLIP_PLANE1 = 12289;
  private static final int GL_MATRIX9_ARB = 35017;
  private static final int GL_CLIP_PLANE2 = 12290;
  private static final int GL_LUMINANCE16F_ARB = 34846;
  private static final int GL_CLIP_PLANE3 = 12291;
  private static final int GL_CLIP_PLANE4 = 12292;
  private static final int GL_CLIP_PLANE5 = 12293;
  private static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;
  private static final int GL_ALPHA_TEST_FUNC_QCOM = 3009;
  private static final int GL_DRAW_BUFFER2_NV = 34855;
  private static final int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781;
  private static final int GL_BUMP_ENVMAP_ATI = 34683;
  private static final int GL_NEGATIVE_ONE_EXT = 34783;
  private static final int GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15;
  private static final int GL_RG16 = 33324;
  private static final int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282;
  private static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;
  private static final int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
  private static final int GL_RGBA8I = 36238;
  private static final int GL_PATH_GEN_COMPONENTS_NV = 37043;
  private static final int GL_CONTEXT_PROFILE_MASK = 37158;
  private static final int GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 37272;
  private static final int GL_POLYGON_OFFSET_CLAMP = 36379;
  private static final int GL_PROGRAM_ERROR_POSITION_ARB = 34379;
  private static final int GL_FLOAT_MAT2x3 = 35685;
  private static final int GL_FLOAT_MAT2x4 = 35686;
  private static final int GL_FUNC_SUBTRACT_OES = 32778;
  private static final int GL_LIGHTEN = 37528;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 34071;
  private static final int GL_MODELVIEW23_ARB = 34615;
  private static final int GL_VIEW_CLASS_16_BITS = 33482;
  private static final int GL_RG16UI = 33338;
  private static final int GL_TEXTURE_NORMAL_EXT = 34223;
  private static final int GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 33516;
  private static final int GL_INT_SAMPLER_BUFFER_EXT = 36304;
  private static final int GL_TEXTURE14_ARB = 33998;
  private static final int GL_PARAMETER_BUFFER = 33006;
  private static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994;
  private static final int GL_MAX_VARYING_COMPONENTS = 35659;
  private static final int GL_SOURCE2_RGB_EXT = 34178;
  private static final int GL_CON_21_ATI = 35158;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D = 36306;
  private static final int GL_DEPTH_SAMPLES_NV = 37677;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 36490;
  private static final int GL_HISTOGRAM_RED_SIZE = 32808;
  private static final int GL_RGBA16_EXT = 32859;
  private static final int GL_OPERAND1_ALPHA = 34201;
  private static final int GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;
  private static final int GL_CONVOLUTION_BORDER_MODE = 32787;
  private static final int GL_SMOOTH_LINE_WIDTH_RANGE = 2850;
  private static final int GL_REPEAT = 10497;
  private static final int GL_VERTEX_ATTRIB_ARRAY9_NV = 34393;
  private static final int GL_COLOR_ARRAY_ADDRESS_NV = 36643;
  private static final int GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348;
  private static final int GL_LOSE_CONTEXT_ON_RESET = 33362;
  private static final int GL_TEXTURE_INTENSITY_SIZE_EXT = 32865;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 36965;
  private static final int GL_RESTART_SUN = 1;
  private static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 34925;
  private static final int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261;
  private static final int GL_UNIFORM_ADDRESS_COMMAND_NV = 10;
  private static final int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D = 36305;
  private static final int GL_INT_IMAGE_2D_ARRAY = 36958;
  private static final int GL_RGBA_INTEGER = 36249;
  private static final int GL_STENCIL_TEST = 2960;
  private static final int GL_TEXTURE_WIDTH_QCOM = 35794;
  private static final int GL_DUAL_ALPHA16_SGIS = 33043;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 33296;
  private static final int GL_CONSTANT_EXT = 34166;
  private static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = 37163;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297;
  private static final int GL_RGB16 = 32852;
  private static final int GL_FONT_HAS_KERNING_BIT_NV = 268435456;
  private static final int GL_POLYGON_OFFSET_BIAS_EXT = 32825;
  private static final int GL_SHADER_IMAGE_LOAD = 33444;
  private static final int GL_RGB12 = 32851;
  private static final int GL_READ_WRITE = 35002;
  private static final int GL_RGB10 = 32850;
  private static final int GL_EXCLUSION_KHR = 37536;
  private static final int GL_FRAMEBUFFER_BLEND = 33419;
  private static final int GL_DRAW_BUFFER2_EXT = 34855;
  private static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 36202;
  private static final int GL_R11F_G11F_B10F = 35898;
  private static final int GL_COMPRESSED_SLUMINANCE_ALPHA = 35915;
  private static final int GL_VERTEX_ARRAY_OBJECT_EXT = 37204;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059;
  private static final int GL_UNPACK_SKIP_PIXELS = 3316;
  private static final int GL_LOGIC_OP = 3057;
  private static final int GL_SAMPLE_MASK_EXT = 32928;
  private static final int GL_MULTIPLY_NV = 37524;
  private static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575;
  private static final int GL_LIGHT_MODEL_TWO_SIDE = 2898;
  private static final int GL_LINEAR_SHARPEN_SGIS = 32941;
  private static final int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = 36965;
  private static final int GL_WAIT_FAILED = 37149;
  private static final int GL_LINEARDODGE_NV = 37540;
  private static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 33196;
  private static final int GL_3D_COLOR_TEXTURE = 1539;
  private static final int GL_UNSIGNED_INT_SAMPLER_3D = 36307;
  private static final int GL_TEXTURE_COMPARE_MODE = 34892;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;
  private static final int GL_DEBUG_TYPE_OTHER = 33361;
  private static final int GL_MULTIVIEW_EXT = 37105;
  private static final int GL_DRAW_BUFFER11_NV = 34864;
  private static final int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36879;
  private static final int GL_FRAGMENT_DEPTH_EXT = 33874;
  private static final int GL_SLUMINANCE8_ALPHA8_NV = 35909;
  private static final int GL_INT_SAMPLER_CUBE = 36300;
  private static final int GL_RG_SNORM = 36753;
  private static final int GL_LUMINANCE12_ALPHA4_EXT = 32838;
  private static final int GL_GLOBAL_ALPHA_FACTOR_SUN = 33242;
  private static final int GL_DOUBLE_MAT3x4_EXT = 36684;
  private static final int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
  private static final int GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
  private static final int GL_PROGRAM_TARGET_NV = 34374;
  private static final int GL_PROVOKING_VERTEX_EXT = 36431;
  private static final int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216;
  private static final int GL_FEEDBACK_BUFFER_SIZE = 3569;
  private static final int GL_BLEND_DST_RGB_EXT = 32968;
  private static final int GL_COLOR_EXT = 6144;
  private static final int GL_MIN_LOD_WARNING_AMD = 37276;
  private static final int GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644;
  private static final int GL_SYNC_FENCE = 37142;
  private static final int GL_DEPTH_SCALE = 3358;
  private static final int GL_POLYGON_OFFSET_POINT_NV = 10753;
  private static final int GL_CLIENT_STORAGE_BIT_EXT = 512;
  private static final int GL_FUNC_SUBTRACT = 32778;
  private static final int GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 35413;
  private static final int GL_CURRENT_MATRIX_INDEX_ARB = 34885;
  private static final int GL_VARIABLE_A_NV = 34083;
  private static final int GL_ACCUM_RED_BITS = 3416;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_EXT = 36963;
  private static final int GL_MAP2_COLOR_4 = 3504;
  private static final int GL_TEXTURE_MAX_CLAMP_R_SGIX = 33643;
  private static final int GL_REG_28_ATI = 35133;
  private static final int GL_TEXTURE_BIT = 262144;
  private static final int GL_RGB8_SNORM = 36758;
  private static final int GL_TEXTURE_BINDING_1D = 32872;
  private static final int GL_MODELVIEW14_ARB = 34606;
  private static final int GL_STENCIL_BUFFER_BIT5_QCOM = 2097152;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;
  private static final int GL_MAP_READ_BIT = 1;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
  private static final int GL_CURRENT_RASTER_POSITION_VALID = 2824;
  private static final int GL_SELECTION_BUFFER_POINTER = 3571;
  private static final int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382;
  private static final int GL_LINE_RESET_TOKEN = 1799;
  private static final int GL_SYNC_CONDITION = 37139;
  private static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481;
  private static final int GL_QUERY_BUFFER_AMD = 37266;
  private static final int GL_TEXTURE_BINDING_BUFFER = 35884;
  private static final int GL_TEXTURE_TARGET_QCOM = 35802;
  private static final int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 35954;
  private static final int GL_IUI_V2F_EXT = 33197;
  private static final int GL_PRIMITIVE_RESTART_INDEX_NV = 34137;
  private static final int GL_PN_TRIANGLES_POINT_MODE_ATI = 34802;
  private static final int GL_UNPACK_LSB_FIRST = 3313;
  private static final int GL_TEXTURE_BINDING_2D = 32873;
  private static final int GL_LEFT = 1030;
  private static final int GL_CONVOLUTION_HEIGHT_EXT = 32793;
  private static final int GL_COMPRESSED_LUMINANCE_ALPHA = 34027;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;
  private static final int GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
  private static final int GL_DEPTH_STENCIL_EXT = 34041;
  private static final int GL_RGBA16 = 32859;
  private static final int GL_RG8I = 33335;
  private static final int GL_MAP1_VERTEX_ATTRIB7_4_NV = 34407;
  private static final int GL_UNSIGNED_INT8_VEC3_NV = 36846;
  private static final int GL_MAX_RASTER_SAMPLES_EXT = 37673;
  private static final int GL_TEXTURE_COVERAGE_SAMPLES_NV = 36933;
  private static final int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x12 = 37821;
  private static final int GL_SCALED_RESOLVE_NICEST_EXT = 37051;
  private static final int GL_VIEW_CLASS_48_BITS = 33479;
  private static final int GL_READ_PIXEL_DATA_RANGE_NV = 34937;
  private static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;
  private static final int GL_RGBA12 = 32858;
  private static final int GL_DEPTH_COMPONENT24_OES = 33190;
  private static final int GL_IMAGE_BINDING_LAYERED_EXT = 36668;
  private static final int GL_STENCIL_BITS = 3415;
  private static final int GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128;
  private static final int GL_ALPHA_FLOAT32_APPLE = 34838;
  private static final int GL_DYNAMIC_DRAW_ARB = 35048;
  private static final int GL_FRAMEZOOM_SGIX = 33163;
  private static final int GL_READ_BUFFER = 3074;
  private static final int GL_COVERAGE_COMPONENT_NV = 36560;
  private static final int GL_TEXTURE_BINDING_3D = 32874;
  private static final int GL_CND0_ATI = 35179;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819;
  private static final int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799;
  private static final int GL_BLEND_DST_RGB = 32968;
  private static final int GL_FRAMEBUFFER_BINDING_ANGLE = 36006;
  private static final int GL_DUAL_ALPHA8_SGIS = 33041;
  private static final int GL_FONT_ASCENDER_BIT_NV = 2097152;
  private static final int GL_EXPAND_NORMAL_NV = 34104;
  private static final int GL_UNSIGNED_INT64_VEC3_NV = 36854;
  private static final int GL_REFLECTION_MAP = 34066;
  private static final int GL_TEXTURE27_ARB = 34011;
  private static final int GL_IMAGE_2D_EXT = 36941;
  private static final int GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144;
  private static final int GL_FUNC_ADD_EXT = 32774;
  private static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827;
  private static final int GL_PROGRAM_PIPELINE_BINDING_EXT = 33370;
  private static final int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546;
  private static final int GL_BLEND = 3042;
  private static final int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;
  private static final int GL_CON_15_ATI = 35152;
  private static final int GL_2X_BIT_ATI = 1;
  private static final int GL_POINT_SMOOTH = 2832;
  private static final int GL_SEPARATE_SPECULAR_COLOR = 33274;
  private static final int GL_FOG_COORDINATE_ARRAY_TYPE = 33876;
  private static final int GL_COLOR_ARRAY_EXT = 32886;
  private static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444;
  private static final int GL_NO_RESET_NOTIFICATION_EXT = 33377;
  private static final int GL_SEPARATE_ATTRIBS_EXT = 35981;
  private static final int GL_TEXTURE_CUBE_MAP_ARRAY = 36873;
  private static final int GL_NUM_DOWNSAMPLE_SCALES_IMG = 37181;
  private static final int GL_CLIP_PLANE2_IMG = 12290;
  private static final int GL_DEPTH_STENCIL_OES = 34041;
  private static final int GL_FRAGMENT_TEXTURE = 33439;
  private static final int GL_SHADER_IMAGE_ATOMIC = 33446;
  private static final int GL_TRANSFORM_FEEDBACK_OVERFLOW = 33516;
  private static final int GL_HALF_BIAS_NEGATE_NV = 34107;
  private static final int GL_CONVOLUTION_FILTER_BIAS = 32789;
  private static final int GL_LINE_WIDTH_RANGE = 2850;
  private static final int GL_PRIMITIVES_GENERATED = 35975;
  private static final int GL_POINT_BIT = 2;
  private static final int GL_TEXTURE_BORDER_COLOR_NV = 4100;
  private static final int GL_MAP_UNSYNCHRONIZED_BIT = 32;
  private static final int GL_INVERTED_SCREEN_W_REND = 33937;
  private static final int GL_INT16_VEC4_NV = 36839;
  private static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;
  private static final int GL_BUFFER_ACCESS_OES = 35003;
  private static final int GL_TEXTURE_LEQUAL_R_SGIX = 33180;
  private static final int GL_REG_15_ATI = 35120;
  private static final int GL_MODELVIEW27_ARB = 34619;
  private static final int GL_MAX_VERTEX_ATTRIBS_ARB = 34921;
  private static final int GL_OUTPUT_TEXTURE_COORD27_EXT = 34744;
  private static final int GL_INTENSITY8_SNORM = 36887;
  private static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997;
  private static final int GL_TEXTURE_BUFFER_FORMAT_EXT = 35886;
  private static final int GL_CONTEXT_LOST = 1287;
  private static final int GL_UNIFORM_BUFFER_BINDING = 35368;
  private static final int GL_COLOR_TABLE_WIDTH = 32985;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x10 = 37820;
  private static final int GL_MAX_DRAW_BUFFERS_NV = 34852;
  private static final int GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1;
  private static final int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876;
  private static final int GL_TEXTURE_FILTER_CONTROL_EXT = 34048;
  private static final int GL_IMAGE_CLASS_4_X_8 = 33471;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;
  private static final int GL_NEAREST = 9728;
  private static final int GL_MODELVIEW5_ARB = 34597;
  private static final int GL_RENDERBUFFER = 36161;
  private static final int GL_MAT_SHININESS_BIT_PGI = 33554432;
  private static final int GL_PIXEL_TILE_CACHE_SIZE_SGIX = 33093;
  private static final int GL_ATTRIB_STACK_DEPTH = 2992;
  private static final int GL_ADD_SIGNED_ARB = 34164;
  private static final int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 32991;
  private static final int GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683;
  private static final int GL_PROGRAM_RESIDENT_NV = 34375;
  private static final int GL_EVAL_VERTEX_ATTRIB14_NV = 34516;
  private static final int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923;
  private static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591;
  private static final int GL_LIST_PRIORITY_SGIX = 33154;
  private static final int GL_LAYER_PROVOKING_VERTEX_EXT = 33374;
  private static final int GL_DSDT_MAG_INTENSITY_NV = 34524;
  private static final int GL_MAP_COHERENT_BIT_EXT = 128;
  private static final int GL_SOURCE1_RGB_EXT = 34177;
  private static final int GL_SYNC_CONDITION_APPLE = 37139;
  private static final int GL_COLOR_BUFFER_BIT1_QCOM = 2;
  private static final int GL_SRC2_RGB = 34178;
  private static final int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954;
  private static final int GL_HISTOGRAM_BLUE_SIZE = 32810;
  private static final int GL_GUILTY_CONTEXT_RESET_EXT = 33363;
  private static final int GL_RGBA8UI = 36220;
  private static final int GL_LUMINANCE8_ALPHA8_OES = 32837;
  private static final int GL_RGB12_EXT = 32851;
  private static final int GL_ATOMIC_COUNTER_BUFFER = 37568;
  private static final int GL_VERTEX_STREAM4_ATI = 34672;
  private static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980;
  private static final int GL_MAP2_NORMAL = 3506;
  private static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977;
  private static final int GL_OCCLUSION_TEST_RESULT_HP = 33126;
  private static final int GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139;
  private static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346;
  private static final int GL_TESS_GEN_MODE_EXT = 36470;
  private static final int GL_TEXTURE_LOD_BIAS_EXT = 34049;
  private static final int GL_LOSE_CONTEXT_ON_RESET_EXT = 33362;
  private static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925;
  private static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383;
  private static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 35919;
  private static final int GL_FLOAT16_NV = 36856;
  private static final int GL_TEXTURE_SAMPLES_IMG = 37174;
  private static final int GL_GREATER = 516;
  private static final int GL_TRANSPOSE_AFFINE_3D_NV = 37016;
  private static final int GL_OP_RECIP_EXT = 34708;
  private static final int GL_VIRTUAL_PAGE_SIZE_Z_AMD = 37271;
  private static final int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457;
  private static final int GL_TEXTURE_USAGE_ANGLE = 37794;
  private static final int GL_DEBUG_CALLBACK_USER_PARAM_ARB = 33349;
  private static final int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36961;
  private static final int GL_TRACE_OPERATIONS_BIT_MESA = 1;
  private static final int GL_CURRENT_RASTER_INDEX = 2821;
  private static final int GL_MAP2_VERTEX_ATTRIB13_4_NV = 34429;
  private static final int GL_DEBUG_SOURCE_APPLICATION_KHR = 33354;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;
  private static final int GL_TEXTURE_PRIORITY_EXT = 32870;
  private static final int GL_SRC1_ALPHA = 34185;
  private static final int GL_SHADER_STORAGE_BLOCK = 37606;
  private static final int GL_HISTOGRAM_GREEN_SIZE = 32809;
  private static final int GL_DRAW_BUFFER11_ARB = 34864;
  private static final int GL_MAX_SAMPLE_MASK_WORDS = 36441;
  private static final int GL_ALPHA_TEST_REF = 3010;
  private static final int GL_MAX_FRAMEBUFFER_SAMPLES = 37656;
  private static final int GL_INT64_VEC4_ARB = 36843;
  private static final int GL_HIGH_FLOAT = 36338;
  private static final int GL_STENCIL_INDEX4_OES = 36167;
  private static final int GL_GCCSO_SHADER_BINARY_FJ = 37472;
  private static final int GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627;
  private static final int GL_LUMINANCE4_ALPHA4 = 32835;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885;
  private static final int GL_RELATIVE_MOVE_TO_NV = 3;
  private static final int GL_ALPHA8_EXT = 32828;
  private static final int GL_WEIGHT_ARRAY_STRIDE_ARB = 34474;
  private static final int GL_DEPTH32F_STENCIL8 = 36013;
  private static final int GL_MAX_SAMPLES_IMG = 37173;
  private static final int GL_RENDERBUFFER_RED_SIZE = 36176;
  private static final int GL_BGRA = 32993;
  private static final int GL_BUFFER_STORAGE_FLAGS_EXT = 33312;
  private static final int GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 37137;
  private static final int GL_COMBINE_EXT = 34160;
  private static final int GL_UNIFORM_BUFFER_LENGTH_NV = 37744;
  private static final int GL_MAX_CLIP_DISTANCES_APPLE = 3378;
  private static final int GL_GEOMETRY_SHADER_OES = 36313;
  private static final int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;
  private static final int GL_SRC_ALPHA_SATURATE = 776;
  private static final int GL_UNPACK_ALIGNMENT = 3317;
  private static final int GL_IMAGE_BINDING_LEVEL = 36667;
  private static final int GL_DRAW_BUFFER11_ATI = 34864;
  private static final int GL_PERFQUERY_WAIT_INTEL = 33787;
  private static final int GL_QUAD_INTENSITY4_SGIS = 33058;
  private static final int GL_MAP_FLUSH_EXPLICIT_BIT = 16;
  private static final int GL_CONSERVATIVE_RASTER_MODE_NV = 38221;
  private static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757;
  private static final int GL_PATH_STENCIL_VALUE_MASK_NV = 37049;
  private static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443;
  private static final int GL_ASYNC_READ_PIXELS_SGIX = 33630;
  private static final int GL_FRAGMENT_COVERAGE_COLOR_NV = 37598;
  private static final int GL_INT_IMAGE_3D_EXT = 36953;
  private static final int GL_BACK_PRIMARY_COLOR_NV = 35959;
  private static final int GL_RG32F_EXT = 33328;
  private static final int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 33142;
  private static final int GL_FIXED_OES = 5132;
  private static final int GL_COLOR_ARRAY = 32886;
  private static final int GL_EXCLUSION = 37536;
  private static final int GL_TEXTURE8_ARB = 33992;
  private static final int GL_DOT3_RGBA_EXT = 34625;
  private static final int GL_FRAGMENT_LIGHT6_SGIX = 33810;
  private static final int GL_DEPTH_STENCIL_MESA = 34640;
  private static final int GL_CONTINUOUS_AMD = 36871;
  private static final int GL_POLYGON_STIPPLE_BIT = 16;
  private static final int GL_BUFFER_MAP_OFFSET = 37153;
  private static final int GL_R32F_EXT = 33326;
  private static final int GL_WRITEONLY_RENDERING_QCOM = 34851;
  private static final int GL_ALPHA_TEST_REF_QCOM = 3010;
  private static final int GL_CALLIGRAPHIC_FRAGMENT_SGIX = 33155;
  private static final int GL_MATRIX5_ARB = 35013;
  private static final int GL_INDEX_ARRAY_TYPE_EXT = 32901;
  private static final int GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
  private static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;
  private static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388;
  private static final int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;
  private static final int GL_TEXTURE_BINDING_EXTERNAL_OES = 36199;
  private static final int GL_ASYNC_HISTOGRAM_SGIX = 33580;
  private static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;
  private static final int GL_TRIANGLE_STRIP = 5;
  private static final int GL_UNSIGNED_INT_24_8_OES = 34042;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 35883;
  private static final int GL_RGB_INTEGER_EXT = 36248;
  private static final int GL_MAX_TESS_PATCH_COMPONENTS = 36484;
  private static final int GL_OP_MADD_EXT = 34696;
  private static final int GL_UNPACK_SUBSAMPLE_RATE_SGIX = 34209;
  private static final int GL_BLEND_COLOR_EXT = 32773;
  private static final int GL_RGB10_A2UI = 36975;
  private static final int GL_RGBA_FLOAT_MODE_ATI = 34848;
  private static final int GL_SAMPLE_ALPHA_TO_ONE = 32927;
  private static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;
  private static final int GL_REPLACE_VALUE_AMD = 34635;
  private static final int GL_MATRIX_INDEX_ARRAY_OES = 34884;
  private static final int GL_SIGNED_NEGATE_NV = 34109;
  private static final int GL_OUTPUT_TEXTURE_COORD10_EXT = 34727;
  private static final int GL_BLEND_EQUATION_RGB_EXT = 32777;
  private static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;
  private static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081;
  private static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
  private static final int GL_MAX_SAMPLES_NV = 36183;
  private static final int GL_HALF_BIT_ATI = 8;
  private static final int GL_TEXTURE_CROP_RECT_OES = 35741;
  private static final int GL_ALPHA8I_EXT = 36240;
  private static final int GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288;
  private static final int GL_SAMPLER_1D_ARRAY = 36288;
  private static final int GL_TEXTURE_IMMUTABLE_LEVELS = 33503;
  private static final int GL_DOUBLE_MAT2_EXT = 36678;
  private static final int GL_RENDERBUFFER_WIDTH_OES = 36162;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 37831;
  private static final int GL_INTENSITY_FLOAT32_ATI = 34839;
  private static final int GL_UTF8_NV = 37018;
  private static final int GL_MODELVIEW0_STACK_DEPTH_EXT = 2979;
  private static final int GL_CLAMP_TO_BORDER_ARB = 33069;
  private static final int GL_INTERLACE_READ_OML = 35201;
  private static final int GL_COLOR_ATTACHMENT15_NV = 36079;
  private static final int GL_CPU_OPTIMIZED_QCOM = 36785;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;
  private static final int GL_ZERO = 0;
  private static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333;
  private static final int GL_COMPUTE_WORK_GROUP_SIZE = 33383;
  private static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423;
  private static final int GL_RG16_SNORM = 36761;
  private static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132;
  private static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639;
  private static final int GL_COPY_WRITE_BUFFER_BINDING = 36663;
  private static final int GL_ALPHA_INTEGER_EXT = 36247;
  private static final int GL_CONDITION_SATISFIED = 37148;
  private static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 36482;
  private static final int GL_OBJECT_TYPE_ARB = 35662;
  private static final int GL_TRACE_NAME_MESA = 34646;
  private static final int GL_TEXCOORD2_BIT_PGI = 536870912;
  private static final int GL_UNSIGNED_INT_8_8_8_8_EXT = 32821;
  private static final int GL_PERFMON_RESULT_SIZE_AMD = 35781;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 33162;
  private static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806;
  private static final int GL_VERTEX_ATTRIB_ARRAY13_NV = 34397;
  private static final int GL_IMAGE_CUBIC_WEIGHT_HP = 33118;
  private static final int GL_FLOAT_MAT4 = 35676;
  private static final int GL_FLOAT_MAT3 = 35675;
  private static final int GL_ONE_MINUS_CONSTANT_COLOR = 32770;
  private static final int GL_FLOAT_MAT2 = 35674;
  private static final int GL_WARPS_PER_SM_NV = 37690;
  private static final int GL_MATRIX_INDEX_ARRAY_SIZE_OES = 34886;
  private static final int GL_IMAGE_TRANSLATE_X_HP = 33111;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 33531;
  private static final int GL_LOCATION = 37646;
  private static final int GL_REFLECTION_MAP_NV = 34066;
  private static final int GL_FRONT_LEFT = 1024;
  private static final int GL_MATRIX2_NV = 34354;
  private static final int GL_WEIGHT_ARRAY_ARB = 34477;
  private static final int GL_SAMPLER_BINDING = 35097;
  private static final int GL_SOURCE2_RGB = 34178;
  private static final int GL_DEPTH24_STENCIL8 = 35056;
  private static final int GL_MOV_ATI = 35169;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453;
  private static final int GL_HARDLIGHT_NV = 37531;
  private static final int GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676;
  private static final int GL_FLOAT_MAT3_ARB = 35675;
  private static final int GL_POLYGON_OFFSET_EXT = 32823;
  private static final int GL_ALPHA4_EXT = 32827;
  private static final int GL_FLOAT16_VEC2_NV = 36857;
  private static final int GL_STENCIL = 6146;
  private static final int GL_DRAW_INDIRECT_BUFFER = 36671;
  private static final int GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 35095;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 36054;
  private static final int GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 37588;
  private static final int GL_EMISSION = 5632;
  private static final int GL_LAYOUT_DEFAULT_INTEL = 0;
  private static final int GL_RGB8_EXT = 32849;
  private static final int GL_VIEWPORT_SWIZZLE_Z_NV = 37722;
  private static final int GL_PROVOKING_VERTEX = 36431;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033;
  private static final int GL_N3F_V3F = 10789;
  private static final int GL_BGRA8_EXT = 37793;
  private static final int GL_RESAMPLE_DECIMATE_SGIX = 33840;
  private static final int GL_INTERNALFORMAT_RED_TYPE = 33400;
  private static final int GL_FLOAT = 5126;
  private static final int GL_RGBA32F_EXT = 34836;
  private static final int GL_INTERNALFORMAT_ALPHA_TYPE = 33403;
  private static final int GL_FRAGMENT_ALPHA_MODULATE_IMG = 35848;
  private static final int GL_TESS_GEN_SPACING_OES = 36471;
  private static final int GL_SOURCE3_RGB_NV = 34179;
  private static final int GL_POINT_SPRITE_OES = 34913;
  private static final int GL_ATTRIB_ARRAY_POINTER_NV = 34373;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;
  private static final int GL_TEXTURE_WRAP_Q_SGIS = 33079;
  private static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36950;
  private static final int GL_CUBIC_HP = 33119;
  private static final int GL_TEXTURE_BUFFER_EXT = 35882;
  private static final int GL_MAT_DIFFUSE_BIT_PGI = 4194304;
  private static final int GL_DRAW_BUFFER0_ATI = 34853;
  private static final int GL_POLYGON = 9;
  private static final int GL_MATRIX20_ARB = 35028;
  private static final int GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077;
  private static final int GL_MAP1_VERTEX_ATTRIB13_4_NV = 34413;
  private static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;
  private static final int GL_STENCIL_FUNC = 2962;
  private static final int GL_INDEX_TEST_REF_EXT = 33207;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4_EXT = 32819;
  private static final int GL_TEXTURE23_ARB = 34007;
  private static final int GL_COLOR_INDEXES = 5635;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;
  private static final int GL_IMAGE_2D_MULTISAMPLE_EXT = 36949;
  private static final int GL_TEXTURE_MATERIAL_FACE_EXT = 33617;
  private static final int GL_FONT_DESCENDER_BIT_NV = 4194304;
  private static final int GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
  private static final int GL_DRAW_BUFFER5_NV = 34858;
  private static final int GL_REG_8_ATI = 35113;
  private static final int GL_BINNING_CONTROL_HINT_QCOM = 36784;
  private static final int GL_LOCATION_COMPONENT = 37706;
  private static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974;
  private static final int GL_CON_19_ATI = 35156;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP_EXT = 34075;
  private static final int GL_Y_EXT = 34774;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052;
  private static final int GL_AUX0 = 1033;
  private static final int GL_AMBIENT = 4608;
  private static final int GL_AUX1 = 1034;
  private static final int GL_TEXTURE_ALPHA_TYPE = 35859;
  private static final int GL_RGBA_FLOAT_MODE_ARB = 34848;
  private static final int GL_INVARIANT_DATATYPE_EXT = 34795;
  private static final int GL_MAP1_VERTEX_ATTRIB1_4_NV = 34401;
  private static final int GL_VERTEX_DATA_HINT_PGI = 107050;
  private static final int GL_MITER_TRUNCATE_NV = 37032;
  private static final int GL_COLOR_ATTACHMENT0_EXT = 36064;
  private static final int GL_AUX2 = 1035;
  private static final int GL_AUX3 = 1036;
  private static final int GL_CON_6_ATI = 35143;
  private static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
  private static final int GL_DRAW_BUFFER0_ARB = 34853;
  private static final int GL_INTENSITY16I_EXT = 36235;
  private static final int GL_SCREEN_KHR = 37525;
  private static final int GL_OUTPUT_TEXTURE_COORD23_EXT = 34740;
  private static final int GL_OBJECT_LINK_STATUS_ARB = 35714;
  private static final int GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 536870912;
  private static final int GL_CLIP_DISTANCE_NV = 35962;
  private static final int GL_PARALLEL_ARRAYS_INTEL = 33780;
  private static final int GL_BLOCK_INDEX = 37629;
  private static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 37183;
  private static final int GL_TEXTURE_MIN_LOD_SGIS = 33082;
  private static final int GL_LUMINANCE8_ALPHA8_SNORM = 36886;
  private static final int GL_COMBINER_COMPONENT_USAGE_NV = 34116;
  private static final int GL_2D = 1536;
  private static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739;
  private static final int GL_COLOR_TABLE_GREEN_SIZE = 32987;
  private static final int GL_OUTPUT_TEXTURE_COORD8_EXT = 34725;
  private static final int GL_MAP2_VERTEX_ATTRIB7_4_NV = 34423;
  private static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979;
  private static final int GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
  private static final int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 36262;
  private static final int GL_MALI_SHADER_BINARY_ARM = 36704;
  private static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;
  private static final int GL_PIXEL_TILE_GRID_WIDTH_SGIX = 33090;
  private static final int GL_DEPTH_BOUNDS_EXT = 34961;
  private static final int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624;
  private static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 2048;
  private static final int GL_MODELVIEW10_ARB = 34602;
  private static final int GL_IMAGE_BINDING_LEVEL_EXT = 36667;
  private static final int GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
  private static final int GL_PIXEL_UNPACK_BUFFER_EXT = 35052;
  private static final int GL_INTENSITY8I_EXT = 36241;
  private static final int GL_UNSIGNALED_APPLE = 37144;
  private static final int GL_STREAM_READ = 35041;
  private static final int GL_READ_PIXELS_FORMAT = 33421;
  private static final int GL_VERTEX_ARRAY_EXT = 32884;
  private static final int GL_ADD_SIGNED = 34164;
  private static final int GL_GLYPH_WIDTH_BIT_NV = 1;
  private static final int GL_REG_30_ATI = 35135;
  private static final int GL_OFFSET_TEXTURE_2D_SCALE_NV = 34530;
  public static final Map<Integer, String> _null_ = new HashMap<Integer, String>();
  private static void _null_0() {
    _null_.put(GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING");
    _null_.put(GL_TRANSFORM_FEEDBACK_BINDING, "GL_TRANSFORM_FEEDBACK_BINDING");
    _null_.put(GL_REFERENCED_BY_GEOMETRY_SHADER, "GL_REFERENCED_BY_GEOMETRY_SHADER");
    _null_.put(GL_EIGHTH_BIT_ATI, "GL_EIGHTH_BIT_ATI");
    _null_.put(GL_TEXTURE_GEN_MODE, "GL_TEXTURE_GEN_MODE");
    _null_.put(GL_CLIPPING_INPUT_PRIMITIVES, "GL_CLIPPING_INPUT_PRIMITIVES");
    _null_.put(GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX, "GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX");
    _null_.put(GL_SYNC_STATUS_APPLE, "GL_SYNC_STATUS_APPLE");
    _null_.put(GL_ACCUM_CLEAR_VALUE, "GL_ACCUM_CLEAR_VALUE");
    _null_.put(GL_SHADER_KHR, "GL_SHADER_KHR");
    _null_.put(GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA, "GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE");
    _null_.put(GL_MAX_IMAGE_UNITS, "GL_MAX_IMAGE_UNITS");
    _null_.put(GL_RENDERBUFFER_SAMPLES_APPLE, "GL_RENDERBUFFER_SAMPLES_APPLE");
    _null_.put(GL_MODELVIEW_STACK_DEPTH, "GL_MODELVIEW_STACK_DEPTH");
    _null_.put(GL_TEXTURE_MIN_LOD, "GL_TEXTURE_MIN_LOD");
    _null_.put(GL_FLOAT_MAT3x4, "GL_FLOAT_MAT3x4");
    _null_.put(GL_FLOAT_MAT3x2, "GL_FLOAT_MAT3x2");
    _null_.put(GL_FRAMEBUFFER_BARRIER_BIT, "GL_FRAMEBUFFER_BARRIER_BIT");
    _null_.put(GL_DEPTH_COMPONENT16_SGIX, "GL_DEPTH_COMPONENT16_SGIX");
    _null_.put(GL_MAX_DEBUG_LOGGED_MESSAGES, "GL_MAX_DEBUG_LOGGED_MESSAGES");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR");
    _null_.put(GL_INVALID_FRAMEBUFFER_OPERATION, "GL_INVALID_FRAMEBUFFER_OPERATION");
    _null_.put(GL_POINT_SPRITE, "GL_POINT_SPRITE");
    _null_.put(GL_MAX_FRAGMENT_UNIFORM_VECTORS, "GL_MAX_FRAGMENT_UNIFORM_VECTORS");
    _null_.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    _null_.put(GL_RGBA_DXT5_S3TC, "GL_RGBA_DXT5_S3TC");
    _null_.put(GL_SECONDARY_INTERPOLATOR_ATI, "GL_SECONDARY_INTERPOLATOR_ATI");
    _null_.put(GL_REG_12_ATI, "GL_REG_12_ATI");
    _null_.put(GL_INVALID_OPERATION, "GL_INVALID_OPERATION");
    _null_.put(GL_SOURCE0_RGB, "GL_SOURCE0_RGB");
    _null_.put(GL_IMAGE_BINDING_ACCESS, "GL_IMAGE_BINDING_ACCESS");
    _null_.put(GL_SAMPLE_BUFFERS_SGIS, "GL_SAMPLE_BUFFERS_SGIS");
    _null_.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    _null_.put(GL_MAX_DEBUG_MESSAGE_LENGTH, "GL_MAX_DEBUG_MESSAGE_LENGTH");
    _null_.put(GL_BLUE_MAX_CLAMP_INGR, "GL_BLUE_MAX_CLAMP_INGR");
    _null_.put(GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI, "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI");
    _null_.put(GL_SAMPLER_2D_ARRAY_SHADOW, "GL_SAMPLER_2D_ARRAY_SHADOW");
    _null_.put(GL_POST_COLOR_MATRIX_RED_SCALE, "GL_POST_COLOR_MATRIX_RED_SCALE");
    _null_.put(GL_MAX_COMBINED_IMAGE_UNIFORMS, "GL_MAX_COMBINED_IMAGE_UNIFORMS");
    _null_.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    _null_.put(GL_MAX_DEPTH_TEXTURE_SAMPLES, "GL_MAX_DEPTH_TEXTURE_SAMPLES");
    _null_.put(GL_IMAGE_BINDING_LAYER, "GL_IMAGE_BINDING_LAYER");
    _null_.put(GL_RGBA_FLOAT32_APPLE, "GL_RGBA_FLOAT32_APPLE");
    _null_.put(GL_SET, "GL_SET");
    _null_.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    _null_.put(GL_PARAMETER_BUFFER_BINDING, "GL_PARAMETER_BUFFER_BINDING");
    _null_.put(GL_UNIFORM_BLOCK_DATA_SIZE, "GL_UNIFORM_BLOCK_DATA_SIZE");
    _null_.put(GL_PACK_IMAGE_HEIGHT, "GL_PACK_IMAGE_HEIGHT");
    _null_.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    _null_.put(GL_FOG_COORD_ARRAY_TYPE, "GL_FOG_COORD_ARRAY_TYPE");
  }
  private static void _null_1() {
    _null_.put(GL_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_COLOR_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_FRAMEBUFFER_UNDEFINED, "GL_FRAMEBUFFER_UNDEFINED");
    _null_.put(GL_MAX_TEXTURE_UNITS, "GL_MAX_TEXTURE_UNITS");
    _null_.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR");
    _null_.put(GL_GREEN_INTEGER, "GL_GREEN_INTEGER");
    _null_.put(GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL, "GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL");
    _null_.put(GL_LINES_ADJACENCY, "GL_LINES_ADJACENCY");
    _null_.put(GL_VERTEX_STREAM0_ATI, "GL_VERTEX_STREAM0_ATI");
    _null_.put(GL_STENCIL_BUFFER_BIT2_QCOM, "GL_STENCIL_BUFFER_BIT2_QCOM");
    _null_.put(GL_DYNAMIC_DRAW, "GL_DYNAMIC_DRAW");
    _null_.put(GL_SLUMINANCE8, "GL_SLUMINANCE8");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT7_QCOM, "GL_MULTISAMPLE_BUFFER_BIT7_QCOM");
    _null_.put(GL_Z400_BINARY_AMD, "GL_Z400_BINARY_AMD");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER");
    _null_.put(GL_VERSION_ES_CM_1_1, "GL_VERSION_ES_CM_1_1");
    _null_.put(GL_PERFQUERY_SINGLE_CONTEXT_INTEL, "GL_PERFQUERY_SINGLE_CONTEXT_INTEL");
    _null_.put(GL_PROGRAM_BINARY_FORMATS, "GL_PROGRAM_BINARY_FORMATS");
    _null_.put(GL_PROXY_TEXTURE_CUBE_MAP_ARRAY, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY");
    _null_.put(GL_INTENSITY_SNORM, "GL_INTENSITY_SNORM");
    _null_.put(GL_REG_21_ATI, "GL_REG_21_ATI");
    _null_.put(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA, "GL_COMPRESSED_SRGB_ALPHA");
    _null_.put(GL_PIXEL_MAP_A_TO_A, "GL_PIXEL_MAP_A_TO_A");
    _null_.put(GL_SYNC_GPU_COMMANDS_COMPLETE, "GL_SYNC_GPU_COMMANDS_COMPLETE");
    _null_.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS");
    _null_.put(GL_BUFFER_SERIALIZED_MODIFY_APPLE, "GL_BUFFER_SERIALIZED_MODIFY_APPLE");
    _null_.put(GL_SWIZZLE_STRQ_DQ_ATI, "GL_SWIZZLE_STRQ_DQ_ATI");
    _null_.put(GL_ALL_BARRIER_BITS, "GL_ALL_BARRIER_BITS");
    _null_.put(GL_TEXTURE_FETCH_BARRIER_BIT, "GL_TEXTURE_FETCH_BARRIER_BIT");
    _null_.put(GL_RGB_FLOAT16_APPLE, "GL_RGB_FLOAT16_APPLE");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT1_RGB, "GL_VIEW_CLASS_S3TC_DXT1_RGB");
    _null_.put(GL_EDGE_FLAG_ARRAY_STRIDE, "GL_EDGE_FLAG_ARRAY_STRIDE");
    _null_.put(GL_IMAGE_ROTATE_ORIGIN_X_HP, "GL_IMAGE_ROTATE_ORIGIN_X_HP");
    _null_.put(GL_FLOAT_VEC2, "GL_FLOAT_VEC2");
    _null_.put(GL_OBJECT_DISTANCE_TO_POINT_SGIS, "GL_OBJECT_DISTANCE_TO_POINT_SGIS");
    _null_.put(GL_FLOAT_VEC4, "GL_FLOAT_VEC4");
    _null_.put(GL_FLOAT_VEC3, "GL_FLOAT_VEC3");
    _null_.put(GL_TEXTURE_GATHER, "GL_TEXTURE_GATHER");
    _null_.put(GL_COLOR_TABLE_ALPHA_SIZE, "GL_COLOR_TABLE_ALPHA_SIZE");
    _null_.put(GL_MAX_SAMPLES_ANGLE, "GL_MAX_SAMPLES_ANGLE");
    _null_.put(GL_REG_5_ATI, "GL_REG_5_ATI");
    _null_.put(GL_MAX_LABEL_LENGTH_KHR, "GL_MAX_LABEL_LENGTH_KHR");
    _null_.put(GL_IMAGE_CLASS_10_10_10_2, "GL_IMAGE_CLASS_10_10_10_2");
    _null_.put(GL_IMAGE_2D_ARRAY, "GL_IMAGE_2D_ARRAY");
    _null_.put(GL_HSL_HUE, "GL_HSL_HUE");
    _null_.put(GL_ALPHA_MIN_SGIX, "GL_ALPHA_MIN_SGIX");
    _null_.put(GL_FRONT_FACE, "GL_FRONT_FACE");
    _null_.put(GL_TEXTURE_GREEN_TYPE, "GL_TEXTURE_GREEN_TYPE");
    _null_.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS");
    _null_.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    _null_.put(GL_TESS_EVALUATION_TEXTURE, "GL_TESS_EVALUATION_TEXTURE");
    _null_.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
  }
  private static void _null_2() {
    _null_.put(GL_COLOR_MATERIAL_FACE, "GL_COLOR_MATERIAL_FACE");
    _null_.put(GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA, "GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA");
    _null_.put(GL_COMMAND_BARRIER_BIT, "GL_COMMAND_BARRIER_BIT");
    _null_.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    _null_.put(GL_RENDERBUFFER_BINDING_ANGLE, "GL_RENDERBUFFER_BINDING_ANGLE");
    _null_.put(GL_SHADER_BINARY_VIV, "GL_SHADER_BINARY_VIV");
    _null_.put(GL_QUERY_BY_REGION_NO_WAIT, "GL_QUERY_BY_REGION_NO_WAIT");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_SIZE, "GL_SECONDARY_COLOR_ARRAY_SIZE");
    _null_.put(GL_CURRENT_PROGRAM, "GL_CURRENT_PROGRAM");
    _null_.put(GL_ALPHA_TEST_FUNC, "GL_ALPHA_TEST_FUNC");
    _null_.put(GL_POLYGON_OFFSET_POINT, "GL_POLYGON_OFFSET_POINT");
    _null_.put(GL_CON_3_ATI, "GL_CON_3_ATI");
    _null_.put(GL_FOG_COORDINATE, "GL_FOG_COORDINATE");
    _null_.put(GL_LIST_MODE, "GL_LIST_MODE");
    _null_.put(GL_RGB_S3TC, "GL_RGB_S3TC");
    _null_.put(GL_MAX_VERTEX_STREAMS_ATI, "GL_MAX_VERTEX_STREAMS_ATI");
    _null_.put(GL_INCR, "GL_INCR");
    _null_.put(GL_ACTIVE_RESOURCES, "GL_ACTIVE_RESOURCES");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x8, "GL_COMPRESSED_RGBA_ASTC_8x8");
    _null_.put(GL_TEXTURE_BLUE_SIZE, "GL_TEXTURE_BLUE_SIZE");
    _null_.put(GL_WIDE_LINE_HINT_PGI, "GL_WIDE_LINE_HINT_PGI");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x6, "GL_COMPRESSED_RGBA_ASTC_8x6");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x5, "GL_COMPRESSED_RGBA_ASTC_8x5");
    _null_.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    _null_.put(GL_RGB32F, "GL_RGB32F");
    _null_.put(GL_ACTIVE_UNIFORM_BLOCKS, "GL_ACTIVE_UNIFORM_BLOCKS");
    _null_.put(GL_RGB4_S3TC, "GL_RGB4_S3TC");
    _null_.put(GL_RGB32I, "GL_RGB32I");
    _null_.put(GL_DEBUG_OUTPUT_SYNCHRONOUS, "GL_DEBUG_OUTPUT_SYNCHRONOUS");
    _null_.put(GL_AUX_DEPTH_STENCIL_APPLE, "GL_AUX_DEPTH_STENCIL_APPLE");
    _null_.put(GL_YCRCB_SGIX, "GL_YCRCB_SGIX");
    _null_.put(GL_REFERENCED_BY_VERTEX_SHADER, "GL_REFERENCED_BY_VERTEX_SHADER");
    _null_.put(GL_MULTISAMPLE_LINE_WIDTH_RANGE, "GL_MULTISAMPLE_LINE_WIDTH_RANGE");
    _null_.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    _null_.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    _null_.put(GL_SHADER_SOURCE_LENGTH, "GL_SHADER_SOURCE_LENGTH");
    _null_.put(GL_TEXTURE_COMPRESSION_HINT, "GL_TEXTURE_COMPRESSION_HINT");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x5_KHR, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR");
    _null_.put(GL_LUMINANCE_SNORM, "GL_LUMINANCE_SNORM");
    _null_.put(GL_TEXTURE_STORAGE_HINT_APPLE, "GL_TEXTURE_STORAGE_HINT_APPLE");
    _null_.put(GL_VIEW_CLASS_RGTC1_RED, "GL_VIEW_CLASS_RGTC1_RED");
    _null_.put(GL_UNSIGNED_INT_10F_11F_11F_REV, "GL_UNSIGNED_INT_10F_11F_11F_REV");
    _null_.put(GL_CULL_FACE_MODE, "GL_CULL_FACE_MODE");
    _null_.put(GL_TEXTURE_SWIZZLE_R, "GL_TEXTURE_SWIZZLE_R");
    _null_.put(GL_TEXTURE_FIXED_SAMPLE_LOCATIONS, "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS");
  }
  private static void _null_3() {
    _null_.put(GL_RESAMPLE_ZERO_FILL_OML, "GL_RESAMPLE_ZERO_FILL_OML");
    _null_.put(GL_TEXTURE_SWIZZLE_B, "GL_TEXTURE_SWIZZLE_B");
    _null_.put(GL_TEXTURE_SWIZZLE_A, "GL_TEXTURE_SWIZZLE_A");
    _null_.put(GL_TEXTURE_SWIZZLE_G, "GL_TEXTURE_SWIZZLE_G");
    _null_.put(GL_COLOR_SUM, "GL_COLOR_SUM");
    _null_.put(GL_COLOR_TABLE_FORMAT_SGI, "GL_COLOR_TABLE_FORMAT_SGI");
    _null_.put(GL_PIXEL_PACK_BUFFER_BINDING, "GL_PIXEL_PACK_BUFFER_BINDING");
    _null_.put(GL_DU8DV8_ATI, "GL_DU8DV8_ATI");
    _null_.put(GL_DRAW_BUFFER8_ATI, "GL_DRAW_BUFFER8_ATI");
    _null_.put(GL_FOG_COORDINATE_ARRAY_STRIDE, "GL_FOG_COORDINATE_ARRAY_STRIDE");
    _null_.put(GL_TEXTURE_VIEW, "GL_TEXTURE_VIEW");
    _null_.put(GL_TEXTURE_INTENSITY_SIZE, "GL_TEXTURE_INTENSITY_SIZE");
    _null_.put(GL_QUAD_MESH_SUN, "GL_QUAD_MESH_SUN");
    _null_.put(GL_PROGRAM_PIPELINE_BINDING, "GL_PROGRAM_PIPELINE_BINDING");
    _null_.put(GL_R32UI, "GL_R32UI");
    _null_.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    _null_.put(GL_TEXTURE_COORD_ARRAY_POINTER, "GL_TEXTURE_COORD_ARRAY_POINTER");
    _null_.put(GL_DOT2_ADD_ATI, "GL_DOT2_ADD_ATI");
    _null_.put(GL_R1UI_C4F_N3F_V3F_SUN, "GL_R1UI_C4F_N3F_V3F_SUN");
    _null_.put(GL_ANY_SAMPLES_PASSED, "GL_ANY_SAMPLES_PASSED");
    _null_.put(GL_TEXTURE_COORD_ARRAY_LIST_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_IBM");
    _null_.put(GL_DEPTH_BUFFER_BIT0_QCOM, "GL_DEPTH_BUFFER_BIT0_QCOM");
    _null_.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    _null_.put(GL_LESS, "GL_LESS");
    _null_.put(GL_GREEN_BIT_ATI, "GL_GREEN_BIT_ATI");
    _null_.put(GL_DEPTH_BUFFER_BIT4_QCOM, "GL_DEPTH_BUFFER_BIT4_QCOM");
    _null_.put(GL_TEXTURE_COORD_ARRAY, "GL_TEXTURE_COORD_ARRAY");
    _null_.put(GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG, "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG");
    _null_.put(GL_COMPRESSED_RG11_EAC, "GL_COMPRESSED_RG11_EAC");
    _null_.put(GL_RGB_RAW_422_APPLE, "GL_RGB_RAW_422_APPLE");
    _null_.put(GL_DEBUG_TYPE_PUSH_GROUP_KHR, "GL_DEBUG_TYPE_PUSH_GROUP_KHR");
    _null_.put(GL_IMAGE_BINDING_NAME, "GL_IMAGE_BINDING_NAME");
    _null_.put(GL_TESS_CONTROL_SHADER_PATCHES, "GL_TESS_CONTROL_SHADER_PATCHES");
    _null_.put(GL_TRANSFORM_FEEDBACK_PAUSED, "GL_TRANSFORM_FEEDBACK_PAUSED");
    _null_.put(GL_MIN_SPARSE_LEVEL_AMD, "GL_MIN_SPARSE_LEVEL_AMD");
    _null_.put(GL_NUM_FRAGMENT_REGISTERS_ATI, "GL_NUM_FRAGMENT_REGISTERS_ATI");
    _null_.put(GL_INT_IMAGE_2D_MULTISAMPLE, "GL_INT_IMAGE_2D_MULTISAMPLE");
    _null_.put(GL_QUADRATIC_ATTENUATION, "GL_QUADRATIC_ATTENUATION");
    _null_.put(GL_CONTEXT_FLAG_DEBUG_BIT_KHR, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR");
    _null_.put(GL_DECAL, "GL_DECAL");
    _null_.put(GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT");
    _null_.put(GL_MODULATE_SUBTRACT_ATI, "GL_MODULATE_SUBTRACT_ATI");
  }
  private static void _null_4() {
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR");
    _null_.put(GL_DRAW_BUFFER9, "GL_DRAW_BUFFER9");
    _null_.put(GL_4X_BIT_ATI, "GL_4X_BIT_ATI");
    _null_.put(GL_DRAW_BUFFER5, "GL_DRAW_BUFFER5");
    _null_.put(GL_DRAW_BUFFER6, "GL_DRAW_BUFFER6");
    _null_.put(GL_CONSERVE_MEMORY_HINT_PGI, "GL_CONSERVE_MEMORY_HINT_PGI");
    _null_.put(GL_DRAW_BUFFER7, "GL_DRAW_BUFFER7");
    _null_.put(GL_DRAW_BUFFER8, "GL_DRAW_BUFFER8");
    _null_.put(GL_DRAW_BUFFER1, "GL_DRAW_BUFFER1");
    _null_.put(GL_DRAW_BUFFER2, "GL_DRAW_BUFFER2");
    _null_.put(GL_DRAW_BUFFER3, "GL_DRAW_BUFFER3");
    _null_.put(GL_STENCIL_BACK_VALUE_MASK, "GL_STENCIL_BACK_VALUE_MASK");
    _null_.put(GL_TRIANGLES, "GL_TRIANGLES");
    _null_.put(GL_DRAW_BUFFER4, "GL_DRAW_BUFFER4");
    _null_.put(GL_DEPTH_COMPONENTS, "GL_DEPTH_COMPONENTS");
    _null_.put(GL_STREAM_RASTERIZATION_AMD, "GL_STREAM_RASTERIZATION_AMD");
    _null_.put(GL_MAX_NUM_ACTIVE_VARIABLES, "GL_MAX_NUM_ACTIVE_VARIABLES");
    _null_.put(GL_DRAW_BUFFER0, "GL_DRAW_BUFFER0");
    _null_.put(GL_REFERENCED_BY_COMPUTE_SHADER, "GL_REFERENCED_BY_COMPUTE_SHADER");
    _null_.put(GL_MAX_ASYNC_READ_PIXELS_SGIX, "GL_MAX_ASYNC_READ_PIXELS_SGIX");
    _null_.put(GL_STACK_UNDERFLOW_KHR, "GL_STACK_UNDERFLOW_KHR");
    _null_.put(GL_COLOR_TABLE_RED_SIZE_SGI, "GL_COLOR_TABLE_RED_SIZE_SGI");
    _null_.put(GL_RGBA, "GL_RGBA");
    _null_.put(GL_RGB5, "GL_RGB5");
    _null_.put(GL_RGB4, "GL_RGB4");
    _null_.put(GL_GS_SHADER_BINARY_MTK, "GL_GS_SHADER_BINARY_MTK");
    _null_.put(GL_GUILTY_CONTEXT_RESET_KHR, "GL_GUILTY_CONTEXT_RESET_KHR");
    _null_.put(GL_RGB8, "GL_RGB8");
    _null_.put(GL_FRAMEBUFFER_RENDERABLE, "GL_FRAMEBUFFER_RENDERABLE");
    _null_.put(GL_CON_12_ATI, "GL_CON_12_ATI");
    _null_.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS");
    _null_.put(GL_UNPACK_ROW_BYTES_APPLE, "GL_UNPACK_ROW_BYTES_APPLE");
    _null_.put(GL_PERFMON_RESULT_AMD, "GL_PERFMON_RESULT_AMD");
    _null_.put(GL_3DC_XY_AMD, "GL_3DC_XY_AMD");
    _null_.put(GL_PACK_ROW_LENGTH, "GL_PACK_ROW_LENGTH");
    _null_.put(GL_FRAGMENT_SHADER_INVOCATIONS, "GL_FRAGMENT_SHADER_INVOCATIONS");
    _null_.put(GL_DEPTH_STENCIL, "GL_DEPTH_STENCIL");
    _null_.put(GL_BYTE, "GL_BYTE");
    _null_.put(GL_RGB5_A1, "GL_RGB5_A1");
    _null_.put(GL_ZOOM_X, "GL_ZOOM_X");
    _null_.put(GL_ZOOM_Y, "GL_ZOOM_Y");
    _null_.put(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, "GL_UNPACK_COLORSPACE_CONVERSION_WEBGL");
    _null_.put(GL_UNPACK_RESAMPLE_OML, "GL_UNPACK_RESAMPLE_OML");
    _null_.put(GL_SOFTLIGHT_KHR, "GL_SOFTLIGHT_KHR");
    _null_.put(GL_QUERY_WAIT, "GL_QUERY_WAIT");
    _null_.put(GL_STATIC_ATI, "GL_STATIC_ATI");
    _null_.put(GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_POINTER, "GL_VERTEX_ATTRIB_ARRAY_POINTER");
    _null_.put(GL_VERTEX_ARRAY_BINDING_APPLE, "GL_VERTEX_ARRAY_BINDING_APPLE");
    _null_.put(GL_CONVOLUTION_FORMAT, "GL_CONVOLUTION_FORMAT");
    _null_.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4");
    _null_.put(GL_LINE_STIPPLE_REPEAT, "GL_LINE_STIPPLE_REPEAT");
    _null_.put(GL_VERTEX_PROGRAM_POSITION_MESA, "GL_VERTEX_PROGRAM_POSITION_MESA");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE");
    _null_.put(GL_DEBUG_OUTPUT, "GL_DEBUG_OUTPUT");
    _null_.put(GL_PROGRAM_SEPARABLE, "GL_PROGRAM_SEPARABLE");
    _null_.put(GL_TEXTURE_LIGHTING_MODE_HP, "GL_TEXTURE_LIGHTING_MODE_HP");
  }
  private static void _null_5() {
    _null_.put(GL_CON_28_ATI, "GL_CON_28_ATI");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_LONG, "GL_VERTEX_ATTRIB_ARRAY_LONG");
    _null_.put(GL_REG_25_ATI, "GL_REG_25_ATI");
    _null_.put(GL_SPHERE_MAP, "GL_SPHERE_MAP");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR");
    _null_.put(GL_VERTEX_ARRAY_KHR, "GL_VERTEX_ARRAY_KHR");
    _null_.put(GL_IMAGE_ROTATE_ANGLE_HP, "GL_IMAGE_ROTATE_ANGLE_HP");
    _null_.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    _null_.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    _null_.put(GL_PROGRAM_PIPELINE, "GL_PROGRAM_PIPELINE");
    _null_.put(GL_UNSIGNED_INT64_AMD, "GL_UNSIGNED_INT64_AMD");
    _null_.put(GL_NO_RESET_NOTIFICATION, "GL_NO_RESET_NOTIFICATION");
    _null_.put(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT");
    _null_.put(GL_SYNC_STATUS, "GL_SYNC_STATUS");
    _null_.put(GL_RED_BIT_ATI, "GL_RED_BIT_ATI");
    _null_.put(GL_TEXTURE_RECTANGLE, "GL_TEXTURE_RECTANGLE");
    _null_.put(GL_POLYGON_OFFSET_UNITS, "GL_POLYGON_OFFSET_UNITS");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x10_KHR, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR");
    _null_.put(GL_SRGB8_ALPHA8, "GL_SRGB8_ALPHA8");
    _null_.put(GL_PHONG_WIN, "GL_PHONG_WIN");
    _null_.put(GL_DEBUG_TYPE_PUSH_GROUP, "GL_DEBUG_TYPE_PUSH_GROUP");
    _null_.put(GL_CURRENT_FOG_COORD, "GL_CURRENT_FOG_COORD");
    _null_.put(GL_LUMINANCE16_ALPHA16_SNORM, "GL_LUMINANCE16_ALPHA16_SNORM");
    _null_.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    _null_.put(GL_DEBUG_CATEGORY_API_ERROR_AMD, "GL_DEBUG_CATEGORY_API_ERROR_AMD");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT0_QCOM, "GL_MULTISAMPLE_BUFFER_BIT0_QCOM");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D, "GL_UNSIGNED_INT_IMAGE_2D");
    _null_.put(GL_DATA_BUFFER_AMD, "GL_DATA_BUFFER_AMD");
    _null_.put(GL_STACK_OVERFLOW, "GL_STACK_OVERFLOW");
    _null_.put(GL_MAX_PATCH_VERTICES, "GL_MAX_PATCH_VERTICES");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_SAMPLES, "GL_FRAMEBUFFER_DEFAULT_SAMPLES");
    _null_.put(GL_SLUMINANCE8_ALPHA8, "GL_SLUMINANCE8_ALPHA8");
    _null_.put(GL_INNOCENT_CONTEXT_RESET, "GL_INNOCENT_CONTEXT_RESET");
    _null_.put(GL_ALREADY_SIGNALED_APPLE, "GL_ALREADY_SIGNALED_APPLE");
    _null_.put(GL_DEBUG_SEVERITY_LOW_AMD, "GL_DEBUG_SEVERITY_LOW_AMD");
    _null_.put(GL_C4F_N3F_V3F, "GL_C4F_N3F_V3F");
    _null_.put(GL_VIEWPORT_BOUNDS_RANGE, "GL_VIEWPORT_BOUNDS_RANGE");
    _null_.put(GL_RED_INTEGER, "GL_RED_INTEGER");
    _null_.put(GL_TEXTURE_COORD_ARRAY_STRIDE, "GL_TEXTURE_COORD_ARRAY_STRIDE");
    _null_.put(GL_IGNORE_BORDER_HP, "GL_IGNORE_BORDER_HP");
    _null_.put(GL_WRAP_BORDER_SUN, "GL_WRAP_BORDER_SUN");
    _null_.put(GL_BLEND_EQUATION_RGB, "GL_BLEND_EQUATION_RGB");
    _null_.put(GL_UNSIGNED_INT_IMAGE_1D, "GL_UNSIGNED_INT_IMAGE_1D");
    _null_.put(GL_T2F_N3F_V3F, "GL_T2F_N3F_V3F");
    _null_.put(GL_MAX_TEXTURE_COORDS, "GL_MAX_TEXTURE_COORDS");
    _null_.put(GL_WRITE_ONLY, "GL_WRITE_ONLY");
    _null_.put(GL_MODELVIEW_MATRIX, "GL_MODELVIEW_MATRIX");
    _null_.put(GL_SLICE_ACCUM_SUN, "GL_SLICE_ACCUM_SUN");
    _null_.put(GL_LGPU_SEPARATE_STORAGE_BIT_NVX, "GL_LGPU_SEPARATE_STORAGE_BIT_NVX");
    _null_.put(GL_INDEX_WRITEMASK, "GL_INDEX_WRITEMASK");
  }
  private static void _null_6() {
    _null_.put(GL_DRAW_FRAMEBUFFER_BINDING, "GL_DRAW_FRAMEBUFFER_BINDING");
    _null_.put(GL_TESS_CONTROL_TEXTURE, "GL_TESS_CONTROL_TEXTURE");
    _null_.put(GL_PROXY_COLOR_TABLE_SGI, "GL_PROXY_COLOR_TABLE_SGI");
    _null_.put(GL_PIXEL_MODE_BIT, "GL_PIXEL_MODE_BIT");
    _null_.put(GL_DEPTH_BUFFER_BIT7_QCOM, "GL_DEPTH_BUFFER_BIT7_QCOM");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS");
    _null_.put(GL_PURGEABLE_APPLE, "GL_PURGEABLE_APPLE");
    _null_.put(GL_COMPUTE_SHADER_INVOCATIONS, "GL_COMPUTE_SHADER_INVOCATIONS");
    _null_.put(GL_UNSIGNED_INT_IMAGE_3D, "GL_UNSIGNED_INT_IMAGE_3D");
    _null_.put(GL_OPERAND2_RGB, "GL_OPERAND2_RGB");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG");
    _null_.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    _null_.put(GL_ELEMENT_ARRAY_POINTER_ATI, "GL_ELEMENT_ARRAY_POINTER_ATI");
    _null_.put(GL_PIXEL_TILE_CACHE_INCREMENT_SGIX, "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX");
    _null_.put(GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE, "GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE");
    _null_.put(GL_READ_PIXELS, "GL_READ_PIXELS");
    _null_.put(GL_LOW_INT, "GL_LOW_INT");
    _null_.put(GL_STRICT_LIGHTING_HINT_PGI, "GL_STRICT_LIGHTING_HINT_PGI");
    _null_.put(GL_IMAGE_TRANSLATE_Y_HP, "GL_IMAGE_TRANSLATE_Y_HP");
    _null_.put(GL_RGB10_A2, "GL_RGB10_A2");
    _null_.put(GL_MAX_SHADER_STORAGE_BLOCK_SIZE, "GL_MAX_SHADER_STORAGE_BLOCK_SIZE");
    _null_.put(GL_TEXTURE_PRE_SPECULAR_HP, "GL_TEXTURE_PRE_SPECULAR_HP");
    _null_.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    _null_.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR");
    _null_.put(GL_NATIVE_GRAPHICS_HANDLE_PGI, "GL_NATIVE_GRAPHICS_HANDLE_PGI");
    _null_.put(GL_READ_FRAMEBUFFER_BINDING_ANGLE, "GL_READ_FRAMEBUFFER_BINDING_ANGLE");
    _null_.put(GL_PROGRAM_OUTPUT, "GL_PROGRAM_OUTPUT");
    _null_.put(GL_POLYGON_SMOOTH_HINT, "GL_POLYGON_SMOOTH_HINT");
    _null_.put(GL_BGR, "GL_BGR");
    _null_.put(GL_INT_IMAGE_1D, "GL_INT_IMAGE_1D");
    _null_.put(GL_BLEND_ADVANCED_COHERENT_KHR, "GL_BLEND_ADVANCED_COHERENT_KHR");
    _null_.put(GL_COMPRESSED_SIGNED_RG11_EAC, "GL_COMPRESSED_SIGNED_RG11_EAC");
    _null_.put(GL_POINT, "GL_POINT");
    _null_.put(GL_DEBUG_TYPE_ERROR, "GL_DEBUG_TYPE_ERROR");
    _null_.put(GL_PIXEL_UNPACK_BUFFER_BINDING, "GL_PIXEL_UNPACK_BUFFER_BINDING");
    _null_.put(GL_CLEAR, "GL_CLEAR");
    _null_.put(GL_INT_IMAGE_3D, "GL_INT_IMAGE_3D");
    _null_.put(GL_INT_IMAGE_2D, "GL_INT_IMAGE_2D");
    _null_.put(GL_IMAGE_1D_ARRAY, "GL_IMAGE_1D_ARRAY");
    _null_.put(GL_VERTEX_BINDING_DIVISOR, "GL_VERTEX_BINDING_DIVISOR");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
    _null_.put(GL_POINT_SIZE_MAX, "GL_POINT_SIZE_MAX");
    _null_.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS");
    _null_.put(GL_UNSIGNALED, "GL_UNSIGNALED");
    _null_.put(GL_INT_SAMPLER_2D_ARRAY, "GL_INT_SAMPLER_2D_ARRAY");
    _null_.put(GL_SAMPLER_2D_ARRAY, "GL_SAMPLER_2D_ARRAY");
    _null_.put(GL_POLYGON_OFFSET_LINE, "GL_POLYGON_OFFSET_LINE");
    _null_.put(GL_PIXEL_TEX_GEN_MODE_SGIX, "GL_PIXEL_TEX_GEN_MODE_SGIX");
    _null_.put(GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS, "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS");
  }
  private static void _null_7() {
    _null_.put(GL_TEXTURE_MULTI_BUFFER_HINT_SGIX, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL, "GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL");
    _null_.put(GL_PRESERVE_ATI, "GL_PRESERVE_ATI");
    _null_.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    _null_.put(GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI, "GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI");
    _null_.put(GL_RENDERBUFFER_SAMPLES, "GL_RENDERBUFFER_SAMPLES");
    _null_.put(GL_QUERY_BUFFER_BINDING_AMD, "GL_QUERY_BUFFER_BINDING_AMD");
    _null_.put(GL_INTERNALFORMAT_STENCIL_TYPE, "GL_INTERNALFORMAT_STENCIL_TYPE");
    _null_.put(GL_PROXY_TEXTURE_2D_STACK_MESAX, "GL_PROXY_TEXTURE_2D_STACK_MESAX");
    _null_.put(GL_MAX_PROGRAM_TEXEL_OFFSET, "GL_MAX_PROGRAM_TEXEL_OFFSET");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER");
    _null_.put(GL_COLOR_ARRAY_POINTER, "GL_COLOR_ARRAY_POINTER");
    _null_.put(GL_MAX_WIDTH, "GL_MAX_WIDTH");
    _null_.put(GL_BUFFER_MAPPED, "GL_BUFFER_MAPPED");
    _null_.put(GL_BLEND_EQUATION_ALPHA, "GL_BLEND_EQUATION_ALPHA");
    _null_.put(GL_UNPACK_FLIP_Y_WEBGL, "GL_UNPACK_FLIP_Y_WEBGL");
    _null_.put(GL_MIRRORED_REPEAT_IBM, "GL_MIRRORED_REPEAT_IBM");
    _null_.put(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    _null_.put(GL_UNPACK_COMPRESSED_SIZE_SGIX, "GL_UNPACK_COMPRESSED_SIZE_SGIX");
    _null_.put(GL_FOG_HINT, "GL_FOG_HINT");
    _null_.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE");
    _null_.put(GL_FLOAT_MAT4x3, "GL_FLOAT_MAT4x3");
    _null_.put(GL_UNSIGNED_INT_10_10_10_2, "GL_UNSIGNED_INT_10_10_10_2");
    _null_.put(GL_FLOAT_MAT4x2, "GL_FLOAT_MAT4x2");
    _null_.put(GL_ACCUM_BLUE_BITS, "GL_ACCUM_BLUE_BITS");
    _null_.put(GL_R16UI, "GL_R16UI");
    _null_.put(GL_VIEW_CLASS_24_BITS, "GL_VIEW_CLASS_24_BITS");
    _null_.put(GL_LINEAR_MIPMAP_NEAREST, "GL_LINEAR_MIPMAP_NEAREST");
    _null_.put(GL_TEXTURE_LOD_BIAS, "GL_TEXTURE_LOD_BIAS");
    _null_.put(GL_STENCIL_BACK_FAIL, "GL_STENCIL_BACK_FAIL");
    _null_.put(GL_LIST_INDEX, "GL_LIST_INDEX");
    _null_.put(GL_REPLACE, "GL_REPLACE");
    _null_.put(GL_TIMEOUT_IGNORED_APPLE, "GL_TIMEOUT_IGNORED_APPLE");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT3_QCOM, "GL_MULTISAMPLE_BUFFER_BIT3_QCOM");
    _null_.put(GL_MEDIUM_FLOAT, "GL_MEDIUM_FLOAT");
    _null_.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    _null_.put(GL_SHADER_BINARY_DMP, "GL_SHADER_BINARY_DMP");
    _null_.put(GL_INDEX_ARRAY_STRIDE, "GL_INDEX_ARRAY_STRIDE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE");
    _null_.put(GL_MAP1_GRID_DOMAIN, "GL_MAP1_GRID_DOMAIN");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR");
    _null_.put(GL_TEXTURE_RANGE_LENGTH_APPLE, "GL_TEXTURE_RANGE_LENGTH_APPLE");
    _null_.put(GL_SHININESS, "GL_SHININESS");
    _null_.put(GL_READ_FRAMEBUFFER, "GL_READ_FRAMEBUFFER");
    _null_.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x6_KHR, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR");
    _null_.put(GL_CON_24_ATI, "GL_CON_24_ATI");
    _null_.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR");
    _null_.put(GL_ONE_MINUS_SRC1_COLOR, "GL_ONE_MINUS_SRC1_COLOR");
    _null_.put(GL_INTERNALFORMAT_GREEN_SIZE, "GL_INTERNALFORMAT_GREEN_SIZE");
    _null_.put(GL_DEBUG_SEVERITY_HIGH_KHR, "GL_DEBUG_SEVERITY_HIGH_KHR");
    _null_.put(GL_DEBUG_SOURCE_API_KHR, "GL_DEBUG_SOURCE_API_KHR");
    _null_.put(GL_SET_AMD, "GL_SET_AMD");
    _null_.put(GL_SAMPLER_3D, "GL_SAMPLER_3D");
    _null_.put(GL_MAX_LGPU_GPUS_NVX, "GL_MAX_LGPU_GPUS_NVX");
  }
  private static void _null_8() {
    _null_.put(GL_IMAGE_SCALE_Y_HP, "GL_IMAGE_SCALE_Y_HP");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
    _null_.put(GL_FLOAT16_MAT2x3_AMD, "GL_FLOAT16_MAT2x3_AMD");
    _null_.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
    _null_.put(GL_FLOAT16_MAT2_AMD, "GL_FLOAT16_MAT2_AMD");
    _null_.put(GL_TEXTURE_TYPE_QCOM, "GL_TEXTURE_TYPE_QCOM");
    _null_.put(GL_IMAGE_CUBE_MAP_ARRAY, "GL_IMAGE_CUBE_MAP_ARRAY");
    _null_.put(GL_INDEX_BIT_PGI, "GL_INDEX_BIT_PGI");
    _null_.put(GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI, "GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI");
    _null_.put(GL_SLUMINANCE_ALPHA, "GL_SLUMINANCE_ALPHA");
    _null_.put(GL_COLOR_ARRAY_BUFFER_BINDING, "GL_COLOR_ARRAY_BUFFER_BINDING");
    _null_.put(GL_FALSE, "GL_FALSE");
    _null_.put(GL_TIMESTAMP, "GL_TIMESTAMP");
    _null_.put(GL_SUBSAMPLE_DISTANCE_AMD, "GL_SUBSAMPLE_DISTANCE_AMD");
    _null_.put(GL_SAMPLER_2D, "GL_SAMPLER_2D");
    _null_.put(GL_TEXCOORD4_BIT_PGI, "GL_TEXCOORD4_BIT_PGI");
    _null_.put(GL_SPRITE_MODE_SGIX, "GL_SPRITE_MODE_SGIX");
    _null_.put(GL_REG_1_ATI, "GL_REG_1_ATI");
    _null_.put(GL_UNSIGNED_SHORT_8_8_MESA, "GL_UNSIGNED_SHORT_8_8_MESA");
    _null_.put(GL_MIRROR_CLAMP_TO_EDGE, "GL_MIRROR_CLAMP_TO_EDGE");
    _null_.put(GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM, "GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM");
    _null_.put(GL_TEXT_FRAGMENT_SHADER_ATI, "GL_TEXT_FRAGMENT_SHADER_ATI");
    _null_.put(GL_CLEAR_TEXTURE, "GL_CLEAR_TEXTURE");
    _null_.put(GL_COMPRESSED_INTENSITY, "GL_COMPRESSED_INTENSITY");
    _null_.put(GL_INT, "GL_INT");
    _null_.put(GL_SAMPLER_1D, "GL_SAMPLER_1D");
    _null_.put(GL_FRAMEBUFFER_BINDING, "GL_FRAMEBUFFER_BINDING");
    _null_.put(GL_MEDIUM_INT, "GL_MEDIUM_INT");
    _null_.put(GL_SAMPLES_PASSED, "GL_SAMPLES_PASSED");
    _null_.put(GL_ACTIVE_SUBROUTINE_UNIFORMS, "GL_ACTIVE_SUBROUTINE_UNIFORMS");
    _null_.put(GL_CLIP_DISTANCE1, "GL_CLIP_DISTANCE1");
    _null_.put(GL_CLIP_DISTANCE0, "GL_CLIP_DISTANCE0");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED");
    _null_.put(GL_CLIP_DISTANCE3, "GL_CLIP_DISTANCE3");
    _null_.put(GL_CLIP_DISTANCE2, "GL_CLIP_DISTANCE2");
    _null_.put(GL_ARRAY_OBJECT_OFFSET_ATI, "GL_ARRAY_OBJECT_OFFSET_ATI");
    _null_.put(GL_CLIP_DISTANCE5, "GL_CLIP_DISTANCE5");
    _null_.put(GL_R8I, "GL_R8I");
    _null_.put(GL_CLIP_DISTANCE4, "GL_CLIP_DISTANCE4");
    _null_.put(GL_CLIP_DISTANCE7, "GL_CLIP_DISTANCE7");
    _null_.put(GL_CLIP_DISTANCE6, "GL_CLIP_DISTANCE6");
    _null_.put(GL_MAX_HEIGHT, "GL_MAX_HEIGHT");
    _null_.put(GL_SGX_BINARY_IMG, "GL_SGX_BINARY_IMG");
    _null_.put(GL_VALIDATE_STATUS, "GL_VALIDATE_STATUS");
    _null_.put(GL_INTENSITY16, "GL_INTENSITY16");
    _null_.put(GL_PIXEL_SUBSAMPLE_4242_SGIX, "GL_PIXEL_SUBSAMPLE_4242_SGIX");
    _null_.put(GL_NORMAL_ARRAY_POINTER, "GL_NORMAL_ARRAY_POINTER");
    _null_.put(GL_INTENSITY12, "GL_INTENSITY12");
    _null_.put(GL_REDUCE, "GL_REDUCE");
    _null_.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    _null_.put(GL_TEXTURE_SWIZZLE_RGBA, "GL_TEXTURE_SWIZZLE_RGBA");
    _null_.put(GL_COLOR_BUFFER_BIT2_QCOM, "GL_COLOR_BUFFER_BIT2_QCOM");
    _null_.put(GL_TESS_GEN_VERTEX_ORDER, "GL_TESS_GEN_VERTEX_ORDER");
    _null_.put(GL_YCBCR_MESA, "GL_YCBCR_MESA");
    _null_.put(GL_INT_SAMPLER_CUBE_MAP_ARRAY, "GL_INT_SAMPLER_CUBE_MAP_ARRAY");
    _null_.put(GL_FRAGMENT_DEPTH, "GL_FRAGMENT_DEPTH");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT4_QCOM, "GL_MULTISAMPLE_BUFFER_BIT4_QCOM");
    _null_.put(GL_REG_29_ATI, "GL_REG_29_ATI");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE");
    _null_.put(GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD, "GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD");
    _null_.put(GL_RENDERBUFFER_INTERNAL_FORMAT, "GL_RENDERBUFFER_INTERNAL_FORMAT");
    _null_.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS");
  }
  private static void _null_9() {
    _null_.put(GL_UNPACK_SKIP_IMAGES, "GL_UNPACK_SKIP_IMAGES");
    _null_.put(GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX, "GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX");
    _null_.put(GL_NORMAL_ARRAY_LIST_IBM, "GL_NORMAL_ARRAY_LIST_IBM");
    _null_.put(GL_FIXED_ONLY, "GL_FIXED_ONLY");
    _null_.put(GL_TEXTURE_IMMUTABLE_FORMAT, "GL_TEXTURE_IMMUTABLE_FORMAT");
    _null_.put(GL_STORAGE_CLIENT_APPLE, "GL_STORAGE_CLIENT_APPLE");
    _null_.put(GL_TEXTURE_1D_ARRAY, "GL_TEXTURE_1D_ARRAY");
    _null_.put(GL_TEXTURE_SHADOW, "GL_TEXTURE_SHADOW");
    _null_.put(GL_DEPTH_STENCIL_ATTACHMENT, "GL_DEPTH_STENCIL_ATTACHMENT");
    _null_.put(GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT, "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT");
    _null_.put(GL_POLYGON_STIPPLE, "GL_POLYGON_STIPPLE");
    _null_.put(GL_COMPRESSED_SLUMINANCE, "GL_COMPRESSED_SLUMINANCE");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_GEOMETRY_DEFORMATION_BIT_SGIX, "GL_GEOMETRY_DEFORMATION_BIT_SGIX");
    _null_.put(GL_DETAIL_TEXTURE_2D_BINDING_SGIS, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS");
    _null_.put(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR, "GL_DEBUG_SOURCE_SHADER_COMPILER_KHR");
    _null_.put(GL_QUERY_BUFFER_BARRIER_BIT, "GL_QUERY_BUFFER_BARRIER_BIT");
    _null_.put(GL_HISTOGRAM_ALPHA_SIZE, "GL_HISTOGRAM_ALPHA_SIZE");
    _null_.put(GL_LINE_STRIP_ADJACENCY, "GL_LINE_STRIP_ADJACENCY");
    _null_.put(GL_LUMINANCE16_SNORM, "GL_LUMINANCE16_SNORM");
    _null_.put(GL_CON_16_ATI, "GL_CON_16_ATI");
    _null_.put(GL_UNKNOWN_CONTEXT_RESET_KHR, "GL_UNKNOWN_CONTEXT_RESET_KHR");
    _null_.put(GL_POINT_SIZE_GRANULARITY, "GL_POINT_SIZE_GRANULARITY");
    _null_.put(GL_DRAW_BUFFER12_ATI, "GL_DRAW_BUFFER12_ATI");
    _null_.put(GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD");
    _null_.put(GL_UNIFORM_MATRIX_STRIDE, "GL_UNIFORM_MATRIX_STRIDE");
    _null_.put(GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS");
    _null_.put(GL_POST_COLOR_MATRIX_RED_BIAS, "GL_POST_COLOR_MATRIX_RED_BIAS");
    _null_.put(GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT, "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT");
    _null_.put(GL_DEBUG_SEVERITY_NOTIFICATION_KHR, "GL_DEBUG_SEVERITY_NOTIFICATION_KHR");
    _null_.put(GL_CLIP_PLANE3_IMG, "GL_CLIP_PLANE3_IMG");
    _null_.put(GL_VERTEX_ARRAY_POINTER, "GL_VERTEX_ARRAY_POINTER");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE, "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE");
    _null_.put(GL_TRIANGLE_MESH_SUN, "GL_TRIANGLE_MESH_SUN");
    _null_.put(GL_TEXTURE_1D_STACK_BINDING_MESAX, "GL_TEXTURE_1D_STACK_BINDING_MESAX");
    _null_.put(GL_SAMPLE_MASK_VALUE, "GL_SAMPLE_MASK_VALUE");
    _null_.put(GL_COMPILE_AND_EXECUTE, "GL_COMPILE_AND_EXECUTE");
    _null_.put(GL_LUMINANCE6_ALPHA2, "GL_LUMINANCE6_ALPHA2");
    _null_.put(GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    _null_.put(GL_FRAMEBUFFER_SRGB, "GL_FRAMEBUFFER_SRGB");
    _null_.put(GL_DOT4_ATI, "GL_DOT4_ATI");
    _null_.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT");
    _null_.put(GL_EYE_DISTANCE_TO_POINT_SGIS, "GL_EYE_DISTANCE_TO_POINT_SGIS");
    _null_.put(GL_MODULATE, "GL_MODULATE");
    _null_.put(GL_ALPHA_TEST_QCOM, "GL_ALPHA_TEST_QCOM");
    _null_.put(GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG, "GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG");
    _null_.put(GL_SCREEN, "GL_SCREEN");
    _null_.put(GL_TEXTURE_SAMPLES, "GL_TEXTURE_SAMPLES");
  }
  private static void _null_10() {
    _null_.put(GL_MULTIPLY_KHR, "GL_MULTIPLY_KHR");
    _null_.put(GL_TRANSPOSE_MODELVIEW_MATRIX, "GL_TRANSPOSE_MODELVIEW_MATRIX");
    _null_.put(GL_DRAW_BUFFER5_ATI, "GL_DRAW_BUFFER5_ATI");
    _null_.put(GL_BLUE_BIAS, "GL_BLUE_BIAS");
    _null_.put(GL_AUTO_NORMAL, "GL_AUTO_NORMAL");
    _null_.put(GL_POINT_SIZE_MIN, "GL_POINT_SIZE_MIN");
    _null_.put(GL_NUM_INSTRUCTIONS_PER_PASS_ATI, "GL_NUM_INSTRUCTIONS_PER_PASS_ATI");
    _null_.put(GL_CULL_VERTEX_IBM, "GL_CULL_VERTEX_IBM");
    _null_.put(GL_MIPMAP, "GL_MIPMAP");
    _null_.put(GL_SINGLE_COLOR, "GL_SINGLE_COLOR");
    _null_.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_DEPTH, "GL_UNPACK_COMPRESSED_BLOCK_DEPTH");
    _null_.put(GL_NUM_SHADING_LANGUAGE_VERSIONS, "GL_NUM_SHADING_LANGUAGE_VERSIONS");
    _null_.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
    _null_.put(GL_ALPHA8_SNORM, "GL_ALPHA8_SNORM");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS, "GL_POST_COLOR_MATRIX_ALPHA_BIAS");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER");
    _null_.put(GL_MIN_FRAGMENT_INTERPOLATION_OFFSET, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET");
    _null_.put(GL_TEXTURE_INTERNAL_FORMAT_QCOM, "GL_TEXTURE_INTERNAL_FORMAT_QCOM");
    _null_.put(GL_SIGNED_NORMALIZED, "GL_SIGNED_NORMALIZED");
    _null_.put(GL_MAX_FRAGMENT_INTERPOLATION_OFFSET, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET");
    _null_.put(GL_DELETE_STATUS, "GL_DELETE_STATUS");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT3_RGBA, "GL_VIEW_CLASS_S3TC_DXT3_RGBA");
    _null_.put(GL_SAMPLE_PATTERN_SGIS, "GL_SAMPLE_PATTERN_SGIS");
    _null_.put(GL_DRAW_BUFFER1_ATI, "GL_DRAW_BUFFER1_ATI");
    _null_.put(GL_R11F_G11F_B10F_APPLE, "GL_R11F_G11F_B10F_APPLE");
    _null_.put(GL_MAX_VERTEX_HINT_PGI, "GL_MAX_VERTEX_HINT_PGI");
    _null_.put(GL_UNSIGNED_INT_IMAGE_1D_ARRAY, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY");
    _null_.put(GL_PIXEL_MAP_R_TO_R, "GL_PIXEL_MAP_R_TO_R");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_APPLE, "GL_VERTEX_ATTRIB_MAP1_APPLE");
    _null_.put(GL_SAMPLE_COVERAGE_VALUE, "GL_SAMPLE_COVERAGE_VALUE");
    _null_.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    _null_.put(GL_ALPHA_INTEGER, "GL_ALPHA_INTEGER");
    _null_.put(GL_UNKNOWN_CONTEXT_RESET, "GL_UNKNOWN_CONTEXT_RESET");
    _null_.put(GL_MAX_PROJECTION_STACK_DEPTH, "GL_MAX_PROJECTION_STACK_DEPTH");
    _null_.put(GL_TOP_LEVEL_ARRAY_STRIDE, "GL_TOP_LEVEL_ARRAY_STRIDE");
    _null_.put(GL_R3_G3_B2, "GL_R3_G3_B2");
    _null_.put(GL_LINE_STRIP, "GL_LINE_STRIP");
    _null_.put(GL_QUERY, "GL_QUERY");
    _null_.put(GL_TEXTURE_ENV_COLOR, "GL_TEXTURE_ENV_COLOR");
    _null_.put(GL_SAMPLES_SGIS, "GL_SAMPLES_SGIS");
    _null_.put(GL_UPPER_LEFT, "GL_UPPER_LEFT");
    _null_.put(GL_INNOCENT_CONTEXT_RESET_KHR, "GL_INNOCENT_CONTEXT_RESET_KHR");
    _null_.put(GL_DEBUG_TYPE_OTHER_KHR, "GL_DEBUG_TYPE_OTHER_KHR");
    _null_.put(GL_DUAL_LUMINANCE4_SGIS, "GL_DUAL_LUMINANCE4_SGIS");
    _null_.put(GL_COLOR_BUFFER_BIT5_QCOM, "GL_COLOR_BUFFER_BIT5_QCOM");
    _null_.put(GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS, "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_RGBA_FLOAT16_ATI, "GL_RGBA_FLOAT16_ATI");
    _null_.put(GL_TEXTURE_LUMINANCE_SIZE, "GL_TEXTURE_LUMINANCE_SIZE");
    _null_.put(GL_RESET_NOTIFICATION_STRATEGY, "GL_RESET_NOTIFICATION_STRATEGY");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x6, "GL_COMPRESSED_RGBA_ASTC_10x6");
    _null_.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
  }
  private static void _null_11() {
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x8, "GL_COMPRESSED_RGBA_ASTC_10x8");
    _null_.put(GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x5, "GL_COMPRESSED_RGBA_ASTC_10x5");
    _null_.put(GL_LIST_BIT, "GL_LIST_BIT");
    _null_.put(GL_ELEMENT_ARRAY_BUFFER, "GL_ELEMENT_ARRAY_BUFFER");
    _null_.put(GL_SPOT_CUTOFF, "GL_SPOT_CUTOFF");
    _null_.put(GL_TEXTURE_COLOR_WRITEMASK_SGIS, "GL_TEXTURE_COLOR_WRITEMASK_SGIS");
    _null_.put(GL_DYNAMIC_COPY, "GL_DYNAMIC_COPY");
    _null_.put(GL_CON_20_ATI, "GL_CON_20_ATI");
    _null_.put(GL_OBJECT_POINT_SGIS, "GL_OBJECT_POINT_SGIS");
    _null_.put(GL_ALPHA_MAX_CLAMP_INGR, "GL_ALPHA_MAX_CLAMP_INGR");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN, "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN");
    _null_.put(GL_DEPTH_CLAMP_FAR_AMD, "GL_DEPTH_CLAMP_FAR_AMD");
    _null_.put(GL_TRANSFORM_FEEDBACK_ACTIVE, "GL_TRANSFORM_FEEDBACK_ACTIVE");
    _null_.put(GL_AND_INVERTED, "GL_AND_INVERTED");
    _null_.put(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_TEXTURE_BUFFER_OFFSET, "GL_TEXTURE_BUFFER_OFFSET");
    _null_.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
    _null_.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    _null_.put(GL_PROJECTION, "GL_PROJECTION");
    _null_.put(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH");
    _null_.put(GL_2PASS_1_SGIS, "GL_2PASS_1_SGIS");
    _null_.put(GL_LINEAR, "GL_LINEAR");
    _null_.put(GL_ACTIVE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_UNIFORM_MAX_LENGTH");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x8_KHR, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR");
    _null_.put(GL_INDEX_CLEAR_VALUE, "GL_INDEX_CLEAR_VALUE");
    _null_.put(GL_RGB9_E5_APPLE, "GL_RGB9_E5_APPLE");
    _null_.put(GL_BGRA_INTEGER, "GL_BGRA_INTEGER");
    _null_.put(GL_REG_16_ATI, "GL_REG_16_ATI");
    _null_.put(GL_SGX_PROGRAM_BINARY_IMG, "GL_SGX_PROGRAM_BINARY_IMG");
    _null_.put(GL_HSL_SATURATION, "GL_HSL_SATURATION");
    _null_.put(GL_REPLICATE_BORDER, "GL_REPLICATE_BORDER");
    _null_.put(GL_TEXTURE_2D_STACK_BINDING_MESAX, "GL_TEXTURE_2D_STACK_BINDING_MESAX");
    _null_.put(GL_UNSIGNED_SHORT_5_6_5, "GL_UNSIGNED_SHORT_5_6_5");
    _null_.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    _null_.put(GL_TEXTURE_VIEW_MIN_LAYER, "GL_TEXTURE_VIEW_MIN_LAYER");
    _null_.put(GL_ALPHA_FLOAT16_APPLE, "GL_ALPHA_FLOAT16_APPLE");
    _null_.put(GL_CLAMP_FRAGMENT_COLOR, "GL_CLAMP_FRAGMENT_COLOR");
    _null_.put(GL_MAX_TESS_GEN_LEVEL, "GL_MAX_TESS_GEN_LEVEL");
    _null_.put(GL_MAX_COMPUTE_ATOMIC_COUNTERS, "GL_MAX_COMPUTE_ATOMIC_COUNTERS");
    _null_.put(GL_AND, "GL_AND");
    _null_.put(GL_UNIFORM_BUFFER_SIZE, "GL_UNIFORM_BUFFER_SIZE");
    _null_.put(GL_BACK, "GL_BACK");
    _null_.put(GL_COLOR_ARRAY_TYPE, "GL_COLOR_ARRAY_TYPE");
    _null_.put(GL_TEXTURE_MAX_LOD_SGIS, "GL_TEXTURE_MAX_LOD_SGIS");
    _null_.put(GL_TEXTURE_BINDING_CUBE_MAP, "GL_TEXTURE_BINDING_CUBE_MAP");
    _null_.put(GL_PIXEL_SUBSAMPLE_4444_SGIX, "GL_PIXEL_SUBSAMPLE_4444_SGIX");
    _null_.put(GL_LOAD, "GL_LOAD");
    _null_.put(GL_4PASS_0_SGIS, "GL_4PASS_0_SGIS");
    _null_.put(GL_NEGATIVE_ONE_TO_ONE, "GL_NEGATIVE_ONE_TO_ONE");
    _null_.put(GL_T2F_V3F, "GL_T2F_V3F");
  }
  private static void _null_12() {
    _null_.put(GL_CONTEXT_COMPATIBILITY_PROFILE_BIT, "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT");
    _null_.put(GL_READ_FRAMEBUFFER_APPLE, "GL_READ_FRAMEBUFFER_APPLE");
    _null_.put(GL_RASTER_POSITION_UNCLIPPED_IBM, "GL_RASTER_POSITION_UNCLIPPED_IBM");
    _null_.put(GL_LOGIC_OP_MODE, "GL_LOGIC_OP_MODE");
    _null_.put(GL_PACK_SKIP_IMAGES, "GL_PACK_SKIP_IMAGES");
    _null_.put(GL_VIRTUAL_PAGE_SIZE_Y_AMD, "GL_VIRTUAL_PAGE_SIZE_Y_AMD");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC, "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC");
    _null_.put(GL_ARRAY_STRIDE, "GL_ARRAY_STRIDE");
    _null_.put(GL_R1UI_C4UB_V3F_SUN, "GL_R1UI_C4UB_V3F_SUN");
    _null_.put(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV");
    _null_.put(GL_MAX_DRAW_BUFFERS, "GL_MAX_DRAW_BUFFERS");
    _null_.put(GL_TEXTURE_BORDER, "GL_TEXTURE_BORDER");
    _null_.put(GL_DRAW_BUFFER, "GL_DRAW_BUFFER");
    _null_.put(GL_COMPRESSED_RED_RGTC1, "GL_COMPRESSED_RED_RGTC1");
    _null_.put(GL_RENDERBUFFER_ALPHA_SIZE, "GL_RENDERBUFFER_ALPHA_SIZE");
    _null_.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    _null_.put(GL_FRAGMENT_SUBROUTINE, "GL_FRAGMENT_SUBROUTINE");
    _null_.put(GL_CON_7_ATI, "GL_CON_7_ATI");
    _null_.put(GL_ALLOW_DRAW_MEM_HINT_PGI, "GL_ALLOW_DRAW_MEM_HINT_PGI");
    _null_.put(GL_MAX_COMPUTE_SHARED_MEMORY_SIZE, "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE");
    _null_.put(GL_UNSIGNED_INT_24_8_MESA, "GL_UNSIGNED_INT_24_8_MESA");
    _null_.put(GL_DIFFERENCE_KHR, "GL_DIFFERENCE_KHR");
    _null_.put(GL_R1UI_N3F_V3F_SUN, "GL_R1UI_N3F_V3F_SUN");
    _null_.put(GL_ACTIVE_PROGRAM, "GL_ACTIVE_PROGRAM");
    _null_.put(GL_PIXEL_MAP_I_TO_B_SIZE, "GL_PIXEL_MAP_I_TO_B_SIZE");
    _null_.put(GL_DISPLAY_LIST, "GL_DISPLAY_LIST");
    _null_.put(GL_COLOR_ATTACHMENT0, "GL_COLOR_ATTACHMENT0");
    _null_.put(GL_MAX_FRAMEZOOM_FACTOR_SGIX, "GL_MAX_FRAMEZOOM_FACTOR_SGIX");
    _null_.put(GL_REG_9_ATI, "GL_REG_9_ATI");
    _null_.put(GL_COLOR_ATTACHMENT4, "GL_COLOR_ATTACHMENT4");
    _null_.put(GL_QUERY_RESULT_NO_WAIT, "GL_QUERY_RESULT_NO_WAIT");
    _null_.put(GL_COLOR_ATTACHMENT3, "GL_COLOR_ATTACHMENT3");
    _null_.put(GL_COLOR_ATTACHMENT2, "GL_COLOR_ATTACHMENT2");
    _null_.put(GL_COMPRESSED_RGB8_ETC2, "GL_COMPRESSED_RGB8_ETC2");
    _null_.put(GL_COLOR_ATTACHMENT1, "GL_COLOR_ATTACHMENT1");
    _null_.put(GL_COLOR_ATTACHMENT8, "GL_COLOR_ATTACHMENT8");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_SIZE, "GL_ATOMIC_COUNTER_BUFFER_SIZE");
    _null_.put(GL_COLOR_ATTACHMENT7, "GL_COLOR_ATTACHMENT7");
    _null_.put(GL_COLOR_ATTACHMENT6, "GL_COLOR_ATTACHMENT6");
    _null_.put(GL_COLOR_ATTACHMENT5, "GL_COLOR_ATTACHMENT5");
    _null_.put(GL_CLIP_DISTANCE0_APPLE, "GL_CLIP_DISTANCE0_APPLE");
    _null_.put(GL_COMPUTE_SUBROUTINE, "GL_COMPUTE_SUBROUTINE");
    _null_.put(GL_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET");
    _null_.put(GL_NUM_PROGRAM_BINARY_FORMATS, "GL_NUM_PROGRAM_BINARY_FORMATS");
    _null_.put(GL_LINEAR_MIPMAP_LINEAR, "GL_LINEAR_MIPMAP_LINEAR");
    _null_.put(GL_ALPHA16, "GL_ALPHA16");
    _null_.put(GL_NEGATE_BIT_ATI, "GL_NEGATE_BIT_ATI");
    _null_.put(GL_CUBIC_MIPMAP_LINEAR_IMG, "GL_CUBIC_MIPMAP_LINEAR_IMG");
    _null_.put(GL_VERTEX_SUBROUTINE, "GL_VERTEX_SUBROUTINE");
    _null_.put(GL_ALPHA12, "GL_ALPHA12");
    _null_.put(GL_INTERNALFORMAT_SHARED_SIZE, "GL_INTERNALFORMAT_SHARED_SIZE");
    _null_.put(GL_GEOMETRY_TEXTURE, "GL_GEOMETRY_TEXTURE");
    _null_.put(GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX, "GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX");
    _null_.put(GL_NEAREST_MIPMAP_NEAREST, "GL_NEAREST_MIPMAP_NEAREST");
    _null_.put(GL_OBJECT_DISTANCE_TO_LINE_SGIS, "GL_OBJECT_DISTANCE_TO_LINE_SGIS");
    _null_.put(GL_COLOR_ATTACHMENT9, "GL_COLOR_ATTACHMENT9");
    _null_.put(GL_LUMINANCE_FLOAT16_ATI, "GL_LUMINANCE_FLOAT16_ATI");
    _null_.put(GL_IMAGE_CLASS_1_X_8, "GL_IMAGE_CLASS_1_X_8");
    _null_.put(GL_TRACE_ARRAYS_BIT_MESA, "GL_TRACE_ARRAYS_BIT_MESA");
  }
  private static void _null_13() {
    _null_.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    _null_.put(GL_SPOT_DIRECTION, "GL_SPOT_DIRECTION");
    _null_.put(GL_LUMINANCE16_ALPHA16, "GL_LUMINANCE16_ALPHA16");
    _null_.put(GL_LIGHT6, "GL_LIGHT6");
    _null_.put(GL_LIGHT7, "GL_LIGHT7");
    _null_.put(GL_LIGHT4, "GL_LIGHT4");
    _null_.put(GL_BLUE_BITS, "GL_BLUE_BITS");
    _null_.put(GL_LIGHT5, "GL_LIGHT5");
    _null_.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    _null_.put(GL_TEXTURE_2D_STACK_MESAX, "GL_TEXTURE_2D_STACK_MESAX");
    _null_.put(GL_LIGHT2, "GL_LIGHT2");
    _null_.put(GL_LIGHT3, "GL_LIGHT3");
    _null_.put(GL_LIGHT0, "GL_LIGHT0");
    _null_.put(GL_LIGHT1, "GL_LIGHT1");
    _null_.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_RED, "GL_RED");
    _null_.put(GL_CLIP_DISTANCE5_APPLE, "GL_CLIP_DISTANCE5_APPLE");
    _null_.put(GL_CONVOLUTION_WIDTH, "GL_CONVOLUTION_WIDTH");
    _null_.put(GL_BROWSER_DEFAULT_WEBGL, "GL_BROWSER_DEFAULT_WEBGL");
    _null_.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    _null_.put(GL_CONTEXT_LOST_KHR, "GL_CONTEXT_LOST_KHR");
    _null_.put(GL_DUAL_ALPHA12_SGIS, "GL_DUAL_ALPHA12_SGIS");
    _null_.put(GL_DEBUG_OUTPUT_KHR, "GL_DEBUG_OUTPUT_KHR");
    _null_.put(GL_ZERO_TO_ONE, "GL_ZERO_TO_ONE");
    _null_.put(GL_ADD, "GL_ADD");
    _null_.put(GL_DOUBLE, "GL_DOUBLE");
    _null_.put(GL_UNSIGNED_SHORT_8_8_REV_APPLE, "GL_UNSIGNED_SHORT_8_8_REV_APPLE");
    _null_.put(GL_QUERY_WAIT_INVERTED, "GL_QUERY_WAIT_INVERTED");
    _null_.put(GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET");
    _null_.put(GL_VERTEX_STREAM7_ATI, "GL_VERTEX_STREAM7_ATI");
    _null_.put(GL_PACK_REVERSE_ROW_ORDER_ANGLE, "GL_PACK_REVERSE_ROW_ORDER_ANGLE");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS");
    _null_.put(GL_HSL_COLOR, "GL_HSL_COLOR");
    _null_.put(GL_MINOR_VERSION, "GL_MINOR_VERSION");
    _null_.put(GL_QUERY_BY_REGION_WAIT, "GL_QUERY_BY_REGION_WAIT");
    _null_.put(GL_TEXTURE_BINDING_1D_ARRAY, "GL_TEXTURE_BINDING_1D_ARRAY");
    _null_.put(GL_STENCIL_BUFFER_BIT6_QCOM, "GL_STENCIL_BUFFER_BIT6_QCOM");
    _null_.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    _null_.put(GL_RG8, "GL_RG8");
    _null_.put(GL_SLIM12S_SGIX, "GL_SLIM12S_SGIX");
    _null_.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    _null_.put(GL_RGB, "GL_RGB");
    _null_.put(GL_4PASS_3_SGIS, "GL_4PASS_3_SGIS");
    _null_.put(GL_TRACE_TEXTURES_BIT_MESA, "GL_TRACE_TEXTURES_BIT_MESA");
    _null_.put(GL_MAT_EMISSION_BIT_PGI, "GL_MAT_EMISSION_BIT_PGI");
    _null_.put(GL_VERTEX_ARRAY_BINDING, "GL_VERTEX_ARRAY_BINDING");
    _null_.put(GL_LUMINANCE_ALPHA_FLOAT16_ATI, "GL_LUMINANCE_ALPHA_FLOAT16_ATI");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE");
    _null_.put(GL_PIXEL_TEX_GEN_Q_CEILING_SGIX, "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX");
    _null_.put(GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS, "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS");
    _null_.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE");
    _null_.put(GL_CLIP_DISTANCE4_APPLE, "GL_CLIP_DISTANCE4_APPLE");
    _null_.put(GL_CONSTANT_ATTENUATION, "GL_CONSTANT_ATTENUATION");
    _null_.put(GL_OCCLUSION_TEST_HP, "GL_OCCLUSION_TEST_HP");
  }
  private static void _null_14() {
    _null_.put(GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI, "GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI");
    _null_.put(GL_VERTEX_BINDING_STRIDE, "GL_VERTEX_BINDING_STRIDE");
    _null_.put(GL_POST_CONVOLUTION_BLUE_SCALE, "GL_POST_CONVOLUTION_BLUE_SCALE");
    _null_.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE, "GL_MAX_CUBE_MAP_TEXTURE_SIZE");
    _null_.put(GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD, "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD");
    _null_.put(GL_PIXEL_BUFFER_BARRIER_BIT, "GL_PIXEL_BUFFER_BARRIER_BIT");
    _null_.put(GL_DARKEN_KHR, "GL_DARKEN_KHR");
    _null_.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_CURRENT_RASTER_SECONDARY_COLOR, "GL_CURRENT_RASTER_SECONDARY_COLOR");
    _null_.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES");
    _null_.put(GL_T4F_C4F_N3F_V4F, "GL_T4F_C4F_N3F_V4F");
    _null_.put(GL_SRC2_ALPHA, "GL_SRC2_ALPHA");
    _null_.put(GL_RGBA16UI, "GL_RGBA16UI");
    _null_.put(GL_RASTERIZER_DISCARD, "GL_RASTERIZER_DISCARD");
    _null_.put(GL_LUMINANCE_ALPHA_FLOAT16_APPLE, "GL_LUMINANCE_ALPHA_FLOAT16_APPLE");
    _null_.put(GL_MAX_DEBUG_LOGGED_MESSAGES_AMD, "GL_MAX_DEBUG_LOGGED_MESSAGES_AMD");
    _null_.put(GL_SHADER_COMPILER, "GL_SHADER_COMPILER");
    _null_.put(GL_MAX_CLIPMAP_DEPTH_SGIX, "GL_MAX_CLIPMAP_DEPTH_SGIX");
    _null_.put(GL_TEXTURE_4D_BINDING_SGIS, "GL_TEXTURE_4D_BINDING_SGIS");
    _null_.put(GL_TESS_CONTROL_SUBROUTINE, "GL_TESS_CONTROL_SUBROUTINE");
    _null_.put(GL_COMPUTE_SHADER, "GL_COMPUTE_SHADER");
    _null_.put(GL_DEBUG_SEVERITY_MEDIUM_AMD, "GL_DEBUG_SEVERITY_MEDIUM_AMD");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE");
    _null_.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    _null_.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR");
    _null_.put(GL_DEBUG_SEVERITY_HIGH, "GL_DEBUG_SEVERITY_HIGH");
    _null_.put(GL_POLYGON_OFFSET_FACTOR, "GL_POLYGON_OFFSET_FACTOR");
    _null_.put(GL_EYE_POINT_SGIS, "GL_EYE_POINT_SGIS");
    _null_.put(GL_MAX_ASYNC_TEX_IMAGE_SGIX, "GL_MAX_ASYNC_TEX_IMAGE_SGIX");
    _null_.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    _null_.put(GL_KEEP, "GL_KEEP");
    _null_.put(GL_ACTIVE_SUBROUTINE_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_MAX_LENGTH");
    _null_.put(GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG, "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG");
    _null_.put(GL_CONDITION_SATISFIED_APPLE, "GL_CONDITION_SATISFIED_APPLE");
    _null_.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE, "GL_PROXY_TEXTURE_2D_MULTISAMPLE");
    _null_.put(GL_STENCIL_BUFFER_BIT3_QCOM, "GL_STENCIL_BUFFER_BIT3_QCOM");
    _null_.put(GL_TEXTURE_MEMORY_LAYOUT_INTEL, "GL_TEXTURE_MEMORY_LAYOUT_INTEL");
    _null_.put(GL_UNPACK_IMAGE_HEIGHT, "GL_UNPACK_IMAGE_HEIGHT");
    _null_.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR");
    _null_.put(GL_VIRTUAL_PAGE_SIZE_X_AMD, "GL_VIRTUAL_PAGE_SIZE_X_AMD");
    _null_.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    _null_.put(GL_VERTEX_ARRAY_TYPE, "GL_VERTEX_ARRAY_TYPE");
    _null_.put(GL_QUERY_RESULT_NO_WAIT_AMD, "GL_QUERY_RESULT_NO_WAIT_AMD");
    _null_.put(GL_INT_SAMPLER_3D, "GL_INT_SAMPLER_3D");
  }
  private static void _null_15() {
    _null_.put(GL_VERTEX_ID_SWIZZLE_AMD, "GL_VERTEX_ID_SWIZZLE_AMD");
    _null_.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    _null_.put(GL_DUAL_LUMINANCE_ALPHA8_SGIS, "GL_DUAL_LUMINANCE_ALPHA8_SGIS");
    _null_.put(GL_COMPARE_REF_TO_TEXTURE, "GL_COMPARE_REF_TO_TEXTURE");
    _null_.put(GL_INTERLACE_OML, "GL_INTERLACE_OML");
    _null_.put(GL_REG_6_ATI, "GL_REG_6_ATI");
    _null_.put(GL_DEBUG_TYPE_PORTABILITY_KHR, "GL_DEBUG_TYPE_PORTABILITY_KHR");
    _null_.put(GL_MAX_VARYING_FLOATS, "GL_MAX_VARYING_FLOATS");
    _null_.put(GL_LUMINANCE_ALPHA_FLOAT32_APPLE, "GL_LUMINANCE_ALPHA_FLOAT32_APPLE");
    _null_.put(GL_MAX_ELEMENTS_VERTICES, "GL_MAX_ELEMENTS_VERTICES");
    _null_.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
    _null_.put(GL_TRANSFORM_HINT_APPLE, "GL_TRANSFORM_HINT_APPLE");
    _null_.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    _null_.put(GL_INT_SAMPLER_2D, "GL_INT_SAMPLER_2D");
    _null_.put(GL_TESS_EVALUATION_SHADER_INVOCATIONS, "GL_TESS_EVALUATION_SHADER_INVOCATIONS");
    _null_.put(GL_R8UI, "GL_R8UI");
    _null_.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_LINEAR_SHARPEN_ALPHA_SGIS, "GL_LINEAR_SHARPEN_ALPHA_SGIS");
    _null_.put(GL_HINT_BIT, "GL_HINT_BIT");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
    _null_.put(GL_DEBUG_LOGGED_MESSAGES_AMD, "GL_DEBUG_LOGGED_MESSAGES_AMD");
    _null_.put(GL_EYE_DISTANCE_TO_LINE_SGIS, "GL_EYE_DISTANCE_TO_LINE_SGIS");
    _null_.put(GL_SOURCE1_RGB, "GL_SOURCE1_RGB");
    _null_.put(GL_ALPHA_TEST, "GL_ALPHA_TEST");
    _null_.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
    _null_.put(GL_T2F_C4F_N3F_V3F, "GL_T2F_C4F_N3F_V3F");
    _null_.put(GL_DOUBLE_MAT4x2, "GL_DOUBLE_MAT4x2");
    _null_.put(GL_DOUBLE_MAT4x3, "GL_DOUBLE_MAT4x3");
    _null_.put(GL_INTERNALFORMAT_RED_SIZE, "GL_INTERNALFORMAT_RED_SIZE");
    _null_.put(GL_TEXTURE_RED_TYPE, "GL_TEXTURE_RED_TYPE");
    _null_.put(GL_DEBUG_CALLBACK_USER_PARAM, "GL_DEBUG_CALLBACK_USER_PARAM");
    _null_.put(GL_FRAMEZOOM_FACTOR_SGIX, "GL_FRAMEZOOM_FACTOR_SGIX");
    _null_.put(GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM, "GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM");
    _null_.put(GL_MAX_SHADER_COMPILER_THREADS_KHR, "GL_MAX_SHADER_COMPILER_THREADS_KHR");
    _null_.put(GL_DEBUG_TYPE_ERROR_KHR, "GL_DEBUG_TYPE_ERROR_KHR");
    _null_.put(GL_REPLACEMENT_CODE_SUN, "GL_REPLACEMENT_CODE_SUN");
    _null_.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    _null_.put(GL_RENDER, "GL_RENDER");
    _null_.put(GL_CON_0_ATI, "GL_CON_0_ATI");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_LAYERS, "GL_FRAMEBUFFER_DEFAULT_LAYERS");
    _null_.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X, "GL_TEXTURE_CUBE_MAP_POSITIVE_X");
    _null_.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y");
    _null_.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_HEIGHT, "GL_PACK_COMPRESSED_BLOCK_HEIGHT");
    _null_.put(GL_FETCH_PER_SAMPLE_ARM, "GL_FETCH_PER_SAMPLE_ARM");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
  }
  private static void _null_16() {
    _null_.put(GL_IMAGE_BINDING_FORMAT, "GL_IMAGE_BINDING_FORMAT");
    _null_.put(GL_COLORBURN, "GL_COLORBURN");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER");
    _null_.put(GL_STORAGE_SHARED_APPLE, "GL_STORAGE_SHARED_APPLE");
    _null_.put(GL_DEPTH_BUFFER_BIT1_QCOM, "GL_DEPTH_BUFFER_BIT1_QCOM");
    _null_.put(GL_VERTEX23_BIT_PGI, "GL_VERTEX23_BIT_PGI");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x6, "GL_COMPRESSED_RGBA_ASTC_6x6");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x5, "GL_COMPRESSED_RGBA_ASTC_6x5");
    _null_.put(GL_INTENSITY_FLOAT16_ATI, "GL_INTENSITY_FLOAT16_ATI");
    _null_.put(GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX");
    _null_.put(GL_SAMPLE_BUFFERS_3DFX, "GL_SAMPLE_BUFFERS_3DFX");
    _null_.put(GL_POINT_FADE_THRESHOLD_SIZE, "GL_POINT_FADE_THRESHOLD_SIZE");
    _null_.put(GL_YCBCR_422_APPLE, "GL_YCBCR_422_APPLE");
    _null_.put(GL_SAMPLER_BUFFER, "GL_SAMPLER_BUFFER");
    _null_.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    _null_.put(GL_DRAW_FRAMEBUFFER_BINDING_ANGLE, "GL_DRAW_FRAMEBUFFER_BINDING_ANGLE");
    _null_.put(GL_CLIENT_ACTIVE_TEXTURE, "GL_CLIENT_ACTIVE_TEXTURE");
    _null_.put(GL_LINES, "GL_LINES");
    _null_.put(GL_SELECT, "GL_SELECT");
    _null_.put(GL_COMPRESSED_ALPHA, "GL_COMPRESSED_ALPHA");
    _null_.put(GL_RGB_FLOAT32_ATI, "GL_RGB_FLOAT32_ATI");
    _null_.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY");
    _null_.put(GL_PERSPECTIVE_CORRECTION_HINT, "GL_PERSPECTIVE_CORRECTION_HINT");
    _null_.put(GL_ALPHA_BITS, "GL_ALPHA_BITS");
    _null_.put(GL_RGBA8_SNORM, "GL_RGBA8_SNORM");
    _null_.put(GL_PROGRAM_BINARY_LENGTH, "GL_PROGRAM_BINARY_LENGTH");
    _null_.put(GL_ONE_MINUS_SRC1_ALPHA, "GL_ONE_MINUS_SRC1_ALPHA");
    _null_.put(GL_INT_SAMPLER_1D, "GL_INT_SAMPLER_1D");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6");
    _null_.put(GL_FRAGMENT_SUBROUTINE_UNIFORM, "GL_FRAGMENT_SUBROUTINE_UNIFORM");
    _null_.put(GL_TEXTURE_COORD_ARRAY_TYPE, "GL_TEXTURE_COORD_ARRAY_TYPE");
    _null_.put(GL_PIXEL_UNPACK_BUFFER, "GL_PIXEL_UNPACK_BUFFER");
    _null_.put(GL_SAMPLER_BUFFER_AMD, "GL_SAMPLER_BUFFER_AMD");
    _null_.put(GL_FOG_MODE, "GL_FOG_MODE");
    _null_.put(GL_LOWER_LEFT, "GL_LOWER_LEFT");
    _null_.put(GL_FORMAT_SUBSAMPLE_24_24_OML, "GL_FORMAT_SUBSAMPLE_24_24_OML");
    _null_.put(GL_IMAGE_PIXEL_TYPE, "GL_IMAGE_PIXEL_TYPE");
    _null_.put(GL_RENDERBUFFER_HEIGHT, "GL_RENDERBUFFER_HEIGHT");
    _null_.put(GL_POLYGON_OFFSET_FILL, "GL_POLYGON_OFFSET_FILL");
    _null_.put(GL_FOG_COORDINATE_ARRAY, "GL_FOG_COORDINATE_ARRAY");
    _null_.put(GL_NORMALIZE, "GL_NORMALIZE");
    _null_.put(GL_FOVEATION_ENABLE_BIT_QCOM, "GL_FOVEATION_ENABLE_BIT_QCOM");
    _null_.put(GL_GEOMETRY_SHADER_INVOCATIONS, "GL_GEOMETRY_SHADER_INVOCATIONS");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR, "GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR");
    _null_.put(GL_DEPTH_RENDERABLE, "GL_DEPTH_RENDERABLE");
    _null_.put(GL_SAMPLER_2D_SHADOW, "GL_SAMPLER_2D_SHADOW");
    _null_.put(GL_PIXEL_MAP_R_TO_R_SIZE, "GL_PIXEL_MAP_R_TO_R_SIZE");
    _null_.put(GL_STENCIL_BACK_OP_VALUE_AMD, "GL_STENCIL_BACK_OP_VALUE_AMD");
  }
  private static void _null_17() {
    _null_.put(GL_RESAMPLE_AVERAGE_OML, "GL_RESAMPLE_AVERAGE_OML");
    _null_.put(GL_ACTIVE_SUBROUTINES, "GL_ACTIVE_SUBROUTINES");
    _null_.put(GL_T2F_C4UB_V3F, "GL_T2F_C4UB_V3F");
    _null_.put(GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE, "GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE");
    _null_.put(GL_RGB565, "GL_RGB565");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_SIZE, "GL_VERTEX_ATTRIB_ARRAY_SIZE");
    _null_.put(GL_VERTEX_ELEMENT_SWIZZLE_AMD, "GL_VERTEX_ELEMENT_SWIZZLE_AMD");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_WIDTH, "GL_UNPACK_COMPRESSED_BLOCK_WIDTH");
    _null_.put(GL_PIXEL_SUBSAMPLE_2424_SGIX, "GL_PIXEL_SUBSAMPLE_2424_SGIX");
    _null_.put(GL_VERTEX_STREAM3_ATI, "GL_VERTEX_STREAM3_ATI");
    _null_.put(GL_MINMAX_FORMAT, "GL_MINMAX_FORMAT");
    _null_.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS");
    _null_.put(GL_BACK_NORMALS_HINT_PGI, "GL_BACK_NORMALS_HINT_PGI");
    _null_.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    _null_.put(GL_PIXEL_PACK_BUFFER, "GL_PIXEL_PACK_BUFFER");
    _null_.put(GL_INTERNALFORMAT_BLUE_TYPE, "GL_INTERNALFORMAT_BLUE_TYPE");
    _null_.put(GL_SRGB_WRITE, "GL_SRGB_WRITE");
    _null_.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    _null_.put(GL_UNSIGNED_SHORT_5_5_5_1, "GL_UNSIGNED_SHORT_5_5_5_1");
    _null_.put(GL_MAX_FRAMEBUFFER_WIDTH, "GL_MAX_FRAMEBUFFER_WIDTH");
    _null_.put(GL_TIMEOUT_EXPIRED, "GL_TIMEOUT_EXPIRED");
    _null_.put(GL_MAX_ELEMENT_INDEX, "GL_MAX_ELEMENT_INDEX");
    _null_.put(GL_TESS_GEN_SPACING, "GL_TESS_GEN_SPACING");
    _null_.put(GL_OPERAND0_ALPHA, "GL_OPERAND0_ALPHA");
    _null_.put(GL_3DC_X_AMD, "GL_3DC_X_AMD");
    _null_.put(GL_SYNC_FENCE_APPLE, "GL_SYNC_FENCE_APPLE");
    _null_.put(GL_DUAL_INTENSITY12_SGIS, "GL_DUAL_INTENSITY12_SGIS");
    _null_.put(GL_REG_13_ATI, "GL_REG_13_ATI");
    _null_.put(GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX, "GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX");
    _null_.put(GL_UNSIGNED_NORMALIZED, "GL_UNSIGNED_NORMALIZED");
    _null_.put(GL_COLOR_ATTACHMENT15, "GL_COLOR_ATTACHMENT15");
    _null_.put(GL_RED_MIN_CLAMP_INGR, "GL_RED_MIN_CLAMP_INGR");
    _null_.put(GL_COLOR_ATTACHMENT14, "GL_COLOR_ATTACHMENT14");
    _null_.put(GL_DEPTH_CLAMP_NEAR_AMD, "GL_DEPTH_CLAMP_NEAR_AMD");
    _null_.put(GL_COLOR_ATTACHMENT17, "GL_COLOR_ATTACHMENT17");
    _null_.put(GL_COLOR_ATTACHMENT16, "GL_COLOR_ATTACHMENT16");
    _null_.put(GL_LEQUAL, "GL_LEQUAL");
    _null_.put(GL_VIEW_CLASS_BPTC_UNORM, "GL_VIEW_CLASS_BPTC_UNORM");
    _null_.put(GL_COLOR_ATTACHMENT11, "GL_COLOR_ATTACHMENT11");
    _null_.put(GL_COLOR_ATTACHMENT10, "GL_COLOR_ATTACHMENT10");
    _null_.put(GL_COLOR_ATTACHMENT13, "GL_COLOR_ATTACHMENT13");
    _null_.put(GL_COLOR_ATTACHMENT12, "GL_COLOR_ATTACHMENT12");
    _null_.put(GL_EVAL_BIT, "GL_EVAL_BIT");
    _null_.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM, "GL_DEBUG_SOURCE_WINDOW_SYSTEM");
    _null_.put(GL_TEXTURE_GEQUAL_R_SGIX, "GL_TEXTURE_GEQUAL_R_SGIX");
    _null_.put(GL_GREEN_BITS, "GL_GREEN_BITS");
    _null_.put(GL_ACTIVE_UNIFORMS, "GL_ACTIVE_UNIFORMS");
    _null_.put(GL_DOUBLEBUFFER, "GL_DOUBLEBUFFER");
    _null_.put(GL_RED_BITS, "GL_RED_BITS");
    _null_.put(GL_R16, "GL_R16");
    _null_.put(GL_COLOR_ATTACHMENT26, "GL_COLOR_ATTACHMENT26");
    _null_.put(GL_COLOR_ATTACHMENT25, "GL_COLOR_ATTACHMENT25");
    _null_.put(GL_COLOR_ATTACHMENT28, "GL_COLOR_ATTACHMENT28");
    _null_.put(GL_COLOR_ATTACHMENT27, "GL_COLOR_ATTACHMENT27");
    _null_.put(GL_COLOR_ATTACHMENT22, "GL_COLOR_ATTACHMENT22");
    _null_.put(GL_COLOR_ATTACHMENT21, "GL_COLOR_ATTACHMENT21");
    _null_.put(GL_COLOR_ATTACHMENT24, "GL_COLOR_ATTACHMENT24");
  }
  private static void _null_18() {
    _null_.put(GL_COLOR_ATTACHMENT23, "GL_COLOR_ATTACHMENT23");
    _null_.put(GL_COLOR_ATTACHMENT20, "GL_COLOR_ATTACHMENT20");
    _null_.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER");
    _null_.put(GL_LIGHT_MODEL_AMBIENT, "GL_LIGHT_MODEL_AMBIENT");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX");
    _null_.put(GL_SHADER_IMAGE_STORE, "GL_SHADER_IMAGE_STORE");
    _null_.put(GL_COLOR_ATTACHMENT19, "GL_COLOR_ATTACHMENT19");
    _null_.put(GL_COLOR_ATTACHMENT18, "GL_COLOR_ATTACHMENT18");
    _null_.put(GL_DUAL_ALPHA4_SGIS, "GL_DUAL_ALPHA4_SGIS");
    _null_.put(GL_TEXTURE_DEPTH_TYPE, "GL_TEXTURE_DEPTH_TYPE");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD, "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD");
    _null_.put(GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD");
    _null_.put(GL_TEXTURE_UPDATE_BARRIER_BIT, "GL_TEXTURE_UPDATE_BARRIER_BIT");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST");
    _null_.put(GL_COMPRESSED_RG, "GL_COMPRESSED_RG");
    _null_.put(GL_CON_27_ATI, "GL_CON_27_ATI");
    _null_.put(GL_COLOR_ATTACHMENT31, "GL_COLOR_ATTACHMENT31");
    _null_.put(GL_SHADER_STORAGE_BUFFER_SIZE, "GL_SHADER_STORAGE_BUFFER_SIZE");
    _null_.put(GL_COLOR_ATTACHMENT30, "GL_COLOR_ATTACHMENT30");
    _null_.put(GL_STENCIL_BUFFER_BIT1_QCOM, "GL_STENCIL_BUFFER_BIT1_QCOM");
    _null_.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
    _null_.put(GL_DEPTH_PASS_INSTRUMENT_SGIX, "GL_DEPTH_PASS_INSTRUMENT_SGIX");
    _null_.put(GL_COLOR_ENCODING, "GL_COLOR_ENCODING");
    _null_.put(GL_GLOBAL_ALPHA_SUN, "GL_GLOBAL_ALPHA_SUN");
    _null_.put(GL_COLOR_ATTACHMENT29, "GL_COLOR_ATTACHMENT29");
    _null_.put(GL_MAX_NAME_STACK_DEPTH, "GL_MAX_NAME_STACK_DEPTH");
    _null_.put(GL_SELECTION_BUFFER_SIZE, "GL_SELECTION_BUFFER_SIZE");
    _null_.put(GL_VERTEX_BINDING_BUFFER, "GL_VERTEX_BINDING_BUFFER");
    _null_.put(GL_TEXTURE_WRAP_R, "GL_TEXTURE_WRAP_R");
    _null_.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    _null_.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    _null_.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    _null_.put(GL_CLEAR_BUFFER, "GL_CLEAR_BUFFER");
    _null_.put(GL_IS_PER_PATCH, "GL_IS_PER_PATCH");
    _null_.put(GL_UNSIGNED_SHORT_8_8_REV_MESA, "GL_UNSIGNED_SHORT_8_8_REV_MESA");
    _null_.put(GL_MODULATE_ADD_ATI, "GL_MODULATE_ADD_ATI");
    _null_.put(GL_NUM_LOOPBACK_COMPONENTS_ATI, "GL_NUM_LOOPBACK_COMPONENTS_ATI");
    _null_.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    _null_.put(GL_NO_RESET_NOTIFICATION_KHR, "GL_NO_RESET_NOTIFICATION_KHR");
    _null_.put(GL_COLOR_TABLE_RED_SIZE, "GL_COLOR_TABLE_RED_SIZE");
    _null_.put(GL_VIEWPORT_SUBPIXEL_BITS, "GL_VIEWPORT_SUBPIXEL_BITS");
    _null_.put(GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL, "GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL");
    _null_.put(GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL, "GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL");
    _null_.put(GL_COLOR_MATRIX, "GL_COLOR_MATRIX");
    _null_.put(GL_ALREADY_SIGNALED, "GL_ALREADY_SIGNALED");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX");
    _null_.put(GL_SHADER_BINARY_FORMAT_SPIR_V, "GL_SHADER_BINARY_FORMAT_SPIR_V");
    _null_.put(GL_REG_22_ATI, "GL_REG_22_ATI");
    _null_.put(GL_QUERY_BUFFER_BINDING, "GL_QUERY_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    _null_.put(GL_TEXTURE_INTERNAL_FORMAT, "GL_TEXTURE_INTERNAL_FORMAT");
    _null_.put(GL_OBJECT_PLANE, "GL_OBJECT_PLANE");
  }
  private static void _null_19() {
    _null_.put(GL_MAX_NAME_LENGTH, "GL_MAX_NAME_LENGTH");
    _null_.put(GL_ACTIVE_TEXTURE, "GL_ACTIVE_TEXTURE");
    _null_.put(GL_FOG_COORDINATE_ARRAY_POINTER, "GL_FOG_COORDINATE_ARRAY_POINTER");
    _null_.put(GL_TEXTURE_NUM_LEVELS_QCOM, "GL_TEXTURE_NUM_LEVELS_QCOM");
    _null_.put(GL_TRANSFORM_BIT, "GL_TRANSFORM_BIT");
    _null_.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    _null_.put(GL_UNIFORM, "GL_UNIFORM");
    _null_.put(GL_SCISSOR_BIT, "GL_SCISSOR_BIT");
    _null_.put(GL_FILTER, "GL_FILTER");
    _null_.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    _null_.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    _null_.put(GL_PROXY_TEXTURE_COLOR_TABLE_SGI, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI");
    _null_.put(GL_COPY_INVERTED, "GL_COPY_INVERTED");
    _null_.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    _null_.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    _null_.put(GL_COLOR, "GL_COLOR");
    _null_.put(GL_PACK_COMPRESSED_SIZE_SGIX, "GL_PACK_COMPRESSED_SIZE_SGIX");
    _null_.put(GL_FRAGMENT_INTERPOLATION_OFFSET_BITS, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS");
    _null_.put(GL_RG8_SNORM, "GL_RG8_SNORM");
    _null_.put(GL_PIXEL_MAP_I_TO_R_SIZE, "GL_PIXEL_MAP_I_TO_R_SIZE");
    _null_.put(GL_BUFFER_USAGE, "GL_BUFFER_USAGE");
    _null_.put(GL_OBJECT_BUFFER_SIZE_ATI, "GL_OBJECT_BUFFER_SIZE_ATI");
    _null_.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    _null_.put(GL_GREEN, "GL_GREEN");
    _null_.put(GL_INT_SAMPLER_2D_RECT, "GL_INT_SAMPLER_2D_RECT");
    _null_.put(GL_ALPHA_BIAS, "GL_ALPHA_BIAS");
    _null_.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE, "GL_TEXTURE_BINDING_2D_MULTISAMPLE");
    _null_.put(GL_NUM_COMPRESSED_TEXTURE_FORMATS, "GL_NUM_COMPRESSED_TEXTURE_FORMATS");
    _null_.put(GL_SMOOTH, "GL_SMOOTH");
    _null_.put(GL_LINE_LOOP, "GL_LINE_LOOP");
    _null_.put(GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI");
    _null_.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER");
    _null_.put(GL_TIMEOUT_EXPIRED_APPLE, "GL_TIMEOUT_EXPIRED_APPLE");
    _null_.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
    _null_.put(GL_PROGRAM_KHR, "GL_PROGRAM_KHR");
    _null_.put(GL_TRIANGLE_FAN, "GL_TRIANGLE_FAN");
    _null_.put(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH");
    _null_.put(GL_HSL_COLOR_KHR, "GL_HSL_COLOR_KHR");
    _null_.put(GL_RENDERBUFFER_DEPTH_SIZE, "GL_RENDERBUFFER_DEPTH_SIZE");
    _null_.put(GL_VIEW_COMPATIBILITY_CLASS, "GL_VIEW_COMPATIBILITY_CLASS");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
    _null_.put(GL_IMAGE_CLASS_2_X_16, "GL_IMAGE_CLASS_2_X_16");
    _null_.put(GL_FRAGMENT_SHADER_ATI, "GL_FRAGMENT_SHADER_ATI");
    _null_.put(GL_BOOL_VEC4, "GL_BOOL_VEC4");
    _null_.put(GL_BOOL_VEC3, "GL_BOOL_VEC3");
    _null_.put(GL_BOOL_VEC2, "GL_BOOL_VEC2");
    _null_.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
    _null_.put(GL_COLOR_TABLE_ALPHA_SIZE_SGI, "GL_COLOR_TABLE_ALPHA_SIZE_SGI");
    _null_.put(GL_BUFFER_KHR, "GL_BUFFER_KHR");
    _null_.put(GL_DECR_WRAP, "GL_DECR_WRAP");
  }
  private static void _null_20() {
    _null_.put(GL_BUFFER_STORAGE_FLAGS, "GL_BUFFER_STORAGE_FLAGS");
    _null_.put(GL_SHADER_TYPE, "GL_SHADER_TYPE");
    _null_.put(GL_VERTEX_ARRAY_LIST_STRIDE_IBM, "GL_VERTEX_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_OBJECT_LINEAR, "GL_OBJECT_LINEAR");
    _null_.put(GL_R1UI_T2F_N3F_V3F_SUN, "GL_R1UI_T2F_N3F_V3F_SUN");
    _null_.put(GL_ACTIVE_ATTRIBUTES, "GL_ACTIVE_ATTRIBUTES");
    _null_.put(GL_MAX_TEXTURE_IMAGE_UNITS, "GL_MAX_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_ANY_SAMPLES_PASSED_CONSERVATIVE, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE");
    _null_.put(GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX, "GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX");
    _null_.put(GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX");
    _null_.put(GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE, "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE");
    _null_.put(GL_GEOMETRY_OUTPUT_TYPE, "GL_GEOMETRY_OUTPUT_TYPE");
    _null_.put(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS, "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS");
    _null_.put(GL_RECLAIM_MEMORY_HINT_PGI, "GL_RECLAIM_MEMORY_HINT_PGI");
    _null_.put(GL_UNSIGNED_SHORT_15_1_MESA, "GL_UNSIGNED_SHORT_15_1_MESA");
    _null_.put(GL_IMAGE_CLASS_2_X_32, "GL_IMAGE_CLASS_2_X_32");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG");
    _null_.put(GL_GET_TEXTURE_IMAGE_TYPE, "GL_GET_TEXTURE_IMAGE_TYPE");
    _null_.put(GL_INT_VEC4, "GL_INT_VEC4");
    _null_.put(GL_INT_VEC2, "GL_INT_VEC2");
    _null_.put(GL_BUFFER_ACCESS_FLAGS, "GL_BUFFER_ACCESS_FLAGS");
    _null_.put(GL_INT_VEC3, "GL_INT_VEC3");
    _null_.put(GL_MAX_FRAGMENT_ATOMIC_COUNTERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTERS");
    _null_.put(GL_WAIT_FAILED_APPLE, "GL_WAIT_FAILED_APPLE");
    _null_.put(GL_LINE_QUALITY_HINT_SGIX, "GL_LINE_QUALITY_HINT_SGIX");
    _null_.put(GL_MAX_SAMPLES_APPLE, "GL_MAX_SAMPLES_APPLE");
    _null_.put(GL_RGB16UI, "GL_RGB16UI");
    _null_.put(GL_SAMPLER_2D_RECT_SHADOW, "GL_SAMPLER_2D_RECT_SHADOW");
    _null_.put(GL_LUMINANCE8_ALPHA8, "GL_LUMINANCE8_ALPHA8");
    _null_.put(GL_UNSIGNED_BYTE_3_3_2, "GL_UNSIGNED_BYTE_3_3_2");
    _null_.put(GL_IMAGE_CLASS_11_11_10, "GL_IMAGE_CLASS_11_11_10");
    _null_.put(GL_DRAW_BUFFER9_ATI, "GL_DRAW_BUFFER9_ATI");
    _null_.put(GL_CURRENT_INDEX, "GL_CURRENT_INDEX");
    _null_.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    _null_.put(GL_PIXEL_MAP_S_TO_S_SIZE, "GL_PIXEL_MAP_S_TO_S_SIZE");
    _null_.put(GL_OBJECT_TYPE, "GL_OBJECT_TYPE");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR");
    _null_.put(GL_CONTEXT_CORE_PROFILE_BIT, "GL_CONTEXT_CORE_PROFILE_BIT");
    _null_.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    _null_.put(GL_MAP_COLOR, "GL_MAP_COLOR");
    _null_.put(GL_ARRAY_SIZE, "GL_ARRAY_SIZE");
    _null_.put(GL_INTERNALFORMAT_DEPTH_TYPE, "GL_INTERNALFORMAT_DEPTH_TYPE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR");
    _null_.put(GL_STENCIL_FAIL, "GL_STENCIL_FAIL");
    _null_.put(GL_GUILTY_CONTEXT_RESET, "GL_GUILTY_CONTEXT_RESET");
    _null_.put(GL_DEBUG_PRINT_MESA, "GL_DEBUG_PRINT_MESA");
    _null_.put(GL_DEBUG_TYPE_POP_GROUP_KHR, "GL_DEBUG_TYPE_POP_GROUP_KHR");
    _null_.put(GL_TESSELLATION_MODE_AMD, "GL_TESSELLATION_MODE_AMD");
    _null_.put(GL_AVERAGE_HP, "GL_AVERAGE_HP");
    _null_.put(GL_FLOAT16_MAT4_AMD, "GL_FLOAT16_MAT4_AMD");
  }
  private static void _null_21() {
    _null_.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    _null_.put(GL_MAP2_GRID_DOMAIN, "GL_MAP2_GRID_DOMAIN");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR");
    _null_.put(GL_INTENSITY_FLOAT32_APPLE, "GL_INTENSITY_FLOAT32_APPLE");
    _null_.put(GL_MAX_IMAGE_SAMPLES, "GL_MAX_IMAGE_SAMPLES");
    _null_.put(GL_COMBINE_ALPHA, "GL_COMBINE_ALPHA");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x8_KHR, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR");
    _null_.put(GL_VIEW_CLASS_32_BITS, "GL_VIEW_CLASS_32_BITS");
    _null_.put(GL_ADD_ATI, "GL_ADD_ATI");
    _null_.put(GL_COLOR_BUFFER_BIT3_QCOM, "GL_COLOR_BUFFER_BIT3_QCOM");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_SUN, "GL_REPLACEMENT_CODE_ARRAY_SUN");
    _null_.put(GL_COMPUTE_SUBROUTINE_UNIFORM, "GL_COMPUTE_SUBROUTINE_UNIFORM");
    _null_.put(GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS, "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE");
    _null_.put(GL_UNSIGNED_INT_VEC4, "GL_UNSIGNED_INT_VEC4");
    _null_.put(GL_C4UB_V2F, "GL_C4UB_V2F");
    _null_.put(GL_FRAMEBUFFER_COMPLETE, "GL_FRAMEBUFFER_COMPLETE");
    _null_.put(GL_DEBUG_SOURCE_OTHER, "GL_DEBUG_SOURCE_OTHER");
    _null_.put(GL_ALIASED_LINE_WIDTH_RANGE, "GL_ALIASED_LINE_WIDTH_RANGE");
    _null_.put(GL_BUMP_ROT_MATRIX_ATI, "GL_BUMP_ROT_MATRIX_ATI");
    _null_.put(GL_SWIZZLE_STQ_DQ_ATI, "GL_SWIZZLE_STQ_DQ_ATI");
    _null_.put(GL_CON_23_ATI, "GL_CON_23_ATI");
    _null_.put(GL_NUM_SHADER_BINARY_FORMATS, "GL_NUM_SHADER_BINARY_FORMATS");
    _null_.put(GL_ISOLINES, "GL_ISOLINES");
    _null_.put(GL_DEBUG_CATEGORY_APPLICATION_AMD, "GL_DEBUG_CATEGORY_APPLICATION_AMD");
    _null_.put(GL_STACK_OVERFLOW_KHR, "GL_STACK_OVERFLOW_KHR");
    _null_.put(GL_DARKEN, "GL_DARKEN");
    _null_.put(GL_UNSIGNED_INT_VEC3, "GL_UNSIGNED_INT_VEC3");
    _null_.put(GL_UNSIGNED_INT_VEC2, "GL_UNSIGNED_INT_VEC2");
    _null_.put(GL_FRAGMENT_SHADER_DERIVATIVE_HINT, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER");
    _null_.put(GL_HISTOGRAM_FORMAT, "GL_HISTOGRAM_FORMAT");
    _null_.put(GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL, "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    _null_.put(GL_DOWNSAMPLE_SCALES_IMG, "GL_DOWNSAMPLE_SCALES_IMG");
    _null_.put(GL_PROXY_TEXTURE_1D_STACK_MESAX, "GL_PROXY_TEXTURE_1D_STACK_MESAX");
    _null_.put(GL_STENCIL_PASS_DEPTH_PASS, "GL_STENCIL_PASS_DEPTH_PASS");
    _null_.put(GL_QUERY_COUNTER_BITS, "GL_QUERY_COUNTER_BITS");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT1_RGBA, "GL_VIEW_CLASS_S3TC_DXT1_RGBA");
    _null_.put(GL_FEEDBACK, "GL_FEEDBACK");
    _null_.put(GL_MAX_SERVER_WAIT_TIMEOUT, "GL_MAX_SERVER_WAIT_TIMEOUT");
    _null_.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS");
    _null_.put(GL_PIXEL_MAP_I_TO_A_SIZE, "GL_PIXEL_MAP_I_TO_A_SIZE");
    _null_.put(GL_LUMINANCE8, "GL_LUMINANCE8");
    _null_.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
    _null_.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    _null_.put(GL_LUMINANCE4, "GL_LUMINANCE4");
    _null_.put(GL_AUX_BUFFERS, "GL_AUX_BUFFERS");
  }
  private static void _null_22() {
    _null_.put(GL_LUMINANCE_ALPHA, "GL_LUMINANCE_ALPHA");
    _null_.put(GL_XOR, "GL_XOR");
    _null_.put(GL_FENCE_APPLE, "GL_FENCE_APPLE");
    _null_.put(GL_BUFFER, "GL_BUFFER");
    _null_.put(GL_COPY, "GL_COPY");
    _null_.put(GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI, "GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI");
    _null_.put(GL_SLIM10U_SGIX, "GL_SLIM10U_SGIX");
    _null_.put(GL_SAMPLER_2D_MULTISAMPLE, "GL_SAMPLER_2D_MULTISAMPLE");
    _null_.put(GL_C4UB_V3F, "GL_C4UB_V3F");
    _null_.put(GL_RGBA_S3TC, "GL_RGBA_S3TC");
    _null_.put(GL_TRIANGLE_STRIP_ADJACENCY, "GL_TRIANGLE_STRIP_ADJACENCY");
    _null_.put(GL_COMPRESSED_RGBA8_ETC2_EAC, "GL_COMPRESSED_RGBA8_ETC2_EAC");
    _null_.put(GL_MAX_VIEWS_OVR, "GL_MAX_VIEWS_OVR");
    _null_.put(GL_PIXEL_TEX_GEN_Q_ROUND_SGIX, "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    _null_.put(GL_PASS_THROUGH_TOKEN, "GL_PASS_THROUGH_TOKEN");
    _null_.put(GL_TEXTURE_BASE_LEVEL_SGIS, "GL_TEXTURE_BASE_LEVEL_SGIS");
    _null_.put(GL_SHADER, "GL_SHADER");
    _null_.put(GL_REG_26_ATI, "GL_REG_26_ATI");
    _null_.put(GL_SOFTLIGHT, "GL_SOFTLIGHT");
    _null_.put(GL_PROGRAM, "GL_PROGRAM");
    _null_.put(GL_IMAGE_ROTATE_ORIGIN_Y_HP, "GL_IMAGE_ROTATE_ORIGIN_Y_HP");
    _null_.put(GL_NOOP, "GL_NOOP");
    _null_.put(GL_RGBA_SNORM, "GL_RGBA_SNORM");
    _null_.put(GL_UNPACK_ROW_LENGTH, "GL_UNPACK_ROW_LENGTH");
    _null_.put(GL_LINE_STIPPLE, "GL_LINE_STIPPLE");
    _null_.put(GL_TRACE_PRIMITIVES_BIT_MESA, "GL_TRACE_PRIMITIVES_BIT_MESA");
    _null_.put(GL_R8_SNORM, "GL_R8_SNORM");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX");
    _null_.put(GL_MAX_VERTEX_ATOMIC_COUNTERS, "GL_MAX_VERTEX_ATOMIC_COUNTERS");
    _null_.put(GL_OUT_OF_MEMORY, "GL_OUT_OF_MEMORY");
    _null_.put(GL_CON_8_ATI, "GL_CON_8_ATI");
    _null_.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI");
    _null_.put(GL_CONSTANT_BORDER, "GL_CONSTANT_BORDER");
    _null_.put(GL_DEPTH_BUFFER_BIT6_QCOM, "GL_DEPTH_BUFFER_BIT6_QCOM");
    _null_.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    _null_.put(GL_UNSIGNED_INT_2_10_10_10_REV, "GL_UNSIGNED_INT_2_10_10_10_REV");
    _null_.put(GL_DOUBLE_MAT3x4, "GL_DOUBLE_MAT3x4");
    _null_.put(GL_DOUBLE_MAT3x2, "GL_DOUBLE_MAT3x2");
    _null_.put(GL_NONE, "GL_NONE");
    _null_.put(GL_TYPE, "GL_TYPE");
    _null_.put(GL_SIGNALED, "GL_SIGNALED");
    _null_.put(GL_DRAW_FRAMEBUFFER_ANGLE, "GL_DRAW_FRAMEBUFFER_ANGLE");
    _null_.put(GL_MINMAX, "GL_MINMAX");
    _null_.put(GL_MAX_FRAGMENT_IMAGE_UNIFORMS, "GL_MAX_FRAGMENT_IMAGE_UNIFORMS");
    _null_.put(GL_UNSIGNED_INT_8_8_8_8, "GL_UNSIGNED_INT_8_8_8_8");
    _null_.put(GL_TEXTURE_IMAGE_VALID_QCOM, "GL_TEXTURE_IMAGE_VALID_QCOM");
    _null_.put(GL_ALPHA, "GL_ALPHA");
    _null_.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_UNSIGNED_INT_8_8_8_8_REV, "GL_UNSIGNED_INT_8_8_8_8_REV");
    _null_.put(GL_DONT_CARE, "GL_DONT_CARE");
    _null_.put(GL_DUAL_LUMINANCE16_SGIS, "GL_DUAL_LUMINANCE16_SGIS");
    _null_.put(GL_EYE_LINE_SGIS, "GL_EYE_LINE_SGIS");
    _null_.put(GL_TEXTURE_COMPRESSED_BLOCK_SIZE, "GL_TEXTURE_COMPRESSED_BLOCK_SIZE");
    _null_.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    _null_.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    _null_.put(GL_COLOR4_BIT_PGI, "GL_COLOR4_BIT_PGI");
    _null_.put(GL_R1UI_C3F_V3F_SUN, "GL_R1UI_C3F_V3F_SUN");
    _null_.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE");
    _null_.put(GL_COLORDODGE_KHR, "GL_COLORDODGE_KHR");
    _null_.put(GL_MAX_RECTANGLE_TEXTURE_SIZE, "GL_MAX_RECTANGLE_TEXTURE_SIZE");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x5, "GL_COMPRESSED_RGBA_ASTC_5x5");
  }
  private static void _null_23() {
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x4, "GL_COMPRESSED_RGBA_ASTC_5x4");
    _null_.put(GL_POINT_TOKEN, "GL_POINT_TOKEN");
    _null_.put(GL_INDEX_ARRAY_LIST_STRIDE_IBM, "GL_INDEX_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x5_KHR, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR");
    _null_.put(GL_DEPTH_WRITEMASK, "GL_DEPTH_WRITEMASK");
    _null_.put(GL_COMBINE_RGB, "GL_COMBINE_RGB");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
    _null_.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
    _null_.put(GL_MIRROR_CLAMP_TO_EDGE_ATI, "GL_MIRROR_CLAMP_TO_EDGE_ATI");
    _null_.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    _null_.put(GL_POST_CONVOLUTION_GREEN_BIAS, "GL_POST_CONVOLUTION_GREEN_BIAS");
    _null_.put(GL_PROJECTION_STACK_DEPTH, "GL_PROJECTION_STACK_DEPTH");
    _null_.put(GL_UNPACK_SKIP_ROWS, "GL_UNPACK_SKIP_ROWS");
    _null_.put(GL_STENCIL_INDEX4, "GL_STENCIL_INDEX4");
    _null_.put(GL_PERFORMANCE_MONITOR_AMD, "GL_PERFORMANCE_MONITOR_AMD");
    _null_.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    _null_.put(GL_STENCIL_INDEX1, "GL_STENCIL_INDEX1");
    _null_.put(GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL, "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_GEOMETRY_SUBROUTINE_UNIFORM, "GL_GEOMETRY_SUBROUTINE_UNIFORM");
    _null_.put(GL_RENDERER, "GL_RENDERER");
    _null_.put(GL_UNIFORM_OFFSET, "GL_UNIFORM_OFFSET");
    _null_.put(GL_CON_13_ATI, "GL_CON_13_ATI");
    _null_.put(GL_TESS_GEN_POINT_MODE, "GL_TESS_GEN_POINT_MODE");
    _null_.put(GL_DEBUG_TYPE_PERFORMANCE, "GL_DEBUG_TYPE_PERFORMANCE");
    _null_.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    _null_.put(GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED");
    _null_.put(GL_INT_SAMPLER_BUFFER, "GL_INT_SAMPLER_BUFFER");
    _null_.put(GL_COMPRESSED_RG_RGTC2, "GL_COMPRESSED_RG_RGTC2");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT2_QCOM, "GL_MULTISAMPLE_BUFFER_BIT2_QCOM");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_BUFFERS, "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS");
    _null_.put(GL_STENCIL_INDEX8, "GL_STENCIL_INDEX8");
    _null_.put(GL_ALWAYS_SOFT_HINT_PGI, "GL_ALWAYS_SOFT_HINT_PGI");
    _null_.put(GL_REPLICATE_BORDER_HP, "GL_REPLICATE_BORDER_HP");
    _null_.put(GL_COLOR_BUFFER_BIT4_QCOM, "GL_COLOR_BUFFER_BIT4_QCOM");
    _null_.put(GL_TEXTURE_RANGE_POINTER_APPLE, "GL_TEXTURE_RANGE_POINTER_APPLE");
    _null_.put(GL_MAX_PIXEL_MAP_TABLE, "GL_MAX_PIXEL_MAP_TABLE");
    _null_.put(GL_STEREO, "GL_STEREO");
    _null_.put(GL_DOT3_ATI, "GL_DOT3_ATI");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE");
    _null_.put(GL_STATIC_DRAW, "GL_STATIC_DRAW");
    _null_.put(GL_CLIP_PLANE4_IMG, "GL_CLIP_PLANE4_IMG");
    _null_.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY");
    _null_.put(GL_COPY_READ_BUFFER_BINDING, "GL_COPY_READ_BUFFER_BINDING");
    _null_.put(GL_POINTS, "GL_POINTS");
    _null_.put(GL_LIGHTING, "GL_LIGHTING");
    _null_.put(GL_DOT3_RGBA_IMG, "GL_DOT3_RGBA_IMG");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x5_KHR, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_BUFFER, "GL_UNSIGNED_INT_SAMPLER_BUFFER");
    _null_.put(GL_FACTOR_ALPHA_MODULATE_IMG, "GL_FACTOR_ALPHA_MODULATE_IMG");
    _null_.put(GL_UNPACK_SWAP_BYTES, "GL_UNPACK_SWAP_BYTES");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE");
    _null_.put(GL_SYNC_FLUSH_COMMANDS_BIT, "GL_SYNC_FLUSH_COMMANDS_BIT");
    _null_.put(GL_STENCIL_BUFFER_BIT7_QCOM, "GL_STENCIL_BUFFER_BIT7_QCOM");
    _null_.put(GL_RGB_SNORM, "GL_RGB_SNORM");
    _null_.put(GL_STORAGE_CACHED_APPLE, "GL_STORAGE_CACHED_APPLE");
    _null_.put(GL_UNSIGNED_INT_ATOMIC_COUNTER, "GL_UNSIGNED_INT_ATOMIC_COUNTER");
  }
  private static void _null_24() {
    _null_.put(GL_VERTEX_PROGRAM_TWO_SIDE, "GL_VERTEX_PROGRAM_TWO_SIDE");
    _null_.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS");
    _null_.put(GL_INT_SAMPLER_BUFFER_AMD, "GL_INT_SAMPLER_BUFFER_AMD");
    _null_.put(GL_BUMP_ROT_MATRIX_SIZE_ATI, "GL_BUMP_ROT_MATRIX_SIZE_ATI");
    _null_.put(GL_NUM_PASSES_ATI, "GL_NUM_PASSES_ATI");
    _null_.put(GL_DRAW_BUFFER6_ATI, "GL_DRAW_BUFFER6_ATI");
    _null_.put(GL_MAX_VERTEX_UNIFORM_COMPONENTS, "GL_MAX_VERTEX_UNIFORM_COMPONENTS");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE, "GL_VERTEX_ATTRIB_ARRAY_STRIDE");
    _null_.put(GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL, "GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL");
    _null_.put(GL_SLUMINANCE, "GL_SLUMINANCE");
    _null_.put(GL_REG_2_ATI, "GL_REG_2_ATI");
    _null_.put(GL_LOCATION_INDEX, "GL_LOCATION_INDEX");
    _null_.put(GL_DEBUG_CATEGORY_DEPRECATION_AMD, "GL_DEBUG_CATEGORY_DEPRECATION_AMD");
    _null_.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    _null_.put(GL_SRC0_RGB, "GL_SRC0_RGB");
    _null_.put(GL_MAX_CONVOLUTION_HEIGHT, "GL_MAX_CONVOLUTION_HEIGHT");
    _null_.put(GL_SWIZZLE_STR_ATI, "GL_SWIZZLE_STR_ATI");
    _null_.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
    _null_.put(GL_ALL_STATIC_DATA_IBM, "GL_ALL_STATIC_DATA_IBM");
    _null_.put(GL_HISTOGRAM_WIDTH, "GL_HISTOGRAM_WIDTH");
    _null_.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    _null_.put(GL_ACCUM_ALPHA_BITS, "GL_ACCUM_ALPHA_BITS");
    _null_.put(GL_PERFQUERY_COUNTER_RAW_INTEL, "GL_PERFQUERY_COUNTER_RAW_INTEL");
    _null_.put(GL_MAX_CLIP_PLANES, "GL_MAX_CLIP_PLANES");
    _null_.put(GL_PHONG_HINT_WIN, "GL_PHONG_HINT_WIN");
    _null_.put(GL_GEOMETRY_VERTICES_OUT, "GL_GEOMETRY_VERTICES_OUT");
    _null_.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS");
    _null_.put(GL_LAYOUT_LINEAR_CPU_CACHED_INTEL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL");
    _null_.put(GL_BLUE, "GL_BLUE");
    _null_.put(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE");
    _null_.put(GL_FRAMEBUFFER_UNSUPPORTED, "GL_FRAMEBUFFER_UNSUPPORTED");
    _null_.put(GL_CURRENT_RASTER_POSITION, "GL_CURRENT_RASTER_POSITION");
    _null_.put(GL_LINE_TOKEN, "GL_LINE_TOKEN");
    _null_.put(GL_PATCHES, "GL_PATCHES");
    _null_.put(GL_UNIFORM_BLOCK_NAME_LENGTH, "GL_UNIFORM_BLOCK_NAME_LENGTH");
    _null_.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    _null_.put(GL_HSL_HUE_KHR, "GL_HSL_HUE_KHR");
    _null_.put(GL_VERTEX_BINDING_OFFSET, "GL_VERTEX_BINDING_OFFSET");
    _null_.put(GL_OPERAND2_ALPHA, "GL_OPERAND2_ALPHA");
    _null_.put(GL_BUFFER_MAP_LENGTH, "GL_BUFFER_MAP_LENGTH");
    _null_.put(GL_SAMPLES, "GL_SAMPLES");
    _null_.put(GL_SAMPLER, "GL_SAMPLER");
    _null_.put(GL_LERP_ATI, "GL_LERP_ATI");
    _null_.put(GL_INT_2_10_10_10_REV, "GL_INT_2_10_10_10_REV");
    _null_.put(GL_T2F_C3F_V3F, "GL_T2F_C3F_V3F");
    _null_.put(GL_DMP_PROGRAM_BINARY_DMP, "GL_DMP_PROGRAM_BINARY_DMP");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12");
    _null_.put(GL_TEXTURE_FILTER_CONTROL, "GL_TEXTURE_FILTER_CONTROL");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10");
    _null_.put(GL_NORMAL_ARRAY_STRIDE, "GL_NORMAL_ARRAY_STRIDE");
    _null_.put(GL_DEBUG_TYPE_PERFORMANCE_KHR, "GL_DEBUG_TYPE_PERFORMANCE_KHR");
    _null_.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    _null_.put(GL_VERTEX_ARRAY_OBJECT_AMD, "GL_VERTEX_ARRAY_OBJECT_AMD");
    _null_.put(GL_ALPHA4, "GL_ALPHA4");
    _null_.put(GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS, "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS");
    _null_.put(GL_ALPHA8, "GL_ALPHA8");
    _null_.put(GL_EDGE_FLAG_ARRAY_POINTER, "GL_EDGE_FLAG_ARRAY_POINTER");
    _null_.put(GL_PIXEL_MAP_B_TO_B_SIZE, "GL_PIXEL_MAP_B_TO_B_SIZE");
    _null_.put(GL_RENDERBUFFER_GREEN_SIZE, "GL_RENDERBUFFER_GREEN_SIZE");
  }
  private static void _null_25() {
    _null_.put(GL_VIEW_CLASS_RGTC2_RG, "GL_VIEW_CLASS_RGTC2_RG");
    _null_.put(GL_FOG_COLOR, "GL_FOG_COLOR");
    _null_.put(GL_MAX_DEFORMATION_ORDER_SGIX, "GL_MAX_DEFORMATION_ORDER_SGIX");
    _null_.put(GL_MUL_ATI, "GL_MUL_ATI");
    _null_.put(GL_LINE, "GL_LINE");
    _null_.put(GL_DRAW_BUFFER13_ATI, "GL_DRAW_BUFFER13_ATI");
    _null_.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    _null_.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    _null_.put(GL_PRIMITIVES_SUBMITTED, "GL_PRIMITIVES_SUBMITTED");
    _null_.put(GL_IMAGE_COMPATIBILITY_CLASS, "GL_IMAGE_COMPATIBILITY_CLASS");
    _null_.put(GL_MANUAL_GENERATE_MIPMAP, "GL_MANUAL_GENERATE_MIPMAP");
    _null_.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
    _null_.put(GL_QUERY_NO_WAIT_INVERTED, "GL_QUERY_NO_WAIT_INVERTED");
    _null_.put(GL_FLOAT16_MAT4x2_AMD, "GL_FLOAT16_MAT4x2_AMD");
    _null_.put(GL_STENCIL_INDEX, "GL_STENCIL_INDEX");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    _null_.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    _null_.put(GL_UNSIGNED_SHORT_4_4_4_4_REV, "GL_UNSIGNED_SHORT_4_4_4_4_REV");
    _null_.put(GL_TESS_EVALUATION_SUBROUTINE_UNIFORM, "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM");
    _null_.put(GL_TEXTURE_BUFFER_SIZE, "GL_TEXTURE_BUFFER_SIZE");
    _null_.put(GL_RG_INTEGER, "GL_RG_INTEGER");
    _null_.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING");
    _null_.put(GL_COPY_PIXEL_TOKEN, "GL_COPY_PIXEL_TOKEN");
    _null_.put(GL_PROXY_TEXTURE_RECTANGLE, "GL_PROXY_TEXTURE_RECTANGLE");
    _null_.put(GL_RGBA4_DXT5_S3TC, "GL_RGBA4_DXT5_S3TC");
    _null_.put(GL_ALPHA_FLOAT32_ATI, "GL_ALPHA_FLOAT32_ATI");
    _null_.put(GL_COLOR_MATERIAL, "GL_COLOR_MATERIAL");
    _null_.put(GL_CURRENT_BIT, "GL_CURRENT_BIT");
    _null_.put(GL_COEFF, "GL_COEFF");
    _null_.put(GL_MAX_DEPTH, "GL_MAX_DEPTH");
    _null_.put(GL_DEBUG_SEVERITY_LOW, "GL_DEBUG_SEVERITY_LOW");
    _null_.put(GL_COLOR_TABLE_GREEN_SIZE_SGI, "GL_COLOR_TABLE_GREEN_SIZE_SGI");
    _null_.put(GL_VERTICES_SUBMITTED, "GL_VERTICES_SUBMITTED");
    _null_.put(GL_FRAGMENT_SHADER, "GL_FRAGMENT_SHADER");
    _null_.put(GL_QUERY_BY_REGION_NO_WAIT_INVERTED, "GL_QUERY_BY_REGION_NO_WAIT_INVERTED");
    _null_.put(GL_CULL_FACE, "GL_CULL_FACE");
    _null_.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    _null_.put(GL_VIEWPORT, "GL_VIEWPORT");
    _null_.put(GL_FACTOR_MAX_AMD, "GL_FACTOR_MAX_AMD");
    _null_.put(GL_SOURCE0_ALPHA, "GL_SOURCE0_ALPHA");
    _null_.put(GL_ALLOW_DRAW_WIN_HINT_PGI, "GL_ALLOW_DRAW_WIN_HINT_PGI");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE, "GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE");
    _null_.put(GL_MAX_FRAMEBUFFER_LAYERS, "GL_MAX_FRAMEBUFFER_LAYERS");
    _null_.put(GL_DEBUG_SOURCE_APPLICATION, "GL_DEBUG_SOURCE_APPLICATION");
    _null_.put(GL_PROGRAM_PIPELINE_KHR, "GL_PROGRAM_PIPELINE_KHR");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
  }
  private static void _null_26() {
    _null_.put(GL_MAX_VERTEX_UNIFORM_BLOCKS, "GL_MAX_VERTEX_UNIFORM_BLOCKS");
    _null_.put(GL_NUM_SPIR_V_EXTENSIONS, "GL_NUM_SPIR_V_EXTENSIONS");
    _null_.put(GL_SRGB8, "GL_SRGB8");
    _null_.put(GL_VIEWPORT_BIT, "GL_VIEWPORT_BIT");
    _null_.put(GL_PACK_SKIP_PIXELS, "GL_PACK_SKIP_PIXELS");
    _null_.put(GL_COLOR_TABLE_WIDTH_SGI, "GL_COLOR_TABLE_WIDTH_SGI");
    _null_.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR");
    _null_.put(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING");
    _null_.put(GL_SOURCE2_ALPHA, "GL_SOURCE2_ALPHA");
    _null_.put(GL_DOMAIN, "GL_DOMAIN");
    _null_.put(GL_SCREEN_COORDINATES_REND, "GL_SCREEN_COORDINATES_REND");
    _null_.put(GL_RGB_INTEGER, "GL_RGB_INTEGER");
    _null_.put(GL_TEXTURE_IMAGE_TYPE, "GL_TEXTURE_IMAGE_TYPE");
    _null_.put(GL_FOG_COORD_ARRAY_POINTER, "GL_FOG_COORD_ARRAY_POINTER");
    _null_.put(GL_DEPTH_BUFFER_BIT, "GL_DEPTH_BUFFER_BIT");
    _null_.put(GL_FRAMEBUFFER_DEFAULT, "GL_FRAMEBUFFER_DEFAULT");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5");
    _null_.put(GL_R16F, "GL_R16F");
    _null_.put(GL_QUAD_ALPHA8_SGIS, "GL_QUAD_ALPHA8_SGIS");
    _null_.put(GL_DRAW_BUFFER2_ATI, "GL_DRAW_BUFFER2_ATI");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4");
    _null_.put(GL_R16I, "GL_R16I");
    _null_.put(GL_C3F_V3F, "GL_C3F_V3F");
    _null_.put(GL_PROXY_TEXTURE_4D_SGIS, "GL_PROXY_TEXTURE_4D_SGIS");
    _null_.put(GL_SPRITE_AXIAL_SGIX, "GL_SPRITE_AXIAL_SGIX");
    _null_.put(GL_DISCARD_ATI, "GL_DISCARD_ATI");
    _null_.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    _null_.put(GL_COMPRESSED_SRGB8_ETC2, "GL_COMPRESSED_SRGB8_ETC2");
    _null_.put(GL_SHADER_STORAGE_BUFFER_START, "GL_SHADER_STORAGE_BUFFER_START");
    _null_.put(GL_FEEDBACK_BUFFER_TYPE, "GL_FEEDBACK_BUFFER_TYPE");
    _null_.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    _null_.put(GL_LINEAR_CLIPMAP_NEAREST_SGIX, "GL_LINEAR_CLIPMAP_NEAREST_SGIX");
    _null_.put(GL_2PASS_0_SGIS, "GL_2PASS_0_SGIS");
    _null_.put(GL_INTERNALFORMAT_ALPHA_SIZE, "GL_INTERNALFORMAT_ALPHA_SIZE");
    _null_.put(GL_CONSTANT, "GL_CONSTANT");
    _null_.put(GL_CON_17_ATI, "GL_CON_17_ATI");
    _null_.put(GL_VERTEX_CONSISTENT_HINT_PGI, "GL_VERTEX_CONSISTENT_HINT_PGI");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_LIST_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_IBM");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_1D_ARRAY, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY");
    _null_.put(GL_TEXTURE_MAX_LEVEL_SGIS, "GL_TEXTURE_MAX_LEVEL_SGIS");
    _null_.put(GL_SAMPLES_3DFX, "GL_SAMPLES_3DFX");
    _null_.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    _null_.put(GL_IMAGE_CLASS_2_X_8, "GL_IMAGE_CLASS_2_X_8");
    _null_.put(GL_CON_4_ATI, "GL_CON_4_ATI");
    _null_.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH");
    _null_.put(GL_RETURN, "GL_RETURN");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS");
  }
  private static void _null_27() {
    _null_.put(GL_TEXTURE_ALPHA_SIZE, "GL_TEXTURE_ALPHA_SIZE");
    _null_.put(GL_IMAGE_TEXEL_SIZE, "GL_IMAGE_TEXEL_SIZE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING");
    _null_.put(GL_DOT3_RGB, "GL_DOT3_RGB");
    _null_.put(GL_VERTEX_ATTRIB_BINDING, "GL_VERTEX_ATTRIB_BINDING");
    _null_.put(GL_TRANSPOSE_COLOR_MATRIX, "GL_TRANSPOSE_COLOR_MATRIX");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE");
    _null_.put(GL_FRAGMENTS_INSTRUMENT_MAX_SGIX, "GL_FRAGMENTS_INSTRUMENT_MAX_SGIX");
    _null_.put(GL_MAX_SUBROUTINES, "GL_MAX_SUBROUTINES");
    _null_.put(GL_STENCIL_RENDERABLE, "GL_STENCIL_RENDERABLE");
    _null_.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    _null_.put(GL_POINT_SIZE, "GL_POINT_SIZE");
    _null_.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_STENCIL_CLEAR_VALUE, "GL_STENCIL_CLEAR_VALUE");
    _null_.put(GL_R1UI_T2F_V3F_SUN, "GL_R1UI_T2F_V3F_SUN");
    _null_.put(GL_VERTEX_STREAM6_ATI, "GL_VERTEX_STREAM6_ATI");
    _null_.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN");
    _null_.put(GL_COMPRESSED_LUMINANCE, "GL_COMPRESSED_LUMINANCE");
    _null_.put(GL_CURRENT_FOG_COORDINATE, "GL_CURRENT_FOG_COORDINATE");
    _null_.put(GL_COMP_BIT_ATI, "GL_COMP_BIT_ATI");
    _null_.put(GL_TEXTURE_BUFFER_BINDING, "GL_TEXTURE_BUFFER_BINDING");
    _null_.put(GL_SMAPHS30_PROGRAM_BINARY_DMP, "GL_SMAPHS30_PROGRAM_BINARY_DMP");
    _null_.put(GL_PATCH_VERTICES, "GL_PATCH_VERTICES");
    _null_.put(GL_DIFFERENCE, "GL_DIFFERENCE");
    _null_.put(GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES, "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES");
    _null_.put(GL_REG_17_ATI, "GL_REG_17_ATI");
    _null_.put(GL_CLAMP_TO_EDGE, "GL_CLAMP_TO_EDGE");
    _null_.put(GL_UNIFORM_BUFFER_START, "GL_UNIFORM_BUFFER_START");
    _null_.put(GL_MAP1_GRID_SEGMENTS, "GL_MAP1_GRID_SEGMENTS");
    _null_.put(GL_DEBUG_SEVERITY_MEDIUM_KHR, "GL_DEBUG_SEVERITY_MEDIUM_KHR");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE");
    _null_.put(GL_SAMPLE_MASK_INVERT_SGIS, "GL_SAMPLE_MASK_INVERT_SGIS");
    _null_.put(GL_DOT3_RGBA, "GL_DOT3_RGBA");
    _null_.put(GL_GET_TEXTURE_IMAGE_FORMAT, "GL_GET_TEXTURE_IMAGE_FORMAT");
    _null_.put(GL_BLEND_DST_ALPHA, "GL_BLEND_DST_ALPHA");
    _null_.put(GL_Q, "GL_Q");
    _null_.put(GL_SUBTRACT, "GL_SUBTRACT");
    _null_.put(GL_S, "GL_S");
    _null_.put(GL_R, "GL_R");
    _null_.put(GL_T, "GL_T");
    _null_.put(GL_PERCENTAGE_AMD, "GL_PERCENTAGE_AMD");
    _null_.put(GL_QUARTER_BIT_ATI, "GL_QUARTER_BIT_ATI");
    _null_.put(GL_SRC0_ALPHA, "GL_SRC0_ALPHA");
    _null_.put(GL_MODULATE_SIGNED_ADD_ATI, "GL_MODULATE_SIGNED_ADD_ATI");
    _null_.put(GL_STATIC_COPY, "GL_STATIC_COPY");
    _null_.put(GL_EDGE_FLAG_ARRAY, "GL_EDGE_FLAG_ARRAY");
    _null_.put(GL_CLIP_PLANE0_IMG, "GL_CLIP_PLANE0_IMG");
    _null_.put(GL_FOG_BIT, "GL_FOG_BIT");
    _null_.put(GL_COLOR_COMPONENTS, "GL_COLOR_COMPONENTS");
    _null_.put(GL_DEBUG_SOURCE_API, "GL_DEBUG_SOURCE_API");
    _null_.put(GL_FLOAT16_MAT3x4_AMD, "GL_FLOAT16_MAT3x4_AMD");
    _null_.put(GL_INTERLACE_READ_INGR, "GL_INTERLACE_READ_INGR");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
    _null_.put(GL_MAX_INTEGER_SAMPLES, "GL_MAX_INTEGER_SAMPLES");
    _null_.put(GL_NATIVE_GRAPHICS_END_HINT_PGI, "GL_NATIVE_GRAPHICS_END_HINT_PGI");
    _null_.put(GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM, "GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM");
    _null_.put(GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS");
    _null_.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
    _null_.put(GL_STENCIL_ATTACHMENT, "GL_STENCIL_ATTACHMENT");
    _null_.put(GL_INVALID_VALUE, "GL_INVALID_VALUE");
  }
  private static void _null_28() {
    _null_.put(GL_INDEX_MODE, "GL_INDEX_MODE");
    _null_.put(GL_CONSERVATIVE_RASTERIZATION_INTEL, "GL_CONSERVATIVE_RASTERIZATION_INTEL");
    _null_.put(GL_ALLOW_DRAW_FRG_HINT_PGI, "GL_ALLOW_DRAW_FRG_HINT_PGI");
    _null_.put(GL_MAT_AMBIENT_BIT_PGI, "GL_MAT_AMBIENT_BIT_PGI");
    _null_.put(GL_PIXEL_MAP_A_TO_A_SIZE, "GL_PIXEL_MAP_A_TO_A_SIZE");
    _null_.put(GL_BUFFER_FLUSHING_UNMAP_APPLE, "GL_BUFFER_FLUSHING_UNMAP_APPLE");
    _null_.put(GL_STRICT_DEPTHFUNC_HINT_PGI, "GL_STRICT_DEPTHFUNC_HINT_PGI");
    _null_.put(GL_GEQUAL, "GL_GEQUAL");
    _null_.put(GL_MAX_LAYERS, "GL_MAX_LAYERS");
    _null_.put(GL_GREEN_MIN_CLAMP_INGR, "GL_GREEN_MIN_CLAMP_INGR");
    _null_.put(GL_NICEST, "GL_NICEST");
    _null_.put(GL_MAX_UNIFORM_BLOCK_SIZE, "GL_MAX_UNIFORM_BLOCK_SIZE");
    _null_.put(GL_LUMINANCE_FLOAT32_APPLE, "GL_LUMINANCE_FLOAT32_APPLE");
    _null_.put(GL_DUAL_INTENSITY4_SGIS, "GL_DUAL_INTENSITY4_SGIS");
    _null_.put(GL_MAX_VERTEX_STREAMS, "GL_MAX_VERTEX_STREAMS");
    _null_.put(GL_SPRITE_OBJECT_ALIGNED_SGIX, "GL_SPRITE_OBJECT_ALIGNED_SGIX");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_STORAGE_SPARSE_BIT_AMD, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD");
    _null_.put(GL_COORD_REPLACE, "GL_COORD_REPLACE");
    _null_.put(GL_COMPRESSED_TEXTURE_FORMATS, "GL_COMPRESSED_TEXTURE_FORMATS");
    _null_.put(GL_GENERATE_MIPMAP, "GL_GENERATE_MIPMAP");
    _null_.put(GL_TESS_EVALUATION_SHADER, "GL_TESS_EVALUATION_SHADER");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_WIDTH, "GL_FRAMEBUFFER_DEFAULT_WIDTH");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE");
    _null_.put(GL_DEBUG_GROUP_STACK_DEPTH, "GL_DEBUG_GROUP_STACK_DEPTH");
    _null_.put(GL_RESAMPLE_REPLICATE_SGIX, "GL_RESAMPLE_REPLICATE_SGIX");
    _null_.put(GL_QUERY_ALL_EVENT_BITS_AMD, "GL_QUERY_ALL_EVENT_BITS_AMD");
    _null_.put(GL_MAX_VIEWPORTS, "GL_MAX_VIEWPORTS");
    _null_.put(GL_SHADER_STORAGE_BARRIER_BIT, "GL_SHADER_STORAGE_BARRIER_BIT");
    _null_.put(GL_INDEX_ARRAY_TYPE, "GL_INDEX_ARRAY_TYPE");
    _null_.put(GL_INSTRUMENT_BUFFER_POINTER_SGIX, "GL_INSTRUMENT_BUFFER_POINTER_SGIX");
    _null_.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN, "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN");
    _null_.put(GL_TEXTURE_MAX_LEVEL, "GL_TEXTURE_MAX_LEVEL");
    _null_.put(GL_SRGB_READ, "GL_SRGB_READ");
    _null_.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
    _null_.put(GL_MIRROR_CLAMP_ATI, "GL_MIRROR_CLAMP_ATI");
    _null_.put(GL_RED_SCALE, "GL_RED_SCALE");
    _null_.put(GL_GEOMETRY_INPUT_TYPE, "GL_GEOMETRY_INPUT_TYPE");
    _null_.put(GL_PIXEL_GROUP_COLOR_SGIS, "GL_PIXEL_GROUP_COLOR_SGIS");
    _null_.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    _null_.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    _null_.put(GL_PATCH_DEFAULT_INNER_LEVEL, "GL_PATCH_DEFAULT_INNER_LEVEL");
    _null_.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_REFERENCED_BY_TESS_CONTROL_SHADER");
    _null_.put(GL_PROGRAM_BINARY_ANGLE, "GL_PROGRAM_BINARY_ANGLE");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    _null_.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_SCALE, "GL_POST_COLOR_MATRIX_GREEN_SCALE");
    _null_.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
    _null_.put(GL_CURRENT_VERTEX_ATTRIB, "GL_CURRENT_VERTEX_ATTRIB");
    _null_.put(GL_ALL_PIXELS_AMD, "GL_ALL_PIXELS_AMD");
    _null_.put(GL_RENDERBUFFER_FREE_MEMORY_ATI, "GL_RENDERBUFFER_FREE_MEMORY_ATI");
    _null_.put(GL_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_IMAGE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_VERTEX_SHADER, "GL_VERTEX_SHADER");
    _null_.put(GL_TEXTURE_CONSTANT_DATA_SUNX, "GL_TEXTURE_CONSTANT_DATA_SUNX");
  }
  private static void _null_29() {
    _null_.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    _null_.put(GL_ATOMIC_COUNTER_BARRIER_BIT, "GL_ATOMIC_COUNTER_BARRIER_BIT");
    _null_.put(GL_OVERLAY, "GL_OVERLAY");
    _null_.put(GL_UNPACK_CLIENT_STORAGE_APPLE, "GL_UNPACK_CLIENT_STORAGE_APPLE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
    _null_.put(GL_TOP_LEVEL_ARRAY_SIZE, "GL_TOP_LEVEL_ARRAY_SIZE");
    _null_.put(GL_COLOR_ARRAY_LIST_IBM, "GL_COLOR_ARRAY_LIST_IBM");
    _null_.put(GL_COLOR_FLOAT_APPLE, "GL_COLOR_FLOAT_APPLE");
    _null_.put(GL_MAX_DEBUG_MESSAGE_LENGTH_KHR, "GL_MAX_DEBUG_MESSAGE_LENGTH_KHR");
    _null_.put(GL_MAX_COMBINED_ATOMIC_COUNTERS, "GL_MAX_COMBINED_ATOMIC_COUNTERS");
    _null_.put(GL_COMPARE_R_TO_TEXTURE, "GL_COMPARE_R_TO_TEXTURE");
    _null_.put(GL_UNDEFINED_APPLE, "GL_UNDEFINED_APPLE");
    _null_.put(GL_REG_7_ATI, "GL_REG_7_ATI");
    _null_.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX");
    _null_.put(GL_MAX_GEOMETRY_INPUT_COMPONENTS, "GL_MAX_GEOMETRY_INPUT_COMPONENTS");
    _null_.put(GL_HISTOGRAM, "GL_HISTOGRAM");
    _null_.put(GL_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_COLOR_MATRIX_STACK_DEPTH_SGI");
    _null_.put(GL_DEPTH_TEST, "GL_DEPTH_TEST");
    _null_.put(GL_QUERY_KHR, "GL_QUERY_KHR");
    _null_.put(GL_ACCUM_BUFFER_BIT, "GL_ACCUM_BUFFER_BIT");
    _null_.put(GL_RGBA_FLOAT16_APPLE, "GL_RGBA_FLOAT16_APPLE");
    _null_.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    _null_.put(GL_MAX_COMBINED_DIMENSIONS, "GL_MAX_COMBINED_DIMENSIONS");
    _null_.put(GL_OPERAND0_RGB, "GL_OPERAND0_RGB");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_RECT, "GL_UNSIGNED_INT_SAMPLER_2D_RECT");
    _null_.put(GL_SHADER_STORAGE_BUFFER_BINDING, "GL_SHADER_STORAGE_BUFFER_BINDING");
    _null_.put(GL_UNSIGNED_SHORT_5_6_5_REV, "GL_UNSIGNED_SHORT_5_6_5_REV");
    _null_.put(GL_PACK_INVERT_MESA, "GL_PACK_INVERT_MESA");
    _null_.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    _null_.put(GL_UNIFORM_BLOCK_BINDING, "GL_UNIFORM_BLOCK_BINDING");
    _null_.put(GL_FRAMEBUFFER_RENDERABLE_LAYERED, "GL_FRAMEBUFFER_RENDERABLE_LAYERED");
    _null_.put(GL_4PASS_2_SGIS, "GL_4PASS_2_SGIS");
    _null_.put(GL_TEXTURE_GREEN_SIZE, "GL_TEXTURE_GREEN_SIZE");
    _null_.put(GL_DOUBLE_MAT2x4, "GL_DOUBLE_MAT2x4");
    _null_.put(GL_DOUBLE_MAT2x3, "GL_DOUBLE_MAT2x3");
    _null_.put(GL_INTENSITY, "GL_INTENSITY");
    _null_.put(GL_STENCIL_BACK_PASS_DEPTH_PASS, "GL_STENCIL_BACK_PASS_DEPTH_PASS");
    _null_.put(GL_DRAW_PIXELS_APPLE, "GL_DRAW_PIXELS_APPLE");
    _null_.put(GL_SRC1_COLOR, "GL_SRC1_COLOR");
    _null_.put(GL_STENCIL_BACK_FUNC, "GL_STENCIL_BACK_FUNC");
    _null_.put(GL_MAX_3D_TEXTURE_SIZE, "GL_MAX_3D_TEXTURE_SIZE");
    _null_.put(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS");
    _null_.put(GL_FRAGMENTS_INSTRUMENT_SGIX, "GL_FRAGMENTS_INSTRUMENT_SGIX");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_BIAS, "GL_POST_COLOR_MATRIX_GREEN_BIAS");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_4x4, "GL_COMPRESSED_RGBA_ASTC_4x4");
    _null_.put(GL_TRIANGLE_LIST_SUN, "GL_TRIANGLE_LIST_SUN");
  }
  private static void _null_30() {
    _null_.put(GL_COLOR_BUFFER_BIT7_QCOM, "GL_COLOR_BUFFER_BIT7_QCOM");
    _null_.put(GL_TRANSPOSE_TEXTURE_MATRIX, "GL_TRANSPOSE_TEXTURE_MATRIX");
    _null_.put(GL_UNIFORM_TYPE, "GL_UNIFORM_TYPE");
    _null_.put(GL_DEPTH_BITS, "GL_DEPTH_BITS");
    _null_.put(GL_RESCALE_NORMAL, "GL_RESCALE_NORMAL");
    _null_.put(GL_COMPILE_STATUS, "GL_COMPILE_STATUS");
    _null_.put(GL_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_DEBUG_GROUP_STACK_DEPTH_KHR");
    _null_.put(GL_TEXTURE_HEIGHT, "GL_TEXTURE_HEIGHT");
    _null_.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
    _null_.put(GL_RGB9_E5, "GL_RGB9_E5");
    _null_.put(GL_RGB_SCALE, "GL_RGB_SCALE");
    _null_.put(GL_INDEX_ARRAY, "GL_INDEX_ARRAY");
    _null_.put(GL_LINE_SMOOTH, "GL_LINE_SMOOTH");
    _null_.put(GL_QUERY_TARGET, "GL_QUERY_TARGET");
    _null_.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    _null_.put(GL_POST_CONVOLUTION_ALPHA_SCALE, "GL_POST_CONVOLUTION_ALPHA_SCALE");
    _null_.put(GL_TEXTURE_BLUE_TYPE, "GL_TEXTURE_BLUE_TYPE");
    _null_.put(GL_NORMAL_BIT_PGI, "GL_NORMAL_BIT_PGI");
    _null_.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
    _null_.put(GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX, "GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX");
    _null_.put(GL_FRACTIONAL_ODD, "GL_FRACTIONAL_ODD");
    _null_.put(GL_TEXTURE_DEFORMATION_BIT_SGIX, "GL_TEXTURE_DEFORMATION_BIT_SGIX");
    _null_.put(GL_VERTEX_ARRAY_RANGE_APPLE, "GL_VERTEX_ARRAY_RANGE_APPLE");
    _null_.put(GL_COLOR_BUFFER_BIT0_QCOM, "GL_COLOR_BUFFER_BIT0_QCOM");
    _null_.put(GL_VERTEX_PROGRAM_POINT_SIZE, "GL_VERTEX_PROGRAM_POINT_SIZE");
    _null_.put(GL_HSL_SATURATION_KHR, "GL_HSL_SATURATION_KHR");
    _null_.put(GL_MAX_LIGHTS, "GL_MAX_LIGHTS");
    _null_.put(GL_STENCIL_BUFFER_BIT, "GL_STENCIL_BUFFER_BIT");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8");
    _null_.put(GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD");
    _null_.put(GL_MAX_COMPUTE_IMAGE_UNIFORMS, "GL_MAX_COMPUTE_IMAGE_UNIFORMS");
    _null_.put(GL_LAYER_PROVOKING_VERTEX, "GL_LAYER_PROVOKING_VERTEX");
    _null_.put(GL_DEPTH_COMPONENT32_SGIX, "GL_DEPTH_COMPONENT32_SGIX");
    _null_.put(GL_SYNC_OBJECT_APPLE, "GL_SYNC_OBJECT_APPLE");
    _null_.put(GL_VERTEX_ARRAY_LIST_IBM, "GL_VERTEX_ARRAY_LIST_IBM");
    _null_.put(GL_TEXTURE0, "GL_TEXTURE0");
    _null_.put(GL_UNSIGNED_SHORT_1_5_5_5_REV, "GL_UNSIGNED_SHORT_1_5_5_5_REV");
    _null_.put(GL_TEXTURE4, "GL_TEXTURE4");
    _null_.put(GL_TEXTURE3, "GL_TEXTURE3");
    _null_.put(GL_TEXTURE2, "GL_TEXTURE2");
    _null_.put(GL_TEXTURE1, "GL_TEXTURE1");
    _null_.put(GL_TEXTURE8, "GL_TEXTURE8");
    _null_.put(GL_SAMPLER_CUBE_SHADOW, "GL_SAMPLER_CUBE_SHADOW");
    _null_.put(GL_TEXTURE7, "GL_TEXTURE7");
    _null_.put(GL_DEBUG_SOURCE_OTHER_KHR, "GL_DEBUG_SOURCE_OTHER_KHR");
    _null_.put(GL_TEXTURE6, "GL_TEXTURE6");
    _null_.put(GL_TEXTURE5, "GL_TEXTURE5");
    _null_.put(GL_DEBUG_SEVERITY_NOTIFICATION, "GL_DEBUG_SEVERITY_NOTIFICATION");
    _null_.put(GL_TEXTURE9, "GL_TEXTURE9");
    _null_.put(GL_ORDER, "GL_ORDER");
    _null_.put(GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL, "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL");
  }
  private static void _null_31() {
    _null_.put(GL_SYNC_FLAGS_APPLE, "GL_SYNC_FLAGS_APPLE");
    _null_.put(GL_FOG_COORDINATE_ARRAY_LIST_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_IBM");
    _null_.put(GL_BLEND_DST, "GL_BLEND_DST");
    _null_.put(GL_TEXTURE_STACK_DEPTH, "GL_TEXTURE_STACK_DEPTH");
    _null_.put(GL_1PASS_SGIS, "GL_1PASS_SGIS");
    _null_.put(GL_8X_BIT_ATI, "GL_8X_BIT_ATI");
    _null_.put(GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW, "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW");
    _null_.put(GL_LINEAR_SHARPEN_COLOR_SGIS, "GL_LINEAR_SHARPEN_COLOR_SGIS");
    _null_.put(GL_TRACE_ERRORS_BIT_MESA, "GL_TRACE_ERRORS_BIT_MESA");
    _null_.put(GL_STENCIL_OP_VALUE_AMD, "GL_STENCIL_OP_VALUE_AMD");
    _null_.put(GL_STATIC_READ, "GL_STATIC_READ");
    _null_.put(GL_INTENSITY8, "GL_INTENSITY8");
    _null_.put(GL_INTENSITY4, "GL_INTENSITY4");
    _null_.put(GL_SCALEBIAS_HINT_SGIX, "GL_SCALEBIAS_HINT_SGIX");
    _null_.put(GL_REG_14_ATI, "GL_REG_14_ATI");
    _null_.put(GL_DOUBLE_VEC4, "GL_DOUBLE_VEC4");
    _null_.put(GL_DOUBLE_VEC3, "GL_DOUBLE_VEC3");
    _null_.put(GL_LINE_STIPPLE_PATTERN, "GL_LINE_STIPPLE_PATTERN");
    _null_.put(GL_BUFFER_ACCESS, "GL_BUFFER_ACCESS");
    _null_.put(GL_DOUBLE_VEC2, "GL_DOUBLE_VEC2");
    _null_.put(GL_OR_REVERSE, "GL_OR_REVERSE");
    _null_.put(GL_MAX_ARRAY_TEXTURE_LAYERS, "GL_MAX_ARRAY_TEXTURE_LAYERS");
    _null_.put(GL_FULL_STIPPLE_HINT_PGI, "GL_FULL_STIPPLE_HINT_PGI");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT");
    _null_.put(GL_VERTEX_STREAM2_ATI, "GL_VERTEX_STREAM2_ATI");
    _null_.put(GL_CON_1_ATI, "GL_CON_1_ATI");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_TYPE, "GL_SECONDARY_COLOR_ARRAY_TYPE");
    _null_.put(GL_SRGB_ALPHA, "GL_SRGB_ALPHA");
    _null_.put(GL_COMPRESSED_RGBA_BPTC_UNORM, "GL_COMPRESSED_RGBA_BPTC_UNORM");
    _null_.put(GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES, "GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES");
    _null_.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    _null_.put(GL_TEXTURE_MATRIX, "GL_TEXTURE_MATRIX");
    _null_.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    _null_.put(GL_TEXTURE_COMPARE_OPERATOR_SGIX, "GL_TEXTURE_COMPARE_OPERATOR_SGIX");
    _null_.put(GL_MAX_ASYNC_HISTOGRAM_SGIX, "GL_MAX_ASYNC_HISTOGRAM_SGIX");
    _null_.put(GL_COLOR3_BIT_PGI, "GL_COLOR3_BIT_PGI");
    _null_.put(GL_MAX_COMPUTE_UNIFORM_COMPONENTS, "GL_MAX_COMPUTE_UNIFORM_COMPONENTS");
    _null_.put(GL_INVALID_INDEX, "GL_INVALID_INDEX");
    _null_.put(GL_LINEAR_CLIPMAP_LINEAR_SGIX, "GL_LINEAR_CLIPMAP_LINEAR_SGIX");
    _null_.put(GL_R32F, "GL_R32F");
    _null_.put(GL_PROXY_COLOR_TABLE, "GL_PROXY_COLOR_TABLE");
    _null_.put(GL_DEPTH_COMPONENT32F, "GL_DEPTH_COMPONENT32F");
    _null_.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_GATHER_SHADOW, "GL_TEXTURE_GATHER_SHADOW");
    _null_.put(GL_MAX_COLOR_ATTACHMENTS, "GL_MAX_COLOR_ATTACHMENTS");
    _null_.put(GL_TRANSFORM_FEEDBACK_VARYING, "GL_TRANSFORM_FEEDBACK_VARYING");
    _null_.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    _null_.put(GL_R32I, "GL_R32I");
    _null_.put(GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX");
    _null_.put(GL_TEXTURE_MAX_LEVEL_APPLE, "GL_TEXTURE_MAX_LEVEL_APPLE");
    _null_.put(GL_SAMPLER_1D_ARRAY_SHADOW, "GL_SAMPLER_1D_ARRAY_SHADOW");
    _null_.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
    _null_.put(GL_MAX_TEXTURE_STACK_DEPTH, "GL_MAX_TEXTURE_STACK_DEPTH");
    _null_.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    _null_.put(GL_TEXTURE_ENV, "GL_TEXTURE_ENV");
    _null_.put(GL_BITMAP, "GL_BITMAP");
    _null_.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    _null_.put(GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS, "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS");
  }
  private static void _null_32() {
    _null_.put(GL_VERTEX_PROGRAM_CALLBACK_MESA, "GL_VERTEX_PROGRAM_CALLBACK_MESA");
    _null_.put(GL_ALWAYS_FAST_HINT_PGI, "GL_ALWAYS_FAST_HINT_PGI");
    _null_.put(GL_NOR, "GL_NOR");
    _null_.put(GL_IMAGE_BINDING_LAYERED, "GL_IMAGE_BINDING_LAYERED");
    _null_.put(GL_PACK_MAX_COMPRESSED_SIZE_SGIX, "GL_PACK_MAX_COMPRESSED_SIZE_SGIX");
    _null_.put(GL_UNSIGNED_SHORT_8_8_APPLE, "GL_UNSIGNED_SHORT_8_8_APPLE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5");
    _null_.put(GL_RGB32UI, "GL_RGB32UI");
    _null_.put(GL_FASTEST, "GL_FASTEST");
    _null_.put(GL_4D_COLOR_TEXTURE, "GL_4D_COLOR_TEXTURE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6");
    _null_.put(GL_COLORBURN_KHR, "GL_COLORBURN_KHR");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_4x4_KHR, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR");
    _null_.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    _null_.put(GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD, "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD");
    _null_.put(GL_ALIASED_POINT_SIZE_RANGE, "GL_ALIASED_POINT_SIZE_RANGE");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_POINTER, "GL_SECONDARY_COLOR_ARRAY_POINTER");
    _null_.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS");
    _null_.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS");
    _null_.put(GL_RG16I, "GL_RG16I");
    _null_.put(GL_LUMINANCE12_ALPHA12, "GL_LUMINANCE12_ALPHA12");
    _null_.put(GL_FRACTIONAL_EVEN, "GL_FRACTIONAL_EVEN");
    _null_.put(GL_STENCIL_COMPONENTS, "GL_STENCIL_COMPONENTS");
    _null_.put(GL_POINT_SPRITE_COORD_ORIGIN, "GL_POINT_SPRITE_COORD_ORIGIN");
    _null_.put(GL_SHORT, "GL_SHORT");
    _null_.put(GL_RG16F, "GL_RG16F");
    _null_.put(GL_COLOR_RENDERABLE, "GL_COLOR_RENDERABLE");
    _null_.put(GL_COLOR_ALPHA_PAIRING_ATI, "GL_COLOR_ALPHA_PAIRING_ATI");
    _null_.put(GL_ALPHA_FLOAT16_ATI, "GL_ALPHA_FLOAT16_ATI");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
    _null_.put(GL_QUERY_OBJECT_AMD, "GL_QUERY_OBJECT_AMD");
    _null_.put(GL_REG_23_ATI, "GL_REG_23_ATI");
    _null_.put(GL_RGB8I, "GL_RGB8I");
    _null_.put(GL_PIXEL_MAP_I_TO_G_SIZE, "GL_PIXEL_MAP_I_TO_G_SIZE");
    _null_.put(GL_EYE_LINEAR, "GL_EYE_LINEAR");
    _null_.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    _null_.put(GL_RGBA16_SNORM, "GL_RGBA16_SNORM");
    _null_.put(GL_QUAD_INTENSITY8_SGIS, "GL_QUAD_INTENSITY8_SGIS");
    _null_.put(GL_VERTEX_SUBROUTINE_UNIFORM, "GL_VERTEX_SUBROUTINE_UNIFORM");
    _null_.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    _null_.put(GL_POLYGON_MODE, "GL_POLYGON_MODE");
    _null_.put(GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    _null_.put(GL_LIGHT_MODEL_LOCAL_VIEWER, "GL_LIGHT_MODEL_LOCAL_VIEWER");
    _null_.put(GL_MAX_COMPUTE_WORK_GROUP_SIZE, "GL_MAX_COMPUTE_WORK_GROUP_SIZE");
    _null_.put(GL_HALF_APPLE, "GL_HALF_APPLE");
    _null_.put(GL_INTERPOLATE, "GL_INTERPOLATE");
    _null_.put(GL_DST_COLOR, "GL_DST_COLOR");
  }
  private static void _null_33() {
    _null_.put(GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE, "GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE");
    _null_.put(GL_SHADER_BINARY_FORMATS, "GL_SHADER_BINARY_FORMATS");
    _null_.put(GL_SAMPLER_1D_SHADOW, "GL_SAMPLER_1D_SHADOW");
    _null_.put(GL_RGBA32UI, "GL_RGBA32UI");
    _null_.put(GL_RESAMPLE_REPLICATE_OML, "GL_RESAMPLE_REPLICATE_OML");
    _null_.put(GL_EYE_PLANE, "GL_EYE_PLANE");
    _null_.put(GL_DEBUG_CATEGORY_PERFORMANCE_AMD, "GL_DEBUG_CATEGORY_PERFORMANCE_AMD");
    _null_.put(GL_ONE, "GL_ONE");
    _null_.put(GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE, "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE");
    _null_.put(GL_DEBUG_OBJECT_MESA, "GL_DEBUG_OBJECT_MESA");
    _null_.put(GL_BLUE_BIT_ATI, "GL_BLUE_BIT_ATI");
    _null_.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_SIZE, "GL_UNPACK_COMPRESSED_BLOCK_SIZE");
    _null_.put(GL_RENDERBUFFER_STENCIL_SIZE, "GL_RENDERBUFFER_STENCIL_SIZE");
    _null_.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
    _null_.put(GL_TEXTURE_STENCIL_SIZE, "GL_TEXTURE_STENCIL_SIZE");
    _null_.put(GL_SPRITE_EYE_ALIGNED_SGIX, "GL_SPRITE_EYE_ALIGNED_SGIX");
    _null_.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    _null_.put(GL_POSITION, "GL_POSITION");
    _null_.put(GL_FOG_COORD_SRC, "GL_FOG_COORD_SRC");
    _null_.put(GL_FIXED, "GL_FIXED");
    _null_.put(GL_COMPRESSED_RGB_FXT1_3DFX, "GL_COMPRESSED_RGB_FXT1_3DFX");
    _null_.put(GL_STENCIL_BUFFER_BIT4_QCOM, "GL_STENCIL_BUFFER_BIT4_QCOM");
    _null_.put(GL_INDEX_ARRAY_BUFFER_BINDING, "GL_INDEX_ARRAY_BUFFER_BINDING");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR, "GL_CONTEXT_RELEASE_BEHAVIOR");
    _null_.put(GL_MULT, "GL_MULT");
    _null_.put(GL_NEAREST_MIPMAP_LINEAR, "GL_NEAREST_MIPMAP_LINEAR");
    _null_.put(GL_DEBUG_TYPE_PORTABILITY, "GL_DEBUG_TYPE_PORTABILITY");
    _null_.put(GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD, "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD");
    _null_.put(GL_EXTENSIONS, "GL_EXTENSIONS");
    _null_.put(GL_DRAW_FRAMEBUFFER_BINDING_APPLE, "GL_DRAW_FRAMEBUFFER_BINDING_APPLE");
    _null_.put(GL_RG32UI, "GL_RG32UI");
    _null_.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    _null_.put(GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE, "GL_POST_COLOR_MATRIX_ALPHA_SCALE");
    _null_.put(GL_TRANSPOSE_PROJECTION_MATRIX, "GL_TRANSPOSE_PROJECTION_MATRIX");
    _null_.put(GL_STATIC_VERTEX_ARRAY_IBM, "GL_STATIC_VERTEX_ARRAY_IBM");
    _null_.put(GL_BIAS_BIT_ATI, "GL_BIAS_BIT_ATI");
    _null_.put(GL_GENERATE_MIPMAP_HINT, "GL_GENERATE_MIPMAP_HINT");
    _null_.put(GL_UNSIGNED_INT_5_9_9_9_REV, "GL_UNSIGNED_INT_5_9_9_9_REV");
    _null_.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
    _null_.put(GL_LOSE_CONTEXT_ON_RESET_KHR, "GL_LOSE_CONTEXT_ON_RESET_KHR");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_INDEX, "GL_ATOMIC_COUNTER_BUFFER_INDEX");
    _null_.put(GL_FULL_SUPPORT, "GL_FULL_SUPPORT");
    _null_.put(GL_COLOR_MATERIAL_PARAMETER, "GL_COLOR_MATERIAL_PARAMETER");
    _null_.put(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS");
    _null_.put(GL_EQUAL, "GL_EQUAL");
    _null_.put(GL_3_BYTES, "GL_3_BYTES");
    _null_.put(GL_HARDLIGHT, "GL_HARDLIGHT");
    _null_.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES, "GL_MAX_GEOMETRY_OUTPUT_VERTICES");
    _null_.put(GL_INDEX_OFFSET, "GL_INDEX_OFFSET");
  }
  private static void _null_34() {
    _null_.put(GL_CONVOLUTION_BORDER_COLOR_HP, "GL_CONVOLUTION_BORDER_COLOR_HP");
    _null_.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR");
    _null_.put(GL_POST_CONVOLUTION_GREEN_SCALE, "GL_POST_CONVOLUTION_GREEN_SCALE");
    _null_.put(GL_SAMPLER_OBJECT_AMD, "GL_SAMPLER_OBJECT_AMD");
    _null_.put(GL_MAX_UNIFORM_LOCATIONS, "GL_MAX_UNIFORM_LOCATIONS");
    _null_.put(GL_MAX_4D_TEXTURE_SIZE_SGIS, "GL_MAX_4D_TEXTURE_SIZE_SGIS");
    _null_.put(GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE, "GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE");
    _null_.put(GL_MAX_VARYING_VECTORS, "GL_MAX_VARYING_VECTORS");
    _null_.put(GL_TEXTURE_BINDING_RECTANGLE, "GL_TEXTURE_BINDING_RECTANGLE");
    _null_.put(GL_CONTEXT_ROBUST_ACCESS, "GL_CONTEXT_ROBUST_ACCESS");
    _null_.put(GL_POINT_SMOOTH_HINT, "GL_POINT_SMOOTH_HINT");
    _null_.put(GL_INT_IMAGE_CUBE, "GL_INT_IMAGE_CUBE");
    _null_.put(GL_BUMP_TARGET_ATI, "GL_BUMP_TARGET_ATI");
    _null_.put(GL_IMAGE_SCALE_X_HP, "GL_IMAGE_SCALE_X_HP");
    _null_.put(GL_VIEW_CLASS_128_BITS, "GL_VIEW_CLASS_128_BITS");
    _null_.put(GL_UNIFORM_BLOCK, "GL_UNIFORM_BLOCK");
    _null_.put(GL_MULTISAMPLE, "GL_MULTISAMPLE");
    _null_.put(GL_LUMINANCE_ALPHA_SNORM, "GL_LUMINANCE_ALPHA_SNORM");
    _null_.put(GL_REG_10_ATI, "GL_REG_10_ATI");
    _null_.put(GL_SAMPLE_MASK_VALUE_SGIS, "GL_SAMPLE_MASK_VALUE_SGIS");
    _null_.put(GL_QUAD_LUMINANCE8_SGIS, "GL_QUAD_LUMINANCE8_SGIS");
    _null_.put(GL_DEBUG_CALLBACK_FUNCTION, "GL_DEBUG_CALLBACK_FUNCTION");
    _null_.put(GL_OFFSET, "GL_OFFSET");
    _null_.put(GL_ACCUM_GREEN_BITS, "GL_ACCUM_GREEN_BITS");
    _null_.put(GL_RGBA8, "GL_RGBA8");
    _null_.put(GL_HALF_FLOAT, "GL_HALF_FLOAT");
    _null_.put(GL_RGBA4, "GL_RGBA4");
    _null_.put(GL_RGBA2, "GL_RGBA2");
    _null_.put(GL_STREAM_DRAW, "GL_STREAM_DRAW");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_HEIGHT, "GL_UNPACK_COMPRESSED_BLOCK_HEIGHT");
    _null_.put(GL_COLOR_TABLE_INTENSITY_SIZE, "GL_COLOR_TABLE_INTENSITY_SIZE");
    _null_.put(GL_VERTEX_SHADER_INVOCATIONS, "GL_VERTEX_SHADER_INVOCATIONS");
    _null_.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS");
    _null_.put(GL_TEXTURE_IMAGE_FORMAT, "GL_TEXTURE_IMAGE_FORMAT");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR");
    _null_.put(GL_RELEASED_APPLE, "GL_RELEASED_APPLE");
    _null_.put(GL_TESS_CONTROL_SUBROUTINE_UNIFORM, "GL_TESS_CONTROL_SUBROUTINE_UNIFORM");
    _null_.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    _null_.put(GL_FLOAT16_MAT3_AMD, "GL_FLOAT16_MAT3_AMD");
    _null_.put(GL_FOG_COORD_ARRAY_STRIDE, "GL_FOG_COORD_ARRAY_STRIDE");
    _null_.put(GL_COMPUTE_TEXTURE, "GL_COMPUTE_TEXTURE");
    _null_.put(GL_PRIMITIVE_RESTART_FIXED_INDEX, "GL_PRIMITIVE_RESTART_FIXED_INDEX");
    _null_.put(GL_INTERLEAVED_ATTRIBS, "GL_INTERLEAVED_ATTRIBS");
    _null_.put(GL_TIME_ELAPSED, "GL_TIME_ELAPSED");
    _null_.put(GL_MAX_CLIP_DISTANCES, "GL_MAX_CLIP_DISTANCES");
    _null_.put(GL_GPU_OPTIMIZED_QCOM, "GL_GPU_OPTIMIZED_QCOM");
    _null_.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
    _null_.put(GL_TEXTURE_INTENSITY_TYPE, "GL_TEXTURE_INTENSITY_TYPE");
    _null_.put(GL_INTENSITY16_SNORM, "GL_INTENSITY16_SNORM");
  }
  private static void _null_35() {
    _null_.put(GL_DEPTH_CLAMP, "GL_DEPTH_CLAMP");
    _null_.put(GL_SAMPLE_COVERAGE_INVERT, "GL_SAMPLE_COVERAGE_INVERT");
    _null_.put(GL_EDGE_FLAG, "GL_EDGE_FLAG");
    _null_.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_READ_FRAMEBUFFER_ANGLE, "GL_READ_FRAMEBUFFER_ANGLE");
    _null_.put(GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX, "GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX");
    _null_.put(GL_VERTEX4_BIT_PGI, "GL_VERTEX4_BIT_PGI");
    _null_.put(GL_MAX_ATTRIB_STACK_DEPTH, "GL_MAX_ATTRIB_STACK_DEPTH");
    _null_.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    _null_.put(GL_RGB_FLOAT32_APPLE, "GL_RGB_FLOAT32_APPLE");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");
    _null_.put(GL_VERSION, "GL_VERSION");
    _null_.put(GL_STACK_UNDERFLOW, "GL_STACK_UNDERFLOW");
    _null_.put(GL_IMPLEMENTATION_COLOR_READ_FORMAT, "GL_IMPLEMENTATION_COLOR_READ_FORMAT");
    _null_.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS");
    _null_.put(GL_CON_10_ATI, "GL_CON_10_ATI");
    _null_.put(GL_RESET_NOTIFICATION_STRATEGY_KHR, "GL_RESET_NOTIFICATION_STRATEGY_KHR");
    _null_.put(GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    _null_.put(GL_ATTACHED_SHADERS, "GL_ATTACHED_SHADERS");
    _null_.put(GL_DITHER, "GL_DITHER");
    _null_.put(GL_MAT_COLOR_INDEXES_BIT_PGI, "GL_MAT_COLOR_INDEXES_BIT_PGI");
    _null_.put(GL_DEBUG_SOURCE_THIRD_PARTY, "GL_DEBUG_SOURCE_THIRD_PARTY");
    _null_.put(GL_LAYOUT_LINEAR_INTEL, "GL_LAYOUT_LINEAR_INTEL");
    _null_.put(GL_FOG, "GL_FOG");
    _null_.put(GL_FOG_START, "GL_FOG_START");
    _null_.put(GL_FOG_SPECULAR_TEXTURE_WIN, "GL_FOG_SPECULAR_TEXTURE_WIN");
    _null_.put(GL_HARDLIGHT_KHR, "GL_HARDLIGHT_KHR");
    _null_.put(GL_COLOR_MATRIX_STACK_DEPTH, "GL_COLOR_MATRIX_STACK_DEPTH");
    _null_.put(GL_YCRCB_444_SGIX, "GL_YCRCB_444_SGIX");
    _null_.put(GL_SYNC_FLAGS, "GL_SYNC_FLAGS");
    _null_.put(GL_IMAGE_2D_MULTISAMPLE, "GL_IMAGE_2D_MULTISAMPLE");
    _null_.put(GL_CON_26_ATI, "GL_CON_26_ATI");
    _null_.put(GL_RECIP_ADD_SIGNED_ALPHA_IMG, "GL_RECIP_ADD_SIGNED_ALPHA_IMG");
    _null_.put(GL_TEXTURE_WIDTH, "GL_TEXTURE_WIDTH");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH");
    _null_.put(GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT");
    _null_.put(GL_PIXEL_MAP_G_TO_G_SIZE, "GL_PIXEL_MAP_G_TO_G_SIZE");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT5_RGBA, "GL_VIEW_CLASS_S3TC_DXT5_RGBA");
    _null_.put(GL_CLAMP_VERTEX_COLOR, "GL_CLAMP_VERTEX_COLOR");
    _null_.put(GL_MAX_COLOR_TEXTURE_SAMPLES, "GL_MAX_COLOR_TEXTURE_SAMPLES");
    _null_.put(GL_CURRENT_SECONDARY_COLOR, "GL_CURRENT_SECONDARY_COLOR");
    _null_.put(GL_IMAGE_3D, "GL_IMAGE_3D");
    _null_.put(GL_COMPILE, "GL_COMPILE");
    _null_.put(GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH");
  }
  private static void _null_36() {
    _null_.put(GL_VIEW_CLASS_8_BITS, "GL_VIEW_CLASS_8_BITS");
    _null_.put(GL_LINE_BIT, "GL_LINE_BIT");
    _null_.put(GL_PACK_LSB_FIRST, "GL_PACK_LSB_FIRST");
    _null_.put(GL_REG_27_ATI, "GL_REG_27_ATI");
    _null_.put(GL_TEXTURE_COMPARE_FUNC, "GL_TEXTURE_COMPARE_FUNC");
    _null_.put(GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY, "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY");
    _null_.put(GL_WEIGHT_ARRAY_BUFFER_BINDING, "GL_WEIGHT_ARRAY_BUFFER_BINDING");
    _null_.put(GL_CON_31_ATI, "GL_CON_31_ATI");
    _null_.put(GL_PERFQUERY_DONOT_FLUSH_INTEL, "GL_PERFQUERY_DONOT_FLUSH_INTEL");
    _null_.put(GL_INVALID_ENUM, "GL_INVALID_ENUM");
    _null_.put(GL_CON_9_ATI, "GL_CON_9_ATI");
    _null_.put(GL_DRAW_BUFFER14_ATI, "GL_DRAW_BUFFER14_ATI");
    _null_.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    _null_.put(GL_TEXTURE_FORMAT_QCOM, "GL_TEXTURE_FORMAT_QCOM");
    _null_.put(GL_CURRENT_QUERY, "GL_CURRENT_QUERY");
    _null_.put(GL_ALWAYS, "GL_ALWAYS");
    _null_.put(GL_INVERT, "GL_INVERT");
    _null_.put(GL_GREEN_BIAS, "GL_GREEN_BIAS");
    _null_.put(GL_STENCIL_BACK_WRITEMASK, "GL_STENCIL_BACK_WRITEMASK");
    _null_.put(GL_READ_FRAMEBUFFER_BINDING_APPLE, "GL_READ_FRAMEBUFFER_BINDING_APPLE");
    _null_.put(GL_LUMINANCE, "GL_LUMINANCE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE");
    _null_.put(GL_DYNAMIC_STORAGE_BIT, "GL_DYNAMIC_STORAGE_BIT");
    _null_.put(GL_PACK_ROW_BYTES_APPLE, "GL_PACK_ROW_BYTES_APPLE");
    _null_.put(GL_CLIP_ORIGIN, "GL_CLIP_ORIGIN");
    _null_.put(GL_MAX_SAMPLES, "GL_MAX_SAMPLES");
    _null_.put(GL_POST_CONVOLUTION_RED_SCALE, "GL_POST_CONVOLUTION_RED_SCALE");
    _null_.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    _null_.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    _null_.put(GL_MAP2_GRID_SEGMENTS, "GL_MAP2_GRID_SEGMENTS");
    _null_.put(GL_FRAGMENT_PROGRAM_CALLBACK_MESA, "GL_FRAGMENT_PROGRAM_CALLBACK_MESA");
    _null_.put(GL_UNIFORM_BARRIER_BIT, "GL_UNIFORM_BARRIER_BIT");
    _null_.put(GL_CURRENT_COLOR, "GL_CURRENT_COLOR");
    _null_.put(GL_PROJECTION_MATRIX, "GL_PROJECTION_MATRIX");
    _null_.put(GL_NEAREST_CLIPMAP_NEAREST_SGIX, "GL_NEAREST_CLIPMAP_NEAREST_SGIX");
    _null_.put(GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL, "GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL");
    _null_.put(GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI, "GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI");
    _null_.put(GL_OR_INVERTED, "GL_OR_INVERTED");
    _null_.put(GL_CONTEXT_FLAGS, "GL_CONTEXT_FLAGS");
    _null_.put(GL_CLIP_DEPTH_MODE, "GL_CLIP_DEPTH_MODE");
    _null_.put(GL_BGR_INTEGER, "GL_BGR_INTEGER");
    _null_.put(GL_MALI_PROGRAM_BINARY_ARM, "GL_MALI_PROGRAM_BINARY_ARM");
    _null_.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS");
    _null_.put(GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD");
    _null_.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS");
    _null_.put(GL_CLIP_PLANE5_IMG, "GL_CLIP_PLANE5_IMG");
  }
  private static void _null_37() {
    _null_.put(GL_MAX_TEXTURE_SIZE, "GL_MAX_TEXTURE_SIZE");
    _null_.put(GL_CLIENT_VERTEX_ARRAY_BIT, "GL_CLIENT_VERTEX_ARRAY_BIT");
    _null_.put(GL_RENDERBUFFER_WIDTH, "GL_RENDERBUFFER_WIDTH");
    _null_.put(GL_2_BYTES, "GL_2_BYTES");
    _null_.put(GL_INDEX_ARRAY_LIST_IBM, "GL_INDEX_ARRAY_LIST_IBM");
    _null_.put(GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI, "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI");
    _null_.put(GL_DEPTH_BUFFER_BIT5_QCOM, "GL_DEPTH_BUFFER_BIT5_QCOM");
    _null_.put(GL_NEVER, "GL_NEVER");
    _null_.put(GL_IMAGE_CUBE, "GL_IMAGE_CUBE");
    _null_.put(GL_MIN_PROGRAM_TEXEL_OFFSET, "GL_MIN_PROGRAM_TEXEL_OFFSET");
    _null_.put(GL_STRICT_SCISSOR_HINT_PGI, "GL_STRICT_SCISSOR_HINT_PGI");
    _null_.put(GL_TEXTURE_MAX_LOD, "GL_TEXTURE_MAX_LOD");
    _null_.put(GL_SAMPLER_CUBE_MAP_ARRAY, "GL_SAMPLER_CUBE_MAP_ARRAY");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x12_KHR, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR");
    _null_.put(GL_MAD_ATI, "GL_MAD_ATI");
    _null_.put(GL_YCRCB_422_SGIX, "GL_YCRCB_422_SGIX");
    _null_.put(GL_STENCIL_BACK_REF, "GL_STENCIL_BACK_REF");
    _null_.put(GL_CONVOLUTION_HEIGHT, "GL_CONVOLUTION_HEIGHT");
    _null_.put(GL_ASYNC_MARKER_SGIX, "GL_ASYNC_MARKER_SGIX");
    _null_.put(GL_INTERNALFORMAT_STENCIL_SIZE, "GL_INTERNALFORMAT_STENCIL_SIZE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
    _null_.put(GL_STENCIL_BACK_FAIL_ATI, "GL_STENCIL_BACK_FAIL_ATI");
    _null_.put(GL_CLIENT_PIXEL_STORE_BIT, "GL_CLIENT_PIXEL_STORE_BIT");
    _null_.put(GL_INT_IMAGE_2D_RECT, "GL_INT_IMAGE_2D_RECT");
    _null_.put(GL_MATERIAL_SIDE_HINT_PGI, "GL_MATERIAL_SIDE_HINT_PGI");
    _null_.put(GL_TESSELLATION_FACTOR_AMD, "GL_TESSELLATION_FACTOR_AMD");
    _null_.put(GL_RG32F, "GL_RG32F");
    _null_.put(GL_PACK_ALIGNMENT, "GL_PACK_ALIGNMENT");
    _null_.put(GL_RG32I, "GL_RG32I");
    _null_.put(GL_MAX_DEBUG_LOGGED_MESSAGES_KHR, "GL_MAX_DEBUG_LOGGED_MESSAGES_KHR");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x6_KHR, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR");
    _null_.put(GL_STREAM_COPY, "GL_STREAM_COPY");
    _null_.put(GL_MINMAX_SINK, "GL_MINMAX_SINK");
    _null_.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
    _null_.put(GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS, "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_LIGHTEN_KHR, "GL_LIGHTEN_KHR");
    _null_.put(GL_VBO_FREE_MEMORY_ATI, "GL_VBO_FREE_MEMORY_ATI");
    _null_.put(GL_FEEDBACK_BUFFER_POINTER, "GL_FEEDBACK_BUFFER_POINTER");
    _null_.put(GL_COLOR_TABLE_BLUE_SIZE, "GL_COLOR_TABLE_BLUE_SIZE");
    _null_.put(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI");
    _null_.put(GL_DRAW_BUFFER3_ATI, "GL_DRAW_BUFFER3_ATI");
    _null_.put(GL_MAX_FRAMEBUFFER_HEIGHT, "GL_MAX_FRAMEBUFFER_HEIGHT");
    _null_.put(GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED, "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED");
    _null_.put(GL_RENDER_MODE, "GL_RENDER_MODE");
    _null_.put(GL_CLIP_FAR_HINT_PGI, "GL_CLIP_FAR_HINT_PGI");
    _null_.put(GL_ELEMENT_ARRAY_BARRIER_BIT, "GL_ELEMENT_ARRAY_BARRIER_BIT");
  }
  private static void _null_38() {
    _null_.put(GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS");
    _null_.put(GL_TEXTURE_HEIGHT_QCOM, "GL_TEXTURE_HEIGHT_QCOM");
    _null_.put(GL_PACK_SKIP_ROWS, "GL_PACK_SKIP_ROWS");
    _null_.put(GL_TEXTURE_POST_SPECULAR_HP, "GL_TEXTURE_POST_SPECULAR_HP");
    _null_.put(GL_RGBA32I, "GL_RGBA32I");
    _null_.put(GL_CURRENT_RASTER_DISTANCE, "GL_CURRENT_RASTER_DISTANCE");
    _null_.put(GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS, "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS");
    _null_.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT");
    _null_.put(GL_RGBA32F, "GL_RGBA32F");
    _null_.put(GL_DRAW_PIXEL_TOKEN, "GL_DRAW_PIXEL_TOKEN");
    _null_.put(GL_COLOR_CLEAR_VALUE, "GL_COLOR_CLEAR_VALUE");
    _null_.put(GL_DRAW_FRAMEBUFFER, "GL_DRAW_FRAMEBUFFER");
    _null_.put(GL_POLYGON_SMOOTH, "GL_POLYGON_SMOOTH");
    _null_.put(GL_NUM_EXTENSIONS, "GL_NUM_EXTENSIONS");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER, "GL_VERTEX_ATTRIB_ARRAY_INTEGER");
    _null_.put(GL_NUM_FRAGMENT_CONSTANTS_ATI, "GL_NUM_FRAGMENT_CONSTANTS_ATI");
    _null_.put(GL_CLAMP, "GL_CLAMP");
    _null_.put(GL_MAX_CLIP_PLANES_IMG, "GL_MAX_CLIP_PLANES_IMG");
    _null_.put(GL_DISCRETE_AMD, "GL_DISCRETE_AMD");
    _null_.put(GL_MATRIX_STRIDE, "GL_MATRIX_STRIDE");
    _null_.put(GL_BLEND_EQUATION, "GL_BLEND_EQUATION");
    _null_.put(GL_PATCH_DEFAULT_OUTER_LEVEL, "GL_PATCH_DEFAULT_OUTER_LEVEL");
    _null_.put(GL_CON_14_ATI, "GL_CON_14_ATI");
    _null_.put(GL_ACTIVE_VARIABLES, "GL_ACTIVE_VARIABLES");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR");
    _null_.put(GL_PERFMON_RESULT_AVAILABLE_AMD, "GL_PERFMON_RESULT_AVAILABLE_AMD");
    _null_.put(GL_ADD_BLEND_IMG, "GL_ADD_BLEND_IMG");
    _null_.put(GL_YCRCBA_SGIX, "GL_YCRCBA_SGIX");
    _null_.put(GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_CON_22_ATI, "GL_CON_22_ATI");
    _null_.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    _null_.put(GL_TEXTURE_FREE_MEMORY_ATI, "GL_TEXTURE_FREE_MEMORY_ATI");
    _null_.put(GL_COMPRESSED_SIGNED_RED_RGTC1, "GL_COMPRESSED_SIGNED_RED_RGTC1");
    _null_.put(GL_SHADING_LANGUAGE_VERSION, "GL_SHADING_LANGUAGE_VERSION");
    _null_.put(GL_GREEN_MAX_CLAMP_INGR, "GL_GREEN_MAX_CLAMP_INGR");
    _null_.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    _null_.put(GL_ELEMENT_ARRAY_POINTER_APPLE, "GL_ELEMENT_ARRAY_POINTER_APPLE");
    _null_.put(GL_MAX_CULL_DISTANCES, "GL_MAX_CULL_DISTANCES");
    _null_.put(GL_FOG_COORD_ARRAY, "GL_FOG_COORD_ARRAY");
    _null_.put(GL_DOUBLE_MAT4, "GL_DOUBLE_MAT4");
    _null_.put(GL_RENDERBUFFER_BLUE_SIZE, "GL_RENDERBUFFER_BLUE_SIZE");
    _null_.put(GL_COUNTER_RANGE_AMD, "GL_COUNTER_RANGE_AMD");
    _null_.put(GL_BLUE_INTEGER, "GL_BLUE_INTEGER");
    _null_.put(GL_DOUBLE_MAT3, "GL_DOUBLE_MAT3");
    _null_.put(GL_DOUBLE_MAT2, "GL_DOUBLE_MAT2");
    _null_.put(GL_STENCIL_WRITEMASK, "GL_STENCIL_WRITEMASK");
    _null_.put(GL_MAX_CONVOLUTION_WIDTH, "GL_MAX_CONVOLUTION_WIDTH");
    _null_.put(GL_TEXTURE_ALPHA_MODULATE_IMG, "GL_TEXTURE_ALPHA_MODULATE_IMG");
    _null_.put(GL_FOG_COORD_ARRAY_BUFFER_BINDING, "GL_FOG_COORD_ARRAY_BUFFER_BINDING");
    _null_.put(GL_QUAD_LUMINANCE4_SGIS, "GL_QUAD_LUMINANCE4_SGIS");
    _null_.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR");
  }
  private static void _null_39() {
    _null_.put(GL_INT_IMAGE_CUBE_MAP_ARRAY, "GL_INT_IMAGE_CUBE_MAP_ARRAY");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_CUBE, "GL_UNSIGNED_INT_SAMPLER_CUBE");
    _null_.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_STENCIL_BUFFER_BIT0_QCOM, "GL_STENCIL_BUFFER_BIT0_QCOM");
    _null_.put(GL_DEBUG_LOGGED_MESSAGES_KHR, "GL_DEBUG_LOGGED_MESSAGES_KHR");
    _null_.put(GL_ELEMENT_ARRAY_APPLE, "GL_ELEMENT_ARRAY_APPLE");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x4_KHR, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR");
    _null_.put(GL_BUMP_TEX_UNITS_ATI, "GL_BUMP_TEX_UNITS_ATI");
    _null_.put(GL_INTERNALFORMAT_GREEN_TYPE, "GL_INTERNALFORMAT_GREEN_TYPE");
    _null_.put(GL_SWIZZLE_STQ_ATI, "GL_SWIZZLE_STQ_ATI");
    _null_.put(GL_SRC1_RGB, "GL_SRC1_RGB");
    _null_.put(GL_SAMPLER_CUBE, "GL_SAMPLER_CUBE");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL, "GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL");
    _null_.put(GL_COLOR_TABLE_BLUE_SIZE_SGI, "GL_COLOR_TABLE_BLUE_SIZE_SGI");
    _null_.put(GL_EQUIV, "GL_EQUIV");
    _null_.put(GL_INDEX_ARRAY_POINTER, "GL_INDEX_ARRAY_POINTER");
    _null_.put(GL_CAVEAT_SUPPORT, "GL_CAVEAT_SUPPORT");
    _null_.put(GL_REG_3_ATI, "GL_REG_3_ATI");
    _null_.put(GL_PERFMON_GLOBAL_MODE_QCOM, "GL_PERFMON_GLOBAL_MODE_QCOM");
    _null_.put(GL_ENABLE_BIT, "GL_ENABLE_BIT");
    _null_.put(GL_LOW_FLOAT, "GL_LOW_FLOAT");
    _null_.put(GL_DEPTH_TEXTURE_MODE, "GL_DEPTH_TEXTURE_MODE");
    _null_.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    _null_.put(GL_STORAGE_PRIVATE_APPLE, "GL_STORAGE_PRIVATE_APPLE");
    _null_.put(GL_TEXTURE_RESIDENT, "GL_TEXTURE_RESIDENT");
    _null_.put(GL_MAX_COMPUTE_WORK_GROUP_COUNT, "GL_MAX_COMPUTE_WORK_GROUP_COUNT");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN, "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL, "GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL");
    _null_.put(GL_CONTEXT_ROBUST_ACCESS_KHR, "GL_CONTEXT_ROBUST_ACCESS_KHR");
    _null_.put(GL_PRIMITIVE_BOUNDING_BOX, "GL_PRIMITIVE_BOUNDING_BOX");
    _null_.put(GL_ELEMENT_ARRAY_TYPE_ATI, "GL_ELEMENT_ARRAY_TYPE_ATI");
    _null_.put(GL_EXP, "GL_EXP");
    _null_.put(GL_LINE_SMOOTH_HINT, "GL_LINE_SMOOTH_HINT");
    _null_.put(GL_VIEW_CLASS_64_BITS, "GL_VIEW_CLASS_64_BITS");
    _null_.put(GL_CLAMP_TO_EDGE_SGIS, "GL_CLAMP_TO_EDGE_SGIS");
    _null_.put(GL_DEPTH_ATTACHMENT, "GL_DEPTH_ATTACHMENT");
    _null_.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH, "GL_MAX_COLOR_MATRIX_STACK_DEPTH");
    _null_.put(GL_COLOR_ARRAY_SIZE, "GL_COLOR_ARRAY_SIZE");
    _null_.put(GL_OBJECT_LINE_SGIS, "GL_OBJECT_LINE_SGIS");
    _null_.put(GL_DRAW_FRAMEBUFFER_APPLE, "GL_DRAW_FRAMEBUFFER_APPLE");
    _null_.put(GL_CURRENT_NORMAL, "GL_CURRENT_NORMAL");
    _null_.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS");
    _null_.put(GL_AND_REVERSE, "GL_AND_REVERSE");
    _null_.put(GL_TRUE, "GL_TRUE");
    _null_.put(GL_MAX_ASYNC_DRAW_PIXELS_SGIX, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX");
    _null_.put(GL_CON_18_ATI, "GL_CON_18_ATI");
    _null_.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    _null_.put(GL_MIN_MAP_BUFFER_ALIGNMENT, "GL_MIN_MAP_BUFFER_ALIGNMENT");
    _null_.put(GL_BLEND_SRC_RGB, "GL_BLEND_SRC_RGB");
    _null_.put(GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH");
    _null_.put(GL_HISTOGRAM_LUMINANCE_SIZE, "GL_HISTOGRAM_LUMINANCE_SIZE");
    _null_.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    _null_.put(GL_DRAW_BUFFER10_ATI, "GL_DRAW_BUFFER10_ATI");
    _null_.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS");
    _null_.put(GL_COMPRESSED_RGBA, "GL_COMPRESSED_RGBA");
    _null_.put(GL_CON_5_ATI, "GL_CON_5_ATI");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE");
    _null_.put(GL_FORMAT_SUBSAMPLE_244_244_OML, "GL_FORMAT_SUBSAMPLE_244_244_OML");
    _null_.put(GL_BLEND_COLOR, "GL_BLEND_COLOR");
    _null_.put(GL_SIGNALED_APPLE, "GL_SIGNALED_APPLE");
    _null_.put(GL_DEPTH_BIAS, "GL_DEPTH_BIAS");
    _null_.put(GL_REG_31_ATI, "GL_REG_31_ATI");
  }
  private static void _null_40() {
    _null_.put(GL_STENCIL_BACK_FUNC_ATI, "GL_STENCIL_BACK_FUNC_ATI");
    _null_.put(GL_HISTOGRAM_SINK, "GL_HISTOGRAM_SINK");
    _null_.put(GL_DEPTH_FUNC, "GL_DEPTH_FUNC");
    _null_.put(GL_INT_IMAGE_1D_ARRAY, "GL_INT_IMAGE_1D_ARRAY");
    _null_.put(GL_TEXTURE_VIEW_NUM_LEVELS, "GL_TEXTURE_VIEW_NUM_LEVELS");
    _null_.put(GL_PROGRAM_INPUT, "GL_PROGRAM_INPUT");
    _null_.put(GL_MODULATE_COLOR_IMG, "GL_MODULATE_COLOR_IMG");
    _null_.put(GL_FILL, "GL_FILL");
    _null_.put(GL_MAX_RENDERBUFFER_SIZE, "GL_MAX_RENDERBUFFER_SIZE");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_BIAS, "GL_POST_COLOR_MATRIX_BLUE_BIAS");
    _null_.put(GL_IMAGE_CLASS_1_X_32, "GL_IMAGE_CLASS_1_X_32");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10");
    _null_.put(GL_BUFFER_IMMUTABLE_STORAGE, "GL_BUFFER_IMMUTABLE_STORAGE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS");
    _null_.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
    _null_.put(GL_FLOAT16_MAT4x3_AMD, "GL_FLOAT16_MAT4x3_AMD");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x10, "GL_COMPRESSED_RGBA_ASTC_10x10");
    _null_.put(GL_QUADS, "GL_QUADS");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_SCALE, "GL_POST_COLOR_MATRIX_BLUE_SCALE");
    _null_.put(GL_POINT_DISTANCE_ATTENUATION, "GL_POINT_DISTANCE_ATTENUATION");
    _null_.put(GL_SAMPLE_COVERAGE, "GL_SAMPLE_COVERAGE");
    _null_.put(GL_BUFFER_OBJECT_APPLE, "GL_BUFFER_OBJECT_APPLE");
    _null_.put(GL_DYNAMIC_ATI, "GL_DYNAMIC_ATI");
    _null_.put(GL_ALPHA_MAX_SGIX, "GL_ALPHA_MAX_SGIX");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_START, "GL_ATOMIC_COUNTER_BUFFER_START");
    _null_.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
    _null_.put(GL_LINEAR_DETAIL_COLOR_SGIS, "GL_LINEAR_DETAIL_COLOR_SGIS");
    _null_.put(GL_DUAL_INTENSITY16_SGIS, "GL_DUAL_INTENSITY16_SGIS");
    _null_.put(GL_BUFFER_MAP_POINTER, "GL_BUFFER_MAP_POINTER");
    _null_.put(GL_CONTEXT_LOST_WEBGL, "GL_CONTEXT_LOST_WEBGL");
    _null_.put(GL_LIST_BASE, "GL_LIST_BASE");
    _null_.put(GL_SPOT_EXPONENT, "GL_SPOT_EXPONENT");
    _null_.put(GL_MAX_LABEL_LENGTH, "GL_MAX_LABEL_LENGTH");
    _null_.put(GL_NAME_STACK_DEPTH, "GL_NAME_STACK_DEPTH");
    _null_.put(GL_SUB_ATI, "GL_SUB_ATI");
    _null_.put(GL_IMAGE_CLASS_1_X_16, "GL_IMAGE_CLASS_1_X_16");
    _null_.put(GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE, "GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE");
    _null_.put(GL_PIXEL_MAP_G_TO_G, "GL_PIXEL_MAP_G_TO_G");
    _null_.put(GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET");
    _null_.put(GL_INDEX, "GL_INDEX");
    _null_.put(GL_LUMINANCE_FLOAT16_APPLE, "GL_LUMINANCE_FLOAT16_APPLE");
    _null_.put(GL_DRAW_BUFFER14, "GL_DRAW_BUFFER14");
    _null_.put(GL_DRAW_BUFFER15, "GL_DRAW_BUFFER15");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT1_QCOM, "GL_MULTISAMPLE_BUFFER_BIT1_QCOM");
    _null_.put(GL_VERTEX_STREAM5_ATI, "GL_VERTEX_STREAM5_ATI");
    _null_.put(GL_DRAW_BUFFER10, "GL_DRAW_BUFFER10");
    _null_.put(GL_DRAW_BUFFER11, "GL_DRAW_BUFFER11");
    _null_.put(GL_CUBIC_IMG, "GL_CUBIC_IMG");
    _null_.put(GL_DRAW_BUFFER12, "GL_DRAW_BUFFER12");
    _null_.put(GL_RED_MAX_CLAMP_INGR, "GL_RED_MAX_CLAMP_INGR");
    _null_.put(GL_DRAW_BUFFER13, "GL_DRAW_BUFFER13");
    _null_.put(GL_SWIZZLE_STRQ_ATI, "GL_SWIZZLE_STRQ_ATI");
    _null_.put(GL_BUMP_NUM_TEX_UNITS_ATI, "GL_BUMP_NUM_TEX_UNITS_ATI");
    _null_.put(GL_TEXTURE_VIEW_NUM_LAYERS, "GL_TEXTURE_VIEW_NUM_LAYERS");
    _null_.put(GL_INSTRUMENT_MEASUREMENTS_SGIX, "GL_INSTRUMENT_MEASUREMENTS_SGIX");
    _null_.put(GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS, "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS");
  }
  private static void _null_41() {
    _null_.put(GL_CLIP_PLANE1_IMG, "GL_CLIP_PLANE1_IMG");
    _null_.put(GL_VERTEX_ARRAY_STORAGE_HINT_APPLE, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE");
    _null_.put(GL_MAX_COMPUTE_UNIFORM_BLOCKS, "GL_MAX_COMPUTE_UNIFORM_BLOCKS");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_ANGLE, "GL_FRAMEBUFFER_ATTACHMENT_ANGLE");
    _null_.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT");
    _null_.put(GL_MIN_SAMPLE_SHADING_VALUE, "GL_MIN_SAMPLE_SHADING_VALUE");
    _null_.put(GL_PROXY_TEXTURE_2D, "GL_PROXY_TEXTURE_2D");
    _null_.put(GL_DEPTH, "GL_DEPTH");
    _null_.put(GL_FACTOR_MIN_AMD, "GL_FACTOR_MIN_AMD");
    _null_.put(GL_SAMPLE_BUFFERS, "GL_SAMPLE_BUFFERS");
    _null_.put(GL_IMAGE_CLASS_4_X_16, "GL_IMAGE_CLASS_4_X_16");
    _null_.put(GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR, "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR");
    _null_.put(GL_COMPRESSED_RGB, "GL_COMPRESSED_RGB");
    _null_.put(GL_CLIENT_ALL_ATTRIB_BITS, "GL_CLIENT_ALL_ATTRIB_BITS");
    _null_.put(GL_MAX_FRAGMENT_UNIFORM_BLOCKS, "GL_MAX_FRAGMENT_UNIFORM_BLOCKS");
    _null_.put(GL_COLOR_TABLE_FORMAT, "GL_COLOR_TABLE_FORMAT");
    _null_.put(GL_FOG_FUNC_POINTS_SGIS, "GL_FOG_FUNC_POINTS_SGIS");
    _null_.put(GL_PROXY_TEXTURE_3D, "GL_PROXY_TEXTURE_3D");
    _null_.put(GL_COLOR_LOGIC_OP, "GL_COLOR_LOGIC_OP");
    _null_.put(GL_CLIP_DISTANCE6_APPLE, "GL_CLIP_DISTANCE6_APPLE");
    _null_.put(GL_INTERNALFORMAT_SUPPORTED, "GL_INTERNALFORMAT_SUPPORTED");
    _null_.put(GL_UNSIGNED_INT_IMAGE_BUFFER, "GL_UNSIGNED_INT_IMAGE_BUFFER");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG, "GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG");
    _null_.put(GL_CURRENT_RASTER_COLOR, "GL_CURRENT_RASTER_COLOR");
    _null_.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    _null_.put(GL_MAX_DEBUG_MESSAGE_LENGTH_AMD, "GL_MAX_DEBUG_MESSAGE_LENGTH_AMD");
    _null_.put(GL_READ_ONLY, "GL_READ_ONLY");
    _null_.put(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING");
    _null_.put(GL_ACCUM, "GL_ACCUM");
    _null_.put(GL_CONTEXT_FLAG_DEBUG_BIT, "GL_CONTEXT_FLAG_DEBUG_BIT");
    _null_.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS");
    _null_.put(GL_TEXTURE_ENV_BIAS_SGIX, "GL_TEXTURE_ENV_BIAS_SGIX");
    _null_.put(GL_TRIANGLES_ADJACENCY, "GL_TRIANGLES_ADJACENCY");
    _null_.put(GL_CLIP_DISTANCE7_APPLE, "GL_CLIP_DISTANCE7_APPLE");
    _null_.put(GL_NORMAL_ARRAY_TYPE, "GL_NORMAL_ARRAY_TYPE");
    _null_.put(GL_PROXY_TEXTURE_1D, "GL_PROXY_TEXTURE_1D");
    _null_.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X");
    _null_.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z");
    _null_.put(GL_IS_ROW_MAJOR, "GL_IS_ROW_MAJOR");
    _null_.put(GL_INCR_WRAP, "GL_INCR_WRAP");
    _null_.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y");
    _null_.put(GL_QUERY_RESULT, "GL_QUERY_RESULT");
    _null_.put(GL_MAX_FRAGMENT_INPUT_COMPONENTS, "GL_MAX_FRAGMENT_INPUT_COMPONENTS");
    _null_.put(GL_TEXTURE_GEN_Q, "GL_TEXTURE_GEN_Q");
    _null_.put(GL_TEXTURE_GEN_R, "GL_TEXTURE_GEN_R");
    _null_.put(GL_LUMINANCE12_ALPHA4, "GL_LUMINANCE12_ALPHA4");
    _null_.put(GL_TEXTURE_GEN_S, "GL_TEXTURE_GEN_S");
    _null_.put(GL_COMBINE, "GL_COMBINE");
    _null_.put(GL_TEXTURE_GEN_T, "GL_TEXTURE_GEN_T");
    _null_.put(GL_CLIP_DISTANCE1_APPLE, "GL_CLIP_DISTANCE1_APPLE");
  }
  private static void _null_42() {
    _null_.put(GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL, "GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL");
    _null_.put(GL_REFERENCE_PLANE_EQUATION_SGIX, "GL_REFERENCE_PLANE_EQUATION_SGIX");
    _null_.put(GL_TESS_CONTROL_OUTPUT_VERTICES, "GL_TESS_CONTROL_OUTPUT_VERTICES");
    _null_.put(GL_REG_18_ATI, "GL_REG_18_ATI");
    _null_.put(GL_CONTEXT_FLAG_NO_ERROR_BIT, "GL_CONTEXT_FLAG_NO_ERROR_BIT");
    _null_.put(GL_TEXTURE_COMPRESSED_IMAGE_SIZE, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE");
    _null_.put(GL_COMPRESSED_SRGB, "GL_COMPRESSED_SRGB");
    _null_.put(GL_COLOR_TABLE_LUMINANCE_SIZE, "GL_COLOR_TABLE_LUMINANCE_SIZE");
    _null_.put(GL_CLIP_DISTANCE2_APPLE, "GL_CLIP_DISTANCE2_APPLE");
    _null_.put(GL_TEXTURE_LUMINANCE_TYPE, "GL_TEXTURE_LUMINANCE_TYPE");
    _null_.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    _null_.put(GL_MAX_ACTIVE_LIGHTS_SGIX, "GL_MAX_ACTIVE_LIGHTS_SGIX");
    _null_.put(GL_QUERY_BY_REGION_WAIT_INVERTED, "GL_QUERY_BY_REGION_WAIT_INVERTED");
    _null_.put(GL_PN_TRIANGLES_NORMAL_MODE_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_ATI");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE");
    _null_.put(GL_OCCLUSION_QUERY_EVENT_MASK_AMD, "GL_OCCLUSION_QUERY_EVENT_MASK_AMD");
    _null_.put(GL_CLIP_DISTANCE3_APPLE, "GL_CLIP_DISTANCE3_APPLE");
    _null_.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_UNSIGNED_INT_24_8, "GL_UNSIGNED_INT_24_8");
    _null_.put(GL_ALPHA_SNORM, "GL_ALPHA_SNORM");
    _null_.put(GL_PROXY_TEXTURE_2D_ARRAY, "GL_PROXY_TEXTURE_2D_ARRAY");
    _null_.put(GL_COMPRESSED_RED, "GL_COMPRESSED_RED");
    _null_.put(GL_DETAIL_TEXTURE_2D_SGIS, "GL_DETAIL_TEXTURE_2D_SGIS");
    _null_.put(GL_IMAGE_CLASS_4_X_32, "GL_IMAGE_CLASS_4_X_32");
    _null_.put(GL_OVERLAY_KHR, "GL_OVERLAY_KHR");
    _null_.put(GL_RED_BIAS, "GL_RED_BIAS");
    _null_.put(GL_TEXTURE_DEPTH, "GL_TEXTURE_DEPTH");
    _null_.put(GL_IMAGE_1D, "GL_IMAGE_1D");
    _null_.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");
    _null_.put(GL_MAX_MODELVIEW_STACK_DEPTH, "GL_MAX_MODELVIEW_STACK_DEPTH");
    _null_.put(GL_DISPATCH_INDIRECT_BUFFER_BINDING, "GL_DISPATCH_INDIRECT_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_OBJECT_VALID_QCOM, "GL_TEXTURE_OBJECT_VALID_QCOM");
    _null_.put(GL_COMPRESSED_SIGNED_RG_RGTC2, "GL_COMPRESSED_SIGNED_RG_RGTC2");
    _null_.put(GL_TESS_CONTROL_SHADER, "GL_TESS_CONTROL_SHADER");
    _null_.put(GL_COLOR_INDEX, "GL_COLOR_INDEX");
    _null_.put(GL_MAX_ELEMENTS_INDICES, "GL_MAX_ELEMENTS_INDICES");
    _null_.put(GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX, "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX");
    _null_.put(GL_SAMPLER_2D_RECT, "GL_SAMPLER_2D_RECT");
    _null_.put(GL_STENCIL_INDEX16, "GL_STENCIL_INDEX16");
    _null_.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    _null_.put(GL_IMAGE_2D, "GL_IMAGE_2D");
    _null_.put(GL_DEPTH_BUFFER_BIT2_QCOM, "GL_DEPTH_BUFFER_BIT2_QCOM");
    _null_.put(GL_REFERENCED_BY_FRAGMENT_SHADER, "GL_REFERENCED_BY_FRAGMENT_SHADER");
    _null_.put(GL_VERSION_ES_CL_1_1, "GL_VERSION_ES_CL_1_1");
    _null_.put(GL_VERSION_ES_CL_1_0, "GL_VERSION_ES_CL_1_0");
    _null_.put(GL_INTERNALFORMAT_BLUE_SIZE, "GL_INTERNALFORMAT_BLUE_SIZE");
    _null_.put(GL_3D, "GL_3D");
  }
  private static void _null_43() {
    _null_.put(GL_DEBUG_TYPE_POP_GROUP, "GL_DEBUG_TYPE_POP_GROUP");
    _null_.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    _null_.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    _null_.put(GL_TRACE_MASK_MESA, "GL_TRACE_MASK_MESA");
    _null_.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS");
    _null_.put(GL_RENDERBUFFER_BINDING, "GL_RENDERBUFFER_BINDING");
    _null_.put(GL_COLOR_BUFFER_BIT, "GL_COLOR_BUFFER_BIT");
    _null_.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    _null_.put(GL_POINT_SIZE_RANGE, "GL_POINT_SIZE_RANGE");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_INDEX, "GL_TRANSFORM_FEEDBACK_BUFFER_INDEX");
    _null_.put(GL_GREEN_SCALE, "GL_GREEN_SCALE");
    _null_.put(GL_COLOR_TABLE_LUMINANCE_SIZE_SGI, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI");
    _null_.put(GL_TEXTURE_RED_SIZE, "GL_TEXTURE_RED_SIZE");
    _null_.put(GL_LUMINANCE8_SNORM, "GL_LUMINANCE8_SNORM");
    _null_.put(GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x6_KHR, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR");
    _null_.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    _null_.put(GL_TEXTURE_CUBE_MAP_SEAMLESS, "GL_TEXTURE_CUBE_MAP_SEAMLESS");
    _null_.put(GL_REG_20_ATI, "GL_REG_20_ATI");
    _null_.put(GL_DEBUG_SEVERITY_LOW_KHR, "GL_DEBUG_SEVERITY_LOW_KHR");
    _null_.put(GL_VERTEX_ARRAY_SIZE, "GL_VERTEX_ARRAY_SIZE");
    _null_.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    _null_.put(GL_UNIFORM_IS_ROW_MAJOR, "GL_UNIFORM_IS_ROW_MAJOR");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_SIZE, "GL_PACK_COMPRESSED_BLOCK_SIZE");
    _null_.put(GL_UNIFORM_BLOCK_INDEX, "GL_UNIFORM_BLOCK_INDEX");
    _null_.put(GL_DEBUG_CATEGORY_OTHER_AMD, "GL_DEBUG_CATEGORY_OTHER_AMD");
    _null_.put(GL_DUAL_LUMINANCE12_SGIS, "GL_DUAL_LUMINANCE12_SGIS");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES");
    _null_.put(GL_TEXTURE_BASE_LEVEL, "GL_TEXTURE_BASE_LEVEL");
    _null_.put(GL_ELEMENT_ARRAY_ATI, "GL_ELEMENT_ARRAY_ATI");
    _null_.put(GL_SPRITE_TRANSLATION_SGIX, "GL_SPRITE_TRANSLATION_SGIX");
    _null_.put(GL_COUNTER_TYPE_AMD, "GL_COUNTER_TYPE_AMD");
    _null_.put(GL_REPLACE_OLDEST_SUN, "GL_REPLACE_OLDEST_SUN");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER");
    _null_.put(GL_NORMAL_ARRAY, "GL_NORMAL_ARRAY");
    _null_.put(GL_CONSTANT_BORDER_HP, "GL_CONSTANT_BORDER_HP");
    _null_.put(GL_MAX_LIST_NESTING, "GL_MAX_LIST_NESTING");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG");
    _null_.put(GL_BUFFER_UPDATE_BARRIER_BIT, "GL_BUFFER_UPDATE_BARRIER_BIT");
    _null_.put(GL_BLUE_MIN_CLAMP_INGR, "GL_BLUE_MIN_CLAMP_INGR");
    _null_.put(GL_NUM_INSTRUCTIONS_TOTAL_ATI, "GL_NUM_INSTRUCTIONS_TOTAL_ATI");
    _null_.put(GL_RGBA_MODE, "GL_RGBA_MODE");
  }
  private static void _null_44() {
    _null_.put(GL_SECONDARY_COLOR_ARRAY_STRIDE, "GL_SECONDARY_COLOR_ARRAY_STRIDE");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER");
    _null_.put(GL_RGB16I, "GL_RGB16I");
    _null_.put(GL_POST_CONVOLUTION_ALPHA_BIAS, "GL_POST_CONVOLUTION_ALPHA_BIAS");
    _null_.put(GL_FRAGMENT_PROGRAM_POSITION_MESA, "GL_FRAGMENT_PROGRAM_POSITION_MESA");
    _null_.put(GL_COMPRESSED_R11_EAC, "GL_COMPRESSED_R11_EAC");
    _null_.put(GL_DEPTH_COMPONENT24_SGIX, "GL_DEPTH_COMPONENT24_SGIX");
    _null_.put(GL_RGB16F, "GL_RGB16F");
    _null_.put(GL_COLOR_MATRIX_SGI, "GL_COLOR_MATRIX_SGI");
    _null_.put(GL_RGBA4_S3TC, "GL_RGBA4_S3TC");
    _null_.put(GL_COLOR_BUFFER_BIT6_QCOM, "GL_COLOR_BUFFER_BIT6_QCOM");
    _null_.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD");
    _null_.put(GL_MAX_VERTEX_ATTRIB_STRIDE, "GL_MAX_VERTEX_ATTRIB_STRIDE");
    _null_.put(GL_MIRRORED_REPEAT, "GL_MIRRORED_REPEAT");
    _null_.put(GL_STATE_RESTORE, "GL_STATE_RESTORE");
    _null_.put(GL_TEXTURE_VIEW_MIN_LEVEL, "GL_TEXTURE_VIEW_MIN_LEVEL");
    _null_.put(GL_LIGHTING_BIT, "GL_LIGHTING_BIT");
    _null_.put(GL_AUTO_GENERATE_MIPMAP, "GL_AUTO_GENERATE_MIPMAP");
    _null_.put(GL_REG_11_ATI, "GL_REG_11_ATI");
    _null_.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    _null_.put(GL_MAX_TEXTURE_LOD_BIAS, "GL_MAX_TEXTURE_LOD_BIAS");
    _null_.put(GL_VERTEX_STREAM1_ATI, "GL_VERTEX_STREAM1_ATI");
    _null_.put(GL_BOOL, "GL_BOOL");
    _null_.put(GL_DUDV_ATI, "GL_DUDV_ATI");
    _null_.put(GL_COLOR_ARRAY_STRIDE, "GL_COLOR_ARRAY_STRIDE");
    _null_.put(GL_ELEMENT_ARRAY_BUFFER_BINDING, "GL_ELEMENT_ARRAY_BUFFER_BINDING");
    _null_.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_TYPE, "GL_VERTEX_ATTRIB_ARRAY_TYPE");
    _null_.put(GL_COMPLETION_STATUS_KHR, "GL_COMPLETION_STATUS_KHR");
    _null_.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    _null_.put(GL_PRIMITIVE_RESTART_INDEX, "GL_PRIMITIVE_RESTART_INDEX");
    _null_.put(GL_EDGEFLAG_BIT_PGI, "GL_EDGEFLAG_BIT_PGI");
    _null_.put(GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX, "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    _null_.put(GL_DUAL_INTENSITY8_SGIS, "GL_DUAL_INTENSITY8_SGIS");
    _null_.put(GL_DEPTH_BUFFER_BIT3_QCOM, "GL_DEPTH_BUFFER_BIT3_QCOM");
    _null_.put(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS");
    _null_.put(GL_HSL_LUMINOSITY_KHR, "GL_HSL_LUMINOSITY_KHR");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_DEPTH, "GL_PACK_COMPRESSED_BLOCK_DEPTH");
    _null_.put(GL_MULTISAMPLE_3DFX, "GL_MULTISAMPLE_3DFX");
    _null_.put(GL_REPLACE_MIDDLE_SUN, "GL_REPLACE_MIDDLE_SUN");
    _null_.put(GL_BLEND_SRC, "GL_BLEND_SRC");
    _null_.put(GL_HIGH_INT, "GL_HIGH_INT");
    _null_.put(GL_FOG_COORDINATE_SOURCE, "GL_FOG_COORDINATE_SOURCE");
    _null_.put(GL_DECR, "GL_DECR");
    _null_.put(GL_DEPTH_COMPONENT32, "GL_DEPTH_COMPONENT32");
    _null_.put(GL_MAX_VERTEX_OUTPUT_COMPONENTS, "GL_MAX_VERTEX_OUTPUT_COMPONENTS");
  }
  private static void _null_45() {
    _null_.put(GL_ATC_RGBA_EXPLICIT_ALPHA_AMD, "GL_ATC_RGBA_EXPLICIT_ALPHA_AMD");
    _null_.put(GL_VIEW_CLASS_96_BITS, "GL_VIEW_CLASS_96_BITS");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT6_QCOM, "GL_MULTISAMPLE_BUFFER_BIT6_QCOM");
    _null_.put(GL_BLUE_SCALE, "GL_BLUE_SCALE");
    _null_.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    _null_.put(GL_IMAGE_PIXEL_FORMAT, "GL_IMAGE_PIXEL_FORMAT");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER");
    _null_.put(GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM, "GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM");
    _null_.put(GL_BLEND_SRC_ALPHA, "GL_BLEND_SRC_ALPHA");
    _null_.put(GL_IMAGE_TRANSFORM_2D_HP, "GL_IMAGE_TRANSFORM_2D_HP");
    _null_.put(GL_MAX_VERTEX_ATTRIBS, "GL_MAX_VERTEX_ATTRIBS");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_COMPONENTS, "GL_TEXTURE_COMPONENTS");
    _null_.put(GL_TEXTURE_COMPRESSED, "GL_TEXTURE_COMPRESSED");
    _null_.put(GL_CON_29_ATI, "GL_CON_29_ATI");
    _null_.put(GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI, "GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI");
    _null_.put(GL_RED_SNORM, "GL_RED_SNORM");
    _null_.put(GL_UNSIGNED_SHORT_4_4_4_4, "GL_UNSIGNED_SHORT_4_4_4_4");
    _null_.put(GL_FOG_COORD, "GL_FOG_COORD");
    _null_.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG");
    _null_.put(GL_STENCIL_PASS_DEPTH_FAIL, "GL_STENCIL_PASS_DEPTH_FAIL");
    _null_.put(GL_MAX_FOG_FUNC_POINTS_SGIS, "GL_MAX_FOG_FUNC_POINTS_SGIS");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG");
    _null_.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_REG_4_ATI, "GL_REG_4_ATI");
    _null_.put(GL_SAMPLE_MASK, "GL_SAMPLE_MASK");
    _null_.put(GL_UNSIGNED_BYTE_2_3_3_REV, "GL_UNSIGNED_BYTE_2_3_3_REV");
    _null_.put(GL_3D_COLOR, "GL_3D_COLOR");
    _null_.put(GL_TIMEOUT_IGNORED, "GL_TIMEOUT_IGNORED");
    _null_.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    _null_.put(GL_TEXTURE_COORD_ARRAY_SIZE, "GL_TEXTURE_COORD_ARRAY_SIZE");
    _null_.put(GL_SWIZZLE_STR_DR_ATI, "GL_SWIZZLE_STR_DR_ATI");
    _null_.put(GL_DEBUG_SEVERITY_HIGH_AMD, "GL_DEBUG_SEVERITY_HIGH_AMD");
    _null_.put(GL_LINK_STATUS, "GL_LINK_STATUS");
    _null_.put(GL_SAMPLER_KHR, "GL_SAMPLER_KHR");
    _null_.put(GL_ALPHA16_SNORM, "GL_ALPHA16_SNORM");
    _null_.put(GL_LINE_WIDTH, "GL_LINE_WIDTH");
    _null_.put(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_UNSIGNED_INT_8_24_REV_MESA, "GL_UNSIGNED_INT_8_24_REV_MESA");
    _null_.put(GL_CLIPPING_OUTPUT_PRIMITIVES, "GL_CLIPPING_OUTPUT_PRIMITIVES");
    _null_.put(GL_RESAMPLE_DECIMATE_OML, "GL_RESAMPLE_DECIMATE_OML");
  }
  private static void _null_46() {
    _null_.put(GL_VERTEX_ATTRIB_MAP2_APPLE, "GL_VERTEX_ATTRIB_MAP2_APPLE");
    _null_.put(GL_DEPTH_COMPONENT24, "GL_DEPTH_COMPONENT24");
    _null_.put(GL_DEFORMATIONS_MASK_SGIX, "GL_DEFORMATIONS_MASK_SGIX");
    _null_.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
    _null_.put(GL_SPIR_V_BINARY, "GL_SPIR_V_BINARY");
    _null_.put(GL_MODELVIEW, "GL_MODELVIEW");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER");
    _null_.put(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, "GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL");
    _null_.put(GL_QUERY_NO_WAIT, "GL_QUERY_NO_WAIT");
    _null_.put(GL_CON_2_ATI, "GL_CON_2_ATI");
    _null_.put(GL_TEXTURE_PRIORITY, "GL_TEXTURE_PRIORITY");
    _null_.put(GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM, "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_PROXY_HISTOGRAM, "GL_PROXY_HISTOGRAM");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE");
    _null_.put(GL_MAX_DRAW_BUFFERS_ATI, "GL_MAX_DRAW_BUFFERS_ATI");
    _null_.put(GL_DEPTH_COMPONENT16, "GL_DEPTH_COMPONENT16");
    _null_.put(GL_SPRITE_AXIS_SGIX, "GL_SPRITE_AXIS_SGIX");
    _null_.put(GL_DUAL_LUMINANCE8_SGIS, "GL_DUAL_LUMINANCE8_SGIS");
    _null_.put(GL_CW, "GL_CW");
    _null_.put(GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX, "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX");
    _null_.put(GL_BGRA_IMG, "GL_BGRA_IMG");
    _null_.put(GL_EXP2, "GL_EXP2");
    _null_.put(GL_POLYGON_TOKEN, "GL_POLYGON_TOKEN");
    _null_.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
    _null_.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    _null_.put(GL_TEXTURE_DEPTH_QCOM, "GL_TEXTURE_DEPTH_QCOM");
    _null_.put(GL_BUFFER_VARIABLE, "GL_BUFFER_VARIABLE");
    _null_.put(GL_PN_TRIANGLES_ATI, "GL_PN_TRIANGLES_ATI");
    _null_.put(GL_MAX_TEXTURE_MAX_ANISOTROPY, "GL_MAX_TEXTURE_MAX_ANISOTROPY");
    _null_.put(GL_INFO_LOG_LENGTH, "GL_INFO_LOG_LENGTH");
    _null_.put(GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD");
    _null_.put(GL_IMAGE_BUFFER, "GL_IMAGE_BUFFER");
    _null_.put(GL_MAX_VERTEX_UNIFORM_VECTORS, "GL_MAX_VERTEX_UNIFORM_VECTORS");
    _null_.put(GL_SMAPHS_PROGRAM_BINARY_DMP, "GL_SMAPHS_PROGRAM_BINARY_DMP");
    _null_.put(GL_CON_11_ATI, "GL_CON_11_ATI");
    _null_.put(GL_PRIMARY_COLOR, "GL_PRIMARY_COLOR");
    _null_.put(GL_SMOOTH_POINT_SIZE_GRANULARITY, "GL_SMOOTH_POINT_SIZE_GRANULARITY");
    _null_.put(GL_QUAD_ALPHA4_SGIS, "GL_QUAD_ALPHA4_SGIS");
    _null_.put(GL_COMPRESSED_SIGNED_R11_EAC, "GL_COMPRESSED_SIGNED_R11_EAC");
    _null_.put(GL_ARRAY_OBJECT_BUFFER_ATI, "GL_ARRAY_OBJECT_BUFFER_ATI");
    _null_.put(GL_NO_ERROR, "GL_NO_ERROR");
    _null_.put(GL_COMPRESSED_RGBA_FXT1_3DFX, "GL_COMPRESSED_RGBA_FXT1_3DFX");
    _null_.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    _null_.put(GL_MIN, "GL_MIN");
    _null_.put(GL_RESAMPLE_ZERO_FILL_SGIX, "GL_RESAMPLE_ZERO_FILL_SGIX");
    _null_.put(GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT");
    _null_.put(GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA, "GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA");
    _null_.put(GL_SAMPLE_SHADING, "GL_SAMPLE_SHADING");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE");
  }
  private static void _null_47() {
    _null_.put(GL_STENCIL_VALUE_MASK, "GL_STENCIL_VALUE_MASK");
    _null_.put(GL_LINEAR_DETAIL_ALPHA_SGIS, "GL_LINEAR_DETAIL_ALPHA_SGIS");
    _null_.put(GL_DEPTH_CLEAR_VALUE, "GL_DEPTH_CLEAR_VALUE");
    _null_.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    _null_.put(GL_ATC_RGB_AMD, "GL_ATC_RGB_AMD");
    _null_.put(GL_INTERNALFORMAT_DEPTH_SIZE, "GL_INTERNALFORMAT_DEPTH_SIZE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE");
    _null_.put(GL_PERFQUERY_FLUSH_INTEL, "GL_PERFQUERY_FLUSH_INTEL");
    _null_.put(GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX, "GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX");
    _null_.put(GL_TABLE_TOO_LARGE, "GL_TABLE_TOO_LARGE");
    _null_.put(GL_ALL_ATTRIB_BITS, "GL_ALL_ATTRIB_BITS");
    _null_.put(GL_TEXTURE_ENV_MODE, "GL_TEXTURE_ENV_MODE");
    _null_.put(GL_MAX_VERTEX_ATTRIB_BINDINGS, "GL_MAX_VERTEX_ATTRIB_BINDINGS");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR");
    _null_.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    _null_.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS");
    _null_.put(GL_RGB8UI, "GL_RGB8UI");
    _null_.put(GL_ALPHA_SCALE, "GL_ALPHA_SCALE");
    _null_.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    _null_.put(GL_UNPACK_CONSTANT_DATA_SUNX, "GL_UNPACK_CONSTANT_DATA_SUNX");
    _null_.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS");
    _null_.put(GL_RENDERBUFFER_SAMPLES_ANGLE, "GL_RENDERBUFFER_SAMPLES_ANGLE");
    _null_.put(GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL, "GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL");
    _null_.put(GL_MULTISAMPLE_BIT, "GL_MULTISAMPLE_BIT");
    _null_.put(GL_SEPARABLE_2D, "GL_SEPARABLE_2D");
    _null_.put(GL_TEXTURE_BINDING_2D_ARRAY, "GL_TEXTURE_BINDING_2D_ARRAY");
    _null_.put(GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX");
    _null_.put(GL_PACK_RESAMPLE_OML, "GL_PACK_RESAMPLE_OML");
    _null_.put(GL_INTERNALFORMAT_PREFERRED, "GL_INTERNALFORMAT_PREFERRED");
    _null_.put(GL_RGB_422_APPLE, "GL_RGB_422_APPLE");
    _null_.put(GL_4_BYTES, "GL_4_BYTES");
    _null_.put(GL_RGBA_FLOAT32_ATI, "GL_RGBA_FLOAT32_ATI");
    _null_.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    _null_.put(GL_MAX_VERTEX_IMAGE_UNIFORMS, "GL_MAX_VERTEX_IMAGE_UNIFORMS");
    _null_.put(GL_POST_CONVOLUTION_RED_BIAS, "GL_POST_CONVOLUTION_RED_BIAS");
    _null_.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR");
    _null_.put(GL_CLAMP_READ_COLOR, "GL_CLAMP_READ_COLOR");
    _null_.put(GL_POLYGON_BIT, "GL_POLYGON_BIT");
    _null_.put(GL_BITMAP_TOKEN, "GL_BITMAP_TOKEN");
    _null_.put(GL_DEBUG_ASSERT_MESA, "GL_DEBUG_ASSERT_MESA");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE");
    _null_.put(GL_DEBUG_CALLBACK_USER_PARAM_KHR, "GL_DEBUG_CALLBACK_USER_PARAM_KHR");
    _null_.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    _null_.put(GL_INTENSITY_FLOAT16_APPLE, "GL_INTENSITY_FLOAT16_APPLE");
    _null_.put(GL_CLIP_NEAR_HINT_PGI, "GL_CLIP_NEAR_HINT_PGI");
    _null_.put(GL_IMPLEMENTATION_COLOR_READ_TYPE, "GL_IMPLEMENTATION_COLOR_READ_TYPE");
    _null_.put(GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL, "GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL");
    _null_.put(GL_LINEAR_ATTENUATION, "GL_LINEAR_ATTENUATION");
  }
  private static void _null_48() {
    _null_.put(GL_SYNC_FLUSH_COMMANDS_BIT_APPLE, "GL_SYNC_FLUSH_COMMANDS_BIT_APPLE");
    _null_.put(GL_DRAW_BUFFER7_ATI, "GL_DRAW_BUFFER7_ATI");
    _null_.put(GL_DEBUG_LOGGED_MESSAGES, "GL_DEBUG_LOGGED_MESSAGES");
    _null_.put(GL_GEOMETRY_SUBROUTINE, "GL_GEOMETRY_SUBROUTINE");
    _null_.put(GL_READ_PIXELS_TYPE, "GL_READ_PIXELS_TYPE");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE");
    _null_.put(GL_4PASS_1_SGIS, "GL_4PASS_1_SGIS");
    _null_.put(GL_LIGHT_MODEL_COLOR_CONTROL, "GL_LIGHT_MODEL_COLOR_CONTROL");
    _null_.put(GL_CLAMP_TO_BORDER_SGIS, "GL_CLAMP_TO_BORDER_SGIS");
    _null_.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    _null_.put(GL_INDEX_BITS, "GL_INDEX_BITS");
    _null_.put(GL_INT_SAMPLER_1D_ARRAY, "GL_INT_SAMPLER_1D_ARRAY");
    _null_.put(GL_BUFFER_SIZE, "GL_BUFFER_SIZE");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED");
    _null_.put(GL_DIFFUSE, "GL_DIFFUSE");
    _null_.put(GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_SMOOTH_POINT_SIZE_RANGE, "GL_SMOOTH_POINT_SIZE_RANGE");
    _null_.put(GL_SHADE_MODEL, "GL_SHADE_MODEL");
    _null_.put(GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA, "GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA");
    _null_.put(GL_TEXTURE_MAX_ANISOTROPY, "GL_TEXTURE_MAX_ANISOTROPY");
    _null_.put(GL_NAND, "GL_NAND");
    _null_.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
    _null_.put(GL_CON_25_ATI, "GL_CON_25_ATI");
    _null_.put(GL_OPERAND1_RGB, "GL_OPERAND1_RGB");
    _null_.put(GL_VERTEX_TEXTURE, "GL_VERTEX_TEXTURE");
    _null_.put(GL_LUMINANCE16, "GL_LUMINANCE16");
    _null_.put(GL_TEXTURE20, "GL_TEXTURE20");
    _null_.put(GL_DEBUG_TYPE_MARKER, "GL_DEBUG_TYPE_MARKER");
    _null_.put(GL_BUFFER_BINDING, "GL_BUFFER_BINDING");
    _null_.put(GL_MAX_VIEWPORT_DIMS, "GL_MAX_VIEWPORT_DIMS");
    _null_.put(GL_TRANSFORM_FEEDBACK_VARYINGS, "GL_TRANSFORM_FEEDBACK_VARYINGS");
    _null_.put(GL_DRAW_INDIRECT_BUFFER_BINDING, "GL_DRAW_INDIRECT_BUFFER_BINDING");
    _null_.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
    _null_.put(GL_PROXY_TEXTURE_1D_ARRAY, "GL_PROXY_TEXTURE_1D_ARRAY");
    _null_.put(GL_V2F, "GL_V2F");
    _null_.put(GL_FOG_END, "GL_FOG_END");
    _null_.put(GL_TEXTURE19, "GL_TEXTURE19");
    _null_.put(GL_TEXTURE18, "GL_TEXTURE18");
    _null_.put(GL_IMAGE_2D_RECT, "GL_IMAGE_2D_RECT");
    _null_.put(GL_POST_CONVOLUTION_BLUE_BIAS, "GL_POST_CONVOLUTION_BLUE_BIAS");
    _null_.put(GL_TEXTURE17, "GL_TEXTURE17");
    _null_.put(GL_TEXTURE16, "GL_TEXTURE16");
    _null_.put(GL_TEXTURE15, "GL_TEXTURE15");
    _null_.put(GL_TEXTURE14, "GL_TEXTURE14");
    _null_.put(GL_TEXTURE13, "GL_TEXTURE13");
    _null_.put(GL_TEXTURE12, "GL_TEXTURE12");
    _null_.put(GL_TEXTURE11, "GL_TEXTURE11");
    _null_.put(GL_TEXTURE10, "GL_TEXTURE10");
    _null_.put(GL_TEXTURE31, "GL_TEXTURE31");
    _null_.put(GL_PIXEL_MAP_B_TO_B, "GL_PIXEL_MAP_B_TO_B");
    _null_.put(GL_TEXTURE30, "GL_TEXTURE30");
    _null_.put(GL_GEOMETRY_SHADER, "GL_GEOMETRY_SHADER");
    _null_.put(GL_MAX, "GL_MAX");
    _null_.put(GL_NORMAL_MAP, "GL_NORMAL_MAP");
    _null_.put(GL_HSL_LUMINOSITY, "GL_HSL_LUMINOSITY");
    _null_.put(GL_UNIFORM_ARRAY_STRIDE, "GL_UNIFORM_ARRAY_STRIDE");
    _null_.put(GL_R1UI_T2F_C4F_N3F_V3F_SUN, "GL_R1UI_T2F_C4F_N3F_V3F_SUN");
    _null_.put(GL_V3F, "GL_V3F");
  }
  private static void _null_49() {
    _null_.put(GL_OR, "GL_OR");
    _null_.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH, "GL_MAX_DEBUG_GROUP_STACK_DEPTH");
    _null_.put(GL_SPECULAR, "GL_SPECULAR");
    _null_.put(GL_TEXTURE29, "GL_TEXTURE29");
    _null_.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    _null_.put(GL_TEXTURE28, "GL_TEXTURE28");
    _null_.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    _null_.put(GL_TEXTURE27, "GL_TEXTURE27");
    _null_.put(GL_INT_SAMPLER_2D_MULTISAMPLE, "GL_INT_SAMPLER_2D_MULTISAMPLE");
    _null_.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    _null_.put(GL_TEXTURE26, "GL_TEXTURE26");
    _null_.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    _null_.put(GL_TEXTURE25, "GL_TEXTURE25");
    _null_.put(GL_LUMINANCE12, "GL_LUMINANCE12");
    _null_.put(GL_TEXTURE24, "GL_TEXTURE24");
    _null_.put(GL_TEXTURE23, "GL_TEXTURE23");
    _null_.put(GL_TEXTURE22, "GL_TEXTURE22");
    _null_.put(GL_SLIM8U_SGIX, "GL_SLIM8U_SGIX");
    _null_.put(GL_TEXTURE21, "GL_TEXTURE21");
    _null_.put(GL_VOLATILE_APPLE, "GL_VOLATILE_APPLE");
    _null_.put(GL_AMBIENT_AND_DIFFUSE, "GL_AMBIENT_AND_DIFFUSE");
    _null_.put(GL_TEXCOORD3_BIT_PGI, "GL_TEXCOORD3_BIT_PGI");
    _null_.put(GL_INDEX_SHIFT, "GL_INDEX_SHIFT");
    _null_.put(GL_SEPARATE_ATTRIBS, "GL_SEPARATE_ATTRIBS");
    _null_.put(GL_PIXEL_MAP_I_TO_B, "GL_PIXEL_MAP_I_TO_B");
    _null_.put(GL_QUAD_STRIP, "GL_QUAD_STRIP");
    _null_.put(GL_PIXEL_MAP_I_TO_A, "GL_PIXEL_MAP_I_TO_A");
    _null_.put(GL_PIXEL_MAP_I_TO_G, "GL_PIXEL_MAP_I_TO_G");
    _null_.put(GL_TEXTURE_DEPTH_SIZE, "GL_TEXTURE_DEPTH_SIZE");
    _null_.put(GL_PROXY_TEXTURE_CUBE_MAP, "GL_PROXY_TEXTURE_CUBE_MAP");
    _null_.put(GL_CND_ATI, "GL_CND_ATI");
    _null_.put(GL_PIXEL_MAP_I_TO_I, "GL_PIXEL_MAP_I_TO_I");
    _null_.put(GL_PROGRAM_POINT_SIZE, "GL_PROGRAM_POINT_SIZE");
    _null_.put(GL_REG_24_ATI, "GL_REG_24_ATI");
    _null_.put(GL_PIXEL_MAP_I_TO_R, "GL_PIXEL_MAP_I_TO_R");
    _null_.put(GL_IMAGE_MIN_FILTER_HP, "GL_IMAGE_MIN_FILTER_HP");
    _null_.put(GL_UNSIGNED_INT_IMAGE_CUBE, "GL_UNSIGNED_INT_IMAGE_CUBE");
    _null_.put(GL_INDEX_LOGIC_OP, "GL_INDEX_LOGIC_OP");
    _null_.put(GL_DEBUG_TYPE_MARKER_KHR, "GL_DEBUG_TYPE_MARKER_KHR");
    _null_.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    _null_.put(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH, "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH");
    _null_.put(GL_CURRENT_RASTER_NORMAL_SGIX, "GL_CURRENT_RASTER_NORMAL_SGIX");
    _null_.put(GL_T4F_V4F, "GL_T4F_V4F");
    _null_.put(GL_ALLOW_DRAW_OBJ_HINT_PGI, "GL_ALLOW_DRAW_OBJ_HINT_PGI");
    _null_.put(GL_R16_SNORM, "GL_R16_SNORM");
    _null_.put(GL_GS_PROGRAM_BINARY_MTK, "GL_GS_PROGRAM_BINARY_MTK");
    _null_.put(GL_NEAREST_CLIPMAP_LINEAR_SGIX, "GL_NEAREST_CLIPMAP_LINEAR_SGIX");
    _null_.put(GL_RG, "GL_RG");
    _null_.put(GL_ALPHA_MIN_CLAMP_INGR, "GL_ALPHA_MIN_CLAMP_INGR");
    _null_.put(GL_FRONT, "GL_FRONT");
    _null_.put(GL_TEXTURE_1D_STACK_MESAX, "GL_TEXTURE_1D_STACK_MESAX");
    _null_.put(GL_TESS_EVALUATION_SUBROUTINE, "GL_TESS_EVALUATION_SUBROUTINE");
    _null_.put(GL_SUBPIXEL_BITS, "GL_SUBPIXEL_BITS");
    _null_.put(GL_R8, "GL_R8");
    _null_.put(GL_R1UI_V3F_SUN, "GL_R1UI_V3F_SUN");
    _null_.put(GL_RGB_FLOAT16_ATI, "GL_RGB_FLOAT16_ATI");
  }
  private static void _null_50() {
    _null_.put(GL_MAX_EVAL_ORDER, "GL_MAX_EVAL_ORDER");
    _null_.put(GL_PRIMITIVE_RESTART, "GL_PRIMITIVE_RESTART");
    _null_.put(GL_OBJECT_BUFFER_USAGE_ATI, "GL_OBJECT_BUFFER_USAGE_ATI");
    _null_.put(GL_VERTEX_SOURCE_ATI, "GL_VERTEX_SOURCE_ATI");
    _null_.put(GL_UNDEFINED_VERTEX, "GL_UNDEFINED_VERTEX");
    _null_.put(GL_MULTIPLY, "GL_MULTIPLY");
    _null_.put(GL_SATURATE_BIT_ATI, "GL_SATURATE_BIT_ATI");
    _null_.put(GL_SPIR_V_EXTENSIONS, "GL_SPIR_V_EXTENSIONS");
    _null_.put(GL_IMAGE_MAG_FILTER_HP, "GL_IMAGE_MAG_FILTER_HP");
    _null_.put(GL_DYNAMIC_READ, "GL_DYNAMIC_READ");
    _null_.put(GL_TEXCOORD1_BIT_PGI, "GL_TEXCOORD1_BIT_PGI");
    _null_.put(GL_ARRAY_BUFFER_BINDING, "GL_ARRAY_BUFFER_BINDING");
    _null_.put(GL_UNSIGNED_INT_5_9_9_9_REV_APPLE, "GL_UNSIGNED_INT_5_9_9_9_REV_APPLE");
    _null_.put(GL_TEXTURE_SHARED_SIZE, "GL_TEXTURE_SHARED_SIZE");
    _null_.put(GL_COLORDODGE, "GL_COLORDODGE");
    _null_.put(GL_RG8UI, "GL_RG8UI");
    _null_.put(GL_VENDOR, "GL_VENDOR");
    _null_.put(GL_PACK_SWAP_BYTES, "GL_PACK_SWAP_BYTES");
    _null_.put(GL_MULTISAMPLE_BIT_3DFX, "GL_MULTISAMPLE_BIT_3DFX");
    _null_.put(GL_CCW, "GL_CCW");
    _null_.put(GL_REG_19_ATI, "GL_REG_19_ATI");
    _null_.put(GL_STENCIL_REF, "GL_STENCIL_REF");
    _null_.put(GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE, "GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE");
    _null_.put(GL_TEXTURE, "GL_TEXTURE");
    _null_.put(GL_NORMAL_ARRAY_BUFFER_BINDING, "GL_NORMAL_ARRAY_BUFFER_BINDING");
    _null_.put(GL_ELEMENT_ARRAY_TYPE_APPLE, "GL_ELEMENT_ARRAY_TYPE_APPLE");
    _null_.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    _null_.put(GL_FLOAT16_MAT2x4_AMD, "GL_FLOAT16_MAT2x4_AMD");
    _null_.put(GL_TRACE_ALL_BITS_MESA, "GL_TRACE_ALL_BITS_MESA");
    _null_.put(GL_LINEAR_DETAIL_SGIS, "GL_LINEAR_DETAIL_SGIS");
    _null_.put(GL_DEBUG_SEVERITY_MEDIUM, "GL_DEBUG_SEVERITY_MEDIUM");
    _null_.put(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, "GL_DEBUG_SOURCE_THIRD_PARTY_KHR");
    _null_.put(GL_TRACE_PIXELS_BIT_MESA, "GL_TRACE_PIXELS_BIT_MESA");
    _null_.put(GL_RETAINED_APPLE, "GL_RETAINED_APPLE");
    _null_.put(GL_CUBIC_MIPMAP_NEAREST_IMG, "GL_CUBIC_MIPMAP_NEAREST_IMG");
    _null_.put(GL_DRAW_BUFFER4_ATI, "GL_DRAW_BUFFER4_ATI");
    _null_.put(GL_CLAMP_TO_BORDER, "GL_CLAMP_TO_BORDER");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    _null_.put(GL_PREVIOUS, "GL_PREVIOUS");
    _null_.put(GL_REG_0_ATI, "GL_REG_0_ATI");
    _null_.put(GL_BUFFER_DATA_SIZE, "GL_BUFFER_DATA_SIZE");
    _null_.put(GL_FOG_FUNC_SGIS, "GL_FOG_FUNC_SGIS");
    _null_.put(GL_RGBA16I, "GL_RGBA16I");
    _null_.put(GL_MAJOR_VERSION, "GL_MAJOR_VERSION");
    _null_.put(GL_RGBA16F, "GL_RGBA16F");
    _null_.put(GL_INT_IMAGE_BUFFER, "GL_INT_IMAGE_BUFFER");
    _null_.put(GL_RGB16_SNORM, "GL_RGB16_SNORM");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR");
  }
  private static void _null_51() {
    _null_.put(GL_TEXTURE_TARGET, "GL_TEXTURE_TARGET");
    _null_.put(GL_CURRENT_TEXTURE_COORDS, "GL_CURRENT_TEXTURE_COORDS");
    _null_.put(GL_NUM_ACTIVE_VARIABLES, "GL_NUM_ACTIVE_VARIABLES");
    _null_.put(GL_SOURCE1_ALPHA, "GL_SOURCE1_ALPHA");
    _null_.put(GL_DUAL_LUMINANCE_ALPHA4_SGIS, "GL_DUAL_LUMINANCE_ALPHA4_SGIS");
    _null_.put(GL_FLAT, "GL_FLAT");
    _null_.put(GL_OBJECT_TYPE_APPLE, "GL_OBJECT_TYPE_APPLE");
    _null_.put(GL_SAMPLE_POSITION, "GL_SAMPLE_POSITION");
    _null_.put(GL_SRGB, "GL_SRGB");
    _null_.put(GL_TESS_GEN_MODE, "GL_TESS_GEN_MODE");
    _null_.put(GL_RENDERBUFFER_SAMPLES_IMG, "GL_RENDERBUFFER_SAMPLES_IMG");
    _null_.put(GL_VIEW_CLASS_BPTC_FLOAT, "GL_VIEW_CLASS_BPTC_FLOAT");
    _null_.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_HEIGHT, "GL_FRAMEBUFFER_DEFAULT_HEIGHT");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG, "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG");
    _null_.put(GL_CON_30_ATI, "GL_CON_30_ATI");
    _null_.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
    _null_.put(GL_MATRIX_MODE, "GL_MATRIX_MODE");
    _null_.put(GL_DRAW_BUFFER15_ATI, "GL_DRAW_BUFFER15_ATI");
    _null_.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS");
    _null_.put(GL_MAP_STENCIL, "GL_MAP_STENCIL");
    _null_.put(GL_ARRAY_BUFFER, "GL_ARRAY_BUFFER");
    _null_.put(GL_CONVOLUTION_BORDER_COLOR, "GL_CONVOLUTION_BORDER_COLOR");
    _null_.put(GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI");
    _null_.put(GL_QUERY_RESULT_AVAILABLE, "GL_QUERY_RESULT_AVAILABLE");
    _null_.put(GL_SMOOTH_LINE_WIDTH_GRANULARITY, "GL_SMOOTH_LINE_WIDTH_GRANULARITY");
    _null_.put(GL_MAT_SPECULAR_BIT_PGI, "GL_MAT_SPECULAR_BIT_PGI");
    _null_.put(GL_FLOAT16_MAT3x2_AMD, "GL_FLOAT16_MAT3x2_AMD");
    _null_.put(GL_VERTEX_ARRAY_BUFFER_BINDING, "GL_VERTEX_ARRAY_BUFFER_BINDING");
    _null_.put(GL_READ_FRAMEBUFFER_BINDING, "GL_READ_FRAMEBUFFER_BINDING");
    _null_.put(GL_RIGHT, "GL_RIGHT");
    _null_.put(GL_CLIENT_STORAGE_BIT, "GL_CLIENT_STORAGE_BIT");
    _null_.put(GL_COMPUTE_SHADER_BIT, "GL_COMPUTE_SHADER_BIT");
    _null_.put(GL_NAME_LENGTH, "GL_NAME_LENGTH");
    _null_.put(GL_LINE_WIDTH_GRANULARITY, "GL_LINE_WIDTH_GRANULARITY");
    _null_.put(GL_PIXEL_MAP_S_TO_S, "GL_PIXEL_MAP_S_TO_S");
    _null_.put(GL_MAX_FRAGMENT_LIGHTS_SGIX, "GL_MAX_FRAGMENT_LIGHTS_SGIX");
    _null_.put(GL_LUMINANCE_FLOAT32_ATI, "GL_LUMINANCE_FLOAT32_ATI");
    _null_.put(GL_VERTEX_ARRAY_STRIDE, "GL_VERTEX_ARRAY_STRIDE");
    _null_.put(GL_SECONDARY_COLOR_ARRAY, "GL_SECONDARY_COLOR_ARRAY");
    _null_.put(GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT, "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT");
    _null_.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    _null_.put(GL_MAX_TEXTURE_BUFFER_SIZE, "GL_MAX_TEXTURE_BUFFER_SIZE");
    _null_.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    _null_.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    _null_.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    _null_.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    _null_.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
    _null_.put(GL_MAX_UNIFORM_BUFFER_BINDINGS, "GL_MAX_UNIFORM_BUFFER_BINDINGS");
    _null_.put(GL_ALPHA_TEST_FUNC_QCOM, "GL_ALPHA_TEST_FUNC_QCOM");
    _null_.put(GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL, "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_BUMP_ENVMAP_ATI, "GL_BUMP_ENVMAP_ATI");
    _null_.put(GL_RG16, "GL_RG16");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG, "GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG");
    _null_.put(GL_RGBA8I, "GL_RGBA8I");
  }
  private static void _null_52() {
    _null_.put(GL_CONTEXT_PROFILE_MASK, "GL_CONTEXT_PROFILE_MASK");
    _null_.put(GL_MAX_SPARSE_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_TEXTURE_SIZE_AMD");
    _null_.put(GL_POLYGON_OFFSET_CLAMP, "GL_POLYGON_OFFSET_CLAMP");
    _null_.put(GL_FLOAT_MAT2x3, "GL_FLOAT_MAT2x3");
    _null_.put(GL_FLOAT_MAT2x4, "GL_FLOAT_MAT2x4");
    _null_.put(GL_LIGHTEN, "GL_LIGHTEN");
    _null_.put(GL_VIEW_CLASS_16_BITS, "GL_VIEW_CLASS_16_BITS");
    _null_.put(GL_RG16UI, "GL_RG16UI");
    _null_.put(GL_PARAMETER_BUFFER, "GL_PARAMETER_BUFFER");
    _null_.put(GL_MAX_VARYING_COMPONENTS, "GL_MAX_VARYING_COMPONENTS");
    _null_.put(GL_CON_21_ATI, "GL_CON_21_ATI");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D, "GL_UNSIGNED_INT_SAMPLER_2D");
    _null_.put(GL_HISTOGRAM_RED_SIZE, "GL_HISTOGRAM_RED_SIZE");
    _null_.put(GL_OPERAND1_ALPHA, "GL_OPERAND1_ALPHA");
    _null_.put(GL_DEBUG_SOURCE_SHADER_COMPILER, "GL_DEBUG_SOURCE_SHADER_COMPILER");
    _null_.put(GL_SMOOTH_LINE_WIDTH_RANGE, "GL_SMOOTH_LINE_WIDTH_RANGE");
    _null_.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    _null_.put(GL_REPEAT, "GL_REPEAT");
    _null_.put(GL_DEBUG_CALLBACK_FUNCTION_KHR, "GL_DEBUG_CALLBACK_FUNCTION_KHR");
    _null_.put(GL_LOSE_CONTEXT_ON_RESET, "GL_LOSE_CONTEXT_ON_RESET");
    _null_.put(GL_RESTART_SUN, "GL_RESTART_SUN");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x10_KHR, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_1D, "GL_UNSIGNED_INT_SAMPLER_1D");
    _null_.put(GL_INT_IMAGE_2D_ARRAY, "GL_INT_IMAGE_2D_ARRAY");
    _null_.put(GL_RGBA_INTEGER, "GL_RGBA_INTEGER");
    _null_.put(GL_STENCIL_TEST, "GL_STENCIL_TEST");
    _null_.put(GL_TEXTURE_WIDTH_QCOM, "GL_TEXTURE_WIDTH_QCOM");
    _null_.put(GL_DUAL_ALPHA16_SGIS, "GL_DUAL_ALPHA16_SGIS");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_WIDTH, "GL_PACK_COMPRESSED_BLOCK_WIDTH");
    _null_.put(GL_RGB16, "GL_RGB16");
    _null_.put(GL_SHADER_IMAGE_LOAD, "GL_SHADER_IMAGE_LOAD");
    _null_.put(GL_RGB12, "GL_RGB12");
    _null_.put(GL_READ_WRITE, "GL_READ_WRITE");
    _null_.put(GL_RGB10, "GL_RGB10");
    _null_.put(GL_EXCLUSION_KHR, "GL_EXCLUSION_KHR");
    _null_.put(GL_FRAMEBUFFER_BLEND, "GL_FRAMEBUFFER_BLEND");
    _null_.put(GL_R11F_G11F_B10F, "GL_R11F_G11F_B10F");
    _null_.put(GL_COMPRESSED_SLUMINANCE_ALPHA, "GL_COMPRESSED_SLUMINANCE_ALPHA");
    _null_.put(GL_UNPACK_SKIP_PIXELS, "GL_UNPACK_SKIP_PIXELS");
    _null_.put(GL_LOGIC_OP, "GL_LOGIC_OP");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER");
    _null_.put(GL_LIGHT_MODEL_TWO_SIDE, "GL_LIGHT_MODEL_TWO_SIDE");
    _null_.put(GL_LINEAR_SHARPEN_SGIS, "GL_LINEAR_SHARPEN_SGIS");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_RECT, "GL_UNSIGNED_INT_IMAGE_2D_RECT");
    _null_.put(GL_WAIT_FAILED, "GL_WAIT_FAILED");
    _null_.put(GL_3D_COLOR_TEXTURE, "GL_3D_COLOR_TEXTURE");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_3D, "GL_UNSIGNED_INT_SAMPLER_3D");
    _null_.put(GL_TEXTURE_COMPARE_MODE, "GL_TEXTURE_COMPARE_MODE");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY");
    _null_.put(GL_DEBUG_TYPE_OTHER, "GL_DEBUG_TYPE_OTHER");
    _null_.put(GL_INT_SAMPLER_CUBE, "GL_INT_SAMPLER_CUBE");
    _null_.put(GL_RG_SNORM, "GL_RG_SNORM");
    _null_.put(GL_GLOBAL_ALPHA_FACTOR_SUN, "GL_GLOBAL_ALPHA_FACTOR_SUN");
    _null_.put(GL_NORMAL_ARRAY_LIST_STRIDE_IBM, "GL_NORMAL_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
  }
  private static void _null_53() {
    _null_.put(GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD, "GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD");
    _null_.put(GL_FEEDBACK_BUFFER_SIZE, "GL_FEEDBACK_BUFFER_SIZE");
    _null_.put(GL_MIN_LOD_WARNING_AMD, "GL_MIN_LOD_WARNING_AMD");
    _null_.put(GL_UNSIGNED_SHORT_1_15_REV_MESA, "GL_UNSIGNED_SHORT_1_15_REV_MESA");
    _null_.put(GL_SYNC_FENCE, "GL_SYNC_FENCE");
    _null_.put(GL_DEPTH_SCALE, "GL_DEPTH_SCALE");
    _null_.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    _null_.put(GL_ACCUM_RED_BITS, "GL_ACCUM_RED_BITS");
    _null_.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    _null_.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    _null_.put(GL_REG_28_ATI, "GL_REG_28_ATI");
    _null_.put(GL_TEXTURE_BIT, "GL_TEXTURE_BIT");
    _null_.put(GL_RGB8_SNORM, "GL_RGB8_SNORM");
    _null_.put(GL_TEXTURE_BINDING_1D, "GL_TEXTURE_BINDING_1D");
    _null_.put(GL_STENCIL_BUFFER_BIT5_QCOM, "GL_STENCIL_BUFFER_BIT5_QCOM");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x5_KHR, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR");
    _null_.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    _null_.put(GL_STENCIL_BACK_PASS_DEPTH_FAIL, "GL_STENCIL_BACK_PASS_DEPTH_FAIL");
    _null_.put(GL_CURRENT_RASTER_POSITION_VALID, "GL_CURRENT_RASTER_POSITION_VALID");
    _null_.put(GL_SELECTION_BUFFER_POINTER, "GL_SELECTION_BUFFER_POINTER");
    _null_.put(GL_LINE_RESET_TOKEN, "GL_LINE_RESET_TOKEN");
    _null_.put(GL_SYNC_CONDITION, "GL_SYNC_CONDITION");
    _null_.put(GL_QUERY_BUFFER_AMD, "GL_QUERY_BUFFER_AMD");
    _null_.put(GL_TEXTURE_BINDING_BUFFER, "GL_TEXTURE_BINDING_BUFFER");
    _null_.put(GL_TEXTURE_TARGET_QCOM, "GL_TEXTURE_TARGET_QCOM");
    _null_.put(GL_PN_TRIANGLES_POINT_MODE_ATI, "GL_PN_TRIANGLES_POINT_MODE_ATI");
    _null_.put(GL_UNPACK_LSB_FIRST, "GL_UNPACK_LSB_FIRST");
    _null_.put(GL_TEXTURE_BINDING_2D, "GL_TEXTURE_BINDING_2D");
    _null_.put(GL_LEFT, "GL_LEFT");
    _null_.put(GL_COMPRESSED_LUMINANCE_ALPHA, "GL_COMPRESSED_LUMINANCE_ALPHA");
    _null_.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS");
    _null_.put(GL_CURRENT_RASTER_TEXTURE_COORDS, "GL_CURRENT_RASTER_TEXTURE_COORDS");
    _null_.put(GL_RGBA16, "GL_RGBA16");
    _null_.put(GL_RG8I, "GL_RG8I");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x12, "GL_COMPRESSED_RGBA_ASTC_12x12");
    _null_.put(GL_VIEW_CLASS_48_BITS, "GL_VIEW_CLASS_48_BITS");
    _null_.put(GL_PREFER_DOUBLEBUFFER_HINT_PGI, "GL_PREFER_DOUBLEBUFFER_HINT_PGI");
    _null_.put(GL_RGBA12, "GL_RGBA12");
    _null_.put(GL_STENCIL_BITS, "GL_STENCIL_BITS");
    _null_.put(GL_PERFQUERY_COUNTER_EVENT_INTEL, "GL_PERFQUERY_COUNTER_EVENT_INTEL");
    _null_.put(GL_ALPHA_FLOAT32_APPLE, "GL_ALPHA_FLOAT32_APPLE");
    _null_.put(GL_READ_BUFFER, "GL_READ_BUFFER");
    _null_.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
    _null_.put(GL_TEXTURE_BINDING_3D, "GL_TEXTURE_BINDING_3D");
    _null_.put(GL_CND0_ATI, "GL_CND0_ATI");
    _null_.put(GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI, "GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI");
    _null_.put(GL_BLEND_DST_RGB, "GL_BLEND_DST_RGB");
    _null_.put(GL_FRAMEBUFFER_BINDING_ANGLE, "GL_FRAMEBUFFER_BINDING_ANGLE");
    _null_.put(GL_DUAL_ALPHA8_SGIS, "GL_DUAL_ALPHA8_SGIS");
    _null_.put(GL_REFLECTION_MAP, "GL_REFLECTION_MAP");
    _null_.put(GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL, "GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL");
    _null_.put(GL_BLEND, "GL_BLEND");
    _null_.put(GL_DEPTH_STENCIL_TEXTURE_MODE, "GL_DEPTH_STENCIL_TEXTURE_MODE");
    _null_.put(GL_CON_15_ATI, "GL_CON_15_ATI");
    _null_.put(GL_2X_BIT_ATI, "GL_2X_BIT_ATI");
    _null_.put(GL_POINT_SMOOTH, "GL_POINT_SMOOTH");
    _null_.put(GL_SEPARATE_SPECULAR_COLOR, "GL_SEPARATE_SPECULAR_COLOR");
    _null_.put(GL_FOG_COORDINATE_ARRAY_TYPE, "GL_FOG_COORDINATE_ARRAY_TYPE");
  }
  private static void _null_54() {
    _null_.put(GL_TEXTURE_CUBE_MAP_ARRAY, "GL_TEXTURE_CUBE_MAP_ARRAY");
    _null_.put(GL_NUM_DOWNSAMPLE_SCALES_IMG, "GL_NUM_DOWNSAMPLE_SCALES_IMG");
    _null_.put(GL_CLIP_PLANE2_IMG, "GL_CLIP_PLANE2_IMG");
    _null_.put(GL_FRAGMENT_TEXTURE, "GL_FRAGMENT_TEXTURE");
    _null_.put(GL_SHADER_IMAGE_ATOMIC, "GL_SHADER_IMAGE_ATOMIC");
    _null_.put(GL_TRANSFORM_FEEDBACK_OVERFLOW, "GL_TRANSFORM_FEEDBACK_OVERFLOW");
    _null_.put(GL_LINE_WIDTH_RANGE, "GL_LINE_WIDTH_RANGE");
    _null_.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    _null_.put(GL_PRIMITIVES_GENERATED, "GL_PRIMITIVES_GENERATED");
    _null_.put(GL_POINT_BIT, "GL_POINT_BIT");
    _null_.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    _null_.put(GL_INVERTED_SCREEN_W_REND, "GL_INVERTED_SCREEN_W_REND");
    _null_.put(GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_TEXTURE_LEQUAL_R_SGIX, "GL_TEXTURE_LEQUAL_R_SGIX");
    _null_.put(GL_REG_15_ATI, "GL_REG_15_ATI");
    _null_.put(GL_INTENSITY8_SNORM, "GL_INTENSITY8_SNORM");
    _null_.put(GL_CONTEXT_LOST, "GL_CONTEXT_LOST");
    _null_.put(GL_UNIFORM_BUFFER_BINDING, "GL_UNIFORM_BUFFER_BINDING");
    _null_.put(GL_COLOR_TABLE_WIDTH, "GL_COLOR_TABLE_WIDTH");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x10, "GL_COMPRESSED_RGBA_ASTC_12x10");
    _null_.put(GL_PERFQUERY_GLOBAL_CONTEXT_INTEL, "GL_PERFQUERY_GLOBAL_CONTEXT_INTEL");
    _null_.put(GL_IMAGE_CLASS_4_X_8, "GL_IMAGE_CLASS_4_X_8");
    _null_.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS");
    _null_.put(GL_NEAREST, "GL_NEAREST");
    _null_.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    _null_.put(GL_MAT_SHININESS_BIT_PGI, "GL_MAT_SHININESS_BIT_PGI");
    _null_.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    _null_.put(GL_ATTRIB_STACK_DEPTH, "GL_ATTRIB_STACK_DEPTH");
    _null_.put(GL_COLOR_TABLE_INTENSITY_SIZE_SGI, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI");
    _null_.put(GL_LIST_PRIORITY_SGIX, "GL_LIST_PRIORITY_SGIX");
    _null_.put(GL_SYNC_CONDITION_APPLE, "GL_SYNC_CONDITION_APPLE");
    _null_.put(GL_COLOR_BUFFER_BIT1_QCOM, "GL_COLOR_BUFFER_BIT1_QCOM");
    _null_.put(GL_SRC2_RGB, "GL_SRC2_RGB");
    _null_.put(GL_HISTOGRAM_BLUE_SIZE, "GL_HISTOGRAM_BLUE_SIZE");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    _null_.put(GL_RGBA8UI, "GL_RGBA8UI");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    _null_.put(GL_VERTEX_STREAM4_ATI, "GL_VERTEX_STREAM4_ATI");
    _null_.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    _null_.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI");
    _null_.put(GL_OCCLUSION_TEST_RESULT_HP, "GL_OCCLUSION_TEST_RESULT_HP");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL, "GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL");
    _null_.put(GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR, "GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR");
    _null_.put(GL_TEXTURE_SAMPLES_IMG, "GL_TEXTURE_SAMPLES_IMG");
    _null_.put(GL_GREATER, "GL_GREATER");
    _null_.put(GL_VIRTUAL_PAGE_SIZE_Z_AMD, "GL_VIRTUAL_PAGE_SIZE_Z_AMD");
    _null_.put(GL_TEXTURE_COMPRESSED_BLOCK_WIDTH, "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH");
    _null_.put(GL_TEXTURE_USAGE_ANGLE, "GL_TEXTURE_USAGE_ANGLE");
    _null_.put(GL_LUMINANCE_ALPHA_FLOAT32_ATI, "GL_LUMINANCE_ALPHA_FLOAT32_ATI");
    _null_.put(GL_TRACE_OPERATIONS_BIT_MESA, "GL_TRACE_OPERATIONS_BIT_MESA");
    _null_.put(GL_CURRENT_RASTER_INDEX, "GL_CURRENT_RASTER_INDEX");
    _null_.put(GL_DEBUG_SOURCE_APPLICATION_KHR, "GL_DEBUG_SOURCE_APPLICATION_KHR");
    _null_.put(GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW");
    _null_.put(GL_SRC1_ALPHA, "GL_SRC1_ALPHA");
    _null_.put(GL_SHADER_STORAGE_BLOCK, "GL_SHADER_STORAGE_BLOCK");
    _null_.put(GL_HISTOGRAM_GREEN_SIZE, "GL_HISTOGRAM_GREEN_SIZE");
    _null_.put(GL_MAX_SAMPLE_MASK_WORDS, "GL_MAX_SAMPLE_MASK_WORDS");
    _null_.put(GL_ALPHA_TEST_REF, "GL_ALPHA_TEST_REF");
  }
  private static void _null_55() {
    _null_.put(GL_MAX_FRAMEBUFFER_SAMPLES, "GL_MAX_FRAMEBUFFER_SAMPLES");
    _null_.put(GL_HIGH_FLOAT, "GL_HIGH_FLOAT");
    _null_.put(GL_GCCSO_SHADER_BINARY_FJ, "GL_GCCSO_SHADER_BINARY_FJ");
    _null_.put(GL_LUMINANCE4_ALPHA4, "GL_LUMINANCE4_ALPHA4");
    _null_.put(GL_DEPTH32F_STENCIL8, "GL_DEPTH32F_STENCIL8");
    _null_.put(GL_MAX_SAMPLES_IMG, "GL_MAX_SAMPLES_IMG");
    _null_.put(GL_RENDERBUFFER_RED_SIZE, "GL_RENDERBUFFER_RED_SIZE");
    _null_.put(GL_BGRA, "GL_BGRA");
    _null_.put(GL_MAX_SERVER_WAIT_TIMEOUT_APPLE, "GL_MAX_SERVER_WAIT_TIMEOUT_APPLE");
    _null_.put(GL_MAX_CLIP_DISTANCES_APPLE, "GL_MAX_CLIP_DISTANCES_APPLE");
    _null_.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
    _null_.put(GL_UNPACK_ALIGNMENT, "GL_UNPACK_ALIGNMENT");
    _null_.put(GL_IMAGE_BINDING_LEVEL, "GL_IMAGE_BINDING_LEVEL");
    _null_.put(GL_DRAW_BUFFER11_ATI, "GL_DRAW_BUFFER11_ATI");
    _null_.put(GL_PERFQUERY_WAIT_INTEL, "GL_PERFQUERY_WAIT_INTEL");
    _null_.put(GL_QUAD_INTENSITY4_SGIS, "GL_QUAD_INTENSITY4_SGIS");
    _null_.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    _null_.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    _null_.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    _null_.put(GL_COLOR_ARRAY, "GL_COLOR_ARRAY");
    _null_.put(GL_EXCLUSION, "GL_EXCLUSION");
    _null_.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    _null_.put(GL_DEPTH_STENCIL_MESA, "GL_DEPTH_STENCIL_MESA");
    _null_.put(GL_CONTINUOUS_AMD, "GL_CONTINUOUS_AMD");
    _null_.put(GL_POLYGON_STIPPLE_BIT, "GL_POLYGON_STIPPLE_BIT");
    _null_.put(GL_BUFFER_MAP_OFFSET, "GL_BUFFER_MAP_OFFSET");
    _null_.put(GL_WRITEONLY_RENDERING_QCOM, "GL_WRITEONLY_RENDERING_QCOM");
    _null_.put(GL_ALPHA_TEST_REF_QCOM, "GL_ALPHA_TEST_REF_QCOM");
    _null_.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
    _null_.put(GL_SAMPLE_ALPHA_TO_COVERAGE, "GL_SAMPLE_ALPHA_TO_COVERAGE");
    _null_.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR");
    _null_.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
    _null_.put(GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_TRIANGLE_STRIP, "GL_TRIANGLE_STRIP");
    _null_.put(GL_MAX_TESS_PATCH_COMPONENTS, "GL_MAX_TESS_PATCH_COMPONENTS");
    _null_.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
    _null_.put(GL_RGB10_A2UI, "GL_RGB10_A2UI");
    _null_.put(GL_RGBA_FLOAT_MODE_ATI, "GL_RGBA_FLOAT_MODE_ATI");
    _null_.put(GL_SAMPLE_ALPHA_TO_ONE, "GL_SAMPLE_ALPHA_TO_ONE");
    _null_.put(GL_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_REPLACE_VALUE_AMD, "GL_REPLACE_VALUE_AMD");
    _null_.put(GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS, "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS");
    _null_.put(GL_VERTEX_ARRAY_RANGE_POINTER_APPLE, "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE");
    _null_.put(GL_HALF_BIT_ATI, "GL_HALF_BIT_ATI");
    _null_.put(GL_SAMPLER_1D_ARRAY, "GL_SAMPLER_1D_ARRAY");
    _null_.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    _null_.put(GL_INTENSITY_FLOAT32_ATI, "GL_INTENSITY_FLOAT32_ATI");
    _null_.put(GL_INTERLACE_READ_OML, "GL_INTERLACE_READ_OML");
    _null_.put(GL_CPU_OPTIMIZED_QCOM, "GL_CPU_OPTIMIZED_QCOM");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_START, "GL_TRANSFORM_FEEDBACK_BUFFER_START");
  }
  private static void _null_56() {
    _null_.put(GL_ZERO, "GL_ZERO");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE");
    _null_.put(GL_COMPUTE_WORK_GROUP_SIZE, "GL_COMPUTE_WORK_GROUP_SIZE");
    _null_.put(GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS");
    _null_.put(GL_RG16_SNORM, "GL_RG16_SNORM");
    _null_.put(GL_COPY_WRITE_BUFFER_BINDING, "GL_COPY_WRITE_BUFFER_BINDING");
    _null_.put(GL_CONDITION_SATISFIED, "GL_CONDITION_SATISFIED");
    _null_.put(GL_TRACE_NAME_MESA, "GL_TRACE_NAME_MESA");
    _null_.put(GL_TEXCOORD2_BIT_PGI, "GL_TEXCOORD2_BIT_PGI");
    _null_.put(GL_PERFMON_RESULT_SIZE_AMD, "GL_PERFMON_RESULT_SIZE_AMD");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX");
    _null_.put(GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI, "GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI");
    _null_.put(GL_IMAGE_CUBIC_WEIGHT_HP, "GL_IMAGE_CUBIC_WEIGHT_HP");
    _null_.put(GL_FLOAT_MAT4, "GL_FLOAT_MAT4");
    _null_.put(GL_FLOAT_MAT3, "GL_FLOAT_MAT3");
    _null_.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    _null_.put(GL_FLOAT_MAT2, "GL_FLOAT_MAT2");
    _null_.put(GL_IMAGE_TRANSLATE_X_HP, "GL_IMAGE_TRANSLATE_X_HP");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR_KHR, "GL_CONTEXT_RELEASE_BEHAVIOR_KHR");
    _null_.put(GL_LOCATION, "GL_LOCATION");
    _null_.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
    _null_.put(GL_SAMPLER_BINDING, "GL_SAMPLER_BINDING");
    _null_.put(GL_SOURCE2_RGB, "GL_SOURCE2_RGB");
    _null_.put(GL_DEPTH24_STENCIL8, "GL_DEPTH24_STENCIL8");
    _null_.put(GL_MOV_ATI, "GL_MOV_ATI");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST");
    _null_.put(GL_STENCIL, "GL_STENCIL");
    _null_.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    _null_.put(GL_EMISSION, "GL_EMISSION");
    _null_.put(GL_LAYOUT_DEFAULT_INTEL, "GL_LAYOUT_DEFAULT_INTEL");
    _null_.put(GL_PROVOKING_VERTEX, "GL_PROVOKING_VERTEX");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER");
    _null_.put(GL_N3F_V3F, "GL_N3F_V3F");
    _null_.put(GL_INTERNALFORMAT_RED_TYPE, "GL_INTERNALFORMAT_RED_TYPE");
    _null_.put(GL_RESAMPLE_DECIMATE_SGIX, "GL_RESAMPLE_DECIMATE_SGIX");
    _null_.put(GL_FLOAT, "GL_FLOAT");
    _null_.put(GL_INTERNALFORMAT_ALPHA_TYPE, "GL_INTERNALFORMAT_ALPHA_TYPE");
    _null_.put(GL_FRAGMENT_ALPHA_MODULATE_IMG, "GL_FRAGMENT_ALPHA_MODULATE_IMG");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR");
    _null_.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    _null_.put(GL_CUBIC_HP, "GL_CUBIC_HP");
    _null_.put(GL_MAT_DIFFUSE_BIT_PGI, "GL_MAT_DIFFUSE_BIT_PGI");
    _null_.put(GL_DRAW_BUFFER0_ATI, "GL_DRAW_BUFFER0_ATI");
    _null_.put(GL_POLYGON, "GL_POLYGON");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_BINDING, "GL_ATOMIC_COUNTER_BUFFER_BINDING");
    _null_.put(GL_STENCIL_FUNC, "GL_STENCIL_FUNC");
    _null_.put(GL_COLOR_INDEXES, "GL_COLOR_INDEXES");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR");
    _null_.put(GL_EDGE_FLAG_ARRAY_LIST_IBM, "GL_EDGE_FLAG_ARRAY_LIST_IBM");
    _null_.put(GL_REG_8_ATI, "GL_REG_8_ATI");
    _null_.put(GL_BINNING_CONTROL_HINT_QCOM, "GL_BINNING_CONTROL_HINT_QCOM");
    _null_.put(GL_LOCATION_COMPONENT, "GL_LOCATION_COMPONENT");
    _null_.put(GL_CON_19_ATI, "GL_CON_19_ATI");
    _null_.put(GL_AUX0, "GL_AUX0");
  }
  private static void _null_57() {
    _null_.put(GL_AUX1, "GL_AUX1");
    _null_.put(GL_AMBIENT, "GL_AMBIENT");
    _null_.put(GL_TEXTURE_ALPHA_TYPE, "GL_TEXTURE_ALPHA_TYPE");
    _null_.put(GL_VERTEX_DATA_HINT_PGI, "GL_VERTEX_DATA_HINT_PGI");
    _null_.put(GL_AUX2, "GL_AUX2");
    _null_.put(GL_AUX3, "GL_AUX3");
    _null_.put(GL_CON_6_ATI, "GL_CON_6_ATI");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED, "GL_VERTEX_ATTRIB_ARRAY_ENABLED");
    _null_.put(GL_SCREEN_KHR, "GL_SCREEN_KHR");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT5_QCOM, "GL_MULTISAMPLE_BUFFER_BIT5_QCOM");
    _null_.put(GL_PARALLEL_ARRAYS_INTEL, "GL_PARALLEL_ARRAYS_INTEL");
    _null_.put(GL_BLOCK_INDEX, "GL_BLOCK_INDEX");
    _null_.put(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG");
    _null_.put(GL_TEXTURE_MIN_LOD_SGIS, "GL_TEXTURE_MIN_LOD_SGIS");
    _null_.put(GL_LUMINANCE8_ALPHA8_SNORM, "GL_LUMINANCE8_ALPHA8_SNORM");
    _null_.put(GL_2D, "GL_2D");
    _null_.put(GL_COLOR_TABLE_GREEN_SIZE, "GL_COLOR_TABLE_GREEN_SIZE");
    _null_.put(GL_PIXEL_MAP_I_TO_I_SIZE, "GL_PIXEL_MAP_I_TO_I_SIZE");
    _null_.put(GL_MALI_SHADER_BINARY_ARM, "GL_MALI_SHADER_BINARY_ARM");
    _null_.put(GL_MAX_COMBINED_UNIFORM_BLOCKS, "GL_MAX_COMBINED_UNIFORM_BLOCKS");
    _null_.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    _null_.put(GL_MAX_NUM_COMPATIBLE_SUBROUTINES, "GL_MAX_NUM_COMPATIBLE_SUBROUTINES");
    _null_.put(GL_CLIENT_ATTRIB_STACK_DEPTH, "GL_CLIENT_ATTRIB_STACK_DEPTH");
    _null_.put(GL_UNSIGNALED_APPLE, "GL_UNSIGNALED_APPLE");
    _null_.put(GL_READ_PIXELS_FORMAT, "GL_READ_PIXELS_FORMAT");
    _null_.put(GL_STREAM_READ, "GL_STREAM_READ");
    _null_.put(GL_ADD_SIGNED, "GL_ADD_SIGNED");
    _null_.put(GL_REG_30_ATI, "GL_REG_30_ATI");
  }
  public static final Map<Integer, String> CullFaceMode = new HashMap<Integer, String>();
  private static void CullFaceMode0() {
    CullFaceMode.put(GL_BACK, "GL_BACK");
    CullFaceMode.put(GL_FRONT, "GL_FRONT");
    CullFaceMode.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static final Map<Integer, String> AlphaFunction = new HashMap<Integer, String>();
  private static void AlphaFunction0() {
    AlphaFunction.put(GL_EQUAL, "GL_EQUAL");
    AlphaFunction.put(GL_GREATER, "GL_GREATER");
    AlphaFunction.put(GL_LEQUAL, "GL_LEQUAL");
    AlphaFunction.put(GL_NEVER, "GL_NEVER");
    AlphaFunction.put(GL_GEQUAL, "GL_GEQUAL");
    AlphaFunction.put(GL_LESS, "GL_LESS");
    AlphaFunction.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    AlphaFunction.put(GL_ALWAYS, "GL_ALWAYS");
  }
  public static final Map<Integer, String> PolygonMode = new HashMap<Integer, String>();
  private static void PolygonMode0() {
    PolygonMode.put(GL_POINT, "GL_POINT");
    PolygonMode.put(GL_LINE, "GL_LINE");
    PolygonMode.put(GL_FILL, "GL_FILL");
  }
  public static final Map<Integer, String> GetMapQuery = new HashMap<Integer, String>();
  private static void GetMapQuery0() {
    GetMapQuery.put(GL_COEFF, "GL_COEFF");
    GetMapQuery.put(GL_DOMAIN, "GL_DOMAIN");
    GetMapQuery.put(GL_ORDER, "GL_ORDER");
  }
  public static final Map<Integer, String> PixelStoreResampleMode = new HashMap<Integer, String>();
  private static void PixelStoreResampleMode0() {
    PixelStoreResampleMode.put(GL_RESAMPLE_DECIMATE_SGIX, "GL_RESAMPLE_DECIMATE_SGIX");
    PixelStoreResampleMode.put(GL_RESAMPLE_REPLICATE_SGIX, "GL_RESAMPLE_REPLICATE_SGIX");
    PixelStoreResampleMode.put(GL_RESAMPLE_ZERO_FILL_SGIX, "GL_RESAMPLE_ZERO_FILL_SGIX");
  }
  public static final Map<Integer, String> FeedBackToken = new HashMap<Integer, String>();
  private static void FeedBackToken0() {
    FeedBackToken.put(GL_BITMAP_TOKEN, "GL_BITMAP_TOKEN");
    FeedBackToken.put(GL_COPY_PIXEL_TOKEN, "GL_COPY_PIXEL_TOKEN");
    FeedBackToken.put(GL_DRAW_PIXEL_TOKEN, "GL_DRAW_PIXEL_TOKEN");
    FeedBackToken.put(GL_POINT_TOKEN, "GL_POINT_TOKEN");
    FeedBackToken.put(GL_LINE_TOKEN, "GL_LINE_TOKEN");
    FeedBackToken.put(GL_LINE_RESET_TOKEN, "GL_LINE_RESET_TOKEN");
    FeedBackToken.put(GL_POLYGON_TOKEN, "GL_POLYGON_TOKEN");
    FeedBackToken.put(GL_PASS_THROUGH_TOKEN, "GL_PASS_THROUGH_TOKEN");
  }
  public static final Map<Integer, String> TextureEnvParameter = new HashMap<Integer, String>();
  private static void TextureEnvParameter0() {
    TextureEnvParameter.put(GL_TEXTURE_ENV_MODE, "GL_TEXTURE_ENV_MODE");
    TextureEnvParameter.put(GL_TEXTURE_ENV_COLOR, "GL_TEXTURE_ENV_COLOR");
  }
  public static final Map<Integer, String> GetPointervPName = new HashMap<Integer, String>();
  private static void GetPointervPName0() {
    GetPointervPName.put(GL_COLOR_ARRAY_POINTER, "GL_COLOR_ARRAY_POINTER");
    GetPointervPName.put(GL_INDEX_ARRAY_POINTER, "GL_INDEX_ARRAY_POINTER");
    GetPointervPName.put(GL_VERTEX_ARRAY_POINTER, "GL_VERTEX_ARRAY_POINTER");
    GetPointervPName.put(GL_FEEDBACK_BUFFER_POINTER, "GL_FEEDBACK_BUFFER_POINTER");
    GetPointervPName.put(GL_TEXTURE_COORD_ARRAY_POINTER, "GL_TEXTURE_COORD_ARRAY_POINTER");
    GetPointervPName.put(GL_SELECTION_BUFFER_POINTER, "GL_SELECTION_BUFFER_POINTER");
    GetPointervPName.put(GL_EDGE_FLAG_ARRAY_POINTER, "GL_EDGE_FLAG_ARRAY_POINTER");
    GetPointervPName.put(GL_NORMAL_ARRAY_POINTER, "GL_NORMAL_ARRAY_POINTER");
    GetPointervPName.put(GL_INSTRUMENT_BUFFER_POINTER_SGIX, "GL_INSTRUMENT_BUFFER_POINTER_SGIX");
  }
  public static final Map<Integer, String> MapTextureFormatINTEL = new HashMap<Integer, String>();
  private static void MapTextureFormatINTEL0() {
    MapTextureFormatINTEL.put(GL_LAYOUT_LINEAR_CPU_CACHED_INTEL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL");
    MapTextureFormatINTEL.put(GL_LAYOUT_LINEAR_INTEL, "GL_LAYOUT_LINEAR_INTEL");
    MapTextureFormatINTEL.put(GL_LAYOUT_DEFAULT_INTEL, "GL_LAYOUT_DEFAULT_INTEL");
  }
  public static final Map<Integer, String> ExternalHandleType = new HashMap<Integer, String>();
  private static void ExternalHandleType0() {
  }
  public static final Map<Integer, String> TextureEnvMode = new HashMap<Integer, String>();
  private static void TextureEnvMode0() {
    TextureEnvMode.put(GL_MODULATE, "GL_MODULATE");
    TextureEnvMode.put(GL_ADD, "GL_ADD");
    TextureEnvMode.put(GL_BLEND, "GL_BLEND");
    TextureEnvMode.put(GL_DECAL, "GL_DECAL");
    TextureEnvMode.put(GL_TEXTURE_ENV_BIAS_SGIX, "GL_TEXTURE_ENV_BIAS_SGIX");
  }
  public static final Map<Integer, String> RenderingMode = new HashMap<Integer, String>();
  private static void RenderingMode0() {
    RenderingMode.put(GL_SELECT, "GL_SELECT");
    RenderingMode.put(GL_RENDER, "GL_RENDER");
    RenderingMode.put(GL_FEEDBACK, "GL_FEEDBACK");
  }
  public static final Map<Integer, String> ColorTableTargetSGI = new HashMap<Integer, String>();
  private static void ColorTableTargetSGI0() {
    ColorTableTargetSGI.put(GL_PROXY_COLOR_TABLE, "GL_PROXY_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_PROXY_COLOR_TABLE_SGI, "GL_PROXY_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_TEXTURE_COLOR_TABLE_SGI, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
  }
  public static final Map<Integer, String> ConvolutionTargetEXT = new HashMap<Integer, String>();
  private static void ConvolutionTargetEXT0() {
    ConvolutionTargetEXT.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    ConvolutionTargetEXT.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
  }
  public static final Map<Integer, String> HintMode = new HashMap<Integer, String>();
  private static void HintMode0() {
    HintMode.put(GL_FASTEST, "GL_FASTEST");
    HintMode.put(GL_DONT_CARE, "GL_DONT_CARE");
    HintMode.put(GL_NICEST, "GL_NICEST");
  }
  public static final Map<Integer, String> TextureParameterName = new HashMap<Integer, String>();
  private static void TextureParameterName0() {
    TextureParameterName.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
    TextureParameterName.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
    TextureParameterName.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    TextureParameterName.put(GL_TEXTURE_MAX_LOD, "GL_TEXTURE_MAX_LOD");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    TextureParameterName.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    TextureParameterName.put(GL_TEXTURE_COMPARE_FUNC, "GL_TEXTURE_COMPARE_FUNC");
    TextureParameterName.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_RGBA, "GL_TEXTURE_SWIZZLE_RGBA");
    TextureParameterName.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
    TextureParameterName.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_R, "GL_TEXTURE_SWIZZLE_R");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    TextureParameterName.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    TextureParameterName.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    TextureParameterName.put(GL_TEXTURE_COMPARE_MODE, "GL_TEXTURE_COMPARE_MODE");
    TextureParameterName.put(GL_TEXTURE_MIN_LOD, "GL_TEXTURE_MIN_LOD");
    TextureParameterName.put(GL_TEXTURE_WRAP_R, "GL_TEXTURE_WRAP_R");
    TextureParameterName.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    TextureParameterName.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    TextureParameterName.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    TextureParameterName.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    TextureParameterName.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    TextureParameterName.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_LEVEL, "GL_TEXTURE_MAX_LEVEL");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_B, "GL_TEXTURE_SWIZZLE_B");
    TextureParameterName.put(GL_TEXTURE_PRIORITY, "GL_TEXTURE_PRIORITY");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_A, "GL_TEXTURE_SWIZZLE_A");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    TextureParameterName.put(GL_TEXTURE_BASE_LEVEL, "GL_TEXTURE_BASE_LEVEL");
    TextureParameterName.put(GL_GENERATE_MIPMAP, "GL_GENERATE_MIPMAP");
    TextureParameterName.put(GL_DEPTH_STENCIL_TEXTURE_MODE, "GL_DEPTH_STENCIL_TEXTURE_MODE");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS, "GL_TEXTURE_LOD_BIAS");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_G, "GL_TEXTURE_SWIZZLE_G");
    TextureParameterName.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
  }
  public static final Map<Integer, String> TextureFilterFuncSGIS = new HashMap<Integer, String>();
  private static void TextureFilterFuncSGIS0() {
    TextureFilterFuncSGIS.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
  }
  public static final Map<Integer, String> PrimitiveType = new HashMap<Integer, String>();
  private static void PrimitiveType0() {
    PrimitiveType.put(GL_LINE_LOOP, "GL_LINE_LOOP");
    PrimitiveType.put(GL_LINE_STRIP, "GL_LINE_STRIP");
    PrimitiveType.put(GL_QUAD_STRIP, "GL_QUAD_STRIP");
    PrimitiveType.put(GL_TRIANGLES, "GL_TRIANGLES");
    PrimitiveType.put(GL_QUADS, "GL_QUADS");
    PrimitiveType.put(GL_TRIANGLES_ADJACENCY, "GL_TRIANGLES_ADJACENCY");
    PrimitiveType.put(GL_POLYGON, "GL_POLYGON");
    PrimitiveType.put(GL_LINES_ADJACENCY, "GL_LINES_ADJACENCY");
    PrimitiveType.put(GL_TRIANGLE_FAN, "GL_TRIANGLE_FAN");
    PrimitiveType.put(GL_LINE_STRIP_ADJACENCY, "GL_LINE_STRIP_ADJACENCY");
    PrimitiveType.put(GL_PATCHES, "GL_PATCHES");
    PrimitiveType.put(GL_TRIANGLE_STRIP_ADJACENCY, "GL_TRIANGLE_STRIP_ADJACENCY");
    PrimitiveType.put(GL_TRIANGLE_STRIP, "GL_TRIANGLE_STRIP");
    PrimitiveType.put(GL_POINTS, "GL_POINTS");
    PrimitiveType.put(GL_LINES, "GL_LINES");
  }
  public static final Map<Integer, String> AttribMask = new HashMap<Integer, String>();
  private static void AttribMask0() {
    AttribMask.put(GL_TRANSFORM_BIT, "GL_TRANSFORM_BIT");
    AttribMask.put(GL_ENABLE_BIT, "GL_ENABLE_BIT");
    AttribMask.put(GL_MULTISAMPLE_BIT, "GL_MULTISAMPLE_BIT");
    AttribMask.put(GL_ALL_ATTRIB_BITS, "GL_ALL_ATTRIB_BITS");
    AttribMask.put(GL_ACCUM_BUFFER_BIT, "GL_ACCUM_BUFFER_BIT");
    AttribMask.put(GL_VIEWPORT_BIT, "GL_VIEWPORT_BIT");
    AttribMask.put(GL_EVAL_BIT, "GL_EVAL_BIT");
    AttribMask.put(GL_SCISSOR_BIT, "GL_SCISSOR_BIT");
    AttribMask.put(GL_STENCIL_BUFFER_BIT, "GL_STENCIL_BUFFER_BIT");
    AttribMask.put(GL_HINT_BIT, "GL_HINT_BIT");
    AttribMask.put(GL_LIGHTING_BIT, "GL_LIGHTING_BIT");
    AttribMask.put(GL_LINE_BIT, "GL_LINE_BIT");
    AttribMask.put(GL_POINT_BIT, "GL_POINT_BIT");
    AttribMask.put(GL_PIXEL_MODE_BIT, "GL_PIXEL_MODE_BIT");
    AttribMask.put(GL_MULTISAMPLE_BIT_3DFX, "GL_MULTISAMPLE_BIT_3DFX");
    AttribMask.put(GL_DEPTH_BUFFER_BIT, "GL_DEPTH_BUFFER_BIT");
    AttribMask.put(GL_POLYGON_BIT, "GL_POLYGON_BIT");
    AttribMask.put(GL_COLOR_BUFFER_BIT, "GL_COLOR_BUFFER_BIT");
    AttribMask.put(GL_FOG_BIT, "GL_FOG_BIT");
    AttribMask.put(GL_TEXTURE_BIT, "GL_TEXTURE_BIT");
    AttribMask.put(GL_POLYGON_STIPPLE_BIT, "GL_POLYGON_STIPPLE_BIT");
    AttribMask.put(GL_LIST_BIT, "GL_LIST_BIT");
    AttribMask.put(GL_CURRENT_BIT, "GL_CURRENT_BIT");
  }
  public static final Map<Integer, String> Boolean = new HashMap<Integer, String>();
  private static void Boolean0() {
    Boolean.put(GL_TRUE, "GL_TRUE");
    Boolean.put(GL_FALSE, "GL_FALSE");
  }
  public static final Map<Integer, String> ClearBufferMask = new HashMap<Integer, String>();
  private static void ClearBufferMask0() {
    ClearBufferMask.put(GL_COLOR_BUFFER_BIT, "GL_COLOR_BUFFER_BIT");
    ClearBufferMask.put(GL_ACCUM_BUFFER_BIT, "GL_ACCUM_BUFFER_BIT");
    ClearBufferMask.put(GL_STENCIL_BUFFER_BIT, "GL_STENCIL_BUFFER_BIT");
    ClearBufferMask.put(GL_DEPTH_BUFFER_BIT, "GL_DEPTH_BUFFER_BIT");
  }
  public static final Map<Integer, String> LogicOp = new HashMap<Integer, String>();
  private static void LogicOp0() {
    LogicOp.put(GL_XOR, "GL_XOR");
    LogicOp.put(GL_AND_INVERTED, "GL_AND_INVERTED");
    LogicOp.put(GL_EQUIV, "GL_EQUIV");
    LogicOp.put(GL_COPY, "GL_COPY");
    LogicOp.put(GL_NAND, "GL_NAND");
    LogicOp.put(GL_SET, "GL_SET");
    LogicOp.put(GL_CLEAR, "GL_CLEAR");
    LogicOp.put(GL_OR, "GL_OR");
    LogicOp.put(GL_OR_REVERSE, "GL_OR_REVERSE");
    LogicOp.put(GL_COPY_INVERTED, "GL_COPY_INVERTED");
    LogicOp.put(GL_NOR, "GL_NOR");
    LogicOp.put(GL_OR_INVERTED, "GL_OR_INVERTED");
    LogicOp.put(GL_NOOP, "GL_NOOP");
    LogicOp.put(GL_INVERT, "GL_INVERT");
    LogicOp.put(GL_AND, "GL_AND");
    LogicOp.put(GL_AND_REVERSE, "GL_AND_REVERSE");
  }
  public static final Map<Integer, String> MeshMode1 = new HashMap<Integer, String>();
  private static void MeshMode10() {
    MeshMode1.put(GL_POINT, "GL_POINT");
    MeshMode1.put(GL_LINE, "GL_LINE");
  }
  public static final Map<Integer, String> MeshMode2 = new HashMap<Integer, String>();
  private static void MeshMode20() {
    MeshMode2.put(GL_POINT, "GL_POINT");
    MeshMode2.put(GL_LINE, "GL_LINE");
    MeshMode2.put(GL_FILL, "GL_FILL");
  }
  public static final Map<Integer, String> MemoryBarrierMask = new HashMap<Integer, String>();
  private static void MemoryBarrierMask0() {
    MemoryBarrierMask.put(GL_TEXTURE_UPDATE_BARRIER_BIT, "GL_TEXTURE_UPDATE_BARRIER_BIT");
    MemoryBarrierMask.put(GL_PIXEL_BUFFER_BARRIER_BIT, "GL_PIXEL_BUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_SHADER_STORAGE_BARRIER_BIT, "GL_SHADER_STORAGE_BARRIER_BIT");
    MemoryBarrierMask.put(GL_BUFFER_UPDATE_BARRIER_BIT, "GL_BUFFER_UPDATE_BARRIER_BIT");
    MemoryBarrierMask.put(GL_ALL_BARRIER_BITS, "GL_ALL_BARRIER_BITS");
    MemoryBarrierMask.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT");
    MemoryBarrierMask.put(GL_QUERY_BUFFER_BARRIER_BIT, "GL_QUERY_BUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_TEXTURE_FETCH_BARRIER_BIT, "GL_TEXTURE_FETCH_BARRIER_BIT");
    MemoryBarrierMask.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT");
    MemoryBarrierMask.put(GL_ATOMIC_COUNTER_BARRIER_BIT, "GL_ATOMIC_COUNTER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_FRAMEBUFFER_BARRIER_BIT, "GL_FRAMEBUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_COMMAND_BARRIER_BIT, "GL_COMMAND_BARRIER_BIT");
    MemoryBarrierMask.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_UNIFORM_BARRIER_BIT, "GL_UNIFORM_BARRIER_BIT");
    MemoryBarrierMask.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT");
    MemoryBarrierMask.put(GL_ELEMENT_ARRAY_BARRIER_BIT, "GL_ELEMENT_ARRAY_BARRIER_BIT");
  }
  public static final Map<Integer, String> PixelTexGenParameterNameSGIS = new HashMap<Integer, String>();
  private static void PixelTexGenParameterNameSGIS0() {
    PixelTexGenParameterNameSGIS.put(GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS");
    PixelTexGenParameterNameSGIS.put(GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS");
  }
  public static final Map<Integer, String> UseProgramStageMask = new HashMap<Integer, String>();
  private static void UseProgramStageMask0() {
    UseProgramStageMask.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    UseProgramStageMask.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    UseProgramStageMask.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    UseProgramStageMask.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
    UseProgramStageMask.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    UseProgramStageMask.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    UseProgramStageMask.put(GL_COMPUTE_SHADER_BIT, "GL_COMPUTE_SHADER_BIT");
  }
  public static final Map<Integer, String> BufferTargetARB = new HashMap<Integer, String>();
  private static void BufferTargetARB0() {
    BufferTargetARB.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    BufferTargetARB.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    BufferTargetARB.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    BufferTargetARB.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    BufferTargetARB.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    BufferTargetARB.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    BufferTargetARB.put(GL_PIXEL_UNPACK_BUFFER, "GL_PIXEL_UNPACK_BUFFER");
    BufferTargetARB.put(GL_ELEMENT_ARRAY_BUFFER, "GL_ELEMENT_ARRAY_BUFFER");
    BufferTargetARB.put(GL_PIXEL_PACK_BUFFER, "GL_PIXEL_PACK_BUFFER");
    BufferTargetARB.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    BufferTargetARB.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    BufferTargetARB.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    BufferTargetARB.put(GL_ARRAY_BUFFER, "GL_ARRAY_BUFFER");
    BufferTargetARB.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
  }
  public static final Map<Integer, String> ColorTableParameterPNameSGI = new HashMap<Integer, String>();
  private static void ColorTableParameterPNameSGI0() {
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
  }
  public static final Map<Integer, String> MinmaxTargetEXT = new HashMap<Integer, String>();
  private static void MinmaxTargetEXT0() {
    MinmaxTargetEXT.put(GL_MINMAX, "GL_MINMAX");
  }
  public static final Map<Integer, String> PixelStoreParameter = new HashMap<Integer, String>();
  private static void PixelStoreParameter0() {
    PixelStoreParameter.put(GL_PACK_ROW_LENGTH, "GL_PACK_ROW_LENGTH");
    PixelStoreParameter.put(GL_PACK_SKIP_IMAGES, "GL_PACK_SKIP_IMAGES");
    PixelStoreParameter.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    PixelStoreParameter.put(GL_UNPACK_LSB_FIRST, "GL_UNPACK_LSB_FIRST");
    PixelStoreParameter.put(GL_PACK_RESAMPLE_OML, "GL_PACK_RESAMPLE_OML");
    PixelStoreParameter.put(GL_PACK_IMAGE_HEIGHT, "GL_PACK_IMAGE_HEIGHT");
    PixelStoreParameter.put(GL_UNPACK_IMAGE_HEIGHT, "GL_UNPACK_IMAGE_HEIGHT");
    PixelStoreParameter.put(GL_PACK_SKIP_PIXELS, "GL_PACK_SKIP_PIXELS");
    PixelStoreParameter.put(GL_UNPACK_SKIP_PIXELS, "GL_UNPACK_SKIP_PIXELS");
    PixelStoreParameter.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    PixelStoreParameter.put(GL_UNPACK_SKIP_ROWS, "GL_UNPACK_SKIP_ROWS");
    PixelStoreParameter.put(GL_PACK_LSB_FIRST, "GL_PACK_LSB_FIRST");
    PixelStoreParameter.put(GL_PACK_SKIP_ROWS, "GL_PACK_SKIP_ROWS");
    PixelStoreParameter.put(GL_UNPACK_SWAP_BYTES, "GL_UNPACK_SWAP_BYTES");
    PixelStoreParameter.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    PixelStoreParameter.put(GL_PACK_ALIGNMENT, "GL_PACK_ALIGNMENT");
    PixelStoreParameter.put(GL_UNPACK_RESAMPLE_OML, "GL_UNPACK_RESAMPLE_OML");
    PixelStoreParameter.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
    PixelStoreParameter.put(GL_PACK_SWAP_BYTES, "GL_PACK_SWAP_BYTES");
    PixelStoreParameter.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    PixelStoreParameter.put(GL_UNPACK_ROW_LENGTH, "GL_UNPACK_ROW_LENGTH");
    PixelStoreParameter.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    PixelStoreParameter.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    PixelStoreParameter.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    PixelStoreParameter.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    PixelStoreParameter.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    PixelStoreParameter.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    PixelStoreParameter.put(GL_UNPACK_SKIP_IMAGES, "GL_UNPACK_SKIP_IMAGES");
    PixelStoreParameter.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    PixelStoreParameter.put(GL_UNPACK_ALIGNMENT, "GL_UNPACK_ALIGNMENT");
    PixelStoreParameter.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
    PixelStoreParameter.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
  }
  public static final Map<Integer, String> ContextFlagMask = new HashMap<Integer, String>();
  private static void ContextFlagMask0() {
    ContextFlagMask.put(GL_CONTEXT_FLAG_DEBUG_BIT, "GL_CONTEXT_FLAG_DEBUG_BIT");
    ContextFlagMask.put(GL_CONTEXT_FLAG_DEBUG_BIT_KHR, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR");
    ContextFlagMask.put(GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT, "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT");
  }
  public static final Map<Integer, String> MaterialParameter = new HashMap<Integer, String>();
  private static void MaterialParameter0() {
    MaterialParameter.put(GL_AMBIENT_AND_DIFFUSE, "GL_AMBIENT_AND_DIFFUSE");
    MaterialParameter.put(GL_AMBIENT, "GL_AMBIENT");
    MaterialParameter.put(GL_SHININESS, "GL_SHININESS");
    MaterialParameter.put(GL_COLOR_INDEXES, "GL_COLOR_INDEXES");
    MaterialParameter.put(GL_SPECULAR, "GL_SPECULAR");
    MaterialParameter.put(GL_EMISSION, "GL_EMISSION");
    MaterialParameter.put(GL_DIFFUSE, "GL_DIFFUSE");
  }
  public static final Map<Integer, String> ShadingModel = new HashMap<Integer, String>();
  private static void ShadingModel0() {
    ShadingModel.put(GL_SMOOTH, "GL_SMOOTH");
    ShadingModel.put(GL_FLAT, "GL_FLAT");
  }
  public static final Map<Integer, String> TextureLayout = new HashMap<Integer, String>();
  private static void TextureLayout0() {
  }
  public static final Map<Integer, String> LightEnvModeSGIX = new HashMap<Integer, String>();
  private static void LightEnvModeSGIX0() {
    LightEnvModeSGIX.put(GL_MODULATE, "GL_MODULATE");
    LightEnvModeSGIX.put(GL_ADD, "GL_ADD");
    LightEnvModeSGIX.put(GL_REPLACE, "GL_REPLACE");
  }
  public static final Map<Integer, String> FrontFaceDirection = new HashMap<Integer, String>();
  private static void FrontFaceDirection0() {
    FrontFaceDirection.put(GL_CW, "GL_CW");
    FrontFaceDirection.put(GL_CCW, "GL_CCW");
  }
  public static final Map<Integer, String> TextureCoordName = new HashMap<Integer, String>();
  private static void TextureCoordName0() {
    TextureCoordName.put(GL_Q, "GL_Q");
    TextureCoordName.put(GL_S, "GL_S");
    TextureCoordName.put(GL_R, "GL_R");
    TextureCoordName.put(GL_T, "GL_T");
  }
  public static final Map<Integer, String> FogPointerTypeIBM = new HashMap<Integer, String>();
  private static void FogPointerTypeIBM0() {
    FogPointerTypeIBM.put(GL_FLOAT, "GL_FLOAT");
    FogPointerTypeIBM.put(GL_DOUBLE, "GL_DOUBLE");
  }
  public static final Map<Integer, String> TextureGenMode = new HashMap<Integer, String>();
  private static void TextureGenMode0() {
    TextureGenMode.put(GL_OBJECT_DISTANCE_TO_LINE_SGIS, "GL_OBJECT_DISTANCE_TO_LINE_SGIS");
    TextureGenMode.put(GL_EYE_DISTANCE_TO_LINE_SGIS, "GL_EYE_DISTANCE_TO_LINE_SGIS");
    TextureGenMode.put(GL_OBJECT_LINEAR, "GL_OBJECT_LINEAR");
    TextureGenMode.put(GL_SPHERE_MAP, "GL_SPHERE_MAP");
    TextureGenMode.put(GL_OBJECT_DISTANCE_TO_POINT_SGIS, "GL_OBJECT_DISTANCE_TO_POINT_SGIS");
    TextureGenMode.put(GL_EYE_DISTANCE_TO_POINT_SGIS, "GL_EYE_DISTANCE_TO_POINT_SGIS");
    TextureGenMode.put(GL_EYE_LINEAR, "GL_EYE_LINEAR");
  }
  public static final Map<Integer, String> TextureGenParameter = new HashMap<Integer, String>();
  private static void TextureGenParameter0() {
    TextureGenParameter.put(GL_OBJECT_LINE_SGIS, "GL_OBJECT_LINE_SGIS");
    TextureGenParameter.put(GL_OBJECT_PLANE, "GL_OBJECT_PLANE");
    TextureGenParameter.put(GL_EYE_POINT_SGIS, "GL_EYE_POINT_SGIS");
    TextureGenParameter.put(GL_EYE_LINE_SGIS, "GL_EYE_LINE_SGIS");
    TextureGenParameter.put(GL_OBJECT_POINT_SGIS, "GL_OBJECT_POINT_SGIS");
    TextureGenParameter.put(GL_TEXTURE_GEN_MODE, "GL_TEXTURE_GEN_MODE");
    TextureGenParameter.put(GL_EYE_PLANE, "GL_EYE_PLANE");
  }
  public static final Map<Integer, String> GetPName = new HashMap<Integer, String>();
  private static void GetPName0() {
    GetPName.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GetPName.put(GL_PACK_LSB_FIRST, "GL_PACK_LSB_FIRST");
    GetPName.put(GL_ACCUM_CLEAR_VALUE, "GL_ACCUM_CLEAR_VALUE");
    GetPName.put(GL_ALIASED_LINE_WIDTH_RANGE, "GL_ALIASED_LINE_WIDTH_RANGE");
    GetPName.put(GL_PACK_SWAP_BYTES, "GL_PACK_SWAP_BYTES");
    GetPName.put(GL_POLYGON_OFFSET_LINE, "GL_POLYGON_OFFSET_LINE");
    GetPName.put(GL_PIXEL_TEX_GEN_MODE_SGIX, "GL_PIXEL_TEX_GEN_MODE_SGIX");
    GetPName.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    GetPName.put(GL_STENCIL_REF, "GL_STENCIL_REF");
    GetPName.put(GL_MODELVIEW_STACK_DEPTH, "GL_MODELVIEW_STACK_DEPTH");
    GetPName.put(GL_POINT_SIZE_RANGE, "GL_POINT_SIZE_RANGE");
    GetPName.put(GL_GREEN_SCALE, "GL_GREEN_SCALE");
    GetPName.put(GL_MAX_CLIPMAP_DEPTH_SGIX, "GL_MAX_CLIPMAP_DEPTH_SGIX");
    GetPName.put(GL_TEXTURE_4D_BINDING_SGIS, "GL_TEXTURE_4D_BINDING_SGIS");
    GetPName.put(GL_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_COLOR_MATRIX_STACK_DEPTH_SGI");
    GetPName.put(GL_GREEN_BIAS, "GL_GREEN_BIAS");
    GetPName.put(GL_STENCIL_PASS_DEPTH_PASS, "GL_STENCIL_PASS_DEPTH_PASS");
    GetPName.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    GetPName.put(GL_DEPTH_TEST, "GL_DEPTH_TEST");
    GetPName.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    GetPName.put(GL_SAMPLE_BUFFERS_SGIS, "GL_SAMPLE_BUFFERS_SGIS");
    GetPName.put(GL_PIXEL_MAP_I_TO_A_SIZE, "GL_PIXEL_MAP_I_TO_A_SIZE");
    GetPName.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    GetPName.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    GetPName.put(GL_VERTEX_ARRAY_SIZE, "GL_VERTEX_ARRAY_SIZE");
    GetPName.put(GL_POLYGON_OFFSET_FACTOR, "GL_POLYGON_OFFSET_FACTOR");
    GetPName.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    GetPName.put(GL_AUX_BUFFERS, "GL_AUX_BUFFERS");
    GetPName.put(GL_FOG_HINT, "GL_FOG_HINT");
    GetPName.put(GL_MAX_ASYNC_TEX_IMAGE_SGIX, "GL_MAX_ASYNC_TEX_IMAGE_SGIX");
    GetPName.put(GL_MAP2_GRID_SEGMENTS, "GL_MAP2_GRID_SEGMENTS");
    GetPName.put(GL_CURRENT_TEXTURE_COORDS, "GL_CURRENT_TEXTURE_COORDS");
    GetPName.put(GL_ACCUM_BLUE_BITS, "GL_ACCUM_BLUE_BITS");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    GetPName.put(GL_CURRENT_COLOR, "GL_CURRENT_COLOR");
    GetPName.put(GL_LIST_INDEX, "GL_LIST_INDEX");
    GetPName.put(GL_SPRITE_TRANSLATION_SGIX, "GL_SPRITE_TRANSLATION_SGIX");
    GetPName.put(GL_NORMAL_ARRAY, "GL_NORMAL_ARRAY");
    GetPName.put(GL_PROJECTION_MATRIX, "GL_PROJECTION_MATRIX");
    GetPName.put(GL_INDEX_ARRAY_STRIDE, "GL_INDEX_ARRAY_STRIDE");
    GetPName.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    GetPName.put(GL_MATRIX_MODE, "GL_MATRIX_MODE");
    GetPName.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    GetPName.put(GL_MAX_LIST_NESTING, "GL_MAX_LIST_NESTING");
    GetPName.put(GL_MAP1_GRID_DOMAIN, "GL_MAP1_GRID_DOMAIN");
    GetPName.put(GL_VERTEX_ARRAY_TYPE, "GL_VERTEX_ARRAY_TYPE");
    GetPName.put(GL_UNPACK_ROW_LENGTH, "GL_UNPACK_ROW_LENGTH");
    GetPName.put(GL_MAP_STENCIL, "GL_MAP_STENCIL");
    GetPName.put(GL_RGBA_MODE, "GL_RGBA_MODE");
    GetPName.put(GL_LINE_STIPPLE, "GL_LINE_STIPPLE");
    GetPName.put(GL_SMOOTH_LINE_WIDTH_GRANULARITY, "GL_SMOOTH_LINE_WIDTH_GRANULARITY");
    GetPName.put(GL_MAX_TEXTURE_SIZE, "GL_MAX_TEXTURE_SIZE");
    GetPName.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI");
    GetPName.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    GetPName.put(GL_COLOR_MATRIX_SGI, "GL_COLOR_MATRIX_SGI");
    GetPName.put(GL_DEPTH_BITS, "GL_DEPTH_BITS");
    GetPName.put(GL_LINE_WIDTH_GRANULARITY, "GL_LINE_WIDTH_GRANULARITY");
    GetPName.put(GL_MAX_FRAGMENT_LIGHTS_SGIX, "GL_MAX_FRAGMENT_LIGHTS_SGIX");
    GetPName.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
    GetPName.put(GL_VERTEX_ARRAY_STRIDE, "GL_VERTEX_ARRAY_STRIDE");
    GetPName.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    GetPName.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    GetPName.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    GetPName.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    GetPName.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    GetPName.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
    GetPName.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
    GetPName.put(GL_ALPHA_TEST_FUNC_QCOM, "GL_ALPHA_TEST_FUNC_QCOM");
    GetPName.put(GL_INDEX_ARRAY, "GL_INDEX_ARRAY");
    GetPName.put(GL_LINE_SMOOTH, "GL_LINE_SMOOTH");
    GetPName.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    GetPName.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    GetPName.put(GL_ALPHA_TEST, "GL_ALPHA_TEST");
    GetPName.put(GL_SPRITE_MODE_SGIX, "GL_SPRITE_MODE_SGIX");
    GetPName.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    GetPName.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
    GetPName.put(GL_ASYNC_MARKER_SGIX, "GL_ASYNC_MARKER_SGIX");
    GetPName.put(GL_COLOR_ARRAY_STRIDE, "GL_COLOR_ARRAY_STRIDE");
    GetPName.put(GL_EDGE_FLAG_ARRAY_STRIDE, "GL_EDGE_FLAG_ARRAY_STRIDE");
    GetPName.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    GetPName.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    GetPName.put(GL_DEPTH_WRITEMASK, "GL_DEPTH_WRITEMASK");
    GetPName.put(GL_FRAMEZOOM_FACTOR_SGIX, "GL_FRAMEZOOM_FACTOR_SGIX");
    GetPName.put(GL_MAX_LIGHTS, "GL_MAX_LIGHTS");
    GetPName.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    GetPName.put(GL_PROJECTION_STACK_DEPTH, "GL_PROJECTION_STACK_DEPTH");
    GetPName.put(GL_UNPACK_SKIP_ROWS, "GL_UNPACK_SKIP_ROWS");
    GetPName.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GetPName.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    GetPName.put(GL_SMOOTH_LINE_WIDTH_RANGE, "GL_SMOOTH_LINE_WIDTH_RANGE");
  }
  private static void GetPName1() {
    GetPName.put(GL_PACK_ALIGNMENT, "GL_PACK_ALIGNMENT");
    GetPName.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    GetPName.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
    GetPName.put(GL_FRONT_FACE, "GL_FRONT_FACE");
    GetPName.put(GL_BLEND_SRC, "GL_BLEND_SRC");
    GetPName.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    GetPName.put(GL_STENCIL_TEST, "GL_STENCIL_TEST");
    GetPName.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    GetPName.put(GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX");
    GetPName.put(GL_COLOR_MATERIAL_FACE, "GL_COLOR_MATERIAL_FACE");
    GetPName.put(GL_MAX_PIXEL_MAP_TABLE, "GL_MAX_PIXEL_MAP_TABLE");
    GetPName.put(GL_STEREO, "GL_STEREO");
    GetPName.put(GL_RENDER_MODE, "GL_RENDER_MODE");
    GetPName.put(GL_LIGHTING, "GL_LIGHTING");
    GetPName.put(GL_BLEND_DST, "GL_BLEND_DST");
    GetPName.put(GL_TEXTURE_STACK_DEPTH, "GL_TEXTURE_STACK_DEPTH");
    GetPName.put(GL_ALPHA_BITS, "GL_ALPHA_BITS");
    GetPName.put(GL_PERSPECTIVE_CORRECTION_HINT, "GL_PERSPECTIVE_CORRECTION_HINT");
    GetPName.put(GL_UNPACK_SKIP_PIXELS, "GL_UNPACK_SKIP_PIXELS");
    GetPName.put(GL_BLUE_SCALE, "GL_BLUE_SCALE");
    GetPName.put(GL_LOGIC_OP, "GL_LOGIC_OP");
    GetPName.put(GL_PACK_SKIP_ROWS, "GL_PACK_SKIP_ROWS");
    GetPName.put(GL_UNPACK_SWAP_BYTES, "GL_UNPACK_SWAP_BYTES");
    GetPName.put(GL_POLYGON_STIPPLE, "GL_POLYGON_STIPPLE");
    GetPName.put(GL_LIGHT_MODEL_TWO_SIDE, "GL_LIGHT_MODEL_TWO_SIDE");
    GetPName.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    GetPName.put(GL_DETAIL_TEXTURE_2D_BINDING_SGIS, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS");
    GetPName.put(GL_CURRENT_RASTER_DISTANCE, "GL_CURRENT_RASTER_DISTANCE");
    GetPName.put(GL_COLOR_CLEAR_VALUE, "GL_COLOR_CLEAR_VALUE");
    GetPName.put(GL_TEXTURE_COORD_ARRAY_TYPE, "GL_TEXTURE_COORD_ARRAY_TYPE");
    GetPName.put(GL_LINE_STIPPLE_PATTERN, "GL_LINE_STIPPLE_PATTERN");
    GetPName.put(GL_POLYGON_SMOOTH, "GL_POLYGON_SMOOTH");
    GetPName.put(GL_POINT_SIZE_GRANULARITY, "GL_POINT_SIZE_GRANULARITY");
    GetPName.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    GetPName.put(GL_STENCIL_PASS_DEPTH_FAIL, "GL_STENCIL_PASS_DEPTH_FAIL");
    GetPName.put(GL_MAX_FOG_FUNC_POINTS_SGIS, "GL_MAX_FOG_FUNC_POINTS_SGIS");
    GetPName.put(GL_FOG_MODE, "GL_FOG_MODE");
    GetPName.put(GL_ALPHA_TEST_FUNC, "GL_ALPHA_TEST_FUNC");
    GetPName.put(GL_POLYGON_OFFSET_POINT, "GL_POLYGON_OFFSET_POINT");
    GetPName.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
    GetPName.put(GL_FEEDBACK_BUFFER_SIZE, "GL_FEEDBACK_BUFFER_SIZE");
    GetPName.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GetPName.put(GL_ACCUM_ALPHA_BITS, "GL_ACCUM_ALPHA_BITS");
    GetPName.put(GL_LIST_MODE, "GL_LIST_MODE");
    GetPName.put(GL_TEXTURE_MATRIX, "GL_TEXTURE_MATRIX");
    GetPName.put(GL_DEPTH_SCALE, "GL_DEPTH_SCALE");
    GetPName.put(GL_MAX_CLIP_PLANES, "GL_MAX_CLIP_PLANES");
    GetPName.put(GL_POLYGON_OFFSET_FILL, "GL_POLYGON_OFFSET_FILL");
    GetPName.put(GL_NORMALIZE, "GL_NORMALIZE");
    GetPName.put(GL_MAX_ASYNC_HISTOGRAM_SGIX, "GL_MAX_ASYNC_HISTOGRAM_SGIX");
    GetPName.put(GL_ACCUM_RED_BITS, "GL_ACCUM_RED_BITS");
    GetPName.put(GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    GetPName.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    GetPName.put(GL_CURRENT_RASTER_POSITION, "GL_CURRENT_RASTER_POSITION");
    GetPName.put(GL_PIXEL_MAP_R_TO_R_SIZE, "GL_PIXEL_MAP_R_TO_R_SIZE");
    GetPName.put(GL_TEXTURE_BINDING_1D, "GL_TEXTURE_BINDING_1D");
    GetPName.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    GetPName.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    GetPName.put(GL_TEXTURE_COORD_ARRAY_SIZE, "GL_TEXTURE_COORD_ARRAY_SIZE");
    GetPName.put(GL_ALPHA_TEST_QCOM, "GL_ALPHA_TEST_QCOM");
    GetPName.put(GL_CURRENT_RASTER_POSITION_VALID, "GL_CURRENT_RASTER_POSITION_VALID");
    GetPName.put(GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX");
    GetPName.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
    GetPName.put(GL_MAX_TEXTURE_STACK_DEPTH, "GL_MAX_TEXTURE_STACK_DEPTH");
    GetPName.put(GL_LINE_WIDTH, "GL_LINE_WIDTH");
    GetPName.put(GL_STENCIL_WRITEMASK, "GL_STENCIL_WRITEMASK");
    GetPName.put(GL_UNPACK_LSB_FIRST, "GL_UNPACK_LSB_FIRST");
    GetPName.put(GL_TEXTURE_BINDING_2D, "GL_TEXTURE_BINDING_2D");
    GetPName.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    GetPName.put(GL_CURRENT_RASTER_TEXTURE_COORDS, "GL_CURRENT_RASTER_TEXTURE_COORDS");
    GetPName.put(GL_NORMAL_ARRAY_STRIDE, "GL_NORMAL_ARRAY_STRIDE");
    GetPName.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    GetPName.put(GL_BLUE_BIAS, "GL_BLUE_BIAS");
    GetPName.put(GL_AUTO_NORMAL, "GL_AUTO_NORMAL");
    GetPName.put(GL_STENCIL_BITS, "GL_STENCIL_BITS");
    GetPName.put(GL_CULL_FACE_MODE, "GL_CULL_FACE_MODE");
    GetPName.put(GL_PIXEL_MAP_B_TO_B_SIZE, "GL_PIXEL_MAP_B_TO_B_SIZE");
    GetPName.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    GetPName.put(GL_DEFORMATIONS_MASK_SGIX, "GL_DEFORMATIONS_MASK_SGIX");
    GetPName.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
    GetPName.put(GL_READ_BUFFER, "GL_READ_BUFFER");
    GetPName.put(GL_FOG_COLOR, "GL_FOG_COLOR");
    GetPName.put(GL_TEXTURE_BINDING_3D, "GL_TEXTURE_BINDING_3D");
    GetPName.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
    GetPName.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    GetPName.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    GetPName.put(GL_BLEND, "GL_BLEND");
    GetPName.put(GL_POINT_SMOOTH, "GL_POINT_SMOOTH");
    GetPName.put(GL_SPRITE_AXIS_SGIX, "GL_SPRITE_AXIS_SGIX");
    GetPName.put(GL_ALIASED_POINT_SIZE_RANGE, "GL_ALIASED_POINT_SIZE_RANGE");
    GetPName.put(GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX, "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX");
  }
  private static void GetPName2() {
    GetPName.put(GL_LINE_WIDTH_RANGE, "GL_LINE_WIDTH_RANGE");
    GetPName.put(GL_GREEN_BITS, "GL_GREEN_BITS");
    GetPName.put(GL_SAMPLE_PATTERN_SGIS, "GL_SAMPLE_PATTERN_SGIS");
    GetPName.put(GL_DOUBLEBUFFER, "GL_DOUBLEBUFFER");
    GetPName.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    GetPName.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    GetPName.put(GL_RED_BITS, "GL_RED_BITS");
    GetPName.put(GL_LINE_SMOOTH_HINT, "GL_LINE_SMOOTH_HINT");
    GetPName.put(GL_COLOR_ARRAY_SIZE, "GL_COLOR_ARRAY_SIZE");
    GetPName.put(GL_LIGHT_MODEL_AMBIENT, "GL_LIGHT_MODEL_AMBIENT");
    GetPName.put(GL_PIXEL_MAP_I_TO_G_SIZE, "GL_PIXEL_MAP_I_TO_G_SIZE");
    GetPName.put(GL_CURRENT_NORMAL, "GL_CURRENT_NORMAL");
    GetPName.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    GetPName.put(GL_COLOR_MATERIAL, "GL_COLOR_MATERIAL");
    GetPName.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    GetPName.put(GL_POLYGON_MODE, "GL_POLYGON_MODE");
    GetPName.put(GL_ATTRIB_STACK_DEPTH, "GL_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_MAX_PROJECTION_STACK_DEPTH, "GL_MAX_PROJECTION_STACK_DEPTH");
    GetPName.put(GL_MAX_ASYNC_DRAW_PIXELS_SGIX, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX");
    GetPName.put(GL_SMOOTH_POINT_SIZE_GRANULARITY, "GL_SMOOTH_POINT_SIZE_GRANULARITY");
    GetPName.put(GL_LIGHT_MODEL_LOCAL_VIEWER, "GL_LIGHT_MODEL_LOCAL_VIEWER");
    GetPName.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    GetPName.put(GL_CULL_FACE, "GL_CULL_FACE");
    GetPName.put(GL_SAMPLES_SGIS, "GL_SAMPLES_SGIS");
    GetPName.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    GetPName.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    GetPName.put(GL_VIEWPORT, "GL_VIEWPORT");
    GetPName.put(GL_TEXTURE_COORD_ARRAY, "GL_TEXTURE_COORD_ARRAY");
    GetPName.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    GetPName.put(GL_MAX_NAME_STACK_DEPTH, "GL_MAX_NAME_STACK_DEPTH");
    GetPName.put(GL_SELECTION_BUFFER_SIZE, "GL_SELECTION_BUFFER_SIZE");
    GetPName.put(GL_DEPTH_BIAS, "GL_DEPTH_BIAS");
    GetPName.put(GL_STENCIL_VALUE_MASK, "GL_STENCIL_VALUE_MASK");
    GetPName.put(GL_DEPTH_CLEAR_VALUE, "GL_DEPTH_CLEAR_VALUE");
    GetPName.put(GL_DEPTH_FUNC, "GL_DEPTH_FUNC");
    GetPName.put(GL_CURRENT_RASTER_INDEX, "GL_CURRENT_RASTER_INDEX");
    GetPName.put(GL_PACK_SKIP_PIXELS, "GL_PACK_SKIP_PIXELS");
    GetPName.put(GL_ALPHA_TEST_REF, "GL_ALPHA_TEST_REF");
    GetPName.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
    GetPName.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    GetPName.put(GL_MAX_ASYNC_READ_PIXELS_SGIX, "GL_MAX_ASYNC_READ_PIXELS_SGIX");
    GetPName.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    GetPName.put(GL_ALPHA_SCALE, "GL_ALPHA_SCALE");
    GetPName.put(GL_INDEX_CLEAR_VALUE, "GL_INDEX_CLEAR_VALUE");
    GetPName.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    GetPName.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
    GetPName.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    GetPName.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    GetPName.put(GL_FEEDBACK_BUFFER_TYPE, "GL_FEEDBACK_BUFFER_TYPE");
    GetPName.put(GL_UNPACK_ALIGNMENT, "GL_UNPACK_ALIGNMENT");
    GetPName.put(GL_LIST_BASE, "GL_LIST_BASE");
    GetPName.put(GL_PACK_ROW_LENGTH, "GL_PACK_ROW_LENGTH");
    GetPName.put(GL_NAME_STACK_DEPTH, "GL_NAME_STACK_DEPTH");
    GetPName.put(GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX");
    GetPName.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
    GetPName.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    GetPName.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    GetPName.put(GL_ZOOM_X, "GL_ZOOM_X");
    GetPName.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    GetPName.put(GL_ZOOM_Y, "GL_ZOOM_Y");
    GetPName.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    GetPName.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    GetPName.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    GetPName.put(GL_COLOR_MATERIAL_PARAMETER, "GL_COLOR_MATERIAL_PARAMETER");
    GetPName.put(GL_COLOR_ARRAY, "GL_COLOR_ARRAY");
    GetPName.put(GL_INDEX_OFFSET, "GL_INDEX_OFFSET");
    GetPName.put(GL_PIXEL_MAP_I_TO_R_SIZE, "GL_PIXEL_MAP_I_TO_R_SIZE");
    GetPName.put(GL_COLOR_ARRAY_TYPE, "GL_COLOR_ARRAY_TYPE");
    GetPName.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    GetPName.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    GetPName.put(GL_ALPHA_TEST_REF_QCOM, "GL_ALPHA_TEST_REF_QCOM");
    GetPName.put(GL_LINE_STIPPLE_REPEAT, "GL_LINE_STIPPLE_REPEAT");
    GetPName.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
    GetPName.put(GL_INSTRUMENT_MEASUREMENTS_SGIX, "GL_INSTRUMENT_MEASUREMENTS_SGIX");
    GetPName.put(GL_ALPHA_BIAS, "GL_ALPHA_BIAS");
    GetPName.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
    GetPName.put(GL_MAX_4D_TEXTURE_SIZE_SGIS, "GL_MAX_4D_TEXTURE_SIZE_SGIS");
    GetPName.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
    GetPName.put(GL_LOGIC_OP_MODE, "GL_LOGIC_OP_MODE");
    GetPName.put(GL_LIGHT_MODEL_COLOR_CONTROL, "GL_LIGHT_MODEL_COLOR_CONTROL");
    GetPName.put(GL_POINT_SMOOTH_HINT, "GL_POINT_SMOOTH_HINT");
    GetPName.put(GL_INDEX_BITS, "GL_INDEX_BITS");
    GetPName.put(GL_POINT_SIZE, "GL_POINT_SIZE");
    GetPName.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
  }
  private static void GetPName3() {
    GetPName.put(GL_FOG_FUNC_POINTS_SGIS, "GL_FOG_FUNC_POINTS_SGIS");
    GetPName.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    GetPName.put(GL_STENCIL_CLEAR_VALUE, "GL_STENCIL_CLEAR_VALUE");
    GetPName.put(GL_DRAW_BUFFER, "GL_DRAW_BUFFER");
    GetPName.put(GL_SAMPLE_MASK_VALUE_SGIS, "GL_SAMPLE_MASK_VALUE_SGIS");
    GetPName.put(GL_SMOOTH_POINT_SIZE_RANGE, "GL_SMOOTH_POINT_SIZE_RANGE");
    GetPName.put(GL_SHADE_MODEL, "GL_SHADE_MODEL");
    GetPName.put(GL_ACCUM_GREEN_BITS, "GL_ACCUM_GREEN_BITS");
    GetPName.put(GL_POLYGON_OFFSET_UNITS, "GL_POLYGON_OFFSET_UNITS");
    GetPName.put(GL_COLOR_LOGIC_OP, "GL_COLOR_LOGIC_OP");
    GetPName.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
    GetPName.put(GL_CURRENT_RASTER_COLOR, "GL_CURRENT_RASTER_COLOR");
    GetPName.put(GL_PIXEL_MAP_I_TO_B_SIZE, "GL_PIXEL_MAP_I_TO_B_SIZE");
    GetPName.put(GL_MAP1_GRID_SEGMENTS, "GL_MAP1_GRID_SEGMENTS");
    GetPName.put(GL_MAX_VIEWPORT_DIMS, "GL_MAX_VIEWPORT_DIMS");
    GetPName.put(GL_MAX_FRAMEZOOM_FACTOR_SGIX, "GL_MAX_FRAMEZOOM_FACTOR_SGIX");
    GetPName.put(GL_SAMPLE_MASK_INVERT_SGIS, "GL_SAMPLE_MASK_INVERT_SGIS");
    GetPName.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
    GetPName.put(GL_FOG_END, "GL_FOG_END");
    GetPName.put(GL_TEXTURE_COORD_ARRAY_STRIDE, "GL_TEXTURE_COORD_ARRAY_STRIDE");
    GetPName.put(GL_NORMAL_ARRAY_TYPE, "GL_NORMAL_ARRAY_TYPE");
    GetPName.put(GL_EDGE_FLAG_ARRAY, "GL_EDGE_FLAG_ARRAY");
    GetPName.put(GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX");
    GetPName.put(GL_MAX_CLIP_DISTANCES, "GL_MAX_CLIP_DISTANCES");
    GetPName.put(GL_TEXTURE_GEN_Q, "GL_TEXTURE_GEN_Q");
    GetPName.put(GL_TEXTURE_GEN_R, "GL_TEXTURE_GEN_R");
    GetPName.put(GL_TEXTURE_GEN_S, "GL_TEXTURE_GEN_S");
    GetPName.put(GL_TEXTURE_GEN_T, "GL_TEXTURE_GEN_T");
    GetPName.put(GL_EDGE_FLAG, "GL_EDGE_FLAG");
    GetPName.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    GetPName.put(GL_MODELVIEW_MATRIX, "GL_MODELVIEW_MATRIX");
    GetPName.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    GetPName.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    GetPName.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    GetPName.put(GL_LIGHT6, "GL_LIGHT6");
    GetPName.put(GL_REFERENCE_PLANE_EQUATION_SGIX, "GL_REFERENCE_PLANE_EQUATION_SGIX");
    GetPName.put(GL_LIGHT7, "GL_LIGHT7");
    GetPName.put(GL_LIGHT4, "GL_LIGHT4");
    GetPName.put(GL_BLUE_BITS, "GL_BLUE_BITS");
    GetPName.put(GL_INDEX_WRITEMASK, "GL_INDEX_WRITEMASK");
    GetPName.put(GL_LIGHT5, "GL_LIGHT5");
    GetPName.put(GL_INDEX_SHIFT, "GL_INDEX_SHIFT");
    GetPName.put(GL_MAX_ATTRIB_STACK_DEPTH, "GL_MAX_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_LIGHT2, "GL_LIGHT2");
    GetPName.put(GL_LIGHT3, "GL_LIGHT3");
    GetPName.put(GL_INDEX_MODE, "GL_INDEX_MODE");
    GetPName.put(GL_LIGHT0, "GL_LIGHT0");
    GetPName.put(GL_LIGHT1, "GL_LIGHT1");
    GetPName.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    GetPName.put(GL_PIXEL_MAP_A_TO_A_SIZE, "GL_PIXEL_MAP_A_TO_A_SIZE");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    GetPName.put(GL_STENCIL_FUNC, "GL_STENCIL_FUNC");
    GetPName.put(GL_CURRENT_INDEX, "GL_CURRENT_INDEX");
    GetPName.put(GL_INDEX_LOGIC_OP, "GL_INDEX_LOGIC_OP");
    GetPName.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    GetPName.put(GL_PIXEL_MAP_S_TO_S_SIZE, "GL_PIXEL_MAP_S_TO_S_SIZE");
    GetPName.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    GetPName.put(GL_PIXEL_TILE_CACHE_INCREMENT_SGIX, "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX");
    GetPName.put(GL_MAX_ACTIVE_LIGHTS_SGIX, "GL_MAX_ACTIVE_LIGHTS_SGIX");
    GetPName.put(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH, "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_MAP_COLOR, "GL_MAP_COLOR");
    GetPName.put(GL_DITHER, "GL_DITHER");
    GetPName.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    GetPName.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
    GetPName.put(GL_STENCIL_FAIL, "GL_STENCIL_FAIL");
    GetPName.put(GL_FOG, "GL_FOG");
    GetPName.put(GL_FOG_START, "GL_FOG_START");
    GetPName.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    GetPName.put(GL_SUBPIXEL_BITS, "GL_SUBPIXEL_BITS");
    GetPName.put(GL_POLYGON_SMOOTH_HINT, "GL_POLYGON_SMOOTH_HINT");
    GetPName.put(GL_RED_BIAS, "GL_RED_BIAS");
    GetPName.put(GL_INDEX_ARRAY_TYPE, "GL_INDEX_ARRAY_TYPE");
    GetPName.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    GetPName.put(GL_MAX_MODELVIEW_STACK_DEPTH, "GL_MAX_MODELVIEW_STACK_DEPTH");
    GetPName.put(GL_PIXEL_MAP_I_TO_I_SIZE, "GL_PIXEL_MAP_I_TO_I_SIZE");
    GetPName.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    GetPName.put(GL_MAX_EVAL_ORDER, "GL_MAX_EVAL_ORDER");
    GetPName.put(GL_MAP2_GRID_DOMAIN, "GL_MAP2_GRID_DOMAIN");
    GetPName.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    GetPName.put(GL_CLIENT_ATTRIB_STACK_DEPTH, "GL_CLIENT_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_PIXEL_MAP_G_TO_G_SIZE, "GL_PIXEL_MAP_G_TO_G_SIZE");
    GetPName.put(GL_RED_SCALE, "GL_RED_SCALE");
  }
  public static final Map<Integer, String> ClipPlaneName = new HashMap<Integer, String>();
  private static void ClipPlaneName0() {
    ClipPlaneName.put(GL_CLIP_DISTANCE1, "GL_CLIP_DISTANCE1");
    ClipPlaneName.put(GL_CLIP_DISTANCE0, "GL_CLIP_DISTANCE0");
    ClipPlaneName.put(GL_CLIP_DISTANCE3, "GL_CLIP_DISTANCE3");
    ClipPlaneName.put(GL_CLIP_DISTANCE2, "GL_CLIP_DISTANCE2");
    ClipPlaneName.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    ClipPlaneName.put(GL_CLIP_DISTANCE5, "GL_CLIP_DISTANCE5");
    ClipPlaneName.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    ClipPlaneName.put(GL_CLIP_DISTANCE4, "GL_CLIP_DISTANCE4");
    ClipPlaneName.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    ClipPlaneName.put(GL_CLIP_DISTANCE7, "GL_CLIP_DISTANCE7");
    ClipPlaneName.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    ClipPlaneName.put(GL_CLIP_DISTANCE6, "GL_CLIP_DISTANCE6");
    ClipPlaneName.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    ClipPlaneName.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
  }
  public static final Map<Integer, String> PixelMap = new HashMap<Integer, String>();
  private static void PixelMap0() {
    PixelMap.put(GL_PIXEL_MAP_B_TO_B, "GL_PIXEL_MAP_B_TO_B");
    PixelMap.put(GL_PIXEL_MAP_S_TO_S, "GL_PIXEL_MAP_S_TO_S");
    PixelMap.put(GL_PIXEL_MAP_I_TO_I, "GL_PIXEL_MAP_I_TO_I");
    PixelMap.put(GL_PIXEL_MAP_G_TO_G, "GL_PIXEL_MAP_G_TO_G");
    PixelMap.put(GL_PIXEL_MAP_I_TO_B, "GL_PIXEL_MAP_I_TO_B");
    PixelMap.put(GL_PIXEL_MAP_I_TO_R, "GL_PIXEL_MAP_I_TO_R");
    PixelMap.put(GL_PIXEL_MAP_I_TO_A, "GL_PIXEL_MAP_I_TO_A");
    PixelMap.put(GL_PIXEL_MAP_A_TO_A, "GL_PIXEL_MAP_A_TO_A");
    PixelMap.put(GL_PIXEL_MAP_I_TO_G, "GL_PIXEL_MAP_I_TO_G");
    PixelMap.put(GL_PIXEL_MAP_R_TO_R, "GL_PIXEL_MAP_R_TO_R");
  }
  public static final Map<Integer, String> DrawElementsType = new HashMap<Integer, String>();
  private static void DrawElementsType0() {
    DrawElementsType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    DrawElementsType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    DrawElementsType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  public static final Map<Integer, String> TextureMagFilter = new HashMap<Integer, String>();
  private static void TextureMagFilter0() {
    TextureMagFilter.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    TextureMagFilter.put(GL_LINEAR, "GL_LINEAR");
    TextureMagFilter.put(GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX, "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX");
    TextureMagFilter.put(GL_LINEAR_DETAIL_SGIS, "GL_LINEAR_DETAIL_SGIS");
    TextureMagFilter.put(GL_LINEAR_SHARPEN_COLOR_SGIS, "GL_LINEAR_SHARPEN_COLOR_SGIS");
    TextureMagFilter.put(GL_LINEAR_SHARPEN_ALPHA_SGIS, "GL_LINEAR_SHARPEN_ALPHA_SGIS");
    TextureMagFilter.put(GL_PIXEL_TEX_GEN_Q_CEILING_SGIX, "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX");
    TextureMagFilter.put(GL_LINEAR_SHARPEN_SGIS, "GL_LINEAR_SHARPEN_SGIS");
    TextureMagFilter.put(GL_LINEAR_DETAIL_COLOR_SGIS, "GL_LINEAR_DETAIL_COLOR_SGIS");
    TextureMagFilter.put(GL_NEAREST, "GL_NEAREST");
    TextureMagFilter.put(GL_LINEAR_DETAIL_ALPHA_SGIS, "GL_LINEAR_DETAIL_ALPHA_SGIS");
    TextureMagFilter.put(GL_PIXEL_TEX_GEN_Q_ROUND_SGIX, "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX");
  }
  public static final Map<Integer, String> ConvolutionParameterEXT = new HashMap<Integer, String>();
  private static void ConvolutionParameterEXT0() {
    ConvolutionParameterEXT.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    ConvolutionParameterEXT.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    ConvolutionParameterEXT.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
  }
  public static final Map<Integer, String> FogMode = new HashMap<Integer, String>();
  private static void FogMode0() {
    FogMode.put(GL_EXP, "GL_EXP");
    FogMode.put(GL_LINEAR, "GL_LINEAR");
    FogMode.put(GL_EXP2, "GL_EXP2");
    FogMode.put(GL_FOG_FUNC_SGIS, "GL_FOG_FUNC_SGIS");
  }
  public static final Map<Integer, String> StringName = new HashMap<Integer, String>();
  private static void StringName0() {
    StringName.put(GL_VERSION, "GL_VERSION");
    StringName.put(GL_SHADING_LANGUAGE_VERSION, "GL_SHADING_LANGUAGE_VERSION");
    StringName.put(GL_VENDOR, "GL_VENDOR");
    StringName.put(GL_RENDERER, "GL_RENDERER");
    StringName.put(GL_EXTENSIONS, "GL_EXTENSIONS");
  }
  public static final Map<Integer, String> PixelCopyType = new HashMap<Integer, String>();
  private static void PixelCopyType0() {
    PixelCopyType.put(GL_DEPTH, "GL_DEPTH");
    PixelCopyType.put(GL_COLOR, "GL_COLOR");
    PixelCopyType.put(GL_STENCIL, "GL_STENCIL");
  }
  public static final Map<Integer, String> DataType = new HashMap<Integer, String>();
  private static void DataType0() {
  }
  public static final Map<Integer, String> GetTextureParameter = new HashMap<Integer, String>();
  private static void GetTextureParameter0() {
    GetTextureParameter.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
    GetTextureParameter.put(GL_TEXTURE_BASE_LEVEL_SGIS, "GL_TEXTURE_BASE_LEVEL_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
    GetTextureParameter.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
    GetTextureParameter.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
    GetTextureParameter.put(GL_TEXTURE_COMPARE_OPERATOR_SGIX, "GL_TEXTURE_COMPARE_OPERATOR_SGIX");
    GetTextureParameter.put(GL_TEXTURE_GEQUAL_R_SGIX, "GL_TEXTURE_GEQUAL_R_SGIX");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    GetTextureParameter.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    GetTextureParameter.put(GL_TEXTURE_RESIDENT, "GL_TEXTURE_RESIDENT");
    GetTextureParameter.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    GetTextureParameter.put(GL_TEXTURE_BORDER, "GL_TEXTURE_BORDER");
    GetTextureParameter.put(GL_TEXTURE_LEQUAL_R_SGIX, "GL_TEXTURE_LEQUAL_R_SGIX");
    GetTextureParameter.put(GL_TEXTURE_BLUE_SIZE, "GL_TEXTURE_BLUE_SIZE");
    GetTextureParameter.put(GL_TEXTURE_INTENSITY_SIZE, "GL_TEXTURE_INTENSITY_SIZE");
    GetTextureParameter.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    GetTextureParameter.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    GetTextureParameter.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    GetTextureParameter.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    GetTextureParameter.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    GetTextureParameter.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    GetTextureParameter.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    GetTextureParameter.put(GL_TEXTURE_INTERNAL_FORMAT, "GL_TEXTURE_INTERNAL_FORMAT");
    GetTextureParameter.put(GL_TEXTURE_RED_SIZE, "GL_TEXTURE_RED_SIZE");
    GetTextureParameter.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    GetTextureParameter.put(GL_TEXTURE_HEIGHT, "GL_TEXTURE_HEIGHT");
    GetTextureParameter.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    GetTextureParameter.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    GetTextureParameter.put(GL_TEXTURE_LUMINANCE_SIZE, "GL_TEXTURE_LUMINANCE_SIZE");
    GetTextureParameter.put(GL_TEXTURE_MIN_LOD_SGIS, "GL_TEXTURE_MIN_LOD_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAX_LEVEL_SGIS, "GL_TEXTURE_MAX_LEVEL_SGIS");
    GetTextureParameter.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
    GetTextureParameter.put(GL_TEXTURE_COMPONENTS, "GL_TEXTURE_COMPONENTS");
    GetTextureParameter.put(GL_TEXTURE_WIDTH, "GL_TEXTURE_WIDTH");
    GetTextureParameter.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    GetTextureParameter.put(GL_TEXTURE_MAX_LOD_SGIS, "GL_TEXTURE_MAX_LOD_SGIS");
    GetTextureParameter.put(GL_TEXTURE_GREEN_SIZE, "GL_TEXTURE_GREEN_SIZE");
    GetTextureParameter.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    GetTextureParameter.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    GetTextureParameter.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    GetTextureParameter.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
    GetTextureParameter.put(GL_TEXTURE_PRIORITY, "GL_TEXTURE_PRIORITY");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    GetTextureParameter.put(GL_TEXTURE_ALPHA_SIZE, "GL_TEXTURE_ALPHA_SIZE");
    GetTextureParameter.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
  }
  public static final Map<Integer, String> ListNameType = new HashMap<Integer, String>();
  private static void ListNameType0() {
    ListNameType.put(GL_3_BYTES, "GL_3_BYTES");
    ListNameType.put(GL_FLOAT, "GL_FLOAT");
    ListNameType.put(GL_BYTE, "GL_BYTE");
    ListNameType.put(GL_INT, "GL_INT");
    ListNameType.put(GL_2_BYTES, "GL_2_BYTES");
    ListNameType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    ListNameType.put(GL_4_BYTES, "GL_4_BYTES");
    ListNameType.put(GL_SHORT, "GL_SHORT");
    ListNameType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    ListNameType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  public static final Map<Integer, String> GetConvolutionParameter = new HashMap<Integer, String>();
  private static void GetConvolutionParameter0() {
  }
  public static final Map<Integer, String> PixelTexGenMode = new HashMap<Integer, String>();
  private static void PixelTexGenMode0() {
    PixelTexGenMode.put(GL_RGB, "GL_RGB");
    PixelTexGenMode.put(GL_LUMINANCE_ALPHA, "GL_LUMINANCE_ALPHA");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX");
    PixelTexGenMode.put(GL_LUMINANCE, "GL_LUMINANCE");
    PixelTexGenMode.put(GL_RGBA, "GL_RGBA");
    PixelTexGenMode.put(GL_NONE, "GL_NONE");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX");
  }
  public static final Map<Integer, String> SemaphoreParameterName = new HashMap<Integer, String>();
  private static void SemaphoreParameterName0() {
  }
  public static final Map<Integer, String> BlendingFactorSrc = new HashMap<Integer, String>();
  private static void BlendingFactorSrc0() {
    BlendingFactorSrc.put(GL_ZERO, "GL_ZERO");
    BlendingFactorSrc.put(GL_ONE, "GL_ONE");
    BlendingFactorSrc.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    BlendingFactorSrc.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    BlendingFactorSrc.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    BlendingFactorSrc.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    BlendingFactorSrc.put(GL_DST_COLOR, "GL_DST_COLOR");
    BlendingFactorSrc.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    BlendingFactorSrc.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
  }
  public static final Map<Integer, String> MapTarget = new HashMap<Integer, String>();
  private static void MapTarget0() {
    MapTarget.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    MapTarget.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    MapTarget.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    MapTarget.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    MapTarget.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    MapTarget.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    MapTarget.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    MapTarget.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    MapTarget.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    MapTarget.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    MapTarget.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    MapTarget.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
  }
  public static final Map<Integer, String> NormalPointerType = new HashMap<Integer, String>();
  private static void NormalPointerType0() {
    NormalPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    NormalPointerType.put(GL_FLOAT, "GL_FLOAT");
    NormalPointerType.put(GL_BYTE, "GL_BYTE");
    NormalPointerType.put(GL_INT, "GL_INT");
    NormalPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static final Map<Integer, String> ClientAttribMask = new HashMap<Integer, String>();
  private static void ClientAttribMask0() {
    ClientAttribMask.put(GL_CLIENT_VERTEX_ARRAY_BIT, "GL_CLIENT_VERTEX_ARRAY_BIT");
    ClientAttribMask.put(GL_CLIENT_PIXEL_STORE_BIT, "GL_CLIENT_PIXEL_STORE_BIT");
    ClientAttribMask.put(GL_CLIENT_ALL_ATTRIB_BITS, "GL_CLIENT_ALL_ATTRIB_BITS");
  }
  public static final Map<Integer, String> FragmentLightModelParameterSGIX = new HashMap<Integer, String>();
  private static void FragmentLightModelParameterSGIX0() {
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
  }
  public static final Map<Integer, String> ContextProfileMask = new HashMap<Integer, String>();
  private static void ContextProfileMask0() {
    ContextProfileMask.put(GL_CONTEXT_CORE_PROFILE_BIT, "GL_CONTEXT_CORE_PROFILE_BIT");
    ContextProfileMask.put(GL_CONTEXT_COMPATIBILITY_PROFILE_BIT, "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT");
  }
  public static final Map<Integer, String> AccumOp = new HashMap<Integer, String>();
  private static void AccumOp0() {
    AccumOp.put(GL_ACCUM, "GL_ACCUM");
    AccumOp.put(GL_MULT, "GL_MULT");
    AccumOp.put(GL_ADD, "GL_ADD");
    AccumOp.put(GL_LOAD, "GL_LOAD");
    AccumOp.put(GL_RETURN, "GL_RETURN");
  }
  public static final Map<Integer, String> ColorMaterialFace = new HashMap<Integer, String>();
  private static void ColorMaterialFace0() {
    ColorMaterialFace.put(GL_BACK, "GL_BACK");
    ColorMaterialFace.put(GL_FRONT, "GL_FRONT");
    ColorMaterialFace.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static final Map<Integer, String> GetColorTableParameterPNameSGI = new HashMap<Integer, String>();
  private static void GetColorTableParameterPNameSGI0() {
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_LUMINANCE_SIZE_SGI, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BLUE_SIZE_SGI, "GL_COLOR_TABLE_BLUE_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_RED_SIZE_SGI, "GL_COLOR_TABLE_RED_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_GREEN_SIZE_SGI, "GL_COLOR_TABLE_GREEN_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_ALPHA_SIZE_SGI, "GL_COLOR_TABLE_ALPHA_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_WIDTH_SGI, "GL_COLOR_TABLE_WIDTH_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_FORMAT_SGI, "GL_COLOR_TABLE_FORMAT_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_INTENSITY_SIZE_SGI, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI");
  }
  public static final Map<Integer, String> MemoryObjectParameterName = new HashMap<Integer, String>();
  private static void MemoryObjectParameterName0() {
  }
  public static final Map<Integer, String> FogCoordinatePointerType = new HashMap<Integer, String>();
  private static void FogCoordinatePointerType0() {
    FogCoordinatePointerType.put(GL_FLOAT, "GL_FLOAT");
    FogCoordinatePointerType.put(GL_DOUBLE, "GL_DOUBLE");
  }
  public static final Map<Integer, String> LightParameter = new HashMap<Integer, String>();
  private static void LightParameter0() {
    LightParameter.put(GL_CONSTANT_ATTENUATION, "GL_CONSTANT_ATTENUATION");
    LightParameter.put(GL_LINEAR_ATTENUATION, "GL_LINEAR_ATTENUATION");
    LightParameter.put(GL_AMBIENT, "GL_AMBIENT");
    LightParameter.put(GL_SPECULAR, "GL_SPECULAR");
    LightParameter.put(GL_QUADRATIC_ATTENUATION, "GL_QUADRATIC_ATTENUATION");
    LightParameter.put(GL_SPOT_CUTOFF, "GL_SPOT_CUTOFF");
    LightParameter.put(GL_POSITION, "GL_POSITION");
    LightParameter.put(GL_SPOT_DIRECTION, "GL_SPOT_DIRECTION");
    LightParameter.put(GL_DIFFUSE, "GL_DIFFUSE");
    LightParameter.put(GL_SPOT_EXPONENT, "GL_SPOT_EXPONENT");
  }
  public static final Map<Integer, String> TexCoordPointerType = new HashMap<Integer, String>();
  private static void TexCoordPointerType0() {
    TexCoordPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    TexCoordPointerType.put(GL_FLOAT, "GL_FLOAT");
    TexCoordPointerType.put(GL_INT, "GL_INT");
    TexCoordPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static final Map<Integer, String> HistogramTargetEXT = new HashMap<Integer, String>();
  private static void HistogramTargetEXT0() {
    HistogramTargetEXT.put(GL_PROXY_HISTOGRAM, "GL_PROXY_HISTOGRAM");
    HistogramTargetEXT.put(GL_HISTOGRAM, "GL_HISTOGRAM");
  }
  public static final Map<Integer, String> BufferUsageARB = new HashMap<Integer, String>();
  private static void BufferUsageARB0() {
    BufferUsageARB.put(GL_STATIC_COPY, "GL_STATIC_COPY");
    BufferUsageARB.put(GL_STATIC_DRAW, "GL_STATIC_DRAW");
    BufferUsageARB.put(GL_STREAM_READ, "GL_STREAM_READ");
    BufferUsageARB.put(GL_DYNAMIC_DRAW, "GL_DYNAMIC_DRAW");
    BufferUsageARB.put(GL_DYNAMIC_READ, "GL_DYNAMIC_READ");
    BufferUsageARB.put(GL_DYNAMIC_COPY, "GL_DYNAMIC_COPY");
    BufferUsageARB.put(GL_STATIC_READ, "GL_STATIC_READ");
    BufferUsageARB.put(GL_STREAM_DRAW, "GL_STREAM_DRAW");
    BufferUsageARB.put(GL_STREAM_COPY, "GL_STREAM_COPY");
  }
  public static final Map<Integer, String> BlendingFactorDest = new HashMap<Integer, String>();
  private static void BlendingFactorDest0() {
    BlendingFactorDest.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    BlendingFactorDest.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    BlendingFactorDest.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    BlendingFactorDest.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    BlendingFactorDest.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    BlendingFactorDest.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    BlendingFactorDest.put(GL_ZERO, "GL_ZERO");
    BlendingFactorDest.put(GL_ONE, "GL_ONE");
  }
  public static final Map<Integer, String> ListMode = new HashMap<Integer, String>();
  private static void ListMode0() {
    ListMode.put(GL_COMPILE_AND_EXECUTE, "GL_COMPILE_AND_EXECUTE");
    ListMode.put(GL_COMPILE, "GL_COMPILE");
  }
  public static final Map<Integer, String> MapBufferUsageMask = new HashMap<Integer, String>();
  private static void MapBufferUsageMask0() {
    MapBufferUsageMask.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    MapBufferUsageMask.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    MapBufferUsageMask.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    MapBufferUsageMask.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    MapBufferUsageMask.put(GL_CLIENT_STORAGE_BIT, "GL_CLIENT_STORAGE_BIT");
    MapBufferUsageMask.put(GL_DYNAMIC_STORAGE_BIT, "GL_DYNAMIC_STORAGE_BIT");
    MapBufferUsageMask.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    MapBufferUsageMask.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
    MapBufferUsageMask.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    MapBufferUsageMask.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
  }
  public static final Map<Integer, String> FogParameter = new HashMap<Integer, String>();
  private static void FogParameter0() {
    FogParameter.put(GL_FOG_COLOR, "GL_FOG_COLOR");
    FogParameter.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    FogParameter.put(GL_FOG_END, "GL_FOG_END");
    FogParameter.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    FogParameter.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    FogParameter.put(GL_FOG_START, "GL_FOG_START");
    FogParameter.put(GL_FOG_MODE, "GL_FOG_MODE");
  }
  public static final Map<Integer, String> FeedbackType = new HashMap<Integer, String>();
  private static void FeedbackType0() {
    FeedbackType.put(GL_2D, "GL_2D");
    FeedbackType.put(GL_3D_COLOR_TEXTURE, "GL_3D_COLOR_TEXTURE");
    FeedbackType.put(GL_3D, "GL_3D");
    FeedbackType.put(GL_3D_COLOR, "GL_3D_COLOR");
    FeedbackType.put(GL_4D_COLOR_TEXTURE, "GL_4D_COLOR_TEXTURE");
  }
  public static final Map<Integer, String> LightModelParameter = new HashMap<Integer, String>();
  private static void LightModelParameter0() {
    LightModelParameter.put(GL_LIGHT_MODEL_LOCAL_VIEWER, "GL_LIGHT_MODEL_LOCAL_VIEWER");
    LightModelParameter.put(GL_LIGHT_MODEL_TWO_SIDE, "GL_LIGHT_MODEL_TWO_SIDE");
    LightModelParameter.put(GL_LIGHT_MODEL_COLOR_CONTROL, "GL_LIGHT_MODEL_COLOR_CONTROL");
    LightModelParameter.put(GL_LIGHT_MODEL_AMBIENT, "GL_LIGHT_MODEL_AMBIENT");
  }
  public static final Map<Integer, String> InterleavedArrayFormat = new HashMap<Integer, String>();
  private static void InterleavedArrayFormat0() {
    InterleavedArrayFormat.put(GL_N3F_V3F, "GL_N3F_V3F");
    InterleavedArrayFormat.put(GL_T2F_C3F_V3F, "GL_T2F_C3F_V3F");
    InterleavedArrayFormat.put(GL_T2F_C4F_N3F_V3F, "GL_T2F_C4F_N3F_V3F");
    InterleavedArrayFormat.put(GL_C3F_V3F, "GL_C3F_V3F");
    InterleavedArrayFormat.put(GL_T2F_N3F_V3F, "GL_T2F_N3F_V3F");
    InterleavedArrayFormat.put(GL_V3F, "GL_V3F");
    InterleavedArrayFormat.put(GL_C4UB_V2F, "GL_C4UB_V2F");
    InterleavedArrayFormat.put(GL_C4UB_V3F, "GL_C4UB_V3F");
    InterleavedArrayFormat.put(GL_C4F_N3F_V3F, "GL_C4F_N3F_V3F");
    InterleavedArrayFormat.put(GL_V2F, "GL_V2F");
    InterleavedArrayFormat.put(GL_T2F_C4UB_V3F, "GL_T2F_C4UB_V3F");
    InterleavedArrayFormat.put(GL_T4F_V4F, "GL_T4F_V4F");
    InterleavedArrayFormat.put(GL_T2F_V3F, "GL_T2F_V3F");
    InterleavedArrayFormat.put(GL_T4F_C4F_N3F_V4F, "GL_T4F_C4F_N3F_V4F");
  }
  public static final Map<Integer, String> OcclusionQueryEventMaskAMD = new HashMap<Integer, String>();
  private static void OcclusionQueryEventMaskAMD0() {
    OcclusionQueryEventMaskAMD.put(GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_ALL_EVENT_BITS_AMD, "GL_QUERY_ALL_EVENT_BITS_AMD");
  }
  public static final Map<Integer, String> ReadBufferMode = new HashMap<Integer, String>();
  private static void ReadBufferMode0() {
    ReadBufferMode.put(GL_AUX0, "GL_AUX0");
    ReadBufferMode.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    ReadBufferMode.put(GL_AUX1, "GL_AUX1");
    ReadBufferMode.put(GL_BACK, "GL_BACK");
    ReadBufferMode.put(GL_FRONT, "GL_FRONT");
    ReadBufferMode.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    ReadBufferMode.put(GL_LEFT, "GL_LEFT");
    ReadBufferMode.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    ReadBufferMode.put(GL_AUX2, "GL_AUX2");
    ReadBufferMode.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
    ReadBufferMode.put(GL_AUX3, "GL_AUX3");
    ReadBufferMode.put(GL_RIGHT, "GL_RIGHT");
  }
  public static final Map<Integer, String> PixelFormat = new HashMap<Integer, String>();
  private static void PixelFormat0() {
    PixelFormat.put(GL_LUMINANCE_ALPHA, "GL_LUMINANCE_ALPHA");
    PixelFormat.put(GL_ALPHA, "GL_ALPHA");
    PixelFormat.put(GL_LUMINANCE, "GL_LUMINANCE");
    PixelFormat.put(GL_RGBA, "GL_RGBA");
    PixelFormat.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    PixelFormat.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    PixelFormat.put(GL_BLUE, "GL_BLUE");
    PixelFormat.put(GL_COLOR_INDEX, "GL_COLOR_INDEX");
    PixelFormat.put(GL_RGB, "GL_RGB");
    PixelFormat.put(GL_GREEN, "GL_GREEN");
    PixelFormat.put(GL_YCRCB_444_SGIX, "GL_YCRCB_444_SGIX");
    PixelFormat.put(GL_RED, "GL_RED");
    PixelFormat.put(GL_STENCIL_INDEX, "GL_STENCIL_INDEX");
    PixelFormat.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    PixelFormat.put(GL_YCRCB_422_SGIX, "GL_YCRCB_422_SGIX");
  }
  public static final Map<Integer, String> GetMinmaxParameterPNameEXT = new HashMap<Integer, String>();
  private static void GetMinmaxParameterPNameEXT0() {
    GetMinmaxParameterPNameEXT.put(GL_MINMAX_SINK, "GL_MINMAX_SINK");
    GetMinmaxParameterPNameEXT.put(GL_MINMAX_FORMAT, "GL_MINMAX_FORMAT");
  }
  public static final Map<Integer, String> GetHistogramParameterPNameEXT = new HashMap<Integer, String>();
  private static void GetHistogramParameterPNameEXT0() {
  }
  public static final Map<Integer, String> MatrixMode = new HashMap<Integer, String>();
  private static void MatrixMode0() {
    MatrixMode.put(GL_PROJECTION, "GL_PROJECTION");
    MatrixMode.put(GL_TEXTURE, "GL_TEXTURE");
    MatrixMode.put(GL_MODELVIEW, "GL_MODELVIEW");
  }
  public static final Map<Integer, String> HintTarget = new HashMap<Integer, String>();
  private static void HintTarget0() {
    HintTarget.put(GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI");
    HintTarget.put(GL_NATIVE_GRAPHICS_END_HINT_PGI, "GL_NATIVE_GRAPHICS_END_HINT_PGI");
    HintTarget.put(GL_LINE_QUALITY_HINT_SGIX, "GL_LINE_QUALITY_HINT_SGIX");
    HintTarget.put(GL_PHONG_HINT_WIN, "GL_PHONG_HINT_WIN");
    HintTarget.put(GL_CONSERVE_MEMORY_HINT_PGI, "GL_CONSERVE_MEMORY_HINT_PGI");
    HintTarget.put(GL_ALLOW_DRAW_FRG_HINT_PGI, "GL_ALLOW_DRAW_FRG_HINT_PGI");
    HintTarget.put(GL_MATERIAL_SIDE_HINT_PGI, "GL_MATERIAL_SIDE_HINT_PGI");
    HintTarget.put(GL_POINT_SMOOTH_HINT, "GL_POINT_SMOOTH_HINT");
    HintTarget.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    HintTarget.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
    HintTarget.put(GL_STRICT_DEPTHFUNC_HINT_PGI, "GL_STRICT_DEPTHFUNC_HINT_PGI");
    HintTarget.put(GL_LINE_SMOOTH_HINT, "GL_LINE_SMOOTH_HINT");
    HintTarget.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
    HintTarget.put(GL_TEXTURE_MULTI_BUFFER_HINT_SGIX, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX");
    HintTarget.put(GL_MAX_VERTEX_HINT_PGI, "GL_MAX_VERTEX_HINT_PGI");
    HintTarget.put(GL_WIDE_LINE_HINT_PGI, "GL_WIDE_LINE_HINT_PGI");
    HintTarget.put(GL_ALWAYS_SOFT_HINT_PGI, "GL_ALWAYS_SOFT_HINT_PGI");
    HintTarget.put(GL_ALLOW_DRAW_MEM_HINT_PGI, "GL_ALLOW_DRAW_MEM_HINT_PGI");
    HintTarget.put(GL_FRAGMENT_SHADER_DERIVATIVE_HINT, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT");
    HintTarget.put(GL_TRANSFORM_HINT_APPLE, "GL_TRANSFORM_HINT_APPLE");
    HintTarget.put(GL_BINNING_CONTROL_HINT_QCOM, "GL_BINNING_CONTROL_HINT_QCOM");
    HintTarget.put(GL_STRICT_LIGHTING_HINT_PGI, "GL_STRICT_LIGHTING_HINT_PGI");
    HintTarget.put(GL_CLIP_FAR_HINT_PGI, "GL_CLIP_FAR_HINT_PGI");
    HintTarget.put(GL_ALLOW_DRAW_OBJ_HINT_PGI, "GL_ALLOW_DRAW_OBJ_HINT_PGI");
    HintTarget.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
    HintTarget.put(GL_VERTEX_DATA_HINT_PGI, "GL_VERTEX_DATA_HINT_PGI");
    HintTarget.put(GL_GENERATE_MIPMAP_HINT, "GL_GENERATE_MIPMAP_HINT");
    HintTarget.put(GL_PERSPECTIVE_CORRECTION_HINT, "GL_PERSPECTIVE_CORRECTION_HINT");
    HintTarget.put(GL_STRICT_SCISSOR_HINT_PGI, "GL_STRICT_SCISSOR_HINT_PGI");
    HintTarget.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
    HintTarget.put(GL_POLYGON_SMOOTH_HINT, "GL_POLYGON_SMOOTH_HINT");
    HintTarget.put(GL_TEXTURE_COMPRESSION_HINT, "GL_TEXTURE_COMPRESSION_HINT");
    HintTarget.put(GL_VERTEX_CONSISTENT_HINT_PGI, "GL_VERTEX_CONSISTENT_HINT_PGI");
    HintTarget.put(GL_ALWAYS_FAST_HINT_PGI, "GL_ALWAYS_FAST_HINT_PGI");
    HintTarget.put(GL_BACK_NORMALS_HINT_PGI, "GL_BACK_NORMALS_HINT_PGI");
    HintTarget.put(GL_PREFER_DOUBLEBUFFER_HINT_PGI, "GL_PREFER_DOUBLEBUFFER_HINT_PGI");
    HintTarget.put(GL_TEXTURE_STORAGE_HINT_APPLE, "GL_TEXTURE_STORAGE_HINT_APPLE");
    HintTarget.put(GL_FOG_HINT, "GL_FOG_HINT");
    HintTarget.put(GL_ALLOW_DRAW_WIN_HINT_PGI, "GL_ALLOW_DRAW_WIN_HINT_PGI");
    HintTarget.put(GL_SCALEBIAS_HINT_SGIX, "GL_SCALEBIAS_HINT_SGIX");
    HintTarget.put(GL_CLIP_NEAR_HINT_PGI, "GL_CLIP_NEAR_HINT_PGI");
    HintTarget.put(GL_RECLAIM_MEMORY_HINT_PGI, "GL_RECLAIM_MEMORY_HINT_PGI");
    HintTarget.put(GL_VERTEX_ARRAY_STORAGE_HINT_APPLE, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE");
    HintTarget.put(GL_FULL_STIPPLE_HINT_PGI, "GL_FULL_STIPPLE_HINT_PGI");
  }
  public static final Map<Integer, String> DepthFunction = new HashMap<Integer, String>();
  private static void DepthFunction0() {
    DepthFunction.put(GL_EQUAL, "GL_EQUAL");
    DepthFunction.put(GL_GREATER, "GL_GREATER");
    DepthFunction.put(GL_LEQUAL, "GL_LEQUAL");
    DepthFunction.put(GL_NEVER, "GL_NEVER");
    DepthFunction.put(GL_GEQUAL, "GL_GEQUAL");
    DepthFunction.put(GL_LESS, "GL_LESS");
    DepthFunction.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    DepthFunction.put(GL_ALWAYS, "GL_ALWAYS");
  }
  public static final Map<Integer, String> PointParameterNameSGIS = new HashMap<Integer, String>();
  private static void PointParameterNameSGIS0() {
    PointParameterNameSGIS.put(GL_POINT_SIZE_MIN, "GL_POINT_SIZE_MIN");
    PointParameterNameSGIS.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    PointParameterNameSGIS.put(GL_POINT_SIZE_MAX, "GL_POINT_SIZE_MAX");
    PointParameterNameSGIS.put(GL_POINT_FADE_THRESHOLD_SIZE, "GL_POINT_FADE_THRESHOLD_SIZE");
    PointParameterNameSGIS.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    PointParameterNameSGIS.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    PointParameterNameSGIS.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    PointParameterNameSGIS.put(GL_POINT_DISTANCE_ATTENUATION, "GL_POINT_DISTANCE_ATTENUATION");
  }
  public static final Map<Integer, String> InternalFormat = new HashMap<Integer, String>();
  private static void InternalFormat0() {
    InternalFormat.put(GL_DUAL_LUMINANCE8_SGIS, "GL_DUAL_LUMINANCE8_SGIS");
    InternalFormat.put(GL_DUAL_INTENSITY8_SGIS, "GL_DUAL_INTENSITY8_SGIS");
    InternalFormat.put(GL_INTENSITY16, "GL_INTENSITY16");
    InternalFormat.put(GL_LUMINANCE6_ALPHA2, "GL_LUMINANCE6_ALPHA2");
    InternalFormat.put(GL_LUMINANCE12_ALPHA12, "GL_LUMINANCE12_ALPHA12");
    InternalFormat.put(GL_LUMINANCE8_ALPHA8, "GL_LUMINANCE8_ALPHA8");
    InternalFormat.put(GL_INTENSITY12, "GL_INTENSITY12");
    InternalFormat.put(GL_DUAL_ALPHA12_SGIS, "GL_DUAL_ALPHA12_SGIS");
    InternalFormat.put(GL_LUMINANCE4_ALPHA4, "GL_LUMINANCE4_ALPHA4");
    InternalFormat.put(GL_DUAL_INTENSITY4_SGIS, "GL_DUAL_INTENSITY4_SGIS");
    InternalFormat.put(GL_QUAD_LUMINANCE8_SGIS, "GL_QUAD_LUMINANCE8_SGIS");
    InternalFormat.put(GL_QUAD_ALPHA8_SGIS, "GL_QUAD_ALPHA8_SGIS");
    InternalFormat.put(GL_RGBA8, "GL_RGBA8");
    InternalFormat.put(GL_DUAL_LUMINANCE_ALPHA8_SGIS, "GL_DUAL_LUMINANCE_ALPHA8_SGIS");
    InternalFormat.put(GL_DEPTH_COMPONENT32_SGIX, "GL_DEPTH_COMPONENT32_SGIX");
    InternalFormat.put(GL_RGBA4, "GL_RGBA4");
    InternalFormat.put(GL_RGB5, "GL_RGB5");
    InternalFormat.put(GL_RGB4, "GL_RGB4");
    InternalFormat.put(GL_RGBA2, "GL_RGBA2");
    InternalFormat.put(GL_DEPTH_COMPONENT16_SGIX, "GL_DEPTH_COMPONENT16_SGIX");
    InternalFormat.put(GL_DEPTH_COMPONENT24_SGIX, "GL_DEPTH_COMPONENT24_SGIX");
    InternalFormat.put(GL_RGB8, "GL_RGB8");
    InternalFormat.put(GL_DUAL_ALPHA16_SGIS, "GL_DUAL_ALPHA16_SGIS");
    InternalFormat.put(GL_QUAD_INTENSITY8_SGIS, "GL_QUAD_INTENSITY8_SGIS");
    InternalFormat.put(GL_RGB16, "GL_RGB16");
    InternalFormat.put(GL_DUAL_INTENSITY16_SGIS, "GL_DUAL_INTENSITY16_SGIS");
    InternalFormat.put(GL_RGB10_A2, "GL_RGB10_A2");
    InternalFormat.put(GL_RGB12, "GL_RGB12");
    InternalFormat.put(GL_RGB10, "GL_RGB10");
    InternalFormat.put(GL_DUAL_ALPHA4_SGIS, "GL_DUAL_ALPHA4_SGIS");
    InternalFormat.put(GL_LUMINANCE16, "GL_LUMINANCE16");
    InternalFormat.put(GL_R3_G3_B2, "GL_R3_G3_B2");
    InternalFormat.put(GL_QUAD_INTENSITY4_SGIS, "GL_QUAD_INTENSITY4_SGIS");
    InternalFormat.put(GL_QUAD_ALPHA4_SGIS, "GL_QUAD_ALPHA4_SGIS");
    InternalFormat.put(GL_DUAL_LUMINANCE16_SGIS, "GL_DUAL_LUMINANCE16_SGIS");
    InternalFormat.put(GL_QUAD_LUMINANCE4_SGIS, "GL_QUAD_LUMINANCE4_SGIS");
    InternalFormat.put(GL_RGBA16, "GL_RGBA16");
    InternalFormat.put(GL_RGB5_A1, "GL_RGB5_A1");
    InternalFormat.put(GL_ALPHA4, "GL_ALPHA4");
    InternalFormat.put(GL_LUMINANCE8, "GL_LUMINANCE8");
    InternalFormat.put(GL_ALPHA8, "GL_ALPHA8");
    InternalFormat.put(GL_RGBA12, "GL_RGBA12");
    InternalFormat.put(GL_DUAL_LUMINANCE4_SGIS, "GL_DUAL_LUMINANCE4_SGIS");
    InternalFormat.put(GL_LUMINANCE4, "GL_LUMINANCE4");
    InternalFormat.put(GL_DUAL_LUMINANCE12_SGIS, "GL_DUAL_LUMINANCE12_SGIS");
    InternalFormat.put(GL_INTENSITY8, "GL_INTENSITY8");
    InternalFormat.put(GL_ALPHA16, "GL_ALPHA16");
    InternalFormat.put(GL_INTENSITY4, "GL_INTENSITY4");
    InternalFormat.put(GL_ALPHA12, "GL_ALPHA12");
    InternalFormat.put(GL_DUAL_ALPHA8_SGIS, "GL_DUAL_ALPHA8_SGIS");
    InternalFormat.put(GL_LUMINANCE12_ALPHA4, "GL_LUMINANCE12_ALPHA4");
    InternalFormat.put(GL_DUAL_LUMINANCE_ALPHA4_SGIS, "GL_DUAL_LUMINANCE_ALPHA4_SGIS");
    InternalFormat.put(GL_DUAL_INTENSITY12_SGIS, "GL_DUAL_INTENSITY12_SGIS");
    InternalFormat.put(GL_LUMINANCE12, "GL_LUMINANCE12");
    InternalFormat.put(GL_INTENSITY, "GL_INTENSITY");
    InternalFormat.put(GL_LUMINANCE16_ALPHA16, "GL_LUMINANCE16_ALPHA16");
  }
  public static final Map<Integer, String> TextureWrapMode = new HashMap<Integer, String>();
  private static void TextureWrapMode0() {
    TextureWrapMode.put(GL_CLAMP_TO_BORDER, "GL_CLAMP_TO_BORDER");
    TextureWrapMode.put(GL_CLAMP_TO_EDGE_SGIS, "GL_CLAMP_TO_EDGE_SGIS");
    TextureWrapMode.put(GL_REPEAT, "GL_REPEAT");
    TextureWrapMode.put(GL_CLAMP, "GL_CLAMP");
    TextureWrapMode.put(GL_CLAMP_TO_BORDER_SGIS, "GL_CLAMP_TO_BORDER_SGIS");
    TextureWrapMode.put(GL_CLAMP_TO_EDGE, "GL_CLAMP_TO_EDGE");
  }
  public static final Map<Integer, String> IndexPointerType = new HashMap<Integer, String>();
  private static void IndexPointerType0() {
    IndexPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    IndexPointerType.put(GL_FLOAT, "GL_FLOAT");
    IndexPointerType.put(GL_INT, "GL_INT");
    IndexPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static final Map<Integer, String> LightEnvParameterSGIX = new HashMap<Integer, String>();
  private static void LightEnvParameterSGIX0() {
    LightEnvParameterSGIX.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
  }
  public static final Map<Integer, String> VertexPointerType = new HashMap<Integer, String>();
  private static void VertexPointerType0() {
    VertexPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    VertexPointerType.put(GL_FLOAT, "GL_FLOAT");
    VertexPointerType.put(GL_INT, "GL_INT");
    VertexPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static final Map<Integer, String> StencilFaceDirection = new HashMap<Integer, String>();
  private static void StencilFaceDirection0() {
    StencilFaceDirection.put(GL_FRONT, "GL_FRONT");
    StencilFaceDirection.put(GL_BACK, "GL_BACK");
    StencilFaceDirection.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static final Map<Integer, String> TextureTarget = new HashMap<Integer, String>();
  private static void TextureTarget0() {
    TextureTarget.put(GL_PROXY_TEXTURE_2D, "GL_PROXY_TEXTURE_2D");
    TextureTarget.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE, "GL_PROXY_TEXTURE_2D_MULTISAMPLE");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_ARRAY, "GL_TEXTURE_CUBE_MAP_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_2D_ARRAY, "GL_PROXY_TEXTURE_2D_ARRAY");
    TextureTarget.put(GL_DETAIL_TEXTURE_2D_SGIS, "GL_DETAIL_TEXTURE_2D_SGIS");
    TextureTarget.put(GL_PROXY_TEXTURE_1D_ARRAY, "GL_PROXY_TEXTURE_1D_ARRAY");
    TextureTarget.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    TextureTarget.put(GL_TEXTURE_1D_ARRAY, "GL_TEXTURE_1D_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_CUBE_MAP, "GL_PROXY_TEXTURE_CUBE_MAP");
    TextureTarget.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    TextureTarget.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X, "GL_TEXTURE_CUBE_MAP_POSITIVE_X");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z");
    TextureTarget.put(GL_PROXY_TEXTURE_3D, "GL_PROXY_TEXTURE_3D");
    TextureTarget.put(GL_PROXY_TEXTURE_1D, "GL_PROXY_TEXTURE_1D");
    TextureTarget.put(GL_TEXTURE_RECTANGLE, "GL_TEXTURE_RECTANGLE");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y");
    TextureTarget.put(GL_PROXY_TEXTURE_4D_SGIS, "GL_PROXY_TEXTURE_4D_SGIS");
    TextureTarget.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    TextureTarget.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    TextureTarget.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    TextureTarget.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_RECTANGLE, "GL_PROXY_TEXTURE_RECTANGLE");
    TextureTarget.put(GL_PROXY_TEXTURE_CUBE_MAP_ARRAY, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");
  }
  public static final Map<Integer, String> ColorMaterialParameter = new HashMap<Integer, String>();
  private static void ColorMaterialParameter0() {
    ColorMaterialParameter.put(GL_AMBIENT_AND_DIFFUSE, "GL_AMBIENT_AND_DIFFUSE");
    ColorMaterialParameter.put(GL_AMBIENT, "GL_AMBIENT");
    ColorMaterialParameter.put(GL_SPECULAR, "GL_SPECULAR");
    ColorMaterialParameter.put(GL_EMISSION, "GL_EMISSION");
    ColorMaterialParameter.put(GL_DIFFUSE, "GL_DIFFUSE");
  }
  public static final Map<Integer, String> TextureMinFilter = new HashMap<Integer, String>();
  private static void TextureMinFilter0() {
    TextureMinFilter.put(GL_LINEAR_MIPMAP_LINEAR, "GL_LINEAR_MIPMAP_LINEAR");
    TextureMinFilter.put(GL_NEAREST_CLIPMAP_LINEAR_SGIX, "GL_NEAREST_CLIPMAP_LINEAR_SGIX");
    TextureMinFilter.put(GL_LINEAR, "GL_LINEAR");
    TextureMinFilter.put(GL_LINEAR_CLIPMAP_LINEAR_SGIX, "GL_LINEAR_CLIPMAP_LINEAR_SGIX");
    TextureMinFilter.put(GL_LINEAR_CLIPMAP_NEAREST_SGIX, "GL_LINEAR_CLIPMAP_NEAREST_SGIX");
    TextureMinFilter.put(GL_NEAREST_MIPMAP_LINEAR, "GL_NEAREST_MIPMAP_LINEAR");
    TextureMinFilter.put(GL_NEAREST_CLIPMAP_NEAREST_SGIX, "GL_NEAREST_CLIPMAP_NEAREST_SGIX");
    TextureMinFilter.put(GL_PIXEL_TEX_GEN_Q_CEILING_SGIX, "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX");
    TextureMinFilter.put(GL_NEAREST_MIPMAP_NEAREST, "GL_NEAREST_MIPMAP_NEAREST");
    TextureMinFilter.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    TextureMinFilter.put(GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX, "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX");
    TextureMinFilter.put(GL_LINEAR_MIPMAP_NEAREST, "GL_LINEAR_MIPMAP_NEAREST");
    TextureMinFilter.put(GL_NEAREST, "GL_NEAREST");
    TextureMinFilter.put(GL_PIXEL_TEX_GEN_Q_ROUND_SGIX, "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX");
  }
  public static final Map<Integer, String> BlendEquationModeEXT = new HashMap<Integer, String>();
  private static void BlendEquationModeEXT0() {
    BlendEquationModeEXT.put(GL_ALPHA_MAX_SGIX, "GL_ALPHA_MAX_SGIX");
    BlendEquationModeEXT.put(GL_ALPHA_MIN_SGIX, "GL_ALPHA_MIN_SGIX");
    BlendEquationModeEXT.put(GL_LOGIC_OP, "GL_LOGIC_OP");
  }
  public static final Map<Integer, String> FramebufferFetchNoncoherent = new HashMap<Integer, String>();
  private static void FramebufferFetchNoncoherent0() {
    FramebufferFetchNoncoherent.put(GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM, "GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM");
  }
  public static final Map<Integer, String> DrawBufferMode = new HashMap<Integer, String>();
  private static void DrawBufferMode0() {
    DrawBufferMode.put(GL_AUX0, "GL_AUX0");
    DrawBufferMode.put(GL_AUX1, "GL_AUX1");
    DrawBufferMode.put(GL_BACK, "GL_BACK");
    DrawBufferMode.put(GL_FRONT, "GL_FRONT");
    DrawBufferMode.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    DrawBufferMode.put(GL_LEFT, "GL_LEFT");
    DrawBufferMode.put(GL_AUX2, "GL_AUX2");
    DrawBufferMode.put(GL_AUX3, "GL_AUX3");
    DrawBufferMode.put(GL_RIGHT, "GL_RIGHT");
    DrawBufferMode.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    DrawBufferMode.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
    DrawBufferMode.put(GL_NONE, "GL_NONE");
    DrawBufferMode.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    DrawBufferMode.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
  }
  public static final Map<Integer, String> PixelStoreSubsampleRate = new HashMap<Integer, String>();
  private static void PixelStoreSubsampleRate0() {
    PixelStoreSubsampleRate.put(GL_PIXEL_SUBSAMPLE_4242_SGIX, "GL_PIXEL_SUBSAMPLE_4242_SGIX");
    PixelStoreSubsampleRate.put(GL_PIXEL_SUBSAMPLE_4444_SGIX, "GL_PIXEL_SUBSAMPLE_4444_SGIX");
    PixelStoreSubsampleRate.put(GL_PIXEL_SUBSAMPLE_2424_SGIX, "GL_PIXEL_SUBSAMPLE_2424_SGIX");
  }
  public static final Map<Integer, String> FfdMaskSGIX = new HashMap<Integer, String>();
  private static void FfdMaskSGIX0() {
  }
  public static final Map<Integer, String> LightModelColorControl = new HashMap<Integer, String>();
  private static void LightModelColorControl0() {
    LightModelColorControl.put(GL_SINGLE_COLOR, "GL_SINGLE_COLOR");
    LightModelColorControl.put(GL_SEPARATE_SPECULAR_COLOR, "GL_SEPARATE_SPECULAR_COLOR");
  }
  public static final Map<Integer, String> ConvolutionBorderModeEXT = new HashMap<Integer, String>();
  private static void ConvolutionBorderModeEXT0() {
    ConvolutionBorderModeEXT.put(GL_REDUCE, "GL_REDUCE");
  }
  public static final Map<Integer, String> StencilFunction = new HashMap<Integer, String>();
  private static void StencilFunction0() {
    StencilFunction.put(GL_EQUAL, "GL_EQUAL");
    StencilFunction.put(GL_GREATER, "GL_GREATER");
    StencilFunction.put(GL_LEQUAL, "GL_LEQUAL");
    StencilFunction.put(GL_NEVER, "GL_NEVER");
    StencilFunction.put(GL_GEQUAL, "GL_GEQUAL");
    StencilFunction.put(GL_LESS, "GL_LESS");
    StencilFunction.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    StencilFunction.put(GL_ALWAYS, "GL_ALWAYS");
  }
  public static final Map<Integer, String> TextureEnvTarget = new HashMap<Integer, String>();
  private static void TextureEnvTarget0() {
    TextureEnvTarget.put(GL_TEXTURE_ENV, "GL_TEXTURE_ENV");
  }
  public static final Map<Integer, String> PixelType = new HashMap<Integer, String>();
  private static void PixelType0() {
    PixelType.put(GL_UNSIGNED_INT_8_8_8_8, "GL_UNSIGNED_INT_8_8_8_8");
    PixelType.put(GL_FLOAT, "GL_FLOAT");
    PixelType.put(GL_BITMAP, "GL_BITMAP");
    PixelType.put(GL_BYTE, "GL_BYTE");
    PixelType.put(GL_UNSIGNED_SHORT_4_4_4_4, "GL_UNSIGNED_SHORT_4_4_4_4");
    PixelType.put(GL_UNSIGNED_INT_10_10_10_2, "GL_UNSIGNED_INT_10_10_10_2");
    PixelType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    PixelType.put(GL_INT, "GL_INT");
    PixelType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    PixelType.put(GL_SHORT, "GL_SHORT");
    PixelType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    PixelType.put(GL_UNSIGNED_BYTE_3_3_2, "GL_UNSIGNED_BYTE_3_3_2");
    PixelType.put(GL_UNSIGNED_SHORT_5_5_5_1, "GL_UNSIGNED_SHORT_5_5_5_1");
  }
  public static final Map<Integer, String> ColorPointerType = new HashMap<Integer, String>();
  private static void ColorPointerType0() {
    ColorPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    ColorPointerType.put(GL_FLOAT, "GL_FLOAT");
    ColorPointerType.put(GL_BYTE, "GL_BYTE");
    ColorPointerType.put(GL_INT, "GL_INT");
    ColorPointerType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    ColorPointerType.put(GL_SHORT, "GL_SHORT");
    ColorPointerType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    ColorPointerType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  public static final Map<Integer, String> EnableCap = new HashMap<Integer, String>();
  private static void EnableCap0() {
    EnableCap.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    EnableCap.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    EnableCap.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    EnableCap.put(GL_POLYGON_OFFSET_LINE, "GL_POLYGON_OFFSET_LINE");
    EnableCap.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    EnableCap.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    EnableCap.put(GL_COLOR_LOGIC_OP, "GL_COLOR_LOGIC_OP");
    EnableCap.put(GL_STENCIL_TEST, "GL_STENCIL_TEST");
    EnableCap.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    EnableCap.put(GL_COLOR_MATERIAL, "GL_COLOR_MATERIAL");
    EnableCap.put(GL_LIGHTING, "GL_LIGHTING");
    EnableCap.put(GL_DEPTH_TEST, "GL_DEPTH_TEST");
    EnableCap.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    EnableCap.put(GL_CULL_FACE, "GL_CULL_FACE");
    EnableCap.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    EnableCap.put(GL_POLYGON_STIPPLE, "GL_POLYGON_STIPPLE");
    EnableCap.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    EnableCap.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    EnableCap.put(GL_TEXTURE_COORD_ARRAY, "GL_TEXTURE_COORD_ARRAY");
    EnableCap.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    EnableCap.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    EnableCap.put(GL_EDGE_FLAG_ARRAY, "GL_EDGE_FLAG_ARRAY");
    EnableCap.put(GL_TEXTURE_GEN_Q, "GL_TEXTURE_GEN_Q");
    EnableCap.put(GL_POLYGON_SMOOTH, "GL_POLYGON_SMOOTH");
    EnableCap.put(GL_TEXTURE_GEN_R, "GL_TEXTURE_GEN_R");
    EnableCap.put(GL_TEXTURE_GEN_S, "GL_TEXTURE_GEN_S");
    EnableCap.put(GL_TEXTURE_GEN_T, "GL_TEXTURE_GEN_T");
    EnableCap.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    EnableCap.put(GL_POLYGON_OFFSET_POINT, "GL_POLYGON_OFFSET_POINT");
    EnableCap.put(GL_LIGHT6, "GL_LIGHT6");
    EnableCap.put(GL_LIGHT7, "GL_LIGHT7");
    EnableCap.put(GL_LIGHT4, "GL_LIGHT4");
    EnableCap.put(GL_LIGHT5, "GL_LIGHT5");
    EnableCap.put(GL_NORMAL_ARRAY, "GL_NORMAL_ARRAY");
    EnableCap.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    EnableCap.put(GL_POLYGON_OFFSET_FILL, "GL_POLYGON_OFFSET_FILL");
    EnableCap.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    EnableCap.put(GL_LIGHT2, "GL_LIGHT2");
    EnableCap.put(GL_LIGHT3, "GL_LIGHT3");
    EnableCap.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
    EnableCap.put(GL_LIGHT0, "GL_LIGHT0");
    EnableCap.put(GL_NORMALIZE, "GL_NORMALIZE");
    EnableCap.put(GL_LIGHT1, "GL_LIGHT1");
    EnableCap.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    EnableCap.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    EnableCap.put(GL_LINE_STIPPLE, "GL_LINE_STIPPLE");
    EnableCap.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    EnableCap.put(GL_INDEX_LOGIC_OP, "GL_INDEX_LOGIC_OP");
    EnableCap.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    EnableCap.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    EnableCap.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    EnableCap.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
    EnableCap.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    EnableCap.put(GL_DITHER, "GL_DITHER");
    EnableCap.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    EnableCap.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
    EnableCap.put(GL_FOG, "GL_FOG");
    EnableCap.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    EnableCap.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    EnableCap.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    EnableCap.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    EnableCap.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    EnableCap.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    EnableCap.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    EnableCap.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
    EnableCap.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
    EnableCap.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    EnableCap.put(GL_INDEX_ARRAY, "GL_INDEX_ARRAY");
    EnableCap.put(GL_LINE_SMOOTH, "GL_LINE_SMOOTH");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    EnableCap.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    EnableCap.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    EnableCap.put(GL_ALPHA_TEST, "GL_ALPHA_TEST");
    EnableCap.put(GL_AUTO_NORMAL, "GL_AUTO_NORMAL");
    EnableCap.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
    EnableCap.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    EnableCap.put(GL_COLOR_ARRAY, "GL_COLOR_ARRAY");
    EnableCap.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    EnableCap.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
    EnableCap.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    EnableCap.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
    EnableCap.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    EnableCap.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    EnableCap.put(GL_BLEND, "GL_BLEND");
  }
  private static void EnableCap1() {
    EnableCap.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    EnableCap.put(GL_POINT_SMOOTH, "GL_POINT_SMOOTH");
    EnableCap.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
  }
  public static final Map<Integer, String> ListParameterName = new HashMap<Integer, String>();
  private static void ListParameterName0() {
    ListParameterName.put(GL_LIST_PRIORITY_SGIX, "GL_LIST_PRIORITY_SGIX");
  }
  public static final Map<Integer, String> LightName = new HashMap<Integer, String>();
  private static void LightName0() {
    LightName.put(GL_LIGHT6, "GL_LIGHT6");
    LightName.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    LightName.put(GL_LIGHT7, "GL_LIGHT7");
    LightName.put(GL_LIGHT4, "GL_LIGHT4");
    LightName.put(GL_LIGHT5, "GL_LIGHT5");
    LightName.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    LightName.put(GL_LIGHT2, "GL_LIGHT2");
    LightName.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    LightName.put(GL_LIGHT3, "GL_LIGHT3");
    LightName.put(GL_LIGHT0, "GL_LIGHT0");
    LightName.put(GL_LIGHT1, "GL_LIGHT1");
    LightName.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
  }
  public static final Map<Integer, String> FogPointerTypeEXT = new HashMap<Integer, String>();
  private static void FogPointerTypeEXT0() {
    FogPointerTypeEXT.put(GL_FLOAT, "GL_FLOAT");
    FogPointerTypeEXT.put(GL_DOUBLE, "GL_DOUBLE");
  }
  public static final Map<Integer, String> MaterialFace = new HashMap<Integer, String>();
  private static void MaterialFace0() {
    MaterialFace.put(GL_BACK, "GL_BACK");
    MaterialFace.put(GL_FRONT, "GL_FRONT");
    MaterialFace.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static final Map<Integer, String> GetPixelMap = new HashMap<Integer, String>();
  private static void GetPixelMap0() {
    GetPixelMap.put(GL_PIXEL_MAP_B_TO_B, "GL_PIXEL_MAP_B_TO_B");
    GetPixelMap.put(GL_PIXEL_MAP_S_TO_S, "GL_PIXEL_MAP_S_TO_S");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_I, "GL_PIXEL_MAP_I_TO_I");
    GetPixelMap.put(GL_PIXEL_MAP_G_TO_G, "GL_PIXEL_MAP_G_TO_G");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_B, "GL_PIXEL_MAP_I_TO_B");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_R, "GL_PIXEL_MAP_I_TO_R");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_A, "GL_PIXEL_MAP_I_TO_A");
    GetPixelMap.put(GL_PIXEL_MAP_A_TO_A, "GL_PIXEL_MAP_A_TO_A");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_G, "GL_PIXEL_MAP_I_TO_G");
    GetPixelMap.put(GL_PIXEL_MAP_R_TO_R, "GL_PIXEL_MAP_R_TO_R");
  }
  public static final Map<Integer, String> PixelTransferParameter = new HashMap<Integer, String>();
  private static void PixelTransferParameter0() {
    PixelTransferParameter.put(GL_GREEN_BIAS, "GL_GREEN_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_BIAS, "GL_POST_COLOR_MATRIX_RED_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_BIAS, "GL_POST_COLOR_MATRIX_BLUE_BIAS");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_BLUE_SCALE, "GL_POST_CONVOLUTION_BLUE_SCALE");
    PixelTransferParameter.put(GL_INDEX_SHIFT, "GL_INDEX_SHIFT");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS, "GL_POST_COLOR_MATRIX_ALPHA_BIAS");
    PixelTransferParameter.put(GL_DEPTH_SCALE, "GL_DEPTH_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    PixelTransferParameter.put(GL_BLUE_SCALE, "GL_BLUE_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_GREEN_BIAS, "GL_POST_CONVOLUTION_GREEN_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_SCALE, "GL_POST_COLOR_MATRIX_GREEN_SCALE");
    PixelTransferParameter.put(GL_RED_BIAS, "GL_RED_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_SCALE, "GL_POST_COLOR_MATRIX_BLUE_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_SCALE, "GL_POST_COLOR_MATRIX_RED_SCALE");
    PixelTransferParameter.put(GL_BLUE_BIAS, "GL_BLUE_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_BLUE_BIAS, "GL_POST_CONVOLUTION_BLUE_BIAS");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_ALPHA_SCALE, "GL_POST_CONVOLUTION_ALPHA_SCALE");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_RED_BIAS, "GL_POST_CONVOLUTION_RED_BIAS");
    PixelTransferParameter.put(GL_MAP_STENCIL, "GL_MAP_STENCIL");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    PixelTransferParameter.put(GL_ALPHA_SCALE, "GL_ALPHA_SCALE");
    PixelTransferParameter.put(GL_INDEX_OFFSET, "GL_INDEX_OFFSET");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_RED_SCALE, "GL_POST_CONVOLUTION_RED_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_BIAS, "GL_POST_COLOR_MATRIX_GREEN_BIAS");
    PixelTransferParameter.put(GL_DEPTH_BIAS, "GL_DEPTH_BIAS");
    PixelTransferParameter.put(GL_GREEN_SCALE, "GL_GREEN_SCALE");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_ALPHA_BIAS, "GL_POST_CONVOLUTION_ALPHA_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_GREEN_SCALE, "GL_POST_CONVOLUTION_GREEN_SCALE");
    PixelTransferParameter.put(GL_MAP_COLOR, "GL_MAP_COLOR");
    PixelTransferParameter.put(GL_ALPHA_BIAS, "GL_ALPHA_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE, "GL_POST_COLOR_MATRIX_ALPHA_SCALE");
    PixelTransferParameter.put(GL_RED_SCALE, "GL_RED_SCALE");
  }
  public static final Map<Integer, String> SamplePatternSGIS = new HashMap<Integer, String>();
  private static void SamplePatternSGIS0() {
    SamplePatternSGIS.put(GL_2PASS_1_SGIS, "GL_2PASS_1_SGIS");
    SamplePatternSGIS.put(GL_4PASS_1_SGIS, "GL_4PASS_1_SGIS");
    SamplePatternSGIS.put(GL_4PASS_2_SGIS, "GL_4PASS_2_SGIS");
    SamplePatternSGIS.put(GL_1PASS_SGIS, "GL_1PASS_SGIS");
    SamplePatternSGIS.put(GL_2PASS_0_SGIS, "GL_2PASS_0_SGIS");
    SamplePatternSGIS.put(GL_4PASS_0_SGIS, "GL_4PASS_0_SGIS");
    SamplePatternSGIS.put(GL_4PASS_3_SGIS, "GL_4PASS_3_SGIS");
  }
  public static final Map<Integer, String> BufferAccessARB = new HashMap<Integer, String>();
  private static void BufferAccessARB0() {
    BufferAccessARB.put(GL_WRITE_ONLY, "GL_WRITE_ONLY");
    BufferAccessARB.put(GL_READ_WRITE, "GL_READ_WRITE");
    BufferAccessARB.put(GL_READ_ONLY, "GL_READ_ONLY");
  }
  public static final Map<Integer, String> StencilOp = new HashMap<Integer, String>();
  private static void StencilOp0() {
    StencilOp.put(GL_KEEP, "GL_KEEP");
    StencilOp.put(GL_INCR, "GL_INCR");
    StencilOp.put(GL_INVERT, "GL_INVERT");
    StencilOp.put(GL_REPLACE, "GL_REPLACE");
    StencilOp.put(GL_ZERO, "GL_ZERO");
    StencilOp.put(GL_DECR, "GL_DECR");
  }
  public static final Map<Integer, String> ErrorCode = new HashMap<Integer, String>();
  private static void ErrorCode0() {
    ErrorCode.put(GL_TABLE_TOO_LARGE, "GL_TABLE_TOO_LARGE");
    ErrorCode.put(GL_STACK_UNDERFLOW, "GL_STACK_UNDERFLOW");
    ErrorCode.put(GL_INVALID_OPERATION, "GL_INVALID_OPERATION");
    ErrorCode.put(GL_STACK_OVERFLOW, "GL_STACK_OVERFLOW");
    ErrorCode.put(GL_OUT_OF_MEMORY, "GL_OUT_OF_MEMORY");
    ErrorCode.put(GL_INVALID_VALUE, "GL_INVALID_VALUE");
    ErrorCode.put(GL_NO_ERROR, "GL_NO_ERROR");
    ErrorCode.put(GL_INVALID_FRAMEBUFFER_OPERATION, "GL_INVALID_FRAMEBUFFER_OPERATION");
    ErrorCode.put(GL_INVALID_ENUM, "GL_INVALID_ENUM");
  }
  public static final Map<Integer, String> FfdTargetSGIX = new HashMap<Integer, String>();
  private static void FfdTargetSGIX0() {
    FfdTargetSGIX.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    FfdTargetSGIX.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
  }
  public static final Map<Integer, String> SeparableTargetEXT = new HashMap<Integer, String>();
  private static void SeparableTargetEXT0() {
    SeparableTargetEXT.put(GL_SEPARABLE_2D, "GL_SEPARABLE_2D");
  }
  private static final Map<Integer, String> GL_EXT_discard_framebuffer = new HashMap<Integer, String>();
  private static void GL_EXT_discard_framebuffer() {
    GL_EXT_discard_framebuffer.put(GL_COLOR_EXT, "GL_COLOR_EXT");
    GL_EXT_discard_framebuffer.put(GL_STENCIL_EXT, "GL_STENCIL_EXT");
    GL_EXT_discard_framebuffer.put(GL_DEPTH_EXT, "GL_DEPTH_EXT");
  }
  private static final Map<Integer, String> GL_NV_fog_distance = new HashMap<Integer, String>();
  private static void GL_NV_fog_distance() {
    GL_NV_fog_distance.put(GL_FOG_DISTANCE_MODE_NV, "GL_FOG_DISTANCE_MODE_NV");
    GL_NV_fog_distance.put(GL_EYE_RADIAL_NV, "GL_EYE_RADIAL_NV");
    GL_NV_fog_distance.put(GL_EYE_PLANE_ABSOLUTE_NV, "GL_EYE_PLANE_ABSOLUTE_NV");
    GL_NV_fog_distance.put(GL_EYE_PLANE, "GL_EYE_PLANE");
  }
  private static final Map<Integer, String> GL_EXT_read_format_bgra = new HashMap<Integer, String>();
  private static void GL_EXT_read_format_bgra() {
    GL_EXT_read_format_bgra.put(GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT, "GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT");
    GL_EXT_read_format_bgra.put(GL_BGRA_EXT, "GL_BGRA_EXT");
    GL_EXT_read_format_bgra.put(GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT, "GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT");
  }
  private static final Map<Integer, String> GL_QCOM_tiled_rendering = new HashMap<Integer, String>();
  private static void GL_QCOM_tiled_rendering() {
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT0_QCOM, "GL_MULTISAMPLE_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT6_QCOM, "GL_MULTISAMPLE_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT6_QCOM, "GL_COLOR_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT3_QCOM, "GL_STENCIL_BUFFER_BIT3_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT5_QCOM, "GL_DEPTH_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT6_QCOM, "GL_STENCIL_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT3_QCOM, "GL_DEPTH_BUFFER_BIT3_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT0_QCOM, "GL_STENCIL_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT1_QCOM, "GL_COLOR_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT0_QCOM, "GL_DEPTH_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT1_QCOM, "GL_STENCIL_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT7_QCOM, "GL_STENCIL_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT1_QCOM, "GL_MULTISAMPLE_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT5_QCOM, "GL_MULTISAMPLE_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT5_QCOM, "GL_COLOR_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT4_QCOM, "GL_DEPTH_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT7_QCOM, "GL_DEPTH_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT4_QCOM, "GL_STENCIL_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT2_QCOM, "GL_COLOR_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT1_QCOM, "GL_DEPTH_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT2_QCOM, "GL_STENCIL_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT5_QCOM, "GL_STENCIL_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT2_QCOM, "GL_MULTISAMPLE_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT4_QCOM, "GL_MULTISAMPLE_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT7_QCOM, "GL_MULTISAMPLE_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT4_QCOM, "GL_COLOR_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT6_QCOM, "GL_DEPTH_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT7_QCOM, "GL_COLOR_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT3_QCOM, "GL_COLOR_BUFFER_BIT3_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT2_QCOM, "GL_DEPTH_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT0_QCOM, "GL_COLOR_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT3_QCOM, "GL_MULTISAMPLE_BUFFER_BIT3_QCOM");
  }
  private static final Map<Integer, String> GL_NV_depth_clamp = new HashMap<Integer, String>();
  private static void GL_NV_depth_clamp() {
    GL_NV_depth_clamp.put(GL_DEPTH_CLAMP_NV, "GL_DEPTH_CLAMP_NV");
  }
  private static final Map<Integer, String> GL_DMP_program_binary = new HashMap<Integer, String>();
  private static void GL_DMP_program_binary() {
    GL_DMP_program_binary.put(GL_SMAPHS30_PROGRAM_BINARY_DMP, "GL_SMAPHS30_PROGRAM_BINARY_DMP");
    GL_DMP_program_binary.put(GL_DMP_PROGRAM_BINARY_DMP, "GL_DMP_PROGRAM_BINARY_DMP");
    GL_DMP_program_binary.put(GL_SMAPHS_PROGRAM_BINARY_DMP, "GL_SMAPHS_PROGRAM_BINARY_DMP");
  }
  private static final Map<Integer, String> GL_NV_parameter_buffer_object = new HashMap<Integer, String>();
  private static void GL_NV_parameter_buffer_object() {
    GL_NV_parameter_buffer_object.put(GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV, "GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV");
    GL_NV_parameter_buffer_object.put(GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV, "GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV");
    GL_NV_parameter_buffer_object.put(GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV, "GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_parameter_buffer_object.put(GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV, "GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_parameter_buffer_object.put(GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV, "GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV");
  }
  private static final Map<Integer, String> GL_KHR_robustness = new HashMap<Integer, String>();
  private static void GL_KHR_robustness() {
    GL_KHR_robustness.put(GL_GUILTY_CONTEXT_RESET, "GL_GUILTY_CONTEXT_RESET");
    GL_KHR_robustness.put(GL_RESET_NOTIFICATION_STRATEGY, "GL_RESET_NOTIFICATION_STRATEGY");
    GL_KHR_robustness.put(GL_NO_RESET_NOTIFICATION, "GL_NO_RESET_NOTIFICATION");
    GL_KHR_robustness.put(GL_UNKNOWN_CONTEXT_RESET_KHR, "GL_UNKNOWN_CONTEXT_RESET_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_ROBUST_ACCESS, "GL_CONTEXT_ROBUST_ACCESS");
    GL_KHR_robustness.put(GL_INNOCENT_CONTEXT_RESET, "GL_INNOCENT_CONTEXT_RESET");
    GL_KHR_robustness.put(GL_GUILTY_CONTEXT_RESET_KHR, "GL_GUILTY_CONTEXT_RESET_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_LOST, "GL_CONTEXT_LOST");
    GL_KHR_robustness.put(GL_RESET_NOTIFICATION_STRATEGY_KHR, "GL_RESET_NOTIFICATION_STRATEGY_KHR");
    GL_KHR_robustness.put(GL_LOSE_CONTEXT_ON_RESET_KHR, "GL_LOSE_CONTEXT_ON_RESET_KHR");
    GL_KHR_robustness.put(GL_NO_ERROR, "GL_NO_ERROR");
    GL_KHR_robustness.put(GL_INNOCENT_CONTEXT_RESET_KHR, "GL_INNOCENT_CONTEXT_RESET_KHR");
    GL_KHR_robustness.put(GL_NO_RESET_NOTIFICATION_KHR, "GL_NO_RESET_NOTIFICATION_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_ROBUST_ACCESS_KHR, "GL_CONTEXT_ROBUST_ACCESS_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_LOST_KHR, "GL_CONTEXT_LOST_KHR");
    GL_KHR_robustness.put(GL_UNKNOWN_CONTEXT_RESET, "GL_UNKNOWN_CONTEXT_RESET");
    GL_KHR_robustness.put(GL_LOSE_CONTEXT_ON_RESET, "GL_LOSE_CONTEXT_ON_RESET");
  }
  private static final Map<Integer, String> GL_NV_shader_thread_group = new HashMap<Integer, String>();
  private static void GL_NV_shader_thread_group() {
    GL_NV_shader_thread_group.put(GL_SM_COUNT_NV, "GL_SM_COUNT_NV");
    GL_NV_shader_thread_group.put(GL_WARPS_PER_SM_NV, "GL_WARPS_PER_SM_NV");
    GL_NV_shader_thread_group.put(GL_WARP_SIZE_NV, "GL_WARP_SIZE_NV");
  }
  private static final Map<Integer, String> GL_SGIX_fragment_lighting = new HashMap<Integer, String>();
  private static void GL_SGIX_fragment_lighting() {
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    GL_SGIX_fragment_lighting.put(GL_MAX_FRAGMENT_LIGHTS_SGIX, "GL_MAX_FRAGMENT_LIGHTS_SGIX");
    GL_SGIX_fragment_lighting.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    GL_SGIX_fragment_lighting.put(GL_MAX_ACTIVE_LIGHTS_SGIX, "GL_MAX_ACTIVE_LIGHTS_SGIX");
    GL_SGIX_fragment_lighting.put(GL_CURRENT_RASTER_NORMAL_SGIX, "GL_CURRENT_RASTER_NORMAL_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
  }
  private static final Map<Integer, String> GL_EXT_pixel_buffer_object = new HashMap<Integer, String>();
  private static void GL_EXT_pixel_buffer_object() {
    GL_EXT_pixel_buffer_object.put(GL_PIXEL_UNPACK_BUFFER_EXT, "GL_PIXEL_UNPACK_BUFFER_EXT");
    GL_EXT_pixel_buffer_object.put(GL_PIXEL_PACK_BUFFER_EXT, "GL_PIXEL_PACK_BUFFER_EXT");
    GL_EXT_pixel_buffer_object.put(GL_PIXEL_PACK_BUFFER_BINDING_EXT, "GL_PIXEL_PACK_BUFFER_BINDING_EXT");
    GL_EXT_pixel_buffer_object.put(GL_PIXEL_UNPACK_BUFFER_BINDING_EXT, "GL_PIXEL_UNPACK_BUFFER_BINDING_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_texture_format_BGRA8888 = new HashMap<Integer, String>();
  private static void GL_APPLE_texture_format_BGRA8888() {
    GL_APPLE_texture_format_BGRA8888.put(GL_BGRA8_EXT, "GL_BGRA8_EXT");
    GL_APPLE_texture_format_BGRA8888.put(GL_BGRA_EXT, "GL_BGRA_EXT");
  }
  private static final Map<Integer, String> GL_EXT_stencil_clear_tag = new HashMap<Integer, String>();
  private static void GL_EXT_stencil_clear_tag() {
    GL_EXT_stencil_clear_tag.put(GL_STENCIL_TAG_BITS_EXT, "GL_STENCIL_TAG_BITS_EXT");
    GL_EXT_stencil_clear_tag.put(GL_STENCIL_CLEAR_TAG_VALUE_EXT, "GL_STENCIL_CLEAR_TAG_VALUE_EXT");
  }
  private static final Map<Integer, String> GL_ARB_draw_indirect = new HashMap<Integer, String>();
  private static void GL_ARB_draw_indirect() {
    GL_ARB_draw_indirect.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    GL_ARB_draw_indirect.put(GL_DRAW_INDIRECT_BUFFER_BINDING, "GL_DRAW_INDIRECT_BUFFER_BINDING");
  }
  private static final Map<Integer, String> GL_ARB_texture_float = new HashMap<Integer, String>();
  private static void GL_ARB_texture_float() {
    GL_ARB_texture_float.put(GL_ALPHA16F_ARB, "GL_ALPHA16F_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_RED_TYPE_ARB, "GL_TEXTURE_RED_TYPE_ARB");
    GL_ARB_texture_float.put(GL_RGBA16F_ARB, "GL_RGBA16F_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_GREEN_TYPE_ARB, "GL_TEXTURE_GREEN_TYPE_ARB");
    GL_ARB_texture_float.put(GL_LUMINANCE16F_ARB, "GL_LUMINANCE16F_ARB");
    GL_ARB_texture_float.put(GL_LUMINANCE32F_ARB, "GL_LUMINANCE32F_ARB");
    GL_ARB_texture_float.put(GL_LUMINANCE_ALPHA16F_ARB, "GL_LUMINANCE_ALPHA16F_ARB");
    GL_ARB_texture_float.put(GL_INTENSITY32F_ARB, "GL_INTENSITY32F_ARB");
    GL_ARB_texture_float.put(GL_LUMINANCE_ALPHA32F_ARB, "GL_LUMINANCE_ALPHA32F_ARB");
    GL_ARB_texture_float.put(GL_INTENSITY16F_ARB, "GL_INTENSITY16F_ARB");
    GL_ARB_texture_float.put(GL_RGB32F_ARB, "GL_RGB32F_ARB");
    GL_ARB_texture_float.put(GL_ALPHA32F_ARB, "GL_ALPHA32F_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_LUMINANCE_TYPE_ARB, "GL_TEXTURE_LUMINANCE_TYPE_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_BLUE_TYPE_ARB, "GL_TEXTURE_BLUE_TYPE_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_ALPHA_TYPE_ARB, "GL_TEXTURE_ALPHA_TYPE_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_INTENSITY_TYPE_ARB, "GL_TEXTURE_INTENSITY_TYPE_ARB");
    GL_ARB_texture_float.put(GL_RGBA32F_ARB, "GL_RGBA32F_ARB");
    GL_ARB_texture_float.put(GL_TEXTURE_DEPTH_TYPE_ARB, "GL_TEXTURE_DEPTH_TYPE_ARB");
    GL_ARB_texture_float.put(GL_RGB16F_ARB, "GL_RGB16F_ARB");
    GL_ARB_texture_float.put(GL_UNSIGNED_NORMALIZED_ARB, "GL_UNSIGNED_NORMALIZED_ARB");
  }
  private static final Map<Integer, String> GL_NV_sample_locations = new HashMap<Integer, String>();
  private static void GL_NV_sample_locations() {
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_NV, "GL_SAMPLE_LOCATION_NV");
    GL_NV_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_NV, "GL_PROGRAMMABLE_SAMPLE_LOCATION_NV");
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV");
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV");
    GL_NV_sample_locations.put(GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV");
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV");
    GL_NV_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV");
    GL_NV_sample_locations.put(GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV");
  }
  private static final Map<Integer, String> GL_ARB_clear_texture = new HashMap<Integer, String>();
  private static void GL_ARB_clear_texture() {
    GL_ARB_clear_texture.put(GL_CLEAR_TEXTURE, "GL_CLEAR_TEXTURE");
  }
  private static final Map<Integer, String> GL_HP_occlusion_test = new HashMap<Integer, String>();
  private static void GL_HP_occlusion_test() {
    GL_HP_occlusion_test.put(GL_OCCLUSION_TEST_RESULT_HP, "GL_OCCLUSION_TEST_RESULT_HP");
    GL_HP_occlusion_test.put(GL_OCCLUSION_TEST_HP, "GL_OCCLUSION_TEST_HP");
  }
  private static final Map<Integer, String> GL_EXT_abgr = new HashMap<Integer, String>();
  private static void GL_EXT_abgr() {
    GL_EXT_abgr.put(GL_ABGR_EXT, "GL_ABGR_EXT");
  }
  private static final Map<Integer, String> GL_NV_texture_shader = new HashMap<Integer, String>();
  private static void GL_NV_texture_shader() {
    GL_NV_texture_shader.put(GL_VIBRANCE_BIAS_NV, "GL_VIBRANCE_BIAS_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_TEXTURE_2D_NV, "GL_DOT_PRODUCT_TEXTURE_2D_NV");
    GL_NV_texture_shader.put(GL_MAGNITUDE_BIAS_NV, "GL_MAGNITUDE_BIAS_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_DS_SIZE_NV, "GL_TEXTURE_DS_SIZE_NV");
    GL_NV_texture_shader.put(GL_DS_SCALE_NV, "GL_DS_SCALE_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_2D_MATRIX_NV, "GL_OFFSET_TEXTURE_2D_MATRIX_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_NV, "GL_DOT_PRODUCT_NV");
    GL_NV_texture_shader.put(GL_LO_SCALE_NV, "GL_LO_SCALE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_LUMINANCE_NV, "GL_SIGNED_LUMINANCE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_LUMINANCE_ALPHA_NV, "GL_SIGNED_LUMINANCE_ALPHA_NV");
    GL_NV_texture_shader.put(GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV, "GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV");
    GL_NV_texture_shader.put(GL_DSDT_NV, "GL_DSDT_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_BORDER_VALUES_NV, "GL_TEXTURE_BORDER_VALUES_NV");
    GL_NV_texture_shader.put(GL_CULL_MODES_NV, "GL_CULL_MODES_NV");
    GL_NV_texture_shader.put(GL_DEPENDENT_GB_TEXTURE_2D_NV, "GL_DEPENDENT_GB_TEXTURE_2D_NV");
    GL_NV_texture_shader.put(GL_SIGNED_HILO_NV, "GL_SIGNED_HILO_NV");
    GL_NV_texture_shader.put(GL_DS_BIAS_NV, "GL_DS_BIAS_NV");
    GL_NV_texture_shader.put(GL_DSDT_MAG_NV, "GL_DSDT_MAG_NV");
    GL_NV_texture_shader.put(GL_SIGNED_HILO16_NV, "GL_SIGNED_HILO16_NV");
    GL_NV_texture_shader.put(GL_HILO_NV, "GL_HILO_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_RECTANGLE_NV, "GL_OFFSET_TEXTURE_RECTANGLE_NV");
    GL_NV_texture_shader.put(GL_MAGNITUDE_SCALE_NV, "GL_MAGNITUDE_SCALE_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_2D_NV, "GL_OFFSET_TEXTURE_2D_NV");
    GL_NV_texture_shader.put(GL_DEPENDENT_AR_TEXTURE_2D_NV, "GL_DEPENDENT_AR_TEXTURE_2D_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV, "GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV, "GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV, "GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_HI_SIZE_NV, "GL_TEXTURE_HI_SIZE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_RGB_NV, "GL_SIGNED_RGB_NV");
    GL_NV_texture_shader.put(GL_HI_BIAS_NV, "GL_HI_BIAS_NV");
    GL_NV_texture_shader.put(GL_DSDT_MAG_VIB_NV, "GL_DSDT_MAG_VIB_NV");
    GL_NV_texture_shader.put(GL_PASS_THROUGH_NV, "GL_PASS_THROUGH_NV");
    GL_NV_texture_shader.put(GL_SIGNED_INTENSITY_NV, "GL_SIGNED_INTENSITY_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_SCALE_NV, "GL_OFFSET_TEXTURE_SCALE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_RGB_UNSIGNED_ALPHA_NV, "GL_SIGNED_RGB_UNSIGNED_ALPHA_NV");
    GL_NV_texture_shader.put(GL_DSDT_MAG_INTENSITY_NV, "GL_DSDT_MAG_INTENSITY_NV");
    GL_NV_texture_shader.put(GL_PREVIOUS_TEXTURE_INPUT_NV, "GL_PREVIOUS_TEXTURE_INPUT_NV");
    GL_NV_texture_shader.put(GL_CONST_EYE_NV, "GL_CONST_EYE_NV");
    GL_NV_texture_shader.put(GL_SHADER_OPERATION_NV, "GL_SHADER_OPERATION_NV");
    GL_NV_texture_shader.put(GL_HILO16_NV, "GL_HILO16_NV");
    GL_NV_texture_shader.put(GL_UNSIGNED_INT_8_8_S8_S8_REV_NV, "GL_UNSIGNED_INT_8_8_S8_S8_REV_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_2D_BIAS_NV, "GL_OFFSET_TEXTURE_2D_BIAS_NV");
    GL_NV_texture_shader.put(GL_SIGNED_LUMINANCE8_NV, "GL_SIGNED_LUMINANCE8_NV");
    GL_NV_texture_shader.put(GL_DSDT8_MAG8_NV, "GL_DSDT8_MAG8_NV");
    GL_NV_texture_shader.put(GL_DT_BIAS_NV, "GL_DT_BIAS_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_SHADER_NV, "GL_TEXTURE_SHADER_NV");
    GL_NV_texture_shader.put(GL_SIGNED_ALPHA_NV, "GL_SIGNED_ALPHA_NV");
    GL_NV_texture_shader.put(GL_SIGNED_ALPHA8_NV, "GL_SIGNED_ALPHA8_NV");
    GL_NV_texture_shader.put(GL_HI_SCALE_NV, "GL_HI_SCALE_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV, "GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV");
    GL_NV_texture_shader.put(GL_SHADER_CONSISTENT_NV, "GL_SHADER_CONSISTENT_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_DT_SIZE_NV, "GL_TEXTURE_DT_SIZE_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_DEPTH_REPLACE_NV, "GL_DOT_PRODUCT_DEPTH_REPLACE_NV");
    GL_NV_texture_shader.put(GL_DT_SCALE_NV, "GL_DT_SCALE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_RGBA_NV, "GL_SIGNED_RGBA_NV");
    GL_NV_texture_shader.put(GL_SIGNED_INTENSITY8_NV, "GL_SIGNED_INTENSITY8_NV");
    GL_NV_texture_shader.put(GL_UNSIGNED_INT_S8_S8_8_8_NV, "GL_UNSIGNED_INT_S8_S8_8_8_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_MAG_SIZE_NV, "GL_TEXTURE_MAG_SIZE_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV, "GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV, "GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_RGB8_NV, "GL_SIGNED_RGB8_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_MATRIX_NV, "GL_OFFSET_TEXTURE_MATRIX_NV");
    GL_NV_texture_shader.put(GL_DSDT8_NV, "GL_DSDT8_NV");
    GL_NV_texture_shader.put(GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV, "GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV");
    GL_NV_texture_shader.put(GL_TEXTURE_LO_SIZE_NV, "GL_TEXTURE_LO_SIZE_NV");
    GL_NV_texture_shader.put(GL_LO_BIAS_NV, "GL_LO_BIAS_NV");
    GL_NV_texture_shader.put(GL_CULL_FRAGMENT_NV, "GL_CULL_FRAGMENT_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_BIAS_NV, "GL_OFFSET_TEXTURE_BIAS_NV");
    GL_NV_texture_shader.put(GL_DSDT8_MAG8_INTENSITY8_NV, "GL_DSDT8_MAG8_INTENSITY8_NV");
    GL_NV_texture_shader.put(GL_SIGNED_LUMINANCE8_ALPHA8_NV, "GL_SIGNED_LUMINANCE8_ALPHA8_NV");
    GL_NV_texture_shader.put(GL_VIBRANCE_SCALE_NV, "GL_VIBRANCE_SCALE_NV");
    GL_NV_texture_shader.put(GL_OFFSET_TEXTURE_2D_SCALE_NV, "GL_OFFSET_TEXTURE_2D_SCALE_NV");
    GL_NV_texture_shader.put(GL_SIGNED_RGBA8_NV, "GL_SIGNED_RGBA8_NV");
  }
  private static final Map<Integer, String> GL_ARB_texture_compression_bptc = new HashMap<Integer, String>();
  private static void GL_ARB_texture_compression_bptc() {
    GL_ARB_texture_compression_bptc.put(GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB");
    GL_ARB_texture_compression_bptc.put(GL_COMPRESSED_RGBA_BPTC_UNORM_ARB, "GL_COMPRESSED_RGBA_BPTC_UNORM_ARB");
    GL_ARB_texture_compression_bptc.put(GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB");
    GL_ARB_texture_compression_bptc.put(GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB");
  }
  private static final Map<Integer, String> GL_OES_point_size_array = new HashMap<Integer, String>();
  private static void GL_OES_point_size_array() {
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_STRIDE_OES, "GL_POINT_SIZE_ARRAY_STRIDE_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_TYPE_OES, "GL_POINT_SIZE_ARRAY_TYPE_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES, "GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_OES, "GL_POINT_SIZE_ARRAY_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_POINTER_OES, "GL_POINT_SIZE_ARRAY_POINTER_OES");
  }
  private static final Map<Integer, String> GL_EXT_clip_cull_distance = new HashMap<Integer, String>();
  private static void GL_EXT_clip_cull_distance() {
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE5_EXT, "GL_CLIP_DISTANCE5_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE4_EXT, "GL_CLIP_DISTANCE4_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE6_EXT, "GL_CLIP_DISTANCE6_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE7_EXT, "GL_CLIP_DISTANCE7_EXT");
    GL_EXT_clip_cull_distance.put(GL_MAX_CLIP_DISTANCES_EXT, "GL_MAX_CLIP_DISTANCES_EXT");
    GL_EXT_clip_cull_distance.put(GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT, "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE2_EXT, "GL_CLIP_DISTANCE2_EXT");
    GL_EXT_clip_cull_distance.put(GL_MAX_CULL_DISTANCES_EXT, "GL_MAX_CULL_DISTANCES_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE3_EXT, "GL_CLIP_DISTANCE3_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE1_EXT, "GL_CLIP_DISTANCE1_EXT");
    GL_EXT_clip_cull_distance.put(GL_CLIP_DISTANCE0_EXT, "GL_CLIP_DISTANCE0_EXT");
  }
  private static final Map<Integer, String> GL_ARB_parallel_shader_compile = new HashMap<Integer, String>();
  private static void GL_ARB_parallel_shader_compile() {
    GL_ARB_parallel_shader_compile.put(GL_COMPLETION_STATUS_ARB, "GL_COMPLETION_STATUS_ARB");
    GL_ARB_parallel_shader_compile.put(GL_MAX_SHADER_COMPILER_THREADS_ARB, "GL_MAX_SHADER_COMPILER_THREADS_ARB");
  }
  private static final Map<Integer, String> GL_EXT_draw_buffers_indexed = new HashMap<Integer, String>();
  private static void GL_EXT_draw_buffers_indexed() {
    GL_EXT_draw_buffers_indexed.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    GL_EXT_draw_buffers_indexed.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_EQUATION_ALPHA, "GL_BLEND_EQUATION_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_SRC_RGB, "GL_BLEND_SRC_RGB");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_DST_ALPHA, "GL_BLEND_DST_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_DST_COLOR, "GL_DST_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_MIN, "GL_MIN");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_SRC_ALPHA, "GL_BLEND_SRC_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_EQUATION_RGB, "GL_BLEND_EQUATION_RGB");
    GL_EXT_draw_buffers_indexed.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_DST_RGB, "GL_BLEND_DST_RGB");
    GL_EXT_draw_buffers_indexed.put(GL_MAX, "GL_MAX");
    GL_EXT_draw_buffers_indexed.put(GL_ZERO, "GL_ZERO");
    GL_EXT_draw_buffers_indexed.put(GL_ONE, "GL_ONE");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND, "GL_BLEND");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    GL_EXT_draw_buffers_indexed.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
  }
  private static final Map<Integer, String> GL_NV_conditional_render = new HashMap<Integer, String>();
  private static void GL_NV_conditional_render() {
    GL_NV_conditional_render.put(GL_QUERY_WAIT_NV, "GL_QUERY_WAIT_NV");
    GL_NV_conditional_render.put(GL_QUERY_BY_REGION_WAIT_NV, "GL_QUERY_BY_REGION_WAIT_NV");
    GL_NV_conditional_render.put(GL_QUERY_NO_WAIT_NV, "GL_QUERY_NO_WAIT_NV");
    GL_NV_conditional_render.put(GL_QUERY_BY_REGION_NO_WAIT_NV, "GL_QUERY_BY_REGION_NO_WAIT_NV");
  }
  private static final Map<Integer, String> GL_NV_point_sprite = new HashMap<Integer, String>();
  private static void GL_NV_point_sprite() {
    GL_NV_point_sprite.put(GL_POINT_SPRITE_R_MODE_NV, "GL_POINT_SPRITE_R_MODE_NV");
    GL_NV_point_sprite.put(GL_POINT_SPRITE_NV, "GL_POINT_SPRITE_NV");
    GL_NV_point_sprite.put(GL_COORD_REPLACE_NV, "GL_COORD_REPLACE_NV");
  }
  private static final Map<Integer, String> GL_WIN_phong_shading = new HashMap<Integer, String>();
  private static void GL_WIN_phong_shading() {
    GL_WIN_phong_shading.put(GL_PHONG_HINT_WIN, "GL_PHONG_HINT_WIN");
    GL_WIN_phong_shading.put(GL_PHONG_WIN, "GL_PHONG_WIN");
  }
  private static final Map<Integer, String> GL_ATI_fragment_shader = new HashMap<Integer, String>();
  private static void GL_ATI_fragment_shader() {
    GL_ATI_fragment_shader.put(GL_SATURATE_BIT_ATI, "GL_SATURATE_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_25_ATI, "GL_REG_25_ATI");
    GL_ATI_fragment_shader.put(GL_CON_21_ATI, "GL_CON_21_ATI");
    GL_ATI_fragment_shader.put(GL_EIGHTH_BIT_ATI, "GL_EIGHTH_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_5_ATI, "GL_REG_5_ATI");
    GL_ATI_fragment_shader.put(GL_REG_27_ATI, "GL_REG_27_ATI");
    GL_ATI_fragment_shader.put(GL_CON_0_ATI, "GL_CON_0_ATI");
    GL_ATI_fragment_shader.put(GL_HALF_BIT_ATI, "GL_HALF_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_31_ATI, "GL_CON_31_ATI");
    GL_ATI_fragment_shader.put(GL_CON_9_ATI, "GL_CON_9_ATI");
    GL_ATI_fragment_shader.put(GL_CON_13_ATI, "GL_CON_13_ATI");
    GL_ATI_fragment_shader.put(GL_REG_19_ATI, "GL_REG_19_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STQ_DQ_ATI, "GL_SWIZZLE_STQ_DQ_ATI");
    GL_ATI_fragment_shader.put(GL_REG_10_ATI, "GL_REG_10_ATI");
    GL_ATI_fragment_shader.put(GL_REG_15_ATI, "GL_REG_15_ATI");
    GL_ATI_fragment_shader.put(GL_COLOR_ALPHA_PAIRING_ATI, "GL_COLOR_ALPHA_PAIRING_ATI");
    GL_ATI_fragment_shader.put(GL_RED_BIT_ATI, "GL_RED_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_23_ATI, "GL_REG_23_ATI");
    GL_ATI_fragment_shader.put(GL_COMP_BIT_ATI, "GL_COMP_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_29_ATI, "GL_REG_29_ATI");
    GL_ATI_fragment_shader.put(GL_CON_23_ATI, "GL_CON_23_ATI");
    GL_ATI_fragment_shader.put(GL_CON_25_ATI, "GL_CON_25_ATI");
    GL_ATI_fragment_shader.put(GL_FRAGMENT_SHADER_ATI, "GL_FRAGMENT_SHADER_ATI");
    GL_ATI_fragment_shader.put(GL_CON_7_ATI, "GL_CON_7_ATI");
    GL_ATI_fragment_shader.put(GL_DOT3_ATI, "GL_DOT3_ATI");
    GL_ATI_fragment_shader.put(GL_REG_7_ATI, "GL_REG_7_ATI");
    GL_ATI_fragment_shader.put(GL_DOT2_ADD_ATI, "GL_DOT2_ADD_ATI");
    GL_ATI_fragment_shader.put(GL_REG_17_ATI, "GL_REG_17_ATI");
    GL_ATI_fragment_shader.put(GL_CON_11_ATI, "GL_CON_11_ATI");
    GL_ATI_fragment_shader.put(GL_SECONDARY_INTERPOLATOR_ATI, "GL_SECONDARY_INTERPOLATOR_ATI");
    GL_ATI_fragment_shader.put(GL_REG_12_ATI, "GL_REG_12_ATI");
    GL_ATI_fragment_shader.put(GL_REG_9_ATI, "GL_REG_9_ATI");
    GL_ATI_fragment_shader.put(GL_CON_18_ATI, "GL_CON_18_ATI");
    GL_ATI_fragment_shader.put(GL_CON_27_ATI, "GL_CON_27_ATI");
    GL_ATI_fragment_shader.put(GL_REG_20_ATI, "GL_REG_20_ATI");
    GL_ATI_fragment_shader.put(GL_REG_0_ATI, "GL_REG_0_ATI");
    GL_ATI_fragment_shader.put(GL_8X_BIT_ATI, "GL_8X_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_GREEN_BIT_ATI, "GL_GREEN_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_QUARTER_BIT_ATI, "GL_QUARTER_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_5_ATI, "GL_CON_5_ATI");
    GL_ATI_fragment_shader.put(GL_CON_29_ATI, "GL_CON_29_ATI");
    GL_ATI_fragment_shader.put(GL_CON_16_ATI, "GL_CON_16_ATI");
    GL_ATI_fragment_shader.put(GL_MOV_ATI, "GL_MOV_ATI");
    GL_ATI_fragment_shader.put(GL_NEGATE_BIT_ATI, "GL_NEGATE_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_PASSES_ATI, "GL_NUM_PASSES_ATI");
    GL_ATI_fragment_shader.put(GL_REG_31_ATI, "GL_REG_31_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_FRAGMENT_REGISTERS_ATI, "GL_NUM_FRAGMENT_REGISTERS_ATI");
    GL_ATI_fragment_shader.put(GL_REG_14_ATI, "GL_REG_14_ATI");
    GL_ATI_fragment_shader.put(GL_REG_2_ATI, "GL_REG_2_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STR_ATI, "GL_SWIZZLE_STR_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_FRAGMENT_CONSTANTS_ATI, "GL_NUM_FRAGMENT_CONSTANTS_ATI");
    GL_ATI_fragment_shader.put(GL_BLUE_BIT_ATI, "GL_BLUE_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_20_ATI, "GL_CON_20_ATI");
    GL_ATI_fragment_shader.put(GL_CON_3_ATI, "GL_CON_3_ATI");
    GL_ATI_fragment_shader.put(GL_CON_1_ATI, "GL_CON_1_ATI");
    GL_ATI_fragment_shader.put(GL_REG_4_ATI, "GL_REG_4_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_LOOPBACK_COMPONENTS_ATI, "GL_NUM_LOOPBACK_COMPONENTS_ATI");
    GL_ATI_fragment_shader.put(GL_REG_26_ATI, "GL_REG_26_ATI");
    GL_ATI_fragment_shader.put(GL_CON_30_ATI, "GL_CON_30_ATI");
    GL_ATI_fragment_shader.put(GL_4X_BIT_ATI, "GL_4X_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_14_ATI, "GL_CON_14_ATI");
    GL_ATI_fragment_shader.put(GL_REG_18_ATI, "GL_REG_18_ATI");
    GL_ATI_fragment_shader.put(GL_CND_ATI, "GL_CND_ATI");
    GL_ATI_fragment_shader.put(GL_REG_24_ATI, "GL_REG_24_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_INSTRUCTIONS_TOTAL_ATI, "GL_NUM_INSTRUCTIONS_TOTAL_ATI");
    GL_ATI_fragment_shader.put(GL_CON_22_ATI, "GL_CON_22_ATI");
    GL_ATI_fragment_shader.put(GL_CON_24_ATI, "GL_CON_24_ATI");
    GL_ATI_fragment_shader.put(GL_DOT4_ATI, "GL_DOT4_ATI");
    GL_ATI_fragment_shader.put(GL_REG_28_ATI, "GL_REG_28_ATI");
    GL_ATI_fragment_shader.put(GL_REG_6_ATI, "GL_REG_6_ATI");
    GL_ATI_fragment_shader.put(GL_CON_8_ATI, "GL_CON_8_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STR_DR_ATI, "GL_SWIZZLE_STR_DR_ATI");
    GL_ATI_fragment_shader.put(GL_CON_10_ATI, "GL_CON_10_ATI");
    GL_ATI_fragment_shader.put(GL_REG_22_ATI, "GL_REG_22_ATI");
    GL_ATI_fragment_shader.put(GL_REG_16_ATI, "GL_REG_16_ATI");
    GL_ATI_fragment_shader.put(GL_CON_12_ATI, "GL_CON_12_ATI");
    GL_ATI_fragment_shader.put(GL_REG_8_ATI, "GL_REG_8_ATI");
    GL_ATI_fragment_shader.put(GL_CON_19_ATI, "GL_CON_19_ATI");
    GL_ATI_fragment_shader.put(GL_LERP_ATI, "GL_LERP_ATI");
    GL_ATI_fragment_shader.put(GL_SUB_ATI, "GL_SUB_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI, "GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI");
    GL_ATI_fragment_shader.put(GL_REG_21_ATI, "GL_REG_21_ATI");
    GL_ATI_fragment_shader.put(GL_BIAS_BIT_ATI, "GL_BIAS_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_6_ATI, "GL_CON_6_ATI");
    GL_ATI_fragment_shader.put(GL_CON_17_ATI, "GL_CON_17_ATI");
    GL_ATI_fragment_shader.put(GL_REG_11_ATI, "GL_REG_11_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STRQ_ATI, "GL_SWIZZLE_STRQ_ATI");
    GL_ATI_fragment_shader.put(GL_MAD_ATI, "GL_MAD_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STRQ_DQ_ATI, "GL_SWIZZLE_STRQ_DQ_ATI");
    GL_ATI_fragment_shader.put(GL_REG_1_ATI, "GL_REG_1_ATI");
    GL_ATI_fragment_shader.put(GL_CON_26_ATI, "GL_CON_26_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STQ_ATI, "GL_SWIZZLE_STQ_ATI");
    GL_ATI_fragment_shader.put(GL_MUL_ATI, "GL_MUL_ATI");
    GL_ATI_fragment_shader.put(GL_CND0_ATI, "GL_CND0_ATI");
    GL_ATI_fragment_shader.put(GL_CON_4_ATI, "GL_CON_4_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_INSTRUCTIONS_PER_PASS_ATI, "GL_NUM_INSTRUCTIONS_PER_PASS_ATI");
    GL_ATI_fragment_shader.put(GL_CON_2_ATI, "GL_CON_2_ATI");
    GL_ATI_fragment_shader.put(GL_REG_13_ATI, "GL_REG_13_ATI");
    GL_ATI_fragment_shader.put(GL_ADD_ATI, "GL_ADD_ATI");
    GL_ATI_fragment_shader.put(GL_CON_15_ATI, "GL_CON_15_ATI");
    GL_ATI_fragment_shader.put(GL_REG_3_ATI, "GL_REG_3_ATI");
    GL_ATI_fragment_shader.put(GL_REG_30_ATI, "GL_REG_30_ATI");
    GL_ATI_fragment_shader.put(GL_CON_28_ATI, "GL_CON_28_ATI");
    GL_ATI_fragment_shader.put(GL_2X_BIT_ATI, "GL_2X_BIT_ATI");
  }
  private static final Map<Integer, String> GL_APPLE_flush_buffer_range = new HashMap<Integer, String>();
  private static void GL_APPLE_flush_buffer_range() {
    GL_APPLE_flush_buffer_range.put(GL_BUFFER_FLUSHING_UNMAP_APPLE, "GL_BUFFER_FLUSHING_UNMAP_APPLE");
    GL_APPLE_flush_buffer_range.put(GL_BUFFER_SERIALIZED_MODIFY_APPLE, "GL_BUFFER_SERIALIZED_MODIFY_APPLE");
  }
  private static final Map<Integer, String> GL_OES_byte_coordinates = new HashMap<Integer, String>();
  private static void GL_OES_byte_coordinates() {
    GL_OES_byte_coordinates.put(GL_BYTE, "GL_BYTE");
  }
  private static final Map<Integer, String> GL_ARB_point_sprite = new HashMap<Integer, String>();
  private static void GL_ARB_point_sprite() {
    GL_ARB_point_sprite.put(GL_POINT_SPRITE_ARB, "GL_POINT_SPRITE_ARB");
    GL_ARB_point_sprite.put(GL_COORD_REPLACE_ARB, "GL_COORD_REPLACE_ARB");
  }
  private static final Map<Integer, String> GL_KHR_blend_equation_advanced_coherent = new HashMap<Integer, String>();
  private static void GL_KHR_blend_equation_advanced_coherent() {
    GL_KHR_blend_equation_advanced_coherent.put(GL_BLEND_ADVANCED_COHERENT_KHR, "GL_BLEND_ADVANCED_COHERENT_KHR");
  }
  private static final Map<Integer, String> GL_SGIX_shadow_ambient = new HashMap<Integer, String>();
  private static void GL_SGIX_shadow_ambient() {
    GL_SGIX_shadow_ambient.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_sync = new HashMap<Integer, String>();
  private static void GL_ARB_sync() {
    GL_ARB_sync.put(GL_SYNC_STATUS, "GL_SYNC_STATUS");
    GL_ARB_sync.put(GL_MAX_SERVER_WAIT_TIMEOUT, "GL_MAX_SERVER_WAIT_TIMEOUT");
    GL_ARB_sync.put(GL_TIMEOUT_EXPIRED, "GL_TIMEOUT_EXPIRED");
    GL_ARB_sync.put(GL_SYNC_FENCE, "GL_SYNC_FENCE");
    GL_ARB_sync.put(GL_OBJECT_TYPE, "GL_OBJECT_TYPE");
    GL_ARB_sync.put(GL_ALREADY_SIGNALED, "GL_ALREADY_SIGNALED");
    GL_ARB_sync.put(GL_UNSIGNALED, "GL_UNSIGNALED");
    GL_ARB_sync.put(GL_SYNC_GPU_COMMANDS_COMPLETE, "GL_SYNC_GPU_COMMANDS_COMPLETE");
    GL_ARB_sync.put(GL_SYNC_FLUSH_COMMANDS_BIT, "GL_SYNC_FLUSH_COMMANDS_BIT");
    GL_ARB_sync.put(GL_SYNC_FLAGS, "GL_SYNC_FLAGS");
    GL_ARB_sync.put(GL_CONDITION_SATISFIED, "GL_CONDITION_SATISFIED");
    GL_ARB_sync.put(GL_SYNC_CONDITION, "GL_SYNC_CONDITION");
    GL_ARB_sync.put(GL_SIGNALED, "GL_SIGNALED");
    GL_ARB_sync.put(GL_WAIT_FAILED, "GL_WAIT_FAILED");
    GL_ARB_sync.put(GL_TIMEOUT_IGNORED, "GL_TIMEOUT_IGNORED");
  }
  private static final Map<Integer, String> GL_NV_multisample_filter_hint = new HashMap<Integer, String>();
  private static void GL_NV_multisample_filter_hint() {
    GL_NV_multisample_filter_hint.put(GL_MULTISAMPLE_FILTER_HINT_NV, "GL_MULTISAMPLE_FILTER_HINT_NV");
  }
  private static final Map<Integer, String> GL_EXT_color_buffer_half_float = new HashMap<Integer, String>();
  private static void GL_EXT_color_buffer_half_float() {
    GL_EXT_color_buffer_half_float.put(GL_RG16F_EXT, "GL_RG16F_EXT");
    GL_EXT_color_buffer_half_float.put(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT");
    GL_EXT_color_buffer_half_float.put(GL_R16F_EXT, "GL_R16F_EXT");
    GL_EXT_color_buffer_half_float.put(GL_RGBA16F_EXT, "GL_RGBA16F_EXT");
    GL_EXT_color_buffer_half_float.put(GL_RGB16F_EXT, "GL_RGB16F_EXT");
    GL_EXT_color_buffer_half_float.put(GL_UNSIGNED_NORMALIZED_EXT, "GL_UNSIGNED_NORMALIZED_EXT");
  }
  private static final Map<Integer, String> GL_ANGLE_texture_usage = new HashMap<Integer, String>();
  private static void GL_ANGLE_texture_usage() {
    GL_ANGLE_texture_usage.put(GL_FRAMEBUFFER_ATTACHMENT_ANGLE, "GL_FRAMEBUFFER_ATTACHMENT_ANGLE");
    GL_ANGLE_texture_usage.put(GL_TEXTURE_USAGE_ANGLE, "GL_TEXTURE_USAGE_ANGLE");
  }
  private static final Map<Integer, String> GL_EXT_rescale_normal = new HashMap<Integer, String>();
  private static void GL_EXT_rescale_normal() {
    GL_EXT_rescale_normal.put(GL_RESCALE_NORMAL_EXT, "GL_RESCALE_NORMAL_EXT");
  }
  private static final Map<Integer, String> GL_NV_evaluators = new HashMap<Integer, String>();
  private static void GL_NV_evaluators() {
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB11_NV, "GL_EVAL_VERTEX_ATTRIB11_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB14_NV, "GL_EVAL_VERTEX_ATTRIB14_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB12_NV, "GL_EVAL_VERTEX_ATTRIB12_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB13_NV, "GL_EVAL_VERTEX_ATTRIB13_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB0_NV, "GL_EVAL_VERTEX_ATTRIB0_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB10_NV, "GL_EVAL_VERTEX_ATTRIB10_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB1_NV, "GL_EVAL_VERTEX_ATTRIB1_NV");
    GL_NV_evaluators.put(GL_MAP_ATTRIB_V_ORDER_NV, "GL_MAP_ATTRIB_V_ORDER_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB3_NV, "GL_EVAL_VERTEX_ATTRIB3_NV");
    GL_NV_evaluators.put(GL_MAP_ATTRIB_U_ORDER_NV, "GL_MAP_ATTRIB_U_ORDER_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB2_NV, "GL_EVAL_VERTEX_ATTRIB2_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB15_NV, "GL_EVAL_VERTEX_ATTRIB15_NV");
    GL_NV_evaluators.put(GL_EVAL_FRACTIONAL_TESSELLATION_NV, "GL_EVAL_FRACTIONAL_TESSELLATION_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB8_NV, "GL_EVAL_VERTEX_ATTRIB8_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB9_NV, "GL_EVAL_VERTEX_ATTRIB9_NV");
    GL_NV_evaluators.put(GL_EVAL_2D_NV, "GL_EVAL_2D_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB6_NV, "GL_EVAL_VERTEX_ATTRIB6_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB4_NV, "GL_EVAL_VERTEX_ATTRIB4_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB7_NV, "GL_EVAL_VERTEX_ATTRIB7_NV");
    GL_NV_evaluators.put(GL_MAX_MAP_TESSELLATION_NV, "GL_MAX_MAP_TESSELLATION_NV");
    GL_NV_evaluators.put(GL_MAX_RATIONAL_EVAL_ORDER_NV, "GL_MAX_RATIONAL_EVAL_ORDER_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB5_NV, "GL_EVAL_VERTEX_ATTRIB5_NV");
    GL_NV_evaluators.put(GL_EVAL_TRIANGULAR_2D_NV, "GL_EVAL_TRIANGULAR_2D_NV");
    GL_NV_evaluators.put(GL_MAP_TESSELLATION_NV, "GL_MAP_TESSELLATION_NV");
  }
  private static final Map<Integer, String> GL_NVX_gpu_memory_info = new HashMap<Integer, String>();
  private static void GL_NVX_gpu_memory_info() {
    GL_NVX_gpu_memory_info.put(GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX, "GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX");
    GL_NVX_gpu_memory_info.put(GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX, "GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX");
    GL_NVX_gpu_memory_info.put(GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX, "GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX");
    GL_NVX_gpu_memory_info.put(GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX, "GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX");
    GL_NVX_gpu_memory_info.put(GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX, "GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX");
  }
  private static final Map<Integer, String> GL_EXT_semaphore = new HashMap<Integer, String>();
  private static void GL_EXT_semaphore() {
    GL_EXT_semaphore.put(GL_LAYOUT_COLOR_ATTACHMENT_EXT, "GL_LAYOUT_COLOR_ATTACHMENT_EXT");
    GL_EXT_semaphore.put(GL_DEVICE_UUID_EXT, "GL_DEVICE_UUID_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_SHADER_READ_ONLY_EXT, "GL_LAYOUT_SHADER_READ_ONLY_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_TRANSFER_SRC_EXT, "GL_LAYOUT_TRANSFER_SRC_EXT");
    GL_EXT_semaphore.put(GL_NUM_DEVICE_UUIDS_EXT, "GL_NUM_DEVICE_UUIDS_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_TRANSFER_DST_EXT, "GL_LAYOUT_TRANSFER_DST_EXT");
    GL_EXT_semaphore.put(GL_DRIVER_UUID_EXT, "GL_DRIVER_UUID_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_GENERAL_EXT, "GL_LAYOUT_GENERAL_EXT");
    GL_EXT_semaphore.put(GL_UUID_SIZE_EXT, "GL_UUID_SIZE_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT, "GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT, "GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT");
  }
  private static final Map<Integer, String> GL_OES_packed_depth_stencil = new HashMap<Integer, String>();
  private static void GL_OES_packed_depth_stencil() {
    GL_OES_packed_depth_stencil.put(GL_DEPTH_STENCIL_OES, "GL_DEPTH_STENCIL_OES");
    GL_OES_packed_depth_stencil.put(GL_DEPTH24_STENCIL8_OES, "GL_DEPTH24_STENCIL8_OES");
    GL_OES_packed_depth_stencil.put(GL_UNSIGNED_INT_24_8_OES, "GL_UNSIGNED_INT_24_8_OES");
  }
  private static final Map<Integer, String> GL_ARB_gpu_shader_int64 = new HashMap<Integer, String>();
  private static void GL_ARB_gpu_shader_int64() {
    GL_ARB_gpu_shader_int64.put(GL_INT64_ARB, "GL_INT64_ARB");
    GL_ARB_gpu_shader_int64.put(GL_INT64_VEC2_ARB, "GL_INT64_VEC2_ARB");
    GL_ARB_gpu_shader_int64.put(GL_INT64_VEC3_ARB, "GL_INT64_VEC3_ARB");
    GL_ARB_gpu_shader_int64.put(GL_UNSIGNED_INT64_VEC3_ARB, "GL_UNSIGNED_INT64_VEC3_ARB");
    GL_ARB_gpu_shader_int64.put(GL_INT64_VEC4_ARB, "GL_INT64_VEC4_ARB");
    GL_ARB_gpu_shader_int64.put(GL_UNSIGNED_INT64_VEC4_ARB, "GL_UNSIGNED_INT64_VEC4_ARB");
    GL_ARB_gpu_shader_int64.put(GL_UNSIGNED_INT64_ARB, "GL_UNSIGNED_INT64_ARB");
    GL_ARB_gpu_shader_int64.put(GL_UNSIGNED_INT64_VEC2_ARB, "GL_UNSIGNED_INT64_VEC2_ARB");
  }
  private static final Map<Integer, String> GL_NV_light_max_exponent = new HashMap<Integer, String>();
  private static void GL_NV_light_max_exponent() {
    GL_NV_light_max_exponent.put(GL_MAX_SHININESS_NV, "GL_MAX_SHININESS_NV");
    GL_NV_light_max_exponent.put(GL_MAX_SPOT_EXPONENT_NV, "GL_MAX_SPOT_EXPONENT_NV");
  }
  private static final Map<Integer, String> GL_EXT_vertex_shader = new HashMap<Integer, String>();
  private static void GL_EXT_vertex_shader() {
    GL_EXT_vertex_shader.put(GL_SCALAR_EXT, "GL_SCALAR_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD10_EXT, "GL_OUTPUT_TEXTURE_COORD10_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD5_EXT, "GL_OUTPUT_TEXTURE_COORD5_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD29_EXT, "GL_OUTPUT_TEXTURE_COORD29_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_POINTER_EXT, "GL_VARIANT_ARRAY_POINTER_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_INSTRUCTIONS_EXT, "GL_VERTEX_SHADER_INSTRUCTIONS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_CROSS_PRODUCT_EXT, "GL_OP_CROSS_PRODUCT_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD19_EXT, "GL_OUTPUT_TEXTURE_COORD19_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD20_EXT, "GL_OUTPUT_TEXTURE_COORD20_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_VARIANTS_EXT, "GL_MAX_VERTEX_SHADER_VARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MUL_EXT, "GL_OP_MUL_EXT");
    GL_EXT_vertex_shader.put(GL_NORMALIZED_RANGE_EXT, "GL_NORMALIZED_RANGE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_LOG_BASE_2_EXT, "GL_OP_LOG_BASE_2_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD3_EXT, "GL_OUTPUT_TEXTURE_COORD3_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD30_EXT, "GL_OUTPUT_TEXTURE_COORD30_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD27_EXT, "GL_OUTPUT_TEXTURE_COORD27_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_X_EXT, "GL_NEGATIVE_X_EXT");
    GL_EXT_vertex_shader.put(GL_OP_FRAC_EXT, "GL_OP_FRAC_EXT");
    GL_EXT_vertex_shader.put(GL_X_EXT, "GL_X_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD14_EXT, "GL_OUTPUT_TEXTURE_COORD14_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD12_EXT, "GL_OUTPUT_TEXTURE_COORD12_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD25_EXT, "GL_OUTPUT_TEXTURE_COORD25_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_Z_EXT, "GL_NEGATIVE_Z_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_LOCALS_EXT, "GL_VERTEX_SHADER_LOCALS_EXT");
    GL_EXT_vertex_shader.put(GL_MVP_MATRIX_EXT, "GL_MVP_MATRIX_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_CONSTANT_VALUE_EXT, "GL_LOCAL_CONSTANT_VALUE_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD24_EXT, "GL_OUTPUT_TEXTURE_COORD24_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_LOCALS_EXT, "GL_MAX_VERTEX_SHADER_LOCALS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_NEGATE_EXT, "GL_OP_NEGATE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_RECIP_SQRT_EXT, "GL_OP_RECIP_SQRT_EXT");
    GL_EXT_vertex_shader.put(GL_OP_DOT4_EXT, "GL_OP_DOT4_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD16_EXT, "GL_OUTPUT_TEXTURE_COORD16_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_INVARIANTS_EXT, "GL_VERTEX_SHADER_INVARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_ZERO_EXT, "GL_ZERO_EXT");
    GL_EXT_vertex_shader.put(GL_INVARIANT_EXT, "GL_INVARIANT_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_CONSTANT_EXT, "GL_LOCAL_CONSTANT_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_EXT, "GL_VERTEX_SHADER_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_COLOR0_EXT, "GL_OUTPUT_COLOR0_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_TYPE_EXT, "GL_VARIANT_ARRAY_TYPE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_ROUND_EXT, "GL_OP_ROUND_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_W_EXT, "GL_NEGATIVE_W_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD2_EXT, "GL_OUTPUT_TEXTURE_COORD2_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD18_EXT, "GL_OUTPUT_TEXTURE_COORD18_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MIN_EXT, "GL_OP_MIN_EXT");
    GL_EXT_vertex_shader.put(GL_OP_SET_GE_EXT, "GL_OP_SET_GE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_SET_LT_EXT, "GL_OP_SET_LT_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD7_EXT, "GL_OUTPUT_TEXTURE_COORD7_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD9_EXT, "GL_OUTPUT_TEXTURE_COORD9_EXT");
    GL_EXT_vertex_shader.put(GL_ONE_EXT, "GL_ONE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_RECIP_EXT, "GL_OP_RECIP_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD0_EXT, "GL_OUTPUT_TEXTURE_COORD0_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD22_EXT, "GL_OUTPUT_TEXTURE_COORD22_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MAX_EXT, "GL_OP_MAX_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_VARIANTS_EXT, "GL_VERTEX_SHADER_VARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_EXT, "GL_VARIANT_EXT");
    GL_EXT_vertex_shader.put(GL_OP_ADD_EXT, "GL_OP_ADD_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_OPTIMIZED_EXT, "GL_VERTEX_SHADER_OPTIMIZED_EXT");
    GL_EXT_vertex_shader.put(GL_OP_POWER_EXT, "GL_OP_POWER_EXT");
    GL_EXT_vertex_shader.put(GL_OP_SUB_EXT, "GL_OP_SUB_EXT");
    GL_EXT_vertex_shader.put(GL_OP_CLAMP_EXT, "GL_OP_CLAMP_EXT");
    GL_EXT_vertex_shader.put(GL_CURRENT_VERTEX_EXT, "GL_CURRENT_VERTEX_EXT");
    GL_EXT_vertex_shader.put(GL_VECTOR_EXT, "GL_VECTOR_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_CONSTANT_DATATYPE_EXT, "GL_LOCAL_CONSTANT_DATATYPE_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD6_EXT, "GL_OUTPUT_TEXTURE_COORD6_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD11_EXT, "GL_OUTPUT_TEXTURE_COORD11_EXT");
    GL_EXT_vertex_shader.put(GL_OP_FLOOR_EXT, "GL_OP_FLOOR_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD28_EXT, "GL_OUTPUT_TEXTURE_COORD28_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_STRIDE_EXT, "GL_VARIANT_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_Y_EXT, "GL_NEGATIVE_Y_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_INVARIANTS_EXT, "GL_MAX_VERTEX_SHADER_INVARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_DATATYPE_EXT, "GL_VARIANT_DATATYPE_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_VALUE_EXT, "GL_VARIANT_VALUE_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD31_EXT, "GL_OUTPUT_TEXTURE_COORD31_EXT");
    GL_EXT_vertex_shader.put(GL_INVARIANT_VALUE_EXT, "GL_INVARIANT_VALUE_EXT");
    GL_EXT_vertex_shader.put(GL_Y_EXT, "GL_Y_EXT");
    GL_EXT_vertex_shader.put(GL_MATRIX_EXT, "GL_MATRIX_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD26_EXT, "GL_OUTPUT_TEXTURE_COORD26_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD13_EXT, "GL_OUTPUT_TEXTURE_COORD13_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD4_EXT, "GL_OUTPUT_TEXTURE_COORD4_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_COLOR1_EXT, "GL_OUTPUT_COLOR1_EXT");
    GL_EXT_vertex_shader.put(GL_INVARIANT_DATATYPE_EXT, "GL_INVARIANT_DATATYPE_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_BINDING_EXT, "GL_VERTEX_SHADER_BINDING_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT, "GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MULTIPLY_MATRIX_EXT, "GL_OP_MULTIPLY_MATRIX_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT, "GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT");
    GL_EXT_vertex_shader.put(GL_Z_EXT, "GL_Z_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD1_EXT, "GL_OUTPUT_TEXTURE_COORD1_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD23_EXT, "GL_OUTPUT_TEXTURE_COORD23_EXT");
    GL_EXT_vertex_shader.put(GL_OP_INDEX_EXT, "GL_OP_INDEX_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD15_EXT, "GL_OUTPUT_TEXTURE_COORD15_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_ONE_EXT, "GL_NEGATIVE_ONE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_DOT3_EXT, "GL_OP_DOT3_EXT");
    GL_EXT_vertex_shader.put(GL_W_EXT, "GL_W_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD8_EXT, "GL_OUTPUT_TEXTURE_COORD8_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD21_EXT, "GL_OUTPUT_TEXTURE_COORD21_EXT");
    GL_EXT_vertex_shader.put(GL_OP_EXP_BASE_2_EXT, "GL_OP_EXP_BASE_2_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_EXT, "GL_VARIANT_ARRAY_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_VERTEX_EXT, "GL_OUTPUT_VERTEX_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD17_EXT, "GL_OUTPUT_TEXTURE_COORD17_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_EXT, "GL_LOCAL_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_FOG_EXT, "GL_OUTPUT_FOG_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MOV_EXT, "GL_OP_MOV_EXT");
    GL_EXT_vertex_shader.put(GL_FULL_RANGE_EXT, "GL_FULL_RANGE_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT, "GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MADD_EXT, "GL_OP_MADD_EXT");
  }
  private static final Map<Integer, String> GL_NV_transform_feedback = new HashMap<Integer, String>();
  private static void GL_NV_transform_feedback() {
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV");
    GL_NV_transform_feedback.put(GL_PRIMITIVES_GENERATED_NV, "GL_PRIMITIVES_GENERATED_NV");
    GL_NV_transform_feedback.put(GL_RASTERIZER_DISCARD_NV, "GL_RASTERIZER_DISCARD_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS2_NV, "GL_SKIP_COMPONENTS2_NV");
    GL_NV_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_START_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_START_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS4_NV, "GL_SKIP_COMPONENTS4_NV");
    GL_NV_transform_feedback.put(GL_CLIP_DISTANCE_NV, "GL_CLIP_DISTANCE_NV");
    GL_NV_transform_feedback.put(GL_BACK_PRIMARY_COLOR_NV, "GL_BACK_PRIMARY_COLOR_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_RECORD_NV, "GL_TRANSFORM_FEEDBACK_RECORD_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_ATTRIBS_NV, "GL_TRANSFORM_FEEDBACK_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_VERTEX_ID_NV, "GL_VERTEX_ID_NV");
    GL_NV_transform_feedback.put(GL_INTERLEAVED_ATTRIBS_NV, "GL_INTERLEAVED_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_TEXTURE_COORD_NV, "GL_TEXTURE_COORD_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV");
    GL_NV_transform_feedback.put(GL_BACK_SECONDARY_COLOR_NV, "GL_BACK_SECONDARY_COLOR_NV");
    GL_NV_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS1_NV, "GL_SKIP_COMPONENTS1_NV");
    GL_NV_transform_feedback.put(GL_ACTIVE_VARYING_MAX_LENGTH_NV, "GL_ACTIVE_VARYING_MAX_LENGTH_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS3_NV, "GL_SKIP_COMPONENTS3_NV");
    GL_NV_transform_feedback.put(GL_SEPARATE_ATTRIBS_NV, "GL_SEPARATE_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_VARYINGS_NV, "GL_TRANSFORM_FEEDBACK_VARYINGS_NV");
    GL_NV_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV");
    GL_NV_transform_feedback.put(GL_PRIMITIVE_ID_NV, "GL_PRIMITIVE_ID_NV");
    GL_NV_transform_feedback.put(GL_NEXT_BUFFER_NV, "GL_NEXT_BUFFER_NV");
    GL_NV_transform_feedback.put(GL_LAYER_NV, "GL_LAYER_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_NV");
    GL_NV_transform_feedback.put(GL_ACTIVE_VARYINGS_NV, "GL_ACTIVE_VARYINGS_NV");
    GL_NV_transform_feedback.put(GL_GENERIC_ATTRIB_NV, "GL_GENERIC_ATTRIB_NV");
  }
  private static final Map<Integer, String> GL_ATI_text_fragment_shader = new HashMap<Integer, String>();
  private static void GL_ATI_text_fragment_shader() {
    GL_ATI_text_fragment_shader.put(GL_TEXT_FRAGMENT_SHADER_ATI, "GL_TEXT_FRAGMENT_SHADER_ATI");
  }
  private static final Map<Integer, String> GL_NV_fbo_color_attachments = new HashMap<Integer, String>();
  private static void GL_NV_fbo_color_attachments() {
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT13_NV, "GL_COLOR_ATTACHMENT13_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT9_NV, "GL_COLOR_ATTACHMENT9_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT12_NV, "GL_COLOR_ATTACHMENT12_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT10_NV, "GL_COLOR_ATTACHMENT10_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT11_NV, "GL_COLOR_ATTACHMENT11_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT14_NV, "GL_COLOR_ATTACHMENT14_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT15_NV, "GL_COLOR_ATTACHMENT15_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT4_NV, "GL_COLOR_ATTACHMENT4_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT3_NV, "GL_COLOR_ATTACHMENT3_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT1_NV, "GL_COLOR_ATTACHMENT1_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT7_NV, "GL_COLOR_ATTACHMENT7_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT2_NV, "GL_COLOR_ATTACHMENT2_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT8_NV, "GL_COLOR_ATTACHMENT8_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT5_NV, "GL_COLOR_ATTACHMENT5_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT6_NV, "GL_COLOR_ATTACHMENT6_NV");
    GL_NV_fbo_color_attachments.put(GL_COLOR_ATTACHMENT0_NV, "GL_COLOR_ATTACHMENT0_NV");
    GL_NV_fbo_color_attachments.put(GL_MAX_COLOR_ATTACHMENTS_NV, "GL_MAX_COLOR_ATTACHMENTS_NV");
  }
  private static final Map<Integer, String> GL_EXT_cmyka = new HashMap<Integer, String>();
  private static void GL_EXT_cmyka() {
    GL_EXT_cmyka.put(GL_CMYK_EXT, "GL_CMYK_EXT");
    GL_EXT_cmyka.put(GL_PACK_CMYK_HINT_EXT, "GL_PACK_CMYK_HINT_EXT");
    GL_EXT_cmyka.put(GL_UNPACK_CMYK_HINT_EXT, "GL_UNPACK_CMYK_HINT_EXT");
    GL_EXT_cmyka.put(GL_CMYKA_EXT, "GL_CMYKA_EXT");
  }
  private static final Map<Integer, String> GL_IMG_texture_filter_cubic = new HashMap<Integer, String>();
  private static void GL_IMG_texture_filter_cubic() {
    GL_IMG_texture_filter_cubic.put(GL_CUBIC_IMG, "GL_CUBIC_IMG");
    GL_IMG_texture_filter_cubic.put(GL_CUBIC_MIPMAP_LINEAR_IMG, "GL_CUBIC_MIPMAP_LINEAR_IMG");
    GL_IMG_texture_filter_cubic.put(GL_CUBIC_MIPMAP_NEAREST_IMG, "GL_CUBIC_MIPMAP_NEAREST_IMG");
  }
  private static final Map<Integer, String> GL_EXT_texture_sRGB_RG8 = new HashMap<Integer, String>();
  private static void GL_EXT_texture_sRGB_RG8() {
    GL_EXT_texture_sRGB_RG8.put(GL_SRG8_EXT, "GL_SRG8_EXT");
  }
  private static final Map<Integer, String> GL_EXT_transform_feedback = new HashMap<Integer, String>();
  private static void GL_EXT_transform_feedback() {
    GL_EXT_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT");
    GL_EXT_transform_feedback.put(GL_SEPARATE_ATTRIBS_EXT, "GL_SEPARATE_ATTRIBS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT");
    GL_EXT_transform_feedback.put(GL_INTERLEAVED_ATTRIBS_EXT, "GL_INTERLEAVED_ATTRIBS_EXT");
    GL_EXT_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_VARYINGS_EXT, "GL_TRANSFORM_FEEDBACK_VARYINGS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT");
    GL_EXT_transform_feedback.put(GL_PRIMITIVES_GENERATED_EXT, "GL_PRIMITIVES_GENERATED_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_EXT");
    GL_EXT_transform_feedback.put(GL_RASTERIZER_DISCARD_EXT, "GL_RASTERIZER_DISCARD_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT");
    GL_EXT_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT");
  }
  private static final Map<Integer, String> GL_EXT_debug_label = new HashMap<Integer, String>();
  private static void GL_EXT_debug_label() {
    GL_EXT_debug_label.put(GL_PROGRAM_PIPELINE_OBJECT_EXT, "GL_PROGRAM_PIPELINE_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_BUFFER_OBJECT_EXT, "GL_BUFFER_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_PROGRAM_OBJECT_EXT, "GL_PROGRAM_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    GL_EXT_debug_label.put(GL_VERTEX_ARRAY_OBJECT_EXT, "GL_VERTEX_ARRAY_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_SHADER_OBJECT_EXT, "GL_SHADER_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_QUERY_OBJECT_EXT, "GL_QUERY_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_SAMPLER, "GL_SAMPLER");
  }
  private static final Map<Integer, String> GL_EXT_texture_sRGB_R8 = new HashMap<Integer, String>();
  private static void GL_EXT_texture_sRGB_R8() {
    GL_EXT_texture_sRGB_R8.put(GL_SR8_EXT, "GL_SR8_EXT");
  }
  private static final Map<Integer, String> GL_ARB_vertex_type_2_10_10_10_rev = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_type_2_10_10_10_rev() {
    GL_ARB_vertex_type_2_10_10_10_rev.put(GL_INT_2_10_10_10_REV, "GL_INT_2_10_10_10_REV");
    GL_ARB_vertex_type_2_10_10_10_rev.put(GL_UNSIGNED_INT_2_10_10_10_REV, "GL_UNSIGNED_INT_2_10_10_10_REV");
  }
  private static final Map<Integer, String> GL_EXT_framebuffer_sRGB = new HashMap<Integer, String>();
  private static void GL_EXT_framebuffer_sRGB() {
    GL_EXT_framebuffer_sRGB.put(GL_FRAMEBUFFER_SRGB_EXT, "GL_FRAMEBUFFER_SRGB_EXT");
    GL_EXT_framebuffer_sRGB.put(GL_FRAMEBUFFER_SRGB_CAPABLE_EXT, "GL_FRAMEBUFFER_SRGB_CAPABLE_EXT");
  }
  private static final Map<Integer, String> GL_NV_draw_buffers = new HashMap<Integer, String>();
  private static void GL_NV_draw_buffers() {
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT9_NV, "GL_COLOR_ATTACHMENT9_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT12_NV, "GL_COLOR_ATTACHMENT12_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT10_NV, "GL_COLOR_ATTACHMENT10_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT14_NV, "GL_COLOR_ATTACHMENT14_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT3_NV, "GL_COLOR_ATTACHMENT3_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT1_NV, "GL_COLOR_ATTACHMENT1_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT7_NV, "GL_COLOR_ATTACHMENT7_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER10_NV, "GL_DRAW_BUFFER10_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER12_NV, "GL_DRAW_BUFFER12_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER14_NV, "GL_DRAW_BUFFER14_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT5_NV, "GL_COLOR_ATTACHMENT5_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER2_NV, "GL_DRAW_BUFFER2_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER8_NV, "GL_DRAW_BUFFER8_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER6_NV, "GL_DRAW_BUFFER6_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER4_NV, "GL_DRAW_BUFFER4_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER0_NV, "GL_DRAW_BUFFER0_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT13_NV, "GL_COLOR_ATTACHMENT13_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT11_NV, "GL_COLOR_ATTACHMENT11_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT15_NV, "GL_COLOR_ATTACHMENT15_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER13_NV, "GL_DRAW_BUFFER13_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT4_NV, "GL_COLOR_ATTACHMENT4_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER9_NV, "GL_DRAW_BUFFER9_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER11_NV, "GL_DRAW_BUFFER11_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT2_NV, "GL_COLOR_ATTACHMENT2_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT8_NV, "GL_COLOR_ATTACHMENT8_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER15_NV, "GL_DRAW_BUFFER15_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT6_NV, "GL_COLOR_ATTACHMENT6_NV");
    GL_NV_draw_buffers.put(GL_MAX_DRAW_BUFFERS_NV, "GL_MAX_DRAW_BUFFERS_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER5_NV, "GL_DRAW_BUFFER5_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT0_NV, "GL_COLOR_ATTACHMENT0_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER1_NV, "GL_DRAW_BUFFER1_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER7_NV, "GL_DRAW_BUFFER7_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER3_NV, "GL_DRAW_BUFFER3_NV");
  }
  private static final Map<Integer, String> GL_ARB_half_float_vertex = new HashMap<Integer, String>();
  private static void GL_ARB_half_float_vertex() {
    GL_ARB_half_float_vertex.put(GL_HALF_FLOAT, "GL_HALF_FLOAT");
  }
  private static final Map<Integer, String> GL_EXT_bgra = new HashMap<Integer, String>();
  private static void GL_EXT_bgra() {
    GL_EXT_bgra.put(GL_BGRA_EXT, "GL_BGRA_EXT");
    GL_EXT_bgra.put(GL_BGR_EXT, "GL_BGR_EXT");
  }
  private static final Map<Integer, String> GL_NV_clip_space_w_scaling = new HashMap<Integer, String>();
  private static void GL_NV_clip_space_w_scaling() {
    GL_NV_clip_space_w_scaling.put(GL_VIEWPORT_POSITION_W_SCALE_NV, "GL_VIEWPORT_POSITION_W_SCALE_NV");
    GL_NV_clip_space_w_scaling.put(GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV, "GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV");
    GL_NV_clip_space_w_scaling.put(GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV, "GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV");
  }
  private static final Map<Integer, String> GL_PGI_vertex_hints = new HashMap<Integer, String>();
  private static void GL_PGI_vertex_hints() {
    GL_PGI_vertex_hints.put(GL_TEXCOORD2_BIT_PGI, "GL_TEXCOORD2_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI, "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_VERTEX4_BIT_PGI, "GL_VERTEX4_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_EDGEFLAG_BIT_PGI, "GL_EDGEFLAG_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_TEXCOORD3_BIT_PGI, "GL_TEXCOORD3_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_INDEX_BIT_PGI, "GL_INDEX_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_SPECULAR_BIT_PGI, "GL_MAT_SPECULAR_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAX_VERTEX_HINT_PGI, "GL_MAX_VERTEX_HINT_PGI");
    GL_PGI_vertex_hints.put(GL_VERTEX23_BIT_PGI, "GL_VERTEX23_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_VERTEX_DATA_HINT_PGI, "GL_VERTEX_DATA_HINT_PGI");
    GL_PGI_vertex_hints.put(GL_NORMAL_BIT_PGI, "GL_NORMAL_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_TEXCOORD1_BIT_PGI, "GL_TEXCOORD1_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MATERIAL_SIDE_HINT_PGI, "GL_MATERIAL_SIDE_HINT_PGI");
    GL_PGI_vertex_hints.put(GL_VERTEX_CONSISTENT_HINT_PGI, "GL_VERTEX_CONSISTENT_HINT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_AMBIENT_BIT_PGI, "GL_MAT_AMBIENT_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_EMISSION_BIT_PGI, "GL_MAT_EMISSION_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_DIFFUSE_BIT_PGI, "GL_MAT_DIFFUSE_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_COLOR3_BIT_PGI, "GL_COLOR3_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_TEXCOORD4_BIT_PGI, "GL_TEXCOORD4_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_COLOR_INDEXES_BIT_PGI, "GL_MAT_COLOR_INDEXES_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_MAT_SHININESS_BIT_PGI, "GL_MAT_SHININESS_BIT_PGI");
    GL_PGI_vertex_hints.put(GL_COLOR4_BIT_PGI, "GL_COLOR4_BIT_PGI");
  }
  private static final Map<Integer, String> GL_EXT_blend_color = new HashMap<Integer, String>();
  private static void GL_EXT_blend_color() {
    GL_EXT_blend_color.put(GL_BLEND_COLOR_EXT, "GL_BLEND_COLOR_EXT");
    GL_EXT_blend_color.put(GL_CONSTANT_COLOR_EXT, "GL_CONSTANT_COLOR_EXT");
    GL_EXT_blend_color.put(GL_ONE_MINUS_CONSTANT_COLOR_EXT, "GL_ONE_MINUS_CONSTANT_COLOR_EXT");
    GL_EXT_blend_color.put(GL_ONE_MINUS_CONSTANT_ALPHA_EXT, "GL_ONE_MINUS_CONSTANT_ALPHA_EXT");
    GL_EXT_blend_color.put(GL_CONSTANT_ALPHA_EXT, "GL_CONSTANT_ALPHA_EXT");
  }
  private static final Map<Integer, String> GL_EXT_draw_buffers = new HashMap<Integer, String>();
  private static void GL_EXT_draw_buffers() {
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER0_EXT, "GL_DRAW_BUFFER0_EXT");
    GL_EXT_draw_buffers.put(GL_MAX_COLOR_ATTACHMENTS_EXT, "GL_MAX_COLOR_ATTACHMENTS_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT5_EXT, "GL_COLOR_ATTACHMENT5_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT10_EXT, "GL_COLOR_ATTACHMENT10_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER9_EXT, "GL_DRAW_BUFFER9_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT14_EXT, "GL_COLOR_ATTACHMENT14_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT0_EXT, "GL_COLOR_ATTACHMENT0_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER12_EXT, "GL_DRAW_BUFFER12_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER1_EXT, "GL_DRAW_BUFFER1_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER5_EXT, "GL_DRAW_BUFFER5_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER13_EXT, "GL_DRAW_BUFFER13_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT7_EXT, "GL_COLOR_ATTACHMENT7_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT4_EXT, "GL_COLOR_ATTACHMENT4_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER8_EXT, "GL_DRAW_BUFFER8_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT13_EXT, "GL_COLOR_ATTACHMENT13_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER4_EXT, "GL_DRAW_BUFFER4_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT3_EXT, "GL_COLOR_ATTACHMENT3_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER14_EXT, "GL_DRAW_BUFFER14_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT8_EXT, "GL_COLOR_ATTACHMENT8_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT12_EXT, "GL_COLOR_ATTACHMENT12_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER7_EXT, "GL_DRAW_BUFFER7_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER10_EXT, "GL_DRAW_BUFFER10_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER3_EXT, "GL_DRAW_BUFFER3_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER6_EXT, "GL_DRAW_BUFFER6_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT11_EXT, "GL_COLOR_ATTACHMENT11_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT9_EXT, "GL_COLOR_ATTACHMENT9_EXT");
    GL_EXT_draw_buffers.put(GL_MAX_DRAW_BUFFERS_EXT, "GL_MAX_DRAW_BUFFERS_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER15_EXT, "GL_DRAW_BUFFER15_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT2_EXT, "GL_COLOR_ATTACHMENT2_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER11_EXT, "GL_DRAW_BUFFER11_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT6_EXT, "GL_COLOR_ATTACHMENT6_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT1_EXT, "GL_COLOR_ATTACHMENT1_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT15_EXT, "GL_COLOR_ATTACHMENT15_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER2_EXT, "GL_DRAW_BUFFER2_EXT");
  }
  private static final Map<Integer, String> GL_INTEL_map_texture = new HashMap<Integer, String>();
  private static void GL_INTEL_map_texture() {
    GL_INTEL_map_texture.put(GL_LAYOUT_LINEAR_CPU_CACHED_INTEL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL");
    GL_INTEL_map_texture.put(GL_LAYOUT_LINEAR_INTEL, "GL_LAYOUT_LINEAR_INTEL");
    GL_INTEL_map_texture.put(GL_TEXTURE_MEMORY_LAYOUT_INTEL, "GL_TEXTURE_MEMORY_LAYOUT_INTEL");
    GL_INTEL_map_texture.put(GL_LAYOUT_DEFAULT_INTEL, "GL_LAYOUT_DEFAULT_INTEL");
  }
  private static final Map<Integer, String> GL_ARB_provoking_vertex = new HashMap<Integer, String>();
  private static void GL_ARB_provoking_vertex() {
    GL_ARB_provoking_vertex.put(GL_PROVOKING_VERTEX, "GL_PROVOKING_VERTEX");
    GL_ARB_provoking_vertex.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    GL_ARB_provoking_vertex.put(GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION");
    GL_ARB_provoking_vertex.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
  }
  private static final Map<Integer, String> GL_EXT_unpack_subimage = new HashMap<Integer, String>();
  private static void GL_EXT_unpack_subimage() {
    GL_EXT_unpack_subimage.put(GL_UNPACK_SKIP_ROWS_EXT, "GL_UNPACK_SKIP_ROWS_EXT");
    GL_EXT_unpack_subimage.put(GL_UNPACK_SKIP_PIXELS_EXT, "GL_UNPACK_SKIP_PIXELS_EXT");
    GL_EXT_unpack_subimage.put(GL_UNPACK_ROW_LENGTH_EXT, "GL_UNPACK_ROW_LENGTH_EXT");
  }
  private static final Map<Integer, String> GL_ARB_texture_storage = new HashMap<Integer, String>();
  private static void GL_ARB_texture_storage() {
    GL_ARB_texture_storage.put(GL_TEXTURE_IMMUTABLE_FORMAT, "GL_TEXTURE_IMMUTABLE_FORMAT");
  }
  private static final Map<Integer, String> GL_OML_interlace = new HashMap<Integer, String>();
  private static void GL_OML_interlace() {
    GL_OML_interlace.put(GL_INTERLACE_READ_OML, "GL_INTERLACE_READ_OML");
    GL_OML_interlace.put(GL_INTERLACE_OML, "GL_INTERLACE_OML");
  }
  private static final Map<Integer, String> GL_EXT_map_buffer_range = new HashMap<Integer, String>();
  private static void GL_EXT_map_buffer_range() {
    GL_EXT_map_buffer_range.put(GL_MAP_WRITE_BIT_EXT, "GL_MAP_WRITE_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_INVALIDATE_BUFFER_BIT_EXT, "GL_MAP_INVALIDATE_BUFFER_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_INVALIDATE_RANGE_BIT_EXT, "GL_MAP_INVALIDATE_RANGE_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_FLUSH_EXPLICIT_BIT_EXT, "GL_MAP_FLUSH_EXPLICIT_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_UNSYNCHRONIZED_BIT_EXT, "GL_MAP_UNSYNCHRONIZED_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_READ_BIT_EXT, "GL_MAP_READ_BIT_EXT");
  }
  private static final Map<Integer, String> GL_ANGLE_program_binary = new HashMap<Integer, String>();
  private static void GL_ANGLE_program_binary() {
    GL_ANGLE_program_binary.put(GL_PROGRAM_BINARY_ANGLE, "GL_PROGRAM_BINARY_ANGLE");
  }
  private static final Map<Integer, String> GL_ARB_shading_language_100 = new HashMap<Integer, String>();
  private static void GL_ARB_shading_language_100() {
    GL_ARB_shading_language_100.put(GL_SHADING_LANGUAGE_VERSION_ARB, "GL_SHADING_LANGUAGE_VERSION_ARB");
  }
  private static final Map<Integer, String> GL_ANGLE_depth_texture = new HashMap<Integer, String>();
  private static void GL_ANGLE_depth_texture() {
    GL_ANGLE_depth_texture.put(GL_DEPTH_STENCIL_OES, "GL_DEPTH_STENCIL_OES");
    GL_ANGLE_depth_texture.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    GL_ANGLE_depth_texture.put(GL_DEPTH_COMPONENT16, "GL_DEPTH_COMPONENT16");
    GL_ANGLE_depth_texture.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    GL_ANGLE_depth_texture.put(GL_DEPTH_COMPONENT32_OES, "GL_DEPTH_COMPONENT32_OES");
    GL_ANGLE_depth_texture.put(GL_DEPTH24_STENCIL8_OES, "GL_DEPTH24_STENCIL8_OES");
    GL_ANGLE_depth_texture.put(GL_UNSIGNED_INT_24_8_OES, "GL_UNSIGNED_INT_24_8_OES");
    GL_ANGLE_depth_texture.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  private static final Map<Integer, String> GL_NV_texture_env_combine4 = new HashMap<Integer, String>();
  private static void GL_NV_texture_env_combine4() {
    GL_NV_texture_env_combine4.put(GL_SOURCE3_ALPHA_NV, "GL_SOURCE3_ALPHA_NV");
    GL_NV_texture_env_combine4.put(GL_OPERAND3_RGB_NV, "GL_OPERAND3_RGB_NV");
    GL_NV_texture_env_combine4.put(GL_OPERAND3_ALPHA_NV, "GL_OPERAND3_ALPHA_NV");
    GL_NV_texture_env_combine4.put(GL_COMBINE4_NV, "GL_COMBINE4_NV");
    GL_NV_texture_env_combine4.put(GL_SOURCE3_RGB_NV, "GL_SOURCE3_RGB_NV");
  }
  private static final Map<Integer, String> GL_ARB_compressed_texture_pixel_storage = new HashMap<Integer, String>();
  private static void GL_ARB_compressed_texture_pixel_storage() {
    GL_ARB_compressed_texture_pixel_storage.put(GL_UNPACK_COMPRESSED_BLOCK_WIDTH, "GL_UNPACK_COMPRESSED_BLOCK_WIDTH");
    GL_ARB_compressed_texture_pixel_storage.put(GL_UNPACK_COMPRESSED_BLOCK_HEIGHT, "GL_UNPACK_COMPRESSED_BLOCK_HEIGHT");
    GL_ARB_compressed_texture_pixel_storage.put(GL_PACK_COMPRESSED_BLOCK_WIDTH, "GL_PACK_COMPRESSED_BLOCK_WIDTH");
    GL_ARB_compressed_texture_pixel_storage.put(GL_UNPACK_COMPRESSED_BLOCK_DEPTH, "GL_UNPACK_COMPRESSED_BLOCK_DEPTH");
    GL_ARB_compressed_texture_pixel_storage.put(GL_PACK_COMPRESSED_BLOCK_HEIGHT, "GL_PACK_COMPRESSED_BLOCK_HEIGHT");
    GL_ARB_compressed_texture_pixel_storage.put(GL_PACK_COMPRESSED_BLOCK_DEPTH, "GL_PACK_COMPRESSED_BLOCK_DEPTH");
    GL_ARB_compressed_texture_pixel_storage.put(GL_PACK_COMPRESSED_BLOCK_SIZE, "GL_PACK_COMPRESSED_BLOCK_SIZE");
    GL_ARB_compressed_texture_pixel_storage.put(GL_UNPACK_COMPRESSED_BLOCK_SIZE, "GL_UNPACK_COMPRESSED_BLOCK_SIZE");
  }
  private static final Map<Integer, String> GL_OES_texture_cube_map_array = new HashMap<Integer, String>();
  private static void GL_OES_texture_cube_map_array() {
    GL_OES_texture_cube_map_array.put(GL_TEXTURE_CUBE_MAP_ARRAY_OES, "GL_TEXTURE_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_IMAGE_CUBE_MAP_ARRAY_OES, "GL_IMAGE_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_SAMPLER_CUBE_MAP_ARRAY_OES, "GL_SAMPLER_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_INT_IMAGE_CUBE_MAP_ARRAY_OES, "GL_INT_IMAGE_CUBE_MAP_ARRAY_OES");
    GL_OES_texture_cube_map_array.put(GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES");
    GL_OES_texture_cube_map_array.put(GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES, "GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES");
  }
  private static final Map<Integer, String> GL_WIN_specular_fog = new HashMap<Integer, String>();
  private static void GL_WIN_specular_fog() {
    GL_WIN_specular_fog.put(GL_FOG_SPECULAR_TEXTURE_WIN, "GL_FOG_SPECULAR_TEXTURE_WIN");
  }
  private static final Map<Integer, String> GL_ARB_framebuffer_no_attachments = new HashMap<Integer, String>();
  private static void GL_ARB_framebuffer_no_attachments() {
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_WIDTH, "GL_FRAMEBUFFER_DEFAULT_WIDTH");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_HEIGHT, "GL_FRAMEBUFFER_DEFAULT_HEIGHT");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_WIDTH, "GL_MAX_FRAMEBUFFER_WIDTH");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_HEIGHT, "GL_MAX_FRAMEBUFFER_HEIGHT");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_LAYERS, "GL_MAX_FRAMEBUFFER_LAYERS");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_LAYERS, "GL_FRAMEBUFFER_DEFAULT_LAYERS");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_SAMPLES, "GL_FRAMEBUFFER_DEFAULT_SAMPLES");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_SAMPLES, "GL_MAX_FRAMEBUFFER_SAMPLES");
  }
  private static final Map<Integer, String> GL_EXT_fog_coord = new HashMap<Integer, String>();
  private static void GL_EXT_fog_coord() {
    GL_EXT_fog_coord.put(GL_FRAGMENT_DEPTH_EXT, "GL_FRAGMENT_DEPTH_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_TYPE_EXT, "GL_FOG_COORDINATE_ARRAY_TYPE_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_STRIDE_EXT, "GL_FOG_COORDINATE_ARRAY_STRIDE_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_EXT, "GL_FOG_COORDINATE_EXT");
    GL_EXT_fog_coord.put(GL_CURRENT_FOG_COORDINATE_EXT, "GL_CURRENT_FOG_COORDINATE_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_POINTER_EXT, "GL_FOG_COORDINATE_ARRAY_POINTER_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_EXT, "GL_FOG_COORDINATE_ARRAY_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_SOURCE_EXT, "GL_FOG_COORDINATE_SOURCE_EXT");
  }
  private static final Map<Integer, String> GL_OES_get_program_binary = new HashMap<Integer, String>();
  private static void GL_OES_get_program_binary() {
    GL_OES_get_program_binary.put(GL_PROGRAM_BINARY_LENGTH_OES, "GL_PROGRAM_BINARY_LENGTH_OES");
    GL_OES_get_program_binary.put(GL_NUM_PROGRAM_BINARY_FORMATS_OES, "GL_NUM_PROGRAM_BINARY_FORMATS_OES");
    GL_OES_get_program_binary.put(GL_PROGRAM_BINARY_FORMATS_OES, "GL_PROGRAM_BINARY_FORMATS_OES");
  }
  private static final Map<Integer, String> GL_QCOM_alpha_test = new HashMap<Integer, String>();
  private static void GL_QCOM_alpha_test() {
    GL_QCOM_alpha_test.put(GL_ALPHA_TEST_FUNC_QCOM, "GL_ALPHA_TEST_FUNC_QCOM");
    GL_QCOM_alpha_test.put(GL_ALPHA_TEST_QCOM, "GL_ALPHA_TEST_QCOM");
    GL_QCOM_alpha_test.put(GL_ALPHA_TEST_REF_QCOM, "GL_ALPHA_TEST_REF_QCOM");
  }
  private static final Map<Integer, String> GL_SUN_convolution_border_modes = new HashMap<Integer, String>();
  private static void GL_SUN_convolution_border_modes() {
    GL_SUN_convolution_border_modes.put(GL_WRAP_BORDER_SUN, "GL_WRAP_BORDER_SUN");
  }
  private static final Map<Integer, String> GL_NV_alpha_to_coverage_dither_control = new HashMap<Integer, String>();
  private static void GL_NV_alpha_to_coverage_dither_control() {
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV, "GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV");
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV, "GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV");
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV, "GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV");
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV, "GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV");
  }
  private static final Map<Integer, String> GL_NV_present_video = new HashMap<Integer, String>();
  private static void GL_NV_present_video() {
    GL_NV_present_video.put(GL_PRESENT_TIME_NV, "GL_PRESENT_TIME_NV");
    GL_NV_present_video.put(GL_CURRENT_TIME_NV, "GL_CURRENT_TIME_NV");
    GL_NV_present_video.put(GL_PRESENT_DURATION_NV, "GL_PRESENT_DURATION_NV");
    GL_NV_present_video.put(GL_NUM_FILL_STREAMS_NV, "GL_NUM_FILL_STREAMS_NV");
    GL_NV_present_video.put(GL_FRAME_NV, "GL_FRAME_NV");
    GL_NV_present_video.put(GL_FIELDS_NV, "GL_FIELDS_NV");
  }
  private static final Map<Integer, String> GL_ARB_texture_rectangle = new HashMap<Integer, String>();
  private static void GL_ARB_texture_rectangle() {
    GL_ARB_texture_rectangle.put(GL_TEXTURE_BINDING_RECTANGLE_ARB, "GL_TEXTURE_BINDING_RECTANGLE_ARB");
    GL_ARB_texture_rectangle.put(GL_TEXTURE_RECTANGLE_ARB, "GL_TEXTURE_RECTANGLE_ARB");
    GL_ARB_texture_rectangle.put(GL_PROXY_TEXTURE_RECTANGLE_ARB, "GL_PROXY_TEXTURE_RECTANGLE_ARB");
    GL_ARB_texture_rectangle.put(GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB, "GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB");
  }
  private static final Map<Integer, String> GL_ARB_shadow_ambient = new HashMap<Integer, String>();
  private static void GL_ARB_shadow_ambient() {
    GL_ARB_shadow_ambient.put(GL_TEXTURE_COMPARE_FAIL_VALUE_ARB, "GL_TEXTURE_COMPARE_FAIL_VALUE_ARB");
  }
  private static final Map<Integer, String> GL_EXT_blend_subtract = new HashMap<Integer, String>();
  private static void GL_EXT_blend_subtract() {
    GL_EXT_blend_subtract.put(GL_FUNC_SUBTRACT_EXT, "GL_FUNC_SUBTRACT_EXT");
    GL_EXT_blend_subtract.put(GL_FUNC_REVERSE_SUBTRACT_EXT, "GL_FUNC_REVERSE_SUBTRACT_EXT");
  }
  private static final Map<Integer, String> GL_NV_fill_rectangle = new HashMap<Integer, String>();
  private static void GL_NV_fill_rectangle() {
    GL_NV_fill_rectangle.put(GL_FILL_RECTANGLE_NV, "GL_FILL_RECTANGLE_NV");
  }
  private static final Map<Integer, String> GL_ARB_seamless_cubemap_per_texture = new HashMap<Integer, String>();
  private static void GL_ARB_seamless_cubemap_per_texture() {
    GL_ARB_seamless_cubemap_per_texture.put(GL_TEXTURE_CUBE_MAP_SEAMLESS, "GL_TEXTURE_CUBE_MAP_SEAMLESS");
  }
  private static final Map<Integer, String> GL_SGIS_detail_texture = new HashMap<Integer, String>();
  private static void GL_SGIS_detail_texture() {
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    GL_SGIS_detail_texture.put(GL_LINEAR_DETAIL_SGIS, "GL_LINEAR_DETAIL_SGIS");
    GL_SGIS_detail_texture.put(GL_LINEAR_DETAIL_COLOR_SGIS, "GL_LINEAR_DETAIL_COLOR_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    GL_SGIS_detail_texture.put(GL_LINEAR_DETAIL_ALPHA_SGIS, "GL_LINEAR_DETAIL_ALPHA_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_2D_BINDING_SGIS, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_2D_SGIS, "GL_DETAIL_TEXTURE_2D_SGIS");
  }
  private static final Map<Integer, String> GL_EXT_framebuffer_multisample = new HashMap<Integer, String>();
  private static void GL_EXT_framebuffer_multisample() {
    GL_EXT_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT");
    GL_EXT_framebuffer_multisample.put(GL_MAX_SAMPLES_EXT, "GL_MAX_SAMPLES_EXT");
    GL_EXT_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_EXT, "GL_RENDERBUFFER_SAMPLES_EXT");
  }
  private static final Map<Integer, String> GL_NV_framebuffer_blit = new HashMap<Integer, String>();
  private static void GL_NV_framebuffer_blit() {
    GL_NV_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_NV, "GL_DRAW_FRAMEBUFFER_NV");
    GL_NV_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_BINDING_NV, "GL_DRAW_FRAMEBUFFER_BINDING_NV");
    GL_NV_framebuffer_blit.put(GL_READ_FRAMEBUFFER_NV, "GL_READ_FRAMEBUFFER_NV");
    GL_NV_framebuffer_blit.put(GL_READ_FRAMEBUFFER_BINDING_NV, "GL_READ_FRAMEBUFFER_BINDING_NV");
  }
  private static final Map<Integer, String> GL_NV_framebuffer_multisample = new HashMap<Integer, String>();
  private static void GL_NV_framebuffer_multisample() {
    GL_NV_framebuffer_multisample.put(GL_MAX_SAMPLES_NV, "GL_MAX_SAMPLES_NV");
    GL_NV_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV");
    GL_NV_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_NV, "GL_RENDERBUFFER_SAMPLES_NV");
  }
  private static final Map<Integer, String> GL_APPLE_texture_range = new HashMap<Integer, String>();
  private static void GL_APPLE_texture_range() {
    GL_APPLE_texture_range.put(GL_TEXTURE_RANGE_POINTER_APPLE, "GL_TEXTURE_RANGE_POINTER_APPLE");
    GL_APPLE_texture_range.put(GL_TEXTURE_RANGE_LENGTH_APPLE, "GL_TEXTURE_RANGE_LENGTH_APPLE");
    GL_APPLE_texture_range.put(GL_STORAGE_PRIVATE_APPLE, "GL_STORAGE_PRIVATE_APPLE");
    GL_APPLE_texture_range.put(GL_TEXTURE_STORAGE_HINT_APPLE, "GL_TEXTURE_STORAGE_HINT_APPLE");
    GL_APPLE_texture_range.put(GL_STORAGE_SHARED_APPLE, "GL_STORAGE_SHARED_APPLE");
    GL_APPLE_texture_range.put(GL_STORAGE_CACHED_APPLE, "GL_STORAGE_CACHED_APPLE");
  }
  private static final Map<Integer, String> GL_NV_explicit_multisample = new HashMap<Integer, String>();
  private static void GL_NV_explicit_multisample() {
    GL_NV_explicit_multisample.put(GL_MAX_SAMPLE_MASK_WORDS_NV, "GL_MAX_SAMPLE_MASK_WORDS_NV");
    GL_NV_explicit_multisample.put(GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV, "GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV");
    GL_NV_explicit_multisample.put(GL_TEXTURE_RENDERBUFFER_NV, "GL_TEXTURE_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV, "GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_TEXTURE_BINDING_RENDERBUFFER_NV, "GL_TEXTURE_BINDING_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_INT_SAMPLER_RENDERBUFFER_NV, "GL_INT_SAMPLER_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLER_RENDERBUFFER_NV, "GL_SAMPLER_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLE_MASK_NV, "GL_SAMPLE_MASK_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLE_POSITION_NV, "GL_SAMPLE_POSITION_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLE_MASK_VALUE_NV, "GL_SAMPLE_MASK_VALUE_NV");
  }
  private static final Map<Integer, String> GL_ARB_fragment_shader = new HashMap<Integer, String>();
  private static void GL_ARB_fragment_shader() {
    GL_ARB_fragment_shader.put(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB");
    GL_ARB_fragment_shader.put(GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB");
    GL_ARB_fragment_shader.put(GL_FRAGMENT_SHADER_ARB, "GL_FRAGMENT_SHADER_ARB");
  }
  private static final Map<Integer, String> GL_ARB_texture_cube_map = new HashMap<Integer, String>();
  private static void GL_ARB_texture_cube_map() {
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB");
    GL_ARB_texture_cube_map.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_BINDING_CUBE_MAP_ARB, "GL_TEXTURE_BINDING_CUBE_MAP_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB");
    GL_ARB_texture_cube_map.put(GL_REFLECTION_MAP_ARB, "GL_REFLECTION_MAP_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_ARB, "GL_TEXTURE_CUBE_MAP_ARB");
    GL_ARB_texture_cube_map.put(GL_PROXY_TEXTURE_CUBE_MAP_ARB, "GL_PROXY_TEXTURE_CUBE_MAP_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB");
    GL_ARB_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB");
    GL_ARB_texture_cube_map.put(GL_NORMAL_MAP_ARB, "GL_NORMAL_MAP_ARB");
  }
  private static final Map<Integer, String> GL_OES_framebuffer_object = new HashMap<Integer, String>();
  private static void GL_OES_framebuffer_object() {
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_BINDING_OES, "GL_RENDERBUFFER_BINDING_OES");
    GL_OES_framebuffer_object.put(GL_MAX_RENDERBUFFER_SIZE_OES, "GL_MAX_RENDERBUFFER_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_COLOR_ATTACHMENT0_OES, "GL_COLOR_ATTACHMENT0_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES");
    GL_OES_framebuffer_object.put(GL_NONE_OES, "GL_NONE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_STENCIL_SIZE_OES, "GL_RENDERBUFFER_STENCIL_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_UNSUPPORTED_OES, "GL_FRAMEBUFFER_UNSUPPORTED_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_RED_SIZE_OES, "GL_RENDERBUFFER_RED_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_INVALID_FRAMEBUFFER_OPERATION_OES, "GL_INVALID_FRAMEBUFFER_OPERATION_OES");
    GL_OES_framebuffer_object.put(GL_RGB565_OES, "GL_RGB565_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_GREEN_SIZE_OES, "GL_RENDERBUFFER_GREEN_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_COMPLETE_OES, "GL_FRAMEBUFFER_COMPLETE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES");
    GL_OES_framebuffer_object.put(GL_RGB5_A1_OES, "GL_RGB5_A1_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_INTERNAL_FORMAT_OES, "GL_RENDERBUFFER_INTERNAL_FORMAT_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_WIDTH_OES, "GL_RENDERBUFFER_WIDTH_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_ALPHA_SIZE_OES, "GL_RENDERBUFFER_ALPHA_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_DEPTH_SIZE_OES, "GL_RENDERBUFFER_DEPTH_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_BINDING_OES, "GL_FRAMEBUFFER_BINDING_OES");
    GL_OES_framebuffer_object.put(GL_DEPTH_COMPONENT16_OES, "GL_DEPTH_COMPONENT16_OES");
    GL_OES_framebuffer_object.put(GL_DEPTH_ATTACHMENT_OES, "GL_DEPTH_ATTACHMENT_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_HEIGHT_OES, "GL_RENDERBUFFER_HEIGHT_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_OES, "GL_FRAMEBUFFER_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_BLUE_SIZE_OES, "GL_RENDERBUFFER_BLUE_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_OES, "GL_RENDERBUFFER_OES");
    GL_OES_framebuffer_object.put(GL_RGBA4_OES, "GL_RGBA4_OES");
    GL_OES_framebuffer_object.put(GL_STENCIL_ATTACHMENT_OES, "GL_STENCIL_ATTACHMENT_OES");
  }
  private static final Map<Integer, String> GL_EXT_texture_cube_map = new HashMap<Integer, String>();
  private static void GL_EXT_texture_cube_map() {
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT");
    GL_EXT_texture_cube_map.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_BINDING_CUBE_MAP_EXT, "GL_TEXTURE_BINDING_CUBE_MAP_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT");
    GL_EXT_texture_cube_map.put(GL_REFLECTION_MAP_EXT, "GL_REFLECTION_MAP_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_EXT, "GL_TEXTURE_CUBE_MAP_EXT");
    GL_EXT_texture_cube_map.put(GL_PROXY_TEXTURE_CUBE_MAP_EXT, "GL_PROXY_TEXTURE_CUBE_MAP_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT");
    GL_EXT_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT");
    GL_EXT_texture_cube_map.put(GL_NORMAL_MAP_EXT, "GL_NORMAL_MAP_EXT");
  }
  private static final Map<Integer, String> GL_ARB_get_program_binary = new HashMap<Integer, String>();
  private static void GL_ARB_get_program_binary() {
    GL_ARB_get_program_binary.put(GL_PROGRAM_BINARY_LENGTH, "GL_PROGRAM_BINARY_LENGTH");
    GL_ARB_get_program_binary.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
    GL_ARB_get_program_binary.put(GL_NUM_PROGRAM_BINARY_FORMATS, "GL_NUM_PROGRAM_BINARY_FORMATS");
    GL_ARB_get_program_binary.put(GL_PROGRAM_BINARY_FORMATS, "GL_PROGRAM_BINARY_FORMATS");
  }
  private static final Map<Integer, String> GL_EXT_shader_image_load_store = new HashMap<Integer, String>();
  private static void GL_EXT_shader_image_load_store() {
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE_EXT, "GL_INT_IMAGE_2D_MULTISAMPLE_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_BUFFER_EXT, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_3D_EXT, "GL_UNSIGNED_INT_IMAGE_3D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_FORMAT_EXT, "GL_IMAGE_BINDING_FORMAT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT, "GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BUFFER_EXT, "GL_IMAGE_BUFFER_EXT");
    GL_EXT_shader_image_load_store.put(GL_COMMAND_BARRIER_BIT_EXT, "GL_COMMAND_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_ALL_BARRIER_BITS_EXT, "GL_ALL_BARRIER_BITS_EXT");
    GL_EXT_shader_image_load_store.put(GL_MAX_IMAGE_UNITS_EXT, "GL_MAX_IMAGE_UNITS_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_LAYER_EXT, "GL_IMAGE_BINDING_LAYER_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_EXT, "GL_UNSIGNED_INT_IMAGE_2D_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_ARRAY_EXT, "GL_INT_IMAGE_2D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_1D_EXT, "GL_IMAGE_1D_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT, "GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT");
    GL_EXT_shader_image_load_store.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_CUBE_EXT, "GL_IMAGE_CUBE_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_3D_EXT, "GL_IMAGE_3D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE_EXT, "GL_IMAGE_2D_MULTISAMPLE_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_CUBE_EXT, "GL_INT_IMAGE_CUBE_EXT");
    GL_EXT_shader_image_load_store.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_1D_EXT, "GL_INT_IMAGE_1D_EXT");
    GL_EXT_shader_image_load_store.put(GL_ELEMENT_ARRAY_BARRIER_BIT_EXT, "GL_ELEMENT_ARRAY_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_NAME_EXT, "GL_IMAGE_BINDING_NAME_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT");
    GL_EXT_shader_image_load_store.put(GL_TEXTURE_UPDATE_BARRIER_BIT_EXT, "GL_TEXTURE_UPDATE_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_EXT, "GL_INT_IMAGE_2D_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_RECT_EXT, "GL_INT_IMAGE_2D_RECT_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE_EXT, "GL_UNSIGNED_INT_IMAGE_CUBE_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNIFORM_BARRIER_BIT_EXT, "GL_UNIFORM_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_FRAMEBUFFER_BARRIER_BIT_EXT, "GL_FRAMEBUFFER_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_RECT_EXT, "GL_IMAGE_2D_RECT_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_3D_EXT, "GL_INT_IMAGE_3D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_LAYERED_EXT, "GL_IMAGE_BINDING_LAYERED_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_BUFFER_EXT, "GL_INT_IMAGE_BUFFER_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_ACCESS_EXT, "GL_IMAGE_BINDING_ACCESS_EXT");
    GL_EXT_shader_image_load_store.put(GL_BUFFER_UPDATE_BARRIER_BIT_EXT, "GL_BUFFER_UPDATE_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_MAX_IMAGE_SAMPLES_EXT, "GL_MAX_IMAGE_SAMPLES_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_1D_ARRAY_EXT, "GL_IMAGE_1D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_ATOMIC_COUNTER_BARRIER_BIT_EXT, "GL_ATOMIC_COUNTER_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_EXT, "GL_IMAGE_2D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_ARRAY_EXT, "GL_IMAGE_2D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_1D_ARRAY_EXT, "GL_INT_IMAGE_1D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_LEVEL_EXT, "GL_IMAGE_BINDING_LEVEL_EXT");
    GL_EXT_shader_image_load_store.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_PIXEL_BUFFER_BARRIER_BIT_EXT, "GL_PIXEL_BUFFER_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D_EXT, "GL_UNSIGNED_INT_IMAGE_1D_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_TEXTURE_FETCH_BARRIER_BIT_EXT, "GL_TEXTURE_FETCH_BARRIER_BIT_EXT");
  }
  private static final Map<Integer, String> GL_SGIS_texture4D = new HashMap<Integer, String>();
  private static void GL_SGIS_texture4D() {
    GL_SGIS_texture4D.put(GL_TEXTURE_4D_BINDING_SGIS, "GL_TEXTURE_4D_BINDING_SGIS");
    GL_SGIS_texture4D.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    GL_SGIS_texture4D.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    GL_SGIS_texture4D.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    GL_SGIS_texture4D.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
    GL_SGIS_texture4D.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    GL_SGIS_texture4D.put(GL_PROXY_TEXTURE_4D_SGIS, "GL_PROXY_TEXTURE_4D_SGIS");
    GL_SGIS_texture4D.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    GL_SGIS_texture4D.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    GL_SGIS_texture4D.put(GL_MAX_4D_TEXTURE_SIZE_SGIS, "GL_MAX_4D_TEXTURE_SIZE_SGIS");
  }
  private static final Map<Integer, String> GL_QCOM_writeonly_rendering = new HashMap<Integer, String>();
  private static void GL_QCOM_writeonly_rendering() {
    GL_QCOM_writeonly_rendering.put(GL_WRITEONLY_RENDERING_QCOM, "GL_WRITEONLY_RENDERING_QCOM");
  }
  private static final Map<Integer, String> GL_EXT_texture_mirror_clamp = new HashMap<Integer, String>();
  private static void GL_EXT_texture_mirror_clamp() {
    GL_EXT_texture_mirror_clamp.put(GL_MIRROR_CLAMP_TO_BORDER_EXT, "GL_MIRROR_CLAMP_TO_BORDER_EXT");
    GL_EXT_texture_mirror_clamp.put(GL_MIRROR_CLAMP_EXT, "GL_MIRROR_CLAMP_EXT");
    GL_EXT_texture_mirror_clamp.put(GL_MIRROR_CLAMP_TO_EDGE_EXT, "GL_MIRROR_CLAMP_TO_EDGE_EXT");
  }
  private static final Map<Integer, String> GL_S3_s3tc = new HashMap<Integer, String>();
  private static void GL_S3_s3tc() {
    GL_S3_s3tc.put(GL_RGBA_S3TC, "GL_RGBA_S3TC");
    GL_S3_s3tc.put(GL_RGBA_DXT5_S3TC, "GL_RGBA_DXT5_S3TC");
    GL_S3_s3tc.put(GL_RGB_S3TC, "GL_RGB_S3TC");
    GL_S3_s3tc.put(GL_RGBA4_DXT5_S3TC, "GL_RGBA4_DXT5_S3TC");
    GL_S3_s3tc.put(GL_RGBA4_S3TC, "GL_RGBA4_S3TC");
    GL_S3_s3tc.put(GL_RGB4_S3TC, "GL_RGB4_S3TC");
  }
  private static final Map<Integer, String> GL_OES_vertex_array_object = new HashMap<Integer, String>();
  private static void GL_OES_vertex_array_object() {
    GL_OES_vertex_array_object.put(GL_VERTEX_ARRAY_BINDING_OES, "GL_VERTEX_ARRAY_BINDING_OES");
  }
  private static final Map<Integer, String> GL_OES_stencil_wrap = new HashMap<Integer, String>();
  private static void GL_OES_stencil_wrap() {
    GL_OES_stencil_wrap.put(GL_DECR_WRAP_OES, "GL_DECR_WRAP_OES");
    GL_OES_stencil_wrap.put(GL_INCR_WRAP_OES, "GL_INCR_WRAP_OES");
  }
  private static final Map<Integer, String> GL_ARB_multitexture = new HashMap<Integer, String>();
  private static void GL_ARB_multitexture() {
    GL_ARB_multitexture.put(GL_TEXTURE2_ARB, "GL_TEXTURE2_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE21_ARB, "GL_TEXTURE21_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE3_ARB, "GL_TEXTURE3_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE30_ARB, "GL_TEXTURE30_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE17_ARB, "GL_TEXTURE17_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE26_ARB, "GL_TEXTURE26_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE13_ARB, "GL_TEXTURE13_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE7_ARB, "GL_TEXTURE7_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE20_ARB, "GL_TEXTURE20_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE4_ARB, "GL_TEXTURE4_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE12_ARB, "GL_TEXTURE12_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE25_ARB, "GL_TEXTURE25_ARB");
    GL_ARB_multitexture.put(GL_MAX_TEXTURE_UNITS_ARB, "GL_MAX_TEXTURE_UNITS_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE16_ARB, "GL_TEXTURE16_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE8_ARB, "GL_TEXTURE8_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE29_ARB, "GL_TEXTURE29_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE15_ARB, "GL_TEXTURE15_ARB");
    GL_ARB_multitexture.put(GL_CLIENT_ACTIVE_TEXTURE_ARB, "GL_CLIENT_ACTIVE_TEXTURE_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE10_ARB, "GL_TEXTURE10_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE0_ARB, "GL_TEXTURE0_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE23_ARB, "GL_TEXTURE23_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE19_ARB, "GL_TEXTURE19_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE24_ARB, "GL_TEXTURE24_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE11_ARB, "GL_TEXTURE11_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE5_ARB, "GL_TEXTURE5_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE9_ARB, "GL_TEXTURE9_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE28_ARB, "GL_TEXTURE28_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE27_ARB, "GL_TEXTURE27_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE1_ARB, "GL_TEXTURE1_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE22_ARB, "GL_TEXTURE22_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE18_ARB, "GL_TEXTURE18_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE31_ARB, "GL_TEXTURE31_ARB");
    GL_ARB_multitexture.put(GL_ACTIVE_TEXTURE_ARB, "GL_ACTIVE_TEXTURE_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE6_ARB, "GL_TEXTURE6_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE14_ARB, "GL_TEXTURE14_ARB");
  }
  private static final Map<Integer, String> GL_EXT_multisampled_render_to_texture = new HashMap<Integer, String>();
  private static void GL_EXT_multisampled_render_to_texture() {
    GL_EXT_multisampled_render_to_texture.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT");
    GL_EXT_multisampled_render_to_texture.put(GL_MAX_SAMPLES_EXT, "GL_MAX_SAMPLES_EXT");
    GL_EXT_multisampled_render_to_texture.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT");
    GL_EXT_multisampled_render_to_texture.put(GL_RENDERBUFFER_SAMPLES_EXT, "GL_RENDERBUFFER_SAMPLES_EXT");
  }
  private static final Map<Integer, String> GL_NVX_linked_gpu_multicast = new HashMap<Integer, String>();
  private static void GL_NVX_linked_gpu_multicast() {
    GL_NVX_linked_gpu_multicast.put(GL_MAX_LGPU_GPUS_NVX, "GL_MAX_LGPU_GPUS_NVX");
    GL_NVX_linked_gpu_multicast.put(GL_LGPU_SEPARATE_STORAGE_BIT_NVX, "GL_LGPU_SEPARATE_STORAGE_BIT_NVX");
  }
  private static final Map<Integer, String> GL_ARB_robustness = new HashMap<Integer, String>();
  private static void GL_ARB_robustness() {
    GL_ARB_robustness.put(GL_INNOCENT_CONTEXT_RESET_ARB, "GL_INNOCENT_CONTEXT_RESET_ARB");
    GL_ARB_robustness.put(GL_NO_RESET_NOTIFICATION_ARB, "GL_NO_RESET_NOTIFICATION_ARB");
    GL_ARB_robustness.put(GL_NO_ERROR, "GL_NO_ERROR");
    GL_ARB_robustness.put(GL_LOSE_CONTEXT_ON_RESET_ARB, "GL_LOSE_CONTEXT_ON_RESET_ARB");
    GL_ARB_robustness.put(GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB");
    GL_ARB_robustness.put(GL_GUILTY_CONTEXT_RESET_ARB, "GL_GUILTY_CONTEXT_RESET_ARB");
    GL_ARB_robustness.put(GL_RESET_NOTIFICATION_STRATEGY_ARB, "GL_RESET_NOTIFICATION_STRATEGY_ARB");
    GL_ARB_robustness.put(GL_UNKNOWN_CONTEXT_RESET_ARB, "GL_UNKNOWN_CONTEXT_RESET_ARB");
  }
  private static final Map<Integer, String> GL_SGIX_async = new HashMap<Integer, String>();
  private static void GL_SGIX_async() {
    GL_SGIX_async.put(GL_ASYNC_MARKER_SGIX, "GL_ASYNC_MARKER_SGIX");
  }
  private static final Map<Integer, String> GL_KHR_texture_compression_astc_ldr = new HashMap<Integer, String>();
  private static void GL_KHR_texture_compression_astc_ldr() {
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_8x6_KHR, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_10x5_KHR, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_5x5_KHR, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_8x5_KHR, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_5x4_KHR, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_12x12_KHR, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_6x6_KHR, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_10x6_KHR, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_8x8_KHR, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_12x10_KHR, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_10x10_KHR, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_6x5_KHR, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_4x4_KHR, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_RGBA_ASTC_10x8_KHR, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR");
    GL_KHR_texture_compression_astc_ldr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR");
  }
  private static final Map<Integer, String> GL_QCOM_binning_control = new HashMap<Integer, String>();
  private static void GL_QCOM_binning_control() {
    GL_QCOM_binning_control.put(GL_BINNING_CONTROL_HINT_QCOM, "GL_BINNING_CONTROL_HINT_QCOM");
    GL_QCOM_binning_control.put(GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM, "GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM");
    GL_QCOM_binning_control.put(GL_CPU_OPTIMIZED_QCOM, "GL_CPU_OPTIMIZED_QCOM");
    GL_QCOM_binning_control.put(GL_GPU_OPTIMIZED_QCOM, "GL_GPU_OPTIMIZED_QCOM");
  }
  private static final Map<Integer, String> GL_ARB_texture_swizzle = new HashMap<Integer, String>();
  private static void GL_ARB_texture_swizzle() {
    GL_ARB_texture_swizzle.put(GL_TEXTURE_SWIZZLE_RGBA, "GL_TEXTURE_SWIZZLE_RGBA");
    GL_ARB_texture_swizzle.put(GL_TEXTURE_SWIZZLE_R, "GL_TEXTURE_SWIZZLE_R");
    GL_ARB_texture_swizzle.put(GL_TEXTURE_SWIZZLE_B, "GL_TEXTURE_SWIZZLE_B");
    GL_ARB_texture_swizzle.put(GL_TEXTURE_SWIZZLE_A, "GL_TEXTURE_SWIZZLE_A");
    GL_ARB_texture_swizzle.put(GL_TEXTURE_SWIZZLE_G, "GL_TEXTURE_SWIZZLE_G");
  }
  private static final Map<Integer, String> GL_EXT_coordinate_frame = new HashMap<Integer, String>();
  private static void GL_EXT_coordinate_frame() {
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_STRIDE_EXT, "GL_TANGENT_ARRAY_STRIDE_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP1_TANGENT_EXT, "GL_MAP1_TANGENT_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP1_BINORMAL_EXT, "GL_MAP1_BINORMAL_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_TYPE_EXT, "GL_BINORMAL_ARRAY_TYPE_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP2_TANGENT_EXT, "GL_MAP2_TANGENT_EXT");
    GL_EXT_coordinate_frame.put(GL_CURRENT_TANGENT_EXT, "GL_CURRENT_TANGENT_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_POINTER_EXT, "GL_BINORMAL_ARRAY_POINTER_EXT");
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_EXT, "GL_TANGENT_ARRAY_EXT");
    GL_EXT_coordinate_frame.put(GL_CURRENT_BINORMAL_EXT, "GL_CURRENT_BINORMAL_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_EXT, "GL_BINORMAL_ARRAY_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_STRIDE_EXT, "GL_BINORMAL_ARRAY_STRIDE_EXT");
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_TYPE_EXT, "GL_TANGENT_ARRAY_TYPE_EXT");
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_POINTER_EXT, "GL_TANGENT_ARRAY_POINTER_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP2_BINORMAL_EXT, "GL_MAP2_BINORMAL_EXT");
  }
  private static final Map<Integer, String> GL_NV_path_rendering = new HashMap<Integer, String>();
  private static void GL_NV_path_rendering() {
    GL_NV_path_rendering.put(GL_PATH_MITER_LIMIT_NV, "GL_PATH_MITER_LIMIT_NV");
    GL_NV_path_rendering.put(GL_TRANSPOSE_AFFINE_2D_NV, "GL_TRANSPOSE_AFFINE_2D_NV");
    GL_NV_path_rendering.put(GL_MOVE_TO_NV, "GL_MOVE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_COEFF_NV, "GL_PATH_GEN_COEFF_NV");
    GL_NV_path_rendering.put(GL_FONT_TARGET_UNAVAILABLE_NV, "GL_FONT_TARGET_UNAVAILABLE_NV");
    GL_NV_path_rendering.put(GL_FILE_NAME_NV, "GL_FILE_NAME_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT_NV, "GL_ROUNDED_RECT_NV");
    GL_NV_path_rendering.put(GL_FONT_NUM_GLYPH_INDICES_BIT_NV, "GL_FONT_NUM_GLYPH_INDICES_BIT_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT8_NV, "GL_ROUNDED_RECT8_NV");
    GL_NV_path_rendering.put(GL_CLOSE_PATH_NV, "GL_CLOSE_PATH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT_NV, "GL_RELATIVE_ROUNDED_RECT_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV, "GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMALL_CCW_ARC_TO_NV, "GL_RELATIVE_SMALL_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_ROUND_NV, "GL_ROUND_NV");
    GL_NV_path_rendering.put(GL_USE_MISSING_GLYPH_NV, "GL_USE_MISSING_GLYPH_NV");
    GL_NV_path_rendering.put(GL_FONT_Y_MAX_BOUNDS_BIT_NV, "GL_FONT_Y_MAX_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_LARGE_CCW_ARC_TO_NV, "GL_LARGE_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_OFFSET_NV, "GL_PATH_DASH_OFFSET_NV");
    GL_NV_path_rendering.put(GL_PATH_JOIN_STYLE_NV, "GL_PATH_JOIN_STYLE_NV");
    GL_NV_path_rendering.put(GL_PATH_MODELVIEW_NV, "GL_PATH_MODELVIEW_NV");
    GL_NV_path_rendering.put(GL_UTF8_NV, "GL_UTF8_NV");
    GL_NV_path_rendering.put(GL_HORIZONTAL_LINE_TO_NV, "GL_HORIZONTAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_Y_NV, "GL_TRANSLATE_Y_NV");
    GL_NV_path_rendering.put(GL_4_BYTES_NV, "GL_4_BYTES_NV");
    GL_NV_path_rendering.put(GL_SYSTEM_FONT_NAME_NV, "GL_SYSTEM_FONT_NAME_NV");
    GL_NV_path_rendering.put(GL_FONT_UNINTELLIGIBLE_NV, "GL_FONT_UNINTELLIGIBLE_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_MASK_NV, "GL_PATH_FILL_MASK_NV");
    GL_NV_path_rendering.put(GL_ADJACENT_PAIRS_NV, "GL_ADJACENT_PAIRS_NV");
    GL_NV_path_rendering.put(GL_DUP_LAST_CUBIC_CURVE_TO_NV, "GL_DUP_LAST_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_LINE_TO_NV, "GL_RELATIVE_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV, "GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ARC_TO_NV, "GL_RELATIVE_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_PROJECTION_MATRIX_NV, "GL_PATH_PROJECTION_MATRIX_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_MODE_NV, "GL_PATH_FILL_MODE_NV");
    GL_NV_path_rendering.put(GL_SMALL_CCW_ARC_TO_NV, "GL_SMALL_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_DUP_FIRST_CUBIC_CURVE_TO_NV, "GL_DUP_FIRST_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_HAS_KERNING_BIT_NV, "GL_FONT_HAS_KERNING_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_MASK_NV, "GL_PATH_STROKE_MASK_NV");
    GL_NV_path_rendering.put(GL_3_BYTES_NV, "GL_3_BYTES_NV");
    GL_NV_path_rendering.put(GL_AFFINE_2D_NV, "GL_AFFINE_2D_NV");
    GL_NV_path_rendering.put(GL_UTF16_NV, "GL_UTF16_NV");
    GL_NV_path_rendering.put(GL_PATH_COMPUTED_LENGTH_NV, "GL_PATH_COMPUTED_LENGTH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_LARGE_CCW_ARC_TO_NV, "GL_RELATIVE_LARGE_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_RECT_NV, "GL_RECT_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV, "GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMALL_CW_ARC_TO_NV, "GL_RELATIVE_SMALL_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_CIRCULAR_CCW_ARC_TO_NV, "GL_CIRCULAR_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_X_NV, "GL_TRANSLATE_X_NV");
    GL_NV_path_rendering.put(GL_BOUNDING_BOX_NV, "GL_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_MOVE_TO_RESETS_NV, "GL_MOVE_TO_RESETS_NV");
    GL_NV_path_rendering.put(GL_PRIMARY_COLOR, "GL_PRIMARY_COLOR");
    GL_NV_path_rendering.put(GL_STANDARD_FONT_FORMAT_NV, "GL_STANDARD_FONT_FORMAT_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_REF_NV, "GL_PATH_STENCIL_REF_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_COVER_MODE_NV, "GL_PATH_FILL_COVER_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_CLIENT_LENGTH_NV, "GL_PATH_CLIENT_LENGTH_NV");
    GL_NV_path_rendering.put(GL_PATH_INITIAL_DASH_CAP_NV, "GL_PATH_INITIAL_DASH_CAP_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HEIGHT_BIT_NV, "GL_GLYPH_HEIGHT_BIT_NV");
    GL_NV_path_rendering.put(GL_2_BYTES_NV, "GL_2_BYTES_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_QUADRATIC_CURVE_TO_NV, "GL_RELATIVE_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_LINE_TO_NV, "GL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_PROJECTION_NV, "GL_PATH_PROJECTION_NV");
    GL_NV_path_rendering.put(GL_PATH_MODELVIEW_STACK_DEPTH_NV, "GL_PATH_MODELVIEW_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_STANDARD_FONT_NAME_NV, "GL_STANDARD_FONT_NAME_NV");
    GL_NV_path_rendering.put(GL_FONT_X_MIN_BOUNDS_BIT_NV, "GL_FONT_X_MIN_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV, "GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_FORMAT_PS_NV, "GL_PATH_FORMAT_PS_NV");
    GL_NV_path_rendering.put(GL_COUNT_DOWN_NV, "GL_COUNT_DOWN_NV");
    GL_NV_path_rendering.put(GL_FONT_UNITS_PER_EM_BIT_NV, "GL_FONT_UNITS_PER_EM_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_PROJECTION_STACK_DEPTH_NV, "GL_PATH_PROJECTION_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT4_NV, "GL_RELATIVE_ROUNDED_RECT4_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_3D_NV, "GL_TRANSLATE_3D_NV");
    GL_NV_path_rendering.put(GL_SMOOTH_QUADRATIC_CURVE_TO_NV, "GL_SMOOTH_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_QUADRATIC_CURVE_TO_NV, "GL_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_CAPS_NV, "GL_PATH_DASH_CAPS_NV");
    GL_NV_path_rendering.put(GL_RESTART_PATH_NV, "GL_RESTART_PATH_NV");
    GL_NV_path_rendering.put(GL_PATH_TERMINAL_END_CAP_NV, "GL_PATH_TERMINAL_END_CAP_NV");
    GL_NV_path_rendering.put(GL_GLYPH_VERTICAL_BEARING_X_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_X_BIT_NV");
    GL_NV_path_rendering.put(GL_CUBIC_CURVE_TO_NV, "GL_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_UNDERLINE_POSITION_BIT_NV, "GL_FONT_UNDERLINE_POSITION_BIT_NV");
    GL_NV_path_rendering.put(GL_SMOOTH_CUBIC_CURVE_TO_NV, "GL_SMOOTH_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_HEIGHT_BIT_NV, "GL_FONT_HEIGHT_BIT_NV");
    GL_NV_path_rendering.put(GL_TRANSPOSE_AFFINE_3D_NV, "GL_TRANSPOSE_AFFINE_3D_NV");
    GL_NV_path_rendering.put(GL_SMALL_CW_ARC_TO_NV, "GL_SMALL_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_ITALIC_BIT_NV, "GL_ITALIC_BIT_NV");
    GL_NV_path_rendering.put(GL_CONSTANT_NV, "GL_CONSTANT_NV");
    GL_NV_path_rendering.put(GL_FONT_UNDERLINE_THICKNESS_BIT_NV, "GL_FONT_UNDERLINE_THICKNESS_BIT_NV");
    GL_NV_path_rendering.put(GL_CONVEX_HULL_NV, "GL_CONVEX_HULL_NV");
    GL_NV_path_rendering.put(GL_PATH_COMMAND_COUNT_NV, "GL_PATH_COMMAND_COUNT_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_CUBIC_CURVE_TO_NV, "GL_RELATIVE_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV, "GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV");
    GL_NV_path_rendering.put(GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV, "GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV");
    GL_NV_path_rendering.put(GL_TRIANGULAR_NV, "GL_TRIANGULAR_NV");
    GL_NV_path_rendering.put(GL_PATH_ERROR_POSITION_NV, "GL_PATH_ERROR_POSITION_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_VERTICAL_LINE_TO_NV, "GL_RELATIVE_VERTICAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_PRIMARY_COLOR_NV, "GL_PRIMARY_COLOR_NV");
    GL_NV_path_rendering.put(GL_SQUARE_NV, "GL_SQUARE_NV");
    GL_NV_path_rendering.put(GL_BEVEL_NV, "GL_BEVEL_NV");
    GL_NV_path_rendering.put(GL_PATH_END_CAPS_NV, "GL_PATH_END_CAPS_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_FORMAT_SVG_NV, "GL_PATH_FORMAT_SVG_NV");
    GL_NV_path_rendering.put(GL_CIRCULAR_TANGENT_ARC_TO_NV, "GL_CIRCULAR_TANGENT_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_CIRCULAR_CW_ARC_TO_NV, "GL_CIRCULAR_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_COLOR_FORMAT_NV, "GL_PATH_GEN_COLOR_FORMAT_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT8_NV, "GL_RELATIVE_ROUNDED_RECT8_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_WIDTH_NV, "GL_PATH_STROKE_WIDTH_NV");
    GL_NV_path_rendering.put(GL_FRAGMENT_INPUT_NV, "GL_FRAGMENT_INPUT_NV");
    GL_NV_path_rendering.put(GL_EYE_LINEAR_NV, "GL_EYE_LINEAR_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_2D_NV, "GL_TRANSLATE_2D_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT2_NV, "GL_RELATIVE_ROUNDED_RECT2_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_OFFSET_RESET_NV, "GL_PATH_DASH_OFFSET_RESET_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_MOVE_TO_NV, "GL_RELATIVE_MOVE_TO_NV");
    GL_NV_path_rendering.put(GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_FOG_GEN_MODE_NV, "GL_PATH_FOG_GEN_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV, "GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_BOUNDING_BOX_NV, "GL_PATH_FILL_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_BOLD_BIT_NV, "GL_BOLD_BIT_NV");
    GL_NV_path_rendering.put(GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV");
    GL_NV_path_rendering.put(GL_FONT_Y_MIN_BOUNDS_BIT_NV, "GL_FONT_Y_MIN_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_VERTICAL_LINE_TO_NV, "GL_VERTICAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_DESCENDER_BIT_NV, "GL_FONT_DESCENDER_BIT_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT4_NV, "GL_ROUNDED_RECT4_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_CONIC_CURVE_TO_NV, "GL_RELATIVE_CONIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_GLYPHS_AVAILABLE_NV, "GL_FONT_GLYPHS_AVAILABLE_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_COORD_COUNT_NV, "GL_PATH_COORD_COUNT_NV");
    GL_NV_path_rendering.put(GL_OBJECT_LINEAR_NV, "GL_OBJECT_LINEAR_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_HORIZONTAL_LINE_TO_NV, "GL_RELATIVE_HORIZONTAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV, "GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_RECT_NV, "GL_RELATIVE_RECT_NV");
    GL_NV_path_rendering.put(GL_SKIP_MISSING_GLYPH_NV, "GL_SKIP_MISSING_GLYPH_NV");
    GL_NV_path_rendering.put(GL_FIRST_TO_REST_NV, "GL_FIRST_TO_REST_NV");
    GL_NV_path_rendering.put(GL_PATH_MODELVIEW_MATRIX_NV, "GL_PATH_MODELVIEW_MATRIX_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_FUNC_NV, "GL_PATH_STENCIL_FUNC_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HAS_KERNING_BIT_NV, "GL_GLYPH_HAS_KERNING_BIT_NV");
    GL_NV_path_rendering.put(GL_MITER_TRUNCATE_NV, "GL_MITER_TRUNCATE_NV");
    GL_NV_path_rendering.put(GL_LARGE_CW_ARC_TO_NV, "GL_LARGE_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_MITER_REVERT_NV, "GL_MITER_REVERT_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_VALUE_MASK_NV, "GL_PATH_STENCIL_VALUE_MASK_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_LARGE_CW_ARC_TO_NV, "GL_RELATIVE_LARGE_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV, "GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV");
    GL_NV_path_rendering.put(GL_AFFINE_3D_NV, "GL_AFFINE_3D_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_MODE_NV, "GL_PATH_GEN_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_TERMINAL_DASH_CAP_NV, "GL_PATH_TERMINAL_DASH_CAP_NV");
    GL_NV_path_rendering.put(GL_FONT_UNAVAILABLE_NV, "GL_FONT_UNAVAILABLE_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_COVER_MODE_NV, "GL_PATH_STROKE_COVER_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV, "GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_ARRAY_COUNT_NV, "GL_PATH_DASH_ARRAY_COUNT_NV");
    GL_NV_path_rendering.put(GL_PATH_COVER_DEPTH_FUNC_NV, "GL_PATH_COVER_DEPTH_FUNC_NV");
    GL_NV_path_rendering.put(GL_PATH_OBJECT_BOUNDING_BOX_NV, "GL_PATH_OBJECT_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV, "GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_CONIC_CURVE_TO_NV, "GL_CONIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_BOUNDING_BOX_NV, "GL_PATH_STROKE_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_FONT_X_MAX_BOUNDS_BIT_NV, "GL_FONT_X_MAX_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_COMPONENTS_NV, "GL_PATH_GEN_COMPONENTS_NV");
    GL_NV_path_rendering.put(GL_SECONDARY_COLOR_NV, "GL_SECONDARY_COLOR_NV");
    GL_NV_path_rendering.put(GL_COUNT_UP_NV, "GL_COUNT_UP_NV");
    GL_NV_path_rendering.put(GL_ARC_TO_NV, "GL_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_ASCENDER_BIT_NV, "GL_FONT_ASCENDER_BIT_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT2_NV, "GL_ROUNDED_RECT2_NV");
    GL_NV_path_rendering.put(GL_PATH_INITIAL_END_CAP_NV, "GL_PATH_INITIAL_END_CAP_NV");
    GL_NV_path_rendering.put(GL_GLYPH_WIDTH_BIT_NV, "GL_GLYPH_WIDTH_BIT_NV");
    GL_NV_path_rendering.put(GL_MOVE_TO_CONTINUES_NV, "GL_MOVE_TO_CONTINUES_NV");
    GL_NV_path_rendering.put(GL_ACCUM_ADJACENT_PAIRS_NV, "GL_ACCUM_ADJACENT_PAIRS_NV");
  }
  private static final Map<Integer, String> GL_APPLE_element_array = new HashMap<Integer, String>();
  private static void GL_APPLE_element_array() {
    GL_APPLE_element_array.put(GL_ELEMENT_ARRAY_APPLE, "GL_ELEMENT_ARRAY_APPLE");
    GL_APPLE_element_array.put(GL_ELEMENT_ARRAY_POINTER_APPLE, "GL_ELEMENT_ARRAY_POINTER_APPLE");
    GL_APPLE_element_array.put(GL_ELEMENT_ARRAY_TYPE_APPLE, "GL_ELEMENT_ARRAY_TYPE_APPLE");
  }
  private static final Map<Integer, String> GL_ARB_separate_shader_objects = new HashMap<Integer, String>();
  private static void GL_ARB_separate_shader_objects() {
    GL_ARB_separate_shader_objects.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    GL_ARB_separate_shader_objects.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_PROGRAM_SEPARABLE, "GL_PROGRAM_SEPARABLE");
    GL_ARB_separate_shader_objects.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_PROGRAM_PIPELINE_BINDING, "GL_PROGRAM_PIPELINE_BINDING");
    GL_ARB_separate_shader_objects.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_ACTIVE_PROGRAM, "GL_ACTIVE_PROGRAM");
    GL_ARB_separate_shader_objects.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
  }
  private static final Map<Integer, String> GL_EXT_shadow_samplers = new HashMap<Integer, String>();
  private static void GL_EXT_shadow_samplers() {
    GL_EXT_shadow_samplers.put(GL_SAMPLER_2D_SHADOW_EXT, "GL_SAMPLER_2D_SHADOW_EXT");
    GL_EXT_shadow_samplers.put(GL_COMPARE_REF_TO_TEXTURE_EXT, "GL_COMPARE_REF_TO_TEXTURE_EXT");
    GL_EXT_shadow_samplers.put(GL_TEXTURE_COMPARE_MODE_EXT, "GL_TEXTURE_COMPARE_MODE_EXT");
    GL_EXT_shadow_samplers.put(GL_TEXTURE_COMPARE_FUNC_EXT, "GL_TEXTURE_COMPARE_FUNC_EXT");
  }
  private static final Map<Integer, String> GL_ARB_cl_event = new HashMap<Integer, String>();
  private static void GL_ARB_cl_event() {
    GL_ARB_cl_event.put(GL_SYNC_CL_EVENT_ARB, "GL_SYNC_CL_EVENT_ARB");
    GL_ARB_cl_event.put(GL_SYNC_CL_EVENT_COMPLETE_ARB, "GL_SYNC_CL_EVENT_COMPLETE_ARB");
  }
  private static final Map<Integer, String> GL_EXT_index_material = new HashMap<Integer, String>();
  private static void GL_EXT_index_material() {
    GL_EXT_index_material.put(GL_INDEX_MATERIAL_EXT, "GL_INDEX_MATERIAL_EXT");
    GL_EXT_index_material.put(GL_INDEX_MATERIAL_FACE_EXT, "GL_INDEX_MATERIAL_FACE_EXT");
    GL_EXT_index_material.put(GL_INDEX_MATERIAL_PARAMETER_EXT, "GL_INDEX_MATERIAL_PARAMETER_EXT");
  }
  private static final Map<Integer, String> GL_SGIX_texture_add_env = new HashMap<Integer, String>();
  private static void GL_SGIX_texture_add_env() {
    GL_SGIX_texture_add_env.put(GL_TEXTURE_ENV_BIAS_SGIX, "GL_TEXTURE_ENV_BIAS_SGIX");
  }
  private static final Map<Integer, String> GL_EXT_texture_sRGB_decode = new HashMap<Integer, String>();
  private static void GL_EXT_texture_sRGB_decode() {
    GL_EXT_texture_sRGB_decode.put(GL_SKIP_DECODE_EXT, "GL_SKIP_DECODE_EXT");
    GL_EXT_texture_sRGB_decode.put(GL_DECODE_EXT, "GL_DECODE_EXT");
    GL_EXT_texture_sRGB_decode.put(GL_TEXTURE_SRGB_DECODE_EXT, "GL_TEXTURE_SRGB_DECODE_EXT");
  }
  private static final Map<Integer, String> GL_NV_conservative_raster = new HashMap<Integer, String>();
  private static void GL_NV_conservative_raster() {
    GL_NV_conservative_raster.put(GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV, "GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV");
    GL_NV_conservative_raster.put(GL_CONSERVATIVE_RASTERIZATION_NV, "GL_CONSERVATIVE_RASTERIZATION_NV");
    GL_NV_conservative_raster.put(GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV, "GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV");
    GL_NV_conservative_raster.put(GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV, "GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV");
  }
  private static final Map<Integer, String> GL_OES_required_internalformat = new HashMap<Integer, String>();
  private static void GL_OES_required_internalformat() {
    GL_OES_required_internalformat.put(GL_ALPHA8_OES, "GL_ALPHA8_OES");
    GL_OES_required_internalformat.put(GL_RGB10_EXT, "GL_RGB10_EXT");
    GL_OES_required_internalformat.put(GL_LUMINANCE8_OES, "GL_LUMINANCE8_OES");
    GL_OES_required_internalformat.put(GL_DEPTH_COMPONENT16_OES, "GL_DEPTH_COMPONENT16_OES");
    GL_OES_required_internalformat.put(GL_RGB10_A2_EXT, "GL_RGB10_A2_EXT");
    GL_OES_required_internalformat.put(GL_RGB565_OES, "GL_RGB565_OES");
    GL_OES_required_internalformat.put(GL_DEPTH_COMPONENT24_OES, "GL_DEPTH_COMPONENT24_OES");
    GL_OES_required_internalformat.put(GL_LUMINANCE4_ALPHA4_OES, "GL_LUMINANCE4_ALPHA4_OES");
    GL_OES_required_internalformat.put(GL_LUMINANCE8_ALPHA8_OES, "GL_LUMINANCE8_ALPHA8_OES");
    GL_OES_required_internalformat.put(GL_RGBA8_OES, "GL_RGBA8_OES");
    GL_OES_required_internalformat.put(GL_RGB5_A1_OES, "GL_RGB5_A1_OES");
    GL_OES_required_internalformat.put(GL_DEPTH24_STENCIL8_OES, "GL_DEPTH24_STENCIL8_OES");
    GL_OES_required_internalformat.put(GL_DEPTH_COMPONENT32_OES, "GL_DEPTH_COMPONENT32_OES");
    GL_OES_required_internalformat.put(GL_RGBA4_OES, "GL_RGBA4_OES");
    GL_OES_required_internalformat.put(GL_RGB8_OES, "GL_RGB8_OES");
  }
  private static final Map<Integer, String> GL_ARB_color_buffer_float = new HashMap<Integer, String>();
  private static void GL_ARB_color_buffer_float() {
    GL_ARB_color_buffer_float.put(GL_RGBA_FLOAT_MODE_ARB, "GL_RGBA_FLOAT_MODE_ARB");
    GL_ARB_color_buffer_float.put(GL_CLAMP_VERTEX_COLOR_ARB, "GL_CLAMP_VERTEX_COLOR_ARB");
    GL_ARB_color_buffer_float.put(GL_CLAMP_FRAGMENT_COLOR_ARB, "GL_CLAMP_FRAGMENT_COLOR_ARB");
    GL_ARB_color_buffer_float.put(GL_FIXED_ONLY_ARB, "GL_FIXED_ONLY_ARB");
    GL_ARB_color_buffer_float.put(GL_CLAMP_READ_COLOR_ARB, "GL_CLAMP_READ_COLOR_ARB");
  }
  private static final Map<Integer, String> GL_OES_tessellation_shader = new HashMap<Integer, String>();
  private static void GL_OES_tessellation_shader() {
    GL_OES_tessellation_shader.put(GL_ISOLINES_OES, "GL_ISOLINES_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_QUADS_OES, "GL_QUADS_OES");
    GL_OES_tessellation_shader.put(GL_CW, "GL_CW");
    GL_OES_tessellation_shader.put(GL_TESS_CONTROL_SHADER_OES, "GL_TESS_CONTROL_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_TESS_CONTROL_OUTPUT_VERTICES_OES, "GL_TESS_CONTROL_OUTPUT_VERTICES_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_SPACING_OES, "GL_TESS_GEN_SPACING_OES");
    GL_OES_tessellation_shader.put(GL_FRACTIONAL_ODD_OES, "GL_FRACTIONAL_ODD_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_TRIANGLES, "GL_TRIANGLES");
    GL_OES_tessellation_shader.put(GL_MAX_PATCH_VERTICES_OES, "GL_MAX_PATCH_VERTICES_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_POINT_MODE_OES, "GL_TESS_GEN_POINT_MODE_OES");
    GL_OES_tessellation_shader.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES");
    GL_OES_tessellation_shader.put(GL_CCW, "GL_CCW");
    GL_OES_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_OES, "GL_TESS_EVALUATION_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_VERTEX_ORDER_OES, "GL_TESS_GEN_VERTEX_ORDER_OES");
    GL_OES_tessellation_shader.put(GL_EQUAL, "GL_EQUAL");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_IS_PER_PATCH_OES, "GL_IS_PER_PATCH_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_PATCHES_OES, "GL_PATCHES_OES");
    GL_OES_tessellation_shader.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES");
    GL_OES_tessellation_shader.put(GL_FRACTIONAL_EVEN_OES, "GL_FRACTIONAL_EVEN_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_BIT_OES, "GL_TESS_EVALUATION_SHADER_BIT_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_MODE_OES, "GL_TESS_GEN_MODE_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_PATCH_COMPONENTS_OES, "GL_MAX_TESS_PATCH_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_TESS_CONTROL_SHADER_BIT_OES, "GL_TESS_CONTROL_SHADER_BIT_OES");
    GL_OES_tessellation_shader.put(GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_GEN_LEVEL_OES, "GL_MAX_TESS_GEN_LEVEL_OES");
    GL_OES_tessellation_shader.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES, "GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES");
    GL_OES_tessellation_shader.put(GL_PATCH_VERTICES_OES, "GL_PATCH_VERTICES_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES");
  }
  private static final Map<Integer, String> GL_SGIX_clipmap = new HashMap<Integer, String>();
  private static void GL_SGIX_clipmap() {
    GL_SGIX_clipmap.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    GL_SGIX_clipmap.put(GL_NEAREST_CLIPMAP_LINEAR_SGIX, "GL_NEAREST_CLIPMAP_LINEAR_SGIX");
    GL_SGIX_clipmap.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    GL_SGIX_clipmap.put(GL_LINEAR_CLIPMAP_LINEAR_SGIX, "GL_LINEAR_CLIPMAP_LINEAR_SGIX");
    GL_SGIX_clipmap.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    GL_SGIX_clipmap.put(GL_LINEAR_CLIPMAP_NEAREST_SGIX, "GL_LINEAR_CLIPMAP_NEAREST_SGIX");
    GL_SGIX_clipmap.put(GL_NEAREST_CLIPMAP_NEAREST_SGIX, "GL_NEAREST_CLIPMAP_NEAREST_SGIX");
    GL_SGIX_clipmap.put(GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    GL_SGIX_clipmap.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    GL_SGIX_clipmap.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    GL_SGIX_clipmap.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    GL_SGIX_clipmap.put(GL_MAX_CLIPMAP_DEPTH_SGIX, "GL_MAX_CLIPMAP_DEPTH_SGIX");
  }
  private static final Map<Integer, String> GL_SUN_mesh_array = new HashMap<Integer, String>();
  private static void GL_SUN_mesh_array() {
    GL_SUN_mesh_array.put(GL_TRIANGLE_MESH_SUN, "GL_TRIANGLE_MESH_SUN");
    GL_SUN_mesh_array.put(GL_QUAD_MESH_SUN, "GL_QUAD_MESH_SUN");
  }
  private static final Map<Integer, String> GL_OES_draw_texture = new HashMap<Integer, String>();
  private static void GL_OES_draw_texture() {
    GL_OES_draw_texture.put(GL_TEXTURE_CROP_RECT_OES, "GL_TEXTURE_CROP_RECT_OES");
  }
  private static final Map<Integer, String> GL_APPLE_vertex_array_object = new HashMap<Integer, String>();
  private static void GL_APPLE_vertex_array_object() {
    GL_APPLE_vertex_array_object.put(GL_VERTEX_ARRAY_BINDING_APPLE, "GL_VERTEX_ARRAY_BINDING_APPLE");
  }
  private static final Map<Integer, String> GL_EXT_semaphore_fd = new HashMap<Integer, String>();
  private static void GL_EXT_semaphore_fd() {
    GL_EXT_semaphore_fd.put(GL_HANDLE_TYPE_OPAQUE_FD_EXT, "GL_HANDLE_TYPE_OPAQUE_FD_EXT");
  }
  private static final Map<Integer, String> GL_NV_framebuffer_mixed_samples = new HashMap<Integer, String>();
  private static void GL_NV_framebuffer_mixed_samples() {
    GL_NV_framebuffer_mixed_samples.put(GL_RASTER_MULTISAMPLE_EXT, "GL_RASTER_MULTISAMPLE_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_COVERAGE_MODULATION_TABLE_NV, "GL_COVERAGE_MODULATION_TABLE_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_EFFECTIVE_RASTER_SAMPLES_EXT, "GL_EFFECTIVE_RASTER_SAMPLES_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_DEPTH_SAMPLES_NV, "GL_DEPTH_SAMPLES_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_MAX_RASTER_SAMPLES_EXT, "GL_MAX_RASTER_SAMPLES_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT, "GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV, "GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV, "GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_STENCIL_SAMPLES_NV, "GL_STENCIL_SAMPLES_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_COVERAGE_MODULATION_NV, "GL_COVERAGE_MODULATION_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT, "GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_RASTER_SAMPLES_EXT, "GL_RASTER_SAMPLES_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_COLOR_SAMPLES_NV, "GL_COLOR_SAMPLES_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_COVERAGE_MODULATION_TABLE_SIZE_NV, "GL_COVERAGE_MODULATION_TABLE_SIZE_NV");
  }
  private static final Map<Integer, String> GL_OES_texture_float = new HashMap<Integer, String>();
  private static void GL_OES_texture_float() {
    GL_OES_texture_float.put(GL_FLOAT, "GL_FLOAT");
  }
  private static final Map<Integer, String> GL_ARB_depth_clamp = new HashMap<Integer, String>();
  private static void GL_ARB_depth_clamp() {
    GL_ARB_depth_clamp.put(GL_DEPTH_CLAMP, "GL_DEPTH_CLAMP");
  }
  private static final Map<Integer, String> GL_APPLE_rgb_422 = new HashMap<Integer, String>();
  private static void GL_APPLE_rgb_422() {
    GL_APPLE_rgb_422.put(GL_UNSIGNED_SHORT_8_8_REV_APPLE, "GL_UNSIGNED_SHORT_8_8_REV_APPLE");
    GL_APPLE_rgb_422.put(GL_RGB_422_APPLE, "GL_RGB_422_APPLE");
    GL_APPLE_rgb_422.put(GL_RGB_RAW_422_APPLE, "GL_RGB_RAW_422_APPLE");
    GL_APPLE_rgb_422.put(GL_UNSIGNED_SHORT_8_8_APPLE, "GL_UNSIGNED_SHORT_8_8_APPLE");
  }
  private static final Map<Integer, String> GL_SGIX_ycrcb = new HashMap<Integer, String>();
  private static void GL_SGIX_ycrcb() {
    GL_SGIX_ycrcb.put(GL_YCRCB_444_SGIX, "GL_YCRCB_444_SGIX");
    GL_SGIX_ycrcb.put(GL_YCRCB_422_SGIX, "GL_YCRCB_422_SGIX");
  }
  private static final Map<Integer, String> GL_NV_blend_equation_advanced = new HashMap<Integer, String>();
  private static void GL_NV_blend_equation_advanced() {
    GL_NV_blend_equation_advanced.put(GL_SRC_OVER_NV, "GL_SRC_OVER_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_NV, "GL_PLUS_NV");
    GL_NV_blend_equation_advanced.put(GL_XOR_NV, "GL_XOR_NV");
    GL_NV_blend_equation_advanced.put(GL_DISJOINT_NV, "GL_DISJOINT_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_SATURATION_NV, "GL_HSL_SATURATION_NV");
    GL_NV_blend_equation_advanced.put(GL_PINLIGHT_NV, "GL_PINLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_CONJOINT_NV, "GL_CONJOINT_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_LUMINOSITY_NV, "GL_HSL_LUMINOSITY_NV");
    GL_NV_blend_equation_advanced.put(GL_HARDMIX_NV, "GL_HARDMIX_NV");
    GL_NV_blend_equation_advanced.put(GL_OVERLAY_NV, "GL_OVERLAY_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_ATOP_NV, "GL_DST_ATOP_NV");
    GL_NV_blend_equation_advanced.put(GL_ZERO, "GL_ZERO");
    GL_NV_blend_equation_advanced.put(GL_CONTRAST_NV, "GL_CONTRAST_NV");
    GL_NV_blend_equation_advanced.put(GL_DIFFERENCE_NV, "GL_DIFFERENCE_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_NV, "GL_SRC_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_OVER_NV, "GL_DST_OVER_NV");
    GL_NV_blend_equation_advanced.put(GL_SOFTLIGHT_NV, "GL_SOFTLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_HUE_NV, "GL_HSL_HUE_NV");
    GL_NV_blend_equation_advanced.put(GL_INVERT, "GL_INVERT");
    GL_NV_blend_equation_advanced.put(GL_DST_NV, "GL_DST_NV");
    GL_NV_blend_equation_advanced.put(GL_INVERT_OVG_NV, "GL_INVERT_OVG_NV");
    GL_NV_blend_equation_advanced.put(GL_GREEN_NV, "GL_GREEN_NV");
    GL_NV_blend_equation_advanced.put(GL_LIGHTEN_NV, "GL_LIGHTEN_NV");
    GL_NV_blend_equation_advanced.put(GL_EXCLUSION_NV, "GL_EXCLUSION_NV");
    GL_NV_blend_equation_advanced.put(GL_MINUS_NV, "GL_MINUS_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_IN_NV, "GL_DST_IN_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_IN_NV, "GL_SRC_IN_NV");
    GL_NV_blend_equation_advanced.put(GL_COLORBURN_NV, "GL_COLORBURN_NV");
    GL_NV_blend_equation_advanced.put(GL_MULTIPLY_NV, "GL_MULTIPLY_NV");
    GL_NV_blend_equation_advanced.put(GL_BLEND_OVERLAP_NV, "GL_BLEND_OVERLAP_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_CLAMPED_NV, "GL_PLUS_CLAMPED_NV");
    GL_NV_blend_equation_advanced.put(GL_COLORDODGE_NV, "GL_COLORDODGE_NV");
    GL_NV_blend_equation_advanced.put(GL_UNCORRELATED_NV, "GL_UNCORRELATED_NV");
    GL_NV_blend_equation_advanced.put(GL_LINEARLIGHT_NV, "GL_LINEARLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_SCREEN_NV, "GL_SCREEN_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_OUT_NV, "GL_SRC_OUT_NV");
    GL_NV_blend_equation_advanced.put(GL_LINEARDODGE_NV, "GL_LINEARDODGE_NV");
    GL_NV_blend_equation_advanced.put(GL_BLEND_PREMULTIPLIED_SRC_NV, "GL_BLEND_PREMULTIPLIED_SRC_NV");
    GL_NV_blend_equation_advanced.put(GL_HARDLIGHT_NV, "GL_HARDLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_LINEARBURN_NV, "GL_LINEARBURN_NV");
    GL_NV_blend_equation_advanced.put(GL_BLUE_NV, "GL_BLUE_NV");
    GL_NV_blend_equation_advanced.put(GL_MINUS_CLAMPED_NV, "GL_MINUS_CLAMPED_NV");
    GL_NV_blend_equation_advanced.put(GL_RED_NV, "GL_RED_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_DARKER_NV, "GL_PLUS_DARKER_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_COLOR_NV, "GL_HSL_COLOR_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_OUT_NV, "GL_DST_OUT_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_CLAMPED_ALPHA_NV, "GL_PLUS_CLAMPED_ALPHA_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_ATOP_NV, "GL_SRC_ATOP_NV");
    GL_NV_blend_equation_advanced.put(GL_DARKEN_NV, "GL_DARKEN_NV");
    GL_NV_blend_equation_advanced.put(GL_VIVIDLIGHT_NV, "GL_VIVIDLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_INVERT_RGB_NV, "GL_INVERT_RGB_NV");
  }
  private static final Map<Integer, String> GL_SGIX_pixel_texture = new HashMap<Integer, String>();
  private static void GL_SGIX_pixel_texture() {
    GL_SGIX_pixel_texture.put(GL_PIXEL_TEX_GEN_MODE_SGIX, "GL_PIXEL_TEX_GEN_MODE_SGIX");
    GL_SGIX_pixel_texture.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
  }
  private static final Map<Integer, String> GL_SGIS_texture_select = new HashMap<Integer, String>();
  private static void GL_SGIS_texture_select() {
    GL_SGIS_texture_select.put(GL_DUAL_ALPHA4_SGIS, "GL_DUAL_ALPHA4_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_LUMINANCE12_SGIS, "GL_DUAL_LUMINANCE12_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_LUMINANCE8_SGIS, "GL_DUAL_LUMINANCE8_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_INTENSITY4_SGIS, "GL_DUAL_INTENSITY4_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_LUMINANCE8_SGIS, "GL_QUAD_LUMINANCE8_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_ALPHA8_SGIS, "GL_QUAD_ALPHA8_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_LUMINANCE_ALPHA8_SGIS, "GL_DUAL_LUMINANCE_ALPHA8_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_INTENSITY4_SGIS, "GL_QUAD_INTENSITY4_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_ALPHA4_SGIS, "GL_QUAD_ALPHA4_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_LUMINANCE16_SGIS, "GL_DUAL_LUMINANCE16_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_LUMINANCE4_SGIS, "GL_QUAD_LUMINANCE4_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_INTENSITY8_SGIS, "GL_DUAL_INTENSITY8_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_ALPHA8_SGIS, "GL_DUAL_ALPHA8_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_ALPHA16_SGIS, "GL_DUAL_ALPHA16_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_LUMINANCE_ALPHA4_SGIS, "GL_DUAL_LUMINANCE_ALPHA4_SGIS");
    GL_SGIS_texture_select.put(GL_QUAD_INTENSITY8_SGIS, "GL_QUAD_INTENSITY8_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_INTENSITY12_SGIS, "GL_DUAL_INTENSITY12_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_LUMINANCE4_SGIS, "GL_DUAL_LUMINANCE4_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_INTENSITY16_SGIS, "GL_DUAL_INTENSITY16_SGIS");
    GL_SGIS_texture_select.put(GL_DUAL_ALPHA12_SGIS, "GL_DUAL_ALPHA12_SGIS");
  }
  private static final Map<Integer, String> GL_EXT_index_func = new HashMap<Integer, String>();
  private static void GL_EXT_index_func() {
    GL_EXT_index_func.put(GL_INDEX_TEST_EXT, "GL_INDEX_TEST_EXT");
    GL_EXT_index_func.put(GL_INDEX_TEST_FUNC_EXT, "GL_INDEX_TEST_FUNC_EXT");
    GL_EXT_index_func.put(GL_INDEX_TEST_REF_EXT, "GL_INDEX_TEST_REF_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_sync = new HashMap<Integer, String>();
  private static void GL_APPLE_sync() {
    GL_APPLE_sync.put(GL_CONDITION_SATISFIED_APPLE, "GL_CONDITION_SATISFIED_APPLE");
    GL_APPLE_sync.put(GL_WAIT_FAILED_APPLE, "GL_WAIT_FAILED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_FLAGS_APPLE, "GL_SYNC_FLAGS_APPLE");
    GL_APPLE_sync.put(GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE, "GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE");
    GL_APPLE_sync.put(GL_SIGNALED_APPLE, "GL_SIGNALED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_OBJECT_APPLE, "GL_SYNC_OBJECT_APPLE");
    GL_APPLE_sync.put(GL_MAX_SERVER_WAIT_TIMEOUT_APPLE, "GL_MAX_SERVER_WAIT_TIMEOUT_APPLE");
    GL_APPLE_sync.put(GL_ALREADY_SIGNALED_APPLE, "GL_ALREADY_SIGNALED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_CONDITION_APPLE, "GL_SYNC_CONDITION_APPLE");
    GL_APPLE_sync.put(GL_SYNC_STATUS_APPLE, "GL_SYNC_STATUS_APPLE");
    GL_APPLE_sync.put(GL_TIMEOUT_EXPIRED_APPLE, "GL_TIMEOUT_EXPIRED_APPLE");
    GL_APPLE_sync.put(GL_OBJECT_TYPE_APPLE, "GL_OBJECT_TYPE_APPLE");
    GL_APPLE_sync.put(GL_SYNC_FENCE_APPLE, "GL_SYNC_FENCE_APPLE");
    GL_APPLE_sync.put(GL_UNSIGNALED_APPLE, "GL_UNSIGNALED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_FLUSH_COMMANDS_BIT_APPLE, "GL_SYNC_FLUSH_COMMANDS_BIT_APPLE");
    GL_APPLE_sync.put(GL_TIMEOUT_IGNORED_APPLE, "GL_TIMEOUT_IGNORED_APPLE");
  }
  private static final Map<Integer, String> GL_ATI_draw_buffers = new HashMap<Integer, String>();
  private static void GL_ATI_draw_buffers() {
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER11_ATI, "GL_DRAW_BUFFER11_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER4_ATI, "GL_DRAW_BUFFER4_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER2_ATI, "GL_DRAW_BUFFER2_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER6_ATI, "GL_DRAW_BUFFER6_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER8_ATI, "GL_DRAW_BUFFER8_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER13_ATI, "GL_DRAW_BUFFER13_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER15_ATI, "GL_DRAW_BUFFER15_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER12_ATI, "GL_DRAW_BUFFER12_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER3_ATI, "GL_DRAW_BUFFER3_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER5_ATI, "GL_DRAW_BUFFER5_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER0_ATI, "GL_DRAW_BUFFER0_ATI");
    GL_ATI_draw_buffers.put(GL_MAX_DRAW_BUFFERS_ATI, "GL_MAX_DRAW_BUFFERS_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER1_ATI, "GL_DRAW_BUFFER1_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER7_ATI, "GL_DRAW_BUFFER7_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER10_ATI, "GL_DRAW_BUFFER10_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER14_ATI, "GL_DRAW_BUFFER14_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER9_ATI, "GL_DRAW_BUFFER9_ATI");
  }
  private static final Map<Integer, String> GL_EXT_buffer_storage = new HashMap<Integer, String>();
  private static void GL_EXT_buffer_storage() {
    GL_EXT_buffer_storage.put(GL_MAP_PERSISTENT_BIT_EXT, "GL_MAP_PERSISTENT_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_DYNAMIC_STORAGE_BIT_EXT, "GL_DYNAMIC_STORAGE_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_CLIENT_STORAGE_BIT_EXT, "GL_CLIENT_STORAGE_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_BUFFER_IMMUTABLE_STORAGE_EXT, "GL_BUFFER_IMMUTABLE_STORAGE_EXT");
    GL_EXT_buffer_storage.put(GL_MAP_COHERENT_BIT_EXT, "GL_MAP_COHERENT_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    GL_EXT_buffer_storage.put(GL_BUFFER_STORAGE_FLAGS_EXT, "GL_BUFFER_STORAGE_FLAGS_EXT");
    GL_EXT_buffer_storage.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
  }
  private static final Map<Integer, String> GL_AMD_stencil_operation_extended = new HashMap<Integer, String>();
  private static void GL_AMD_stencil_operation_extended() {
    GL_AMD_stencil_operation_extended.put(GL_REPLACE_VALUE_AMD, "GL_REPLACE_VALUE_AMD");
    GL_AMD_stencil_operation_extended.put(GL_STENCIL_BACK_OP_VALUE_AMD, "GL_STENCIL_BACK_OP_VALUE_AMD");
    GL_AMD_stencil_operation_extended.put(GL_STENCIL_OP_VALUE_AMD, "GL_STENCIL_OP_VALUE_AMD");
    GL_AMD_stencil_operation_extended.put(GL_SET_AMD, "GL_SET_AMD");
  }
  private static final Map<Integer, String> GL_OES_draw_buffers_indexed = new HashMap<Integer, String>();
  private static void GL_OES_draw_buffers_indexed() {
    GL_OES_draw_buffers_indexed.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    GL_OES_draw_buffers_indexed.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_EQUATION_ALPHA, "GL_BLEND_EQUATION_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_SRC_RGB, "GL_BLEND_SRC_RGB");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_DST_ALPHA, "GL_BLEND_DST_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_DST_COLOR, "GL_DST_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_MIN, "GL_MIN");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_SRC_ALPHA, "GL_BLEND_SRC_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_EQUATION_RGB, "GL_BLEND_EQUATION_RGB");
    GL_OES_draw_buffers_indexed.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_DST_RGB, "GL_BLEND_DST_RGB");
    GL_OES_draw_buffers_indexed.put(GL_MAX, "GL_MAX");
    GL_OES_draw_buffers_indexed.put(GL_ZERO, "GL_ZERO");
    GL_OES_draw_buffers_indexed.put(GL_ONE, "GL_ONE");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    GL_OES_draw_buffers_indexed.put(GL_BLEND, "GL_BLEND");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    GL_OES_draw_buffers_indexed.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
  }
  private static final Map<Integer, String> GL_SGIX_blend_alpha_minmax = new HashMap<Integer, String>();
  private static void GL_SGIX_blend_alpha_minmax() {
    GL_SGIX_blend_alpha_minmax.put(GL_ALPHA_MAX_SGIX, "GL_ALPHA_MAX_SGIX");
    GL_SGIX_blend_alpha_minmax.put(GL_ALPHA_MIN_SGIX, "GL_ALPHA_MIN_SGIX");
  }
  private static final Map<Integer, String> GL_QCOM_shader_framebuffer_fetch_noncoherent = new HashMap<Integer, String>();
  private static void GL_QCOM_shader_framebuffer_fetch_noncoherent() {
    GL_QCOM_shader_framebuffer_fetch_noncoherent.put(GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM, "GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM");
  }
  private static final Map<Integer, String> GL_NV_texture_multisample = new HashMap<Integer, String>();
  private static void GL_NV_texture_multisample() {
    GL_NV_texture_multisample.put(GL_TEXTURE_COLOR_SAMPLES_NV, "GL_TEXTURE_COLOR_SAMPLES_NV");
    GL_NV_texture_multisample.put(GL_TEXTURE_COVERAGE_SAMPLES_NV, "GL_TEXTURE_COVERAGE_SAMPLES_NV");
  }
  private static final Map<Integer, String> GL_ANGLE_framebuffer_multisample = new HashMap<Integer, String>();
  private static void GL_ANGLE_framebuffer_multisample() {
    GL_ANGLE_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE");
    GL_ANGLE_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_ANGLE, "GL_RENDERBUFFER_SAMPLES_ANGLE");
    GL_ANGLE_framebuffer_multisample.put(GL_MAX_SAMPLES_ANGLE, "GL_MAX_SAMPLES_ANGLE");
  }
  private static final Map<Integer, String> GL_OES_read_format = new HashMap<Integer, String>();
  private static void GL_OES_read_format() {
    GL_OES_read_format.put(GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES, "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES");
    GL_OES_read_format.put(GL_IMPLEMENTATION_COLOR_READ_TYPE_OES, "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES");
  }
  private static final Map<Integer, String> GL_NV_blend_minmax_factor = new HashMap<Integer, String>();
  private static void GL_NV_blend_minmax_factor() {
    GL_NV_blend_minmax_factor.put(GL_FACTOR_MIN_AMD, "GL_FACTOR_MIN_AMD");
    GL_NV_blend_minmax_factor.put(GL_FACTOR_MAX_AMD, "GL_FACTOR_MAX_AMD");
  }
  private static final Map<Integer, String> GL_PGI_misc_hints = new HashMap<Integer, String>();
  private static void GL_PGI_misc_hints() {
    GL_PGI_misc_hints.put(GL_NATIVE_GRAPHICS_HANDLE_PGI, "GL_NATIVE_GRAPHICS_HANDLE_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_WIN_HINT_PGI, "GL_ALLOW_DRAW_WIN_HINT_PGI");
    GL_PGI_misc_hints.put(GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI");
    GL_PGI_misc_hints.put(GL_NATIVE_GRAPHICS_END_HINT_PGI, "GL_NATIVE_GRAPHICS_END_HINT_PGI");
    GL_PGI_misc_hints.put(GL_WIDE_LINE_HINT_PGI, "GL_WIDE_LINE_HINT_PGI");
    GL_PGI_misc_hints.put(GL_CONSERVE_MEMORY_HINT_PGI, "GL_CONSERVE_MEMORY_HINT_PGI");
    GL_PGI_misc_hints.put(GL_STRICT_SCISSOR_HINT_PGI, "GL_STRICT_SCISSOR_HINT_PGI");
    GL_PGI_misc_hints.put(GL_CLIP_NEAR_HINT_PGI, "GL_CLIP_NEAR_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALWAYS_SOFT_HINT_PGI, "GL_ALWAYS_SOFT_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_FRG_HINT_PGI, "GL_ALLOW_DRAW_FRG_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_MEM_HINT_PGI, "GL_ALLOW_DRAW_MEM_HINT_PGI");
    GL_PGI_misc_hints.put(GL_RECLAIM_MEMORY_HINT_PGI, "GL_RECLAIM_MEMORY_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALWAYS_FAST_HINT_PGI, "GL_ALWAYS_FAST_HINT_PGI");
    GL_PGI_misc_hints.put(GL_FULL_STIPPLE_HINT_PGI, "GL_FULL_STIPPLE_HINT_PGI");
    GL_PGI_misc_hints.put(GL_PREFER_DOUBLEBUFFER_HINT_PGI, "GL_PREFER_DOUBLEBUFFER_HINT_PGI");
    GL_PGI_misc_hints.put(GL_BACK_NORMALS_HINT_PGI, "GL_BACK_NORMALS_HINT_PGI");
    GL_PGI_misc_hints.put(GL_STRICT_DEPTHFUNC_HINT_PGI, "GL_STRICT_DEPTHFUNC_HINT_PGI");
    GL_PGI_misc_hints.put(GL_STRICT_LIGHTING_HINT_PGI, "GL_STRICT_LIGHTING_HINT_PGI");
    GL_PGI_misc_hints.put(GL_CLIP_FAR_HINT_PGI, "GL_CLIP_FAR_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_OBJ_HINT_PGI, "GL_ALLOW_DRAW_OBJ_HINT_PGI");
  }
  private static final Map<Integer, String> GL_VIV_shader_binary = new HashMap<Integer, String>();
  private static void GL_VIV_shader_binary() {
    GL_VIV_shader_binary.put(GL_SHADER_BINARY_VIV, "GL_SHADER_BINARY_VIV");
  }
  private static final Map<Integer, String> GL_IBM_rasterpos_clip = new HashMap<Integer, String>();
  private static void GL_IBM_rasterpos_clip() {
    GL_IBM_rasterpos_clip.put(GL_RASTER_POSITION_UNCLIPPED_IBM, "GL_RASTER_POSITION_UNCLIPPED_IBM");
  }
  private static final Map<Integer, String> GL_NV_geometry_program4 = new HashMap<Integer, String>();
  private static void GL_NV_geometry_program4() {
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_NV_geometry_program4.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_NV_geometry_program4.put(GL_GEOMETRY_OUTPUT_TYPE_EXT, "GL_GEOMETRY_OUTPUT_TYPE_EXT");
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_NV_geometry_program4.put(GL_PROGRAM_POINT_SIZE_EXT, "GL_PROGRAM_POINT_SIZE_EXT");
    GL_NV_geometry_program4.put(GL_MAX_PROGRAM_OUTPUT_VERTICES_NV, "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV");
    GL_NV_geometry_program4.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_GEOMETRY_VERTICES_OUT_EXT, "GL_GEOMETRY_VERTICES_OUT_EXT");
    GL_NV_geometry_program4.put(GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV, "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV");
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_NV_geometry_program4.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT");
    GL_NV_geometry_program4.put(GL_GEOMETRY_PROGRAM_NV, "GL_GEOMETRY_PROGRAM_NV");
    GL_NV_geometry_program4.put(GL_GEOMETRY_INPUT_TYPE_EXT, "GL_GEOMETRY_INPUT_TYPE_EXT");
  }
  private static final Map<Integer, String> GL_NV_conservative_raster_dilate = new HashMap<Integer, String>();
  private static void GL_NV_conservative_raster_dilate() {
    GL_NV_conservative_raster_dilate.put(GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV, "GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV");
    GL_NV_conservative_raster_dilate.put(GL_CONSERVATIVE_RASTER_DILATE_NV, "GL_CONSERVATIVE_RASTER_DILATE_NV");
    GL_NV_conservative_raster_dilate.put(GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV, "GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV");
  }
  private static final Map<Integer, String> GL_AMD_gpu_shader_int64 = new HashMap<Integer, String>();
  private static void GL_AMD_gpu_shader_int64() {
    GL_AMD_gpu_shader_int64.put(GL_INT8_VEC3_NV, "GL_INT8_VEC3_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT16_VEC2_NV, "GL_UNSIGNED_INT16_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT64_VEC4_NV, "GL_UNSIGNED_INT64_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT8_VEC3_NV, "GL_UNSIGNED_INT8_VEC3_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT16_VEC4_NV, "GL_UNSIGNED_INT16_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT64_VEC2_NV, "GL_UNSIGNED_INT64_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_FLOAT16_VEC3_NV, "GL_FLOAT16_VEC3_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT8_NV, "GL_UNSIGNED_INT8_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT16_NV, "GL_INT16_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT16_VEC4_NV, "GL_INT16_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT64_VEC4_NV, "GL_INT64_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT64_VEC2_NV, "GL_INT64_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT8_NV, "GL_INT8_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT16_VEC2_NV, "GL_INT16_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT8_VEC4_NV, "GL_INT8_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT8_VEC2_NV, "GL_INT8_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT8_VEC2_NV, "GL_UNSIGNED_INT8_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT8_VEC4_NV, "GL_UNSIGNED_INT8_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT16_VEC3_NV, "GL_UNSIGNED_INT16_VEC3_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT64_VEC3_NV, "GL_UNSIGNED_INT64_VEC3_NV");
    GL_AMD_gpu_shader_int64.put(GL_FLOAT16_NV, "GL_FLOAT16_NV");
    GL_AMD_gpu_shader_int64.put(GL_FLOAT16_VEC2_NV, "GL_FLOAT16_VEC2_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT64_NV, "GL_INT64_NV");
    GL_AMD_gpu_shader_int64.put(GL_FLOAT16_VEC4_NV, "GL_FLOAT16_VEC4_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT16_NV, "GL_UNSIGNED_INT16_NV");
    GL_AMD_gpu_shader_int64.put(GL_UNSIGNED_INT64_NV, "GL_UNSIGNED_INT64_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT16_VEC3_NV, "GL_INT16_VEC3_NV");
    GL_AMD_gpu_shader_int64.put(GL_INT64_VEC3_NV, "GL_INT64_VEC3_NV");
  }
  private static final Map<Integer, String> GL_ARB_draw_buffers = new HashMap<Integer, String>();
  private static void GL_ARB_draw_buffers() {
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER6_ARB, "GL_DRAW_BUFFER6_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER13_ARB, "GL_DRAW_BUFFER13_ARB");
    GL_ARB_draw_buffers.put(GL_MAX_DRAW_BUFFERS_ARB, "GL_MAX_DRAW_BUFFERS_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER15_ARB, "GL_DRAW_BUFFER15_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER11_ARB, "GL_DRAW_BUFFER11_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER8_ARB, "GL_DRAW_BUFFER8_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER4_ARB, "GL_DRAW_BUFFER4_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER2_ARB, "GL_DRAW_BUFFER2_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER0_ARB, "GL_DRAW_BUFFER0_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER14_ARB, "GL_DRAW_BUFFER14_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER9_ARB, "GL_DRAW_BUFFER9_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER7_ARB, "GL_DRAW_BUFFER7_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER12_ARB, "GL_DRAW_BUFFER12_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER1_ARB, "GL_DRAW_BUFFER1_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER5_ARB, "GL_DRAW_BUFFER5_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER10_ARB, "GL_DRAW_BUFFER10_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER3_ARB, "GL_DRAW_BUFFER3_ARB");
  }
  private static final Map<Integer, String> GL_NV_depth_nonlinear = new HashMap<Integer, String>();
  private static void GL_NV_depth_nonlinear() {
    GL_NV_depth_nonlinear.put(GL_DEPTH_COMPONENT16_NONLINEAR_NV, "GL_DEPTH_COMPONENT16_NONLINEAR_NV");
  }
  private static final Map<Integer, String> GL_OES_matrix_palette = new HashMap<Integer, String>();
  private static void GL_OES_matrix_palette() {
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_OES, "GL_MATRIX_INDEX_ARRAY_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_BUFFER_BINDING_OES, "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_OES, "GL_WEIGHT_ARRAY_OES");
    GL_OES_matrix_palette.put(GL_MAX_PALETTE_MATRICES_OES, "GL_MAX_PALETTE_MATRICES_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_STRIDE_OES, "GL_MATRIX_INDEX_ARRAY_STRIDE_OES");
    GL_OES_matrix_palette.put(GL_MAX_VERTEX_UNITS_OES, "GL_MAX_VERTEX_UNITS_OES");
    GL_OES_matrix_palette.put(GL_CURRENT_PALETTE_MATRIX_OES, "GL_CURRENT_PALETTE_MATRIX_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_POINTER_OES, "GL_MATRIX_INDEX_ARRAY_POINTER_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_SIZE_OES, "GL_WEIGHT_ARRAY_SIZE_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_STRIDE_OES, "GL_WEIGHT_ARRAY_STRIDE_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_SIZE_OES, "GL_MATRIX_INDEX_ARRAY_SIZE_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES, "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_TYPE_OES, "GL_MATRIX_INDEX_ARRAY_TYPE_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_PALETTE_OES, "GL_MATRIX_PALETTE_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_TYPE_OES, "GL_WEIGHT_ARRAY_TYPE_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_POINTER_OES, "GL_WEIGHT_ARRAY_POINTER_OES");
  }
  private static final Map<Integer, String> GL_ARB_compute_variable_group_size = new HashMap<Integer, String>();
  private static void GL_ARB_compute_variable_group_size() {
    GL_ARB_compute_variable_group_size.put(GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB, "GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB");
    GL_ARB_compute_variable_group_size.put(GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB, "GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB");
    GL_ARB_compute_variable_group_size.put(GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB, "GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB");
    GL_ARB_compute_variable_group_size.put(GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB, "GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB");
  }
  private static final Map<Integer, String> GL_NV_texgen_reflection = new HashMap<Integer, String>();
  private static void GL_NV_texgen_reflection() {
    GL_NV_texgen_reflection.put(GL_REFLECTION_MAP_NV, "GL_REFLECTION_MAP_NV");
    GL_NV_texgen_reflection.put(GL_NORMAL_MAP_NV, "GL_NORMAL_MAP_NV");
  }
  private static final Map<Integer, String> GL_AMD_compressed_3DC_texture = new HashMap<Integer, String>();
  private static void GL_AMD_compressed_3DC_texture() {
    GL_AMD_compressed_3DC_texture.put(GL_3DC_X_AMD, "GL_3DC_X_AMD");
    GL_AMD_compressed_3DC_texture.put(GL_3DC_XY_AMD, "GL_3DC_XY_AMD");
  }
  private static final Map<Integer, String> GL_SGIX_pixel_tiles = new HashMap<Integer, String>();
  private static void GL_SGIX_pixel_tiles() {
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX, "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_CACHE_INCREMENT_SGIX, "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    GL_SGIX_pixel_tiles.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
  }
  private static final Map<Integer, String> GL_EXT_texture_snorm = new HashMap<Integer, String>();
  private static void GL_EXT_texture_snorm() {
    GL_EXT_texture_snorm.put(GL_INTENSITY_SNORM, "GL_INTENSITY_SNORM");
    GL_EXT_texture_snorm.put(GL_ALPHA8_SNORM, "GL_ALPHA8_SNORM");
    GL_EXT_texture_snorm.put(GL_ALPHA_SNORM, "GL_ALPHA_SNORM");
    GL_EXT_texture_snorm.put(GL_SIGNED_NORMALIZED, "GL_SIGNED_NORMALIZED");
    GL_EXT_texture_snorm.put(GL_RGBA8_SNORM, "GL_RGBA8_SNORM");
    GL_EXT_texture_snorm.put(GL_LUMINANCE_SNORM, "GL_LUMINANCE_SNORM");
    GL_EXT_texture_snorm.put(GL_RGB_SNORM, "GL_RGB_SNORM");
    GL_EXT_texture_snorm.put(GL_RGBA_SNORM, "GL_RGBA_SNORM");
    GL_EXT_texture_snorm.put(GL_LUMINANCE8_ALPHA8_SNORM, "GL_LUMINANCE8_ALPHA8_SNORM");
    GL_EXT_texture_snorm.put(GL_RGB16_SNORM, "GL_RGB16_SNORM");
    GL_EXT_texture_snorm.put(GL_LUMINANCE_ALPHA_SNORM, "GL_LUMINANCE_ALPHA_SNORM");
    GL_EXT_texture_snorm.put(GL_R8_SNORM, "GL_R8_SNORM");
    GL_EXT_texture_snorm.put(GL_RG8_SNORM, "GL_RG8_SNORM");
    GL_EXT_texture_snorm.put(GL_LUMINANCE16_SNORM, "GL_LUMINANCE16_SNORM");
    GL_EXT_texture_snorm.put(GL_RGB8_SNORM, "GL_RGB8_SNORM");
    GL_EXT_texture_snorm.put(GL_RED_SNORM, "GL_RED_SNORM");
    GL_EXT_texture_snorm.put(GL_INTENSITY8_SNORM, "GL_INTENSITY8_SNORM");
    GL_EXT_texture_snorm.put(GL_INTENSITY16_SNORM, "GL_INTENSITY16_SNORM");
    GL_EXT_texture_snorm.put(GL_RGBA16_SNORM, "GL_RGBA16_SNORM");
    GL_EXT_texture_snorm.put(GL_RG_SNORM, "GL_RG_SNORM");
    GL_EXT_texture_snorm.put(GL_RG16_SNORM, "GL_RG16_SNORM");
    GL_EXT_texture_snorm.put(GL_LUMINANCE8_SNORM, "GL_LUMINANCE8_SNORM");
    GL_EXT_texture_snorm.put(GL_LUMINANCE16_ALPHA16_SNORM, "GL_LUMINANCE16_ALPHA16_SNORM");
    GL_EXT_texture_snorm.put(GL_ALPHA16_SNORM, "GL_ALPHA16_SNORM");
    GL_EXT_texture_snorm.put(GL_R16_SNORM, "GL_R16_SNORM");
  }
  private static final Map<Integer, String> GL_NV_path_rendering_shared_edge = new HashMap<Integer, String>();
  private static void GL_NV_path_rendering_shared_edge() {
    GL_NV_path_rendering_shared_edge.put(GL_SHARED_EDGE_NV, "GL_SHARED_EDGE_NV");
  }
  private static final Map<Integer, String> GL_ARB_texture_rg = new HashMap<Integer, String>();
  private static void GL_ARB_texture_rg() {
    GL_ARB_texture_rg.put(GL_R16F, "GL_R16F");
    GL_ARB_texture_rg.put(GL_RG, "GL_RG");
    GL_ARB_texture_rg.put(GL_R32F, "GL_R32F");
    GL_ARB_texture_rg.put(GL_R16I, "GL_R16I");
    GL_ARB_texture_rg.put(GL_RG8, "GL_RG8");
    GL_ARB_texture_rg.put(GL_R8I, "GL_R8I");
    GL_ARB_texture_rg.put(GL_RG8I, "GL_RG8I");
    GL_ARB_texture_rg.put(GL_R8, "GL_R8");
    GL_ARB_texture_rg.put(GL_RG_INTEGER, "GL_RG_INTEGER");
    GL_ARB_texture_rg.put(GL_R32UI, "GL_R32UI");
    GL_ARB_texture_rg.put(GL_RG8UI, "GL_RG8UI");
    GL_ARB_texture_rg.put(GL_RG32UI, "GL_RG32UI");
    GL_ARB_texture_rg.put(GL_RG32F, "GL_RG32F");
    GL_ARB_texture_rg.put(GL_R16UI, "GL_R16UI");
    GL_ARB_texture_rg.put(GL_RG32I, "GL_RG32I");
    GL_ARB_texture_rg.put(GL_RG16I, "GL_RG16I");
    GL_ARB_texture_rg.put(GL_R32I, "GL_R32I");
    GL_ARB_texture_rg.put(GL_RG16UI, "GL_RG16UI");
    GL_ARB_texture_rg.put(GL_R16, "GL_R16");
    GL_ARB_texture_rg.put(GL_RG16, "GL_RG16");
    GL_ARB_texture_rg.put(GL_RG16F, "GL_RG16F");
    GL_ARB_texture_rg.put(GL_R8UI, "GL_R8UI");
  }
  private static final Map<Integer, String> GL_ARB_texture_env_dot3 = new HashMap<Integer, String>();
  private static void GL_ARB_texture_env_dot3() {
    GL_ARB_texture_env_dot3.put(GL_DOT3_RGBA_ARB, "GL_DOT3_RGBA_ARB");
    GL_ARB_texture_env_dot3.put(GL_DOT3_RGB_ARB, "GL_DOT3_RGB_ARB");
  }
  private static final Map<Integer, String> GL_ARB_conditional_render_inverted = new HashMap<Integer, String>();
  private static void GL_ARB_conditional_render_inverted() {
    GL_ARB_conditional_render_inverted.put(GL_QUERY_BY_REGION_WAIT_INVERTED, "GL_QUERY_BY_REGION_WAIT_INVERTED");
    GL_ARB_conditional_render_inverted.put(GL_QUERY_WAIT_INVERTED, "GL_QUERY_WAIT_INVERTED");
    GL_ARB_conditional_render_inverted.put(GL_QUERY_BY_REGION_NO_WAIT_INVERTED, "GL_QUERY_BY_REGION_NO_WAIT_INVERTED");
    GL_ARB_conditional_render_inverted.put(GL_QUERY_NO_WAIT_INVERTED, "GL_QUERY_NO_WAIT_INVERTED");
  }
  private static final Map<Integer, String> GL_NV_multisample_coverage = new HashMap<Integer, String>();
  private static void GL_NV_multisample_coverage() {
    GL_NV_multisample_coverage.put(GL_SAMPLES_ARB, "GL_SAMPLES_ARB");
    GL_NV_multisample_coverage.put(GL_COLOR_SAMPLES_NV, "GL_COLOR_SAMPLES_NV");
  }
  private static final Map<Integer, String> GL_OES_rgb8_rgba8 = new HashMap<Integer, String>();
  private static void GL_OES_rgb8_rgba8() {
    GL_OES_rgb8_rgba8.put(GL_RGBA8_OES, "GL_RGBA8_OES");
    GL_OES_rgb8_rgba8.put(GL_RGB8_OES, "GL_RGB8_OES");
  }
  private static final Map<Integer, String> GL_EXT_separate_specular_color = new HashMap<Integer, String>();
  private static void GL_EXT_separate_specular_color() {
    GL_EXT_separate_specular_color.put(GL_SEPARATE_SPECULAR_COLOR_EXT, "GL_SEPARATE_SPECULAR_COLOR_EXT");
    GL_EXT_separate_specular_color.put(GL_LIGHT_MODEL_COLOR_CONTROL_EXT, "GL_LIGHT_MODEL_COLOR_CONTROL_EXT");
    GL_EXT_separate_specular_color.put(GL_SINGLE_COLOR_EXT, "GL_SINGLE_COLOR_EXT");
  }
  private static final Map<Integer, String> GL_NV_deep_texture3D = new HashMap<Integer, String>();
  private static void GL_NV_deep_texture3D() {
    GL_NV_deep_texture3D.put(GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV, "GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV");
    GL_NV_deep_texture3D.put(GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV, "GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV");
  }
  private static final Map<Integer, String> GL_EXT_index_array_formats = new HashMap<Integer, String>();
  private static void GL_EXT_index_array_formats() {
    GL_EXT_index_array_formats.put(GL_IUI_V2F_EXT, "GL_IUI_V2F_EXT");
    GL_EXT_index_array_formats.put(GL_T2F_IUI_N3F_V2F_EXT, "GL_T2F_IUI_N3F_V2F_EXT");
    GL_EXT_index_array_formats.put(GL_IUI_V3F_EXT, "GL_IUI_V3F_EXT");
    GL_EXT_index_array_formats.put(GL_IUI_N3F_V2F_EXT, "GL_IUI_N3F_V2F_EXT");
    GL_EXT_index_array_formats.put(GL_T2F_IUI_N3F_V3F_EXT, "GL_T2F_IUI_N3F_V3F_EXT");
    GL_EXT_index_array_formats.put(GL_T2F_IUI_V2F_EXT, "GL_T2F_IUI_V2F_EXT");
    GL_EXT_index_array_formats.put(GL_IUI_N3F_V3F_EXT, "GL_IUI_N3F_V3F_EXT");
    GL_EXT_index_array_formats.put(GL_T2F_IUI_V3F_EXT, "GL_T2F_IUI_V3F_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_s3tc_srgb = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_s3tc_srgb() {
    GL_EXT_texture_compression_s3tc_srgb.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT");
    GL_EXT_texture_compression_s3tc_srgb.put(GL_COMPRESSED_SRGB_S3TC_DXT1_EXT, "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT");
    GL_EXT_texture_compression_s3tc_srgb.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT");
    GL_EXT_texture_compression_s3tc_srgb.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT");
  }
  private static final Map<Integer, String> GL_ARB_buffer_storage = new HashMap<Integer, String>();
  private static void GL_ARB_buffer_storage() {
    GL_ARB_buffer_storage.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    GL_ARB_buffer_storage.put(GL_CLIENT_STORAGE_BIT, "GL_CLIENT_STORAGE_BIT");
    GL_ARB_buffer_storage.put(GL_DYNAMIC_STORAGE_BIT, "GL_DYNAMIC_STORAGE_BIT");
    GL_ARB_buffer_storage.put(GL_BUFFER_STORAGE_FLAGS, "GL_BUFFER_STORAGE_FLAGS");
    GL_ARB_buffer_storage.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
    GL_ARB_buffer_storage.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT");
    GL_ARB_buffer_storage.put(GL_BUFFER_IMMUTABLE_STORAGE, "GL_BUFFER_IMMUTABLE_STORAGE");
    GL_ARB_buffer_storage.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    GL_ARB_buffer_storage.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
  }
  private static final Map<Integer, String> GL_ARB_instanced_arrays = new HashMap<Integer, String>();
  private static void GL_ARB_instanced_arrays() {
    GL_ARB_instanced_arrays.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB");
  }
  private static final Map<Integer, String> GL_ARB_sample_locations = new HashMap<Integer, String>();
  private static void GL_ARB_sample_locations() {
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_ARB, "GL_SAMPLE_LOCATION_ARB");
    GL_ARB_sample_locations.put(GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB");
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB");
    GL_ARB_sample_locations.put(GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB");
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB");
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB");
    GL_ARB_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB, "GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB");
    GL_ARB_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB");
  }
  private static final Map<Integer, String> GL_OES_texture_mirrored_repeat = new HashMap<Integer, String>();
  private static void GL_OES_texture_mirrored_repeat() {
    GL_OES_texture_mirrored_repeat.put(GL_MIRRORED_REPEAT_OES, "GL_MIRRORED_REPEAT_OES");
  }
  private static final Map<Integer, String> GL_SGIX_sprite = new HashMap<Integer, String>();
  private static void GL_SGIX_sprite() {
    GL_SGIX_sprite.put(GL_SPRITE_EYE_ALIGNED_SGIX, "GL_SPRITE_EYE_ALIGNED_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_OBJECT_ALIGNED_SGIX, "GL_SPRITE_OBJECT_ALIGNED_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_MODE_SGIX, "GL_SPRITE_MODE_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_AXIAL_SGIX, "GL_SPRITE_AXIAL_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_AXIS_SGIX, "GL_SPRITE_AXIS_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_TRANSLATION_SGIX, "GL_SPRITE_TRANSLATION_SGIX");
  }
  private static final Map<Integer, String> GL_NV_fragment_program = new HashMap<Integer, String>();
  private static void GL_NV_fragment_program() {
    GL_NV_fragment_program.put(GL_FRAGMENT_PROGRAM_NV, "GL_FRAGMENT_PROGRAM_NV");
    GL_NV_fragment_program.put(GL_PROGRAM_ERROR_STRING_NV, "GL_PROGRAM_ERROR_STRING_NV");
    GL_NV_fragment_program.put(GL_MAX_TEXTURE_COORDS_NV, "GL_MAX_TEXTURE_COORDS_NV");
    GL_NV_fragment_program.put(GL_MAX_TEXTURE_IMAGE_UNITS_NV, "GL_MAX_TEXTURE_IMAGE_UNITS_NV");
    GL_NV_fragment_program.put(GL_FRAGMENT_PROGRAM_BINDING_NV, "GL_FRAGMENT_PROGRAM_BINDING_NV");
    GL_NV_fragment_program.put(GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV, "GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV");
  }
  private static final Map<Integer, String> GL_EXT_vertex_array_bgra = new HashMap<Integer, String>();
  private static void GL_EXT_vertex_array_bgra() {
    GL_EXT_vertex_array_bgra.put(GL_BGRA, "GL_BGRA");
  }
  private static final Map<Integer, String> GL_SGIX_texture_coordinate_clamp = new HashMap<Integer, String>();
  private static void GL_SGIX_texture_coordinate_clamp() {
    GL_SGIX_texture_coordinate_clamp.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    GL_SGIX_texture_coordinate_clamp.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    GL_SGIX_texture_coordinate_clamp.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
  }
  private static final Map<Integer, String> GL_NV_vertex_program2_option = new HashMap<Integer, String>();
  private static void GL_NV_vertex_program2_option() {
    GL_NV_vertex_program2_option.put(GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV, "GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV");
    GL_NV_vertex_program2_option.put(GL_MAX_PROGRAM_CALL_DEPTH_NV, "GL_MAX_PROGRAM_CALL_DEPTH_NV");
  }
  private static final Map<Integer, String> GL_NV_half_float = new HashMap<Integer, String>();
  private static void GL_NV_half_float() {
    GL_NV_half_float.put(GL_HALF_FLOAT_NV, "GL_HALF_FLOAT_NV");
  }
  private static final Map<Integer, String> GL_EXT_occlusion_query_boolean = new HashMap<Integer, String>();
  private static void GL_EXT_occlusion_query_boolean() {
    GL_EXT_occlusion_query_boolean.put(GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT");
    GL_EXT_occlusion_query_boolean.put(GL_QUERY_RESULT_EXT, "GL_QUERY_RESULT_EXT");
    GL_EXT_occlusion_query_boolean.put(GL_ANY_SAMPLES_PASSED_EXT, "GL_ANY_SAMPLES_PASSED_EXT");
    GL_EXT_occlusion_query_boolean.put(GL_QUERY_RESULT_AVAILABLE_EXT, "GL_QUERY_RESULT_AVAILABLE_EXT");
    GL_EXT_occlusion_query_boolean.put(GL_CURRENT_QUERY_EXT, "GL_CURRENT_QUERY_EXT");
  }
  private static final Map<Integer, String> GL_ARB_vertex_attrib_binding = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_attrib_binding() {
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_BINDING_STRIDE, "GL_VERTEX_BINDING_STRIDE");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_BINDING_DIVISOR, "GL_VERTEX_BINDING_DIVISOR");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_BINDING_OFFSET, "GL_VERTEX_BINDING_OFFSET");
    GL_ARB_vertex_attrib_binding.put(GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET");
    GL_ARB_vertex_attrib_binding.put(GL_MAX_VERTEX_ATTRIB_BINDINGS, "GL_MAX_VERTEX_ATTRIB_BINDINGS");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_ATTRIB_BINDING, "GL_VERTEX_ATTRIB_BINDING");
  }
  private static final Map<Integer, String> GL_ARB_texture_rgb10_a2ui = new HashMap<Integer, String>();
  private static void GL_ARB_texture_rgb10_a2ui() {
    GL_ARB_texture_rgb10_a2ui.put(GL_RGB10_A2UI, "GL_RGB10_A2UI");
  }
  private static final Map<Integer, String> GL_AMD_program_binary_Z400 = new HashMap<Integer, String>();
  private static void GL_AMD_program_binary_Z400() {
    GL_AMD_program_binary_Z400.put(GL_Z400_BINARY_AMD, "GL_Z400_BINARY_AMD");
  }
  private static final Map<Integer, String> GL_SGIS_pixel_texture = new HashMap<Integer, String>();
  private static void GL_SGIS_pixel_texture() {
    GL_SGIS_pixel_texture.put(GL_PIXEL_GROUP_COLOR_SGIS, "GL_PIXEL_GROUP_COLOR_SGIS");
    GL_SGIS_pixel_texture.put(GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS");
    GL_SGIS_pixel_texture.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    GL_SGIS_pixel_texture.put(GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS");
  }
  private static final Map<Integer, String> GL_NV_copy_depth_to_color = new HashMap<Integer, String>();
  private static void GL_NV_copy_depth_to_color() {
    GL_NV_copy_depth_to_color.put(GL_DEPTH_STENCIL_TO_BGRA_NV, "GL_DEPTH_STENCIL_TO_BGRA_NV");
    GL_NV_copy_depth_to_color.put(GL_DEPTH_STENCIL_TO_RGBA_NV, "GL_DEPTH_STENCIL_TO_RGBA_NV");
  }
  private static final Map<Integer, String> GL_IMG_texture_compression_pvrtc2 = new HashMap<Integer, String>();
  private static void GL_IMG_texture_compression_pvrtc2() {
    GL_IMG_texture_compression_pvrtc2.put(GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG, "GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG");
    GL_IMG_texture_compression_pvrtc2.put(GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG, "GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG");
  }
  private static final Map<Integer, String> GL_EXT_raster_multisample = new HashMap<Integer, String>();
  private static void GL_EXT_raster_multisample() {
    GL_EXT_raster_multisample.put(GL_RASTER_MULTISAMPLE_EXT, "GL_RASTER_MULTISAMPLE_EXT");
    GL_EXT_raster_multisample.put(GL_EFFECTIVE_RASTER_SAMPLES_EXT, "GL_EFFECTIVE_RASTER_SAMPLES_EXT");
    GL_EXT_raster_multisample.put(GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT, "GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT");
    GL_EXT_raster_multisample.put(GL_RASTER_SAMPLES_EXT, "GL_RASTER_SAMPLES_EXT");
    GL_EXT_raster_multisample.put(GL_MAX_RASTER_SAMPLES_EXT, "GL_MAX_RASTER_SAMPLES_EXT");
    GL_EXT_raster_multisample.put(GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT, "GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT");
  }
  private static final Map<Integer, String> GL_OML_resample = new HashMap<Integer, String>();
  private static void GL_OML_resample() {
    GL_OML_resample.put(GL_RESAMPLE_AVERAGE_OML, "GL_RESAMPLE_AVERAGE_OML");
    GL_OML_resample.put(GL_UNPACK_RESAMPLE_OML, "GL_UNPACK_RESAMPLE_OML");
    GL_OML_resample.put(GL_RESAMPLE_DECIMATE_OML, "GL_RESAMPLE_DECIMATE_OML");
    GL_OML_resample.put(GL_PACK_RESAMPLE_OML, "GL_PACK_RESAMPLE_OML");
    GL_OML_resample.put(GL_RESAMPLE_REPLICATE_OML, "GL_RESAMPLE_REPLICATE_OML");
    GL_OML_resample.put(GL_RESAMPLE_ZERO_FILL_OML, "GL_RESAMPLE_ZERO_FILL_OML");
  }
  private static final Map<Integer, String> GL_ARB_shadow = new HashMap<Integer, String>();
  private static void GL_ARB_shadow() {
    GL_ARB_shadow.put(GL_COMPARE_R_TO_TEXTURE_ARB, "GL_COMPARE_R_TO_TEXTURE_ARB");
    GL_ARB_shadow.put(GL_TEXTURE_COMPARE_MODE_ARB, "GL_TEXTURE_COMPARE_MODE_ARB");
    GL_ARB_shadow.put(GL_TEXTURE_COMPARE_FUNC_ARB, "GL_TEXTURE_COMPARE_FUNC_ARB");
  }
  private static final Map<Integer, String> GL_NV_pixel_data_range = new HashMap<Integer, String>();
  private static void GL_NV_pixel_data_range() {
    GL_NV_pixel_data_range.put(GL_WRITE_PIXEL_DATA_RANGE_NV, "GL_WRITE_PIXEL_DATA_RANGE_NV");
    GL_NV_pixel_data_range.put(GL_READ_PIXEL_DATA_RANGE_LENGTH_NV, "GL_READ_PIXEL_DATA_RANGE_LENGTH_NV");
    GL_NV_pixel_data_range.put(GL_READ_PIXEL_DATA_RANGE_NV, "GL_READ_PIXEL_DATA_RANGE_NV");
    GL_NV_pixel_data_range.put(GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV, "GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV");
    GL_NV_pixel_data_range.put(GL_READ_PIXEL_DATA_RANGE_POINTER_NV, "GL_READ_PIXEL_DATA_RANGE_POINTER_NV");
    GL_NV_pixel_data_range.put(GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV, "GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV");
  }
  private static final Map<Integer, String> GL_ARB_ES2_compatibility = new HashMap<Integer, String>();
  private static void GL_ARB_ES2_compatibility() {
    GL_ARB_ES2_compatibility.put(GL_MAX_VARYING_VECTORS, "GL_MAX_VARYING_VECTORS");
    GL_ARB_ES2_compatibility.put(GL_SHADER_BINARY_FORMATS, "GL_SHADER_BINARY_FORMATS");
    GL_ARB_ES2_compatibility.put(GL_MEDIUM_FLOAT, "GL_MEDIUM_FLOAT");
    GL_ARB_ES2_compatibility.put(GL_LOW_FLOAT, "GL_LOW_FLOAT");
    GL_ARB_ES2_compatibility.put(GL_SHADER_COMPILER, "GL_SHADER_COMPILER");
    GL_ARB_ES2_compatibility.put(GL_IMPLEMENTATION_COLOR_READ_FORMAT, "GL_IMPLEMENTATION_COLOR_READ_FORMAT");
    GL_ARB_ES2_compatibility.put(GL_HIGH_INT, "GL_HIGH_INT");
    GL_ARB_ES2_compatibility.put(GL_IMPLEMENTATION_COLOR_READ_TYPE, "GL_IMPLEMENTATION_COLOR_READ_TYPE");
    GL_ARB_ES2_compatibility.put(GL_NUM_SHADER_BINARY_FORMATS, "GL_NUM_SHADER_BINARY_FORMATS");
    GL_ARB_ES2_compatibility.put(GL_HIGH_FLOAT, "GL_HIGH_FLOAT");
    GL_ARB_ES2_compatibility.put(GL_LOW_INT, "GL_LOW_INT");
    GL_ARB_ES2_compatibility.put(GL_MEDIUM_INT, "GL_MEDIUM_INT");
    GL_ARB_ES2_compatibility.put(GL_MAX_FRAGMENT_UNIFORM_VECTORS, "GL_MAX_FRAGMENT_UNIFORM_VECTORS");
    GL_ARB_ES2_compatibility.put(GL_RGB565, "GL_RGB565");
    GL_ARB_ES2_compatibility.put(GL_MAX_VERTEX_UNIFORM_VECTORS, "GL_MAX_VERTEX_UNIFORM_VECTORS");
    GL_ARB_ES2_compatibility.put(GL_FIXED, "GL_FIXED");
  }
  private static final Map<Integer, String> GL_SGIX_interlace = new HashMap<Integer, String>();
  private static void GL_SGIX_interlace() {
    GL_SGIX_interlace.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
  }
  private static final Map<Integer, String> GL_NV_viewport_array = new HashMap<Integer, String>();
  private static void GL_NV_viewport_array() {
    GL_NV_viewport_array.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_NV_viewport_array.put(GL_MAX_VIEWPORTS_NV, "GL_MAX_VIEWPORTS_NV");
    GL_NV_viewport_array.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_NV_viewport_array.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV");
    GL_NV_viewport_array.put(GL_VIEWPORT_SUBPIXEL_BITS_NV, "GL_VIEWPORT_SUBPIXEL_BITS_NV");
    GL_NV_viewport_array.put(GL_VIEWPORT_BOUNDS_RANGE_NV, "GL_VIEWPORT_BOUNDS_RANGE_NV");
    GL_NV_viewport_array.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_NV_viewport_array.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
  }
  private static final Map<Integer, String> GL_EXT_sRGB = new HashMap<Integer, String>();
  private static void GL_EXT_sRGB() {
    GL_EXT_sRGB.put(GL_SRGB_EXT, "GL_SRGB_EXT");
    GL_EXT_sRGB.put(GL_SRGB8_ALPHA8_EXT, "GL_SRGB8_ALPHA8_EXT");
    GL_EXT_sRGB.put(GL_SRGB_ALPHA_EXT, "GL_SRGB_ALPHA_EXT");
    GL_EXT_sRGB.put(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT");
  }
  private static final Map<Integer, String> GL_EXT_polygon_offset_clamp = new HashMap<Integer, String>();
  private static void GL_EXT_polygon_offset_clamp() {
    GL_EXT_polygon_offset_clamp.put(GL_POLYGON_OFFSET_CLAMP_EXT, "GL_POLYGON_OFFSET_CLAMP_EXT");
  }
  private static final Map<Integer, String> GL_ARM_mali_shader_binary = new HashMap<Integer, String>();
  private static void GL_ARM_mali_shader_binary() {
    GL_ARM_mali_shader_binary.put(GL_MALI_SHADER_BINARY_ARM, "GL_MALI_SHADER_BINARY_ARM");
  }
  private static final Map<Integer, String> GL_EXT_paletted_texture = new HashMap<Integer, String>();
  private static void GL_EXT_paletted_texture() {
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX2_EXT, "GL_COLOR_INDEX2_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX8_EXT, "GL_COLOR_INDEX8_EXT");
    GL_EXT_paletted_texture.put(GL_TEXTURE_INDEX_SIZE_EXT, "GL_TEXTURE_INDEX_SIZE_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX16_EXT, "GL_COLOR_INDEX16_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX1_EXT, "GL_COLOR_INDEX1_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX4_EXT, "GL_COLOR_INDEX4_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX12_EXT, "GL_COLOR_INDEX12_EXT");
  }
  private static final Map<Integer, String> GL_EXT_direct_state_access = new HashMap<Integer, String>();
  private static void GL_EXT_direct_state_access() {
    GL_EXT_direct_state_access.put(GL_PROGRAM_MATRIX_EXT, "GL_PROGRAM_MATRIX_EXT");
    GL_EXT_direct_state_access.put(GL_TRANSPOSE_PROGRAM_MATRIX_EXT, "GL_TRANSPOSE_PROGRAM_MATRIX_EXT");
    GL_EXT_direct_state_access.put(GL_PROGRAM_MATRIX_STACK_DEPTH_EXT, "GL_PROGRAM_MATRIX_STACK_DEPTH_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_shared_exponent = new HashMap<Integer, String>();
  private static void GL_EXT_texture_shared_exponent() {
    GL_EXT_texture_shared_exponent.put(GL_UNSIGNED_INT_5_9_9_9_REV_EXT, "GL_UNSIGNED_INT_5_9_9_9_REV_EXT");
    GL_EXT_texture_shared_exponent.put(GL_TEXTURE_SHARED_SIZE_EXT, "GL_TEXTURE_SHARED_SIZE_EXT");
    GL_EXT_texture_shared_exponent.put(GL_RGB9_E5_EXT, "GL_RGB9_E5_EXT");
  }
  private static final Map<Integer, String> GL_REND_screen_coordinates = new HashMap<Integer, String>();
  private static void GL_REND_screen_coordinates() {
    GL_REND_screen_coordinates.put(GL_SCREEN_COORDINATES_REND, "GL_SCREEN_COORDINATES_REND");
    GL_REND_screen_coordinates.put(GL_INVERTED_SCREEN_W_REND, "GL_INVERTED_SCREEN_W_REND");
  }
  private static final Map<Integer, String> GL_SGIS_sharpen_texture = new HashMap<Integer, String>();
  private static void GL_SGIS_sharpen_texture() {
    GL_SGIS_sharpen_texture.put(GL_LINEAR_SHARPEN_COLOR_SGIS, "GL_LINEAR_SHARPEN_COLOR_SGIS");
    GL_SGIS_sharpen_texture.put(GL_LINEAR_SHARPEN_ALPHA_SGIS, "GL_LINEAR_SHARPEN_ALPHA_SGIS");
    GL_SGIS_sharpen_texture.put(GL_LINEAR_SHARPEN_SGIS, "GL_LINEAR_SHARPEN_SGIS");
    GL_SGIS_sharpen_texture.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
  }
  private static final Map<Integer, String> GL_EXT_blend_minmax = new HashMap<Integer, String>();
  private static void GL_EXT_blend_minmax() {
    GL_EXT_blend_minmax.put(GL_MAX_EXT, "GL_MAX_EXT");
    GL_EXT_blend_minmax.put(GL_FUNC_ADD_EXT, "GL_FUNC_ADD_EXT");
    GL_EXT_blend_minmax.put(GL_BLEND_EQUATION_EXT, "GL_BLEND_EQUATION_EXT");
    GL_EXT_blend_minmax.put(GL_MIN_EXT, "GL_MIN_EXT");
  }
  private static final Map<Integer, String> GL_EXT_polygon_offset = new HashMap<Integer, String>();
  private static void GL_EXT_polygon_offset() {
    GL_EXT_polygon_offset.put(GL_POLYGON_OFFSET_EXT, "GL_POLYGON_OFFSET_EXT");
    GL_EXT_polygon_offset.put(GL_POLYGON_OFFSET_BIAS_EXT, "GL_POLYGON_OFFSET_BIAS_EXT");
    GL_EXT_polygon_offset.put(GL_POLYGON_OFFSET_FACTOR_EXT, "GL_POLYGON_OFFSET_FACTOR_EXT");
  }
  private static final Map<Integer, String> GL_SGIS_point_line_texgen = new HashMap<Integer, String>();
  private static void GL_SGIS_point_line_texgen() {
    GL_SGIS_point_line_texgen.put(GL_OBJECT_LINE_SGIS, "GL_OBJECT_LINE_SGIS");
    GL_SGIS_point_line_texgen.put(GL_OBJECT_DISTANCE_TO_LINE_SGIS, "GL_OBJECT_DISTANCE_TO_LINE_SGIS");
    GL_SGIS_point_line_texgen.put(GL_EYE_POINT_SGIS, "GL_EYE_POINT_SGIS");
    GL_SGIS_point_line_texgen.put(GL_EYE_DISTANCE_TO_LINE_SGIS, "GL_EYE_DISTANCE_TO_LINE_SGIS");
    GL_SGIS_point_line_texgen.put(GL_EYE_LINE_SGIS, "GL_EYE_LINE_SGIS");
    GL_SGIS_point_line_texgen.put(GL_OBJECT_DISTANCE_TO_POINT_SGIS, "GL_OBJECT_DISTANCE_TO_POINT_SGIS");
    GL_SGIS_point_line_texgen.put(GL_OBJECT_POINT_SGIS, "GL_OBJECT_POINT_SGIS");
    GL_SGIS_point_line_texgen.put(GL_EYE_DISTANCE_TO_POINT_SGIS, "GL_EYE_DISTANCE_TO_POINT_SGIS");
  }
  private static final Map<Integer, String> GL_ARB_imaging = new HashMap<Integer, String>();
  private static void GL_ARB_imaging() {
    GL_ARB_imaging.put(GL_TABLE_TOO_LARGE, "GL_TABLE_TOO_LARGE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_RED_BIAS, "GL_POST_COLOR_MATRIX_RED_BIAS");
    GL_ARB_imaging.put(GL_HISTOGRAM_WIDTH, "GL_HISTOGRAM_WIDTH");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_BLUE_BIAS, "GL_POST_COLOR_MATRIX_BLUE_BIAS");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_BLUE_SCALE, "GL_POST_CONVOLUTION_BLUE_SCALE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS, "GL_POST_COLOR_MATRIX_ALPHA_BIAS");
    GL_ARB_imaging.put(GL_BLEND_EQUATION, "GL_BLEND_EQUATION");
    GL_ARB_imaging.put(GL_HISTOGRAM_GREEN_SIZE, "GL_HISTOGRAM_GREEN_SIZE");
    GL_ARB_imaging.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_ALPHA_SIZE, "GL_COLOR_TABLE_ALPHA_SIZE");
    GL_ARB_imaging.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    GL_ARB_imaging.put(GL_HISTOGRAM_RED_SIZE, "GL_HISTOGRAM_RED_SIZE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_GREEN_BIAS, "GL_POST_CONVOLUTION_GREEN_BIAS");
    GL_ARB_imaging.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    GL_ARB_imaging.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_GREEN_SCALE, "GL_POST_COLOR_MATRIX_GREEN_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_BLUE_SCALE, "GL_POST_COLOR_MATRIX_BLUE_SCALE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_WIDTH, "GL_CONVOLUTION_WIDTH");
    GL_ARB_imaging.put(GL_COLOR_TABLE_FORMAT, "GL_COLOR_TABLE_FORMAT");
    GL_ARB_imaging.put(GL_COLOR_TABLE_RED_SIZE, "GL_COLOR_TABLE_RED_SIZE");
    GL_ARB_imaging.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_LUMINANCE_SIZE, "GL_COLOR_TABLE_LUMINANCE_SIZE");
    GL_ARB_imaging.put(GL_REDUCE, "GL_REDUCE");
    GL_ARB_imaging.put(GL_CONVOLUTION_BORDER_COLOR, "GL_CONVOLUTION_BORDER_COLOR");
    GL_ARB_imaging.put(GL_MINMAX_SINK, "GL_MINMAX_SINK");
    GL_ARB_imaging.put(GL_PROXY_COLOR_TABLE, "GL_PROXY_COLOR_TABLE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_GREEN_BIAS, "GL_POST_COLOR_MATRIX_GREEN_BIAS");
    GL_ARB_imaging.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    GL_ARB_imaging.put(GL_COLOR_MATRIX, "GL_COLOR_MATRIX");
    GL_ARB_imaging.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH, "GL_MAX_COLOR_MATRIX_STACK_DEPTH");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_ALPHA_BIAS, "GL_POST_CONVOLUTION_ALPHA_BIAS");
    GL_ARB_imaging.put(GL_COLOR_TABLE_WIDTH, "GL_COLOR_TABLE_WIDTH");
    GL_ARB_imaging.put(GL_CONSTANT_BORDER, "GL_CONSTANT_BORDER");
    GL_ARB_imaging.put(GL_COLOR_TABLE_BLUE_SIZE, "GL_COLOR_TABLE_BLUE_SIZE");
    GL_ARB_imaging.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    GL_ARB_imaging.put(GL_REPLICATE_BORDER, "GL_REPLICATE_BORDER");
    GL_ARB_imaging.put(GL_COLOR_TABLE_INTENSITY_SIZE, "GL_COLOR_TABLE_INTENSITY_SIZE");
    GL_ARB_imaging.put(GL_HISTOGRAM_FORMAT, "GL_HISTOGRAM_FORMAT");
    GL_ARB_imaging.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    GL_ARB_imaging.put(GL_HISTOGRAM, "GL_HISTOGRAM");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE, "GL_POST_COLOR_MATRIX_ALPHA_SCALE");
    GL_ARB_imaging.put(GL_MINMAX, "GL_MINMAX");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    GL_ARB_imaging.put(GL_MAX_CONVOLUTION_WIDTH, "GL_MAX_CONVOLUTION_WIDTH");
    GL_ARB_imaging.put(GL_SEPARABLE_2D, "GL_SEPARABLE_2D");
    GL_ARB_imaging.put(GL_MINMAX_FORMAT, "GL_MINMAX_FORMAT");
    GL_ARB_imaging.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    GL_ARB_imaging.put(GL_COLOR_MATRIX_STACK_DEPTH, "GL_COLOR_MATRIX_STACK_DEPTH");
    GL_ARB_imaging.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_RED_SCALE, "GL_POST_COLOR_MATRIX_RED_SCALE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_BLUE_BIAS, "GL_POST_CONVOLUTION_BLUE_BIAS");
    GL_ARB_imaging.put(GL_HISTOGRAM_BLUE_SIZE, "GL_HISTOGRAM_BLUE_SIZE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_ALPHA_SCALE, "GL_POST_CONVOLUTION_ALPHA_SCALE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_RED_BIAS, "GL_POST_CONVOLUTION_RED_BIAS");
    GL_ARB_imaging.put(GL_HISTOGRAM_LUMINANCE_SIZE, "GL_HISTOGRAM_LUMINANCE_SIZE");
    GL_ARB_imaging.put(GL_MIN, "GL_MIN");
    GL_ARB_imaging.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE");
    GL_ARB_imaging.put(GL_CONVOLUTION_HEIGHT, "GL_CONVOLUTION_HEIGHT");
    GL_ARB_imaging.put(GL_HISTOGRAM_ALPHA_SIZE, "GL_HISTOGRAM_ALPHA_SIZE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_GREEN_SIZE, "GL_COLOR_TABLE_GREEN_SIZE");
    GL_ARB_imaging.put(GL_BLEND_COLOR, "GL_BLEND_COLOR");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_RED_SCALE, "GL_POST_CONVOLUTION_RED_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_FORMAT, "GL_CONVOLUTION_FORMAT");
    GL_ARB_imaging.put(GL_MAX, "GL_MAX");
    GL_ARB_imaging.put(GL_HISTOGRAM_SINK, "GL_HISTOGRAM_SINK");
    GL_ARB_imaging.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_GREEN_SCALE, "GL_POST_CONVOLUTION_GREEN_SCALE");
    GL_ARB_imaging.put(GL_PROXY_HISTOGRAM, "GL_PROXY_HISTOGRAM");
    GL_ARB_imaging.put(GL_MAX_CONVOLUTION_HEIGHT, "GL_MAX_CONVOLUTION_HEIGHT");
    GL_ARB_imaging.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
  }
  private static final Map<Integer, String> GL_ARB_clip_control = new HashMap<Integer, String>();
  private static void GL_ARB_clip_control() {
    GL_ARB_clip_control.put(GL_UPPER_LEFT, "GL_UPPER_LEFT");
    GL_ARB_clip_control.put(GL_LOWER_LEFT, "GL_LOWER_LEFT");
    GL_ARB_clip_control.put(GL_ZERO_TO_ONE, "GL_ZERO_TO_ONE");
    GL_ARB_clip_control.put(GL_CLIP_DEPTH_MODE, "GL_CLIP_DEPTH_MODE");
    GL_ARB_clip_control.put(GL_CLIP_ORIGIN, "GL_CLIP_ORIGIN");
    GL_ARB_clip_control.put(GL_NEGATIVE_ONE_TO_ONE, "GL_NEGATIVE_ONE_TO_ONE");
  }
  private static final Map<Integer, String> GL_EXT_YUV_target = new HashMap<Integer, String>();
  private static void GL_EXT_YUV_target() {
    GL_EXT_YUV_target.put(GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT, "GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT");
    GL_EXT_YUV_target.put(GL_TEXTURE_EXTERNAL_OES, "GL_TEXTURE_EXTERNAL_OES");
    GL_EXT_YUV_target.put(GL_TEXTURE_BINDING_EXTERNAL_OES, "GL_TEXTURE_BINDING_EXTERNAL_OES");
    GL_EXT_YUV_target.put(GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES, "GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES");
  }
  private static final Map<Integer, String> GL_SGIS_fog_function = new HashMap<Integer, String>();
  private static void GL_SGIS_fog_function() {
    GL_SGIS_fog_function.put(GL_MAX_FOG_FUNC_POINTS_SGIS, "GL_MAX_FOG_FUNC_POINTS_SGIS");
    GL_SGIS_fog_function.put(GL_FOG_FUNC_POINTS_SGIS, "GL_FOG_FUNC_POINTS_SGIS");
    GL_SGIS_fog_function.put(GL_FOG_FUNC_SGIS, "GL_FOG_FUNC_SGIS");
  }
  private static final Map<Integer, String> GL_OES_depth24 = new HashMap<Integer, String>();
  private static void GL_OES_depth24() {
    GL_OES_depth24.put(GL_DEPTH_COMPONENT24_OES, "GL_DEPTH_COMPONENT24_OES");
  }
  private static final Map<Integer, String> GL_NV_non_square_matrices = new HashMap<Integer, String>();
  private static void GL_NV_non_square_matrices() {
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT4x2_NV, "GL_FLOAT_MAT4x2_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT3x4_NV, "GL_FLOAT_MAT3x4_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT3x2_NV, "GL_FLOAT_MAT3x2_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT4x3_NV, "GL_FLOAT_MAT4x3_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT2x3_NV, "GL_FLOAT_MAT2x3_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT2x4_NV, "GL_FLOAT_MAT2x4_NV");
  }
  private static final Map<Integer, String> GL_APPLE_specular_vector = new HashMap<Integer, String>();
  private static void GL_APPLE_specular_vector() {
    GL_APPLE_specular_vector.put(GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE, "GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE");
  }
  private static final Map<Integer, String> GL_AMD_sample_positions = new HashMap<Integer, String>();
  private static void GL_AMD_sample_positions() {
    GL_AMD_sample_positions.put(GL_SUBSAMPLE_DISTANCE_AMD, "GL_SUBSAMPLE_DISTANCE_AMD");
  }
  private static final Map<Integer, String> GL_ARB_texture_filter_minmax = new HashMap<Integer, String>();
  private static void GL_ARB_texture_filter_minmax() {
    GL_ARB_texture_filter_minmax.put(GL_TEXTURE_REDUCTION_MODE_ARB, "GL_TEXTURE_REDUCTION_MODE_ARB");
    GL_ARB_texture_filter_minmax.put(GL_WEIGHTED_AVERAGE_ARB, "GL_WEIGHTED_AVERAGE_ARB");
  }
  private static final Map<Integer, String> GL_OES_blend_subtract = new HashMap<Integer, String>();
  private static void GL_OES_blend_subtract() {
    GL_OES_blend_subtract.put(GL_FUNC_SUBTRACT_OES, "GL_FUNC_SUBTRACT_OES");
    GL_OES_blend_subtract.put(GL_BLEND_EQUATION_OES, "GL_BLEND_EQUATION_OES");
    GL_OES_blend_subtract.put(GL_FUNC_ADD_OES, "GL_FUNC_ADD_OES");
    GL_OES_blend_subtract.put(GL_FUNC_REVERSE_SUBTRACT_OES, "GL_FUNC_REVERSE_SUBTRACT_OES");
  }
  private static final Map<Integer, String> GL_ARB_point_parameters = new HashMap<Integer, String>();
  private static void GL_ARB_point_parameters() {
    GL_ARB_point_parameters.put(GL_POINT_FADE_THRESHOLD_SIZE_ARB, "GL_POINT_FADE_THRESHOLD_SIZE_ARB");
    GL_ARB_point_parameters.put(GL_POINT_SIZE_MIN_ARB, "GL_POINT_SIZE_MIN_ARB");
    GL_ARB_point_parameters.put(GL_POINT_DISTANCE_ATTENUATION_ARB, "GL_POINT_DISTANCE_ATTENUATION_ARB");
    GL_ARB_point_parameters.put(GL_POINT_SIZE_MAX_ARB, "GL_POINT_SIZE_MAX_ARB");
  }
  private static final Map<Integer, String> GL_OES_depth32 = new HashMap<Integer, String>();
  private static void GL_OES_depth32() {
    GL_OES_depth32.put(GL_DEPTH_COMPONENT32_OES, "GL_DEPTH_COMPONENT32_OES");
  }
  private static final Map<Integer, String> GL_APPLE_fence = new HashMap<Integer, String>();
  private static void GL_APPLE_fence() {
    GL_APPLE_fence.put(GL_FENCE_APPLE, "GL_FENCE_APPLE");
    GL_APPLE_fence.put(GL_DRAW_PIXELS_APPLE, "GL_DRAW_PIXELS_APPLE");
  }
  private static final Map<Integer, String> GL_SGIS_generate_mipmap = new HashMap<Integer, String>();
  private static void GL_SGIS_generate_mipmap() {
    GL_SGIS_generate_mipmap.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    GL_SGIS_generate_mipmap.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
  }
  private static final Map<Integer, String> GL_OVR_multiview = new HashMap<Integer, String>();
  private static void GL_OVR_multiview() {
    GL_OVR_multiview.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR");
    GL_OVR_multiview.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR");
    GL_OVR_multiview.put(GL_MAX_VIEWS_OVR, "GL_MAX_VIEWS_OVR");
    GL_OVR_multiview.put(GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR, "GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR");
  }
  private static final Map<Integer, String> GL_ATI_separate_stencil = new HashMap<Integer, String>();
  private static void GL_ATI_separate_stencil() {
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_FAIL_ATI, "GL_STENCIL_BACK_FAIL_ATI");
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI, "GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI");
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI, "GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI");
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_FUNC_ATI, "GL_STENCIL_BACK_FUNC_ATI");
  }
  private static final Map<Integer, String> GL_ARB_vertex_type_10f_11f_11f_rev = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_type_10f_11f_11f_rev() {
    GL_ARB_vertex_type_10f_11f_11f_rev.put(GL_UNSIGNED_INT_10F_11F_11F_REV, "GL_UNSIGNED_INT_10F_11F_11F_REV");
  }
  private static final Map<Integer, String> GL_ARB_texture_mirror_clamp_to_edge = new HashMap<Integer, String>();
  private static void GL_ARB_texture_mirror_clamp_to_edge() {
    GL_ARB_texture_mirror_clamp_to_edge.put(GL_MIRROR_CLAMP_TO_EDGE, "GL_MIRROR_CLAMP_TO_EDGE");
  }
  private static final Map<Integer, String> GL_EXT_disjoint_timer_query = new HashMap<Integer, String>();
  private static void GL_EXT_disjoint_timer_query() {
    GL_EXT_disjoint_timer_query.put(GL_GPU_DISJOINT_EXT, "GL_GPU_DISJOINT_EXT");
    GL_EXT_disjoint_timer_query.put(GL_QUERY_RESULT_EXT, "GL_QUERY_RESULT_EXT");
    GL_EXT_disjoint_timer_query.put(GL_QUERY_RESULT_AVAILABLE_EXT, "GL_QUERY_RESULT_AVAILABLE_EXT");
    GL_EXT_disjoint_timer_query.put(GL_QUERY_COUNTER_BITS_EXT, "GL_QUERY_COUNTER_BITS_EXT");
    GL_EXT_disjoint_timer_query.put(GL_CURRENT_QUERY_EXT, "GL_CURRENT_QUERY_EXT");
    GL_EXT_disjoint_timer_query.put(GL_TIME_ELAPSED_EXT, "GL_TIME_ELAPSED_EXT");
    GL_EXT_disjoint_timer_query.put(GL_TIMESTAMP_EXT, "GL_TIMESTAMP_EXT");
  }
  private static final Map<Integer, String> GL_ATI_vertex_streams = new HashMap<Integer, String>();
  private static void GL_ATI_vertex_streams() {
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM1_ATI, "GL_VERTEX_STREAM1_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM6_ATI, "GL_VERTEX_STREAM6_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM5_ATI, "GL_VERTEX_STREAM5_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_SOURCE_ATI, "GL_VERTEX_SOURCE_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM7_ATI, "GL_VERTEX_STREAM7_ATI");
    GL_ATI_vertex_streams.put(GL_MAX_VERTEX_STREAMS_ATI, "GL_MAX_VERTEX_STREAMS_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM3_ATI, "GL_VERTEX_STREAM3_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM4_ATI, "GL_VERTEX_STREAM4_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM2_ATI, "GL_VERTEX_STREAM2_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM0_ATI, "GL_VERTEX_STREAM0_ATI");
  }
  private static final Map<Integer, String> GL_SGIS_texture_edge_clamp = new HashMap<Integer, String>();
  private static void GL_SGIS_texture_edge_clamp() {
    GL_SGIS_texture_edge_clamp.put(GL_CLAMP_TO_EDGE_SGIS, "GL_CLAMP_TO_EDGE_SGIS");
  }
  private static final Map<Integer, String> GL_OES_texture_compression_astc = new HashMap<Integer, String>();
  private static void GL_OES_texture_compression_astc() {
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_8x6_KHR, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_10x5_KHR, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_3x3x3_OES, "GL_COMPRESSED_RGBA_ASTC_3x3x3_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_5x5_KHR, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_4x3x3_OES, "GL_COMPRESSED_RGBA_ASTC_4x3x3_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_5x5x5_OES, "GL_COMPRESSED_RGBA_ASTC_5x5x5_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_8x5_KHR, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_5x4_KHR, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_12x12_KHR, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_4x4x4_OES, "GL_COMPRESSED_RGBA_ASTC_4x4x4_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_6x6_KHR, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_5x4x4_OES, "GL_COMPRESSED_RGBA_ASTC_5x4x4_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_10x6_KHR, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_6x5x5_OES, "GL_COMPRESSED_RGBA_ASTC_6x5x5_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_5x5x4_OES, "GL_COMPRESSED_RGBA_ASTC_5x5x4_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_6x6x6_OES, "GL_COMPRESSED_RGBA_ASTC_6x6x6_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_8x8_KHR, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_12x10_KHR, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_10x10_KHR, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_6x5_KHR, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_4x4_KHR, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_4x4x3_OES, "GL_COMPRESSED_RGBA_ASTC_4x4x3_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_6x6x5_OES, "GL_COMPRESSED_RGBA_ASTC_6x6x5_OES");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_RGBA_ASTC_10x8_KHR, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR");
    GL_OES_texture_compression_astc.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR");
  }
  private static final Map<Integer, String> GL_ARB_bindless_texture = new HashMap<Integer, String>();
  private static void GL_ARB_bindless_texture() {
    GL_ARB_bindless_texture.put(GL_UNSIGNED_INT64_ARB, "GL_UNSIGNED_INT64_ARB");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_latc = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_latc() {
    GL_EXT_texture_compression_latc.put(GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT, "GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT");
    GL_EXT_texture_compression_latc.put(GL_COMPRESSED_LUMINANCE_LATC1_EXT, "GL_COMPRESSED_LUMINANCE_LATC1_EXT");
    GL_EXT_texture_compression_latc.put(GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT, "GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT");
    GL_EXT_texture_compression_latc.put(GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT, "GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT");
  }
  private static final Map<Integer, String> GL_OES_vertex_type_10_10_10_2 = new HashMap<Integer, String>();
  private static void GL_OES_vertex_type_10_10_10_2() {
    GL_OES_vertex_type_10_10_10_2.put(GL_INT_10_10_10_2_OES, "GL_INT_10_10_10_2_OES");
    GL_OES_vertex_type_10_10_10_2.put(GL_UNSIGNED_INT_10_10_10_2_OES, "GL_UNSIGNED_INT_10_10_10_2_OES");
  }
  private static final Map<Integer, String> GL_SGIX_shadow = new HashMap<Integer, String>();
  private static void GL_SGIX_shadow() {
    GL_SGIX_shadow.put(GL_TEXTURE_COMPARE_OPERATOR_SGIX, "GL_TEXTURE_COMPARE_OPERATOR_SGIX");
    GL_SGIX_shadow.put(GL_TEXTURE_GEQUAL_R_SGIX, "GL_TEXTURE_GEQUAL_R_SGIX");
    GL_SGIX_shadow.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    GL_SGIX_shadow.put(GL_TEXTURE_LEQUAL_R_SGIX, "GL_TEXTURE_LEQUAL_R_SGIX");
  }
  private static final Map<Integer, String> GL_HP_image_transform = new HashMap<Integer, String>();
  private static void GL_HP_image_transform() {
    GL_HP_image_transform.put(GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    GL_HP_image_transform.put(GL_IMAGE_MAG_FILTER_HP, "GL_IMAGE_MAG_FILTER_HP");
    GL_HP_image_transform.put(GL_IMAGE_CUBIC_WEIGHT_HP, "GL_IMAGE_CUBIC_WEIGHT_HP");
    GL_HP_image_transform.put(GL_CUBIC_HP, "GL_CUBIC_HP");
    GL_HP_image_transform.put(GL_IMAGE_ROTATE_ANGLE_HP, "GL_IMAGE_ROTATE_ANGLE_HP");
    GL_HP_image_transform.put(GL_IMAGE_ROTATE_ORIGIN_Y_HP, "GL_IMAGE_ROTATE_ORIGIN_Y_HP");
    GL_HP_image_transform.put(GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    GL_HP_image_transform.put(GL_IMAGE_ROTATE_ORIGIN_X_HP, "GL_IMAGE_ROTATE_ORIGIN_X_HP");
    GL_HP_image_transform.put(GL_IMAGE_SCALE_Y_HP, "GL_IMAGE_SCALE_Y_HP");
    GL_HP_image_transform.put(GL_IMAGE_MIN_FILTER_HP, "GL_IMAGE_MIN_FILTER_HP");
    GL_HP_image_transform.put(GL_IMAGE_TRANSLATE_Y_HP, "GL_IMAGE_TRANSLATE_Y_HP");
    GL_HP_image_transform.put(GL_IMAGE_TRANSLATE_X_HP, "GL_IMAGE_TRANSLATE_X_HP");
    GL_HP_image_transform.put(GL_IMAGE_SCALE_X_HP, "GL_IMAGE_SCALE_X_HP");
    GL_HP_image_transform.put(GL_AVERAGE_HP, "GL_AVERAGE_HP");
    GL_HP_image_transform.put(GL_IMAGE_TRANSFORM_2D_HP, "GL_IMAGE_TRANSFORM_2D_HP");
  }
  private static final Map<Integer, String> GL_HP_convolution_border_modes = new HashMap<Integer, String>();
  private static void GL_HP_convolution_border_modes() {
    GL_HP_convolution_border_modes.put(GL_CONVOLUTION_BORDER_COLOR_HP, "GL_CONVOLUTION_BORDER_COLOR_HP");
    GL_HP_convolution_border_modes.put(GL_CONSTANT_BORDER_HP, "GL_CONSTANT_BORDER_HP");
    GL_HP_convolution_border_modes.put(GL_IGNORE_BORDER_HP, "GL_IGNORE_BORDER_HP");
    GL_HP_convolution_border_modes.put(GL_REPLICATE_BORDER_HP, "GL_REPLICATE_BORDER_HP");
  }
  private static final Map<Integer, String> GL_EXT_shader_pixel_local_storage2 = new HashMap<Integer, String>();
  private static void GL_EXT_shader_pixel_local_storage2() {
    GL_EXT_shader_pixel_local_storage2.put(GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT, "GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT");
    GL_EXT_shader_pixel_local_storage2.put(GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT, "GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT");
    GL_EXT_shader_pixel_local_storage2.put(GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT, "GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_rg = new HashMap<Integer, String>();
  private static void GL_EXT_texture_rg() {
    GL_EXT_texture_rg.put(GL_R8_EXT, "GL_R8_EXT");
    GL_EXT_texture_rg.put(GL_RG_EXT, "GL_RG_EXT");
    GL_EXT_texture_rg.put(GL_RG8_EXT, "GL_RG8_EXT");
    GL_EXT_texture_rg.put(GL_RED_EXT, "GL_RED_EXT");
  }
  private static final Map<Integer, String> GL_NV_fence = new HashMap<Integer, String>();
  private static void GL_NV_fence() {
    GL_NV_fence.put(GL_FENCE_CONDITION_NV, "GL_FENCE_CONDITION_NV");
    GL_NV_fence.put(GL_FENCE_STATUS_NV, "GL_FENCE_STATUS_NV");
    GL_NV_fence.put(GL_ALL_COMPLETED_NV, "GL_ALL_COMPLETED_NV");
  }
  private static final Map<Integer, String> GL_SGIS_texture_lod = new HashMap<Integer, String>();
  private static void GL_SGIS_texture_lod() {
    GL_SGIS_texture_lod.put(GL_TEXTURE_BASE_LEVEL_SGIS, "GL_TEXTURE_BASE_LEVEL_SGIS");
    GL_SGIS_texture_lod.put(GL_TEXTURE_MAX_LOD_SGIS, "GL_TEXTURE_MAX_LOD_SGIS");
    GL_SGIS_texture_lod.put(GL_TEXTURE_MIN_LOD_SGIS, "GL_TEXTURE_MIN_LOD_SGIS");
    GL_SGIS_texture_lod.put(GL_TEXTURE_MAX_LEVEL_SGIS, "GL_TEXTURE_MAX_LEVEL_SGIS");
  }
  private static final Map<Integer, String> GL_EXT_texture_storage = new HashMap<Integer, String>();
  private static void GL_EXT_texture_storage() {
    GL_EXT_texture_storage.put(GL_RGB32F_EXT, "GL_RGB32F_EXT");
    GL_EXT_texture_storage.put(GL_ALPHA32F_EXT, "GL_ALPHA32F_EXT");
    GL_EXT_texture_storage.put(GL_BGRA8_EXT, "GL_BGRA8_EXT");
    GL_EXT_texture_storage.put(GL_ALPHA8_EXT, "GL_ALPHA8_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE8_ALPHA8_EXT, "GL_LUMINANCE8_ALPHA8_EXT");
    GL_EXT_texture_storage.put(GL_R32F_EXT, "GL_R32F_EXT");
    GL_EXT_texture_storage.put(GL_RGBA32F_EXT, "GL_RGBA32F_EXT");
    GL_EXT_texture_storage.put(GL_RGB10_EXT, "GL_RGB10_EXT");
    GL_EXT_texture_storage.put(GL_RG8_EXT, "GL_RG8_EXT");
    GL_EXT_texture_storage.put(GL_RGB16F_EXT, "GL_RGB16F_EXT");
    GL_EXT_texture_storage.put(GL_RGB10_A2_EXT, "GL_RGB10_A2_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE8_EXT, "GL_LUMINANCE8_EXT");
    GL_EXT_texture_storage.put(GL_R8_EXT, "GL_R8_EXT");
    GL_EXT_texture_storage.put(GL_ALPHA16F_EXT, "GL_ALPHA16F_EXT");
    GL_EXT_texture_storage.put(GL_RG16F_EXT, "GL_RG16F_EXT");
    GL_EXT_texture_storage.put(GL_R16F_EXT, "GL_R16F_EXT");
    GL_EXT_texture_storage.put(GL_RGBA16F_EXT, "GL_RGBA16F_EXT");
    GL_EXT_texture_storage.put(GL_RG32F_EXT, "GL_RG32F_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE16F_EXT, "GL_LUMINANCE16F_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE32F_EXT, "GL_LUMINANCE32F_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE_ALPHA16F_EXT, "GL_LUMINANCE_ALPHA16F_EXT");
    GL_EXT_texture_storage.put(GL_TEXTURE_IMMUTABLE_FORMAT_EXT, "GL_TEXTURE_IMMUTABLE_FORMAT_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE_ALPHA32F_EXT, "GL_LUMINANCE_ALPHA32F_EXT");
  }
  private static final Map<Integer, String> GL_ARB_texture_buffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_texture_buffer_object() {
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB");
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BUFFER_ARB, "GL_TEXTURE_BUFFER_ARB");
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BINDING_BUFFER_ARB, "GL_TEXTURE_BINDING_BUFFER_ARB");
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BUFFER_FORMAT_ARB, "GL_TEXTURE_BUFFER_FORMAT_ARB");
    GL_ARB_texture_buffer_object.put(GL_MAX_TEXTURE_BUFFER_SIZE_ARB, "GL_MAX_TEXTURE_BUFFER_SIZE_ARB");
  }
  private static final Map<Integer, String> GL_NV_register_combiners2 = new HashMap<Integer, String>();
  private static void GL_NV_register_combiners2() {
    GL_NV_register_combiners2.put(GL_PER_STAGE_CONSTANTS_NV, "GL_PER_STAGE_CONSTANTS_NV");
  }
  private static final Map<Integer, String> GL_OES_depth_texture = new HashMap<Integer, String>();
  private static void GL_OES_depth_texture() {
    GL_OES_depth_texture.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    GL_OES_depth_texture.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    GL_OES_depth_texture.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  private static final Map<Integer, String> GL_ARB_map_buffer_range = new HashMap<Integer, String>();
  private static void GL_ARB_map_buffer_range() {
    GL_ARB_map_buffer_range.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
  }
  private static final Map<Integer, String> GL_INGR_color_clamp = new HashMap<Integer, String>();
  private static void GL_INGR_color_clamp() {
    GL_INGR_color_clamp.put(GL_RED_MIN_CLAMP_INGR, "GL_RED_MIN_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_ALPHA_MIN_CLAMP_INGR, "GL_ALPHA_MIN_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_GREEN_MAX_CLAMP_INGR, "GL_GREEN_MAX_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_BLUE_MAX_CLAMP_INGR, "GL_BLUE_MAX_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_RED_MAX_CLAMP_INGR, "GL_RED_MAX_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_GREEN_MIN_CLAMP_INGR, "GL_GREEN_MIN_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_BLUE_MIN_CLAMP_INGR, "GL_BLUE_MIN_CLAMP_INGR");
    GL_INGR_color_clamp.put(GL_ALPHA_MAX_CLAMP_INGR, "GL_ALPHA_MAX_CLAMP_INGR");
  }
  private static final Map<Integer, String> GL_QCOM_framebuffer_foveated = new HashMap<Integer, String>();
  private static void GL_QCOM_framebuffer_foveated() {
    GL_QCOM_framebuffer_foveated.put(GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM, "GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM");
    GL_QCOM_framebuffer_foveated.put(GL_FOVEATION_ENABLE_BIT_QCOM, "GL_FOVEATION_ENABLE_BIT_QCOM");
  }
  private static final Map<Integer, String> GL_SGIS_multisample = new HashMap<Integer, String>();
  private static void GL_SGIS_multisample() {
    GL_SGIS_multisample.put(GL_2PASS_1_SGIS, "GL_2PASS_1_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_MASK_VALUE_SGIS, "GL_SAMPLE_MASK_VALUE_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_1_SGIS, "GL_4PASS_1_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_2_SGIS, "GL_4PASS_2_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_MASK_INVERT_SGIS, "GL_SAMPLE_MASK_INVERT_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    GL_SGIS_multisample.put(GL_1PASS_SGIS, "GL_1PASS_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_BUFFERS_SGIS, "GL_SAMPLE_BUFFERS_SGIS");
    GL_SGIS_multisample.put(GL_2PASS_0_SGIS, "GL_2PASS_0_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLES_SGIS, "GL_SAMPLES_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_0_SGIS, "GL_4PASS_0_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_3_SGIS, "GL_4PASS_3_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_PATTERN_SGIS, "GL_SAMPLE_PATTERN_SGIS");
    GL_SGIS_multisample.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_rgtc = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_rgtc() {
    GL_EXT_texture_compression_rgtc.put(GL_COMPRESSED_SIGNED_RED_RGTC1_EXT, "GL_COMPRESSED_SIGNED_RED_RGTC1_EXT");
    GL_EXT_texture_compression_rgtc.put(GL_COMPRESSED_RED_GREEN_RGTC2_EXT, "GL_COMPRESSED_RED_GREEN_RGTC2_EXT");
    GL_EXT_texture_compression_rgtc.put(GL_COMPRESSED_RED_RGTC1_EXT, "GL_COMPRESSED_RED_RGTC1_EXT");
    GL_EXT_texture_compression_rgtc.put(GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT, "GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT");
  }
  private static final Map<Integer, String> GL_ARB_texture_buffer_object_rgb32 = new HashMap<Integer, String>();
  private static void GL_ARB_texture_buffer_object_rgb32() {
    GL_ARB_texture_buffer_object_rgb32.put(GL_RGB32UI, "GL_RGB32UI");
    GL_ARB_texture_buffer_object_rgb32.put(GL_RGB32F, "GL_RGB32F");
    GL_ARB_texture_buffer_object_rgb32.put(GL_RGB32I, "GL_RGB32I");
  }
  private static final Map<Integer, String> GL_ARB_texture_env_combine = new HashMap<Integer, String>();
  private static void GL_ARB_texture_env_combine() {
    GL_ARB_texture_env_combine.put(GL_COMBINE_ARB, "GL_COMBINE_ARB");
    GL_ARB_texture_env_combine.put(GL_SOURCE0_ALPHA_ARB, "GL_SOURCE0_ALPHA_ARB");
    GL_ARB_texture_env_combine.put(GL_CONSTANT_ARB, "GL_CONSTANT_ARB");
    GL_ARB_texture_env_combine.put(GL_PRIMARY_COLOR_ARB, "GL_PRIMARY_COLOR_ARB");
    GL_ARB_texture_env_combine.put(GL_COMBINE_RGB_ARB, "GL_COMBINE_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_INTERPOLATE_ARB, "GL_INTERPOLATE_ARB");
    GL_ARB_texture_env_combine.put(GL_RGB_SCALE_ARB, "GL_RGB_SCALE_ARB");
    GL_ARB_texture_env_combine.put(GL_PREVIOUS_ARB, "GL_PREVIOUS_ARB");
    GL_ARB_texture_env_combine.put(GL_OPERAND0_ALPHA_ARB, "GL_OPERAND0_ALPHA_ARB");
    GL_ARB_texture_env_combine.put(GL_OPERAND1_ALPHA_ARB, "GL_OPERAND1_ALPHA_ARB");
    GL_ARB_texture_env_combine.put(GL_OPERAND2_ALPHA_ARB, "GL_OPERAND2_ALPHA_ARB");
    GL_ARB_texture_env_combine.put(GL_OPERAND0_RGB_ARB, "GL_OPERAND0_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_SUBTRACT_ARB, "GL_SUBTRACT_ARB");
    GL_ARB_texture_env_combine.put(GL_OPERAND1_RGB_ARB, "GL_OPERAND1_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_SOURCE2_RGB_ARB, "GL_SOURCE2_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_SOURCE2_ALPHA_ARB, "GL_SOURCE2_ALPHA_ARB");
    GL_ARB_texture_env_combine.put(GL_OPERAND2_RGB_ARB, "GL_OPERAND2_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_SOURCE0_RGB_ARB, "GL_SOURCE0_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_SOURCE1_RGB_ARB, "GL_SOURCE1_RGB_ARB");
    GL_ARB_texture_env_combine.put(GL_COMBINE_ALPHA_ARB, "GL_COMBINE_ALPHA_ARB");
    GL_ARB_texture_env_combine.put(GL_ADD_SIGNED_ARB, "GL_ADD_SIGNED_ARB");
    GL_ARB_texture_env_combine.put(GL_SOURCE1_ALPHA_ARB, "GL_SOURCE1_ALPHA_ARB");
  }
  private static final Map<Integer, String> GL_ARB_framebuffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_framebuffer_object() {
    GL_ARB_framebuffer_object.put(GL_UNSIGNED_NORMALIZED, "GL_UNSIGNED_NORMALIZED");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT15, "GL_COLOR_ATTACHMENT15");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT14, "GL_COLOR_ATTACHMENT14");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT11, "GL_COLOR_ATTACHMENT11");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_STENCIL_SIZE, "GL_RENDERBUFFER_STENCIL_SIZE");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT10, "GL_COLOR_ATTACHMENT10");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT13, "GL_COLOR_ATTACHMENT13");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT12, "GL_COLOR_ATTACHMENT12");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_HEIGHT, "GL_RENDERBUFFER_HEIGHT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE");
    GL_ARB_framebuffer_object.put(GL_DRAW_FRAMEBUFFER_BINDING, "GL_DRAW_FRAMEBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_STENCIL_ATTACHMENT, "GL_STENCIL_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_UNDEFINED, "GL_FRAMEBUFFER_UNDEFINED");
    GL_ARB_framebuffer_object.put(GL_TEXTURE_STENCIL_SIZE, "GL_TEXTURE_STENCIL_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX4, "GL_STENCIL_INDEX4");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_COMPLETE, "GL_FRAMEBUFFER_COMPLETE");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX1, "GL_STENCIL_INDEX1");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE");
    GL_ARB_framebuffer_object.put(GL_READ_FRAMEBUFFER, "GL_READ_FRAMEBUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_UNSUPPORTED, "GL_FRAMEBUFFER_UNSUPPORTED");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_BINDING, "GL_RENDERBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_DEFAULT, "GL_FRAMEBUFFER_DEFAULT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_DEPTH_SIZE, "GL_RENDERBUFFER_DEPTH_SIZE");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_ALPHA_SIZE, "GL_RENDERBUFFER_ALPHA_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
    GL_ARB_framebuffer_object.put(GL_DEPTH_ATTACHMENT, "GL_DEPTH_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_RED_SIZE, "GL_RENDERBUFFER_RED_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_READ_FRAMEBUFFER_BINDING, "GL_READ_FRAMEBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX8, "GL_STENCIL_INDEX8");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_SAMPLES, "GL_RENDERBUFFER_SAMPLES");
    GL_ARB_framebuffer_object.put(GL_MAX_COLOR_ATTACHMENTS, "GL_MAX_COLOR_ATTACHMENTS");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_INTERNAL_FORMAT, "GL_RENDERBUFFER_INTERNAL_FORMAT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_BLUE_SIZE, "GL_RENDERBUFFER_BLUE_SIZE");
    GL_ARB_framebuffer_object.put(GL_INVALID_FRAMEBUFFER_OPERATION, "GL_INVALID_FRAMEBUFFER_OPERATION");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_WIDTH, "GL_RENDERBUFFER_WIDTH");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
    GL_ARB_framebuffer_object.put(GL_DEPTH_STENCIL, "GL_DEPTH_STENCIL");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT0, "GL_COLOR_ATTACHMENT0");
    GL_ARB_framebuffer_object.put(GL_UNSIGNED_INT_24_8, "GL_UNSIGNED_INT_24_8");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT4, "GL_COLOR_ATTACHMENT4");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT3, "GL_COLOR_ATTACHMENT3");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT2, "GL_COLOR_ATTACHMENT2");
    GL_ARB_framebuffer_object.put(GL_INDEX, "GL_INDEX");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT1, "GL_COLOR_ATTACHMENT1");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT8, "GL_COLOR_ATTACHMENT8");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT7, "GL_COLOR_ATTACHMENT7");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT6, "GL_COLOR_ATTACHMENT6");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT5, "GL_COLOR_ATTACHMENT5");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE");
    GL_ARB_framebuffer_object.put(GL_DEPTH_STENCIL_ATTACHMENT, "GL_DEPTH_STENCIL_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_MAX_SAMPLES, "GL_MAX_SAMPLES");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_GREEN_SIZE, "GL_RENDERBUFFER_GREEN_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE");
    GL_ARB_framebuffer_object.put(GL_DEPTH24_STENCIL8, "GL_DEPTH24_STENCIL8");
    GL_ARB_framebuffer_object.put(GL_DRAW_FRAMEBUFFER, "GL_DRAW_FRAMEBUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT9, "GL_COLOR_ATTACHMENT9");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX16, "GL_STENCIL_INDEX16");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_BINDING, "GL_FRAMEBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING");
    GL_ARB_framebuffer_object.put(GL_MAX_RENDERBUFFER_SIZE, "GL_MAX_RENDERBUFFER_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
  }
  private static final Map<Integer, String> GL_NV_fragment_program2 = new HashMap<Integer, String>();
  private static void GL_NV_fragment_program2() {
    GL_NV_fragment_program2.put(GL_MAX_PROGRAM_LOOP_COUNT_NV, "GL_MAX_PROGRAM_LOOP_COUNT_NV");
    GL_NV_fragment_program2.put(GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV, "GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV");
    GL_NV_fragment_program2.put(GL_MAX_PROGRAM_CALL_DEPTH_NV, "GL_MAX_PROGRAM_CALL_DEPTH_NV");
    GL_NV_fragment_program2.put(GL_MAX_PROGRAM_LOOP_DEPTH_NV, "GL_MAX_PROGRAM_LOOP_DEPTH_NV");
    GL_NV_fragment_program2.put(GL_MAX_PROGRAM_IF_DEPTH_NV, "GL_MAX_PROGRAM_IF_DEPTH_NV");
  }
  private static final Map<Integer, String> GL_AMD_compressed_ATC_texture = new HashMap<Integer, String>();
  private static void GL_AMD_compressed_ATC_texture() {
    GL_AMD_compressed_ATC_texture.put(GL_ATC_RGB_AMD, "GL_ATC_RGB_AMD");
    GL_AMD_compressed_ATC_texture.put(GL_ATC_RGBA_EXPLICIT_ALPHA_AMD, "GL_ATC_RGBA_EXPLICIT_ALPHA_AMD");
    GL_AMD_compressed_ATC_texture.put(GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD, "GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD");
  }
  private static final Map<Integer, String> GL_EXT_vertex_weighting = new HashMap<Integer, String>();
  private static void GL_EXT_vertex_weighting() {
    GL_EXT_vertex_weighting.put(GL_CURRENT_VERTEX_WEIGHT_EXT, "GL_CURRENT_VERTEX_WEIGHT_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT, "GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW0_STACK_DEPTH_EXT, "GL_MODELVIEW0_STACK_DEPTH_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT, "GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW1_EXT, "GL_MODELVIEW1_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT, "GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW1_MATRIX_EXT, "GL_MODELVIEW1_MATRIX_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHTING_EXT, "GL_VERTEX_WEIGHTING_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_EXT, "GL_VERTEX_WEIGHT_ARRAY_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW0_EXT, "GL_MODELVIEW0_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT, "GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW1_STACK_DEPTH_EXT, "GL_MODELVIEW1_STACK_DEPTH_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW0_MATRIX_EXT, "GL_MODELVIEW0_MATRIX_EXT");
  }
  private static final Map<Integer, String> GL_NV_robustness_video_memory_purge = new HashMap<Integer, String>();
  private static void GL_NV_robustness_video_memory_purge() {
    GL_NV_robustness_video_memory_purge.put(GL_PURGED_CONTEXT_RESET_NV, "GL_PURGED_CONTEXT_RESET_NV");
  }
  private static final Map<Integer, String> GL_EXT_texture3D = new HashMap<Integer, String>();
  private static void GL_EXT_texture3D() {
    GL_EXT_texture3D.put(GL_PACK_IMAGE_HEIGHT_EXT, "GL_PACK_IMAGE_HEIGHT_EXT");
    GL_EXT_texture3D.put(GL_UNPACK_SKIP_IMAGES_EXT, "GL_UNPACK_SKIP_IMAGES_EXT");
    GL_EXT_texture3D.put(GL_TEXTURE_DEPTH_EXT, "GL_TEXTURE_DEPTH_EXT");
    GL_EXT_texture3D.put(GL_PACK_SKIP_IMAGES_EXT, "GL_PACK_SKIP_IMAGES_EXT");
    GL_EXT_texture3D.put(GL_TEXTURE_WRAP_R_EXT, "GL_TEXTURE_WRAP_R_EXT");
    GL_EXT_texture3D.put(GL_UNPACK_IMAGE_HEIGHT_EXT, "GL_UNPACK_IMAGE_HEIGHT_EXT");
    GL_EXT_texture3D.put(GL_TEXTURE_3D_EXT, "GL_TEXTURE_3D_EXT");
    GL_EXT_texture3D.put(GL_MAX_3D_TEXTURE_SIZE_EXT, "GL_MAX_3D_TEXTURE_SIZE_EXT");
    GL_EXT_texture3D.put(GL_PROXY_TEXTURE_3D_EXT, "GL_PROXY_TEXTURE_3D_EXT");
  }
  private static final Map<Integer, String> GL_EXT_semaphore_win32 = new HashMap<Integer, String>();
  private static void GL_EXT_semaphore_win32() {
    GL_EXT_semaphore_win32.put(GL_DEVICE_NODE_MASK_EXT, "GL_DEVICE_NODE_MASK_EXT");
    GL_EXT_semaphore_win32.put(GL_D3D12_FENCE_VALUE_EXT, "GL_D3D12_FENCE_VALUE_EXT");
    GL_EXT_semaphore_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_EXT");
    GL_EXT_semaphore_win32.put(GL_DEVICE_LUID_EXT, "GL_DEVICE_LUID_EXT");
    GL_EXT_semaphore_win32.put(GL_HANDLE_TYPE_D3D12_FENCE_EXT, "GL_HANDLE_TYPE_D3D12_FENCE_EXT");
    GL_EXT_semaphore_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT");
    GL_EXT_semaphore_win32.put(GL_LUID_SIZE_EXT, "GL_LUID_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_422_pixels = new HashMap<Integer, String>();
  private static void GL_EXT_422_pixels() {
    GL_EXT_422_pixels.put(GL_422_REV_AVERAGE_EXT, "GL_422_REV_AVERAGE_EXT");
    GL_EXT_422_pixels.put(GL_422_REV_EXT, "GL_422_REV_EXT");
    GL_EXT_422_pixels.put(GL_422_AVERAGE_EXT, "GL_422_AVERAGE_EXT");
    GL_EXT_422_pixels.put(GL_422_EXT, "GL_422_EXT");
  }
  private static final Map<Integer, String> GL_OES_fixed_point = new HashMap<Integer, String>();
  private static void GL_OES_fixed_point() {
    GL_OES_fixed_point.put(GL_FIXED_OES, "GL_FIXED_OES");
  }
  private static final Map<Integer, String> GL_ARB_texture_multisample = new HashMap<Integer, String>();
  private static void GL_ARB_texture_multisample() {
    GL_ARB_texture_multisample.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE, "GL_PROXY_TEXTURE_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_TEXTURE_SAMPLES, "GL_TEXTURE_SAMPLES");
    GL_ARB_texture_multisample.put(GL_TEXTURE_FIXED_SAMPLE_LOCATIONS, "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS");
    GL_ARB_texture_multisample.put(GL_MAX_DEPTH_TEXTURE_SAMPLES, "GL_MAX_DEPTH_TEXTURE_SAMPLES");
    GL_ARB_texture_multisample.put(GL_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_MAX_SAMPLE_MASK_WORDS, "GL_MAX_SAMPLE_MASK_WORDS");
    GL_ARB_texture_multisample.put(GL_SAMPLE_MASK, "GL_SAMPLE_MASK");
    GL_ARB_texture_multisample.put(GL_SAMPLER_2D_MULTISAMPLE, "GL_SAMPLER_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_SAMPLE_MASK_VALUE, "GL_SAMPLE_MASK_VALUE");
    GL_ARB_texture_multisample.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_SAMPLE_POSITION, "GL_SAMPLE_POSITION");
    GL_ARB_texture_multisample.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE, "GL_TEXTURE_BINDING_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_INT_SAMPLER_2D_MULTISAMPLE, "GL_INT_SAMPLER_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_MAX_INTEGER_SAMPLES, "GL_MAX_INTEGER_SAMPLES");
    GL_ARB_texture_multisample.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_MAX_COLOR_TEXTURE_SAMPLES, "GL_MAX_COLOR_TEXTURE_SAMPLES");
  }
  private static final Map<Integer, String> GL_IMG_read_format = new HashMap<Integer, String>();
  private static void GL_IMG_read_format() {
    GL_IMG_read_format.put(GL_BGRA_IMG, "GL_BGRA_IMG");
    GL_IMG_read_format.put(GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG, "GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG");
  }
  private static final Map<Integer, String> GL_EXT_clip_volume_hint = new HashMap<Integer, String>();
  private static void GL_EXT_clip_volume_hint() {
    GL_EXT_clip_volume_hint.put(GL_CLIP_VOLUME_CLIPPING_HINT_EXT, "GL_CLIP_VOLUME_CLIPPING_HINT_EXT");
  }
  private static final Map<Integer, String> GL_ARB_ES3_1_compatibility = new HashMap<Integer, String>();
  private static void GL_ARB_ES3_1_compatibility() {
    GL_ARB_ES3_1_compatibility.put(GL_BACK, "GL_BACK");
  }
  private static final Map<Integer, String> GL_SGIX_reference_plane = new HashMap<Integer, String>();
  private static void GL_SGIX_reference_plane() {
    GL_SGIX_reference_plane.put(GL_REFERENCE_PLANE_EQUATION_SGIX, "GL_REFERENCE_PLANE_EQUATION_SGIX");
    GL_SGIX_reference_plane.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
  }
  private static final Map<Integer, String> GL_OES_compressed_ETC1_RGB8_texture = new HashMap<Integer, String>();
  private static void GL_OES_compressed_ETC1_RGB8_texture() {
    GL_OES_compressed_ETC1_RGB8_texture.put(GL_ETC1_RGB8_OES, "GL_ETC1_RGB8_OES");
  }
  private static final Map<Integer, String> GL_ARB_texture_stencil8 = new HashMap<Integer, String>();
  private static void GL_ARB_texture_stencil8() {
    GL_ARB_texture_stencil8.put(GL_STENCIL_INDEX, "GL_STENCIL_INDEX");
    GL_ARB_texture_stencil8.put(GL_STENCIL_INDEX8, "GL_STENCIL_INDEX8");
  }
  private static final Map<Integer, String> GL_EXT_draw_range_elements = new HashMap<Integer, String>();
  private static void GL_EXT_draw_range_elements() {
    GL_EXT_draw_range_elements.put(GL_MAX_ELEMENTS_INDICES_EXT, "GL_MAX_ELEMENTS_INDICES_EXT");
    GL_EXT_draw_range_elements.put(GL_MAX_ELEMENTS_VERTICES_EXT, "GL_MAX_ELEMENTS_VERTICES_EXT");
  }
  private static final Map<Integer, String> GL_ARB_blend_func_extended = new HashMap<Integer, String>();
  private static void GL_ARB_blend_func_extended() {
    GL_ARB_blend_func_extended.put(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS, "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS");
    GL_ARB_blend_func_extended.put(GL_SRC1_COLOR, "GL_SRC1_COLOR");
    GL_ARB_blend_func_extended.put(GL_ONE_MINUS_SRC1_COLOR, "GL_ONE_MINUS_SRC1_COLOR");
    GL_ARB_blend_func_extended.put(GL_ONE_MINUS_SRC1_ALPHA, "GL_ONE_MINUS_SRC1_ALPHA");
    GL_ARB_blend_func_extended.put(GL_SRC1_ALPHA, "GL_SRC1_ALPHA");
  }
  private static final Map<Integer, String> GL_EXT_render_snorm = new HashMap<Integer, String>();
  private static void GL_EXT_render_snorm() {
    GL_EXT_render_snorm.put(GL_R8_SNORM, "GL_R8_SNORM");
    GL_EXT_render_snorm.put(GL_RG8_SNORM, "GL_RG8_SNORM");
    GL_EXT_render_snorm.put(GL_RG16_SNORM_EXT, "GL_RG16_SNORM_EXT");
    GL_EXT_render_snorm.put(GL_R16_SNORM_EXT, "GL_R16_SNORM_EXT");
    GL_EXT_render_snorm.put(GL_BYTE, "GL_BYTE");
    GL_EXT_render_snorm.put(GL_RGBA16_SNORM_EXT, "GL_RGBA16_SNORM_EXT");
    GL_EXT_render_snorm.put(GL_SHORT, "GL_SHORT");
    GL_EXT_render_snorm.put(GL_RGBA8_SNORM, "GL_RGBA8_SNORM");
  }
  private static final Map<Integer, String> GL_ARB_texture_filter_anisotropic = new HashMap<Integer, String>();
  private static void GL_ARB_texture_filter_anisotropic() {
    GL_ARB_texture_filter_anisotropic.put(GL_TEXTURE_MAX_ANISOTROPY, "GL_TEXTURE_MAX_ANISOTROPY");
    GL_ARB_texture_filter_anisotropic.put(GL_MAX_TEXTURE_MAX_ANISOTROPY, "GL_MAX_TEXTURE_MAX_ANISOTROPY");
  }
  private static final Map<Integer, String> GL_SUN_global_alpha = new HashMap<Integer, String>();
  private static void GL_SUN_global_alpha() {
    GL_SUN_global_alpha.put(GL_GLOBAL_ALPHA_FACTOR_SUN, "GL_GLOBAL_ALPHA_FACTOR_SUN");
    GL_SUN_global_alpha.put(GL_GLOBAL_ALPHA_SUN, "GL_GLOBAL_ALPHA_SUN");
  }
  private static final Map<Integer, String> GL_IBM_vertex_array_lists = new HashMap<Integer, String>();
  private static void GL_IBM_vertex_array_lists() {
    GL_IBM_vertex_array_lists.put(GL_FOG_COORDINATE_ARRAY_LIST_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_VERTEX_ARRAY_LIST_IBM, "GL_VERTEX_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_COLOR_ARRAY_LIST_IBM, "GL_COLOR_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_COLOR_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_EDGE_FLAG_ARRAY_LIST_IBM, "GL_EDGE_FLAG_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_VERTEX_ARRAY_LIST_STRIDE_IBM, "GL_VERTEX_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_TEXTURE_COORD_ARRAY_LIST_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_SECONDARY_COLOR_ARRAY_LIST_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM, "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_NORMAL_ARRAY_LIST_STRIDE_IBM, "GL_NORMAL_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_NORMAL_ARRAY_LIST_IBM, "GL_NORMAL_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_INDEX_ARRAY_LIST_IBM, "GL_INDEX_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_INDEX_ARRAY_LIST_STRIDE_IBM, "GL_INDEX_ARRAY_LIST_STRIDE_IBM");
  }
  private static final Map<Integer, String> GL_NV_register_combiners = new HashMap<Integer, String>();
  private static void GL_NV_register_combiners() {
    GL_NV_register_combiners.put(GL_COMBINER_SCALE_NV, "GL_COMBINER_SCALE_NV");
    GL_NV_register_combiners.put(GL_COLOR_SUM_CLAMP_NV, "GL_COLOR_SUM_CLAMP_NV");
    GL_NV_register_combiners.put(GL_REGISTER_COMBINERS_NV, "GL_REGISTER_COMBINERS_NV");
    GL_NV_register_combiners.put(GL_PRIMARY_COLOR_NV, "GL_PRIMARY_COLOR_NV");
    GL_NV_register_combiners.put(GL_DISCARD_NV, "GL_DISCARD_NV");
    GL_NV_register_combiners.put(GL_SIGNED_NEGATE_NV, "GL_SIGNED_NEGATE_NV");
    GL_NV_register_combiners.put(GL_SIGNED_IDENTITY_NV, "GL_SIGNED_IDENTITY_NV");
    GL_NV_register_combiners.put(GL_HALF_BIAS_NEGATE_NV, "GL_HALF_BIAS_NEGATE_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_E_NV, "GL_VARIABLE_E_NV");
    GL_NV_register_combiners.put(GL_COMBINER_MAPPING_NV, "GL_COMBINER_MAPPING_NV");
    GL_NV_register_combiners.put(GL_COMBINER1_NV, "GL_COMBINER1_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_A_NV, "GL_VARIABLE_A_NV");
    GL_NV_register_combiners.put(GL_CONSTANT_COLOR1_NV, "GL_CONSTANT_COLOR1_NV");
    GL_NV_register_combiners.put(GL_COMBINER_AB_OUTPUT_NV, "GL_COMBINER_AB_OUTPUT_NV");
    GL_NV_register_combiners.put(GL_UNSIGNED_IDENTITY_NV, "GL_UNSIGNED_IDENTITY_NV");
    GL_NV_register_combiners.put(GL_COMBINER_AB_DOT_PRODUCT_NV, "GL_COMBINER_AB_DOT_PRODUCT_NV");
    GL_NV_register_combiners.put(GL_TEXTURE0_ARB, "GL_TEXTURE0_ARB");
    GL_NV_register_combiners.put(GL_COMBINER_CD_OUTPUT_NV, "GL_COMBINER_CD_OUTPUT_NV");
    GL_NV_register_combiners.put(GL_COMBINER_MUX_SUM_NV, "GL_COMBINER_MUX_SUM_NV");
    GL_NV_register_combiners.put(GL_MAX_GENERAL_COMBINERS_NV, "GL_MAX_GENERAL_COMBINERS_NV");
    GL_NV_register_combiners.put(GL_SPARE0_NV, "GL_SPARE0_NV");
    GL_NV_register_combiners.put(GL_COMBINER7_NV, "GL_COMBINER7_NV");
    GL_NV_register_combiners.put(GL_BIAS_BY_NEGATIVE_ONE_HALF_NV, "GL_BIAS_BY_NEGATIVE_ONE_HALF_NV");
    GL_NV_register_combiners.put(GL_ZERO, "GL_ZERO");
    GL_NV_register_combiners.put(GL_TEXTURE1_ARB, "GL_TEXTURE1_ARB");
    GL_NV_register_combiners.put(GL_VARIABLE_D_NV, "GL_VARIABLE_D_NV");
    GL_NV_register_combiners.put(GL_COMBINER4_NV, "GL_COMBINER4_NV");
    GL_NV_register_combiners.put(GL_COMBINER0_NV, "GL_COMBINER0_NV");
    GL_NV_register_combiners.put(GL_NONE, "GL_NONE");
    GL_NV_register_combiners.put(GL_CONSTANT_COLOR0_NV, "GL_CONSTANT_COLOR0_NV");
    GL_NV_register_combiners.put(GL_COMBINER_SUM_OUTPUT_NV, "GL_COMBINER_SUM_OUTPUT_NV");
    GL_NV_register_combiners.put(GL_SCALE_BY_FOUR_NV, "GL_SCALE_BY_FOUR_NV");
    GL_NV_register_combiners.put(GL_COMBINER_BIAS_NV, "GL_COMBINER_BIAS_NV");
    GL_NV_register_combiners.put(GL_EXPAND_NEGATE_NV, "GL_EXPAND_NEGATE_NV");
    GL_NV_register_combiners.put(GL_FOG, "GL_FOG");
    GL_NV_register_combiners.put(GL_COMBINER6_NV, "GL_COMBINER6_NV");
    GL_NV_register_combiners.put(GL_SCALE_BY_TWO_NV, "GL_SCALE_BY_TWO_NV");
    GL_NV_register_combiners.put(GL_SPARE1_NV, "GL_SPARE1_NV");
    GL_NV_register_combiners.put(GL_HALF_BIAS_NORMAL_NV, "GL_HALF_BIAS_NORMAL_NV");
    GL_NV_register_combiners.put(GL_COMBINER_INPUT_NV, "GL_COMBINER_INPUT_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_G_NV, "GL_VARIABLE_G_NV");
    GL_NV_register_combiners.put(GL_UNSIGNED_INVERT_NV, "GL_UNSIGNED_INVERT_NV");
    GL_NV_register_combiners.put(GL_SCALE_BY_ONE_HALF_NV, "GL_SCALE_BY_ONE_HALF_NV");
    GL_NV_register_combiners.put(GL_COMBINER3_NV, "GL_COMBINER3_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_C_NV, "GL_VARIABLE_C_NV");
    GL_NV_register_combiners.put(GL_E_TIMES_F_NV, "GL_E_TIMES_F_NV");
    GL_NV_register_combiners.put(GL_COMBINER_COMPONENT_USAGE_NV, "GL_COMBINER_COMPONENT_USAGE_NV");
    GL_NV_register_combiners.put(GL_SECONDARY_COLOR_NV, "GL_SECONDARY_COLOR_NV");
    GL_NV_register_combiners.put(GL_COMBINER5_NV, "GL_COMBINER5_NV");
    GL_NV_register_combiners.put(GL_COMBINER_CD_DOT_PRODUCT_NV, "GL_COMBINER_CD_DOT_PRODUCT_NV");
    GL_NV_register_combiners.put(GL_EXPAND_NORMAL_NV, "GL_EXPAND_NORMAL_NV");
    GL_NV_register_combiners.put(GL_NUM_GENERAL_COMBINERS_NV, "GL_NUM_GENERAL_COMBINERS_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_F_NV, "GL_VARIABLE_F_NV");
    GL_NV_register_combiners.put(GL_SPARE0_PLUS_SECONDARY_COLOR_NV, "GL_SPARE0_PLUS_SECONDARY_COLOR_NV");
    GL_NV_register_combiners.put(GL_COMBINER2_NV, "GL_COMBINER2_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_B_NV, "GL_VARIABLE_B_NV");
  }
  private static final Map<Integer, String> GL_EXT_geometry_shader = new HashMap<Integer, String>();
  private static void GL_EXT_geometry_shader() {
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_FIRST_VERTEX_CONVENTION_EXT, "GL_FIRST_VERTEX_CONVENTION_EXT");
    GL_EXT_geometry_shader.put(GL_LAYER_PROVOKING_VERTEX_EXT, "GL_LAYER_PROVOKING_VERTEX_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT");
    GL_EXT_geometry_shader.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_PRIMITIVES_GENERATED_EXT, "GL_PRIMITIVES_GENERATED_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_FRAMEBUFFER_LAYERS_EXT, "GL_MAX_FRAMEBUFFER_LAYERS_EXT");
    GL_EXT_geometry_shader.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT, "GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT");
    GL_EXT_geometry_shader.put(GL_REFERENCED_BY_GEOMETRY_SHADER_EXT, "GL_REFERENCED_BY_GEOMETRY_SHADER_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT");
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT, "GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_SHADER_INVOCATIONS_EXT, "GL_GEOMETRY_SHADER_INVOCATIONS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_LINKED_INPUT_TYPE_EXT, "GL_GEOMETRY_LINKED_INPUT_TYPE_EXT");
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT");
    GL_EXT_geometry_shader.put(GL_LAST_VERTEX_CONVENTION_EXT, "GL_LAST_VERTEX_CONVENTION_EXT");
    GL_EXT_geometry_shader.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_LINKED_VERTICES_OUT_EXT, "GL_GEOMETRY_LINKED_VERTICES_OUT_EXT");
    GL_EXT_geometry_shader.put(GL_UNDEFINED_VERTEX_EXT, "GL_UNDEFINED_VERTEX_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_SHADER_BIT_EXT, "GL_GEOMETRY_SHADER_BIT_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_SHADER_EXT, "GL_GEOMETRY_SHADER_EXT");
    GL_EXT_geometry_shader.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_dxt1 = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_dxt1() {
    GL_EXT_texture_compression_dxt1.put(GL_COMPRESSED_RGB_S3TC_DXT1_EXT, "GL_COMPRESSED_RGB_S3TC_DXT1_EXT");
    GL_EXT_texture_compression_dxt1.put(GL_COMPRESSED_RGBA_S3TC_DXT1_EXT, "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT");
  }
  private static final Map<Integer, String> GL_INTEL_parallel_arrays = new HashMap<Integer, String>();
  private static void GL_INTEL_parallel_arrays() {
    GL_INTEL_parallel_arrays.put(GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL, "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL, "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL, "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_PARALLEL_ARRAYS_INTEL, "GL_PARALLEL_ARRAYS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL, "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL");
  }
  private static final Map<Integer, String> GL_NV_packed_depth_stencil = new HashMap<Integer, String>();
  private static void GL_NV_packed_depth_stencil() {
    GL_NV_packed_depth_stencil.put(GL_UNSIGNED_INT_24_8_NV, "GL_UNSIGNED_INT_24_8_NV");
    GL_NV_packed_depth_stencil.put(GL_DEPTH_STENCIL_NV, "GL_DEPTH_STENCIL_NV");
  }
  private static final Map<Integer, String> GL_APPLE_vertex_array_range = new HashMap<Integer, String>();
  private static void GL_APPLE_vertex_array_range() {
    GL_APPLE_vertex_array_range.put(GL_STORAGE_CLIENT_APPLE, "GL_STORAGE_CLIENT_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_STORAGE_HINT_APPLE, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE, "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE");
    GL_APPLE_vertex_array_range.put(GL_STORAGE_SHARED_APPLE, "GL_STORAGE_SHARED_APPLE");
    GL_APPLE_vertex_array_range.put(GL_STORAGE_CACHED_APPLE, "GL_STORAGE_CACHED_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_APPLE, "GL_VERTEX_ARRAY_RANGE_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_POINTER_APPLE, "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE");
  }
  private static final Map<Integer, String> GL_ARB_shader_subroutine = new HashMap<Integer, String>();
  private static void GL_ARB_shader_subroutine() {
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS");
    GL_ARB_shader_subroutine.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINES, "GL_ACTIVE_SUBROUTINES");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_MAX_LENGTH");
    GL_ARB_shader_subroutine.put(GL_MAX_SUBROUTINES, "GL_MAX_SUBROUTINES");
    GL_ARB_shader_subroutine.put(GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS, "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_UNIFORMS, "GL_ACTIVE_SUBROUTINE_UNIFORMS");
    GL_ARB_shader_subroutine.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    GL_ARB_shader_subroutine.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    GL_ARB_shader_subroutine.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
  }
  private static final Map<Integer, String> GL_SGIX_async_histogram = new HashMap<Integer, String>();
  private static void GL_SGIX_async_histogram() {
    GL_SGIX_async_histogram.put(GL_MAX_ASYNC_HISTOGRAM_SGIX, "GL_MAX_ASYNC_HISTOGRAM_SGIX");
    GL_SGIX_async_histogram.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
  }
  private static final Map<Integer, String> GL_NV_compute_program5 = new HashMap<Integer, String>();
  private static void GL_NV_compute_program5() {
    GL_NV_compute_program5.put(GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV, "GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_compute_program5.put(GL_COMPUTE_PROGRAM_NV, "GL_COMPUTE_PROGRAM_NV");
  }
  private static final Map<Integer, String> GL_ARB_compute_shader = new HashMap<Integer, String>();
  private static void GL_ARB_compute_shader() {
    GL_ARB_compute_shader.put(GL_COMPUTE_SHADER, "GL_COMPUTE_SHADER");
    GL_ARB_compute_shader.put(GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER");
    GL_ARB_compute_shader.put(GL_DISPATCH_INDIRECT_BUFFER_BINDING, "GL_DISPATCH_INDIRECT_BUFFER_BINDING");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_IMAGE_UNIFORMS, "GL_MAX_COMPUTE_IMAGE_UNIFORMS");
    GL_ARB_compute_shader.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_ATOMIC_COUNTERS, "GL_MAX_COMPUTE_ATOMIC_COUNTERS");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_WORK_GROUP_SIZE, "GL_MAX_COMPUTE_WORK_GROUP_SIZE");
    GL_ARB_compute_shader.put(GL_COMPUTE_WORK_GROUP_SIZE, "GL_COMPUTE_WORK_GROUP_SIZE");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_UNIFORM_BLOCKS, "GL_MAX_COMPUTE_UNIFORM_BLOCKS");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_SHARED_MEMORY_SIZE, "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE");
    GL_ARB_compute_shader.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS, "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_WORK_GROUP_COUNT, "GL_MAX_COMPUTE_WORK_GROUP_COUNT");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS, "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS");
    GL_ARB_compute_shader.put(GL_COMPUTE_SHADER_BIT, "GL_COMPUTE_SHADER_BIT");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_compute_shader.put(GL_MAX_COMPUTE_UNIFORM_COMPONENTS, "GL_MAX_COMPUTE_UNIFORM_COMPONENTS");
    GL_ARB_compute_shader.put(GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS");
  }
  private static final Map<Integer, String> GL_OES_vertex_half_float = new HashMap<Integer, String>();
  private static void GL_OES_vertex_half_float() {
    GL_OES_vertex_half_float.put(GL_HALF_FLOAT_OES, "GL_HALF_FLOAT_OES");
  }
  private static final Map<Integer, String> GL_OES_surfaceless_context = new HashMap<Integer, String>();
  private static void GL_OES_surfaceless_context() {
    GL_OES_surfaceless_context.put(GL_FRAMEBUFFER_UNDEFINED_OES, "GL_FRAMEBUFFER_UNDEFINED_OES");
  }
  private static final Map<Integer, String> GL_EXT_pixel_transform = new HashMap<Integer, String>();
  private static void GL_EXT_pixel_transform() {
    GL_EXT_pixel_transform.put(GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT, "GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_TRANSFORM_2D_MATRIX_EXT, "GL_PIXEL_TRANSFORM_2D_MATRIX_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_CUBIC_WEIGHT_EXT, "GL_PIXEL_CUBIC_WEIGHT_EXT");
    GL_EXT_pixel_transform.put(GL_CUBIC_EXT, "GL_CUBIC_EXT");
    GL_EXT_pixel_transform.put(GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT, "GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_TRANSFORM_2D_EXT, "GL_PIXEL_TRANSFORM_2D_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_MAG_FILTER_EXT, "GL_PIXEL_MAG_FILTER_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_MIN_FILTER_EXT, "GL_PIXEL_MIN_FILTER_EXT");
    GL_EXT_pixel_transform.put(GL_AVERAGE_EXT, "GL_AVERAGE_EXT");
  }
  private static final Map<Integer, String> GL_OES_primitive_bounding_box = new HashMap<Integer, String>();
  private static void GL_OES_primitive_bounding_box() {
    GL_OES_primitive_bounding_box.put(GL_PRIMITIVE_BOUNDING_BOX_OES, "GL_PRIMITIVE_BOUNDING_BOX_OES");
  }
  private static final Map<Integer, String> GL_SGIX_fog_offset = new HashMap<Integer, String>();
  private static void GL_SGIX_fog_offset() {
    GL_SGIX_fog_offset.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    GL_SGIX_fog_offset.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
  }
  private static final Map<Integer, String> GL_APPLE_clip_distance = new HashMap<Integer, String>();
  private static void GL_APPLE_clip_distance() {
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE0_APPLE, "GL_CLIP_DISTANCE0_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE3_APPLE, "GL_CLIP_DISTANCE3_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE6_APPLE, "GL_CLIP_DISTANCE6_APPLE");
    GL_APPLE_clip_distance.put(GL_MAX_CLIP_DISTANCES_APPLE, "GL_MAX_CLIP_DISTANCES_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE1_APPLE, "GL_CLIP_DISTANCE1_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE7_APPLE, "GL_CLIP_DISTANCE7_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE5_APPLE, "GL_CLIP_DISTANCE5_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE2_APPLE, "GL_CLIP_DISTANCE2_APPLE");
    GL_APPLE_clip_distance.put(GL_CLIP_DISTANCE4_APPLE, "GL_CLIP_DISTANCE4_APPLE");
  }
  private static final Map<Integer, String> GL_SGI_color_table = new HashMap<Integer, String>();
  private static void GL_SGI_color_table() {
    GL_SGI_color_table.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_RED_SIZE_SGI, "GL_COLOR_TABLE_RED_SIZE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_BLUE_SIZE_SGI, "GL_COLOR_TABLE_BLUE_SIZE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_GREEN_SIZE_SGI, "GL_COLOR_TABLE_GREEN_SIZE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_WIDTH_SGI, "GL_COLOR_TABLE_WIDTH_SGI");
    GL_SGI_color_table.put(GL_PROXY_COLOR_TABLE_SGI, "GL_PROXY_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_LUMINANCE_SIZE_SGI, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI");
    GL_SGI_color_table.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_ALPHA_SIZE_SGI, "GL_COLOR_TABLE_ALPHA_SIZE_SGI");
    GL_SGI_color_table.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_FORMAT_SGI, "GL_COLOR_TABLE_FORMAT_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_INTENSITY_SIZE_SGI, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI");
  }
  private static final Map<Integer, String> GL_EXT_secondary_color = new HashMap<Integer, String>();
  private static void GL_EXT_secondary_color() {
    GL_EXT_secondary_color.put(GL_COLOR_SUM_EXT, "GL_COLOR_SUM_EXT");
    GL_EXT_secondary_color.put(GL_CURRENT_SECONDARY_COLOR_EXT, "GL_CURRENT_SECONDARY_COLOR_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_POINTER_EXT, "GL_SECONDARY_COLOR_ARRAY_POINTER_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_SIZE_EXT, "GL_SECONDARY_COLOR_ARRAY_SIZE_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_TYPE_EXT, "GL_SECONDARY_COLOR_ARRAY_TYPE_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_EXT, "GL_SECONDARY_COLOR_ARRAY_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT, "GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT");
  }
  private static final Map<Integer, String> GL_NV_instanced_arrays = new HashMap<Integer, String>();
  private static void GL_NV_instanced_arrays() {
    GL_NV_instanced_arrays.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV");
  }
  private static final Map<Integer, String> GL_EXT_stencil_wrap = new HashMap<Integer, String>();
  private static void GL_EXT_stencil_wrap() {
    GL_EXT_stencil_wrap.put(GL_INCR_WRAP_EXT, "GL_INCR_WRAP_EXT");
    GL_EXT_stencil_wrap.put(GL_DECR_WRAP_EXT, "GL_DECR_WRAP_EXT");
  }
  private static final Map<Integer, String> GL_IMG_framebuffer_downsample = new HashMap<Integer, String>();
  private static void GL_IMG_framebuffer_downsample() {
    GL_IMG_framebuffer_downsample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG");
    GL_IMG_framebuffer_downsample.put(GL_NUM_DOWNSAMPLE_SCALES_IMG, "GL_NUM_DOWNSAMPLE_SCALES_IMG");
    GL_IMG_framebuffer_downsample.put(GL_DOWNSAMPLE_SCALES_IMG, "GL_DOWNSAMPLE_SCALES_IMG");
    GL_IMG_framebuffer_downsample.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG");
  }
  private static final Map<Integer, String> GL_EXT_protected_textures = new HashMap<Integer, String>();
  private static void GL_EXT_protected_textures() {
    GL_EXT_protected_textures.put(GL_TEXTURE_PROTECTED_EXT, "GL_TEXTURE_PROTECTED_EXT");
    GL_EXT_protected_textures.put(GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT, "GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT");
  }
  private static final Map<Integer, String> GL_ARB_tessellation_shader = new HashMap<Integer, String>();
  private static void GL_ARB_tessellation_shader() {
    GL_ARB_tessellation_shader.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER");
    GL_ARB_tessellation_shader.put(GL_CW, "GL_CW");
    GL_ARB_tessellation_shader.put(GL_TESS_CONTROL_OUTPUT_VERTICES, "GL_TESS_CONTROL_OUTPUT_VERTICES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_GEN_LEVEL, "GL_MAX_TESS_GEN_LEVEL");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_PATCH_DEFAULT_OUTER_LEVEL, "GL_PATCH_DEFAULT_OUTER_LEVEL");
    GL_ARB_tessellation_shader.put(GL_MAX_PATCH_VERTICES, "GL_MAX_PATCH_VERTICES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS");
    GL_ARB_tessellation_shader.put(GL_PATCH_DEFAULT_INNER_LEVEL, "GL_PATCH_DEFAULT_INNER_LEVEL");
    GL_ARB_tessellation_shader.put(GL_TRIANGLES, "GL_TRIANGLES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_QUADS, "GL_QUADS");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_FRACTIONAL_EVEN, "GL_FRACTIONAL_EVEN");
    GL_ARB_tessellation_shader.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_POINT_MODE, "GL_TESS_GEN_POINT_MODE");
    GL_ARB_tessellation_shader.put(GL_CCW, "GL_CCW");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_EQUAL, "GL_EQUAL");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_VERTEX_ORDER, "GL_TESS_GEN_VERTEX_ORDER");
    GL_ARB_tessellation_shader.put(GL_TESS_CONTROL_SHADER, "GL_TESS_CONTROL_SHADER");
    GL_ARB_tessellation_shader.put(GL_PATCHES, "GL_PATCHES");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_SPACING, "GL_TESS_GEN_SPACING");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_ISOLINES, "GL_ISOLINES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS");
    GL_ARB_tessellation_shader.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_PATCH_VERTICES, "GL_PATCH_VERTICES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_FRACTIONAL_ODD, "GL_FRACTIONAL_ODD");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_MODE, "GL_TESS_GEN_MODE");
    GL_ARB_tessellation_shader.put(GL_TESS_EVALUATION_SHADER, "GL_TESS_EVALUATION_SHADER");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_PATCH_COMPONENTS, "GL_MAX_TESS_PATCH_COMPONENTS");
  }
  private static final Map<Integer, String> GL_SGIX_async_pixel = new HashMap<Integer, String>();
  private static void GL_SGIX_async_pixel() {
    GL_SGIX_async_pixel.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    GL_SGIX_async_pixel.put(GL_MAX_ASYNC_TEX_IMAGE_SGIX, "GL_MAX_ASYNC_TEX_IMAGE_SGIX");
    GL_SGIX_async_pixel.put(GL_MAX_ASYNC_DRAW_PIXELS_SGIX, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX");
    GL_SGIX_async_pixel.put(GL_MAX_ASYNC_READ_PIXELS_SGIX, "GL_MAX_ASYNC_READ_PIXELS_SGIX");
    GL_SGIX_async_pixel.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    GL_SGIX_async_pixel.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_fragment_program = new HashMap<Integer, String>();
  private static void GL_ARB_fragment_program() {
    GL_ARB_fragment_program.put(GL_MATRIX11_ARB, "GL_MATRIX11_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX29_ARB, "GL_MATRIX29_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX3_ARB, "GL_MATRIX3_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX12_ARB, "GL_MATRIX12_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX28_ARB, "GL_MATRIX28_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX4_ARB, "GL_MATRIX4_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX20_ARB, "GL_MATRIX20_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_BINDING_ARB, "GL_PROGRAM_BINDING_ARB");
    GL_ARB_fragment_program.put(GL_TRANSPOSE_CURRENT_MATRIX_ARB, "GL_TRANSPOSE_CURRENT_MATRIX_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_TEX_INSTRUCTIONS_ARB, "GL_PROGRAM_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ATTRIBS_ARB, "GL_PROGRAM_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_CURRENT_MATRIX_ARB, "GL_CURRENT_MATRIX_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX1_ARB, "GL_MATRIX1_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX22_ARB, "GL_MATRIX22_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB, "GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_PARAMETERS_ARB, "GL_PROGRAM_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX19_ARB, "GL_MATRIX19_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_FORMAT_ASCII_ARB, "GL_PROGRAM_FORMAT_ASCII_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ENV_PARAMETERS_ARB, "GL_MAX_PROGRAM_ENV_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ALU_INSTRUCTIONS_ARB, "GL_PROGRAM_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX21_ARB, "GL_MATRIX21_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_TEMPORARIES_ARB, "GL_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX10_ARB, "GL_MATRIX10_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX17_ARB, "GL_MATRIX17_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX23_ARB, "GL_MATRIX23_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ATTRIBS_ARB, "GL_MAX_PROGRAM_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_CURRENT_MATRIX_STACK_DEPTH_ARB, "GL_CURRENT_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX18_ARB, "GL_MATRIX18_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_PARAMETERS_ARB, "GL_MAX_PROGRAM_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_STRING_ARB, "GL_PROGRAM_STRING_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX2_ARB, "GL_MATRIX2_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_MATRICES_ARB, "GL_MAX_PROGRAM_MATRICES_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX16_ARB, "GL_MATRIX16_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX8_ARB, "GL_MATRIX8_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB, "GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX24_ARB, "GL_MATRIX24_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_FORMAT_ARB, "GL_PROGRAM_FORMAT_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX9_ARB, "GL_MATRIX9_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX25_ARB, "GL_MATRIX25_ARB");
    GL_ARB_fragment_program.put(GL_MAX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_TEMPORARIES_ARB, "GL_MAX_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX15_ARB, "GL_MATRIX15_ARB");
    GL_ARB_fragment_program.put(GL_FRAGMENT_PROGRAM_ARB, "GL_FRAGMENT_PROGRAM_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_INSTRUCTIONS_ARB, "GL_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_PROGRAM_NATIVE_TEMPORARIES_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB, "GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX0_ARB, "GL_MATRIX0_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ERROR_STRING_ARB, "GL_PROGRAM_ERROR_STRING_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB, "GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX6_ARB, "GL_MATRIX6_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX30_ARB, "GL_MATRIX30_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX27_ARB, "GL_MATRIX27_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_TEXTURE_COORDS_ARB, "GL_MAX_TEXTURE_COORDS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX13_ARB, "GL_MATRIX13_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB, "GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX14_ARB, "GL_MATRIX14_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ERROR_POSITION_ARB, "GL_PROGRAM_ERROR_POSITION_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX5_ARB, "GL_MATRIX5_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX7_ARB, "GL_MATRIX7_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_TEX_INDIRECTIONS_ARB, "GL_PROGRAM_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_LENGTH_ARB, "GL_PROGRAM_LENGTH_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX26_ARB, "GL_MATRIX26_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX31_ARB, "GL_MATRIX31_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB");
  }
  private static final Map<Integer, String> GL_INGR_interlace_read = new HashMap<Integer, String>();
  private static void GL_INGR_interlace_read() {
    GL_INGR_interlace_read.put(GL_INTERLACE_READ_INGR, "GL_INTERLACE_READ_INGR");
  }
  private static final Map<Integer, String> GL_OES_blend_equation_separate = new HashMap<Integer, String>();
  private static void GL_OES_blend_equation_separate() {
    GL_OES_blend_equation_separate.put(GL_BLEND_EQUATION_RGB_OES, "GL_BLEND_EQUATION_RGB_OES");
    GL_OES_blend_equation_separate.put(GL_BLEND_EQUATION_ALPHA_OES, "GL_BLEND_EQUATION_ALPHA_OES");
  }
  private static final Map<Integer, String> GL_ARB_shading_language_include = new HashMap<Integer, String>();
  private static void GL_ARB_shading_language_include() {
    GL_ARB_shading_language_include.put(GL_SHADER_INCLUDE_ARB, "GL_SHADER_INCLUDE_ARB");
    GL_ARB_shading_language_include.put(GL_NAMED_STRING_LENGTH_ARB, "GL_NAMED_STRING_LENGTH_ARB");
    GL_ARB_shading_language_include.put(GL_NAMED_STRING_TYPE_ARB, "GL_NAMED_STRING_TYPE_ARB");
  }
  private static final Map<Integer, String> GL_SGIX_calligraphic_fragment = new HashMap<Integer, String>();
  private static void GL_SGIX_calligraphic_fragment() {
    GL_SGIX_calligraphic_fragment.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_uniform_buffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_uniform_buffer_object() {
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_DATA_SIZE, "GL_UNIFORM_BLOCK_DATA_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_MAX_UNIFORM_BUFFER_BINDINGS, "GL_MAX_UNIFORM_BUFFER_BINDINGS");
    GL_ARB_uniform_buffer_object.put(GL_MAX_FRAGMENT_UNIFORM_BLOCKS, "GL_MAX_FRAGMENT_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES");
    GL_ARB_uniform_buffer_object.put(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH");
    GL_ARB_uniform_buffer_object.put(GL_MAX_UNIFORM_BLOCK_SIZE, "GL_MAX_UNIFORM_BLOCK_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_OFFSET, "GL_UNIFORM_OFFSET");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_IS_ROW_MAJOR, "GL_UNIFORM_IS_ROW_MAJOR");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_INDEX, "GL_UNIFORM_BLOCK_INDEX");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_BINDING, "GL_UNIFORM_BLOCK_BINDING");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT");
    GL_ARB_uniform_buffer_object.put(GL_INVALID_INDEX, "GL_INVALID_INDEX");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_SIZE, "GL_UNIFORM_BUFFER_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_NAME_LENGTH, "GL_UNIFORM_BLOCK_NAME_LENGTH");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_ARRAY_STRIDE, "GL_UNIFORM_ARRAY_STRIDE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_BINDING, "GL_UNIFORM_BUFFER_BINDING");
    GL_ARB_uniform_buffer_object.put(GL_ACTIVE_UNIFORM_BLOCKS, "GL_ACTIVE_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_UNIFORM_BLOCKS, "GL_MAX_COMBINED_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_MATRIX_STRIDE, "GL_UNIFORM_MATRIX_STRIDE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_TYPE, "GL_UNIFORM_TYPE");
    GL_ARB_uniform_buffer_object.put(GL_MAX_VERTEX_UNIFORM_BLOCKS, "GL_MAX_VERTEX_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_START, "GL_UNIFORM_BUFFER_START");
  }
  private static final Map<Integer, String> GL_ARB_texture_compression_rgtc = new HashMap<Integer, String>();
  private static void GL_ARB_texture_compression_rgtc() {
    GL_ARB_texture_compression_rgtc.put(GL_COMPRESSED_SIGNED_RED_RGTC1, "GL_COMPRESSED_SIGNED_RED_RGTC1");
    GL_ARB_texture_compression_rgtc.put(GL_COMPRESSED_SIGNED_RG_RGTC2, "GL_COMPRESSED_SIGNED_RG_RGTC2");
    GL_ARB_texture_compression_rgtc.put(GL_COMPRESSED_RG_RGTC2, "GL_COMPRESSED_RG_RGTC2");
    GL_ARB_texture_compression_rgtc.put(GL_COMPRESSED_RED_RGTC1, "GL_COMPRESSED_RED_RGTC1");
  }
  private static final Map<Integer, String> GL_ARB_vertex_array_bgra = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_array_bgra() {
    GL_ARB_vertex_array_bgra.put(GL_BGRA, "GL_BGRA");
  }
  private static final Map<Integer, String> GL_IMG_shader_binary = new HashMap<Integer, String>();
  private static void GL_IMG_shader_binary() {
    GL_IMG_shader_binary.put(GL_SGX_BINARY_IMG, "GL_SGX_BINARY_IMG");
  }
  private static final Map<Integer, String> GL_SGI_texture_color_table = new HashMap<Integer, String>();
  private static void GL_SGI_texture_color_table() {
    GL_SGI_texture_color_table.put(GL_PROXY_TEXTURE_COLOR_TABLE_SGI, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI");
    GL_SGI_texture_color_table.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
  }
  private static final Map<Integer, String> GL_SGIX_list_priority = new HashMap<Integer, String>();
  private static void GL_SGIX_list_priority() {
    GL_SGIX_list_priority.put(GL_LIST_PRIORITY_SGIX, "GL_LIST_PRIORITY_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_enhanced_layouts = new HashMap<Integer, String>();
  private static void GL_ARB_enhanced_layouts() {
    GL_ARB_enhanced_layouts.put(GL_LOCATION_COMPONENT, "GL_LOCATION_COMPONENT");
    GL_ARB_enhanced_layouts.put(GL_TRANSFORM_FEEDBACK_BUFFER_INDEX, "GL_TRANSFORM_FEEDBACK_BUFFER_INDEX");
    GL_ARB_enhanced_layouts.put(GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE, "GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE");
    GL_ARB_enhanced_layouts.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
  }
  private static final Map<Integer, String> GL_ARB_occlusion_query = new HashMap<Integer, String>();
  private static void GL_ARB_occlusion_query() {
    GL_ARB_occlusion_query.put(GL_SAMPLES_PASSED_ARB, "GL_SAMPLES_PASSED_ARB");
    GL_ARB_occlusion_query.put(GL_QUERY_RESULT_ARB, "GL_QUERY_RESULT_ARB");
    GL_ARB_occlusion_query.put(GL_QUERY_RESULT_AVAILABLE_ARB, "GL_QUERY_RESULT_AVAILABLE_ARB");
    GL_ARB_occlusion_query.put(GL_QUERY_COUNTER_BITS_ARB, "GL_QUERY_COUNTER_BITS_ARB");
    GL_ARB_occlusion_query.put(GL_CURRENT_QUERY_ARB, "GL_CURRENT_QUERY_ARB");
  }
  private static final Map<Integer, String> GL_ARB_cull_distance = new HashMap<Integer, String>();
  private static void GL_ARB_cull_distance() {
    GL_ARB_cull_distance.put(GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES, "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES");
    GL_ARB_cull_distance.put(GL_MAX_CULL_DISTANCES, "GL_MAX_CULL_DISTANCES");
  }
  private static final Map<Integer, String> GL_NV_shadow_samplers_array = new HashMap<Integer, String>();
  private static void GL_NV_shadow_samplers_array() {
    GL_NV_shadow_samplers_array.put(GL_SAMPLER_2D_ARRAY_SHADOW_NV, "GL_SAMPLER_2D_ARRAY_SHADOW_NV");
  }
  private static final Map<Integer, String> GL_AMD_debug_output = new HashMap<Integer, String>();
  private static void GL_AMD_debug_output() {
    GL_AMD_debug_output.put(GL_MAX_DEBUG_LOGGED_MESSAGES_AMD, "GL_MAX_DEBUG_LOGGED_MESSAGES_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD, "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD, "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_SEVERITY_MEDIUM_AMD, "GL_DEBUG_SEVERITY_MEDIUM_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_SEVERITY_LOW_AMD, "GL_DEBUG_SEVERITY_LOW_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_PERFORMANCE_AMD, "GL_DEBUG_CATEGORY_PERFORMANCE_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_SEVERITY_HIGH_AMD, "GL_DEBUG_SEVERITY_HIGH_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_APPLICATION_AMD, "GL_DEBUG_CATEGORY_APPLICATION_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_DEPRECATION_AMD, "GL_DEBUG_CATEGORY_DEPRECATION_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_LOGGED_MESSAGES_AMD, "GL_DEBUG_LOGGED_MESSAGES_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD, "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD");
    GL_AMD_debug_output.put(GL_MAX_DEBUG_MESSAGE_LENGTH_AMD, "GL_MAX_DEBUG_MESSAGE_LENGTH_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_API_ERROR_AMD, "GL_DEBUG_CATEGORY_API_ERROR_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_OTHER_AMD, "GL_DEBUG_CATEGORY_OTHER_AMD");
  }
  private static final Map<Integer, String> GL_OES_EGL_image_external = new HashMap<Integer, String>();
  private static void GL_OES_EGL_image_external() {
    GL_OES_EGL_image_external.put(GL_TEXTURE_EXTERNAL_OES, "GL_TEXTURE_EXTERNAL_OES");
    GL_OES_EGL_image_external.put(GL_SAMPLER_EXTERNAL_OES, "GL_SAMPLER_EXTERNAL_OES");
    GL_OES_EGL_image_external.put(GL_TEXTURE_BINDING_EXTERNAL_OES, "GL_TEXTURE_BINDING_EXTERNAL_OES");
    GL_OES_EGL_image_external.put(GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES, "GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES");
  }
  private static final Map<Integer, String> GL_EXT_x11_sync_object = new HashMap<Integer, String>();
  private static void GL_EXT_x11_sync_object() {
    GL_EXT_x11_sync_object.put(GL_SYNC_X11_FENCE_EXT, "GL_SYNC_X11_FENCE_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_ycbcr_422 = new HashMap<Integer, String>();
  private static void GL_APPLE_ycbcr_422() {
    GL_APPLE_ycbcr_422.put(GL_YCBCR_422_APPLE, "GL_YCBCR_422_APPLE");
    GL_APPLE_ycbcr_422.put(GL_UNSIGNED_SHORT_8_8_REV_APPLE, "GL_UNSIGNED_SHORT_8_8_REV_APPLE");
    GL_APPLE_ycbcr_422.put(GL_UNSIGNED_SHORT_8_8_APPLE, "GL_UNSIGNED_SHORT_8_8_APPLE");
  }
  private static final Map<Integer, String> GL_OES_texture_stencil8 = new HashMap<Integer, String>();
  private static void GL_OES_texture_stencil8() {
    GL_OES_texture_stencil8.put(GL_STENCIL_INDEX_OES, "GL_STENCIL_INDEX_OES");
    GL_OES_texture_stencil8.put(GL_STENCIL_INDEX8_OES, "GL_STENCIL_INDEX8_OES");
  }
  private static final Map<Integer, String> GL_KHR_no_error = new HashMap<Integer, String>();
  private static void GL_KHR_no_error() {
    GL_KHR_no_error.put(GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR, "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR");
  }
  private static final Map<Integer, String> GL_NV_fragment_coverage_to_color = new HashMap<Integer, String>();
  private static void GL_NV_fragment_coverage_to_color() {
    GL_NV_fragment_coverage_to_color.put(GL_FRAGMENT_COVERAGE_COLOR_NV, "GL_FRAGMENT_COVERAGE_COLOR_NV");
    GL_NV_fragment_coverage_to_color.put(GL_FRAGMENT_COVERAGE_TO_COLOR_NV, "GL_FRAGMENT_COVERAGE_TO_COLOR_NV");
  }
  private static final Map<Integer, String> GL_NV_copy_buffer = new HashMap<Integer, String>();
  private static void GL_NV_copy_buffer() {
    GL_NV_copy_buffer.put(GL_COPY_READ_BUFFER_NV, "GL_COPY_READ_BUFFER_NV");
    GL_NV_copy_buffer.put(GL_COPY_WRITE_BUFFER_NV, "GL_COPY_WRITE_BUFFER_NV");
  }
  private static final Map<Integer, String> GL_APPLE_transform_hint = new HashMap<Integer, String>();
  private static void GL_APPLE_transform_hint() {
    GL_APPLE_transform_hint.put(GL_TRANSFORM_HINT_APPLE, "GL_TRANSFORM_HINT_APPLE");
  }
  private static final Map<Integer, String> GL_NV_video_capture = new HashMap<Integer, String>();
  private static void GL_NV_video_capture() {
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_MIN_NV, "GL_VIDEO_COLOR_CONVERSION_MIN_NV");
    GL_NV_video_capture.put(GL_YCBAYCR8A_4224_NV, "GL_YCBAYCR8A_4224_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV, "GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV");
    GL_NV_video_capture.put(GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV, "GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV");
    GL_NV_video_capture.put(GL_FIELD_LOWER_NV, "GL_FIELD_LOWER_NV");
    GL_NV_video_capture.put(GL_NUM_VIDEO_CAPTURE_STREAMS_NV, "GL_NUM_VIDEO_CAPTURE_STREAMS_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_NV, "GL_VIDEO_BUFFER_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV, "GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV");
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_MATRIX_NV, "GL_VIDEO_COLOR_CONVERSION_MATRIX_NV");
    GL_NV_video_capture.put(GL_Z4Y12Z4CB12Z4CR12_444_NV, "GL_Z4Y12Z4CB12Z4CR12_444_NV");
    GL_NV_video_capture.put(GL_SUCCESS_NV, "GL_SUCCESS_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_BINDING_NV, "GL_VIDEO_BUFFER_BINDING_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_PITCH_NV, "GL_VIDEO_BUFFER_PITCH_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV, "GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV");
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_OFFSET_NV, "GL_VIDEO_COLOR_CONVERSION_OFFSET_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV, "GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV");
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_MAX_NV, "GL_VIDEO_COLOR_CONVERSION_MAX_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FRAME_WIDTH_NV, "GL_VIDEO_CAPTURE_FRAME_WIDTH_NV");
    GL_NV_video_capture.put(GL_PARTIAL_SUCCESS_NV, "GL_PARTIAL_SUCCESS_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV, "GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV, "GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV");
    GL_NV_video_capture.put(GL_LAST_VIDEO_CAPTURE_STATUS_NV, "GL_LAST_VIDEO_CAPTURE_STATUS_NV");
    GL_NV_video_capture.put(GL_FAILURE_NV, "GL_FAILURE_NV");
    GL_NV_video_capture.put(GL_YCBYCR8_422_NV, "GL_YCBYCR8_422_NV");
    GL_NV_video_capture.put(GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV, "GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV");
    GL_NV_video_capture.put(GL_FIELD_UPPER_NV, "GL_FIELD_UPPER_NV");
    GL_NV_video_capture.put(GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV, "GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV");
    GL_NV_video_capture.put(GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV, "GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV");
    GL_NV_video_capture.put(GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV, "GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV");
  }
  private static final Map<Integer, String> GL_SGIX_texture_lod_bias = new HashMap<Integer, String>();
  private static void GL_SGIX_texture_lod_bias() {
    GL_SGIX_texture_lod_bias.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    GL_SGIX_texture_lod_bias.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    GL_SGIX_texture_lod_bias.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
  }
  private static final Map<Integer, String> GL_SGIX_convolution_accuracy = new HashMap<Integer, String>();
  private static void GL_SGIX_convolution_accuracy() {
    GL_SGIX_convolution_accuracy.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
  }
  private static final Map<Integer, String> GL_NV_vertex_array_range = new HashMap<Integer, String>();
  private static void GL_NV_vertex_array_range() {
    GL_NV_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_VALID_NV, "GL_VERTEX_ARRAY_RANGE_VALID_NV");
    GL_NV_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_NV, "GL_VERTEX_ARRAY_RANGE_NV");
    GL_NV_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_POINTER_NV, "GL_VERTEX_ARRAY_RANGE_POINTER_NV");
    GL_NV_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_LENGTH_NV, "GL_VERTEX_ARRAY_RANGE_LENGTH_NV");
    GL_NV_vertex_array_range.put(GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV, "GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV");
  }
  private static final Map<Integer, String> GL_EXT_cull_vertex = new HashMap<Integer, String>();
  private static void GL_EXT_cull_vertex() {
    GL_EXT_cull_vertex.put(GL_CULL_VERTEX_OBJECT_POSITION_EXT, "GL_CULL_VERTEX_OBJECT_POSITION_EXT");
    GL_EXT_cull_vertex.put(GL_CULL_VERTEX_EXT, "GL_CULL_VERTEX_EXT");
    GL_EXT_cull_vertex.put(GL_CULL_VERTEX_EYE_POSITION_EXT, "GL_CULL_VERTEX_EYE_POSITION_EXT");
  }
  private static final Map<Integer, String> GL_SGIX_instruments = new HashMap<Integer, String>();
  private static void GL_SGIX_instruments() {
    GL_SGIX_instruments.put(GL_INSTRUMENT_BUFFER_POINTER_SGIX, "GL_INSTRUMENT_BUFFER_POINTER_SGIX");
    GL_SGIX_instruments.put(GL_INSTRUMENT_MEASUREMENTS_SGIX, "GL_INSTRUMENT_MEASUREMENTS_SGIX");
  }
  private static final Map<Integer, String> GL_NV_texture_rectangle = new HashMap<Integer, String>();
  private static void GL_NV_texture_rectangle() {
    GL_NV_texture_rectangle.put(GL_MAX_RECTANGLE_TEXTURE_SIZE_NV, "GL_MAX_RECTANGLE_TEXTURE_SIZE_NV");
    GL_NV_texture_rectangle.put(GL_TEXTURE_BINDING_RECTANGLE_NV, "GL_TEXTURE_BINDING_RECTANGLE_NV");
    GL_NV_texture_rectangle.put(GL_TEXTURE_RECTANGLE_NV, "GL_TEXTURE_RECTANGLE_NV");
    GL_NV_texture_rectangle.put(GL_PROXY_TEXTURE_RECTANGLE_NV, "GL_PROXY_TEXTURE_RECTANGLE_NV");
  }
  private static final Map<Integer, String> GL_EXT_shared_texture_palette = new HashMap<Integer, String>();
  private static void GL_EXT_shared_texture_palette() {
    GL_EXT_shared_texture_palette.put(GL_SHARED_TEXTURE_PALETTE_EXT, "GL_SHARED_TEXTURE_PALETTE_EXT");
  }
  private static final Map<Integer, String> GL_ARB_occlusion_query2 = new HashMap<Integer, String>();
  private static void GL_ARB_occlusion_query2() {
    GL_ARB_occlusion_query2.put(GL_ANY_SAMPLES_PASSED, "GL_ANY_SAMPLES_PASSED");
  }
  private static final Map<Integer, String> GL_NV_depth_buffer_float = new HashMap<Integer, String>();
  private static void GL_NV_depth_buffer_float() {
    GL_NV_depth_buffer_float.put(GL_DEPTH32F_STENCIL8_NV, "GL_DEPTH32F_STENCIL8_NV");
    GL_NV_depth_buffer_float.put(GL_DEPTH_BUFFER_FLOAT_MODE_NV, "GL_DEPTH_BUFFER_FLOAT_MODE_NV");
    GL_NV_depth_buffer_float.put(GL_DEPTH_COMPONENT32F_NV, "GL_DEPTH_COMPONENT32F_NV");
    GL_NV_depth_buffer_float.put(GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV");
  }
  private static final Map<Integer, String> GL_ARB_texture_mirrored_repeat = new HashMap<Integer, String>();
  private static void GL_ARB_texture_mirrored_repeat() {
    GL_ARB_texture_mirrored_repeat.put(GL_MIRRORED_REPEAT_ARB, "GL_MIRRORED_REPEAT_ARB");
  }
  private static final Map<Integer, String> GL_AMD_seamless_cubemap_per_texture = new HashMap<Integer, String>();
  private static void GL_AMD_seamless_cubemap_per_texture() {
    GL_AMD_seamless_cubemap_per_texture.put(GL_TEXTURE_CUBE_MAP_SEAMLESS, "GL_TEXTURE_CUBE_MAP_SEAMLESS");
  }
  private static final Map<Integer, String> GL_ARB_texture_gather = new HashMap<Integer, String>();
  private static void GL_ARB_texture_gather() {
    GL_ARB_texture_gather.put(GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB, "GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB");
    GL_ARB_texture_gather.put(GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB");
    GL_ARB_texture_gather.put(GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB");
  }
  private static final Map<Integer, String> GL_ARM_shader_framebuffer_fetch = new HashMap<Integer, String>();
  private static void GL_ARM_shader_framebuffer_fetch() {
    GL_ARM_shader_framebuffer_fetch.put(GL_FETCH_PER_SAMPLE_ARM, "GL_FETCH_PER_SAMPLE_ARM");
    GL_ARM_shader_framebuffer_fetch.put(GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM, "GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM");
  }
  private static final Map<Integer, String> GL_ATI_texture_float = new HashMap<Integer, String>();
  private static void GL_ATI_texture_float() {
    GL_ATI_texture_float.put(GL_INTENSITY_FLOAT32_ATI, "GL_INTENSITY_FLOAT32_ATI");
    GL_ATI_texture_float.put(GL_LUMINANCE_ALPHA_FLOAT16_ATI, "GL_LUMINANCE_ALPHA_FLOAT16_ATI");
    GL_ATI_texture_float.put(GL_RGB_FLOAT32_ATI, "GL_RGB_FLOAT32_ATI");
    GL_ATI_texture_float.put(GL_LUMINANCE_FLOAT32_ATI, "GL_LUMINANCE_FLOAT32_ATI");
    GL_ATI_texture_float.put(GL_LUMINANCE_FLOAT16_ATI, "GL_LUMINANCE_FLOAT16_ATI");
    GL_ATI_texture_float.put(GL_ALPHA_FLOAT16_ATI, "GL_ALPHA_FLOAT16_ATI");
    GL_ATI_texture_float.put(GL_LUMINANCE_ALPHA_FLOAT32_ATI, "GL_LUMINANCE_ALPHA_FLOAT32_ATI");
    GL_ATI_texture_float.put(GL_ALPHA_FLOAT32_ATI, "GL_ALPHA_FLOAT32_ATI");
    GL_ATI_texture_float.put(GL_RGBA_FLOAT16_ATI, "GL_RGBA_FLOAT16_ATI");
    GL_ATI_texture_float.put(GL_RGBA_FLOAT32_ATI, "GL_RGBA_FLOAT32_ATI");
    GL_ATI_texture_float.put(GL_INTENSITY_FLOAT16_ATI, "GL_INTENSITY_FLOAT16_ATI");
    GL_ATI_texture_float.put(GL_RGB_FLOAT16_ATI, "GL_RGB_FLOAT16_ATI");
  }
  private static final Map<Integer, String> GL_EXT_shader_framebuffer_fetch = new HashMap<Integer, String>();
  private static void GL_EXT_shader_framebuffer_fetch() {
    GL_EXT_shader_framebuffer_fetch.put(GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT, "GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT");
  }
  private static final Map<Integer, String> GL_ARB_shader_objects = new HashMap<Integer, String>();
  private static void GL_ARB_shader_objects() {
    GL_ARB_shader_objects.put(GL_SAMPLER_1D_SHADOW_ARB, "GL_SAMPLER_1D_SHADOW_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_SHADOW_ARB, "GL_SAMPLER_2D_SHADOW_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_RECT_ARB, "GL_SAMPLER_2D_RECT_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_VEC3_ARB, "GL_BOOL_VEC3_ARB");
    GL_ARB_shader_objects.put(GL_PROGRAM_OBJECT_ARB, "GL_PROGRAM_OBJECT_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_COMPILE_STATUS_ARB, "GL_OBJECT_COMPILE_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_DELETE_STATUS_ARB, "GL_OBJECT_DELETE_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_INT_VEC4_ARB, "GL_INT_VEC4_ARB");
    GL_ARB_shader_objects.put(GL_SHADER_OBJECT_ARB, "GL_SHADER_OBJECT_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_VALIDATE_STATUS_ARB, "GL_OBJECT_VALIDATE_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_ACTIVE_UNIFORMS_ARB, "GL_OBJECT_ACTIVE_UNIFORMS_ARB");
    GL_ARB_shader_objects.put(GL_INT_VEC3_ARB, "GL_INT_VEC3_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_ARB, "GL_BOOL_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_VEC2_ARB, "GL_FLOAT_VEC2_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_RECT_SHADOW_ARB, "GL_SAMPLER_2D_RECT_SHADOW_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_MAT2_ARB, "GL_FLOAT_MAT2_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_LINK_STATUS_ARB, "GL_OBJECT_LINK_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_VEC4_ARB, "GL_BOOL_VEC4_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_SHADER_SOURCE_LENGTH_ARB, "GL_OBJECT_SHADER_SOURCE_LENGTH_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_ATTACHED_OBJECTS_ARB, "GL_OBJECT_ATTACHED_OBJECTS_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_3D_ARB, "GL_SAMPLER_3D_ARB");
    GL_ARB_shader_objects.put(GL_INT_VEC2_ARB, "GL_INT_VEC2_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_ARB, "GL_SAMPLER_2D_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_MAT3_ARB, "GL_FLOAT_MAT3_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_VEC3_ARB, "GL_FLOAT_VEC3_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_MAT4_ARB, "GL_FLOAT_MAT4_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_VEC2_ARB, "GL_BOOL_VEC2_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_1D_ARB, "GL_SAMPLER_1D_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_SUBTYPE_ARB, "GL_OBJECT_SUBTYPE_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_VEC4_ARB, "GL_FLOAT_VEC4_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_INFO_LOG_LENGTH_ARB, "GL_OBJECT_INFO_LOG_LENGTH_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_TYPE_ARB, "GL_OBJECT_TYPE_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB, "GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_CUBE_ARB, "GL_SAMPLER_CUBE_ARB");
  }
  private static final Map<Integer, String> GL_IBM_texture_mirrored_repeat = new HashMap<Integer, String>();
  private static void GL_IBM_texture_mirrored_repeat() {
    GL_IBM_texture_mirrored_repeat.put(GL_MIRRORED_REPEAT_IBM, "GL_MIRRORED_REPEAT_IBM");
  }
  private static final Map<Integer, String> GL_EXT_multiview_draw_buffers = new HashMap<Integer, String>();
  private static void GL_EXT_multiview_draw_buffers() {
    GL_EXT_multiview_draw_buffers.put(GL_READ_BUFFER_EXT, "GL_READ_BUFFER_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_DRAW_BUFFER_EXT, "GL_DRAW_BUFFER_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_MULTIVIEW_EXT, "GL_MULTIVIEW_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_COLOR_ATTACHMENT_EXT, "GL_COLOR_ATTACHMENT_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_MAX_MULTIVIEW_BUFFERS_EXT, "GL_MAX_MULTIVIEW_BUFFERS_EXT");
  }
  private static final Map<Integer, String> GL_ANGLE_framebuffer_blit = new HashMap<Integer, String>();
  private static void GL_ANGLE_framebuffer_blit() {
    GL_ANGLE_framebuffer_blit.put(GL_READ_FRAMEBUFFER_BINDING_ANGLE, "GL_READ_FRAMEBUFFER_BINDING_ANGLE");
    GL_ANGLE_framebuffer_blit.put(GL_READ_FRAMEBUFFER_ANGLE, "GL_READ_FRAMEBUFFER_ANGLE");
    GL_ANGLE_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_BINDING_ANGLE, "GL_DRAW_FRAMEBUFFER_BINDING_ANGLE");
    GL_ANGLE_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_ANGLE, "GL_DRAW_FRAMEBUFFER_ANGLE");
  }
  private static final Map<Integer, String> GL_ANGLE_texture_compression_dxt3 = new HashMap<Integer, String>();
  private static void GL_ANGLE_texture_compression_dxt3() {
    GL_ANGLE_texture_compression_dxt3.put(GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE, "GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE");
  }
  private static final Map<Integer, String> GL_MESA_pack_invert = new HashMap<Integer, String>();
  private static void GL_MESA_pack_invert() {
    GL_MESA_pack_invert.put(GL_PACK_INVERT_MESA, "GL_PACK_INVERT_MESA");
  }
  private static final Map<Integer, String> GL_QCOM_perfmon_global_mode = new HashMap<Integer, String>();
  private static void GL_QCOM_perfmon_global_mode() {
    GL_QCOM_perfmon_global_mode.put(GL_PERFMON_GLOBAL_MODE_QCOM, "GL_PERFMON_GLOBAL_MODE_QCOM");
  }
  private static final Map<Integer, String> GL_AMD_interleaved_elements = new HashMap<Integer, String>();
  private static void GL_AMD_interleaved_elements() {
    GL_AMD_interleaved_elements.put(GL_BLUE, "GL_BLUE");
    GL_AMD_interleaved_elements.put(GL_GREEN, "GL_GREEN");
    GL_AMD_interleaved_elements.put(GL_RG8UI, "GL_RG8UI");
    GL_AMD_interleaved_elements.put(GL_RED, "GL_RED");
    GL_AMD_interleaved_elements.put(GL_ALPHA, "GL_ALPHA");
    GL_AMD_interleaved_elements.put(GL_RGBA8UI, "GL_RGBA8UI");
    GL_AMD_interleaved_elements.put(GL_RG16UI, "GL_RG16UI");
    GL_AMD_interleaved_elements.put(GL_VERTEX_ID_SWIZZLE_AMD, "GL_VERTEX_ID_SWIZZLE_AMD");
    GL_AMD_interleaved_elements.put(GL_VERTEX_ELEMENT_SWIZZLE_AMD, "GL_VERTEX_ELEMENT_SWIZZLE_AMD");
  }
  private static final Map<Integer, String> GL_OES_point_sprite = new HashMap<Integer, String>();
  private static void GL_OES_point_sprite() {
    GL_OES_point_sprite.put(GL_COORD_REPLACE_OES, "GL_COORD_REPLACE_OES");
    GL_OES_point_sprite.put(GL_POINT_SPRITE_OES, "GL_POINT_SPRITE_OES");
  }
  private static final Map<Integer, String> GL_ARB_vertex_array_object = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_array_object() {
    GL_ARB_vertex_array_object.put(GL_VERTEX_ARRAY_BINDING, "GL_VERTEX_ARRAY_BINDING");
  }
  private static final Map<Integer, String> GL_EXT_memory_object_win32 = new HashMap<Integer, String>();
  private static void GL_EXT_memory_object_win32() {
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT, "GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D12_RESOURCE_EXT, "GL_HANDLE_TYPE_D3D12_RESOURCE_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D11_IMAGE_EXT, "GL_HANDLE_TYPE_D3D11_IMAGE_EXT");
    GL_EXT_memory_object_win32.put(GL_DEVICE_NODE_MASK_EXT, "GL_DEVICE_NODE_MASK_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_EXT");
    GL_EXT_memory_object_win32.put(GL_DEVICE_LUID_EXT, "GL_DEVICE_LUID_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT, "GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT");
    GL_EXT_memory_object_win32.put(GL_LUID_SIZE_EXT, "GL_LUID_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_geometry_shader4 = new HashMap<Integer, String>();
  private static void GL_EXT_geometry_shader4() {
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_OUTPUT_TYPE_EXT, "GL_GEOMETRY_OUTPUT_TYPE_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_EXT_geometry_shader4.put(GL_PROGRAM_POINT_SIZE_EXT, "GL_PROGRAM_POINT_SIZE_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_VERTICES_OUT_EXT, "GL_GEOMETRY_VERTICES_OUT_EXT");
    GL_EXT_geometry_shader4.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_VERTEX_VARYING_COMPONENTS_EXT, "GL_MAX_VERTEX_VARYING_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_SHADER_EXT, "GL_GEOMETRY_SHADER_EXT");
    GL_EXT_geometry_shader4.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_VARYING_COMPONENTS_EXT, "GL_MAX_VARYING_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_INPUT_TYPE_EXT, "GL_GEOMETRY_INPUT_TYPE_EXT");
  }
  private static final Map<Integer, String> GL_ANGLE_texture_compression_dxt5 = new HashMap<Integer, String>();
  private static void GL_ANGLE_texture_compression_dxt5() {
    GL_ANGLE_texture_compression_dxt5.put(GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE, "GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE");
  }
  private static final Map<Integer, String> GL_EXT_stencil_two_side = new HashMap<Integer, String>();
  private static void GL_EXT_stencil_two_side() {
    GL_EXT_stencil_two_side.put(GL_ACTIVE_STENCIL_FACE_EXT, "GL_ACTIVE_STENCIL_FACE_EXT");
    GL_EXT_stencil_two_side.put(GL_STENCIL_TEST_TWO_SIDE_EXT, "GL_STENCIL_TEST_TWO_SIDE_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_float_pixels = new HashMap<Integer, String>();
  private static void GL_APPLE_float_pixels() {
    GL_APPLE_float_pixels.put(GL_LUMINANCE_FLOAT32_APPLE, "GL_LUMINANCE_FLOAT32_APPLE");
    GL_APPLE_float_pixels.put(GL_RGB_FLOAT16_APPLE, "GL_RGB_FLOAT16_APPLE");
    GL_APPLE_float_pixels.put(GL_LUMINANCE_ALPHA_FLOAT16_APPLE, "GL_LUMINANCE_ALPHA_FLOAT16_APPLE");
    GL_APPLE_float_pixels.put(GL_RGBA_FLOAT32_APPLE, "GL_RGBA_FLOAT32_APPLE");
    GL_APPLE_float_pixels.put(GL_INTENSITY_FLOAT16_APPLE, "GL_INTENSITY_FLOAT16_APPLE");
    GL_APPLE_float_pixels.put(GL_RGBA_FLOAT16_APPLE, "GL_RGBA_FLOAT16_APPLE");
    GL_APPLE_float_pixels.put(GL_COLOR_FLOAT_APPLE, "GL_COLOR_FLOAT_APPLE");
    GL_APPLE_float_pixels.put(GL_LUMINANCE_FLOAT16_APPLE, "GL_LUMINANCE_FLOAT16_APPLE");
    GL_APPLE_float_pixels.put(GL_LUMINANCE_ALPHA_FLOAT32_APPLE, "GL_LUMINANCE_ALPHA_FLOAT32_APPLE");
    GL_APPLE_float_pixels.put(GL_RGB_FLOAT32_APPLE, "GL_RGB_FLOAT32_APPLE");
    GL_APPLE_float_pixels.put(GL_INTENSITY_FLOAT32_APPLE, "GL_INTENSITY_FLOAT32_APPLE");
    GL_APPLE_float_pixels.put(GL_HALF_APPLE, "GL_HALF_APPLE");
    GL_APPLE_float_pixels.put(GL_ALPHA_FLOAT32_APPLE, "GL_ALPHA_FLOAT32_APPLE");
    GL_APPLE_float_pixels.put(GL_ALPHA_FLOAT16_APPLE, "GL_ALPHA_FLOAT16_APPLE");
  }
  private static final Map<Integer, String> GL_NV_shader_buffer_load = new HashMap<Integer, String>();
  private static void GL_NV_shader_buffer_load() {
    GL_NV_shader_buffer_load.put(GL_MAX_SHADER_BUFFER_ADDRESS_NV, "GL_MAX_SHADER_BUFFER_ADDRESS_NV");
    GL_NV_shader_buffer_load.put(GL_BUFFER_GPU_ADDRESS_NV, "GL_BUFFER_GPU_ADDRESS_NV");
    GL_NV_shader_buffer_load.put(GL_GPU_ADDRESS_NV, "GL_GPU_ADDRESS_NV");
  }
  private static final Map<Integer, String> GL_IMG_program_binary = new HashMap<Integer, String>();
  private static void GL_IMG_program_binary() {
    GL_IMG_program_binary.put(GL_SGX_PROGRAM_BINARY_IMG, "GL_SGX_PROGRAM_BINARY_IMG");
  }
  private static final Map<Integer, String> GL_NV_coverage_sample = new HashMap<Integer, String>();
  private static void GL_NV_coverage_sample() {
    GL_NV_coverage_sample.put(GL_COVERAGE_SAMPLES_NV, "GL_COVERAGE_SAMPLES_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_BUFFERS_NV, "GL_COVERAGE_BUFFERS_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_COMPONENT_NV, "GL_COVERAGE_COMPONENT_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_COMPONENT4_NV, "GL_COVERAGE_COMPONENT4_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_EDGE_FRAGMENTS_NV, "GL_COVERAGE_EDGE_FRAGMENTS_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_ATTACHMENT_NV, "GL_COVERAGE_ATTACHMENT_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_ALL_FRAGMENTS_NV, "GL_COVERAGE_ALL_FRAGMENTS_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_AUTOMATIC_NV, "GL_COVERAGE_AUTOMATIC_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_BUFFER_BIT_NV, "GL_COVERAGE_BUFFER_BIT_NV");
  }
  private static final Map<Integer, String> GL_NV_float_buffer = new HashMap<Integer, String>();
  private static void GL_NV_float_buffer() {
    GL_NV_float_buffer.put(GL_TEXTURE_FLOAT_COMPONENTS_NV, "GL_TEXTURE_FLOAT_COMPONENTS_NV");
    GL_NV_float_buffer.put(GL_FLOAT_R32_NV, "GL_FLOAT_R32_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGBA32_NV, "GL_FLOAT_RGBA32_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGB_NV, "GL_FLOAT_RGB_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGBA_NV, "GL_FLOAT_RGBA_NV");
    GL_NV_float_buffer.put(GL_FLOAT_R16_NV, "GL_FLOAT_R16_NV");
    GL_NV_float_buffer.put(GL_FLOAT_R_NV, "GL_FLOAT_R_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGBA16_NV, "GL_FLOAT_RGBA16_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGBA_MODE_NV, "GL_FLOAT_RGBA_MODE_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RG_NV, "GL_FLOAT_RG_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RG16_NV, "GL_FLOAT_RG16_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RG32_NV, "GL_FLOAT_RG32_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGB16_NV, "GL_FLOAT_RGB16_NV");
    GL_NV_float_buffer.put(GL_FLOAT_RGB32_NV, "GL_FLOAT_RGB32_NV");
    GL_NV_float_buffer.put(GL_FLOAT_CLEAR_COLOR_VALUE_NV, "GL_FLOAT_CLEAR_COLOR_VALUE_NV");
  }
  private static final Map<Integer, String> GL_NV_texture_expand_normal = new HashMap<Integer, String>();
  private static void GL_NV_texture_expand_normal() {
    GL_NV_texture_expand_normal.put(GL_TEXTURE_UNSIGNED_REMAP_MODE_NV, "GL_TEXTURE_UNSIGNED_REMAP_MODE_NV");
  }
  private static final Map<Integer, String> GL_ATI_envmap_bumpmap = new HashMap<Integer, String>();
  private static void GL_ATI_envmap_bumpmap() {
    GL_ATI_envmap_bumpmap.put(GL_BUMP_TARGET_ATI, "GL_BUMP_TARGET_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_ROT_MATRIX_SIZE_ATI, "GL_BUMP_ROT_MATRIX_SIZE_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_NUM_TEX_UNITS_ATI, "GL_BUMP_NUM_TEX_UNITS_ATI");
    GL_ATI_envmap_bumpmap.put(GL_DUDV_ATI, "GL_DUDV_ATI");
    GL_ATI_envmap_bumpmap.put(GL_DU8DV8_ATI, "GL_DU8DV8_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_ENVMAP_ATI, "GL_BUMP_ENVMAP_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_ROT_MATRIX_ATI, "GL_BUMP_ROT_MATRIX_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_TEX_UNITS_ATI, "GL_BUMP_TEX_UNITS_ATI");
  }
  private static final Map<Integer, String> GL_AMD_framebuffer_sample_positions = new HashMap<Integer, String>();
  private static void GL_AMD_framebuffer_sample_positions() {
    GL_AMD_framebuffer_sample_positions.put(GL_SUBSAMPLE_DISTANCE_AMD, "GL_SUBSAMPLE_DISTANCE_AMD");
    GL_AMD_framebuffer_sample_positions.put(GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD");
    GL_AMD_framebuffer_sample_positions.put(GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD");
    GL_AMD_framebuffer_sample_positions.put(GL_ALL_PIXELS_AMD, "GL_ALL_PIXELS_AMD");
  }
  private static final Map<Integer, String> GL_NV_occlusion_query = new HashMap<Integer, String>();
  private static void GL_NV_occlusion_query() {
    GL_NV_occlusion_query.put(GL_PIXEL_COUNT_AVAILABLE_NV, "GL_PIXEL_COUNT_AVAILABLE_NV");
    GL_NV_occlusion_query.put(GL_PIXEL_COUNTER_BITS_NV, "GL_PIXEL_COUNTER_BITS_NV");
    GL_NV_occlusion_query.put(GL_CURRENT_OCCLUSION_QUERY_ID_NV, "GL_CURRENT_OCCLUSION_QUERY_ID_NV");
    GL_NV_occlusion_query.put(GL_PIXEL_COUNT_NV, "GL_PIXEL_COUNT_NV");
  }
  private static final Map<Integer, String> GL_AMD_sparse_texture = new HashMap<Integer, String>();
  private static void GL_AMD_sparse_texture() {
    GL_AMD_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_X_AMD, "GL_VIRTUAL_PAGE_SIZE_X_AMD");
    GL_AMD_sparse_texture.put(GL_TEXTURE_STORAGE_SPARSE_BIT_AMD, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD");
    GL_AMD_sparse_texture.put(GL_MIN_LOD_WARNING_AMD, "GL_MIN_LOD_WARNING_AMD");
    GL_AMD_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Y_AMD, "GL_VIRTUAL_PAGE_SIZE_Y_AMD");
    GL_AMD_sparse_texture.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD");
    GL_AMD_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Z_AMD, "GL_VIRTUAL_PAGE_SIZE_Z_AMD");
    GL_AMD_sparse_texture.put(GL_MAX_SPARSE_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_TEXTURE_SIZE_AMD");
    GL_AMD_sparse_texture.put(GL_MIN_SPARSE_LEVEL_AMD, "GL_MIN_SPARSE_LEVEL_AMD");
    GL_AMD_sparse_texture.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS");
  }
  private static final Map<Integer, String> GL_EXT_texture_norm16 = new HashMap<Integer, String>();
  private static void GL_EXT_texture_norm16() {
    GL_EXT_texture_norm16.put(GL_RG16_SNORM_EXT, "GL_RG16_SNORM_EXT");
    GL_EXT_texture_norm16.put(GL_R16_SNORM_EXT, "GL_R16_SNORM_EXT");
    GL_EXT_texture_norm16.put(GL_RGBA16_SNORM_EXT, "GL_RGBA16_SNORM_EXT");
    GL_EXT_texture_norm16.put(GL_RG16_EXT, "GL_RG16_EXT");
    GL_EXT_texture_norm16.put(GL_RGBA16_EXT, "GL_RGBA16_EXT");
    GL_EXT_texture_norm16.put(GL_RGB16_EXT, "GL_RGB16_EXT");
    GL_EXT_texture_norm16.put(GL_R16_EXT, "GL_R16_EXT");
    GL_EXT_texture_norm16.put(GL_RGB16_SNORM_EXT, "GL_RGB16_SNORM_EXT");
  }
  private static final Map<Integer, String> GL_NV_shader_buffer_store = new HashMap<Integer, String>();
  private static void GL_NV_shader_buffer_store() {
    GL_NV_shader_buffer_store.put(GL_WRITE_ONLY, "GL_WRITE_ONLY");
    GL_NV_shader_buffer_store.put(GL_READ_WRITE, "GL_READ_WRITE");
    GL_NV_shader_buffer_store.put(GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV, "GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_s3tc = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_s3tc() {
    GL_EXT_texture_compression_s3tc.put(GL_COMPRESSED_RGB_S3TC_DXT1_EXT, "GL_COMPRESSED_RGB_S3TC_DXT1_EXT");
    GL_EXT_texture_compression_s3tc.put(GL_COMPRESSED_RGBA_S3TC_DXT1_EXT, "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT");
    GL_EXT_texture_compression_s3tc.put(GL_COMPRESSED_RGBA_S3TC_DXT5_EXT, "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT");
    GL_EXT_texture_compression_s3tc.put(GL_COMPRESSED_RGBA_S3TC_DXT3_EXT, "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT");
  }
  private static final Map<Integer, String> GL_EXT_robustness = new HashMap<Integer, String>();
  private static void GL_EXT_robustness() {
    GL_EXT_robustness.put(GL_INNOCENT_CONTEXT_RESET_EXT, "GL_INNOCENT_CONTEXT_RESET_EXT");
    GL_EXT_robustness.put(GL_NO_RESET_NOTIFICATION_EXT, "GL_NO_RESET_NOTIFICATION_EXT");
    GL_EXT_robustness.put(GL_NO_ERROR, "GL_NO_ERROR");
    GL_EXT_robustness.put(GL_LOSE_CONTEXT_ON_RESET_EXT, "GL_LOSE_CONTEXT_ON_RESET_EXT");
    GL_EXT_robustness.put(GL_GUILTY_CONTEXT_RESET_EXT, "GL_GUILTY_CONTEXT_RESET_EXT");
    GL_EXT_robustness.put(GL_RESET_NOTIFICATION_STRATEGY_EXT, "GL_RESET_NOTIFICATION_STRATEGY_EXT");
    GL_EXT_robustness.put(GL_UNKNOWN_CONTEXT_RESET_EXT, "GL_UNKNOWN_CONTEXT_RESET_EXT");
    GL_EXT_robustness.put(GL_CONTEXT_ROBUST_ACCESS_EXT, "GL_CONTEXT_ROBUST_ACCESS_EXT");
  }
  private static final Map<Integer, String> GL_MESAX_texture_stack = new HashMap<Integer, String>();
  private static void GL_MESAX_texture_stack() {
    GL_MESAX_texture_stack.put(GL_TEXTURE_1D_STACK_BINDING_MESAX, "GL_TEXTURE_1D_STACK_BINDING_MESAX");
    GL_MESAX_texture_stack.put(GL_TEXTURE_2D_STACK_BINDING_MESAX, "GL_TEXTURE_2D_STACK_BINDING_MESAX");
    GL_MESAX_texture_stack.put(GL_TEXTURE_1D_STACK_MESAX, "GL_TEXTURE_1D_STACK_MESAX");
    GL_MESAX_texture_stack.put(GL_TEXTURE_2D_STACK_MESAX, "GL_TEXTURE_2D_STACK_MESAX");
    GL_MESAX_texture_stack.put(GL_PROXY_TEXTURE_1D_STACK_MESAX, "GL_PROXY_TEXTURE_1D_STACK_MESAX");
    GL_MESAX_texture_stack.put(GL_PROXY_TEXTURE_2D_STACK_MESAX, "GL_PROXY_TEXTURE_2D_STACK_MESAX");
  }
  private static final Map<Integer, String> GL_NV_tessellation_program5 = new HashMap<Integer, String>();
  private static void GL_NV_tessellation_program5() {
    GL_NV_tessellation_program5.put(GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV, "GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_tessellation_program5.put(GL_TESS_CONTROL_PROGRAM_NV, "GL_TESS_CONTROL_PROGRAM_NV");
    GL_NV_tessellation_program5.put(GL_TESS_EVALUATION_PROGRAM_NV, "GL_TESS_EVALUATION_PROGRAM_NV");
    GL_NV_tessellation_program5.put(GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV, "GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_tessellation_program5.put(GL_MAX_PROGRAM_PATCH_ATTRIBS_NV, "GL_MAX_PROGRAM_PATCH_ATTRIBS_NV");
  }
  private static final Map<Integer, String> GL_AMD_pinned_memory = new HashMap<Integer, String>();
  private static void GL_AMD_pinned_memory() {
    GL_AMD_pinned_memory.put(GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD, "GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD");
  }
  private static final Map<Integer, String> GL_ARB_texture_border_clamp = new HashMap<Integer, String>();
  private static void GL_ARB_texture_border_clamp() {
    GL_ARB_texture_border_clamp.put(GL_CLAMP_TO_BORDER_ARB, "GL_CLAMP_TO_BORDER_ARB");
  }
  private static final Map<Integer, String> GL_NV_blend_equation_advanced_coherent = new HashMap<Integer, String>();
  private static void GL_NV_blend_equation_advanced_coherent() {
    GL_NV_blend_equation_advanced_coherent.put(GL_BLEND_ADVANCED_COHERENT_NV, "GL_BLEND_ADVANCED_COHERENT_NV");
  }
  private static final Map<Integer, String> GL_ARB_sample_shading = new HashMap<Integer, String>();
  private static void GL_ARB_sample_shading() {
    GL_ARB_sample_shading.put(GL_SAMPLE_SHADING_ARB, "GL_SAMPLE_SHADING_ARB");
    GL_ARB_sample_shading.put(GL_MIN_SAMPLE_SHADING_VALUE_ARB, "GL_MIN_SAMPLE_SHADING_VALUE_ARB");
  }
  private static final Map<Integer, String> GL_IMG_multisampled_render_to_texture = new HashMap<Integer, String>();
  private static void GL_IMG_multisampled_render_to_texture() {
    GL_IMG_multisampled_render_to_texture.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG");
    GL_IMG_multisampled_render_to_texture.put(GL_MAX_SAMPLES_IMG, "GL_MAX_SAMPLES_IMG");
    GL_IMG_multisampled_render_to_texture.put(GL_RENDERBUFFER_SAMPLES_IMG, "GL_RENDERBUFFER_SAMPLES_IMG");
    GL_IMG_multisampled_render_to_texture.put(GL_TEXTURE_SAMPLES_IMG, "GL_TEXTURE_SAMPLES_IMG");
  }
  private static final Map<Integer, String> GL_INTEL_conservative_rasterization = new HashMap<Integer, String>();
  private static void GL_INTEL_conservative_rasterization() {
    GL_INTEL_conservative_rasterization.put(GL_CONSERVATIVE_RASTERIZATION_INTEL, "GL_CONSERVATIVE_RASTERIZATION_INTEL");
  }
  private static final Map<Integer, String> GL_EXT_vertex_array = new HashMap<Integer, String>();
  private static void GL_EXT_vertex_array() {
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_SIZE_EXT, "GL_TEXTURE_COORD_ARRAY_SIZE_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_TYPE_EXT, "GL_TEXTURE_COORD_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_TYPE_EXT, "GL_COLOR_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_POINTER_EXT, "GL_VERTEX_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_EXT, "GL_NORMAL_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_TYPE_EXT, "GL_VERTEX_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_STRIDE_EXT, "GL_INDEX_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_SIZE_EXT, "GL_VERTEX_ARRAY_SIZE_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_COUNT_EXT, "GL_TEXTURE_COORD_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_COUNT_EXT, "GL_NORMAL_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_POINTER_EXT, "GL_NORMAL_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_STRIDE_EXT, "GL_TEXTURE_COORD_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_POINTER_EXT, "GL_INDEX_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_STRIDE_EXT, "GL_COLOR_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_EXT, "GL_INDEX_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_COUNT_EXT, "GL_EDGE_FLAG_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_POINTER_EXT, "GL_TEXTURE_COORD_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_POINTER_EXT, "GL_COLOR_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_COUNT_EXT, "GL_INDEX_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_EXT, "GL_TEXTURE_COORD_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_STRIDE_EXT, "GL_VERTEX_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_COUNT_EXT, "GL_COLOR_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_TYPE_EXT, "GL_INDEX_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_EXT, "GL_EDGE_FLAG_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_SIZE_EXT, "GL_COLOR_ARRAY_SIZE_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_STRIDE_EXT, "GL_NORMAL_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_EXT, "GL_VERTEX_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_POINTER_EXT, "GL_EDGE_FLAG_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_TYPE_EXT, "GL_NORMAL_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_STRIDE_EXT, "GL_EDGE_FLAG_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_EXT, "GL_COLOR_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_COUNT_EXT, "GL_VERTEX_ARRAY_COUNT_EXT");
  }
  private static final Map<Integer, String> GL_OES_texture_border_clamp = new HashMap<Integer, String>();
  private static void GL_OES_texture_border_clamp() {
    GL_OES_texture_border_clamp.put(GL_TEXTURE_BORDER_COLOR_OES, "GL_TEXTURE_BORDER_COLOR_OES");
    GL_OES_texture_border_clamp.put(GL_CLAMP_TO_BORDER_OES, "GL_CLAMP_TO_BORDER_OES");
  }
  private static final Map<Integer, String> GL_3DFX_texture_compression_FXT1 = new HashMap<Integer, String>();
  private static void GL_3DFX_texture_compression_FXT1() {
    GL_3DFX_texture_compression_FXT1.put(GL_COMPRESSED_RGBA_FXT1_3DFX, "GL_COMPRESSED_RGBA_FXT1_3DFX");
    GL_3DFX_texture_compression_FXT1.put(GL_COMPRESSED_RGB_FXT1_3DFX, "GL_COMPRESSED_RGB_FXT1_3DFX");
  }
  private static final Map<Integer, String> GL_ARB_vertex_buffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_buffer_object() {
    GL_ARB_vertex_buffer_object.put(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB, "GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_NORMAL_ARRAY_BUFFER_BINDING_ARB, "GL_NORMAL_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_READ_WRITE_ARB, "GL_READ_WRITE_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_MAP_POINTER_ARB, "GL_BUFFER_MAP_POINTER_ARB");
    GL_ARB_vertex_buffer_object.put(GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STATIC_READ_ARB, "GL_STATIC_READ_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STREAM_COPY_ARB, "GL_STREAM_COPY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_WRITE_ONLY_ARB, "GL_WRITE_ONLY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STATIC_DRAW_ARB, "GL_STATIC_DRAW_ARB");
    GL_ARB_vertex_buffer_object.put(GL_READ_ONLY_ARB, "GL_READ_ONLY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_COLOR_ARRAY_BUFFER_BINDING_ARB, "GL_COLOR_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STREAM_READ_ARB, "GL_STREAM_READ_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_MAPPED_ARB, "GL_BUFFER_MAPPED_ARB");
    GL_ARB_vertex_buffer_object.put(GL_DYNAMIC_DRAW_ARB, "GL_DYNAMIC_DRAW_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STATIC_COPY_ARB, "GL_STATIC_COPY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_SIZE_ARB, "GL_BUFFER_SIZE_ARB");
    GL_ARB_vertex_buffer_object.put(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_ACCESS_ARB, "GL_BUFFER_ACCESS_ARB");
    GL_ARB_vertex_buffer_object.put(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ARRAY_BUFFER_ARB, "GL_ARRAY_BUFFER_ARB");
    GL_ARB_vertex_buffer_object.put(GL_INDEX_ARRAY_BUFFER_BINDING_ARB, "GL_INDEX_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_DYNAMIC_COPY_ARB, "GL_DYNAMIC_COPY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_VERTEX_ARRAY_BUFFER_BINDING_ARB, "GL_VERTEX_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ARRAY_BUFFER_BINDING_ARB, "GL_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_USAGE_ARB, "GL_BUFFER_USAGE_ARB");
    GL_ARB_vertex_buffer_object.put(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB, "GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ELEMENT_ARRAY_BUFFER_ARB, "GL_ELEMENT_ARRAY_BUFFER_ARB");
    GL_ARB_vertex_buffer_object.put(GL_DYNAMIC_READ_ARB, "GL_DYNAMIC_READ_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STREAM_DRAW_ARB, "GL_STREAM_DRAW_ARB");
  }
  private static final Map<Integer, String> GL_ARB_viewport_array = new HashMap<Integer, String>();
  private static void GL_ARB_viewport_array() {
    GL_ARB_viewport_array.put(GL_UNDEFINED_VERTEX, "GL_UNDEFINED_VERTEX");
    GL_ARB_viewport_array.put(GL_PROVOKING_VERTEX, "GL_PROVOKING_VERTEX");
    GL_ARB_viewport_array.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_ARB_viewport_array.put(GL_LAYER_PROVOKING_VERTEX, "GL_LAYER_PROVOKING_VERTEX");
    GL_ARB_viewport_array.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    GL_ARB_viewport_array.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GL_ARB_viewport_array.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
    GL_ARB_viewport_array.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_ARB_viewport_array.put(GL_MAX_VIEWPORTS, "GL_MAX_VIEWPORTS");
    GL_ARB_viewport_array.put(GL_VIEWPORT_BOUNDS_RANGE, "GL_VIEWPORT_BOUNDS_RANGE");
    GL_ARB_viewport_array.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX");
    GL_ARB_viewport_array.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_ARB_viewport_array.put(GL_VIEWPORT_SUBPIXEL_BITS, "GL_VIEWPORT_SUBPIXEL_BITS");
  }
  private static final Map<Integer, String> GL_EXT_framebuffer_multisample_blit_scaled = new HashMap<Integer, String>();
  private static void GL_EXT_framebuffer_multisample_blit_scaled() {
    GL_EXT_framebuffer_multisample_blit_scaled.put(GL_SCALED_RESOLVE_NICEST_EXT, "GL_SCALED_RESOLVE_NICEST_EXT");
    GL_EXT_framebuffer_multisample_blit_scaled.put(GL_SCALED_RESOLVE_FASTEST_EXT, "GL_SCALED_RESOLVE_FASTEST_EXT");
  }
  private static final Map<Integer, String> GL_NV_sRGB_formats = new HashMap<Integer, String>();
  private static void GL_NV_sRGB_formats() {
    GL_NV_sRGB_formats.put(GL_SLUMINANCE8_ALPHA8_NV, "GL_SLUMINANCE8_ALPHA8_NV");
    GL_NV_sRGB_formats.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV");
    GL_NV_sRGB_formats.put(GL_COMPRESSED_SRGB_S3TC_DXT1_NV, "GL_COMPRESSED_SRGB_S3TC_DXT1_NV");
    GL_NV_sRGB_formats.put(GL_ETC1_SRGB8_NV, "GL_ETC1_SRGB8_NV");
    GL_NV_sRGB_formats.put(GL_SRGB8_NV, "GL_SRGB8_NV");
    GL_NV_sRGB_formats.put(GL_SLUMINANCE8_NV, "GL_SLUMINANCE8_NV");
    GL_NV_sRGB_formats.put(GL_SLUMINANCE_NV, "GL_SLUMINANCE_NV");
    GL_NV_sRGB_formats.put(GL_SLUMINANCE_ALPHA_NV, "GL_SLUMINANCE_ALPHA_NV");
    GL_NV_sRGB_formats.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV");
    GL_NV_sRGB_formats.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV");
  }
  private static final Map<Integer, String> GL_APPLE_vertex_program_evaluators = new HashMap<Integer, String>();
  private static void GL_APPLE_vertex_program_evaluators() {
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_APPLE, "GL_VERTEX_ATTRIB_MAP1_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_APPLE, "GL_VERTEX_ATTRIB_MAP2_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE");
  }
  private static final Map<Integer, String> GL_ARB_depth_buffer_float = new HashMap<Integer, String>();
  private static void GL_ARB_depth_buffer_float() {
    GL_ARB_depth_buffer_float.put(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV");
    GL_ARB_depth_buffer_float.put(GL_DEPTH32F_STENCIL8, "GL_DEPTH32F_STENCIL8");
    GL_ARB_depth_buffer_float.put(GL_DEPTH_COMPONENT32F, "GL_DEPTH_COMPONENT32F");
  }
  private static final Map<Integer, String> GL_EXT_memory_object_fd = new HashMap<Integer, String>();
  private static void GL_EXT_memory_object_fd() {
    GL_EXT_memory_object_fd.put(GL_HANDLE_TYPE_OPAQUE_FD_EXT, "GL_HANDLE_TYPE_OPAQUE_FD_EXT");
  }
  private static final Map<Integer, String> GL_SUN_triangle_list = new HashMap<Integer, String>();
  private static void GL_SUN_triangle_list() {
    GL_SUN_triangle_list.put(GL_R1UI_T2F_V3F_SUN, "GL_R1UI_T2F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_RESTART_SUN, "GL_RESTART_SUN");
    GL_SUN_triangle_list.put(GL_REPLACE_OLDEST_SUN, "GL_REPLACE_OLDEST_SUN");
    GL_SUN_triangle_list.put(GL_REPLACE_MIDDLE_SUN, "GL_REPLACE_MIDDLE_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_T2F_C4F_N3F_V3F_SUN, "GL_R1UI_T2F_C4F_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_TRIANGLE_LIST_SUN, "GL_TRIANGLE_LIST_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN, "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_SUN, "GL_REPLACEMENT_CODE_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_C4UB_V3F_SUN, "GL_R1UI_C4UB_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_T2F_N3F_V3F_SUN, "GL_R1UI_T2F_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN, "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_SUN, "GL_REPLACEMENT_CODE_ARRAY_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_C3F_V3F_SUN, "GL_R1UI_C3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_N3F_V3F_SUN, "GL_R1UI_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_V3F_SUN, "GL_R1UI_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_C4F_N3F_V3F_SUN, "GL_R1UI_C4F_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN, "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN");
  }
  private static final Map<Integer, String> GL_EXT_texture_buffer = new HashMap<Integer, String>();
  private static void GL_EXT_texture_buffer() {
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_BINDING_EXT, "GL_TEXTURE_BUFFER_BINDING_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BINDING_BUFFER_EXT, "GL_TEXTURE_BINDING_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_UNSIGNED_INT_IMAGE_BUFFER_EXT, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_SAMPLER_BUFFER_EXT, "GL_SAMPLER_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT");
    GL_EXT_texture_buffer.put(GL_MAX_TEXTURE_BUFFER_SIZE_EXT, "GL_MAX_TEXTURE_BUFFER_SIZE_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_SIZE_EXT, "GL_TEXTURE_BUFFER_SIZE_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_EXT, "GL_TEXTURE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_IMAGE_BUFFER_EXT, "GL_IMAGE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_INT_IMAGE_BUFFER_EXT, "GL_INT_IMAGE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_INT_SAMPLER_BUFFER_EXT, "GL_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_EXT, "GL_TEXTURE_BUFFER_OFFSET_EXT");
  }
  private static final Map<Integer, String> GL_ARB_map_buffer_alignment = new HashMap<Integer, String>();
  private static void GL_ARB_map_buffer_alignment() {
    GL_ARB_map_buffer_alignment.put(GL_MIN_MAP_BUFFER_ALIGNMENT, "GL_MIN_MAP_BUFFER_ALIGNMENT");
  }
  private static final Map<Integer, String> GL_EXT_depth_bounds_test = new HashMap<Integer, String>();
  private static void GL_EXT_depth_bounds_test() {
    GL_EXT_depth_bounds_test.put(GL_DEPTH_BOUNDS_EXT, "GL_DEPTH_BOUNDS_EXT");
    GL_EXT_depth_bounds_test.put(GL_DEPTH_BOUNDS_TEST_EXT, "GL_DEPTH_BOUNDS_TEST_EXT");
  }
  private static final Map<Integer, String> GL_ATI_pn_triangles = new HashMap<Integer, String>();
  private static void GL_ATI_pn_triangles() {
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_ATI, "GL_PN_TRIANGLES_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_POINT_MODE_ATI, "GL_PN_TRIANGLES_POINT_MODE_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI, "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI, "GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_NORMAL_MODE_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI, "GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI");
    GL_ATI_pn_triangles.put(GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI, "GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI");
  }
  private static final Map<Integer, String> GL_ARB_polygon_offset_clamp = new HashMap<Integer, String>();
  private static void GL_ARB_polygon_offset_clamp() {
    GL_ARB_polygon_offset_clamp.put(GL_POLYGON_OFFSET_CLAMP, "GL_POLYGON_OFFSET_CLAMP");
  }
  private static final Map<Integer, String> GL_EXT_separate_shader_objects = new HashMap<Integer, String>();
  private static void GL_EXT_separate_shader_objects() {
    GL_EXT_separate_shader_objects.put(GL_PROGRAM_PIPELINE_BINDING_EXT, "GL_PROGRAM_PIPELINE_BINDING_EXT");
    GL_EXT_separate_shader_objects.put(GL_ACTIVE_PROGRAM_EXT, "GL_ACTIVE_PROGRAM_EXT");
    GL_EXT_separate_shader_objects.put(GL_VERTEX_SHADER_BIT_EXT, "GL_VERTEX_SHADER_BIT_EXT");
    GL_EXT_separate_shader_objects.put(GL_ALL_SHADER_BITS_EXT, "GL_ALL_SHADER_BITS_EXT");
    GL_EXT_separate_shader_objects.put(GL_FRAGMENT_SHADER_BIT_EXT, "GL_FRAGMENT_SHADER_BIT_EXT");
    GL_EXT_separate_shader_objects.put(GL_PROGRAM_SEPARABLE_EXT, "GL_PROGRAM_SEPARABLE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_packed_pixels = new HashMap<Integer, String>();
  private static void GL_EXT_packed_pixels() {
    GL_EXT_packed_pixels.put(GL_UNSIGNED_SHORT_4_4_4_4_EXT, "GL_UNSIGNED_SHORT_4_4_4_4_EXT");
    GL_EXT_packed_pixels.put(GL_UNSIGNED_BYTE_3_3_2_EXT, "GL_UNSIGNED_BYTE_3_3_2_EXT");
    GL_EXT_packed_pixels.put(GL_UNSIGNED_INT_8_8_8_8_EXT, "GL_UNSIGNED_INT_8_8_8_8_EXT");
    GL_EXT_packed_pixels.put(GL_UNSIGNED_SHORT_5_5_5_1_EXT, "GL_UNSIGNED_SHORT_5_5_5_1_EXT");
    GL_EXT_packed_pixels.put(GL_UNSIGNED_INT_10_10_10_2_EXT, "GL_UNSIGNED_INT_10_10_10_2_EXT");
  }
  private static final Map<Integer, String> GL_OES_texture_3D = new HashMap<Integer, String>();
  private static void GL_OES_texture_3D() {
    GL_OES_texture_3D.put(GL_MAX_3D_TEXTURE_SIZE_OES, "GL_MAX_3D_TEXTURE_SIZE_OES");
    GL_OES_texture_3D.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES");
    GL_OES_texture_3D.put(GL_TEXTURE_3D_OES, "GL_TEXTURE_3D_OES");
    GL_OES_texture_3D.put(GL_SAMPLER_3D_OES, "GL_SAMPLER_3D_OES");
    GL_OES_texture_3D.put(GL_TEXTURE_WRAP_R_OES, "GL_TEXTURE_WRAP_R_OES");
    GL_OES_texture_3D.put(GL_TEXTURE_BINDING_3D_OES, "GL_TEXTURE_BINDING_3D_OES");
  }
  private static final Map<Integer, String> GL_SGI_color_matrix = new HashMap<Integer, String>();
  private static void GL_SGI_color_matrix() {
    GL_SGI_color_matrix.put(GL_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_COLOR_MATRIX_STACK_DEPTH_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    GL_SGI_color_matrix.put(GL_COLOR_MATRIX_SGI, "GL_COLOR_MATRIX_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    GL_SGI_color_matrix.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    GL_SGI_color_matrix.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
  }
  private static final Map<Integer, String> GL_EXT_texture_lod_bias = new HashMap<Integer, String>();
  private static void GL_EXT_texture_lod_bias() {
    GL_EXT_texture_lod_bias.put(GL_MAX_TEXTURE_LOD_BIAS_EXT, "GL_MAX_TEXTURE_LOD_BIAS_EXT");
    GL_EXT_texture_lod_bias.put(GL_TEXTURE_FILTER_CONTROL_EXT, "GL_TEXTURE_FILTER_CONTROL_EXT");
    GL_EXT_texture_lod_bias.put(GL_TEXTURE_LOD_BIAS_EXT, "GL_TEXTURE_LOD_BIAS_EXT");
  }
  private static final Map<Integer, String> GL_DMP_shader_binary = new HashMap<Integer, String>();
  private static void GL_DMP_shader_binary() {
    GL_DMP_shader_binary.put(GL_SHADER_BINARY_DMP, "GL_SHADER_BINARY_DMP");
  }
  private static final Map<Integer, String> GL_ARB_texture_view = new HashMap<Integer, String>();
  private static void GL_ARB_texture_view() {
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_NUM_LEVELS, "GL_TEXTURE_VIEW_NUM_LEVELS");
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_NUM_LAYERS, "GL_TEXTURE_VIEW_NUM_LAYERS");
    GL_ARB_texture_view.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_MIN_LAYER, "GL_TEXTURE_VIEW_MIN_LAYER");
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_MIN_LEVEL, "GL_TEXTURE_VIEW_MIN_LEVEL");
  }
  private static final Map<Integer, String> GL_EXT_texture_perturb_normal = new HashMap<Integer, String>();
  private static void GL_EXT_texture_perturb_normal() {
    GL_EXT_texture_perturb_normal.put(GL_PERTURB_EXT, "GL_PERTURB_EXT");
    GL_EXT_texture_perturb_normal.put(GL_TEXTURE_NORMAL_EXT, "GL_TEXTURE_NORMAL_EXT");
  }
  private static final Map<Integer, String> GL_NV_viewport_swizzle = new HashMap<Integer, String>();
  private static void GL_NV_viewport_swizzle() {
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_X_NV, "GL_VIEWPORT_SWIZZLE_X_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_Y_NV, "GL_VIEWPORT_SWIZZLE_Y_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_Z_NV, "GL_VIEWPORT_SWIZZLE_Z_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_W_NV, "GL_VIEWPORT_SWIZZLE_W_NV");
  }
  private static final Map<Integer, String> GL_ARB_shader_image_load_store = new HashMap<Integer, String>();
  private static void GL_ARB_shader_image_load_store() {
    GL_ARB_shader_image_load_store.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_1D_ARRAY, "GL_IMAGE_1D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_3D, "GL_IMAGE_3D");
    GL_ARB_shader_image_load_store.put(GL_PIXEL_BUFFER_BARRIER_BIT, "GL_PIXEL_BUFFER_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_RECT, "GL_INT_IMAGE_2D_RECT");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_CUBE, "GL_INT_IMAGE_CUBE");
    GL_ARB_shader_image_load_store.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_BUFFER_UPDATE_BARRIER_BIT, "GL_BUFFER_UPDATE_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_ARRAY, "GL_IMAGE_2D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_IMAGE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE, "GL_UNSIGNED_INT_IMAGE_CUBE");
    GL_ARB_shader_image_load_store.put(GL_MAX_IMAGE_UNITS, "GL_MAX_IMAGE_UNITS");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_FORMAT, "GL_IMAGE_BINDING_FORMAT");
    GL_ARB_shader_image_load_store.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_ATOMIC_COUNTER_BARRIER_BIT, "GL_ATOMIC_COUNTER_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_3D, "GL_UNSIGNED_INT_IMAGE_3D");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D_ARRAY, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_ARRAY, "GL_INT_IMAGE_2D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS");
    GL_ARB_shader_image_load_store.put(GL_FRAMEBUFFER_BARRIER_BIT, "GL_FRAMEBUFFER_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BUFFER, "GL_IMAGE_BUFFER");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_BUFFER, "GL_UNSIGNED_INT_IMAGE_BUFFER");
    GL_ARB_shader_image_load_store.put(GL_COMMAND_BARRIER_BIT, "GL_COMMAND_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    GL_ARB_shader_image_load_store.put(GL_ELEMENT_ARRAY_BARRIER_BIT, "GL_ELEMENT_ARRAY_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_LEVEL, "GL_IMAGE_BINDING_LEVEL");
    GL_ARB_shader_image_load_store.put(GL_MAX_FRAGMENT_IMAGE_UNIFORMS, "GL_MAX_FRAGMENT_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_CUBE_MAP_ARRAY, "GL_IMAGE_CUBE_MAP_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D, "GL_UNSIGNED_INT_IMAGE_2D");
    GL_ARB_shader_image_load_store.put(GL_TEXTURE_UPDATE_BARRIER_BIT, "GL_TEXTURE_UPDATE_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_ACCESS, "GL_IMAGE_BINDING_ACCESS");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_CUBE_MAP_ARRAY, "GL_INT_IMAGE_CUBE_MAP_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_CUBE, "GL_IMAGE_CUBE");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_1D, "GL_INT_IMAGE_1D");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_LAYERED, "GL_IMAGE_BINDING_LAYERED");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_RECT, "GL_IMAGE_2D_RECT");
    GL_ARB_shader_image_load_store.put(GL_MAX_COMBINED_IMAGE_UNIFORMS, "GL_MAX_COMBINED_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_MAX_VERTEX_IMAGE_UNIFORMS, "GL_MAX_VERTEX_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_RECT, "GL_UNSIGNED_INT_IMAGE_2D_RECT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE, "GL_IMAGE_2D_MULTISAMPLE");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_1D, "GL_IMAGE_1D");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_BUFFER, "GL_INT_IMAGE_BUFFER");
    GL_ARB_shader_image_load_store.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_ALL_BARRIER_BITS, "GL_ALL_BARRIER_BITS");
    GL_ARB_shader_image_load_store.put(GL_TEXTURE_FETCH_BARRIER_BIT, "GL_TEXTURE_FETCH_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_NAME, "GL_IMAGE_BINDING_NAME");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D, "GL_UNSIGNED_INT_IMAGE_1D");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_LAYER, "GL_IMAGE_BINDING_LAYER");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_3D, "GL_INT_IMAGE_3D");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D, "GL_INT_IMAGE_2D");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE, "GL_INT_IMAGE_2D_MULTISAMPLE");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_1D_ARRAY, "GL_INT_IMAGE_1D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_MAX_IMAGE_SAMPLES, "GL_MAX_IMAGE_SAMPLES");
    GL_ARB_shader_image_load_store.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_UNIFORM_BARRIER_BIT, "GL_UNIFORM_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D, "GL_IMAGE_2D");
  }
  private static final Map<Integer, String> GL_ARB_internalformat_query2 = new HashMap<Integer, String>();
  private static void GL_ARB_internalformat_query2() {
    GL_ARB_internalformat_query2.put(GL_READ_PIXELS_TYPE, "GL_READ_PIXELS_TYPE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_GATHER, "GL_TEXTURE_GATHER");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_CUBE_MAP_ARRAY, "GL_TEXTURE_CUBE_MAP_ARRAY");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_BLUE_SIZE, "GL_INTERNALFORMAT_BLUE_SIZE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_4_X_16, "GL_IMAGE_CLASS_4_X_16");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_BPTC_UNORM, "GL_VIEW_CLASS_BPTC_UNORM");
    GL_ARB_internalformat_query2.put(GL_FRAGMENT_TEXTURE, "GL_FRAGMENT_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_STENCIL_RENDERABLE, "GL_STENCIL_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_SHADER_IMAGE_ATOMIC, "GL_SHADER_IMAGE_ATOMIC");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_8_BITS, "GL_VIEW_CLASS_8_BITS");
    GL_ARB_internalformat_query2.put(GL_MAX_HEIGHT, "GL_MAX_HEIGHT");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT3_RGBA, "GL_VIEW_CLASS_S3TC_DXT3_RGBA");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_VIEW, "GL_TEXTURE_VIEW");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_10_10_10_2, "GL_IMAGE_CLASS_10_10_10_2");
    GL_ARB_internalformat_query2.put(GL_STENCIL_COMPONENTS, "GL_STENCIL_COMPONENTS");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_128_BITS, "GL_VIEW_CLASS_128_BITS");
    GL_ARB_internalformat_query2.put(GL_COLOR_RENDERABLE, "GL_COLOR_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_64_BITS, "GL_VIEW_CLASS_64_BITS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_RECTANGLE, "GL_TEXTURE_RECTANGLE");
    GL_ARB_internalformat_query2.put(GL_VIEW_COMPATIBILITY_CLASS, "GL_VIEW_COMPATIBILITY_CLASS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    GL_ARB_internalformat_query2.put(GL_TESS_EVALUATION_TEXTURE, "GL_TESS_EVALUATION_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_2_X_16, "GL_IMAGE_CLASS_2_X_16");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_SUPPORTED, "GL_INTERNALFORMAT_SUPPORTED");
    GL_ARB_internalformat_query2.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_4_X_8, "GL_IMAGE_CLASS_4_X_8");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_STENCIL_TYPE, "GL_INTERNALFORMAT_STENCIL_TYPE");
    GL_ARB_internalformat_query2.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    GL_ARB_internalformat_query2.put(GL_SHADER_IMAGE_LOAD, "GL_SHADER_IMAGE_LOAD");
    GL_ARB_internalformat_query2.put(GL_SHADER_IMAGE_STORE, "GL_SHADER_IMAGE_STORE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_IMAGE_FORMAT, "GL_TEXTURE_IMAGE_FORMAT");
    GL_ARB_internalformat_query2.put(GL_FRAMEBUFFER_BLEND, "GL_FRAMEBUFFER_BLEND");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_96_BITS, "GL_VIEW_CLASS_96_BITS");
    GL_ARB_internalformat_query2.put(GL_VERTEX_TEXTURE, "GL_VERTEX_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_MAX_DEPTH, "GL_MAX_DEPTH");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT1_RGBA, "GL_VIEW_CLASS_S3TC_DXT1_RGBA");
    GL_ARB_internalformat_query2.put(GL_MAX_WIDTH, "GL_MAX_WIDTH");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST");
    GL_ARB_internalformat_query2.put(GL_GET_TEXTURE_IMAGE_FORMAT, "GL_GET_TEXTURE_IMAGE_FORMAT");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_1D_ARRAY, "GL_TEXTURE_1D_ARRAY");
    GL_ARB_internalformat_query2.put(GL_MAX_COMBINED_DIMENSIONS, "GL_MAX_COMBINED_DIMENSIONS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_SHADOW, "GL_TEXTURE_SHADOW");
    GL_ARB_internalformat_query2.put(GL_COMPUTE_TEXTURE, "GL_COMPUTE_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_COLOR_ENCODING, "GL_COLOR_ENCODING");
    GL_ARB_internalformat_query2.put(GL_IMAGE_PIXEL_FORMAT, "GL_IMAGE_PIXEL_FORMAT");
    GL_ARB_internalformat_query2.put(GL_FRAMEBUFFER_RENDERABLE_LAYERED, "GL_FRAMEBUFFER_RENDERABLE_LAYERED");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED, "GL_TEXTURE_COMPRESSED");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_SHARED_SIZE, "GL_INTERNALFORMAT_SHARED_SIZE");
    GL_ARB_internalformat_query2.put(GL_GEOMETRY_TEXTURE, "GL_GEOMETRY_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_COLOR_COMPONENTS, "GL_COLOR_COMPONENTS");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_DEPTH_SIZE, "GL_INTERNALFORMAT_DEPTH_SIZE");
    GL_ARB_internalformat_query2.put(GL_CLEAR_BUFFER, "GL_CLEAR_BUFFER");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_1_X_8, "GL_IMAGE_CLASS_1_X_8");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_24_BITS, "GL_VIEW_CLASS_24_BITS");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_2_X_32, "GL_IMAGE_CLASS_2_X_32");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED_BLOCK_WIDTH, "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH");
    GL_ARB_internalformat_query2.put(GL_GET_TEXTURE_IMAGE_TYPE, "GL_GET_TEXTURE_IMAGE_TYPE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_BPTC_FLOAT, "GL_VIEW_CLASS_BPTC_FLOAT");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT, "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_RED_TYPE, "GL_INTERNALFORMAT_RED_TYPE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_1_X_32, "GL_IMAGE_CLASS_1_X_32");
    GL_ARB_internalformat_query2.put(GL_IMAGE_PIXEL_TYPE, "GL_IMAGE_PIXEL_TYPE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_ALPHA_TYPE, "GL_INTERNALFORMAT_ALPHA_TYPE");
    GL_ARB_internalformat_query2.put(GL_TESS_CONTROL_TEXTURE, "GL_TESS_CONTROL_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    GL_ARB_internalformat_query2.put(GL_DEPTH_COMPONENTS, "GL_DEPTH_COMPONENTS");
    GL_ARB_internalformat_query2.put(GL_MAX_LAYERS, "GL_MAX_LAYERS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_IMAGE_TYPE, "GL_TEXTURE_IMAGE_TYPE");
    GL_ARB_internalformat_query2.put(GL_DEPTH_RENDERABLE, "GL_DEPTH_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_11_11_10, "GL_IMAGE_CLASS_11_11_10");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_GREEN_SIZE, "GL_INTERNALFORMAT_GREEN_SIZE");
    GL_ARB_internalformat_query2.put(GL_READ_PIXELS, "GL_READ_PIXELS");
    GL_ARB_internalformat_query2.put(GL_FRAMEBUFFER_RENDERABLE, "GL_FRAMEBUFFER_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_GATHER_SHADOW, "GL_TEXTURE_GATHER_SHADOW");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_DEPTH_TYPE, "GL_INTERNALFORMAT_DEPTH_TYPE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    GL_ARB_internalformat_query2.put(GL_SAMPLES, "GL_SAMPLES");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_1_X_16, "GL_IMAGE_CLASS_1_X_16");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_PREFERRED, "GL_INTERNALFORMAT_PREFERRED");
    GL_ARB_internalformat_query2.put(GL_FILTER, "GL_FILTER");
    GL_ARB_internalformat_query2.put(GL_SRGB_DECODE_ARB, "GL_SRGB_DECODE_ARB");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_4_X_32, "GL_IMAGE_CLASS_4_X_32");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_ALPHA_SIZE, "GL_INTERNALFORMAT_ALPHA_SIZE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED_BLOCK_SIZE, "GL_TEXTURE_COMPRESSED_BLOCK_SIZE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_48_BITS, "GL_VIEW_CLASS_48_BITS");
    GL_ARB_internalformat_query2.put(GL_AUTO_GENERATE_MIPMAP, "GL_AUTO_GENERATE_MIPMAP");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_RGTC1_RED, "GL_VIEW_CLASS_RGTC1_RED");
    GL_ARB_internalformat_query2.put(GL_FULL_SUPPORT, "GL_FULL_SUPPORT");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_BLUE_TYPE, "GL_INTERNALFORMAT_BLUE_TYPE");
    GL_ARB_internalformat_query2.put(GL_SRGB_WRITE, "GL_SRGB_WRITE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_GREEN_TYPE, "GL_INTERNALFORMAT_GREEN_TYPE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_RGTC2_RG, "GL_VIEW_CLASS_RGTC2_RG");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_2_X_8, "GL_IMAGE_CLASS_2_X_8");
    GL_ARB_internalformat_query2.put(GL_CAVEAT_SUPPORT, "GL_CAVEAT_SUPPORT");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT1_RGB, "GL_VIEW_CLASS_S3TC_DXT1_RGB");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_STENCIL_SIZE, "GL_INTERNALFORMAT_STENCIL_SIZE");
    GL_ARB_internalformat_query2.put(GL_MIPMAP, "GL_MIPMAP");
    GL_ARB_internalformat_query2.put(GL_IMAGE_COMPATIBILITY_CLASS, "GL_IMAGE_COMPATIBILITY_CLASS");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_16_BITS, "GL_VIEW_CLASS_16_BITS");
    GL_ARB_internalformat_query2.put(GL_READ_PIXELS_FORMAT, "GL_READ_PIXELS_FORMAT");
    GL_ARB_internalformat_query2.put(GL_SRGB_READ, "GL_SRGB_READ");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_RED_SIZE, "GL_INTERNALFORMAT_RED_SIZE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_32_BITS, "GL_VIEW_CLASS_32_BITS");
    GL_ARB_internalformat_query2.put(GL_MANUAL_GENERATE_MIPMAP, "GL_MANUAL_GENERATE_MIPMAP");
    GL_ARB_internalformat_query2.put(GL_IMAGE_TEXEL_SIZE, "GL_IMAGE_TEXEL_SIZE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT5_RGBA, "GL_VIEW_CLASS_S3TC_DXT5_RGBA");
  }
  private static final Map<Integer, String> GL_ARB_explicit_uniform_location = new HashMap<Integer, String>();
  private static void GL_ARB_explicit_uniform_location() {
    GL_ARB_explicit_uniform_location.put(GL_MAX_UNIFORM_LOCATIONS, "GL_MAX_UNIFORM_LOCATIONS");
  }
  private static final Map<Integer, String> GL_AMD_blend_minmax_factor = new HashMap<Integer, String>();
  private static void GL_AMD_blend_minmax_factor() {
    GL_AMD_blend_minmax_factor.put(GL_FACTOR_MIN_AMD, "GL_FACTOR_MIN_AMD");
    GL_AMD_blend_minmax_factor.put(GL_FACTOR_MAX_AMD, "GL_FACTOR_MAX_AMD");
  }
  private static final Map<Integer, String> GL_ATI_texture_mirror_once = new HashMap<Integer, String>();
  private static void GL_ATI_texture_mirror_once() {
    GL_ATI_texture_mirror_once.put(GL_MIRROR_CLAMP_TO_EDGE_ATI, "GL_MIRROR_CLAMP_TO_EDGE_ATI");
    GL_ATI_texture_mirror_once.put(GL_MIRROR_CLAMP_ATI, "GL_MIRROR_CLAMP_ATI");
  }
  private static final Map<Integer, String> GL_EXT_texture_cube_map_array = new HashMap<Integer, String>();
  private static void GL_EXT_texture_cube_map_array() {
    GL_EXT_texture_cube_map_array.put(GL_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_TEXTURE_CUBE_MAP_ARRAY_EXT, "GL_TEXTURE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_SAMPLER_CUBE_MAP_ARRAY_EXT, "GL_SAMPLER_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT");
    GL_EXT_texture_cube_map_array.put(GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT, "GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT");
    GL_EXT_texture_cube_map_array.put(GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT");
  }
  private static final Map<Integer, String> GL_FJ_shader_binary_GCCSO = new HashMap<Integer, String>();
  private static void GL_FJ_shader_binary_GCCSO() {
    GL_FJ_shader_binary_GCCSO.put(GL_GCCSO_SHADER_BINARY_FJ, "GL_GCCSO_SHADER_BINARY_FJ");
  }
  private static final Map<Integer, String> GL_IBM_cull_vertex = new HashMap<Integer, String>();
  private static void GL_IBM_cull_vertex() {
    GL_IBM_cull_vertex.put(GL_CULL_VERTEX_IBM, "GL_CULL_VERTEX_IBM");
  }
  private static final Map<Integer, String> GL_IBM_static_data = new HashMap<Integer, String>();
  private static void GL_IBM_static_data() {
    GL_IBM_static_data.put(GL_ALL_STATIC_DATA_IBM, "GL_ALL_STATIC_DATA_IBM");
    GL_IBM_static_data.put(GL_STATIC_VERTEX_ARRAY_IBM, "GL_STATIC_VERTEX_ARRAY_IBM");
  }
  private static final Map<Integer, String> GL_ANGLE_translated_shader_source = new HashMap<Integer, String>();
  private static void GL_ANGLE_translated_shader_source() {
    GL_ANGLE_translated_shader_source.put(GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE, "GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE");
  }
  private static final Map<Integer, String> GL_SGIX_texture_multi_buffer = new HashMap<Integer, String>();
  private static void GL_SGIX_texture_multi_buffer() {
    GL_SGIX_texture_multi_buffer.put(GL_TEXTURE_MULTI_BUFFER_HINT_SGIX, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX");
  }
  private static final Map<Integer, String> GL_AMD_gpu_shader_half_float = new HashMap<Integer, String>();
  private static void GL_AMD_gpu_shader_half_float() {
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT4x2_AMD, "GL_FLOAT16_MAT4x2_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT3x2_AMD, "GL_FLOAT16_MAT3x2_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_NV, "GL_FLOAT16_NV");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_VEC2_NV, "GL_FLOAT16_VEC2_NV");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_VEC3_NV, "GL_FLOAT16_VEC3_NV");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT4x3_AMD, "GL_FLOAT16_MAT4x3_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT3_AMD, "GL_FLOAT16_MAT3_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT2x4_AMD, "GL_FLOAT16_MAT2x4_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_VEC4_NV, "GL_FLOAT16_VEC4_NV");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT3x4_AMD, "GL_FLOAT16_MAT3x4_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT4_AMD, "GL_FLOAT16_MAT4_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT2x3_AMD, "GL_FLOAT16_MAT2x3_AMD");
    GL_AMD_gpu_shader_half_float.put(GL_FLOAT16_MAT2_AMD, "GL_FLOAT16_MAT2_AMD");
  }
  private static final Map<Integer, String> GL_AMD_vertex_shader_tessellator = new HashMap<Integer, String>();
  private static void GL_AMD_vertex_shader_tessellator() {
    GL_AMD_vertex_shader_tessellator.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD, "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_SAMPLER_BUFFER_AMD, "GL_SAMPLER_BUFFER_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_TESSELLATION_FACTOR_AMD, "GL_TESSELLATION_FACTOR_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_DISCRETE_AMD, "GL_DISCRETE_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_CONTINUOUS_AMD, "GL_CONTINUOUS_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_INT_SAMPLER_BUFFER_AMD, "GL_INT_SAMPLER_BUFFER_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_TESSELLATION_MODE_AMD, "GL_TESSELLATION_MODE_AMD");
  }
  private static final Map<Integer, String> GL_ARB_matrix_palette = new HashMap<Integer, String>();
  private static void GL_ARB_matrix_palette() {
    GL_ARB_matrix_palette.put(GL_MATRIX_PALETTE_ARB, "GL_MATRIX_PALETTE_ARB");
    GL_ARB_matrix_palette.put(GL_CURRENT_MATRIX_INDEX_ARB, "GL_CURRENT_MATRIX_INDEX_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_TYPE_ARB, "GL_MATRIX_INDEX_ARRAY_TYPE_ARB");
    GL_ARB_matrix_palette.put(GL_MAX_PALETTE_MATRICES_ARB, "GL_MAX_PALETTE_MATRICES_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_ARB, "GL_MATRIX_INDEX_ARRAY_ARB");
    GL_ARB_matrix_palette.put(GL_CURRENT_PALETTE_MATRIX_ARB, "GL_CURRENT_PALETTE_MATRIX_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_SIZE_ARB, "GL_MATRIX_INDEX_ARRAY_SIZE_ARB");
    GL_ARB_matrix_palette.put(GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB, "GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_STRIDE_ARB, "GL_MATRIX_INDEX_ARRAY_STRIDE_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_POINTER_ARB, "GL_MATRIX_INDEX_ARRAY_POINTER_ARB");
  }
  private static final Map<Integer, String> GL_AMD_depth_clamp_separate = new HashMap<Integer, String>();
  private static void GL_AMD_depth_clamp_separate() {
    GL_AMD_depth_clamp_separate.put(GL_DEPTH_CLAMP_NEAR_AMD, "GL_DEPTH_CLAMP_NEAR_AMD");
    GL_AMD_depth_clamp_separate.put(GL_DEPTH_CLAMP_FAR_AMD, "GL_DEPTH_CLAMP_FAR_AMD");
  }
  private static final Map<Integer, String> GL_EXT_memory_object = new HashMap<Integer, String>();
  private static void GL_EXT_memory_object() {
    GL_EXT_memory_object.put(GL_DEVICE_UUID_EXT, "GL_DEVICE_UUID_EXT");
    GL_EXT_memory_object.put(GL_PROTECTED_MEMORY_OBJECT_EXT, "GL_PROTECTED_MEMORY_OBJECT_EXT");
    GL_EXT_memory_object.put(GL_TILING_TYPES_EXT, "GL_TILING_TYPES_EXT");
    GL_EXT_memory_object.put(GL_NUM_DEVICE_UUIDS_EXT, "GL_NUM_DEVICE_UUIDS_EXT");
    GL_EXT_memory_object.put(GL_TEXTURE_TILING_EXT, "GL_TEXTURE_TILING_EXT");
    GL_EXT_memory_object.put(GL_DRIVER_UUID_EXT, "GL_DRIVER_UUID_EXT");
    GL_EXT_memory_object.put(GL_LINEAR_TILING_EXT, "GL_LINEAR_TILING_EXT");
    GL_EXT_memory_object.put(GL_NUM_TILING_TYPES_EXT, "GL_NUM_TILING_TYPES_EXT");
    GL_EXT_memory_object.put(GL_UUID_SIZE_EXT, "GL_UUID_SIZE_EXT");
    GL_EXT_memory_object.put(GL_DEDICATED_MEMORY_OBJECT_EXT, "GL_DEDICATED_MEMORY_OBJECT_EXT");
    GL_EXT_memory_object.put(GL_OPTIMAL_TILING_EXT, "GL_OPTIMAL_TILING_EXT");
  }
  private static final Map<Integer, String> GL_SGIX_scalebias_hint = new HashMap<Integer, String>();
  private static void GL_SGIX_scalebias_hint() {
    GL_SGIX_scalebias_hint.put(GL_SCALEBIAS_HINT_SGIX, "GL_SCALEBIAS_HINT_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_pipeline_statistics_query = new HashMap<Integer, String>();
  private static void GL_ARB_pipeline_statistics_query() {
    GL_ARB_pipeline_statistics_query.put(GL_COMPUTE_SHADER_INVOCATIONS_ARB, "GL_COMPUTE_SHADER_INVOCATIONS_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_TESS_CONTROL_SHADER_PATCHES_ARB, "GL_TESS_CONTROL_SHADER_PATCHES_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_FRAGMENT_SHADER_INVOCATIONS_ARB, "GL_FRAGMENT_SHADER_INVOCATIONS_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_GEOMETRY_SHADER_INVOCATIONS, "GL_GEOMETRY_SHADER_INVOCATIONS");
    GL_ARB_pipeline_statistics_query.put(GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB, "GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_VERTEX_SHADER_INVOCATIONS_ARB, "GL_VERTEX_SHADER_INVOCATIONS_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_VERTICES_SUBMITTED_ARB, "GL_VERTICES_SUBMITTED_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_CLIPPING_INPUT_PRIMITIVES_ARB, "GL_CLIPPING_INPUT_PRIMITIVES_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_CLIPPING_OUTPUT_PRIMITIVES_ARB, "GL_CLIPPING_OUTPUT_PRIMITIVES_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_PRIMITIVES_SUBMITTED_ARB, "GL_PRIMITIVES_SUBMITTED_ARB");
    GL_ARB_pipeline_statistics_query.put(GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB, "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB");
  }
  private static final Map<Integer, String> GL_OES_shader_multisample_interpolation = new HashMap<Integer, String>();
  private static void GL_OES_shader_multisample_interpolation() {
    GL_OES_shader_multisample_interpolation.put(GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES");
    GL_OES_shader_multisample_interpolation.put(GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES");
    GL_OES_shader_multisample_interpolation.put(GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES");
  }
  private static final Map<Integer, String> GL_SGIX_subsample = new HashMap<Integer, String>();
  private static void GL_SGIX_subsample() {
    GL_SGIX_subsample.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    GL_SGIX_subsample.put(GL_PIXEL_SUBSAMPLE_4444_SGIX, "GL_PIXEL_SUBSAMPLE_4444_SGIX");
    GL_SGIX_subsample.put(GL_PIXEL_SUBSAMPLE_4242_SGIX, "GL_PIXEL_SUBSAMPLE_4242_SGIX");
    GL_SGIX_subsample.put(GL_PIXEL_SUBSAMPLE_2424_SGIX, "GL_PIXEL_SUBSAMPLE_2424_SGIX");
    GL_SGIX_subsample.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
  }
  private static final Map<Integer, String> GL_AMD_occlusion_query_event = new HashMap<Integer, String>();
  private static void GL_AMD_occlusion_query_event() {
    GL_AMD_occlusion_query_event.put(GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_ALL_EVENT_BITS_AMD, "GL_QUERY_ALL_EVENT_BITS_AMD");
    GL_AMD_occlusion_query_event.put(GL_OCCLUSION_QUERY_EVENT_MASK_AMD, "GL_OCCLUSION_QUERY_EVENT_MASK_AMD");
  }
  private static final Map<Integer, String> GL_APPLE_texture_packed_float = new HashMap<Integer, String>();
  private static void GL_APPLE_texture_packed_float() {
    GL_APPLE_texture_packed_float.put(GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE, "GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE");
    GL_APPLE_texture_packed_float.put(GL_R11F_G11F_B10F_APPLE, "GL_R11F_G11F_B10F_APPLE");
    GL_APPLE_texture_packed_float.put(GL_RGB9_E5_APPLE, "GL_RGB9_E5_APPLE");
    GL_APPLE_texture_packed_float.put(GL_UNSIGNED_INT_5_9_9_9_REV_APPLE, "GL_UNSIGNED_INT_5_9_9_9_REV_APPLE");
  }
  private static final Map<Integer, String> GL_NV_gpu_program4 = new HashMap<Integer, String>();
  private static void GL_NV_gpu_program4() {
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_RESULT_COMPONENTS_NV, "GL_MAX_PROGRAM_RESULT_COMPONENTS_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV, "GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_TEXEL_OFFSET_NV, "GL_MAX_PROGRAM_TEXEL_OFFSET_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV, "GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV");
    GL_NV_gpu_program4.put(GL_MIN_PROGRAM_TEXEL_OFFSET_NV, "GL_MIN_PROGRAM_TEXEL_OFFSET_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_GENERIC_RESULTS_NV, "GL_MAX_PROGRAM_GENERIC_RESULTS_NV");
    GL_NV_gpu_program4.put(GL_PROGRAM_RESULT_COMPONENTS_NV, "GL_PROGRAM_RESULT_COMPONENTS_NV");
    GL_NV_gpu_program4.put(GL_PROGRAM_ATTRIB_COMPONENTS_NV, "GL_PROGRAM_ATTRIB_COMPONENTS_NV");
  }
  private static final Map<Integer, String> GL_ATI_pixel_format_float = new HashMap<Integer, String>();
  private static void GL_ATI_pixel_format_float() {
    GL_ATI_pixel_format_float.put(GL_RGBA_FLOAT_MODE_ATI, "GL_RGBA_FLOAT_MODE_ATI");
    GL_ATI_pixel_format_float.put(GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI, "GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI");
  }
  private static final Map<Integer, String> GL_NV_gpu_program5 = new HashMap<Integer, String>();
  private static void GL_NV_gpu_program5() {
    GL_NV_gpu_program5.put(GL_MAX_PROGRAM_SUBROUTINE_NUM_NV, "GL_MAX_PROGRAM_SUBROUTINE_NUM_NV");
    GL_NV_gpu_program5.put(GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV");
    GL_NV_gpu_program5.put(GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV, "GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV");
    GL_NV_gpu_program5.put(GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV, "GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV");
    GL_NV_gpu_program5.put(GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV, "GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV");
    GL_NV_gpu_program5.put(GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV");
    GL_NV_gpu_program5.put(GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV");
    GL_NV_gpu_program5.put(GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV");
  }
  private static final Map<Integer, String> GL_ARB_geometry_shader4 = new HashMap<Integer, String>();
  private static void GL_ARB_geometry_shader4() {
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB");
    GL_ARB_geometry_shader4.put(GL_TRIANGLES_ADJACENCY_ARB, "GL_TRIANGLES_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_TRIANGLE_STRIP_ADJACENCY_ARB, "GL_TRIANGLE_STRIP_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_VARYING_COMPONENTS, "GL_MAX_VARYING_COMPONENTS");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_VERTEX_VARYING_COMPONENTS_ARB, "GL_MAX_VERTEX_VARYING_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_SHADER_ARB, "GL_GEOMETRY_SHADER_ARB");
    GL_ARB_geometry_shader4.put(GL_LINE_STRIP_ADJACENCY_ARB, "GL_LINE_STRIP_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_INPUT_TYPE_ARB, "GL_GEOMETRY_INPUT_TYPE_ARB");
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_OUTPUT_TYPE_ARB, "GL_GEOMETRY_OUTPUT_TYPE_ARB");
    GL_ARB_geometry_shader4.put(GL_PROGRAM_POINT_SIZE_ARB, "GL_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_geometry_shader4.put(GL_LINES_ADJACENCY_ARB, "GL_LINES_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_VERTICES_OUT_ARB, "GL_GEOMETRY_VERTICES_OUT_ARB");
  }
  private static final Map<Integer, String> GL_OES_element_index_uint = new HashMap<Integer, String>();
  private static void GL_OES_element_index_uint() {
    GL_OES_element_index_uint.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  private static final Map<Integer, String> GL_IMG_user_clip_plane = new HashMap<Integer, String>();
  private static void GL_IMG_user_clip_plane() {
    GL_IMG_user_clip_plane.put(GL_MAX_CLIP_PLANES_IMG, "GL_MAX_CLIP_PLANES_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE1_IMG, "GL_CLIP_PLANE1_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE0_IMG, "GL_CLIP_PLANE0_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE2_IMG, "GL_CLIP_PLANE2_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE5_IMG, "GL_CLIP_PLANE5_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE4_IMG, "GL_CLIP_PLANE4_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE3_IMG, "GL_CLIP_PLANE3_IMG");
  }
  private static final Map<Integer, String> GL_ATI_vertex_array_object = new HashMap<Integer, String>();
  private static void GL_ATI_vertex_array_object() {
    GL_ATI_vertex_array_object.put(GL_STATIC_ATI, "GL_STATIC_ATI");
    GL_ATI_vertex_array_object.put(GL_PRESERVE_ATI, "GL_PRESERVE_ATI");
    GL_ATI_vertex_array_object.put(GL_OBJECT_BUFFER_SIZE_ATI, "GL_OBJECT_BUFFER_SIZE_ATI");
    GL_ATI_vertex_array_object.put(GL_ARRAY_OBJECT_BUFFER_ATI, "GL_ARRAY_OBJECT_BUFFER_ATI");
    GL_ATI_vertex_array_object.put(GL_ARRAY_OBJECT_OFFSET_ATI, "GL_ARRAY_OBJECT_OFFSET_ATI");
    GL_ATI_vertex_array_object.put(GL_DISCARD_ATI, "GL_DISCARD_ATI");
    GL_ATI_vertex_array_object.put(GL_DYNAMIC_ATI, "GL_DYNAMIC_ATI");
    GL_ATI_vertex_array_object.put(GL_OBJECT_BUFFER_USAGE_ATI, "GL_OBJECT_BUFFER_USAGE_ATI");
  }
  private static final Map<Integer, String> GL_OES_geometry_shader = new HashMap<Integer, String>();
  private static void GL_OES_geometry_shader() {
    GL_OES_geometry_shader.put(GL_FIRST_VERTEX_CONVENTION_OES, "GL_FIRST_VERTEX_CONVENTION_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES");
    GL_OES_geometry_shader.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES");
    GL_OES_geometry_shader.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES");
    GL_OES_geometry_shader.put(GL_LINES_ADJACENCY_OES, "GL_LINES_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_TRIANGLES_ADJACENCY_OES, "GL_TRIANGLES_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_LAYER_PROVOKING_VERTEX_OES, "GL_LAYER_PROVOKING_VERTEX_OES");
    GL_OES_geometry_shader.put(GL_PRIMITIVES_GENERATED_OES, "GL_PRIMITIVES_GENERATED_OES");
    GL_OES_geometry_shader.put(GL_MAX_FRAMEBUFFER_LAYERS_OES, "GL_MAX_FRAMEBUFFER_LAYERS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES");
    GL_OES_geometry_shader.put(GL_FRAMEBUFFER_DEFAULT_LAYERS_OES, "GL_FRAMEBUFFER_DEFAULT_LAYERS_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES, "GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES");
    GL_OES_geometry_shader.put(GL_LINE_STRIP_ADJACENCY_OES, "GL_LINE_STRIP_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_REFERENCED_BY_GEOMETRY_SHADER_OES, "GL_REFERENCED_BY_GEOMETRY_SHADER_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_SHADER_INVOCATIONS_OES, "GL_GEOMETRY_SHADER_INVOCATIONS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_TRIANGLE_STRIP_ADJACENCY_OES, "GL_TRIANGLE_STRIP_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_LINKED_VERTICES_OUT_OES, "GL_GEOMETRY_LINKED_VERTICES_OUT_OES");
    GL_OES_geometry_shader.put(GL_UNDEFINED_VERTEX_OES, "GL_UNDEFINED_VERTEX_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_LINKED_INPUT_TYPE_OES, "GL_GEOMETRY_LINKED_INPUT_TYPE_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_SHADER_BIT_OES, "GL_GEOMETRY_SHADER_BIT_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_SHADER_OES, "GL_GEOMETRY_SHADER_OES");
    GL_OES_geometry_shader.put(GL_LAST_VERTEX_CONVENTION_OES, "GL_LAST_VERTEX_CONVENTION_OES");
    GL_OES_geometry_shader.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES, "GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES");
  }
  private static final Map<Integer, String> GL_NV_conservative_raster_pre_snap_triangles = new HashMap<Integer, String>();
  private static void GL_NV_conservative_raster_pre_snap_triangles() {
    GL_NV_conservative_raster_pre_snap_triangles.put(GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV, "GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV");
    GL_NV_conservative_raster_pre_snap_triangles.put(GL_CONSERVATIVE_RASTER_MODE_NV, "GL_CONSERVATIVE_RASTER_MODE_NV");
    GL_NV_conservative_raster_pre_snap_triangles.put(GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV, "GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV");
  }
  private static final Map<Integer, String> GL_ARB_transpose_matrix = new HashMap<Integer, String>();
  private static void GL_ARB_transpose_matrix() {
    GL_ARB_transpose_matrix.put(GL_TRANSPOSE_TEXTURE_MATRIX_ARB, "GL_TRANSPOSE_TEXTURE_MATRIX_ARB");
    GL_ARB_transpose_matrix.put(GL_TRANSPOSE_MODELVIEW_MATRIX_ARB, "GL_TRANSPOSE_MODELVIEW_MATRIX_ARB");
    GL_ARB_transpose_matrix.put(GL_TRANSPOSE_COLOR_MATRIX_ARB, "GL_TRANSPOSE_COLOR_MATRIX_ARB");
    GL_ARB_transpose_matrix.put(GL_TRANSPOSE_PROJECTION_MATRIX_ARB, "GL_TRANSPOSE_PROJECTION_MATRIX_ARB");
  }
  private static final Map<Integer, String> GL_MESA_ycbcr_texture = new HashMap<Integer, String>();
  private static void GL_MESA_ycbcr_texture() {
    GL_MESA_ycbcr_texture.put(GL_UNSIGNED_SHORT_8_8_MESA, "GL_UNSIGNED_SHORT_8_8_MESA");
    GL_MESA_ycbcr_texture.put(GL_YCBCR_MESA, "GL_YCBCR_MESA");
    GL_MESA_ycbcr_texture.put(GL_UNSIGNED_SHORT_8_8_REV_MESA, "GL_UNSIGNED_SHORT_8_8_REV_MESA");
  }
  private static final Map<Integer, String> GL_APPLE_aux_depth_stencil = new HashMap<Integer, String>();
  private static void GL_APPLE_aux_depth_stencil() {
    GL_APPLE_aux_depth_stencil.put(GL_AUX_DEPTH_STENCIL_APPLE, "GL_AUX_DEPTH_STENCIL_APPLE");
  }
  private static final Map<Integer, String> GL_ATI_element_array = new HashMap<Integer, String>();
  private static void GL_ATI_element_array() {
    GL_ATI_element_array.put(GL_ELEMENT_ARRAY_ATI, "GL_ELEMENT_ARRAY_ATI");
    GL_ATI_element_array.put(GL_ELEMENT_ARRAY_POINTER_ATI, "GL_ELEMENT_ARRAY_POINTER_ATI");
    GL_ATI_element_array.put(GL_ELEMENT_ARRAY_TYPE_ATI, "GL_ELEMENT_ARRAY_TYPE_ATI");
  }
  private static final Map<Integer, String> GL_ARB_transform_feedback3 = new HashMap<Integer, String>();
  private static void GL_ARB_transform_feedback3() {
    GL_ARB_transform_feedback3.put(GL_MAX_VERTEX_STREAMS, "GL_MAX_VERTEX_STREAMS");
    GL_ARB_transform_feedback3.put(GL_MAX_TRANSFORM_FEEDBACK_BUFFERS, "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS");
  }
  private static final Map<Integer, String> GL_ARB_transform_feedback2 = new HashMap<Integer, String>();
  private static void GL_ARB_transform_feedback2() {
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BINDING, "GL_TRANSFORM_FEEDBACK_BINDING");
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE");
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED");
  }
  private static final Map<Integer, String> GL_EXT_packed_depth_stencil = new HashMap<Integer, String>();
  private static void GL_EXT_packed_depth_stencil() {
    GL_EXT_packed_depth_stencil.put(GL_DEPTH24_STENCIL8_EXT, "GL_DEPTH24_STENCIL8_EXT");
    GL_EXT_packed_depth_stencil.put(GL_UNSIGNED_INT_24_8_EXT, "GL_UNSIGNED_INT_24_8_EXT");
    GL_EXT_packed_depth_stencil.put(GL_DEPTH_STENCIL_EXT, "GL_DEPTH_STENCIL_EXT");
    GL_EXT_packed_depth_stencil.put(GL_TEXTURE_STENCIL_SIZE_EXT, "GL_TEXTURE_STENCIL_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_framebuffer_multisample = new HashMap<Integer, String>();
  private static void GL_APPLE_framebuffer_multisample() {
    GL_APPLE_framebuffer_multisample.put(GL_DRAW_FRAMEBUFFER_BINDING_APPLE, "GL_DRAW_FRAMEBUFFER_BINDING_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_APPLE, "GL_RENDERBUFFER_SAMPLES_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_READ_FRAMEBUFFER_BINDING_APPLE, "GL_READ_FRAMEBUFFER_BINDING_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_MAX_SAMPLES_APPLE, "GL_MAX_SAMPLES_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_DRAW_FRAMEBUFFER_APPLE, "GL_DRAW_FRAMEBUFFER_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_READ_FRAMEBUFFER_APPLE, "GL_READ_FRAMEBUFFER_APPLE");
  }
  private static final Map<Integer, String> GL_ATI_texture_env_combine3 = new HashMap<Integer, String>();
  private static void GL_ATI_texture_env_combine3() {
    GL_ATI_texture_env_combine3.put(GL_MODULATE_ADD_ATI, "GL_MODULATE_ADD_ATI");
    GL_ATI_texture_env_combine3.put(GL_MODULATE_SIGNED_ADD_ATI, "GL_MODULATE_SIGNED_ADD_ATI");
    GL_ATI_texture_env_combine3.put(GL_MODULATE_SUBTRACT_ATI, "GL_MODULATE_SUBTRACT_ATI");
  }
  private static final Map<Integer, String> GL_OES_texture_storage_multisample_2d_array = new HashMap<Integer, String>();
  private static void GL_OES_texture_storage_multisample_2d_array() {
    GL_OES_texture_storage_multisample_2d_array.put(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES");
  }
  private static final Map<Integer, String> GL_NV_uniform_buffer_unified_memory = new HashMap<Integer, String>();
  private static void GL_NV_uniform_buffer_unified_memory() {
    GL_NV_uniform_buffer_unified_memory.put(GL_UNIFORM_BUFFER_UNIFIED_NV, "GL_UNIFORM_BUFFER_UNIFIED_NV");
    GL_NV_uniform_buffer_unified_memory.put(GL_UNIFORM_BUFFER_LENGTH_NV, "GL_UNIFORM_BUFFER_LENGTH_NV");
    GL_NV_uniform_buffer_unified_memory.put(GL_UNIFORM_BUFFER_ADDRESS_NV, "GL_UNIFORM_BUFFER_ADDRESS_NV");
  }
  private static final Map<Integer, String> GL_EXT_clip_control = new HashMap<Integer, String>();
  private static void GL_EXT_clip_control() {
    GL_EXT_clip_control.put(GL_LOWER_LEFT_EXT, "GL_LOWER_LEFT_EXT");
    GL_EXT_clip_control.put(GL_NEGATIVE_ONE_TO_ONE_EXT, "GL_NEGATIVE_ONE_TO_ONE_EXT");
    GL_EXT_clip_control.put(GL_CLIP_DEPTH_MODE_EXT, "GL_CLIP_DEPTH_MODE_EXT");
    GL_EXT_clip_control.put(GL_UPPER_LEFT_EXT, "GL_UPPER_LEFT_EXT");
    GL_EXT_clip_control.put(GL_CLIP_ORIGIN_EXT, "GL_CLIP_ORIGIN_EXT");
    GL_EXT_clip_control.put(GL_ZERO_TO_ONE_EXT, "GL_ZERO_TO_ONE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_compiled_vertex_array = new HashMap<Integer, String>();
  private static void GL_EXT_compiled_vertex_array() {
    GL_EXT_compiled_vertex_array.put(GL_ARRAY_ELEMENT_LOCK_FIRST_EXT, "GL_ARRAY_ELEMENT_LOCK_FIRST_EXT");
    GL_EXT_compiled_vertex_array.put(GL_ARRAY_ELEMENT_LOCK_COUNT_EXT, "GL_ARRAY_ELEMENT_LOCK_COUNT_EXT");
  }
  private static final Map<Integer, String> GL_EXT_primitive_bounding_box = new HashMap<Integer, String>();
  private static void GL_EXT_primitive_bounding_box() {
    GL_EXT_primitive_bounding_box.put(GL_PRIMITIVE_BOUNDING_BOX_EXT, "GL_PRIMITIVE_BOUNDING_BOX_EXT");
  }
  private static final Map<Integer, String> GL_EXT_provoking_vertex = new HashMap<Integer, String>();
  private static void GL_EXT_provoking_vertex() {
    GL_EXT_provoking_vertex.put(GL_LAST_VERTEX_CONVENTION_EXT, "GL_LAST_VERTEX_CONVENTION_EXT");
    GL_EXT_provoking_vertex.put(GL_FIRST_VERTEX_CONVENTION_EXT, "GL_FIRST_VERTEX_CONVENTION_EXT");
    GL_EXT_provoking_vertex.put(GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT");
    GL_EXT_provoking_vertex.put(GL_PROVOKING_VERTEX_EXT, "GL_PROVOKING_VERTEX_EXT");
  }
  private static final Map<Integer, String> GL_SGIX_ycrcba = new HashMap<Integer, String>();
  private static void GL_SGIX_ycrcba() {
    GL_SGIX_ycrcba.put(GL_YCRCB_SGIX, "GL_YCRCB_SGIX");
    GL_SGIX_ycrcba.put(GL_YCRCBA_SGIX, "GL_YCRCBA_SGIX");
  }
  private static final Map<Integer, String> GL_OES_standard_derivatives = new HashMap<Integer, String>();
  private static void GL_OES_standard_derivatives() {
    GL_OES_standard_derivatives.put(GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES");
  }
  private static final Map<Integer, String> GL_EXT_texture_buffer_object = new HashMap<Integer, String>();
  private static void GL_EXT_texture_buffer_object() {
    GL_EXT_texture_buffer_object.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT");
    GL_EXT_texture_buffer_object.put(GL_TEXTURE_BUFFER_EXT, "GL_TEXTURE_BUFFER_EXT");
    GL_EXT_texture_buffer_object.put(GL_TEXTURE_BINDING_BUFFER_EXT, "GL_TEXTURE_BINDING_BUFFER_EXT");
    GL_EXT_texture_buffer_object.put(GL_TEXTURE_BUFFER_FORMAT_EXT, "GL_TEXTURE_BUFFER_FORMAT_EXT");
    GL_EXT_texture_buffer_object.put(GL_MAX_TEXTURE_BUFFER_SIZE_EXT, "GL_MAX_TEXTURE_BUFFER_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_ARB_sampler_objects = new HashMap<Integer, String>();
  private static void GL_ARB_sampler_objects() {
    GL_ARB_sampler_objects.put(GL_SAMPLER_BINDING, "GL_SAMPLER_BINDING");
  }
  private static final Map<Integer, String> GL_ARB_vertex_program = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_program() {
    GL_ARB_vertex_program.put(GL_VERTEX_PROGRAM_TWO_SIDE_ARB, "GL_VERTEX_PROGRAM_TWO_SIDE_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX11_ARB, "GL_MATRIX11_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB, "GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_CURRENT_VERTEX_ATTRIB_ARB, "GL_CURRENT_VERTEX_ATTRIB_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX29_ARB, "GL_MATRIX29_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB, "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB, "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX3_ARB, "GL_MATRIX3_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX12_ARB, "GL_MATRIX12_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX28_ARB, "GL_MATRIX28_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX4_ARB, "GL_MATRIX4_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX20_ARB, "GL_MATRIX20_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_BINDING_ARB, "GL_PROGRAM_BINDING_ARB");
    GL_ARB_vertex_program.put(GL_TRANSPOSE_CURRENT_MATRIX_ARB, "GL_TRANSPOSE_CURRENT_MATRIX_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ATTRIBS_ARB, "GL_PROGRAM_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_CURRENT_MATRIX_ARB, "GL_CURRENT_MATRIX_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX1_ARB, "GL_MATRIX1_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX22_ARB, "GL_MATRIX22_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB, "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB");
    GL_ARB_vertex_program.put(GL_MAX_VERTEX_ATTRIBS_ARB, "GL_MAX_VERTEX_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_PARAMETERS_ARB, "GL_PROGRAM_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX19_ARB, "GL_MATRIX19_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_FORMAT_ASCII_ARB, "GL_PROGRAM_FORMAT_ASCII_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_ENV_PARAMETERS_ARB, "GL_MAX_PROGRAM_ENV_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX21_ARB, "GL_MATRIX21_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_TEMPORARIES_ARB, "GL_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX10_ARB, "GL_MATRIX10_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX17_ARB, "GL_MATRIX17_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX23_ARB, "GL_MATRIX23_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_ATTRIBS_ARB, "GL_MAX_PROGRAM_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_CURRENT_MATRIX_STACK_DEPTH_ARB, "GL_CURRENT_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX18_ARB, "GL_MATRIX18_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_STRING_ARB, "GL_PROGRAM_STRING_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_PARAMETERS_ARB, "GL_MAX_PROGRAM_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX2_ARB, "GL_MATRIX2_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_PROGRAM_ARB, "GL_VERTEX_PROGRAM_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_MATRICES_ARB, "GL_MAX_PROGRAM_MATRICES_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX16_ARB, "GL_MATRIX16_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX8_ARB, "GL_MATRIX8_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB, "GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX24_ARB, "GL_MATRIX24_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_FORMAT_ARB, "GL_PROGRAM_FORMAT_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX9_ARB, "GL_MATRIX9_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX25_ARB, "GL_MATRIX25_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_TEMPORARIES_ARB, "GL_MAX_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX15_ARB, "GL_MATRIX15_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_PROGRAM_POINT_SIZE_ARB, "GL_VERTEX_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB, "GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_INSTRUCTIONS_ARB, "GL_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_PROGRAM_NATIVE_TEMPORARIES_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX0_ARB, "GL_MATRIX0_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ERROR_STRING_ARB, "GL_PROGRAM_ERROR_STRING_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_COLOR_SUM_ARB, "GL_COLOR_SUM_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB, "GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX6_ARB, "GL_MATRIX6_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX30_ARB, "GL_MATRIX30_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX27_ARB, "GL_MATRIX27_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX13_ARB, "GL_MATRIX13_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB, "GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX14_ARB, "GL_MATRIX14_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ERROR_POSITION_ARB, "GL_PROGRAM_ERROR_POSITION_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ADDRESS_REGISTERS_ARB, "GL_PROGRAM_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX5_ARB, "GL_MATRIX5_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX7_ARB, "GL_MATRIX7_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_LENGTH_ARB, "GL_PROGRAM_LENGTH_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB, "GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX26_ARB, "GL_MATRIX26_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB, "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX31_ARB, "GL_MATRIX31_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB");
  }
  private static final Map<Integer, String> GL_NV_gpu_multicast = new HashMap<Integer, String>();
  private static void GL_NV_gpu_multicast() {
    GL_NV_gpu_multicast.put(GL_PER_GPU_STORAGE_NV, "GL_PER_GPU_STORAGE_NV");
    GL_NV_gpu_multicast.put(GL_MULTICAST_GPUS_NV, "GL_MULTICAST_GPUS_NV");
    GL_NV_gpu_multicast.put(GL_PER_GPU_STORAGE_BIT_NV, "GL_PER_GPU_STORAGE_BIT_NV");
    GL_NV_gpu_multicast.put(GL_RENDER_GPU_MASK_NV, "GL_RENDER_GPU_MASK_NV");
    GL_NV_gpu_multicast.put(GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV, "GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV");
  }
  private static final Map<Integer, String> GL_ARB_vertex_attrib_64bit = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_attrib_64bit() {
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_VEC4, "GL_DOUBLE_VEC4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_VEC3, "GL_DOUBLE_VEC3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_VEC2, "GL_DOUBLE_VEC2");
    GL_ARB_vertex_attrib_64bit.put(GL_RGB32I, "GL_RGB32I");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT4, "GL_DOUBLE_MAT4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x4, "GL_DOUBLE_MAT2x4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x2, "GL_DOUBLE_MAT4x2");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x4, "GL_DOUBLE_MAT3x4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x3, "GL_DOUBLE_MAT4x3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x3, "GL_DOUBLE_MAT2x3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x2, "GL_DOUBLE_MAT3x2");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT3, "GL_DOUBLE_MAT3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT2, "GL_DOUBLE_MAT2");
  }
  private static final Map<Integer, String> GL_NV_command_list = new HashMap<Integer, String>();
  private static void GL_NV_command_list() {
    GL_NV_command_list.put(GL_STENCIL_REF_COMMAND_NV, "GL_STENCIL_REF_COMMAND_NV");
    GL_NV_command_list.put(GL_LINE_WIDTH_COMMAND_NV, "GL_LINE_WIDTH_COMMAND_NV");
    GL_NV_command_list.put(GL_NOP_COMMAND_NV, "GL_NOP_COMMAND_NV");
    GL_NV_command_list.put(GL_UNIFORM_ADDRESS_COMMAND_NV, "GL_UNIFORM_ADDRESS_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ARRAYS_COMMAND_NV, "GL_DRAW_ARRAYS_COMMAND_NV");
    GL_NV_command_list.put(GL_ALPHA_REF_COMMAND_NV, "GL_ALPHA_REF_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV, "GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV");
    GL_NV_command_list.put(GL_SCISSOR_COMMAND_NV, "GL_SCISSOR_COMMAND_NV");
    GL_NV_command_list.put(GL_ATTRIBUTE_ADDRESS_COMMAND_NV, "GL_ATTRIBUTE_ADDRESS_COMMAND_NV");
    GL_NV_command_list.put(GL_BLEND_COLOR_COMMAND_NV, "GL_BLEND_COLOR_COMMAND_NV");
    GL_NV_command_list.put(GL_VIEWPORT_COMMAND_NV, "GL_VIEWPORT_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ELEMENTS_COMMAND_NV, "GL_DRAW_ELEMENTS_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ELEMENTS_STRIP_COMMAND_NV, "GL_DRAW_ELEMENTS_STRIP_COMMAND_NV");
    GL_NV_command_list.put(GL_POLYGON_OFFSET_COMMAND_NV, "GL_POLYGON_OFFSET_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ARRAYS_STRIP_COMMAND_NV, "GL_DRAW_ARRAYS_STRIP_COMMAND_NV");
    GL_NV_command_list.put(GL_FRONT_FACE_COMMAND_NV, "GL_FRONT_FACE_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV, "GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV");
    GL_NV_command_list.put(GL_ELEMENT_ADDRESS_COMMAND_NV, "GL_ELEMENT_ADDRESS_COMMAND_NV");
    GL_NV_command_list.put(GL_TERMINATE_SEQUENCE_COMMAND_NV, "GL_TERMINATE_SEQUENCE_COMMAND_NV");
  }
  private static final Map<Integer, String> GL_ARB_texture_buffer_range = new HashMap<Integer, String>();
  private static void GL_ARB_texture_buffer_range() {
    GL_ARB_texture_buffer_range.put(GL_TEXTURE_BUFFER_OFFSET, "GL_TEXTURE_BUFFER_OFFSET");
    GL_ARB_texture_buffer_range.put(GL_TEXTURE_BUFFER_SIZE, "GL_TEXTURE_BUFFER_SIZE");
    GL_ARB_texture_buffer_range.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT");
  }
  private static final Map<Integer, String> GL_ARB_direct_state_access = new HashMap<Integer, String>();
  private static void GL_ARB_direct_state_access() {
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_1D_ARRAY, "GL_TEXTURE_BINDING_1D_ARRAY");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_3D, "GL_TEXTURE_BINDING_3D");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_RECTANGLE, "GL_TEXTURE_BINDING_RECTANGLE");
    GL_ARB_direct_state_access.put(GL_TEXTURE_TARGET, "GL_TEXTURE_TARGET");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D, "GL_TEXTURE_BINDING_2D");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D_ARRAY, "GL_TEXTURE_BINDING_2D_ARRAY");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_1D, "GL_TEXTURE_BINDING_1D");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_CUBE_MAP, "GL_TEXTURE_BINDING_CUBE_MAP");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");
    GL_ARB_direct_state_access.put(GL_QUERY_TARGET, "GL_QUERY_TARGET");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE, "GL_TEXTURE_BINDING_2D_MULTISAMPLE");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_BUFFER, "GL_TEXTURE_BINDING_BUFFER");
  }
  private static final Map<Integer, String> GL_EXT_texture_env_combine = new HashMap<Integer, String>();
  private static void GL_EXT_texture_env_combine() {
    GL_EXT_texture_env_combine.put(GL_OPERAND0_RGB_EXT, "GL_OPERAND0_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_OPERAND1_ALPHA_EXT, "GL_OPERAND1_ALPHA_EXT");
    GL_EXT_texture_env_combine.put(GL_OPERAND2_ALPHA_EXT, "GL_OPERAND2_ALPHA_EXT");
    GL_EXT_texture_env_combine.put(GL_OPERAND1_RGB_EXT, "GL_OPERAND1_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_SOURCE2_RGB_EXT, "GL_SOURCE2_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_OPERAND2_RGB_EXT, "GL_OPERAND2_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_SOURCE2_ALPHA_EXT, "GL_SOURCE2_ALPHA_EXT");
    GL_EXT_texture_env_combine.put(GL_SOURCE0_RGB_EXT, "GL_SOURCE0_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_SOURCE1_RGB_EXT, "GL_SOURCE1_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_COMBINE_ALPHA_EXT, "GL_COMBINE_ALPHA_EXT");
    GL_EXT_texture_env_combine.put(GL_ADD_SIGNED_EXT, "GL_ADD_SIGNED_EXT");
    GL_EXT_texture_env_combine.put(GL_SOURCE1_ALPHA_EXT, "GL_SOURCE1_ALPHA_EXT");
    GL_EXT_texture_env_combine.put(GL_COMBINE_EXT, "GL_COMBINE_EXT");
    GL_EXT_texture_env_combine.put(GL_CONSTANT_EXT, "GL_CONSTANT_EXT");
    GL_EXT_texture_env_combine.put(GL_SOURCE0_ALPHA_EXT, "GL_SOURCE0_ALPHA_EXT");
    GL_EXT_texture_env_combine.put(GL_PRIMARY_COLOR_EXT, "GL_PRIMARY_COLOR_EXT");
    GL_EXT_texture_env_combine.put(GL_COMBINE_RGB_EXT, "GL_COMBINE_RGB_EXT");
    GL_EXT_texture_env_combine.put(GL_INTERPOLATE_EXT, "GL_INTERPOLATE_EXT");
    GL_EXT_texture_env_combine.put(GL_RGB_SCALE_EXT, "GL_RGB_SCALE_EXT");
    GL_EXT_texture_env_combine.put(GL_PREVIOUS_EXT, "GL_PREVIOUS_EXT");
    GL_EXT_texture_env_combine.put(GL_OPERAND0_ALPHA_EXT, "GL_OPERAND0_ALPHA_EXT");
  }
  private static final Map<Integer, String> GL_EXT_pvrtc_sRGB = new HashMap<Integer, String>();
  private static void GL_EXT_pvrtc_sRGB() {
    GL_EXT_pvrtc_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT");
    GL_EXT_pvrtc_sRGB.put(GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT, "GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT");
    GL_EXT_pvrtc_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG");
    GL_EXT_pvrtc_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG");
    GL_EXT_pvrtc_sRGB.put(GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT, "GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT");
    GL_EXT_pvrtc_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_object = new HashMap<Integer, String>();
  private static void GL_EXT_texture_object() {
    GL_EXT_texture_object.put(GL_TEXTURE_RESIDENT_EXT, "GL_TEXTURE_RESIDENT_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_PRIORITY_EXT, "GL_TEXTURE_PRIORITY_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_3D_BINDING_EXT, "GL_TEXTURE_3D_BINDING_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_2D_BINDING_EXT, "GL_TEXTURE_2D_BINDING_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_1D_BINDING_EXT, "GL_TEXTURE_1D_BINDING_EXT");
  }
  private static final Map<Integer, String> GL_NV_primitive_restart = new HashMap<Integer, String>();
  private static void GL_NV_primitive_restart() {
    GL_NV_primitive_restart.put(GL_PRIMITIVE_RESTART_INDEX_NV, "GL_PRIMITIVE_RESTART_INDEX_NV");
    GL_NV_primitive_restart.put(GL_PRIMITIVE_RESTART_NV, "GL_PRIMITIVE_RESTART_NV");
  }
  private static final Map<Integer, String> GL_EXT_blend_func_extended = new HashMap<Integer, String>();
  private static void GL_EXT_blend_func_extended() {
    GL_EXT_blend_func_extended.put(GL_SRC_ALPHA_SATURATE_EXT, "GL_SRC_ALPHA_SATURATE_EXT");
    GL_EXT_blend_func_extended.put(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT, "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT");
    GL_EXT_blend_func_extended.put(GL_ONE_MINUS_SRC1_ALPHA_EXT, "GL_ONE_MINUS_SRC1_ALPHA_EXT");
    GL_EXT_blend_func_extended.put(GL_SRC1_COLOR_EXT, "GL_SRC1_COLOR_EXT");
    GL_EXT_blend_func_extended.put(GL_LOCATION_INDEX_EXT, "GL_LOCATION_INDEX_EXT");
    GL_EXT_blend_func_extended.put(GL_SRC1_ALPHA_EXT, "GL_SRC1_ALPHA_EXT");
    GL_EXT_blend_func_extended.put(GL_ONE_MINUS_SRC1_COLOR_EXT, "GL_ONE_MINUS_SRC1_COLOR_EXT");
  }
  private static final Map<Integer, String> GL_EXT_blend_func_separate = new HashMap<Integer, String>();
  private static void GL_EXT_blend_func_separate() {
    GL_EXT_blend_func_separate.put(GL_BLEND_DST_RGB_EXT, "GL_BLEND_DST_RGB_EXT");
    GL_EXT_blend_func_separate.put(GL_BLEND_SRC_RGB_EXT, "GL_BLEND_SRC_RGB_EXT");
    GL_EXT_blend_func_separate.put(GL_BLEND_DST_ALPHA_EXT, "GL_BLEND_DST_ALPHA_EXT");
    GL_EXT_blend_func_separate.put(GL_BLEND_SRC_ALPHA_EXT, "GL_BLEND_SRC_ALPHA_EXT");
  }
  private static final Map<Integer, String> GL_AMD_query_buffer_object = new HashMap<Integer, String>();
  private static void GL_AMD_query_buffer_object() {
    GL_AMD_query_buffer_object.put(GL_QUERY_BUFFER_BINDING_AMD, "GL_QUERY_BUFFER_BINDING_AMD");
    GL_AMD_query_buffer_object.put(GL_QUERY_RESULT_NO_WAIT_AMD, "GL_QUERY_RESULT_NO_WAIT_AMD");
    GL_AMD_query_buffer_object.put(GL_QUERY_BUFFER_AMD, "GL_QUERY_BUFFER_AMD");
  }
  private static final Map<Integer, String> GL_EXT_instanced_arrays = new HashMap<Integer, String>();
  private static void GL_EXT_instanced_arrays() {
    GL_EXT_instanced_arrays.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT");
  }
  private static final Map<Integer, String> GL_OES_matrix_get = new HashMap<Integer, String>();
  private static void GL_OES_matrix_get() {
    GL_OES_matrix_get.put(GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES, "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES");
    GL_OES_matrix_get.put(GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES, "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES");
    GL_OES_matrix_get.put(GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES, "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES");
  }
  private static final Map<Integer, String> GL_ARB_gpu_shader_fp64 = new HashMap<Integer, String>();
  private static void GL_ARB_gpu_shader_fp64() {
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE, "GL_DOUBLE");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_VEC4, "GL_DOUBLE_VEC4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_VEC3, "GL_DOUBLE_VEC3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_VEC2, "GL_DOUBLE_VEC2");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT4, "GL_DOUBLE_MAT4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT2x4, "GL_DOUBLE_MAT2x4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT4x2, "GL_DOUBLE_MAT4x2");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT3x4, "GL_DOUBLE_MAT3x4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT4x3, "GL_DOUBLE_MAT4x3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT2x3, "GL_DOUBLE_MAT2x3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT3x2, "GL_DOUBLE_MAT3x2");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT3, "GL_DOUBLE_MAT3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT2, "GL_DOUBLE_MAT2");
  }
  private static final Map<Integer, String> GL_IMG_texture_env_enhanced_fixed_function = new HashMap<Integer, String>();
  private static void GL_IMG_texture_env_enhanced_fixed_function() {
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_DOT3_RGBA_IMG, "GL_DOT3_RGBA_IMG");
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_ADD_BLEND_IMG, "GL_ADD_BLEND_IMG");
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_TEXTURE_ALPHA_MODULATE_IMG, "GL_TEXTURE_ALPHA_MODULATE_IMG");
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_FRAGMENT_ALPHA_MODULATE_IMG, "GL_FRAGMENT_ALPHA_MODULATE_IMG");
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_MODULATE_COLOR_IMG, "GL_MODULATE_COLOR_IMG");
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_FACTOR_ALPHA_MODULATE_IMG, "GL_FACTOR_ALPHA_MODULATE_IMG");
    GL_IMG_texture_env_enhanced_fixed_function.put(GL_RECIP_ADD_SIGNED_ALPHA_IMG, "GL_RECIP_ADD_SIGNED_ALPHA_IMG");
  }
  private static final Map<Integer, String> GL_EXT_window_rectangles = new HashMap<Integer, String>();
  private static void GL_EXT_window_rectangles() {
    GL_EXT_window_rectangles.put(GL_WINDOW_RECTANGLE_MODE_EXT, "GL_WINDOW_RECTANGLE_MODE_EXT");
    GL_EXT_window_rectangles.put(GL_INCLUSIVE_EXT, "GL_INCLUSIVE_EXT");
    GL_EXT_window_rectangles.put(GL_WINDOW_RECTANGLE_EXT, "GL_WINDOW_RECTANGLE_EXT");
    GL_EXT_window_rectangles.put(GL_NUM_WINDOW_RECTANGLES_EXT, "GL_NUM_WINDOW_RECTANGLES_EXT");
    GL_EXT_window_rectangles.put(GL_EXCLUSIVE_EXT, "GL_EXCLUSIVE_EXT");
    GL_EXT_window_rectangles.put(GL_MAX_WINDOW_RECTANGLES_EXT, "GL_MAX_WINDOW_RECTANGLES_EXT");
  }
  private static final Map<Integer, String> GL_SGIS_texture_filter4 = new HashMap<Integer, String>();
  private static void GL_SGIS_texture_filter4() {
    GL_SGIS_texture_filter4.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    GL_SGIS_texture_filter4.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
  }
  private static final Map<Integer, String> GL_AMD_name_gen_delete = new HashMap<Integer, String>();
  private static void GL_AMD_name_gen_delete() {
    GL_AMD_name_gen_delete.put(GL_VERTEX_ARRAY_OBJECT_AMD, "GL_VERTEX_ARRAY_OBJECT_AMD");
    GL_AMD_name_gen_delete.put(GL_PERFORMANCE_MONITOR_AMD, "GL_PERFORMANCE_MONITOR_AMD");
    GL_AMD_name_gen_delete.put(GL_DATA_BUFFER_AMD, "GL_DATA_BUFFER_AMD");
    GL_AMD_name_gen_delete.put(GL_QUERY_OBJECT_AMD, "GL_QUERY_OBJECT_AMD");
    GL_AMD_name_gen_delete.put(GL_SAMPLER_OBJECT_AMD, "GL_SAMPLER_OBJECT_AMD");
  }
  private static final Map<Integer, String> GL_ARB_internalformat_query = new HashMap<Integer, String>();
  private static void GL_ARB_internalformat_query() {
    GL_ARB_internalformat_query.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
  }
  private static final Map<Integer, String> GL_NV_texture_shader3 = new HashMap<Integer, String>();
  private static void GL_NV_texture_shader3() {
    GL_NV_texture_shader3.put(GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV, "GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV");
    GL_NV_texture_shader3.put(GL_FORCE_BLUE_TO_ONE_NV, "GL_FORCE_BLUE_TO_ONE_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV, "GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV, "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_HILO_TEXTURE_2D_NV, "GL_OFFSET_HILO_TEXTURE_2D_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV, "GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV");
    GL_NV_texture_shader3.put(GL_HILO8_NV, "GL_HILO8_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV, "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV, "GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV");
    GL_NV_texture_shader3.put(GL_DEPENDENT_RGB_TEXTURE_3D_NV, "GL_DEPENDENT_RGB_TEXTURE_3D_NV");
    GL_NV_texture_shader3.put(GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV, "GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV");
    GL_NV_texture_shader3.put(GL_SIGNED_HILO8_NV, "GL_SIGNED_HILO8_NV");
    GL_NV_texture_shader3.put(GL_DOT_PRODUCT_PASS_THROUGH_NV, "GL_DOT_PRODUCT_PASS_THROUGH_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV, "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV");
    GL_NV_texture_shader3.put(GL_DOT_PRODUCT_TEXTURE_1D_NV, "GL_DOT_PRODUCT_TEXTURE_1D_NV");
    GL_NV_texture_shader3.put(GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV, "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV");
    GL_NV_texture_shader3.put(GL_DEPENDENT_HILO_TEXTURE_2D_NV, "GL_DEPENDENT_HILO_TEXTURE_2D_NV");
  }
  private static final Map<Integer, String> GL_NV_texture_shader2 = new HashMap<Integer, String>();
  private static void GL_NV_texture_shader2() {
    GL_NV_texture_shader2.put(GL_DOT_PRODUCT_TEXTURE_3D_NV, "GL_DOT_PRODUCT_TEXTURE_3D_NV");
  }
  private static final Map<Integer, String> GL_ARB_copy_buffer = new HashMap<Integer, String>();
  private static void GL_ARB_copy_buffer() {
    GL_ARB_copy_buffer.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    GL_ARB_copy_buffer.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
  }
  private static final Map<Integer, String> GL_SUNX_constant_data = new HashMap<Integer, String>();
  private static void GL_SUNX_constant_data() {
    GL_SUNX_constant_data.put(GL_TEXTURE_CONSTANT_DATA_SUNX, "GL_TEXTURE_CONSTANT_DATA_SUNX");
    GL_SUNX_constant_data.put(GL_UNPACK_CONSTANT_DATA_SUNX, "GL_UNPACK_CONSTANT_DATA_SUNX");
  }
  private static final Map<Integer, String> GL_NV_transform_feedback2 = new HashMap<Integer, String>();
  private static void GL_NV_transform_feedback2() {
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV");
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BINDING_NV, "GL_TRANSFORM_FEEDBACK_BINDING_NV");
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_NV, "GL_TRANSFORM_FEEDBACK_NV");
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV");
  }
  private static final Map<Integer, String> GL_EXT_tessellation_shader = new HashMap<Integer, String>();
  private static void GL_EXT_tessellation_shader() {
    GL_EXT_tessellation_shader.put(GL_TESS_CONTROL_SHADER_EXT, "GL_TESS_CONTROL_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_CW, "GL_CW");
    GL_EXT_tessellation_shader.put(GL_ISOLINES_EXT, "GL_ISOLINES_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_QUADS_EXT, "GL_QUADS_EXT");
    GL_EXT_tessellation_shader.put(GL_FRACTIONAL_ODD_EXT, "GL_FRACTIONAL_ODD_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT");
    GL_EXT_tessellation_shader.put(GL_TRIANGLES, "GL_TRIANGLES");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_POINT_MODE_EXT, "GL_TESS_GEN_POINT_MODE_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_PATCH_VERTICES_EXT, "GL_MAX_PATCH_VERTICES_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT");
    GL_EXT_tessellation_shader.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_EXT, "GL_TESS_EVALUATION_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_CCW, "GL_CCW");
    GL_EXT_tessellation_shader.put(GL_EQUAL, "GL_EQUAL");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_MODE_EXT, "GL_TESS_GEN_MODE_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_IS_PER_PATCH_EXT, "GL_IS_PER_PATCH_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_FRACTIONAL_EVEN_EXT, "GL_FRACTIONAL_EVEN_EXT");
    GL_EXT_tessellation_shader.put(GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED");
    GL_EXT_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_BIT_EXT, "GL_TESS_EVALUATION_SHADER_BIT_EXT");
    GL_EXT_tessellation_shader.put(GL_PATCHES_EXT, "GL_PATCHES_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_VERTEX_ORDER_EXT, "GL_TESS_GEN_VERTEX_ORDER_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_GEN_LEVEL_EXT, "GL_MAX_TESS_GEN_LEVEL_EXT");
    GL_EXT_tessellation_shader.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT, "GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_SPACING_EXT, "GL_TESS_GEN_SPACING_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_CONTROL_SHADER_BIT_EXT, "GL_TESS_CONTROL_SHADER_BIT_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_CONTROL_OUTPUT_VERTICES_EXT, "GL_TESS_CONTROL_OUTPUT_VERTICES_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_PATCH_COMPONENTS_EXT, "GL_MAX_TESS_PATCH_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_tessellation_shader.put(GL_PATCH_VERTICES_EXT, "GL_PATCH_VERTICES_EXT");
  }
  private static final Map<Integer, String> GL_KHR_texture_compression_astc_hdr = new HashMap<Integer, String>();
  private static void GL_KHR_texture_compression_astc_hdr() {
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_8x6_KHR, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_10x5_KHR, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_5x5_KHR, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_8x5_KHR, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_5x4_KHR, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_12x12_KHR, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_6x6_KHR, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_10x6_KHR, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_8x8_KHR, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_12x10_KHR, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_10x10_KHR, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_6x5_KHR, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_4x4_KHR, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_RGBA_ASTC_10x8_KHR, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR");
    GL_KHR_texture_compression_astc_hdr.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR");
  }
  private static final Map<Integer, String> GL_3DFX_multisample = new HashMap<Integer, String>();
  private static void GL_3DFX_multisample() {
    GL_3DFX_multisample.put(GL_SAMPLE_BUFFERS_3DFX, "GL_SAMPLE_BUFFERS_3DFX");
    GL_3DFX_multisample.put(GL_MULTISAMPLE_3DFX, "GL_MULTISAMPLE_3DFX");
    GL_3DFX_multisample.put(GL_SAMPLES_3DFX, "GL_SAMPLES_3DFX");
    GL_3DFX_multisample.put(GL_MULTISAMPLE_BIT_3DFX, "GL_MULTISAMPLE_BIT_3DFX");
  }
  private static final Map<Integer, String> GL_SGIX_resample = new HashMap<Integer, String>();
  private static void GL_SGIX_resample() {
    GL_SGIX_resample.put(GL_RESAMPLE_DECIMATE_SGIX, "GL_RESAMPLE_DECIMATE_SGIX");
    GL_SGIX_resample.put(GL_RESAMPLE_REPLICATE_SGIX, "GL_RESAMPLE_REPLICATE_SGIX");
    GL_SGIX_resample.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    GL_SGIX_resample.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    GL_SGIX_resample.put(GL_RESAMPLE_ZERO_FILL_SGIX, "GL_RESAMPLE_ZERO_FILL_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_timer_query = new HashMap<Integer, String>();
  private static void GL_ARB_timer_query() {
    GL_ARB_timer_query.put(GL_TIMESTAMP, "GL_TIMESTAMP");
    GL_ARB_timer_query.put(GL_TIME_ELAPSED, "GL_TIME_ELAPSED");
  }
  private static final Map<Integer, String> GL_NV_internalformat_sample_query = new HashMap<Integer, String>();
  private static void GL_NV_internalformat_sample_query() {
    GL_NV_internalformat_sample_query.put(GL_MULTISAMPLES_NV, "GL_MULTISAMPLES_NV");
    GL_NV_internalformat_sample_query.put(GL_SUPERSAMPLE_SCALE_Y_NV, "GL_SUPERSAMPLE_SCALE_Y_NV");
    GL_NV_internalformat_sample_query.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_NV_internalformat_sample_query.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    GL_NV_internalformat_sample_query.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    GL_NV_internalformat_sample_query.put(GL_SUPERSAMPLE_SCALE_X_NV, "GL_SUPERSAMPLE_SCALE_X_NV");
    GL_NV_internalformat_sample_query.put(GL_CONFORMANT_NV, "GL_CONFORMANT_NV");
  }
  private static final Map<Integer, String> GL_EXT_timer_query = new HashMap<Integer, String>();
  private static void GL_EXT_timer_query() {
    GL_EXT_timer_query.put(GL_TIME_ELAPSED_EXT, "GL_TIME_ELAPSED_EXT");
  }
  private static final Map<Integer, String> GL_EXT_point_parameters = new HashMap<Integer, String>();
  private static void GL_EXT_point_parameters() {
    GL_EXT_point_parameters.put(GL_POINT_FADE_THRESHOLD_SIZE_EXT, "GL_POINT_FADE_THRESHOLD_SIZE_EXT");
    GL_EXT_point_parameters.put(GL_DISTANCE_ATTENUATION_EXT, "GL_DISTANCE_ATTENUATION_EXT");
    GL_EXT_point_parameters.put(GL_POINT_SIZE_MIN_EXT, "GL_POINT_SIZE_MIN_EXT");
    GL_EXT_point_parameters.put(GL_POINT_SIZE_MAX_EXT, "GL_POINT_SIZE_MAX_EXT");
  }
  private static final Map<Integer, String> GL_EXT_sRGB_write_control = new HashMap<Integer, String>();
  private static void GL_EXT_sRGB_write_control() {
    GL_EXT_sRGB_write_control.put(GL_FRAMEBUFFER_SRGB_EXT, "GL_FRAMEBUFFER_SRGB_EXT");
  }
  private static final Map<Integer, String> GL_AMD_performance_monitor = new HashMap<Integer, String>();
  private static void GL_AMD_performance_monitor() {
    GL_AMD_performance_monitor.put(GL_PERFMON_RESULT_AVAILABLE_AMD, "GL_PERFMON_RESULT_AVAILABLE_AMD");
    GL_AMD_performance_monitor.put(GL_PERFMON_RESULT_SIZE_AMD, "GL_PERFMON_RESULT_SIZE_AMD");
    GL_AMD_performance_monitor.put(GL_COUNTER_RANGE_AMD, "GL_COUNTER_RANGE_AMD");
    GL_AMD_performance_monitor.put(GL_PERFMON_RESULT_AMD, "GL_PERFMON_RESULT_AMD");
    GL_AMD_performance_monitor.put(GL_PERCENTAGE_AMD, "GL_PERCENTAGE_AMD");
    GL_AMD_performance_monitor.put(GL_UNSIGNED_INT64_AMD, "GL_UNSIGNED_INT64_AMD");
    GL_AMD_performance_monitor.put(GL_COUNTER_TYPE_AMD, "GL_COUNTER_TYPE_AMD");
  }
  private static final Map<Integer, String> GL_NV_vertex_array_range2 = new HashMap<Integer, String>();
  private static void GL_NV_vertex_array_range2() {
    GL_NV_vertex_array_range2.put(GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV, "GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV");
  }
  private static final Map<Integer, String> GL_SGIX_framezoom = new HashMap<Integer, String>();
  private static void GL_SGIX_framezoom() {
    GL_SGIX_framezoom.put(GL_FRAMEZOOM_FACTOR_SGIX, "GL_FRAMEZOOM_FACTOR_SGIX");
    GL_SGIX_framezoom.put(GL_MAX_FRAMEZOOM_FACTOR_SGIX, "GL_MAX_FRAMEZOOM_FACTOR_SGIX");
    GL_SGIX_framezoom.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
  }
  private static final Map<Integer, String> GL_OES_texture_buffer = new HashMap<Integer, String>();
  private static void GL_OES_texture_buffer() {
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES");
    GL_OES_texture_buffer.put(GL_MAX_TEXTURE_BUFFER_SIZE_OES, "GL_MAX_TEXTURE_BUFFER_SIZE_OES");
    GL_OES_texture_buffer.put(GL_INT_SAMPLER_BUFFER_OES, "GL_INT_SAMPLER_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_UNSIGNED_INT_IMAGE_BUFFER_OES, "GL_UNSIGNED_INT_IMAGE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_OES, "GL_UNSIGNED_INT_SAMPLER_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_INT_IMAGE_BUFFER_OES, "GL_INT_IMAGE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_BINDING_OES, "GL_TEXTURE_BUFFER_BINDING_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_OES, "GL_TEXTURE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BINDING_BUFFER_OES, "GL_TEXTURE_BINDING_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_IMAGE_BUFFER_OES, "GL_IMAGE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_SIZE_OES, "GL_TEXTURE_BUFFER_SIZE_OES");
    GL_OES_texture_buffer.put(GL_SAMPLER_BUFFER_OES, "GL_SAMPLER_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_OES, "GL_TEXTURE_BUFFER_OFFSET_OES");
  }
  private static final Map<Integer, String> GL_ARB_half_float_pixel = new HashMap<Integer, String>();
  private static void GL_ARB_half_float_pixel() {
    GL_ARB_half_float_pixel.put(GL_HALF_FLOAT_ARB, "GL_HALF_FLOAT_ARB");
  }
  private static final Map<Integer, String> GL_OES_blend_func_separate = new HashMap<Integer, String>();
  private static void GL_OES_blend_func_separate() {
    GL_OES_blend_func_separate.put(GL_BLEND_DST_RGB_OES, "GL_BLEND_DST_RGB_OES");
    GL_OES_blend_func_separate.put(GL_BLEND_SRC_RGB_OES, "GL_BLEND_SRC_RGB_OES");
    GL_OES_blend_func_separate.put(GL_BLEND_SRC_ALPHA_OES, "GL_BLEND_SRC_ALPHA_OES");
    GL_OES_blend_func_separate.put(GL_BLEND_DST_ALPHA_OES, "GL_BLEND_DST_ALPHA_OES");
  }
  private static final Map<Integer, String> GL_EXT_texture_view = new HashMap<Integer, String>();
  private static void GL_EXT_texture_view() {
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_NUM_LAYERS_EXT, "GL_TEXTURE_VIEW_NUM_LAYERS_EXT");
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_NUM_LEVELS_EXT, "GL_TEXTURE_VIEW_NUM_LEVELS_EXT");
    GL_EXT_texture_view.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_MIN_LAYER_EXT, "GL_TEXTURE_VIEW_MIN_LAYER_EXT");
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_MIN_LEVEL_EXT, "GL_TEXTURE_VIEW_MIN_LEVEL_EXT");
  }
  private static final Map<Integer, String> GL_NV_gpu_shader5 = new HashMap<Integer, String>();
  private static void GL_NV_gpu_shader5() {
    GL_NV_gpu_shader5.put(GL_INT8_VEC3_NV, "GL_INT8_VEC3_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT16_VEC2_NV, "GL_UNSIGNED_INT16_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT64_VEC4_NV, "GL_UNSIGNED_INT64_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT8_VEC3_NV, "GL_UNSIGNED_INT8_VEC3_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT16_VEC4_NV, "GL_UNSIGNED_INT16_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT64_VEC2_NV, "GL_UNSIGNED_INT64_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_FLOAT16_VEC3_NV, "GL_FLOAT16_VEC3_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT8_NV, "GL_UNSIGNED_INT8_NV");
    GL_NV_gpu_shader5.put(GL_INT16_NV, "GL_INT16_NV");
    GL_NV_gpu_shader5.put(GL_INT16_VEC4_NV, "GL_INT16_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_INT64_VEC4_NV, "GL_INT64_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_INT64_VEC2_NV, "GL_INT64_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_INT8_NV, "GL_INT8_NV");
    GL_NV_gpu_shader5.put(GL_INT16_VEC2_NV, "GL_INT16_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_INT8_VEC4_NV, "GL_INT8_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_INT8_VEC2_NV, "GL_INT8_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_PATCHES, "GL_PATCHES");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT8_VEC2_NV, "GL_UNSIGNED_INT8_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT8_VEC4_NV, "GL_UNSIGNED_INT8_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT16_VEC3_NV, "GL_UNSIGNED_INT16_VEC3_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT64_VEC3_NV, "GL_UNSIGNED_INT64_VEC3_NV");
    GL_NV_gpu_shader5.put(GL_FLOAT16_NV, "GL_FLOAT16_NV");
    GL_NV_gpu_shader5.put(GL_FLOAT16_VEC2_NV, "GL_FLOAT16_VEC2_NV");
    GL_NV_gpu_shader5.put(GL_INT64_NV, "GL_INT64_NV");
    GL_NV_gpu_shader5.put(GL_FLOAT16_VEC4_NV, "GL_FLOAT16_VEC4_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT16_NV, "GL_UNSIGNED_INT16_NV");
    GL_NV_gpu_shader5.put(GL_UNSIGNED_INT64_NV, "GL_UNSIGNED_INT64_NV");
    GL_NV_gpu_shader5.put(GL_INT16_VEC3_NV, "GL_INT16_VEC3_NV");
    GL_NV_gpu_shader5.put(GL_INT64_VEC3_NV, "GL_INT64_VEC3_NV");
  }
  private static final Map<Integer, String> GL_KHR_context_flush_control = new HashMap<Integer, String>();
  private static void GL_KHR_context_flush_control() {
    GL_KHR_context_flush_control.put(GL_CONTEXT_RELEASE_BEHAVIOR, "GL_CONTEXT_RELEASE_BEHAVIOR");
    GL_KHR_context_flush_control.put(GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR");
    GL_KHR_context_flush_control.put(GL_NONE, "GL_NONE");
    GL_KHR_context_flush_control.put(GL_CONTEXT_RELEASE_BEHAVIOR_KHR, "GL_CONTEXT_RELEASE_BEHAVIOR_KHR");
    GL_KHR_context_flush_control.put(GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH");
  }
  private static final Map<Integer, String> GL_OES_texture_cube_map = new HashMap<Integer, String>();
  private static void GL_OES_texture_cube_map() {
    GL_OES_texture_cube_map.put(GL_REFLECTION_MAP_OES, "GL_REFLECTION_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES");
    GL_OES_texture_cube_map.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES");
    GL_OES_texture_cube_map.put(GL_NORMAL_MAP_OES, "GL_NORMAL_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_OES, "GL_TEXTURE_CUBE_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_BINDING_CUBE_MAP_OES, "GL_TEXTURE_BINDING_CUBE_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_GEN_MODE_OES, "GL_TEXTURE_GEN_MODE_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_GEN_STR_OES, "GL_TEXTURE_GEN_STR_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES");
  }
  private static final Map<Integer, String> GL_EXT_bindable_uniform = new HashMap<Integer, String>();
  private static void GL_EXT_bindable_uniform() {
    GL_EXT_bindable_uniform.put(GL_UNIFORM_BUFFER_BINDING_EXT, "GL_UNIFORM_BUFFER_BINDING_EXT");
    GL_EXT_bindable_uniform.put(GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT, "GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT");
    GL_EXT_bindable_uniform.put(GL_MAX_BINDABLE_UNIFORM_SIZE_EXT, "GL_MAX_BINDABLE_UNIFORM_SIZE_EXT");
    GL_EXT_bindable_uniform.put(GL_UNIFORM_BUFFER_EXT, "GL_UNIFORM_BUFFER_EXT");
    GL_EXT_bindable_uniform.put(GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT, "GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT");
    GL_EXT_bindable_uniform.put(GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT, "GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT");
  }
  private static final Map<Integer, String> GL_EXT_framebuffer_object = new HashMap<Integer, String>();
  private static void GL_EXT_framebuffer_object() {
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX1_EXT, "GL_STENCIL_INDEX1_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_ATTACHMENT_EXT, "GL_STENCIL_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_MAX_RENDERBUFFER_SIZE_EXT, "GL_MAX_RENDERBUFFER_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT5_EXT, "GL_COLOR_ATTACHMENT5_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT10_EXT, "GL_COLOR_ATTACHMENT10_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_STENCIL_SIZE_EXT, "GL_RENDERBUFFER_STENCIL_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_BINDING_EXT, "GL_RENDERBUFFER_BINDING_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT7_EXT, "GL_COLOR_ATTACHMENT7_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT4_EXT, "GL_COLOR_ATTACHMENT4_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_INTERNAL_FORMAT_EXT, "GL_RENDERBUFFER_INTERNAL_FORMAT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_DEPTH_SIZE_EXT, "GL_RENDERBUFFER_DEPTH_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX16_EXT, "GL_STENCIL_INDEX16_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT12_EXT, "GL_COLOR_ATTACHMENT12_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_EXT, "GL_RENDERBUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_BINDING_EXT, "GL_FRAMEBUFFER_BINDING_EXT");
    GL_EXT_framebuffer_object.put(GL_DEPTH_ATTACHMENT_EXT, "GL_DEPTH_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_RED_SIZE_EXT, "GL_RENDERBUFFER_RED_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT11_EXT, "GL_COLOR_ATTACHMENT11_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_EXT, "GL_FRAMEBUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT6_EXT, "GL_COLOR_ATTACHMENT6_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_HEIGHT_EXT, "GL_RENDERBUFFER_HEIGHT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_ALPHA_SIZE_EXT, "GL_RENDERBUFFER_ALPHA_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT");
    GL_EXT_framebuffer_object.put(GL_MAX_COLOR_ATTACHMENTS_EXT, "GL_MAX_COLOR_ATTACHMENTS_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_UNSUPPORTED_EXT, "GL_FRAMEBUFFER_UNSUPPORTED_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT14_EXT, "GL_COLOR_ATTACHMENT14_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT0_EXT, "GL_COLOR_ATTACHMENT0_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_INVALID_FRAMEBUFFER_OPERATION_EXT, "GL_INVALID_FRAMEBUFFER_OPERATION_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_WIDTH_EXT, "GL_RENDERBUFFER_WIDTH_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_COMPLETE_EXT, "GL_FRAMEBUFFER_COMPLETE_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_GREEN_SIZE_EXT, "GL_RENDERBUFFER_GREEN_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX8_EXT, "GL_STENCIL_INDEX8_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT13_EXT, "GL_COLOR_ATTACHMENT13_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT3_EXT, "GL_COLOR_ATTACHMENT3_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT8_EXT, "GL_COLOR_ATTACHMENT8_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX4_EXT, "GL_STENCIL_INDEX4_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT9_EXT, "GL_COLOR_ATTACHMENT9_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT2_EXT, "GL_COLOR_ATTACHMENT2_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_BLUE_SIZE_EXT, "GL_RENDERBUFFER_BLUE_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT1_EXT, "GL_COLOR_ATTACHMENT1_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT15_EXT, "GL_COLOR_ATTACHMENT15_EXT");
  }
  private static final Map<Integer, String> GL_SGIX_polynomial_ffd = new HashMap<Integer, String>();
  private static void GL_SGIX_polynomial_ffd() {
    GL_SGIX_polynomial_ffd.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_MAX_DEFORMATION_ORDER_SGIX, "GL_MAX_DEFORMATION_ORDER_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_TEXTURE_DEFORMATION_BIT_SGIX, "GL_TEXTURE_DEFORMATION_BIT_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_GEOMETRY_DEFORMATION_BIT_SGIX, "GL_GEOMETRY_DEFORMATION_BIT_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_DEFORMATIONS_MASK_SGIX, "GL_DEFORMATIONS_MASK_SGIX");
  }
  private static final Map<Integer, String> GL_OES_sample_shading = new HashMap<Integer, String>();
  private static void GL_OES_sample_shading() {
    GL_OES_sample_shading.put(GL_MIN_SAMPLE_SHADING_VALUE_OES, "GL_MIN_SAMPLE_SHADING_VALUE_OES");
    GL_OES_sample_shading.put(GL_SAMPLE_SHADING_OES, "GL_SAMPLE_SHADING_OES");
  }
  private static final Map<Integer, String> GL_SGIS_point_parameters = new HashMap<Integer, String>();
  private static void GL_SGIS_point_parameters() {
    GL_SGIS_point_parameters.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    GL_SGIS_point_parameters.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    GL_SGIS_point_parameters.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    GL_SGIS_point_parameters.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
  }
  private static final Map<Integer, String> GL_ARB_shader_storage_buffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_shader_storage_buffer_object() {
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS, "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS, "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES, "GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES");
    GL_ARB_shader_storage_buffer_object.put(GL_SHADER_STORAGE_BUFFER_SIZE, "GL_SHADER_STORAGE_BUFFER_SIZE");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS, "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS, "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS");
    GL_ARB_shader_storage_buffer_object.put(GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT, "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT");
    GL_ARB_shader_storage_buffer_object.put(GL_SHADER_STORAGE_BARRIER_BIT, "GL_SHADER_STORAGE_BARRIER_BIT");
    GL_ARB_shader_storage_buffer_object.put(GL_SHADER_STORAGE_BUFFER_BINDING, "GL_SHADER_STORAGE_BUFFER_BINDING");
    GL_ARB_shader_storage_buffer_object.put(GL_SHADER_STORAGE_BUFFER_START, "GL_SHADER_STORAGE_BUFFER_START");
    GL_ARB_shader_storage_buffer_object.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_SHADER_STORAGE_BLOCK_SIZE, "GL_MAX_SHADER_STORAGE_BLOCK_SIZE");
    GL_ARB_shader_storage_buffer_object.put(GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS, "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS");
  }
  private static final Map<Integer, String> GL_INTEL_performance_query = new HashMap<Integer, String>();
  private static void GL_INTEL_performance_query() {
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL, "GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL, "GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL, "GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL, "GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_WAIT_INTEL, "GL_PERFQUERY_WAIT_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_RAW_INTEL, "GL_PERFQUERY_COUNTER_RAW_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL, "GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL, "GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL, "GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL, "GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_GLOBAL_CONTEXT_INTEL, "GL_PERFQUERY_GLOBAL_CONTEXT_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL, "GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL, "GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL, "GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_SINGLE_CONTEXT_INTEL, "GL_PERFQUERY_SINGLE_CONTEXT_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_FLUSH_INTEL, "GL_PERFQUERY_FLUSH_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_DONOT_FLUSH_INTEL, "GL_PERFQUERY_DONOT_FLUSH_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_EVENT_INTEL, "GL_PERFQUERY_COUNTER_EVENT_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL, "GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL");
    GL_INTEL_performance_query.put(GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL, "GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL");
  }
  private static final Map<Integer, String> GL_EXT_vertex_attrib_64bit = new HashMap<Integer, String>();
  private static void GL_EXT_vertex_attrib_64bit() {
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_VEC2_EXT, "GL_DOUBLE_VEC2_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_VEC4_EXT, "GL_DOUBLE_VEC4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE, "GL_DOUBLE");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT3_EXT, "GL_DOUBLE_MAT3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x3_EXT, "GL_DOUBLE_MAT4x3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x4_EXT, "GL_DOUBLE_MAT2x4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_VEC3_EXT, "GL_DOUBLE_VEC3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x4_EXT, "GL_DOUBLE_MAT3x4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x2_EXT, "GL_DOUBLE_MAT3x2_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT4_EXT, "GL_DOUBLE_MAT4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT2_EXT, "GL_DOUBLE_MAT2_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x3_EXT, "GL_DOUBLE_MAT2x3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x2_EXT, "GL_DOUBLE_MAT4x2_EXT");
  }
  private static final Map<Integer, String> GL_ARB_ES3_compatibility = new HashMap<Integer, String>();
  private static void GL_ARB_ES3_compatibility() {
    GL_ARB_ES3_compatibility.put(GL_ANY_SAMPLES_PASSED_CONSERVATIVE, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_SIGNED_R11_EAC, "GL_COMPRESSED_SIGNED_R11_EAC");
    GL_ARB_ES3_compatibility.put(GL_MAX_ELEMENT_INDEX, "GL_MAX_ELEMENT_INDEX");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC, "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_RGB8_ETC2, "GL_COMPRESSED_RGB8_ETC2");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_R11_EAC, "GL_COMPRESSED_R11_EAC");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_SRGB8_ETC2, "GL_COMPRESSED_SRGB8_ETC2");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_RGBA8_ETC2_EAC, "GL_COMPRESSED_RGBA8_ETC2_EAC");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_RG11_EAC, "GL_COMPRESSED_RG11_EAC");
    GL_ARB_ES3_compatibility.put(GL_COMPRESSED_SIGNED_RG11_EAC, "GL_COMPRESSED_SIGNED_RG11_EAC");
    GL_ARB_ES3_compatibility.put(GL_PRIMITIVE_RESTART_FIXED_INDEX, "GL_PRIMITIVE_RESTART_FIXED_INDEX");
  }
  private static final Map<Integer, String> GL_OES_mapbuffer = new HashMap<Integer, String>();
  private static void GL_OES_mapbuffer() {
    GL_OES_mapbuffer.put(GL_BUFFER_MAP_POINTER_OES, "GL_BUFFER_MAP_POINTER_OES");
    GL_OES_mapbuffer.put(GL_WRITE_ONLY_OES, "GL_WRITE_ONLY_OES");
    GL_OES_mapbuffer.put(GL_BUFFER_MAPPED_OES, "GL_BUFFER_MAPPED_OES");
    GL_OES_mapbuffer.put(GL_BUFFER_ACCESS_OES, "GL_BUFFER_ACCESS_OES");
  }
  private static final Map<Integer, String> GL_SGIS_texture_color_mask = new HashMap<Integer, String>();
  private static void GL_SGIS_texture_color_mask() {
    GL_SGIS_texture_color_mask.put(GL_TEXTURE_COLOR_WRITEMASK_SGIS, "GL_TEXTURE_COLOR_WRITEMASK_SGIS");
  }
  private static final Map<Integer, String> GL_ARB_program_interface_query = new HashMap<Integer, String>();
  private static void GL_ARB_program_interface_query() {
    GL_ARB_program_interface_query.put(GL_COMPUTE_SUBROUTINE_UNIFORM, "GL_COMPUTE_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_MATRIX_STRIDE, "GL_MATRIX_STRIDE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_GEOMETRY_SHADER, "GL_REFERENCED_BY_GEOMETRY_SHADER");
    GL_ARB_program_interface_query.put(GL_SHADER_STORAGE_BLOCK, "GL_SHADER_STORAGE_BLOCK");
    GL_ARB_program_interface_query.put(GL_ACTIVE_VARIABLES, "GL_ACTIVE_VARIABLES");
    GL_ARB_program_interface_query.put(GL_ACTIVE_RESOURCES, "GL_ACTIVE_RESOURCES");
    GL_ARB_program_interface_query.put(GL_ARRAY_STRIDE, "GL_ARRAY_STRIDE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_REFERENCED_BY_TESS_CONTROL_SHADER");
    GL_ARB_program_interface_query.put(GL_MAX_NUM_ACTIVE_VARIABLES, "GL_MAX_NUM_ACTIVE_VARIABLES");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_COMPUTE_SHADER, "GL_REFERENCED_BY_COMPUTE_SHADER");
    GL_ARB_program_interface_query.put(GL_GEOMETRY_SUBROUTINE_UNIFORM, "GL_GEOMETRY_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_BUFFER_VARIABLE, "GL_BUFFER_VARIABLE");
    GL_ARB_program_interface_query.put(GL_UNIFORM_BLOCK, "GL_UNIFORM_BLOCK");
    GL_ARB_program_interface_query.put(GL_OFFSET, "GL_OFFSET");
    GL_ARB_program_interface_query.put(GL_TESS_EVALUATION_SUBROUTINE_UNIFORM, "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_TOP_LEVEL_ARRAY_SIZE, "GL_TOP_LEVEL_ARRAY_SIZE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER");
    GL_ARB_program_interface_query.put(GL_FRAGMENT_SUBROUTINE, "GL_FRAGMENT_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_TRANSFORM_FEEDBACK_VARYING, "GL_TRANSFORM_FEEDBACK_VARYING");
    GL_ARB_program_interface_query.put(GL_MAX_NAME_LENGTH, "GL_MAX_NAME_LENGTH");
    GL_ARB_program_interface_query.put(GL_VERTEX_SUBROUTINE_UNIFORM, "GL_VERTEX_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_TYPE, "GL_TYPE");
    GL_ARB_program_interface_query.put(GL_ARRAY_SIZE, "GL_ARRAY_SIZE");
    GL_ARB_program_interface_query.put(GL_TESS_CONTROL_SUBROUTINE, "GL_TESS_CONTROL_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_VERTEX_SHADER, "GL_REFERENCED_BY_VERTEX_SHADER");
    GL_ARB_program_interface_query.put(GL_NAME_LENGTH, "GL_NAME_LENGTH");
    GL_ARB_program_interface_query.put(GL_BUFFER_BINDING, "GL_BUFFER_BINDING");
    GL_ARB_program_interface_query.put(GL_TOP_LEVEL_ARRAY_STRIDE, "GL_TOP_LEVEL_ARRAY_STRIDE");
    GL_ARB_program_interface_query.put(GL_PROGRAM_OUTPUT, "GL_PROGRAM_OUTPUT");
    GL_ARB_program_interface_query.put(GL_TESS_EVALUATION_SUBROUTINE, "GL_TESS_EVALUATION_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_UNIFORM, "GL_UNIFORM");
    GL_ARB_program_interface_query.put(GL_TESS_CONTROL_SUBROUTINE_UNIFORM, "GL_TESS_CONTROL_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_BUFFER_DATA_SIZE, "GL_BUFFER_DATA_SIZE");
    GL_ARB_program_interface_query.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    GL_ARB_program_interface_query.put(GL_COMPUTE_SUBROUTINE, "GL_COMPUTE_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_ATOMIC_COUNTER_BUFFER_INDEX, "GL_ATOMIC_COUNTER_BUFFER_INDEX");
    GL_ARB_program_interface_query.put(GL_BLOCK_INDEX, "GL_BLOCK_INDEX");
    GL_ARB_program_interface_query.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    GL_ARB_program_interface_query.put(GL_LOCATION, "GL_LOCATION");
    GL_ARB_program_interface_query.put(GL_IS_ROW_MAJOR, "GL_IS_ROW_MAJOR");
    GL_ARB_program_interface_query.put(GL_VERTEX_SUBROUTINE, "GL_VERTEX_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_FRAGMENT_SUBROUTINE_UNIFORM, "GL_FRAGMENT_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_NUM_ACTIVE_VARIABLES, "GL_NUM_ACTIVE_VARIABLES");
    GL_ARB_program_interface_query.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
    GL_ARB_program_interface_query.put(GL_LOCATION_INDEX, "GL_LOCATION_INDEX");
    GL_ARB_program_interface_query.put(GL_MAX_NUM_COMPATIBLE_SUBROUTINES, "GL_MAX_NUM_COMPATIBLE_SUBROUTINES");
    GL_ARB_program_interface_query.put(GL_PROGRAM_INPUT, "GL_PROGRAM_INPUT");
    GL_ARB_program_interface_query.put(GL_IS_PER_PATCH, "GL_IS_PER_PATCH");
    GL_ARB_program_interface_query.put(GL_GEOMETRY_SUBROUTINE, "GL_GEOMETRY_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_FRAGMENT_SHADER, "GL_REFERENCED_BY_FRAGMENT_SHADER");
  }
  private static final Map<Integer, String> GL_ARB_sparse_buffer = new HashMap<Integer, String>();
  private static void GL_ARB_sparse_buffer() {
    GL_ARB_sparse_buffer.put(GL_SPARSE_STORAGE_BIT_ARB, "GL_SPARSE_STORAGE_BIT_ARB");
    GL_ARB_sparse_buffer.put(GL_SPARSE_BUFFER_PAGE_SIZE_ARB, "GL_SPARSE_BUFFER_PAGE_SIZE_ARB");
  }
  private static final Map<Integer, String> GL_EXT_texture_type_2_10_10_10_REV = new HashMap<Integer, String>();
  private static void GL_EXT_texture_type_2_10_10_10_REV() {
    GL_EXT_texture_type_2_10_10_10_REV.put(GL_UNSIGNED_INT_2_10_10_10_REV_EXT, "GL_UNSIGNED_INT_2_10_10_10_REV_EXT");
  }
  private static final Map<Integer, String> GL_NV_read_buffer = new HashMap<Integer, String>();
  private static void GL_NV_read_buffer() {
    GL_NV_read_buffer.put(GL_READ_BUFFER_NV, "GL_READ_BUFFER_NV");
  }
  private static final Map<Integer, String> GL_NV_vertex_program = new HashMap<Integer, String>();
  private static void GL_NV_vertex_program() {
    GL_NV_vertex_program.put(GL_MATRIX4_NV, "GL_MATRIX4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_NV, "GL_VERTEX_PROGRAM_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_PARAMETER_NV, "GL_PROGRAM_PARAMETER_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY11_NV, "GL_VERTEX_ATTRIB_ARRAY11_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB15_4_NV, "GL_MAP2_VERTEX_ATTRIB15_4_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_SIZE_NV, "GL_ATTRIB_ARRAY_SIZE_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB9_4_NV, "GL_MAP1_VERTEX_ATTRIB9_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB14_4_NV, "GL_MAP1_VERTEX_ATTRIB14_4_NV");
    GL_NV_vertex_program.put(GL_IDENTITY_NV, "GL_IDENTITY_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_POINTER_NV, "GL_ATTRIB_ARRAY_POINTER_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB4_4_NV, "GL_MAP1_VERTEX_ATTRIB4_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_TWO_SIDE_NV, "GL_VERTEX_PROGRAM_TWO_SIDE_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB9_4_NV, "GL_MAP2_VERTEX_ATTRIB9_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY1_NV, "GL_VERTEX_ATTRIB_ARRAY1_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY14_NV, "GL_VERTEX_ATTRIB_ARRAY14_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY9_NV, "GL_VERTEX_ATTRIB_ARRAY9_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB13_4_NV, "GL_MAP1_VERTEX_ATTRIB13_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB8_4_NV, "GL_MAP2_VERTEX_ATTRIB8_4_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_TYPE_NV, "GL_ATTRIB_ARRAY_TYPE_NV");
    GL_NV_vertex_program.put(GL_TRANSPOSE_NV, "GL_TRANSPOSE_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB2_4_NV, "GL_MAP2_VERTEX_ATTRIB2_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB3_4_NV, "GL_MAP1_VERTEX_ATTRIB3_4_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_LENGTH_NV, "GL_PROGRAM_LENGTH_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY5_NV, "GL_VERTEX_ATTRIB_ARRAY5_NV");
    GL_NV_vertex_program.put(GL_MATRIX0_NV, "GL_MATRIX0_NV");
    GL_NV_vertex_program.put(GL_MATRIX3_NV, "GL_MATRIX3_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB11_4_NV, "GL_MAP2_VERTEX_ATTRIB11_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB5_4_NV, "GL_MAP1_VERTEX_ATTRIB5_4_NV");
    GL_NV_vertex_program.put(GL_MATRIX7_NV, "GL_MATRIX7_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB14_4_NV, "GL_MAP2_VERTEX_ATTRIB14_4_NV");
    GL_NV_vertex_program.put(GL_CURRENT_MATRIX_STACK_DEPTH_NV, "GL_CURRENT_MATRIX_STACK_DEPTH_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB2_4_NV, "GL_MAP1_VERTEX_ATTRIB2_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY10_NV, "GL_VERTEX_ATTRIB_ARRAY10_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_POINT_SIZE_NV, "GL_VERTEX_PROGRAM_POINT_SIZE_NV");
    GL_NV_vertex_program.put(GL_CURRENT_MATRIX_NV, "GL_CURRENT_MATRIX_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY2_NV, "GL_VERTEX_ATTRIB_ARRAY2_NV");
    GL_NV_vertex_program.put(GL_MAX_TRACK_MATRICES_NV, "GL_MAX_TRACK_MATRICES_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_ERROR_POSITION_NV, "GL_PROGRAM_ERROR_POSITION_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB3_4_NV, "GL_MAP2_VERTEX_ATTRIB3_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB0_4_NV, "GL_MAP2_VERTEX_ATTRIB0_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_STATE_PROGRAM_NV, "GL_VERTEX_STATE_PROGRAM_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY6_NV, "GL_VERTEX_ATTRIB_ARRAY6_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB8_4_NV, "GL_MAP1_VERTEX_ATTRIB8_4_NV");
    GL_NV_vertex_program.put(GL_INVERSE_TRANSPOSE_NV, "GL_INVERSE_TRANSPOSE_NV");
    GL_NV_vertex_program.put(GL_MATRIX6_NV, "GL_MATRIX6_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_RESIDENT_NV, "GL_PROGRAM_RESIDENT_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB11_4_NV, "GL_MAP1_VERTEX_ATTRIB11_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB1_4_NV, "GL_MAP1_VERTEX_ATTRIB1_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB12_4_NV, "GL_MAP2_VERTEX_ATTRIB12_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY13_NV, "GL_VERTEX_ATTRIB_ARRAY13_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB7_4_NV, "GL_MAP1_VERTEX_ATTRIB7_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB6_4_NV, "GL_MAP2_VERTEX_ATTRIB6_4_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_STRING_NV, "GL_PROGRAM_STRING_NV");
    GL_NV_vertex_program.put(GL_TRACK_MATRIX_TRANSFORM_NV, "GL_TRACK_MATRIX_TRANSFORM_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY3_NV, "GL_VERTEX_ATTRIB_ARRAY3_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB6_4_NV, "GL_MAP1_VERTEX_ATTRIB6_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB5_4_NV, "GL_MAP2_VERTEX_ATTRIB5_4_NV");
    GL_NV_vertex_program.put(GL_MATRIX2_NV, "GL_MATRIX2_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB10_4_NV, "GL_MAP1_VERTEX_ATTRIB10_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB0_4_NV, "GL_MAP1_VERTEX_ATTRIB0_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY7_NV, "GL_VERTEX_ATTRIB_ARRAY7_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_BINDING_NV, "GL_VERTEX_PROGRAM_BINDING_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB1_4_NV, "GL_MAP2_VERTEX_ATTRIB1_4_NV");
    GL_NV_vertex_program.put(GL_INVERSE_NV, "GL_INVERSE_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB4_4_NV, "GL_MAP2_VERTEX_ATTRIB4_4_NV");
    GL_NV_vertex_program.put(GL_MATRIX5_NV, "GL_MATRIX5_NV");
    GL_NV_vertex_program.put(GL_TRACK_MATRIX_NV, "GL_TRACK_MATRIX_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB7_4_NV, "GL_MAP2_VERTEX_ATTRIB7_4_NV");
    GL_NV_vertex_program.put(GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV, "GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY12_NV, "GL_VERTEX_ATTRIB_ARRAY12_NV");
    GL_NV_vertex_program.put(GL_CURRENT_ATTRIB_NV, "GL_CURRENT_ATTRIB_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY4_NV, "GL_VERTEX_ATTRIB_ARRAY4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB12_4_NV, "GL_MAP1_VERTEX_ATTRIB12_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY15_NV, "GL_VERTEX_ATTRIB_ARRAY15_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB15_4_NV, "GL_MAP1_VERTEX_ATTRIB15_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB10_4_NV, "GL_MAP2_VERTEX_ATTRIB10_4_NV");
    GL_NV_vertex_program.put(GL_MODELVIEW_PROJECTION_NV, "GL_MODELVIEW_PROJECTION_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_STRIDE_NV, "GL_ATTRIB_ARRAY_STRIDE_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_TARGET_NV, "GL_PROGRAM_TARGET_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY0_NV, "GL_VERTEX_ATTRIB_ARRAY0_NV");
    GL_NV_vertex_program.put(GL_MATRIX1_NV, "GL_MATRIX1_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB13_4_NV, "GL_MAP2_VERTEX_ATTRIB13_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY8_NV, "GL_VERTEX_ATTRIB_ARRAY8_NV");
  }
  private static final Map<Integer, String> GL_EXT_texture_filter_minmax = new HashMap<Integer, String>();
  private static void GL_EXT_texture_filter_minmax() {
    GL_EXT_texture_filter_minmax.put(GL_RASTER_MULTISAMPLE_EXT, "GL_RASTER_MULTISAMPLE_EXT");
    GL_EXT_texture_filter_minmax.put(GL_EFFECTIVE_RASTER_SAMPLES_EXT, "GL_EFFECTIVE_RASTER_SAMPLES_EXT");
    GL_EXT_texture_filter_minmax.put(GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT, "GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT");
    GL_EXT_texture_filter_minmax.put(GL_RASTER_SAMPLES_EXT, "GL_RASTER_SAMPLES_EXT");
    GL_EXT_texture_filter_minmax.put(GL_MAX_RASTER_SAMPLES_EXT, "GL_MAX_RASTER_SAMPLES_EXT");
    GL_EXT_texture_filter_minmax.put(GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT, "GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT");
  }
  private static final Map<Integer, String> GL_ARB_depth_texture = new HashMap<Integer, String>();
  private static void GL_ARB_depth_texture() {
    GL_ARB_depth_texture.put(GL_DEPTH_COMPONENT32_ARB, "GL_DEPTH_COMPONENT32_ARB");
    GL_ARB_depth_texture.put(GL_DEPTH_COMPONENT24_ARB, "GL_DEPTH_COMPONENT24_ARB");
    GL_ARB_depth_texture.put(GL_TEXTURE_DEPTH_SIZE_ARB, "GL_TEXTURE_DEPTH_SIZE_ARB");
    GL_ARB_depth_texture.put(GL_DEPTH_COMPONENT16_ARB, "GL_DEPTH_COMPONENT16_ARB");
    GL_ARB_depth_texture.put(GL_DEPTH_TEXTURE_MODE_ARB, "GL_DEPTH_TEXTURE_MODE_ARB");
  }
  private static final Map<Integer, String> GL_ARB_debug_output = new HashMap<Integer, String>();
  private static void GL_ARB_debug_output() {
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_SHADER_COMPILER_ARB, "GL_DEBUG_SOURCE_SHADER_COMPILER_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_CALLBACK_FUNCTION_ARB, "GL_DEBUG_CALLBACK_FUNCTION_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SEVERITY_MEDIUM_ARB, "GL_DEBUG_SEVERITY_MEDIUM_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB, "GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SEVERITY_HIGH_ARB, "GL_DEBUG_SEVERITY_HIGH_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_ERROR_ARB, "GL_DEBUG_TYPE_ERROR_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_APPLICATION_ARB, "GL_DEBUG_SOURCE_APPLICATION_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_PERFORMANCE_ARB, "GL_DEBUG_TYPE_PERFORMANCE_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_PORTABILITY_ARB, "GL_DEBUG_TYPE_PORTABILITY_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_OTHER_ARB, "GL_DEBUG_TYPE_OTHER_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_API_ARB, "GL_DEBUG_SOURCE_API_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_THIRD_PARTY_ARB, "GL_DEBUG_SOURCE_THIRD_PARTY_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB");
    GL_ARB_debug_output.put(GL_MAX_DEBUG_MESSAGE_LENGTH_ARB, "GL_MAX_DEBUG_MESSAGE_LENGTH_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SEVERITY_LOW_ARB, "GL_DEBUG_SEVERITY_LOW_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_CALLBACK_USER_PARAM_ARB, "GL_DEBUG_CALLBACK_USER_PARAM_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_OTHER_ARB, "GL_DEBUG_SOURCE_OTHER_ARB");
    GL_ARB_debug_output.put(GL_MAX_DEBUG_LOGGED_MESSAGES_ARB, "GL_MAX_DEBUG_LOGGED_MESSAGES_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_LOGGED_MESSAGES_ARB, "GL_DEBUG_LOGGED_MESSAGES_ARB");
  }
  private static final Map<Integer, String> GL_SGIX_texture_scale_bias = new HashMap<Integer, String>();
  private static void GL_SGIX_texture_scale_bias() {
    GL_SGIX_texture_scale_bias.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
    GL_SGIX_texture_scale_bias.put(GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX");
    GL_SGIX_texture_scale_bias.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    GL_SGIX_texture_scale_bias.put(GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX");
  }
  private static final Map<Integer, String> GL_SUN_slice_accum = new HashMap<Integer, String>();
  private static void GL_SUN_slice_accum() {
    GL_SUN_slice_accum.put(GL_SLICE_ACCUM_SUN, "GL_SLICE_ACCUM_SUN");
  }
  private static final Map<Integer, String> GL_SGIX_ir_instrument1 = new HashMap<Integer, String>();
  private static void GL_SGIX_ir_instrument1() {
    GL_SGIX_ir_instrument1.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
  }
  private static final Map<Integer, String> GL_KHR_blend_equation_advanced = new HashMap<Integer, String>();
  private static void GL_KHR_blend_equation_advanced() {
    GL_KHR_blend_equation_advanced.put(GL_HSL_SATURATION_KHR, "GL_HSL_SATURATION_KHR");
    GL_KHR_blend_equation_advanced.put(GL_LIGHTEN_KHR, "GL_LIGHTEN_KHR");
    GL_KHR_blend_equation_advanced.put(GL_MULTIPLY_KHR, "GL_MULTIPLY_KHR");
    GL_KHR_blend_equation_advanced.put(GL_HSL_HUE_KHR, "GL_HSL_HUE_KHR");
    GL_KHR_blend_equation_advanced.put(GL_COLORBURN_KHR, "GL_COLORBURN_KHR");
    GL_KHR_blend_equation_advanced.put(GL_HARDLIGHT_KHR, "GL_HARDLIGHT_KHR");
    GL_KHR_blend_equation_advanced.put(GL_OVERLAY_KHR, "GL_OVERLAY_KHR");
    GL_KHR_blend_equation_advanced.put(GL_DARKEN_KHR, "GL_DARKEN_KHR");
    GL_KHR_blend_equation_advanced.put(GL_SCREEN_KHR, "GL_SCREEN_KHR");
    GL_KHR_blend_equation_advanced.put(GL_SOFTLIGHT_KHR, "GL_SOFTLIGHT_KHR");
    GL_KHR_blend_equation_advanced.put(GL_DIFFERENCE_KHR, "GL_DIFFERENCE_KHR");
    GL_KHR_blend_equation_advanced.put(GL_HSL_LUMINOSITY_KHR, "GL_HSL_LUMINOSITY_KHR");
    GL_KHR_blend_equation_advanced.put(GL_EXCLUSION_KHR, "GL_EXCLUSION_KHR");
    GL_KHR_blend_equation_advanced.put(GL_HSL_COLOR_KHR, "GL_HSL_COLOR_KHR");
    GL_KHR_blend_equation_advanced.put(GL_COLORDODGE_KHR, "GL_COLORDODGE_KHR");
  }
  private static final Map<Integer, String> GL_EXT_texture_border_clamp = new HashMap<Integer, String>();
  private static void GL_EXT_texture_border_clamp() {
    GL_EXT_texture_border_clamp.put(GL_CLAMP_TO_BORDER_EXT, "GL_CLAMP_TO_BORDER_EXT");
    GL_EXT_texture_border_clamp.put(GL_TEXTURE_BORDER_COLOR_EXT, "GL_TEXTURE_BORDER_COLOR_EXT");
  }
  private static final Map<Integer, String> GL_ARB_query_buffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_query_buffer_object() {
    GL_ARB_query_buffer_object.put(GL_QUERY_BUFFER_BARRIER_BIT, "GL_QUERY_BUFFER_BARRIER_BIT");
    GL_ARB_query_buffer_object.put(GL_QUERY_BUFFER_BINDING, "GL_QUERY_BUFFER_BINDING");
    GL_ARB_query_buffer_object.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    GL_ARB_query_buffer_object.put(GL_QUERY_RESULT_NO_WAIT, "GL_QUERY_RESULT_NO_WAIT");
  }
  private static final Map<Integer, String> GL_EXT_texture_format_BGRA8888 = new HashMap<Integer, String>();
  private static void GL_EXT_texture_format_BGRA8888() {
    GL_EXT_texture_format_BGRA8888.put(GL_BGRA_EXT, "GL_BGRA_EXT");
  }
  private static final Map<Integer, String> GL_ANGLE_pack_reverse_row_order = new HashMap<Integer, String>();
  private static void GL_ANGLE_pack_reverse_row_order() {
    GL_ANGLE_pack_reverse_row_order.put(GL_PACK_REVERSE_ROW_ORDER_ANGLE, "GL_PACK_REVERSE_ROW_ORDER_ANGLE");
  }
  private static final Map<Integer, String> GL_KHR_debug = new HashMap<Integer, String>();
  private static void GL_KHR_debug() {
    GL_KHR_debug.put(GL_DEBUG_SOURCE_APPLICATION_KHR, "GL_DEBUG_SOURCE_APPLICATION_KHR");
    GL_KHR_debug.put(GL_SHADER, "GL_SHADER");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_NOTIFICATION_KHR, "GL_DEBUG_SEVERITY_NOTIFICATION_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM, "GL_DEBUG_SOURCE_WINDOW_SYSTEM");
    GL_KHR_debug.put(GL_DEBUG_TYPE_POP_GROUP, "GL_DEBUG_TYPE_POP_GROUP");
    GL_KHR_debug.put(GL_VERTEX_ARRAY_KHR, "GL_VERTEX_ARRAY_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_ERROR_KHR, "GL_DEBUG_TYPE_ERROR_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_SHADER_COMPILER, "GL_DEBUG_SOURCE_SHADER_COMPILER");
    GL_KHR_debug.put(GL_PROGRAM, "GL_PROGRAM");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_OTHER, "GL_DEBUG_SOURCE_OTHER");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR");
    GL_KHR_debug.put(GL_SHADER_KHR, "GL_SHADER_KHR");
    GL_KHR_debug.put(GL_PROGRAM_KHR, "GL_PROGRAM_KHR");
    GL_KHR_debug.put(GL_MAX_LABEL_LENGTH_KHR, "GL_MAX_LABEL_LENGTH_KHR");
    GL_KHR_debug.put(GL_MAX_DEBUG_LOGGED_MESSAGES_KHR, "GL_MAX_DEBUG_LOGGED_MESSAGES_KHR");
    GL_KHR_debug.put(GL_PROGRAM_PIPELINE, "GL_PROGRAM_PIPELINE");
    GL_KHR_debug.put(GL_STACK_UNDERFLOW_KHR, "GL_STACK_UNDERFLOW_KHR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_FUNCTION_KHR, "GL_DEBUG_CALLBACK_FUNCTION_KHR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_FUNCTION, "GL_DEBUG_CALLBACK_FUNCTION");
    GL_KHR_debug.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT_KHR, "GL_DEBUG_OUTPUT_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PERFORMANCE, "GL_DEBUG_TYPE_PERFORMANCE");
    GL_KHR_debug.put(GL_STACK_UNDERFLOW, "GL_STACK_UNDERFLOW");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PORTABILITY, "GL_DEBUG_TYPE_PORTABILITY");
    GL_KHR_debug.put(GL_DEBUG_TYPE_MARKER_KHR, "GL_DEBUG_TYPE_MARKER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_HIGH_KHR, "GL_DEBUG_SEVERITY_HIGH_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PORTABILITY_KHR, "GL_DEBUG_TYPE_PORTABILITY_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_API_KHR, "GL_DEBUG_SOURCE_API_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PUSH_GROUP, "GL_DEBUG_TYPE_PUSH_GROUP");
    GL_KHR_debug.put(GL_MAX_DEBUG_MESSAGE_LENGTH_KHR, "GL_MAX_DEBUG_MESSAGE_LENGTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT_SYNCHRONOUS, "GL_DEBUG_OUTPUT_SYNCHRONOUS");
    GL_KHR_debug.put(GL_STACK_OVERFLOW_KHR, "GL_STACK_OVERFLOW_KHR");
    GL_KHR_debug.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    GL_KHR_debug.put(GL_MAX_DEBUG_LOGGED_MESSAGES, "GL_MAX_DEBUG_LOGGED_MESSAGES");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_MEDIUM, "GL_DEBUG_SEVERITY_MEDIUM");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_OTHER_KHR, "GL_DEBUG_SOURCE_OTHER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, "GL_DEBUG_SOURCE_THIRD_PARTY_KHR");
    GL_KHR_debug.put(GL_SAMPLER_KHR, "GL_SAMPLER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_NOTIFICATION, "GL_DEBUG_SEVERITY_NOTIFICATION");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_THIRD_PARTY, "GL_DEBUG_SOURCE_THIRD_PARTY");
    GL_KHR_debug.put(GL_BUFFER_KHR, "GL_BUFFER_KHR");
    GL_KHR_debug.put(GL_SAMPLER, "GL_SAMPLER");
    GL_KHR_debug.put(GL_MAX_LABEL_LENGTH, "GL_MAX_LABEL_LENGTH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_MARKER, "GL_DEBUG_TYPE_MARKER");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_MEDIUM_KHR, "GL_DEBUG_SEVERITY_MEDIUM_KHR");
    GL_KHR_debug.put(GL_DISPLAY_LIST, "GL_DISPLAY_LIST");
    GL_KHR_debug.put(GL_DEBUG_GROUP_STACK_DEPTH, "GL_DEBUG_GROUP_STACK_DEPTH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_POP_GROUP_KHR, "GL_DEBUG_TYPE_POP_GROUP_KHR");
    GL_KHR_debug.put(GL_CONTEXT_FLAG_DEBUG_BIT, "GL_CONTEXT_FLAG_DEBUG_BIT");
    GL_KHR_debug.put(GL_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_DEBUG_GROUP_STACK_DEPTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_LOW, "GL_DEBUG_SEVERITY_LOW");
    GL_KHR_debug.put(GL_STACK_OVERFLOW, "GL_STACK_OVERFLOW");
    GL_KHR_debug.put(GL_QUERY_KHR, "GL_QUERY_KHR");
    GL_KHR_debug.put(GL_QUERY, "GL_QUERY");
    GL_KHR_debug.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PERFORMANCE_KHR, "GL_DEBUG_TYPE_PERFORMANCE_KHR");
    GL_KHR_debug.put(GL_DEBUG_LOGGED_MESSAGES_KHR, "GL_DEBUG_LOGGED_MESSAGES_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_LOW_KHR, "GL_DEBUG_SEVERITY_LOW_KHR");
    GL_KHR_debug.put(GL_MAX_DEBUG_MESSAGE_LENGTH, "GL_MAX_DEBUG_MESSAGE_LENGTH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_OTHER_KHR, "GL_DEBUG_TYPE_OTHER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_HIGH, "GL_DEBUG_SEVERITY_HIGH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR, "GL_DEBUG_SOURCE_SHADER_COMPILER_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PUSH_GROUP_KHR, "GL_DEBUG_TYPE_PUSH_GROUP_KHR");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR, "GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_ERROR, "GL_DEBUG_TYPE_ERROR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_USER_PARAM_KHR, "GL_DEBUG_CALLBACK_USER_PARAM_KHR");
    GL_KHR_debug.put(GL_BUFFER, "GL_BUFFER");
    GL_KHR_debug.put(GL_DEBUG_TYPE_OTHER, "GL_DEBUG_TYPE_OTHER");
    GL_KHR_debug.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_API, "GL_DEBUG_SOURCE_API");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT, "GL_DEBUG_OUTPUT");
    GL_KHR_debug.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_APPLICATION, "GL_DEBUG_SOURCE_APPLICATION");
    GL_KHR_debug.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH, "GL_MAX_DEBUG_GROUP_STACK_DEPTH");
    GL_KHR_debug.put(GL_DEBUG_LOGGED_MESSAGES, "GL_DEBUG_LOGGED_MESSAGES");
    GL_KHR_debug.put(GL_CONTEXT_FLAG_DEBUG_BIT_KHR, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR");
    GL_KHR_debug.put(GL_PROGRAM_PIPELINE_KHR, "GL_PROGRAM_PIPELINE_KHR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_USER_PARAM, "GL_DEBUG_CALLBACK_USER_PARAM");
  }
  private static final Map<Integer, String> GL_ARB_gl_spirv = new HashMap<Integer, String>();
  private static void GL_ARB_gl_spirv() {
    GL_ARB_gl_spirv.put(GL_SPIR_V_BINARY_ARB, "GL_SPIR_V_BINARY_ARB");
    GL_ARB_gl_spirv.put(GL_SHADER_BINARY_FORMAT_SPIR_V_ARB, "GL_SHADER_BINARY_FORMAT_SPIR_V_ARB");
  }
  private static final Map<Integer, String> GL_EXT_texture_filter_anisotropic = new HashMap<Integer, String>();
  private static void GL_EXT_texture_filter_anisotropic() {
    GL_EXT_texture_filter_anisotropic.put(GL_TEXTURE_MAX_ANISOTROPY_EXT, "GL_TEXTURE_MAX_ANISOTROPY_EXT");
    GL_EXT_texture_filter_anisotropic.put(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT");
  }
  private static final Map<Integer, String> GL_NV_vertex_buffer_unified_memory = new HashMap<Integer, String>();
  private static void GL_NV_vertex_buffer_unified_memory() {
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV, "GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_FOG_COORD_ARRAY_ADDRESS_NV, "GL_FOG_COORD_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ARRAY_ADDRESS_NV, "GL_VERTEX_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_INDEX_ARRAY_ADDRESS_NV, "GL_INDEX_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ARRAY_LENGTH_NV, "GL_VERTEX_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV, "GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_DRAW_INDIRECT_ADDRESS_NV, "GL_DRAW_INDIRECT_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_COLOR_ARRAY_ADDRESS_NV, "GL_COLOR_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV, "GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_ELEMENT_ARRAY_ADDRESS_NV, "GL_ELEMENT_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_TEXTURE_COORD_ARRAY_ADDRESS_NV, "GL_TEXTURE_COORD_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_NORMAL_ARRAY_ADDRESS_NV, "GL_NORMAL_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV, "GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_FOG_COORD_ARRAY_LENGTH_NV, "GL_FOG_COORD_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_EDGE_FLAG_ARRAY_LENGTH_NV, "GL_EDGE_FLAG_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_COLOR_ARRAY_LENGTH_NV, "GL_COLOR_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_INDEX_ARRAY_LENGTH_NV, "GL_INDEX_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_ELEMENT_ARRAY_UNIFIED_NV, "GL_ELEMENT_ARRAY_UNIFIED_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_ELEMENT_ARRAY_LENGTH_NV, "GL_ELEMENT_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_NORMAL_ARRAY_LENGTH_NV, "GL_NORMAL_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_TEXTURE_COORD_ARRAY_LENGTH_NV, "GL_TEXTURE_COORD_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_DRAW_INDIRECT_LENGTH_NV, "GL_DRAW_INDIRECT_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_EDGE_FLAG_ARRAY_ADDRESS_NV, "GL_EDGE_FLAG_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_DRAW_INDIRECT_UNIFIED_NV, "GL_DRAW_INDIRECT_UNIFIED_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_SECONDARY_COLOR_ARRAY_LENGTH_NV, "GL_SECONDARY_COLOR_ARRAY_LENGTH_NV");
  }
  private static final Map<Integer, String> GL_ARB_seamless_cube_map = new HashMap<Integer, String>();
  private static void GL_ARB_seamless_cube_map() {
    GL_ARB_seamless_cube_map.put(GL_TEXTURE_CUBE_MAP_SEAMLESS, "GL_TEXTURE_CUBE_MAP_SEAMLESS");
  }
  private static final Map<Integer, String> GL_NV_framebuffer_multisample_coverage = new HashMap<Integer, String>();
  private static void GL_NV_framebuffer_multisample_coverage() {
    GL_NV_framebuffer_multisample_coverage.put(GL_MULTISAMPLE_COVERAGE_MODES_NV, "GL_MULTISAMPLE_COVERAGE_MODES_NV");
    GL_NV_framebuffer_multisample_coverage.put(GL_RENDERBUFFER_COVERAGE_SAMPLES_NV, "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV");
    GL_NV_framebuffer_multisample_coverage.put(GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV, "GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV");
    GL_NV_framebuffer_multisample_coverage.put(GL_RENDERBUFFER_COLOR_SAMPLES_NV, "GL_RENDERBUFFER_COLOR_SAMPLES_NV");
  }
  private static final Map<Integer, String> GL_ARB_gpu_shader5 = new HashMap<Integer, String>();
  private static void GL_ARB_gpu_shader5() {
    GL_ARB_gpu_shader5.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS");
    GL_ARB_gpu_shader5.put(GL_GEOMETRY_SHADER_INVOCATIONS, "GL_GEOMETRY_SHADER_INVOCATIONS");
    GL_ARB_gpu_shader5.put(GL_MIN_FRAGMENT_INTERPOLATION_OFFSET, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET");
    GL_ARB_gpu_shader5.put(GL_MAX_VERTEX_STREAMS, "GL_MAX_VERTEX_STREAMS");
    GL_ARB_gpu_shader5.put(GL_FRAGMENT_INTERPOLATION_OFFSET_BITS, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS");
    GL_ARB_gpu_shader5.put(GL_MAX_FRAGMENT_INTERPOLATION_OFFSET, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET");
  }
  private static final Map<Integer, String> GL_ARB_transform_feedback_overflow_query = new HashMap<Integer, String>();
  private static void GL_ARB_transform_feedback_overflow_query() {
    GL_ARB_transform_feedback_overflow_query.put(GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB, "GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB");
    GL_ARB_transform_feedback_overflow_query.put(GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB, "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB");
  }
  private static final Map<Integer, String> GL_AMD_transform_feedback4 = new HashMap<Integer, String>();
  private static void GL_AMD_transform_feedback4() {
    GL_AMD_transform_feedback4.put(GL_STREAM_RASTERIZATION_AMD, "GL_STREAM_RASTERIZATION_AMD");
  }
  private static final Map<Integer, String> GL_ARB_texture_cube_map_array = new HashMap<Integer, String>();
  private static void GL_ARB_texture_cube_map_array() {
    GL_ARB_texture_cube_map_array.put(GL_TEXTURE_CUBE_MAP_ARRAY_ARB, "GL_TEXTURE_CUBE_MAP_ARRAY_ARB");
    GL_ARB_texture_cube_map_array.put(GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB");
    GL_ARB_texture_cube_map_array.put(GL_SAMPLER_CUBE_MAP_ARRAY_ARB, "GL_SAMPLER_CUBE_MAP_ARRAY_ARB");
    GL_ARB_texture_cube_map_array.put(GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB");
    GL_ARB_texture_cube_map_array.put(GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB, "GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB");
    GL_ARB_texture_cube_map_array.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB");
    GL_ARB_texture_cube_map_array.put(GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB");
  }
  private static final Map<Integer, String> GL_HP_texture_lighting = new HashMap<Integer, String>();
  private static void GL_HP_texture_lighting() {
    GL_HP_texture_lighting.put(GL_TEXTURE_POST_SPECULAR_HP, "GL_TEXTURE_POST_SPECULAR_HP");
    GL_HP_texture_lighting.put(GL_TEXTURE_LIGHTING_MODE_HP, "GL_TEXTURE_LIGHTING_MODE_HP");
    GL_HP_texture_lighting.put(GL_TEXTURE_PRE_SPECULAR_HP, "GL_TEXTURE_PRE_SPECULAR_HP");
  }
  private static final Map<Integer, String> GL_SGIX_vertex_preclip = new HashMap<Integer, String>();
  private static void GL_SGIX_vertex_preclip() {
    GL_SGIX_vertex_preclip.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    GL_SGIX_vertex_preclip.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
  }
  private static final Map<Integer, String> GL_ARB_shader_atomic_counters = new HashMap<Integer, String>();
  private static void GL_ARB_shader_atomic_counters() {
    GL_ARB_shader_atomic_counters.put(GL_MAX_FRAGMENT_ATOMIC_COUNTERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX, "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX");
    GL_ARB_shader_atomic_counters.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS, "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE, "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE");
    GL_ARB_shader_atomic_counters.put(GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_SIZE, "GL_ATOMIC_COUNTER_BUFFER_SIZE");
    GL_ARB_shader_atomic_counters.put(GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS, "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_BINDING, "GL_ATOMIC_COUNTER_BUFFER_BINDING");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_UNSIGNED_INT_ATOMIC_COUNTER, "GL_UNSIGNED_INT_ATOMIC_COUNTER");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_VERTEX_ATOMIC_COUNTERS, "GL_MAX_VERTEX_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE, "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_START, "GL_ATOMIC_COUNTER_BUFFER_START");
    GL_ARB_shader_atomic_counters.put(GL_MAX_COMBINED_ATOMIC_COUNTERS, "GL_MAX_COMBINED_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS");
  }
  private static final Map<Integer, String> GL_ARB_sparse_texture = new HashMap<Integer, String>();
  private static void GL_ARB_sparse_texture() {
    GL_ARB_sparse_texture.put(GL_TEXTURE_SPARSE_ARB, "GL_TEXTURE_SPARSE_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Z_ARB, "GL_VIRTUAL_PAGE_SIZE_Z_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_INDEX_ARB, "GL_VIRTUAL_PAGE_SIZE_INDEX_ARB");
    GL_ARB_sparse_texture.put(GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB, "GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB");
    GL_ARB_sparse_texture.put(GL_NUM_VIRTUAL_PAGE_SIZES_ARB, "GL_NUM_VIRTUAL_PAGE_SIZES_ARB");
    GL_ARB_sparse_texture.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB");
    GL_ARB_sparse_texture.put(GL_NUM_SPARSE_LEVELS_ARB, "GL_NUM_SPARSE_LEVELS_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_X_ARB, "GL_VIRTUAL_PAGE_SIZE_X_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Y_ARB, "GL_VIRTUAL_PAGE_SIZE_Y_ARB");
    GL_ARB_sparse_texture.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB");
    GL_ARB_sparse_texture.put(GL_MAX_SPARSE_TEXTURE_SIZE_ARB, "GL_MAX_SPARSE_TEXTURE_SIZE_ARB");
  }
  private static final Map<Integer, String> GL_EXT_texture = new HashMap<Integer, String>();
  private static void GL_EXT_texture() {
    GL_EXT_texture.put(GL_LUMINANCE4_EXT, "GL_LUMINANCE4_EXT");
    GL_EXT_texture.put(GL_INTENSITY8_EXT, "GL_INTENSITY8_EXT");
    GL_EXT_texture.put(GL_RGB4_EXT, "GL_RGB4_EXT");
    GL_EXT_texture.put(GL_TEXTURE_GREEN_SIZE_EXT, "GL_TEXTURE_GREEN_SIZE_EXT");
    GL_EXT_texture.put(GL_TEXTURE_RED_SIZE_EXT, "GL_TEXTURE_RED_SIZE_EXT");
    GL_EXT_texture.put(GL_TEXTURE_ALPHA_SIZE_EXT, "GL_TEXTURE_ALPHA_SIZE_EXT");
    GL_EXT_texture.put(GL_PROXY_TEXTURE_2D_EXT, "GL_PROXY_TEXTURE_2D_EXT");
    GL_EXT_texture.put(GL_LUMINANCE12_ALPHA12_EXT, "GL_LUMINANCE12_ALPHA12_EXT");
    GL_EXT_texture.put(GL_RGBA16_EXT, "GL_RGBA16_EXT");
    GL_EXT_texture.put(GL_LUMINANCE8_EXT, "GL_LUMINANCE8_EXT");
    GL_EXT_texture.put(GL_LUMINANCE6_ALPHA2_EXT, "GL_LUMINANCE6_ALPHA2_EXT");
    GL_EXT_texture.put(GL_RGB5_EXT, "GL_RGB5_EXT");
    GL_EXT_texture.put(GL_LUMINANCE16_ALPHA16_EXT, "GL_LUMINANCE16_ALPHA16_EXT");
    GL_EXT_texture.put(GL_TEXTURE_BLUE_SIZE_EXT, "GL_TEXTURE_BLUE_SIZE_EXT");
    GL_EXT_texture.put(GL_RGB12_EXT, "GL_RGB12_EXT");
    GL_EXT_texture.put(GL_INTENSITY16_EXT, "GL_INTENSITY16_EXT");
    GL_EXT_texture.put(GL_RGBA2_EXT, "GL_RGBA2_EXT");
    GL_EXT_texture.put(GL_REPLACE_EXT, "GL_REPLACE_EXT");
    GL_EXT_texture.put(GL_RGB16_EXT, "GL_RGB16_EXT");
    GL_EXT_texture.put(GL_INTENSITY_EXT, "GL_INTENSITY_EXT");
    GL_EXT_texture.put(GL_INTENSITY12_EXT, "GL_INTENSITY12_EXT");
    GL_EXT_texture.put(GL_RGB5_A1_EXT, "GL_RGB5_A1_EXT");
    GL_EXT_texture.put(GL_TEXTURE_INTENSITY_SIZE_EXT, "GL_TEXTURE_INTENSITY_SIZE_EXT");
    GL_EXT_texture.put(GL_LUMINANCE4_ALPHA4_EXT, "GL_LUMINANCE4_ALPHA4_EXT");
    GL_EXT_texture.put(GL_ALPHA8_EXT, "GL_ALPHA8_EXT");
    GL_EXT_texture.put(GL_LUMINANCE8_ALPHA8_EXT, "GL_LUMINANCE8_ALPHA8_EXT");
    GL_EXT_texture.put(GL_TEXTURE_LUMINANCE_SIZE_EXT, "GL_TEXTURE_LUMINANCE_SIZE_EXT");
    GL_EXT_texture.put(GL_RGB2_EXT, "GL_RGB2_EXT");
    GL_EXT_texture.put(GL_RGB10_EXT, "GL_RGB10_EXT");
    GL_EXT_texture.put(GL_ALPHA16_EXT, "GL_ALPHA16_EXT");
    GL_EXT_texture.put(GL_ALPHA4_EXT, "GL_ALPHA4_EXT");
    GL_EXT_texture.put(GL_ALPHA12_EXT, "GL_ALPHA12_EXT");
    GL_EXT_texture.put(GL_RGB10_A2_EXT, "GL_RGB10_A2_EXT");
    GL_EXT_texture.put(GL_TEXTURE_TOO_LARGE_EXT, "GL_TEXTURE_TOO_LARGE_EXT");
    GL_EXT_texture.put(GL_LUMINANCE16_EXT, "GL_LUMINANCE16_EXT");
    GL_EXT_texture.put(GL_RGBA4_EXT, "GL_RGBA4_EXT");
    GL_EXT_texture.put(GL_RGBA12_EXT, "GL_RGBA12_EXT");
    GL_EXT_texture.put(GL_LUMINANCE12_EXT, "GL_LUMINANCE12_EXT");
    GL_EXT_texture.put(GL_LUMINANCE12_ALPHA4_EXT, "GL_LUMINANCE12_ALPHA4_EXT");
    GL_EXT_texture.put(GL_INTENSITY4_EXT, "GL_INTENSITY4_EXT");
    GL_EXT_texture.put(GL_PROXY_TEXTURE_1D_EXT, "GL_PROXY_TEXTURE_1D_EXT");
    GL_EXT_texture.put(GL_RGB8_EXT, "GL_RGB8_EXT");
    GL_EXT_texture.put(GL_RGBA8_EXT, "GL_RGBA8_EXT");
  }
  private static final Map<Integer, String> GL_ARB_multisample = new HashMap<Integer, String>();
  private static void GL_ARB_multisample() {
    GL_ARB_multisample.put(GL_SAMPLE_COVERAGE_VALUE_ARB, "GL_SAMPLE_COVERAGE_VALUE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_ALPHA_TO_ONE_ARB, "GL_SAMPLE_ALPHA_TO_ONE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_COVERAGE_ARB, "GL_SAMPLE_COVERAGE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_COVERAGE_INVERT_ARB, "GL_SAMPLE_COVERAGE_INVERT_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_BUFFERS_ARB, "GL_SAMPLE_BUFFERS_ARB");
    GL_ARB_multisample.put(GL_SAMPLES_ARB, "GL_SAMPLES_ARB");
    GL_ARB_multisample.put(GL_MULTISAMPLE_BIT_ARB, "GL_MULTISAMPLE_BIT_ARB");
    GL_ARB_multisample.put(GL_MULTISAMPLE_ARB, "GL_MULTISAMPLE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_ALPHA_TO_COVERAGE_ARB, "GL_SAMPLE_ALPHA_TO_COVERAGE_ARB");
  }
  private static final Map<Integer, String> GL_QCOM_extended_get = new HashMap<Integer, String>();
  private static void GL_QCOM_extended_get() {
    GL_QCOM_extended_get.put(GL_TEXTURE_TARGET_QCOM, "GL_TEXTURE_TARGET_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_TYPE_QCOM, "GL_TEXTURE_TYPE_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_HEIGHT_QCOM, "GL_TEXTURE_HEIGHT_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_IMAGE_VALID_QCOM, "GL_TEXTURE_IMAGE_VALID_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_OBJECT_VALID_QCOM, "GL_TEXTURE_OBJECT_VALID_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_DEPTH_QCOM, "GL_TEXTURE_DEPTH_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_INTERNAL_FORMAT_QCOM, "GL_TEXTURE_INTERNAL_FORMAT_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_FORMAT_QCOM, "GL_TEXTURE_FORMAT_QCOM");
    GL_QCOM_extended_get.put(GL_STATE_RESTORE, "GL_STATE_RESTORE");
    GL_QCOM_extended_get.put(GL_TEXTURE_WIDTH_QCOM, "GL_TEXTURE_WIDTH_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_NUM_LEVELS_QCOM, "GL_TEXTURE_NUM_LEVELS_QCOM");
  }
  private static final Map<Integer, String> GL_ARB_texture_compression = new HashMap<Integer, String>();
  private static void GL_ARB_texture_compression() {
    GL_ARB_texture_compression.put(GL_COMPRESSED_INTENSITY_ARB, "GL_COMPRESSED_INTENSITY_ARB");
    GL_ARB_texture_compression.put(GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_ALPHA_ARB, "GL_COMPRESSED_ALPHA_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_LUMINANCE_ALPHA_ARB, "GL_COMPRESSED_LUMINANCE_ALPHA_ARB");
    GL_ARB_texture_compression.put(GL_TEXTURE_COMPRESSION_HINT_ARB, "GL_TEXTURE_COMPRESSION_HINT_ARB");
    GL_ARB_texture_compression.put(GL_TEXTURE_COMPRESSED_ARB, "GL_TEXTURE_COMPRESSED_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_RGBA_ARB, "GL_COMPRESSED_RGBA_ARB");
    GL_ARB_texture_compression.put(GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB, "GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_LUMINANCE_ARB, "GL_COMPRESSED_LUMINANCE_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_RGB_ARB, "GL_COMPRESSED_RGB_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_TEXTURE_FORMATS_ARB, "GL_COMPRESSED_TEXTURE_FORMATS_ARB");
  }
  private static final Map<Integer, String> GL_ARB_pixel_buffer_object = new HashMap<Integer, String>();
  private static void GL_ARB_pixel_buffer_object() {
    GL_ARB_pixel_buffer_object.put(GL_PIXEL_UNPACK_BUFFER_ARB, "GL_PIXEL_UNPACK_BUFFER_ARB");
    GL_ARB_pixel_buffer_object.put(GL_PIXEL_PACK_BUFFER_ARB, "GL_PIXEL_PACK_BUFFER_ARB");
    GL_ARB_pixel_buffer_object.put(GL_PIXEL_PACK_BUFFER_BINDING_ARB, "GL_PIXEL_PACK_BUFFER_BINDING_ARB");
    GL_ARB_pixel_buffer_object.put(GL_PIXEL_UNPACK_BUFFER_BINDING_ARB, "GL_PIXEL_UNPACK_BUFFER_BINDING_ARB");
  }
  private static final Map<Integer, String> GL_OML_subsample = new HashMap<Integer, String>();
  private static void GL_OML_subsample() {
    GL_OML_subsample.put(GL_FORMAT_SUBSAMPLE_244_244_OML, "GL_FORMAT_SUBSAMPLE_244_244_OML");
    GL_OML_subsample.put(GL_FORMAT_SUBSAMPLE_24_24_OML, "GL_FORMAT_SUBSAMPLE_24_24_OML");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_astc_decode_mode = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_astc_decode_mode() {
    GL_EXT_texture_compression_astc_decode_mode.put(GL_TEXTURE_ASTC_DECODE_PRECISION_EXT, "GL_TEXTURE_ASTC_DECODE_PRECISION_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_object_purgeable = new HashMap<Integer, String>();
  private static void GL_APPLE_object_purgeable() {
    GL_APPLE_object_purgeable.put(GL_VOLATILE_APPLE, "GL_VOLATILE_APPLE");
    GL_APPLE_object_purgeable.put(GL_PURGEABLE_APPLE, "GL_PURGEABLE_APPLE");
    GL_APPLE_object_purgeable.put(GL_RELEASED_APPLE, "GL_RELEASED_APPLE");
    GL_APPLE_object_purgeable.put(GL_UNDEFINED_APPLE, "GL_UNDEFINED_APPLE");
    GL_APPLE_object_purgeable.put(GL_BUFFER_OBJECT_APPLE, "GL_BUFFER_OBJECT_APPLE");
    GL_APPLE_object_purgeable.put(GL_RETAINED_APPLE, "GL_RETAINED_APPLE");
  }
  private static final Map<Integer, String> GL_EXT_sparse_texture = new HashMap<Integer, String>();
  private static void GL_EXT_sparse_texture() {
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Z_EXT, "GL_VIRTUAL_PAGE_SIZE_Z_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_CUBE_MAP_ARRAY_OES, "GL_TEXTURE_CUBE_MAP_ARRAY_OES");
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Y_EXT, "GL_VIRTUAL_PAGE_SIZE_Y_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    GL_EXT_sparse_texture.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    GL_EXT_sparse_texture.put(GL_TEXTURE_SPARSE_EXT, "GL_TEXTURE_SPARSE_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_INDEX_EXT, "GL_VIRTUAL_PAGE_SIZE_INDEX_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    GL_EXT_sparse_texture.put(GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT, "GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT");
    GL_EXT_sparse_texture.put(GL_NUM_VIRTUAL_PAGE_SIZES_EXT, "GL_NUM_VIRTUAL_PAGE_SIZES_EXT");
    GL_EXT_sparse_texture.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT");
    GL_EXT_sparse_texture.put(GL_NUM_SPARSE_LEVELS_EXT, "GL_NUM_SPARSE_LEVELS_EXT");
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_X_EXT, "GL_VIRTUAL_PAGE_SIZE_X_EXT");
    GL_EXT_sparse_texture.put(GL_MAX_SPARSE_TEXTURE_SIZE_EXT, "GL_MAX_SPARSE_TEXTURE_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_array = new HashMap<Integer, String>();
  private static void GL_EXT_texture_array() {
    GL_EXT_texture_array.put(GL_PROXY_TEXTURE_2D_ARRAY_EXT, "GL_PROXY_TEXTURE_2D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_1D_ARRAY_EXT, "GL_TEXTURE_1D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_2D_ARRAY_EXT, "GL_TEXTURE_2D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_PROXY_TEXTURE_1D_ARRAY_EXT, "GL_PROXY_TEXTURE_1D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_EXT_texture_array.put(GL_MAX_ARRAY_TEXTURE_LAYERS_EXT, "GL_MAX_ARRAY_TEXTURE_LAYERS_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_BINDING_1D_ARRAY_EXT, "GL_TEXTURE_BINDING_1D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_BINDING_2D_ARRAY_EXT, "GL_TEXTURE_BINDING_2D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT, "GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_texture_integer = new HashMap<Integer, String>();
  private static void GL_EXT_texture_integer() {
    GL_EXT_texture_integer.put(GL_RGB8UI_EXT, "GL_RGB8UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE16UI_EXT, "GL_LUMINANCE16UI_EXT");
    GL_EXT_texture_integer.put(GL_RGB8I_EXT, "GL_RGB8I_EXT");
    GL_EXT_texture_integer.put(GL_INTENSITY8UI_EXT, "GL_INTENSITY8UI_EXT");
    GL_EXT_texture_integer.put(GL_RGBA32UI_EXT, "GL_RGBA32UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE8UI_EXT, "GL_LUMINANCE8UI_EXT");
    GL_EXT_texture_integer.put(GL_INTENSITY32I_EXT, "GL_INTENSITY32I_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA16I_EXT, "GL_LUMINANCE_ALPHA16I_EXT");
    GL_EXT_texture_integer.put(GL_RGB16UI_EXT, "GL_RGB16UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA16UI_EXT, "GL_LUMINANCE_ALPHA16UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA8I_EXT, "GL_LUMINANCE_ALPHA8I_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA16UI_EXT, "GL_ALPHA16UI_EXT");
    GL_EXT_texture_integer.put(GL_INTENSITY16I_EXT, "GL_INTENSITY16I_EXT");
    GL_EXT_texture_integer.put(GL_GREEN_INTEGER_EXT, "GL_GREEN_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA_INTEGER_EXT, "GL_LUMINANCE_ALPHA_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_RGBA16UI_EXT, "GL_RGBA16UI_EXT");
    GL_EXT_texture_integer.put(GL_RGBA16I_EXT, "GL_RGBA16I_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE32UI_EXT, "GL_LUMINANCE32UI_EXT");
    GL_EXT_texture_integer.put(GL_RGBA8I_EXT, "GL_RGBA8I_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA8I_EXT, "GL_ALPHA8I_EXT");
    GL_EXT_texture_integer.put(GL_RGBA32I_EXT, "GL_RGBA32I_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE8I_EXT, "GL_LUMINANCE8I_EXT");
    GL_EXT_texture_integer.put(GL_INTENSITY32UI_EXT, "GL_INTENSITY32UI_EXT");
    GL_EXT_texture_integer.put(GL_RGBA8UI_EXT, "GL_RGBA8UI_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA8UI_EXT, "GL_ALPHA8UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE16I_EXT, "GL_LUMINANCE16I_EXT");
    GL_EXT_texture_integer.put(GL_RGB32UI_EXT, "GL_RGB32UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_INTEGER_EXT, "GL_LUMINANCE_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_RGBA_INTEGER_MODE_EXT, "GL_RGBA_INTEGER_MODE_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA8UI_EXT, "GL_LUMINANCE_ALPHA8UI_EXT");
    GL_EXT_texture_integer.put(GL_RED_INTEGER_EXT, "GL_RED_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_BLUE_INTEGER_EXT, "GL_BLUE_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA32UI_EXT, "GL_LUMINANCE_ALPHA32UI_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA32UI_EXT, "GL_ALPHA32UI_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE32I_EXT, "GL_LUMINANCE32I_EXT");
    GL_EXT_texture_integer.put(GL_LUMINANCE_ALPHA32I_EXT, "GL_LUMINANCE_ALPHA32I_EXT");
    GL_EXT_texture_integer.put(GL_INTENSITY8I_EXT, "GL_INTENSITY8I_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA_INTEGER_EXT, "GL_ALPHA_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_BGR_INTEGER_EXT, "GL_BGR_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_RGB32I_EXT, "GL_RGB32I_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA32I_EXT, "GL_ALPHA32I_EXT");
    GL_EXT_texture_integer.put(GL_ALPHA16I_EXT, "GL_ALPHA16I_EXT");
    GL_EXT_texture_integer.put(GL_RGB16I_EXT, "GL_RGB16I_EXT");
    GL_EXT_texture_integer.put(GL_INTENSITY16UI_EXT, "GL_INTENSITY16UI_EXT");
    GL_EXT_texture_integer.put(GL_RGB_INTEGER_EXT, "GL_RGB_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_RGBA_INTEGER_EXT, "GL_RGBA_INTEGER_EXT");
    GL_EXT_texture_integer.put(GL_BGRA_INTEGER_EXT, "GL_BGRA_INTEGER_EXT");
  }
  private static final Map<Integer, String> GL_NV_texture_border_clamp = new HashMap<Integer, String>();
  private static void GL_NV_texture_border_clamp() {
    GL_NV_texture_border_clamp.put(GL_TEXTURE_BORDER_COLOR_NV, "GL_TEXTURE_BORDER_COLOR_NV");
    GL_NV_texture_border_clamp.put(GL_CLAMP_TO_BORDER_NV, "GL_CLAMP_TO_BORDER_NV");
  }
  private static final Map<Integer, String> GL_ARB_vertex_blend = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_blend() {
    GL_ARB_vertex_blend.put(GL_MODELVIEW16_ARB, "GL_MODELVIEW16_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW11_ARB, "GL_MODELVIEW11_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW8_ARB, "GL_MODELVIEW8_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW29_ARB, "GL_MODELVIEW29_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_POINTER_ARB, "GL_WEIGHT_ARRAY_POINTER_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW24_ARB, "GL_MODELVIEW24_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW4_ARB, "GL_MODELVIEW4_ARB");
    GL_ARB_vertex_blend.put(GL_MAX_VERTEX_UNITS_ARB, "GL_MAX_VERTEX_UNITS_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW20_ARB, "GL_MODELVIEW20_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW2_ARB, "GL_MODELVIEW2_ARB");
    GL_ARB_vertex_blend.put(GL_ACTIVE_VERTEX_UNITS_ARB, "GL_ACTIVE_VERTEX_UNITS_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW7_ARB, "GL_MODELVIEW7_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_SUM_UNITY_ARB, "GL_WEIGHT_SUM_UNITY_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW12_ARB, "GL_MODELVIEW12_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW17_ARB, "GL_MODELVIEW17_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW26_ARB, "GL_MODELVIEW26_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW25_ARB, "GL_MODELVIEW25_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW21_ARB, "GL_MODELVIEW21_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_ARB, "GL_WEIGHT_ARRAY_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW3_ARB, "GL_MODELVIEW3_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW22_ARB, "GL_MODELVIEW22_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW30_ARB, "GL_MODELVIEW30_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW27_ARB, "GL_MODELVIEW27_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_STRIDE_ARB, "GL_WEIGHT_ARRAY_STRIDE_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_SIZE_ARB, "GL_WEIGHT_ARRAY_SIZE_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW14_ARB, "GL_MODELVIEW14_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW13_ARB, "GL_MODELVIEW13_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_TYPE_ARB, "GL_WEIGHT_ARRAY_TYPE_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW0_ARB, "GL_MODELVIEW0_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW18_ARB, "GL_MODELVIEW18_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW31_ARB, "GL_MODELVIEW31_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW6_ARB, "GL_MODELVIEW6_ARB");
    GL_ARB_vertex_blend.put(GL_CURRENT_WEIGHT_ARB, "GL_CURRENT_WEIGHT_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW28_ARB, "GL_MODELVIEW28_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW23_ARB, "GL_MODELVIEW23_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW10_ARB, "GL_MODELVIEW10_ARB");
    GL_ARB_vertex_blend.put(GL_VERTEX_BLEND_ARB, "GL_VERTEX_BLEND_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW9_ARB, "GL_MODELVIEW9_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW15_ARB, "GL_MODELVIEW15_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW5_ARB, "GL_MODELVIEW5_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW19_ARB, "GL_MODELVIEW19_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW1_ARB, "GL_MODELVIEW1_ARB");
  }
  private static final Map<Integer, String> GL_IMG_texture_compression_pvrtc = new HashMap<Integer, String>();
  private static void GL_IMG_texture_compression_pvrtc() {
    GL_IMG_texture_compression_pvrtc.put(GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG, "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG");
    GL_IMG_texture_compression_pvrtc.put(GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG, "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG");
    GL_IMG_texture_compression_pvrtc.put(GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG");
    GL_IMG_texture_compression_pvrtc.put(GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG, "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG");
  }
  private static final Map<Integer, String> GL_ARB_indirect_parameters = new HashMap<Integer, String>();
  private static void GL_ARB_indirect_parameters() {
    GL_ARB_indirect_parameters.put(GL_PARAMETER_BUFFER_BINDING_ARB, "GL_PARAMETER_BUFFER_BINDING_ARB");
    GL_ARB_indirect_parameters.put(GL_PARAMETER_BUFFER_ARB, "GL_PARAMETER_BUFFER_ARB");
  }
  private static final Map<Integer, String> GL_EXT_texture_env_dot3 = new HashMap<Integer, String>();
  private static void GL_EXT_texture_env_dot3() {
    GL_EXT_texture_env_dot3.put(GL_DOT3_RGBA_EXT, "GL_DOT3_RGBA_EXT");
    GL_EXT_texture_env_dot3.put(GL_DOT3_RGB_EXT, "GL_DOT3_RGB_EXT");
  }
  private static final Map<Integer, String> GL_EXT_blend_equation_separate = new HashMap<Integer, String>();
  private static void GL_EXT_blend_equation_separate() {
    GL_EXT_blend_equation_separate.put(GL_BLEND_EQUATION_ALPHA_EXT, "GL_BLEND_EQUATION_ALPHA_EXT");
    GL_EXT_blend_equation_separate.put(GL_BLEND_EQUATION_RGB_EXT, "GL_BLEND_EQUATION_RGB_EXT");
  }
  private static final Map<Integer, String> GL_ARB_spirv_extensions = new HashMap<Integer, String>();
  private static void GL_ARB_spirv_extensions() {
    GL_ARB_spirv_extensions.put(GL_NUM_SPIR_V_EXTENSIONS, "GL_NUM_SPIR_V_EXTENSIONS");
    GL_ARB_spirv_extensions.put(GL_SPIR_V_EXTENSIONS, "GL_SPIR_V_EXTENSIONS");
  }
  private static final Map<Integer, String> GL_EXT_framebuffer_blit = new HashMap<Integer, String>();
  private static void GL_EXT_framebuffer_blit() {
    GL_EXT_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_EXT, "GL_DRAW_FRAMEBUFFER_EXT");
    GL_EXT_framebuffer_blit.put(GL_READ_FRAMEBUFFER_EXT, "GL_READ_FRAMEBUFFER_EXT");
    GL_EXT_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_BINDING_EXT, "GL_DRAW_FRAMEBUFFER_BINDING_EXT");
    GL_EXT_framebuffer_blit.put(GL_READ_FRAMEBUFFER_BINDING_EXT, "GL_READ_FRAMEBUFFER_BINDING_EXT");
  }
  private static final Map<Integer, String> GL_EXT_gpu_shader4 = new HashMap<Integer, String>();
  private static void GL_EXT_gpu_shader4() {
    GL_EXT_gpu_shader4.put(GL_SAMPLER_1D_ARRAY_EXT, "GL_SAMPLER_1D_ARRAY_EXT");
    GL_EXT_gpu_shader4.put(GL_SAMPLER_BUFFER_EXT, "GL_SAMPLER_BUFFER_EXT");
    GL_EXT_gpu_shader4.put(GL_SAMPLER_1D_ARRAY_SHADOW_EXT, "GL_SAMPLER_1D_ARRAY_SHADOW_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_2D_EXT, "GL_UNSIGNED_INT_SAMPLER_2D_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_2D_ARRAY_EXT, "GL_INT_SAMPLER_2D_ARRAY_EXT");
    GL_EXT_gpu_shader4.put(GL_MAX_PROGRAM_TEXEL_OFFSET_EXT, "GL_MAX_PROGRAM_TEXEL_OFFSET_EXT");
    GL_EXT_gpu_shader4.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_1D_ARRAY_EXT, "GL_INT_SAMPLER_1D_ARRAY_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_VEC2_EXT, "GL_UNSIGNED_INT_VEC2_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_3D_EXT, "GL_UNSIGNED_INT_SAMPLER_3D_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_3D_EXT, "GL_INT_SAMPLER_3D_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_2D_EXT, "GL_INT_SAMPLER_2D_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_CUBE_EXT, "GL_INT_SAMPLER_CUBE_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_1D_EXT, "GL_UNSIGNED_INT_SAMPLER_1D_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_gpu_shader4.put(GL_SAMPLER_2D_ARRAY_EXT, "GL_SAMPLER_2D_ARRAY_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_VEC3_EXT, "GL_UNSIGNED_INT_VEC3_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_2D_RECT_EXT, "GL_INT_SAMPLER_2D_RECT_EXT");
    GL_EXT_gpu_shader4.put(GL_MIN_PROGRAM_TEXEL_OFFSET_EXT, "GL_MIN_PROGRAM_TEXEL_OFFSET_EXT");
    GL_EXT_gpu_shader4.put(GL_SAMPLER_2D_ARRAY_SHADOW_EXT, "GL_SAMPLER_2D_ARRAY_SHADOW_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_1D_EXT, "GL_INT_SAMPLER_1D_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_VEC4_EXT, "GL_UNSIGNED_INT_VEC4_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_CUBE_EXT, "GL_UNSIGNED_INT_SAMPLER_CUBE_EXT");
    GL_EXT_gpu_shader4.put(GL_SAMPLER_CUBE_SHADOW_EXT, "GL_SAMPLER_CUBE_SHADOW_EXT");
    GL_EXT_gpu_shader4.put(GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT, "GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT");
    GL_EXT_gpu_shader4.put(GL_INT_SAMPLER_BUFFER_EXT, "GL_INT_SAMPLER_BUFFER_EXT");
  }
  private static final Map<Integer, String> GL_ARB_vertex_shader = new HashMap<Integer, String>();
  private static void GL_ARB_vertex_shader() {
    GL_ARB_vertex_shader.put(GL_MAX_VARYING_FLOATS_ARB, "GL_MAX_VARYING_FLOATS_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_PROGRAM_TWO_SIDE_ARB, "GL_VERTEX_PROGRAM_TWO_SIDE_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT, "GL_FLOAT");
    GL_ARB_vertex_shader.put(GL_CURRENT_VERTEX_ATTRIB_ARB, "GL_CURRENT_VERTEX_ATTRIB_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB, "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB, "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_shader.put(GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB, "GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_VEC2_ARB, "GL_FLOAT_VEC2_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_MAT2_ARB, "GL_FLOAT_MAT2_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_PROGRAM_POINT_SIZE_ARB, "GL_VERTEX_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB, "GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_SHADER_ARB, "GL_VERTEX_SHADER_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB, "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_VERTEX_ATTRIBS_ARB, "GL_MAX_VERTEX_ATTRIBS_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_TEXTURE_COORDS_ARB, "GL_MAX_TEXTURE_COORDS_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_MAT3_ARB, "GL_FLOAT_MAT3_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_VEC3_ARB, "GL_FLOAT_VEC3_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_MAT4_ARB, "GL_FLOAT_MAT4_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_VEC4_ARB, "GL_FLOAT_VEC4_ARB");
    GL_ARB_vertex_shader.put(GL_OBJECT_ACTIVE_ATTRIBUTES_ARB, "GL_OBJECT_ACTIVE_ATTRIBUTES_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB, "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB");
  }
  private static final Map<Integer, String> GL_KHR_parallel_shader_compile = new HashMap<Integer, String>();
  private static void GL_KHR_parallel_shader_compile() {
    GL_KHR_parallel_shader_compile.put(GL_COMPLETION_STATUS_KHR, "GL_COMPLETION_STATUS_KHR");
    GL_KHR_parallel_shader_compile.put(GL_MAX_SHADER_COMPILER_THREADS_KHR, "GL_MAX_SHADER_COMPILER_THREADS_KHR");
  }
  private static final Map<Integer, String> GL_ARB_stencil_texturing = new HashMap<Integer, String>();
  private static void GL_ARB_stencil_texturing() {
    GL_ARB_stencil_texturing.put(GL_DEPTH_STENCIL_TEXTURE_MODE, "GL_DEPTH_STENCIL_TEXTURE_MODE");
  }
  private static final Map<Integer, String> GL_NV_polygon_mode = new HashMap<Integer, String>();
  private static void GL_NV_polygon_mode() {
    GL_NV_polygon_mode.put(GL_POLYGON_OFFSET_POINT_NV, "GL_POLYGON_OFFSET_POINT_NV");
    GL_NV_polygon_mode.put(GL_POLYGON_MODE_NV, "GL_POLYGON_MODE_NV");
    GL_NV_polygon_mode.put(GL_POLYGON_OFFSET_LINE_NV, "GL_POLYGON_OFFSET_LINE_NV");
    GL_NV_polygon_mode.put(GL_FILL_NV, "GL_FILL_NV");
    GL_NV_polygon_mode.put(GL_POINT_NV, "GL_POINT_NV");
    GL_NV_polygon_mode.put(GL_LINE_NV, "GL_LINE_NV");
  }
  private static final Map<Integer, String> GL_APPLE_client_storage = new HashMap<Integer, String>();
  private static void GL_APPLE_client_storage() {
    GL_APPLE_client_storage.put(GL_UNPACK_CLIENT_STORAGE_APPLE, "GL_UNPACK_CLIENT_STORAGE_APPLE");
  }
  private static final Map<Integer, String> GL_ARB_ES3_2_compatibility = new HashMap<Integer, String>();
  private static void GL_ARB_ES3_2_compatibility() {
    GL_ARB_ES3_2_compatibility.put(GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB, "GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB");
    GL_ARB_ES3_2_compatibility.put(GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB, "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB");
    GL_ARB_ES3_2_compatibility.put(GL_PRIMITIVE_BOUNDING_BOX_ARB, "GL_PRIMITIVE_BOUNDING_BOX_ARB");
  }
  private static final Map<Integer, String> GL_EXT_texture_sRGB = new HashMap<Integer, String>();
  private static void GL_EXT_texture_sRGB() {
    GL_EXT_texture_sRGB.put(GL_SRGB_EXT, "GL_SRGB_EXT");
    GL_EXT_texture_sRGB.put(GL_SRGB8_ALPHA8_EXT, "GL_SRGB8_ALPHA8_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SRGB_S3TC_DXT1_EXT, "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT");
    GL_EXT_texture_sRGB.put(GL_SLUMINANCE_ALPHA_EXT, "GL_SLUMINANCE_ALPHA_EXT");
    GL_EXT_texture_sRGB.put(GL_SRGB_ALPHA_EXT, "GL_SRGB_ALPHA_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT");
    GL_EXT_texture_sRGB.put(GL_SRGB8_EXT, "GL_SRGB8_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT");
    GL_EXT_texture_sRGB.put(GL_SLUMINANCE_EXT, "GL_SLUMINANCE_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SLUMINANCE_EXT, "GL_COMPRESSED_SLUMINANCE_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SLUMINANCE_ALPHA_EXT, "GL_COMPRESSED_SLUMINANCE_ALPHA_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT");
    GL_EXT_texture_sRGB.put(GL_SLUMINANCE8_ALPHA8_EXT, "GL_SLUMINANCE8_ALPHA8_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SRGB_ALPHA_EXT, "GL_COMPRESSED_SRGB_ALPHA_EXT");
    GL_EXT_texture_sRGB.put(GL_COMPRESSED_SRGB_EXT, "GL_COMPRESSED_SRGB_EXT");
    GL_EXT_texture_sRGB.put(GL_SLUMINANCE8_EXT, "GL_SLUMINANCE8_EXT");
  }
  private static final Map<Integer, String> GL_OES_texture_view = new HashMap<Integer, String>();
  private static void GL_OES_texture_view() {
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_MIN_LAYER_OES, "GL_TEXTURE_VIEW_MIN_LAYER_OES");
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_NUM_LAYERS_OES, "GL_TEXTURE_VIEW_NUM_LAYERS_OES");
    GL_OES_texture_view.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_NUM_LEVELS_OES, "GL_TEXTURE_VIEW_NUM_LEVELS_OES");
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_MIN_LEVEL_OES, "GL_TEXTURE_VIEW_MIN_LEVEL_OES");
  }
  private static final Map<Integer, String> GL_EXT_convolution = new HashMap<Integer, String>();
  private static void GL_EXT_convolution() {
    GL_EXT_convolution.put(GL_CONVOLUTION_FORMAT_EXT, "GL_CONVOLUTION_FORMAT_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_GREEN_BIAS_EXT, "GL_POST_CONVOLUTION_GREEN_BIAS_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_1D_EXT, "GL_CONVOLUTION_1D_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_RED_SCALE_EXT, "GL_POST_CONVOLUTION_RED_SCALE_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_HEIGHT_EXT, "GL_CONVOLUTION_HEIGHT_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_FILTER_SCALE_EXT, "GL_CONVOLUTION_FILTER_SCALE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_ALPHA_SCALE_EXT, "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_BORDER_MODE_EXT, "GL_CONVOLUTION_BORDER_MODE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_GREEN_SCALE_EXT, "GL_POST_CONVOLUTION_GREEN_SCALE_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_FILTER_BIAS_EXT, "GL_CONVOLUTION_FILTER_BIAS_EXT");
    GL_EXT_convolution.put(GL_MAX_CONVOLUTION_WIDTH_EXT, "GL_MAX_CONVOLUTION_WIDTH_EXT");
    GL_EXT_convolution.put(GL_SEPARABLE_2D_EXT, "GL_SEPARABLE_2D_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_BLUE_BIAS_EXT, "GL_POST_CONVOLUTION_BLUE_BIAS_EXT");
    GL_EXT_convolution.put(GL_MAX_CONVOLUTION_HEIGHT_EXT, "GL_MAX_CONVOLUTION_HEIGHT_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_WIDTH_EXT, "GL_CONVOLUTION_WIDTH_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_ALPHA_BIAS_EXT, "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT");
    GL_EXT_convolution.put(GL_REDUCE_EXT, "GL_REDUCE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_BLUE_SCALE_EXT, "GL_POST_CONVOLUTION_BLUE_SCALE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_RED_BIAS_EXT, "GL_POST_CONVOLUTION_RED_BIAS_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_2D_EXT, "GL_CONVOLUTION_2D_EXT");
  }
  private static final Map<Integer, String> GL_ANGLE_instanced_arrays = new HashMap<Integer, String>();
  private static void GL_ANGLE_instanced_arrays() {
    GL_ANGLE_instanced_arrays.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE");
  }
  private static final Map<Integer, String> GL_EXT_shader_pixel_local_storage = new HashMap<Integer, String>();
  private static void GL_EXT_shader_pixel_local_storage() {
    GL_EXT_shader_pixel_local_storage.put(GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT, "GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT");
    GL_EXT_shader_pixel_local_storage.put(GL_SHADER_PIXEL_LOCAL_STORAGE_EXT, "GL_SHADER_PIXEL_LOCAL_STORAGE_EXT");
    GL_EXT_shader_pixel_local_storage.put(GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT, "GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT");
  }
  private static final Map<Integer, String> GL_NV_pixel_buffer_object = new HashMap<Integer, String>();
  private static void GL_NV_pixel_buffer_object() {
    GL_NV_pixel_buffer_object.put(GL_PIXEL_PACK_BUFFER_NV, "GL_PIXEL_PACK_BUFFER_NV");
    GL_NV_pixel_buffer_object.put(GL_PIXEL_UNPACK_BUFFER_BINDING_NV, "GL_PIXEL_UNPACK_BUFFER_BINDING_NV");
    GL_NV_pixel_buffer_object.put(GL_PIXEL_UNPACK_BUFFER_NV, "GL_PIXEL_UNPACK_BUFFER_NV");
    GL_NV_pixel_buffer_object.put(GL_PIXEL_PACK_BUFFER_BINDING_NV, "GL_PIXEL_PACK_BUFFER_BINDING_NV");
  }
  private static final Map<Integer, String> GL_EXT_texture_swizzle = new HashMap<Integer, String>();
  private static void GL_EXT_texture_swizzle() {
    GL_EXT_texture_swizzle.put(GL_TEXTURE_SWIZZLE_RGBA_EXT, "GL_TEXTURE_SWIZZLE_RGBA_EXT");
    GL_EXT_texture_swizzle.put(GL_TEXTURE_SWIZZLE_G_EXT, "GL_TEXTURE_SWIZZLE_G_EXT");
    GL_EXT_texture_swizzle.put(GL_TEXTURE_SWIZZLE_B_EXT, "GL_TEXTURE_SWIZZLE_B_EXT");
    GL_EXT_texture_swizzle.put(GL_TEXTURE_SWIZZLE_A_EXT, "GL_TEXTURE_SWIZZLE_A_EXT");
    GL_EXT_texture_swizzle.put(GL_TEXTURE_SWIZZLE_R_EXT, "GL_TEXTURE_SWIZZLE_R_EXT");
  }
  private static final Map<Integer, String> GL_SGIX_depth_texture = new HashMap<Integer, String>();
  private static void GL_SGIX_depth_texture() {
    GL_SGIX_depth_texture.put(GL_DEPTH_COMPONENT32_SGIX, "GL_DEPTH_COMPONENT32_SGIX");
    GL_SGIX_depth_texture.put(GL_DEPTH_COMPONENT16_SGIX, "GL_DEPTH_COMPONENT16_SGIX");
    GL_SGIX_depth_texture.put(GL_DEPTH_COMPONENT24_SGIX, "GL_DEPTH_COMPONENT24_SGIX");
  }
  private static final Map<Integer, String> GL_OES_texture_half_float = new HashMap<Integer, String>();
  private static void GL_OES_texture_half_float() {
    GL_OES_texture_half_float.put(GL_HALF_FLOAT_OES, "GL_HALF_FLOAT_OES");
  }
  private static final Map<Integer, String> GL_EXT_histogram = new HashMap<Integer, String>();
  private static void GL_EXT_histogram() {
    GL_EXT_histogram.put(GL_HISTOGRAM_LUMINANCE_SIZE_EXT, "GL_HISTOGRAM_LUMINANCE_SIZE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_WIDTH_EXT, "GL_HISTOGRAM_WIDTH_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_EXT, "GL_HISTOGRAM_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_BLUE_SIZE_EXT, "GL_HISTOGRAM_BLUE_SIZE_EXT");
    GL_EXT_histogram.put(GL_PROXY_HISTOGRAM_EXT, "GL_PROXY_HISTOGRAM_EXT");
    GL_EXT_histogram.put(GL_MINMAX_SINK_EXT, "GL_MINMAX_SINK_EXT");
    GL_EXT_histogram.put(GL_TABLE_TOO_LARGE_EXT, "GL_TABLE_TOO_LARGE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_RED_SIZE_EXT, "GL_HISTOGRAM_RED_SIZE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_ALPHA_SIZE_EXT, "GL_HISTOGRAM_ALPHA_SIZE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_FORMAT_EXT, "GL_HISTOGRAM_FORMAT_EXT");
    GL_EXT_histogram.put(GL_MINMAX_FORMAT_EXT, "GL_MINMAX_FORMAT_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_SINK_EXT, "GL_HISTOGRAM_SINK_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_GREEN_SIZE_EXT, "GL_HISTOGRAM_GREEN_SIZE_EXT");
    GL_EXT_histogram.put(GL_MINMAX_EXT, "GL_MINMAX_EXT");
  }
  private static final Map<Integer, String> GL_EXT_light_texture = new HashMap<Integer, String>();
  private static void GL_EXT_light_texture() {
    GL_EXT_light_texture.put(GL_FRAGMENT_DEPTH_EXT, "GL_FRAGMENT_DEPTH_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_APPLICATION_MODE_EXT, "GL_TEXTURE_APPLICATION_MODE_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_MATERIAL_PARAMETER_EXT, "GL_TEXTURE_MATERIAL_PARAMETER_EXT");
    GL_EXT_light_texture.put(GL_FRAGMENT_COLOR_EXT, "GL_FRAGMENT_COLOR_EXT");
    GL_EXT_light_texture.put(GL_ATTENUATION_EXT, "GL_ATTENUATION_EXT");
    GL_EXT_light_texture.put(GL_FRAGMENT_MATERIAL_EXT, "GL_FRAGMENT_MATERIAL_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_LIGHT_EXT, "GL_TEXTURE_LIGHT_EXT");
    GL_EXT_light_texture.put(GL_FRAGMENT_NORMAL_EXT, "GL_FRAGMENT_NORMAL_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_MATERIAL_FACE_EXT, "GL_TEXTURE_MATERIAL_FACE_EXT");
    GL_EXT_light_texture.put(GL_SHADOW_ATTENUATION_EXT, "GL_SHADOW_ATTENUATION_EXT");
  }
  private static final Map<Integer, String> GL_EXT_packed_float = new HashMap<Integer, String>();
  private static void GL_EXT_packed_float() {
    GL_EXT_packed_float.put(GL_UNSIGNED_INT_10F_11F_11F_REV_EXT, "GL_UNSIGNED_INT_10F_11F_11F_REV_EXT");
    GL_EXT_packed_float.put(GL_R11F_G11F_B10F_EXT, "GL_R11F_G11F_B10F_EXT");
    GL_EXT_packed_float.put(GL_RGBA_SIGNED_COMPONENTS_EXT, "GL_RGBA_SIGNED_COMPONENTS_EXT");
  }
  private static final Map<Integer, String> GL_NV_vertex_program4 = new HashMap<Integer, String>();
  private static void GL_NV_vertex_program4() {
    GL_NV_vertex_program4.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV");
  }
  private static final Map<Integer, String> GL_NV_vertex_program3 = new HashMap<Integer, String>();
  private static void GL_NV_vertex_program3() {
    GL_NV_vertex_program3.put(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB");
  }
  private static final Map<Integer, String> GL_NV_shadow_samplers_cube = new HashMap<Integer, String>();
  private static void GL_NV_shadow_samplers_cube() {
    GL_NV_shadow_samplers_cube.put(GL_SAMPLER_CUBE_SHADOW_NV, "GL_SAMPLER_CUBE_SHADOW_NV");
  }
  private static final Map<Integer, String> GL_ATI_meminfo = new HashMap<Integer, String>();
  private static void GL_ATI_meminfo() {
    GL_ATI_meminfo.put(GL_VBO_FREE_MEMORY_ATI, "GL_VBO_FREE_MEMORY_ATI");
    GL_ATI_meminfo.put(GL_RENDERBUFFER_FREE_MEMORY_ATI, "GL_RENDERBUFFER_FREE_MEMORY_ATI");
    GL_ATI_meminfo.put(GL_TEXTURE_FREE_MEMORY_ATI, "GL_TEXTURE_FREE_MEMORY_ATI");
  }
  private static final Map<Integer, String> GL_OES_compressed_paletted_texture = new HashMap<Integer, String>();
  private static void GL_OES_compressed_paletted_texture() {
    GL_OES_compressed_paletted_texture.put(GL_PALETTE8_RGBA4_OES, "GL_PALETTE8_RGBA4_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE8_RGB8_OES, "GL_PALETTE8_RGB8_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE4_RGBA4_OES, "GL_PALETTE4_RGBA4_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE4_RGB5_A1_OES, "GL_PALETTE4_RGB5_A1_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE8_RGB5_A1_OES, "GL_PALETTE8_RGB5_A1_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE4_RGB8_OES, "GL_PALETTE4_RGB8_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE8_RGBA8_OES, "GL_PALETTE8_RGBA8_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE4_RGBA8_OES, "GL_PALETTE4_RGBA8_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE8_R5_G6_B5_OES, "GL_PALETTE8_R5_G6_B5_OES");
    GL_OES_compressed_paletted_texture.put(GL_PALETTE4_R5_G6_B5_OES, "GL_PALETTE4_R5_G6_B5_OES");
  }
  private static final Map<Integer, String> GL_NV_vdpau_interop = new HashMap<Integer, String>();
  private static void GL_NV_vdpau_interop() {
    GL_NV_vdpau_interop.put(GL_WRITE_DISCARD_NV, "GL_WRITE_DISCARD_NV");
    GL_NV_vdpau_interop.put(GL_SURFACE_MAPPED_NV, "GL_SURFACE_MAPPED_NV");
    GL_NV_vdpau_interop.put(GL_SURFACE_STATE_NV, "GL_SURFACE_STATE_NV");
    GL_NV_vdpau_interop.put(GL_SURFACE_REGISTERED_NV, "GL_SURFACE_REGISTERED_NV");
  }
  private static final Map<Integer, String> GL_ARM_mali_program_binary = new HashMap<Integer, String>();
  private static void GL_ARM_mali_program_binary() {
    GL_ARM_mali_program_binary.put(GL_MALI_PROGRAM_BINARY_ARM, "GL_MALI_PROGRAM_BINARY_ARM");
  }
  private static final Map<Integer, String> GL_NV_texgen_emboss = new HashMap<Integer, String>();
  private static void GL_NV_texgen_emboss() {
    GL_NV_texgen_emboss.put(GL_EMBOSS_CONSTANT_NV, "GL_EMBOSS_CONSTANT_NV");
    GL_NV_texgen_emboss.put(GL_EMBOSS_LIGHT_NV, "GL_EMBOSS_LIGHT_NV");
    GL_NV_texgen_emboss.put(GL_EMBOSS_MAP_NV, "GL_EMBOSS_MAP_NV");
  }
  private static final Map<Integer, String> GL_OES_stencil8 = new HashMap<Integer, String>();
  private static void GL_OES_stencil8() {
    GL_OES_stencil8.put(GL_STENCIL_INDEX8_OES, "GL_STENCIL_INDEX8_OES");
  }
  private static final Map<Integer, String> GL_EXT_multisample = new HashMap<Integer, String>();
  private static void GL_EXT_multisample() {
    GL_EXT_multisample.put(GL_4PASS_1_EXT, "GL_4PASS_1_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_ALPHA_TO_MASK_EXT, "GL_SAMPLE_ALPHA_TO_MASK_EXT");
    GL_EXT_multisample.put(GL_2PASS_1_EXT, "GL_2PASS_1_EXT");
    GL_EXT_multisample.put(GL_MULTISAMPLE_BIT_EXT, "GL_MULTISAMPLE_BIT_EXT");
    GL_EXT_multisample.put(GL_4PASS_2_EXT, "GL_4PASS_2_EXT");
    GL_EXT_multisample.put(GL_4PASS_0_EXT, "GL_4PASS_0_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_MASK_VALUE_EXT, "GL_SAMPLE_MASK_VALUE_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_MASK_EXT, "GL_SAMPLE_MASK_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_ALPHA_TO_ONE_EXT, "GL_SAMPLE_ALPHA_TO_ONE_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_MASK_INVERT_EXT, "GL_SAMPLE_MASK_INVERT_EXT");
    GL_EXT_multisample.put(GL_4PASS_3_EXT, "GL_4PASS_3_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_BUFFERS_EXT, "GL_SAMPLE_BUFFERS_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_PATTERN_EXT, "GL_SAMPLE_PATTERN_EXT");
    GL_EXT_multisample.put(GL_2PASS_0_EXT, "GL_2PASS_0_EXT");
    GL_EXT_multisample.put(GL_SAMPLES_EXT, "GL_SAMPLES_EXT");
    GL_EXT_multisample.put(GL_1PASS_EXT, "GL_1PASS_EXT");
    GL_EXT_multisample.put(GL_MULTISAMPLE_EXT, "GL_MULTISAMPLE_EXT");
  }
  private static final Map<Integer, String> GL_EXT_multisampled_compatibility = new HashMap<Integer, String>();
  private static void GL_EXT_multisampled_compatibility() {
    GL_EXT_multisampled_compatibility.put(GL_SAMPLE_ALPHA_TO_ONE_EXT, "GL_SAMPLE_ALPHA_TO_ONE_EXT");
    GL_EXT_multisampled_compatibility.put(GL_MULTISAMPLE_EXT, "GL_MULTISAMPLE_EXT");
  }
  private static final Map<Integer, String> GL_APPLE_texture_max_level = new HashMap<Integer, String>();
  private static void GL_APPLE_texture_max_level() {
    GL_APPLE_texture_max_level.put(GL_TEXTURE_MAX_LEVEL_APPLE, "GL_TEXTURE_MAX_LEVEL_APPLE");
  }
  private static final Map<Integer, String> GL_OES_stencil4 = new HashMap<Integer, String>();
  private static void GL_OES_stencil4() {
    GL_OES_stencil4.put(GL_STENCIL_INDEX4_OES, "GL_STENCIL_INDEX4_OES");
  }
  private static final Map<Integer, String> GL_OES_stencil1 = new HashMap<Integer, String>();
  private static void GL_OES_stencil1() {
    GL_OES_stencil1.put(GL_STENCIL_INDEX1_OES, "GL_STENCIL_INDEX1_OES");
  }
  private static final Map<Integer, String> GL_APPLE_row_bytes = new HashMap<Integer, String>();
  private static void GL_APPLE_row_bytes() {
    GL_APPLE_row_bytes.put(GL_UNPACK_ROW_BYTES_APPLE, "GL_UNPACK_ROW_BYTES_APPLE");
    GL_APPLE_row_bytes.put(GL_PACK_ROW_BYTES_APPLE, "GL_PACK_ROW_BYTES_APPLE");
  }
  private static final Map<Integer, String> GL_ARB_framebuffer_sRGB = new HashMap<Integer, String>();
  private static void GL_ARB_framebuffer_sRGB() {
    GL_ARB_framebuffer_sRGB.put(GL_FRAMEBUFFER_SRGB, "GL_FRAMEBUFFER_SRGB");
  }
  private static final Map<Integer, String> GL_OES_viewport_array = new HashMap<Integer, String>();
  private static void GL_OES_viewport_array() {
    GL_OES_viewport_array.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_OES_viewport_array.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_OES_viewport_array.put(GL_VIEWPORT_SUBPIXEL_BITS_OES, "GL_VIEWPORT_SUBPIXEL_BITS_OES");
    GL_OES_viewport_array.put(GL_MAX_VIEWPORTS_OES, "GL_MAX_VIEWPORTS_OES");
    GL_OES_viewport_array.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_OES_viewport_array.put(GL_VIEWPORT_BOUNDS_RANGE_OES, "GL_VIEWPORT_BOUNDS_RANGE_OES");
    GL_OES_viewport_array.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GL_OES_viewport_array.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES");
  }
  private static final Map<Integer, String> GL_EXT_texture_compression_bptc = new HashMap<Integer, String>();
  private static void GL_EXT_texture_compression_bptc() {
    GL_EXT_texture_compression_bptc.put(GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT");
    GL_EXT_texture_compression_bptc.put(GL_COMPRESSED_RGBA_BPTC_UNORM_EXT, "GL_COMPRESSED_RGBA_BPTC_UNORM_EXT");
    GL_EXT_texture_compression_bptc.put(GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT");
    GL_EXT_texture_compression_bptc.put(GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT");
  }
  private static final Map<Integer, String> GL_NV_vertex_attrib_integer_64bit = new HashMap<Integer, String>();
  private static void GL_NV_vertex_attrib_integer_64bit() {
    GL_NV_vertex_attrib_integer_64bit.put(GL_INT64_NV, "GL_INT64_NV");
    GL_NV_vertex_attrib_integer_64bit.put(GL_UNSIGNED_INT64_NV, "GL_UNSIGNED_INT64_NV");
  }
  private static final Map<Integer, String> GL_SGIS_texture_border_clamp = new HashMap<Integer, String>();
  private static void GL_SGIS_texture_border_clamp() {
    GL_SGIS_texture_border_clamp.put(GL_CLAMP_TO_BORDER_SGIS, "GL_CLAMP_TO_BORDER_SGIS");
  }
  public static final Command glMultiTexImage3DEXT = new Command();
  private static void glMultiTexImage3DEXT() {
    Command cmd = glMultiTexImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCheckFramebufferStatusOES = new Command();
  private static void glCheckFramebufferStatusOES() {
    Command cmd = glCheckFramebufferStatusOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glTextureMaterialEXT = new Command();
  private static void glTextureMaterialEXT() {
    Command cmd = glTextureMaterialEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("mode", GLenum, MaterialParameter);
    cmd.extension = GL_EXT_light_texture;
  }
  public static final Command glBufferAddressRangeNV = new Command();
  private static void glBufferAddressRangeNV() {
    Command cmd = glBufferAddressRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glNamedFramebufferParameteri = new Command();
  private static void glNamedFramebufferParameteri() {
    Command cmd = glNamedFramebufferParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glClipPlanex = new Command();
  private static void glClipPlanex() {
    Command cmd = glClipPlanex;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
  }
  public static final Command glCopyColorSubTable = new Command();
  private static void glCopyColorSubTable() {
    Command cmd = glCopyColorSubTable;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glNamedBufferData = new Command();
  private static void glNamedBufferData() {
    Command cmd = glNamedBufferData;
    cmd.returnGroup = _null_;
    cmd.addParam("usage", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glPixelTransformParameteriEXT = new Command();
  private static void glPixelTransformParameteriEXT() {
    Command cmd = glPixelTransformParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_pixel_transform;
  }
  public static final Command glProgramEnvParameterI4ivNV = new Command();
  private static void glProgramEnvParameterI4ivNV() {
    Command cmd = glProgramEnvParameterI4ivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glTexBufferRangeEXT = new Command();
  private static void glTexBufferRangeEXT() {
    Command cmd = glTexBufferRangeEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_buffer;
  }
  public static final Command glGetTextureLevelParameterivEXT = new Command();
  private static void glGetTextureLevelParameterivEXT() {
    Command cmd = glGetTextureLevelParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetQueryBufferObjectiv = new Command();
  private static void glGetQueryBufferObjectiv() {
    Command cmd = glGetQueryBufferObjectiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetImageTransformParameterivHP = new Command();
  private static void glGetImageTransformParameterivHP() {
    Command cmd = glGetImageTransformParameterivHP;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_HP_image_transform;
  }
  public static final Command glFragmentLightModeliSGIX = new Command();
  private static void glFragmentLightModeliSGIX() {
    Command cmd = glFragmentLightModeliSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FragmentLightModelParameterSGIX);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glMultiTexCoord2hNV = new Command();
  private static void glMultiTexCoord2hNV() {
    Command cmd = glMultiTexCoord2hNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glVertexStream1svATI = new Command();
  private static void glVertexStream1svATI() {
    Command cmd = glVertexStream1svATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glImportSemaphoreWin32NameEXT = new Command();
  private static void glImportSemaphoreWin32NameEXT() {
    Command cmd = glImportSemaphoreWin32NameEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("handleType", GLenum, ExternalHandleType);
    cmd.extension = GL_EXT_semaphore_win32;
  }
  public static final Command glGetStringi = new Command();
  private static void glGetStringi() {
    Command cmd = glGetStringi;
    cmd.returnGroup = _null_;
    cmd.addParam("name", GLenum, _null_);
  }
  public static final Command glGetPixelTexGenParameterfvSGIS = new Command();
  private static void glGetPixelTexGenParameterfvSGIS() {
    Command cmd = glGetPixelTexGenParameterfvSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTexGenParameterNameSGIS);
    cmd.extension = GL_SGIS_pixel_texture;
  }
  public static final Command glClipControlEXT = new Command();
  private static void glClipControlEXT() {
    Command cmd = glClipControlEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("origin", GLenum, _null_);
    cmd.addParam("depth", GLenum, _null_);
    cmd.extension = GL_EXT_clip_control;
  }
  public static final Command glClipPlanef = new Command();
  private static void glClipPlanef() {
    Command cmd = glClipPlanef;
    cmd.returnGroup = _null_;
    cmd.addParam("p", GLenum, _null_);
  }
  public static final Command glGetPathSpacingNV = new Command();
  private static void glGetPathSpacingNV() {
    Command cmd = glGetPathSpacingNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathListMode", GLenum, _null_);
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glClearNamedBufferDataEXT = new Command();
  private static void glClearNamedBufferDataEXT() {
    Command cmd = glClearNamedBufferDataEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetnMapfv = new Command();
  private static void glGetnMapfv() {
    Command cmd = glGetnMapfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
  }
  public static final Command glMultiTexGenfEXT = new Command();
  private static void glMultiTexGenfEXT() {
    Command cmd = glMultiTexGenfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClearTexImageEXT = new Command();
  private static void glClearTexImageEXT() {
    Command cmd = glClearTexImageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetTextureParameterIivEXT = new Command();
  private static void glGetTextureParameterIivEXT() {
    Command cmd = glGetTextureParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetMapParameterivNV = new Command();
  private static void glGetMapParameterivNV() {
    Command cmd = glGetMapParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glImportMemoryWin32HandleEXT = new Command();
  private static void glImportMemoryWin32HandleEXT() {
    Command cmd = glImportMemoryWin32HandleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("handleType", GLenum, ExternalHandleType);
    cmd.extension = GL_EXT_memory_object_win32;
  }
  public static final Command glCoverFillPathNV = new Command();
  private static void glCoverFillPathNV() {
    Command cmd = glCoverFillPathNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glDrawCommandsAddressNV = new Command();
  private static void glDrawCommandsAddressNV() {
    Command cmd = glDrawCommandsAddressNV;
    cmd.returnGroup = _null_;
    cmd.addParam("primitiveMode", GLenum, _null_);
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glMapBufferARB = new Command();
  private static void glMapBufferARB() {
    Command cmd = glMapBufferARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("access", GLenum, BufferAccessARB);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glInterleavedArrays = new Command();
  private static void glInterleavedArrays() {
    Command cmd = glInterleavedArrays;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, InterleavedArrayFormat);
  }
  public static final Command glGetProgramResourceiv = new Command();
  private static void glGetProgramResourceiv() {
    Command cmd = glGetProgramResourceiv;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.addParam("props", GLenum, _null_);
    cmd.extension = GL_ARB_program_interface_query;
  }
  public static final Command glMemoryObjectParameterivEXT = new Command();
  private static void glMemoryObjectParameterivEXT() {
    Command cmd = glMemoryObjectParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, MemoryObjectParameterName);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glMatrixMode = new Command();
  private static void glMatrixMode() {
    Command cmd = glMatrixMode;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
  }
  public static final Command glGetColorTableSGI = new Command();
  private static void glGetColorTableSGI() {
    Command cmd = glGetColorTableSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glGetObjectBufferivATI = new Command();
  private static void glGetObjectBufferivATI() {
    Command cmd = glGetObjectBufferivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glNamedFramebufferTexture3DEXT = new Command();
  private static void glNamedFramebufferTexture3DEXT() {
    Command cmd = glNamedFramebufferTexture3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetnMapdv = new Command();
  private static void glGetnMapdv() {
    Command cmd = glGetnMapdv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
  }
  public static final Command glConvolutionFilter1DEXT = new Command();
  private static void glConvolutionFilter1DEXT() {
    Command cmd = glConvolutionFilter1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glCopyImageSubDataEXT = new Command();
  private static void glCopyImageSubDataEXT() {
    Command cmd = glCopyImageSubDataEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("srcTarget", GLenum, _null_);
    cmd.addParam("dstTarget", GLenum, _null_);
  }
  public static final Command glGetUniformSubroutineuiv = new Command();
  private static void glGetUniformSubroutineuiv() {
    Command cmd = glGetUniformSubroutineuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glCompressedTextureImage3DEXT = new Command();
  private static void glCompressedTextureImage3DEXT() {
    Command cmd = glCompressedTextureImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glIsStateNV = new Command();
  private static void glIsStateNV() {
    Command cmd = glIsStateNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glSamplerParameterIiv = new Command();
  private static void glSamplerParameterIiv() {
    Command cmd = glSamplerParameterIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glGetShaderiv = new Command();
  private static void glGetShaderiv() {
    Command cmd = glGetShaderiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glVariantPointerEXT = new Command();
  private static void glVariantPointerEXT() {
    Command cmd = glVariantPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glProgramUniformMatrix3x2fvEXT = new Command();
  private static void glProgramUniformMatrix3x2fvEXT() {
    Command cmd = glProgramUniformMatrix3x2fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glGetIntegerui64vNV = new Command();
  private static void glGetIntegerui64vNV() {
    Command cmd = glGetIntegerui64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glColorMask = new Command();
  private static void glColorMask() {
    Command cmd = glColorMask;
    cmd.returnGroup = _null_;
    cmd.addParam("red", GLboolean, Boolean);
    cmd.addParam("green", GLboolean, Boolean);
    cmd.addParam("blue", GLboolean, Boolean);
    cmd.addParam("alpha", GLboolean, Boolean);
  }
  public static final Command glMultiDrawElementsIndirect = new Command();
  private static void glMultiDrawElementsIndirect() {
    Command cmd = glMultiDrawElementsIndirect;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glBufferStorageEXT = new Command();
  private static void glBufferStorageEXT() {
    Command cmd = glBufferStorageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_EXT_buffer_storage;
  }
  public static final Command glMultiTexCoordP3ui = new Command();
  private static void glMultiTexCoordP3ui() {
    Command cmd = glMultiTexCoordP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glTexEnviv = new Command();
  private static void glTexEnviv() {
    Command cmd = glTexEnviv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
  }
  public static final Command glGetCompressedTexImage = new Command();
  private static void glGetCompressedTexImage() {
    Command cmd = glGetCompressedTexImage;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glPathGlyphIndexRangeNV = new Command();
  private static void glPathGlyphIndexRangeNV() {
    Command cmd = glPathGlyphIndexRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fontTarget", GLenum, _null_);
    cmd.addParam("fontStyle", GLbitfield, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glProgramParameter4fvNV = new Command();
  private static void glProgramParameter4fvNV() {
    Command cmd = glProgramParameter4fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glResetMinmaxEXT = new Command();
  private static void glResetMinmaxEXT() {
    Command cmd = glResetMinmaxEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MinmaxTargetEXT);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glBindTransformFeedbackNV = new Command();
  private static void glBindTransformFeedbackNV() {
    Command cmd = glBindTransformFeedbackNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_NV_transform_feedback2;
  }
  public static final Command glMultiTexCoord3sv = new Command();
  private static void glMultiTexCoord3sv() {
    Command cmd = glMultiTexCoord3sv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glPixelTexGenParameteriSGIS = new Command();
  private static void glPixelTexGenParameteriSGIS() {
    Command cmd = glPixelTexGenParameteriSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTexGenParameterNameSGIS);
    cmd.extension = GL_SGIS_pixel_texture;
  }
  public static final Command glBeginQuery = new Command();
  private static void glBeginQuery() {
    Command cmd = glBeginQuery;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetFloati_v = new Command();
  private static void glGetFloati_v() {
    Command cmd = glGetFloati_v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_viewport_array;
  }
  public static final Command glBindTexture = new Command();
  private static void glBindTexture() {
    Command cmd = glBindTexture;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glIsEnabledi = new Command();
  private static void glIsEnabledi() {
    Command cmd = glIsEnabledi;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetDebugMessageLog = new Command();
  private static void glGetDebugMessageLog() {
    Command cmd = glGetDebugMessageLog;
    cmd.returnGroup = _null_;
    cmd.addParam("sources", GLenum, _null_);
    cmd.addParam("types", GLenum, _null_);
    cmd.addParam("severities", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glPointParameterxvOES = new Command();
  private static void glPointParameterxvOES() {
    Command cmd = glPointParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glPixelTexGenParameterfvSGIS = new Command();
  private static void glPixelTexGenParameterfvSGIS() {
    Command cmd = glPixelTexGenParameterfvSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTexGenParameterNameSGIS);
    cmd.extension = GL_SGIS_pixel_texture;
  }
  public static final Command glPathCoordsNV = new Command();
  private static void glPathCoordsNV() {
    Command cmd = glPathCoordsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coordType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetIntegerIndexedvEXT = new Command();
  private static void glGetIntegerIndexedvEXT() {
    Command cmd = glGetIntegerIndexedvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glCheckNamedFramebufferStatus = new Command();
  private static void glCheckNamedFramebufferStatus() {
    Command cmd = glCheckNamedFramebufferStatus;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMultiTexEnvivEXT = new Command();
  private static void glMultiTexEnvivEXT() {
    Command cmd = glMultiTexEnvivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTestFenceNV = new Command();
  private static void glTestFenceNV() {
    Command cmd = glTestFenceNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_fence;
  }
  public static final Command glTextureBuffer = new Command();
  private static void glTextureBuffer() {
    Command cmd = glTextureBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glObjectUnpurgeableAPPLE = new Command();
  private static void glObjectUnpurgeableAPPLE() {
    Command cmd = glObjectUnpurgeableAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("objectType", GLenum, _null_);
    cmd.addParam("option", GLenum, _null_);
    cmd.extension = GL_APPLE_object_purgeable;
  }
  public static final Command glBindVideoCaptureStreamTextureNV = new Command();
  private static void glBindVideoCaptureStreamTextureNV() {
    Command cmd = glBindVideoCaptureStreamTextureNV;
    cmd.returnGroup = _null_;
    cmd.addParam("frame_region", GLenum, _null_);
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glBlendFuncSeparateINGR = new Command();
  private static void glBlendFuncSeparateINGR() {
    Command cmd = glBlendFuncSeparateINGR;
    cmd.returnGroup = _null_;
    cmd.addParam("sfactorRGB", GLenum, _null_);
    cmd.addParam("dfactorRGB", GLenum, _null_);
    cmd.addParam("sfactorAlpha", GLenum, _null_);
    cmd.addParam("dfactorAlpha", GLenum, _null_);
  }
  public static final Command glIsPathNV = new Command();
  private static void glIsPathNV() {
    Command cmd = glIsPathNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetMemoryObjectParameterivEXT = new Command();
  private static void glGetMemoryObjectParameterivEXT() {
    Command cmd = glGetMemoryObjectParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, MemoryObjectParameterName);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glMatrixOrthoEXT = new Command();
  private static void glMatrixOrthoEXT() {
    Command cmd = glMatrixOrthoEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiDrawElementsBaseVertexEXT = new Command();
  private static void glMultiDrawElementsBaseVertexEXT() {
    Command cmd = glMultiDrawElementsBaseVertexEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glGetnMapiv = new Command();
  private static void glGetnMapiv() {
    Command cmd = glGetnMapiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
  }
  public static final Command glTexEnvfv = new Command();
  private static void glTexEnvfv() {
    Command cmd = glTexEnvfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
  }
  public static final Command glUniformMatrix3dv = new Command();
  private static void glUniformMatrix3dv() {
    Command cmd = glUniformMatrix3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glCoverStrokePathNV = new Command();
  private static void glCoverStrokePathNV() {
    Command cmd = glCoverStrokePathNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glNamedFramebufferRenderbuffer = new Command();
  private static void glNamedFramebufferRenderbuffer() {
    Command cmd = glNamedFramebufferRenderbuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("renderbuffertarget", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glNamedFramebufferTextureLayerEXT = new Command();
  private static void glNamedFramebufferTextureLayerEXT() {
    Command cmd = glNamedFramebufferTextureLayerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glSecondaryColorP3uiv = new Command();
  private static void glSecondaryColorP3uiv() {
    Command cmd = glSecondaryColorP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glTexStorage1D = new Command();
  private static void glTexStorage1D() {
    Command cmd = glTexStorage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_texture_storage;
  }
  public static final Command glTextureStorageMem3DMultisampleEXT = new Command();
  private static void glTextureStorageMem3DMultisampleEXT() {
    Command cmd = glTextureStorageMem3DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glGetPointerv = new Command();
  private static void glGetPointerv() {
    Command cmd = glGetPointerv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPointervPName);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glCompressedMultiTexSubImage3DEXT = new Command();
  private static void glCompressedMultiTexSubImage3DEXT() {
    Command cmd = glCompressedMultiTexSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexGenxOES = new Command();
  private static void glTexGenxOES() {
    Command cmd = glTexGenxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glMultiTexSubImage1DEXT = new Command();
  private static void glMultiTexSubImage1DEXT() {
    Command cmd = glMultiTexSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix3fv = new Command();
  private static void glUniformMatrix3fv() {
    Command cmd = glUniformMatrix3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glTexStorage2D = new Command();
  private static void glTexStorage2D() {
    Command cmd = glTexStorage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_texture_storage;
  }
  public static final Command glEnableClientStateiEXT = new Command();
  private static void glEnableClientStateiEXT() {
    Command cmd = glEnableClientStateiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord1bvOES = new Command();
  private static void glMultiTexCoord1bvOES() {
    Command cmd = glMultiTexCoord1bvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glTexStorage3D = new Command();
  private static void glTexStorage3D() {
    Command cmd = glTexStorage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_texture_storage;
  }
  public static final Command glVDPAUSurfaceAccessNV = new Command();
  private static void glVDPAUSurfaceAccessNV() {
    Command cmd = glVDPAUSurfaceAccessNV;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_NV_vdpau_interop;
  }
  public static final Command glIsMemoryObjectEXT = new Command();
  private static void glIsMemoryObjectEXT() {
    Command cmd = glIsMemoryObjectEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glGetProgramResourceLocationIndexEXT = new Command();
  private static void glGetProgramResourceLocationIndexEXT() {
    Command cmd = glGetProgramResourceLocationIndexEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.extension = GL_EXT_blend_func_extended;
  }
  public static final Command glGetActiveSubroutineUniformiv = new Command();
  private static void glGetActiveSubroutineUniformiv() {
    Command cmd = glGetActiveSubroutineUniformiv;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glEnableVertexArrayEXT = new Command();
  private static void glEnableVertexArrayEXT() {
    Command cmd = glEnableVertexArrayEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFlushPixelDataRangeNV = new Command();
  private static void glFlushPixelDataRangeNV() {
    Command cmd = glFlushPixelDataRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_pixel_data_range;
  }
  public static final Command glMultiTexCoord3iARB = new Command();
  private static void glMultiTexCoord3iARB() {
    Command cmd = glMultiTexCoord3iARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glResetMinmax = new Command();
  private static void glResetMinmax() {
    Command cmd = glResetMinmax;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glGetTransformFeedbacki64_v = new Command();
  private static void glGetTransformFeedbacki64_v() {
    Command cmd = glGetTransformFeedbacki64_v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMultiDrawElementsBaseVertex = new Command();
  private static void glMultiDrawElementsBaseVertex() {
    Command cmd = glMultiDrawElementsBaseVertex;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glUniformMatrix3x2fv = new Command();
  private static void glUniformMatrix3x2fv() {
    Command cmd = glUniformMatrix3x2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glUseShaderProgramEXT = new Command();
  private static void glUseShaderProgramEXT() {
    Command cmd = glUseShaderProgramEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glLightxv = new Command();
  private static void glLightxv() {
    Command cmd = glLightxv;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetColorTableParameteriv = new Command();
  private static void glGetColorTableParameteriv() {
    Command cmd = glGetColorTableParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glTexCoordP4ui = new Command();
  private static void glTexCoordP4ui() {
    Command cmd = glTexCoordP4ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetMaterialfv = new Command();
  private static void glGetMaterialfv() {
    Command cmd = glGetMaterialfv;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
  }
  public static final Command glNamedFramebufferRenderbufferEXT = new Command();
  private static void glNamedFramebufferRenderbufferEXT() {
    Command cmd = glNamedFramebufferRenderbufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("renderbuffertarget", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetActiveUniformBlockiv = new Command();
  private static void glGetActiveUniformBlockiv() {
    Command cmd = glGetActiveUniformBlockiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_uniform_buffer_object;
  }
  public static final Command glGetStageIndexNV = new Command();
  private static void glGetStageIndexNV() {
    Command cmd = glGetStageIndexNV;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glProgramUniformMatrix2fv = new Command();
  private static void glProgramUniformMatrix2fv() {
    Command cmd = glProgramUniformMatrix2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glFramebufferTexture1DEXT = new Command();
  private static void glFramebufferTexture1DEXT() {
    Command cmd = glFramebufferTexture1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glUseProgramStagesEXT = new Command();
  private static void glUseProgramStagesEXT() {
    Command cmd = glUseProgramStagesEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("stages", GLbitfield, _null_);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glMultiTexCoord4svARB = new Command();
  private static void glMultiTexCoord4svARB() {
    Command cmd = glMultiTexCoord4svARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetMapdv = new Command();
  private static void glGetMapdv() {
    Command cmd = glGetMapdv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
    cmd.addParam("query", GLenum, GetMapQuery);
  }
  public static final Command glTexStorageSparseAMD = new Command();
  private static void glTexStorageSparseAMD() {
    Command cmd = glTexStorageSparseAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_AMD_sparse_texture;
  }
  public static final Command glDrawArraysInstancedNV = new Command();
  private static void glDrawArraysInstancedNV() {
    Command cmd = glDrawArraysInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glTexParameterf = new Command();
  private static void glTexParameterf() {
    Command cmd = glTexParameterf;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
  }
  public static final Command glGetInteger64vAPPLE = new Command();
  private static void glGetInteger64vAPPLE() {
    Command cmd = glGetInteger64vAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_sync;
  }
  public static final Command glMultiTexParameterivEXT = new Command();
  private static void glMultiTexParameterivEXT() {
    Command cmd = glMultiTexParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramUniformMatrix2x3dvEXT = new Command();
  private static void glProgramUniformMatrix2x3dvEXT() {
    Command cmd = glProgramUniformMatrix2x3dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetCombinerOutputParameterfvNV = new Command();
  private static void glGetCombinerOutputParameterfvNV() {
    Command cmd = glGetCombinerOutputParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("portion", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glStencilOpSeparateATI = new Command();
  private static void glStencilOpSeparateATI() {
    Command cmd = glStencilOpSeparateATI;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, StencilFaceDirection);
    cmd.addParam("sfail", GLenum, StencilOp);
    cmd.addParam("dpfail", GLenum, StencilOp);
    cmd.addParam("dppass", GLenum, StencilOp);
    cmd.extension = GL_ATI_separate_stencil;
  }
  public static final Command glProgramUniformMatrix2dv = new Command();
  private static void glProgramUniformMatrix2dv() {
    Command cmd = glProgramUniformMatrix2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glGetMapfv = new Command();
  private static void glGetMapfv() {
    Command cmd = glGetMapfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
    cmd.addParam("query", GLenum, GetMapQuery);
  }
  public static final Command glVertexStream3sATI = new Command();
  private static void glVertexStream3sATI() {
    Command cmd = glVertexStream3sATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glTextureStorageMem3DEXT = new Command();
  private static void glTextureStorageMem3DEXT() {
    Command cmd = glTextureStorageMem3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glProgramUniformMatrix3x4dvEXT = new Command();
  private static void glProgramUniformMatrix3x4dvEXT() {
    Command cmd = glProgramUniformMatrix3x4dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glNamedFramebufferTextureLayer = new Command();
  private static void glNamedFramebufferTextureLayer() {
    Command cmd = glNamedFramebufferTextureLayer;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetTexFilterFuncSGIS = new Command();
  private static void glGetTexFilterFuncSGIS() {
    Command cmd = glGetTexFilterFuncSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_SGIS_texture_filter4;
  }
  public static final Command glProgramLocalParameter4fvARB = new Command();
  private static void glProgramLocalParameter4fvARB() {
    Command cmd = glProgramLocalParameter4fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glGetLocalConstantBooleanvEXT = new Command();
  private static void glGetLocalConstantBooleanvEXT() {
    Command cmd = glGetLocalConstantBooleanvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.addParam("data", GLboolean, Boolean);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glTestObjectAPPLE = new Command();
  private static void glTestObjectAPPLE() {
    Command cmd = glTestObjectAPPLE;
    cmd.returnGroup = Boolean;
    cmd.addParam("object", GLenum, _null_);
    cmd.extension = GL_APPLE_fence;
  }
  public static final Command glCopyTexImage2DEXT = new Command();
  private static void glCopyTexImage2DEXT() {
    Command cmd = glCopyTexImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glVertexStream2fATI = new Command();
  private static void glVertexStream2fATI() {
    Command cmd = glVertexStream2fATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glDrawElementsInstancedBaseVertexBaseInstanceEXT = new Command();
  private static void glDrawElementsInstancedBaseVertexBaseInstanceEXT() {
    Command cmd = glDrawElementsInstancedBaseVertexBaseInstanceEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetArrayObjectfvATI = new Command();
  private static void glGetArrayObjectfvATI() {
    Command cmd = glGetArrayObjectfvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glMultiDrawElementsIndirectEXT = new Command();
  private static void glMultiDrawElementsIndirectEXT() {
    Command cmd = glMultiDrawElementsIndirectEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glProgramParameters4fvNV = new Command();
  private static void glProgramParameters4fvNV() {
    Command cmd = glProgramParameters4fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glVertexStream1dATI = new Command();
  private static void glVertexStream1dATI() {
    Command cmd = glVertexStream1dATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glMultiTexCoord1svARB = new Command();
  private static void glMultiTexCoord1svARB() {
    Command cmd = glMultiTexCoord1svARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glProgramParameteri = new Command();
  private static void glProgramParameteri() {
    Command cmd = glProgramParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glBindFramebufferEXT = new Command();
  private static void glBindFramebufferEXT() {
    Command cmd = glBindFramebufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glGetTexParameterIivOES = new Command();
  private static void glGetTexParameterIivOES() {
    Command cmd = glGetTexParameterIivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glMultiTexCoordP3uiv = new Command();
  private static void glMultiTexCoordP3uiv() {
    Command cmd = glMultiTexCoordP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glClearBufferuiv = new Command();
  private static void glClearBufferuiv() {
    Command cmd = glClearBufferuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
  }
  public static final Command glGetBufferPointervARB = new Command();
  private static void glGetBufferPointervARB() {
    Command cmd = glGetBufferPointervARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glSampleMaskSGIS = new Command();
  private static void glSampleMaskSGIS() {
    Command cmd = glSampleMaskSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("invert", GLboolean, Boolean);
    cmd.extension = GL_SGIS_multisample;
  }
  public static final Command glTexEnvxOES = new Command();
  private static void glTexEnvxOES() {
    Command cmd = glTexEnvxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glDebugMessageInsertARB = new Command();
  private static void glDebugMessageInsertARB() {
    Command cmd = glDebugMessageInsertARB;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.extension = GL_ARB_debug_output;
  }
  public static final Command glGetTexBumpParameterivATI = new Command();
  private static void glGetTexBumpParameterivATI() {
    Command cmd = glGetTexBumpParameterivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_envmap_bumpmap;
  }
  public static final Command glFragmentColorMaterialSGIX = new Command();
  private static void glFragmentColorMaterialSGIX() {
    Command cmd = glFragmentColorMaterialSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("mode", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glTexParameteri = new Command();
  private static void glTexParameteri() {
    Command cmd = glTexParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
  }
  public static final Command glGetDetailTexFuncSGIS = new Command();
  private static void glGetDetailTexFuncSGIS() {
    Command cmd = glGetDetailTexFuncSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_SGIS_detail_texture;
  }
  public static final Command glGetMapiv = new Command();
  private static void glGetMapiv() {
    Command cmd = glGetMapiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
    cmd.addParam("query", GLenum, GetMapQuery);
  }
  public static final Command glQueryCounterEXT = new Command();
  private static void glQueryCounterEXT() {
    Command cmd = glQueryCounterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_disjoint_timer_query;
  }
  public static final Command glMulticastCopyBufferSubDataNV = new Command();
  private static void glMulticastCopyBufferSubDataNV() {
    Command cmd = glMulticastCopyBufferSubDataNV;
    cmd.returnGroup = _null_;
    cmd.addParam("writeGpuMask", GLbitfield, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glGetPointervEXT = new Command();
  private static void glGetPointervEXT() {
    Command cmd = glGetPointervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPointervPName);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glGetDoublev = new Command();
  private static void glGetDoublev() {
    Command cmd = glGetDoublev;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPName);
  }
  public static final Command glTexParameterx = new Command();
  private static void glTexParameterx() {
    Command cmd = glTexParameterx;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glMultiTexCoord4sv = new Command();
  private static void glMultiTexCoord4sv() {
    Command cmd = glMultiTexCoord4sv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetMaterialiv = new Command();
  private static void glGetMaterialiv() {
    Command cmd = glGetMaterialiv;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
  }
  public static final Command glVideoCaptureStreamParameterdvNV = new Command();
  private static void glVideoCaptureStreamParameterdvNV() {
    Command cmd = glVideoCaptureStreamParameterdvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glGetSharpenTexFuncSGIS = new Command();
  private static void glGetSharpenTexFuncSGIS() {
    Command cmd = glGetSharpenTexFuncSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_SGIS_sharpen_texture;
  }
  public static final Command glTextureViewOES = new Command();
  private static void glTextureViewOES() {
    Command cmd = glTextureViewOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_OES_texture_view;
  }
  public static final Command glPixelTransformParameterivEXT = new Command();
  private static void glPixelTransformParameterivEXT() {
    Command cmd = glPixelTransformParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_pixel_transform;
  }
  public static final Command glGetColorTableParameterfv = new Command();
  private static void glGetColorTableParameterfv() {
    Command cmd = glGetColorTableParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glGetBufferPointerv = new Command();
  private static void glGetBufferPointerv() {
    Command cmd = glGetBufferPointerv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glProgramLocalParameter4dARB = new Command();
  private static void glProgramLocalParameter4dARB() {
    Command cmd = glProgramLocalParameter4dARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glSignalSemaphoreEXT = new Command();
  private static void glSignalSemaphoreEXT() {
    Command cmd = glSignalSemaphoreEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("dstLayouts", GLenum, TextureLayout);
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glGetTexGenivOES = new Command();
  private static void glGetTexGenivOES() {
    Command cmd = glGetTexGenivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glTextureParameterfvEXT = new Command();
  private static void glTextureParameterfvEXT() {
    Command cmd = glTextureParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glLightx = new Command();
  private static void glLightx() {
    Command cmd = glLightx;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glMultiTexCoord4dv = new Command();
  private static void glMultiTexCoord4dv() {
    Command cmd = glMultiTexCoord4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glPresentFrameDualFillNV = new Command();
  private static void glPresentFrameDualFillNV() {
    Command cmd = glPresentFrameDualFillNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("target0", GLenum, _null_);
    cmd.addParam("target1", GLenum, _null_);
    cmd.addParam("target2", GLenum, _null_);
    cmd.addParam("target3", GLenum, _null_);
    cmd.extension = GL_NV_present_video;
  }
  public static final Command glGetMinmaxParameterivEXT = new Command();
  private static void glGetMinmaxParameterivEXT() {
    Command cmd = glGetMinmaxParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MinmaxTargetEXT);
    cmd.addParam("pname", GLenum, GetMinmaxParameterPNameEXT);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glBindBufferRange = new Command();
  private static void glBindBufferRange() {
    Command cmd = glBindBufferRange;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_uniform_buffer_object;
  }
  public static final Command glCombinerParameterfvNV = new Command();
  private static void glCombinerParameterfvNV() {
    Command cmd = glCombinerParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glPathSubCoordsNV = new Command();
  private static void glPathSubCoordsNV() {
    Command cmd = glPathSubCoordsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coordType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glVertexStream3fvATI = new Command();
  private static void glVertexStream3fvATI() {
    Command cmd = glVertexStream3fvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glLightf = new Command();
  private static void glLightf() {
    Command cmd = glLightf;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("pname", GLenum, LightParameter);
  }
  public static final Command glGetPixelTransformParameterivEXT = new Command();
  private static void glGetPixelTransformParameterivEXT() {
    Command cmd = glGetPixelTransformParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_pixel_transform;
  }
  public static final Command glLighti = new Command();
  private static void glLighti() {
    Command cmd = glLighti;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("pname", GLenum, LightParameter);
  }
  public static final Command glQueryObjectParameteruiAMD = new Command();
  private static void glQueryObjectParameteruiAMD() {
    Command cmd = glQueryObjectParameteruiAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_occlusion_query_event;
  }
  public static final Command glBlendEquationiEXT = new Command();
  private static void glBlendEquationiEXT() {
    Command cmd = glBlendEquationiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glDebugMessageControlKHR = new Command();
  private static void glDebugMessageControlKHR() {
    Command cmd = glDebugMessageControlKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.addParam("enabled", GLboolean, Boolean);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glVertexArrayVertexAttribIFormatEXT = new Command();
  private static void glVertexArrayVertexAttribIFormatEXT() {
    Command cmd = glVertexArrayVertexAttribIFormatEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureImage3DMultisampleCoverageNV = new Command();
  private static void glTextureImage3DMultisampleCoverageNV() {
    Command cmd = glTextureImage3DMultisampleCoverageNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_NV_texture_multisample;
  }
  public static final Command glMultiTexCoord3ivARB = new Command();
  private static void glMultiTexCoord3ivARB() {
    Command cmd = glMultiTexCoord3ivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glMultiTexCoord4fv = new Command();
  private static void glMultiTexCoord4fv() {
    Command cmd = glMultiTexCoord4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetBufferParameteri64v = new Command();
  private static void glGetBufferParameteri64v() {
    Command cmd = glGetBufferParameteri64v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glTextureColorMaskSGIS = new Command();
  private static void glTextureColorMaskSGIS() {
    Command cmd = glTextureColorMaskSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("red", GLboolean, Boolean);
    cmd.addParam("green", GLboolean, Boolean);
    cmd.addParam("blue", GLboolean, Boolean);
    cmd.addParam("alpha", GLboolean, Boolean);
    cmd.extension = GL_SGIS_texture_color_mask;
  }
  public static final Command glGetListParameterivSGIX = new Command();
  private static void glGetListParameterivSGIX() {
    Command cmd = glGetListParameterivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, ListParameterName);
    cmd.extension = GL_SGIX_list_priority;
  }
  public static final Command glVertexArrayColorOffsetEXT = new Command();
  private static void glVertexArrayColorOffsetEXT() {
    Command cmd = glVertexArrayColorOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glBlendFuncSeparateEXT = new Command();
  private static void glBlendFuncSeparateEXT() {
    Command cmd = glBlendFuncSeparateEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("sfactorRGB", GLenum, _null_);
    cmd.addParam("dfactorRGB", GLenum, _null_);
    cmd.addParam("sfactorAlpha", GLenum, _null_);
    cmd.addParam("dfactorAlpha", GLenum, _null_);
    cmd.extension = GL_EXT_blend_func_separate;
  }
  public static final Command glDebugMessageInsertAMD = new Command();
  private static void glDebugMessageInsertAMD() {
    Command cmd = glDebugMessageInsertAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("category", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.extension = GL_AMD_debug_output;
  }
  public static final Command glBeginConditionalRenderNV = new Command();
  private static void glBeginConditionalRenderNV() {
    Command cmd = glBeginConditionalRenderNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_NV_conditional_render;
  }
  public static final Command glMultiDrawArraysIndirectCount = new Command();
  private static void glMultiDrawArraysIndirectCount() {
    Command cmd = glMultiDrawArraysIndirectCount;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glPushClientAttrib = new Command();
  private static void glPushClientAttrib() {
    Command cmd = glPushClientAttrib;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, ClientAttribMask);
  }
  public static final Command glStencilOpValueAMD = new Command();
  private static void glStencilOpValueAMD() {
    Command cmd = glStencilOpValueAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, StencilFaceDirection);
    cmd.extension = GL_AMD_stencil_operation_extended;
  }
  public static final Command glNamedBufferPageCommitmentARB = new Command();
  private static void glNamedBufferPageCommitmentARB() {
    Command cmd = glNamedBufferPageCommitmentARB;
    cmd.returnGroup = _null_;
    cmd.addParam("commit", GLboolean, Boolean);
    cmd.extension = GL_ARB_sparse_buffer;
  }
  public static final Command glMultiTexGeniEXT = new Command();
  private static void glMultiTexGeniEXT() {
    Command cmd = glMultiTexGeniEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexBufferOES = new Command();
  private static void glTexBufferOES() {
    Command cmd = glTexBufferOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_OES_texture_buffer;
  }
  public static final Command glEvalMapsNV = new Command();
  private static void glEvalMapsNV() {
    Command cmd = glEvalMapsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glMulticastBufferSubDataNV = new Command();
  private static void glMulticastBufferSubDataNV() {
    Command cmd = glMulticastBufferSubDataNV;
    cmd.returnGroup = _null_;
    cmd.addParam("gpuMask", GLbitfield, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glMatrixScalefEXT = new Command();
  private static void glMatrixScalefEXT() {
    Command cmd = glMatrixScalefEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord4iv = new Command();
  private static void glMultiTexCoord4iv() {
    Command cmd = glMultiTexCoord4iv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetProgramStageiv = new Command();
  private static void glGetProgramStageiv() {
    Command cmd = glGetProgramStageiv;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glGetnCompressedTexImageARB = new Command();
  private static void glGetnCompressedTexImageARB() {
    Command cmd = glGetnCompressedTexImageARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glLGPUNamedBufferSubDataNVX = new Command();
  private static void glLGPUNamedBufferSubDataNVX() {
    Command cmd = glLGPUNamedBufferSubDataNVX;
    cmd.returnGroup = _null_;
    cmd.addParam("gpuMask", GLbitfield, _null_);
    cmd.extension = GL_NVX_linked_gpu_multicast;
  }
  public static final Command glGetLocalConstantIntegervEXT = new Command();
  private static void glGetLocalConstantIntegervEXT() {
    Command cmd = glGetLocalConstantIntegervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glTextureSubImage3D = new Command();
  private static void glTextureSubImage3D() {
    Command cmd = glTextureSubImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glClearTexImage = new Command();
  private static void glClearTexImage() {
    Command cmd = glClearTexImage;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_clear_texture;
  }
  public static final Command glEdgeFlag = new Command();
  private static void glEdgeFlag() {
    Command cmd = glEdgeFlag;
    cmd.returnGroup = _null_;
    cmd.addParam("flag", GLboolean, Boolean);
  }
  public static final Command glGetMultiTexParameterivEXT = new Command();
  private static void glGetMultiTexParameterivEXT() {
    Command cmd = glGetMultiTexParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMaterialxOES = new Command();
  private static void glMaterialxOES() {
    Command cmd = glMaterialxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTextureSubImage2D = new Command();
  private static void glTextureSubImage2D() {
    Command cmd = glTextureSubImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glDebugMessageControl = new Command();
  private static void glDebugMessageControl() {
    Command cmd = glDebugMessageControl;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.addParam("enabled", GLboolean, Boolean);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glArrayObjectATI = new Command();
  private static void glArrayObjectATI() {
    Command cmd = glArrayObjectATI;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glGetColorTable = new Command();
  private static void glGetColorTable() {
    Command cmd = glGetColorTable;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glRenderbufferStorageMultisampleAPPLE = new Command();
  private static void glRenderbufferStorageMultisampleAPPLE() {
    Command cmd = glRenderbufferStorageMultisampleAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_APPLE_framebuffer_multisample;
  }
  public static final Command glIsProgramARB = new Command();
  private static void glIsProgramARB() {
    Command cmd = glIsProgramARB;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glBlitFramebufferEXT = new Command();
  private static void glBlitFramebufferEXT() {
    Command cmd = glBlitFramebufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, ClearBufferMask);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_blit;
  }
  public static final Command glProgramEnvParameterI4iNV = new Command();
  private static void glProgramEnvParameterI4iNV() {
    Command cmd = glProgramEnvParameterI4iNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glTexSubImage4DSGIS = new Command();
  private static void glTexSubImage4DSGIS() {
    Command cmd = glTexSubImage4DSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_SGIS_texture4D;
  }
  public static final Command glGetProgramivNV = new Command();
  private static void glGetProgramivNV() {
    Command cmd = glGetProgramivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glTextureSubImage1D = new Command();
  private static void glTextureSubImage1D() {
    Command cmd = glTextureSubImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glLightiv = new Command();
  private static void glLightiv() {
    Command cmd = glLightiv;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("pname", GLenum, LightParameter);
  }
  public static final Command glGetMultiTexGenfvEXT = new Command();
  private static void glGetMultiTexGenfvEXT() {
    Command cmd = glGetMultiTexGenfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCompressedTexImage2DARB = new Command();
  private static void glCompressedTexImage2DARB() {
    Command cmd = glCompressedTexImage2DARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glPathStringNV = new Command();
  private static void glPathStringNV() {
    Command cmd = glPathStringNV;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetMapControlPointsNV = new Command();
  private static void glGetMapControlPointsNV() {
    Command cmd = glGetMapControlPointsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("packed", GLboolean, Boolean);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glDeformationMap3dSGIX = new Command();
  private static void glDeformationMap3dSGIX() {
    Command cmd = glDeformationMap3dSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, FfdTargetSGIX);
    cmd.extension = GL_SGIX_polynomial_ffd;
  }
  public static final Command glGetPointerIndexedvEXT = new Command();
  private static void glGetPointerIndexedvEXT() {
    Command cmd = glGetPointerIndexedvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetVertexAttribivNV = new Command();
  private static void glGetVertexAttribivNV() {
    Command cmd = glGetVertexAttribivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glSetLocalConstantEXT = new Command();
  private static void glSetLocalConstantEXT() {
    Command cmd = glSetLocalConstantEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glIsVertexArray = new Command();
  private static void glIsVertexArray() {
    Command cmd = glIsVertexArray;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_vertex_array_object;
  }
  public static final Command glTexEnvf = new Command();
  private static void glTexEnvf() {
    Command cmd = glTexEnvf;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
  }
  public static final Command glTexEnvi = new Command();
  private static void glTexEnvi() {
    Command cmd = glTexEnvi;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
  }
  public static final Command glFramebufferTexture2DMultisampleEXT = new Command();
  private static void glFramebufferTexture2DMultisampleEXT() {
    Command cmd = glFramebufferTexture2DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_multisampled_render_to_texture;
  }
  public static final Command glMultiTexCoord1sARB = new Command();
  private static void glMultiTexCoord1sARB() {
    Command cmd = glMultiTexCoord1sARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glVideoCaptureNV = new Command();
  private static void glVideoCaptureNV() {
    Command cmd = glVideoCaptureNV;
    cmd.returnGroup = _null_;
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glFogi = new Command();
  private static void glFogi() {
    Command cmd = glFogi;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FogParameter);
  }
  public static final Command glGetnMinmax = new Command();
  private static void glGetnMinmax() {
    Command cmd = glGetnMinmax;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glFenceSync = new Command();
  private static void glFenceSync() {
    Command cmd = glFenceSync;
    cmd.returnGroup = _null_;
    cmd.addParam("condition", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_ARB_sync;
  }
  public static final Command glFramebufferDrawBufferEXT = new Command();
  private static void glFramebufferDrawBufferEXT() {
    Command cmd = glFramebufferDrawBufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, DrawBufferMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFogx = new Command();
  private static void glFogx() {
    Command cmd = glFogx;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glLightfv = new Command();
  private static void glLightfv() {
    Command cmd = glLightfv;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("pname", GLenum, LightParameter);
  }
  public static final Command glGetProgramPipelineivEXT = new Command();
  private static void glGetProgramPipelineivEXT() {
    Command cmd = glGetProgramPipelineivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glProgramUniformMatrix3fvEXT = new Command();
  private static void glProgramUniformMatrix3fvEXT() {
    Command cmd = glProgramUniformMatrix3fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glGetMaterialxv = new Command();
  private static void glGetMaterialxv() {
    Command cmd = glGetMaterialxv;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glFogf = new Command();
  private static void glFogf() {
    Command cmd = glFogf;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FogParameter);
  }
  public static final Command glProgramUniformMatrix4x2fvEXT = new Command();
  private static void glProgramUniformMatrix4x2fvEXT() {
    Command cmd = glProgramUniformMatrix4x2fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glDeformSGIX = new Command();
  private static void glDeformSGIX() {
    Command cmd = glDeformSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, FfdMaskSGIX);
    cmd.extension = GL_SGIX_polynomial_ffd;
  }
  public static final Command glStartTilingQCOM = new Command();
  private static void glStartTilingQCOM() {
    Command cmd = glStartTilingQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("preserveMask", GLbitfield, _null_);
    cmd.extension = GL_QCOM_tiled_rendering;
  }
  public static final Command glTexCoordPointerListIBM = new Command();
  private static void glTexCoordPointerListIBM() {
    Command cmd = glTexCoordPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, TexCoordPointerType);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glLightxvOES = new Command();
  private static void glLightxvOES() {
    Command cmd = glLightxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetHistogramEXT = new Command();
  private static void glGetHistogramEXT() {
    Command cmd = glGetHistogramEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, HistogramTargetEXT);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glFramebufferSampleLocationsfvNV = new Command();
  private static void glFramebufferSampleLocationsfvNV() {
    Command cmd = glFramebufferSampleLocationsfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_sample_locations;
  }
  public static final Command glPolygonMode = new Command();
  private static void glPolygonMode() {
    Command cmd = glPolygonMode;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("mode", GLenum, PolygonMode);
  }
  public static final Command glNamedBufferStorageExternalEXT = new Command();
  private static void glNamedBufferStorageExternalEXT() {
    Command cmd = glNamedBufferStorageExternalEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
  }
  public static final Command glTexEnvx = new Command();
  private static void glTexEnvx() {
    Command cmd = glTexEnvx;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glVertexAttribP4uiv = new Command();
  private static void glVertexAttribP4uiv() {
    Command cmd = glVertexAttribP4uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetQueryivARB = new Command();
  private static void glGetQueryivARB() {
    Command cmd = glGetQueryivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_occlusion_query;
  }
  public static final Command glInvalidateSubFramebuffer = new Command();
  private static void glInvalidateSubFramebuffer() {
    Command cmd = glInvalidateSubFramebuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachments", GLenum, _null_);
  }
  public static final Command glMultiTexCoord2fvARB = new Command();
  private static void glMultiTexCoord2fvARB() {
    Command cmd = glMultiTexCoord2fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glDrawArraysEXT = new Command();
  private static void glDrawArraysEXT() {
    Command cmd = glDrawArraysEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glPointParameteriNV = new Command();
  private static void glPointParameteriNV() {
    Command cmd = glPointParameteriNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_point_sprite;
  }
  public static final Command glEGLImageTargetTexture2DOES = new Command();
  private static void glEGLImageTargetTexture2DOES() {
    Command cmd = glEGLImageTargetTexture2DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glFeedbackBufferxOES = new Command();
  private static void glFeedbackBufferxOES() {
    Command cmd = glFeedbackBufferxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glBufferParameteriAPPLE = new Command();
  private static void glBufferParameteriAPPLE() {
    Command cmd = glBufferParameteriAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_flush_buffer_range;
  }
  public static final Command glPatchParameteriOES = new Command();
  private static void glPatchParameteriOES() {
    Command cmd = glPatchParameteriOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_tessellation_shader;
  }
  public static final Command glBufferDataARB = new Command();
  private static void glBufferDataARB() {
    Command cmd = glBufferDataARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("usage", GLenum, BufferUsageARB);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glGetLocalConstantFloatvEXT = new Command();
  private static void glGetLocalConstantFloatvEXT() {
    Command cmd = glGetLocalConstantFloatvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glClear = new Command();
  private static void glClear() {
    Command cmd = glClear;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, ClearBufferMask);
  }
  public static final Command glEndTilingQCOM = new Command();
  private static void glEndTilingQCOM() {
    Command cmd = glEndTilingQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("preserveMask", GLbitfield, _null_);
    cmd.extension = GL_QCOM_tiled_rendering;
  }
  public static final Command glWriteMaskEXT = new Command();
  private static void glWriteMaskEXT() {
    Command cmd = glWriteMaskEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("outX", GLenum, _null_);
    cmd.addParam("outY", GLenum, _null_);
    cmd.addParam("outZ", GLenum, _null_);
    cmd.addParam("outW", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glGetFramebufferAttachmentParameteriv = new Command();
  private static void glGetFramebufferAttachmentParameteriv() {
    Command cmd = glGetFramebufferAttachmentParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glReadBuffer = new Command();
  private static void glReadBuffer() {
    Command cmd = glReadBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, ReadBufferMode);
  }
  public static final Command glTextureImage3DEXT = new Command();
  private static void glTextureImage3DEXT() {
    Command cmd = glTextureImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glPixelTransferxOES = new Command();
  private static void glPixelTransferxOES() {
    Command cmd = glPixelTransferxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glDrawArraysInstanced = new Command();
  private static void glDrawArraysInstanced() {
    Command cmd = glDrawArraysInstanced;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glTextureParameterIivEXT = new Command();
  private static void glTextureParameterIivEXT() {
    Command cmd = glTextureParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDrawBuffer = new Command();
  private static void glDrawBuffer() {
    Command cmd = glDrawBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("buf", GLenum, DrawBufferMode);
  }
  public static final Command glProgramEnvParameterI4uiNV = new Command();
  private static void glProgramEnvParameterI4uiNV() {
    Command cmd = glProgramEnvParameterI4uiNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glMultiTexRenderbufferEXT = new Command();
  private static void glMultiTexRenderbufferEXT() {
    Command cmd = glMultiTexRenderbufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glSamplerParameterIuivEXT = new Command();
  private static void glSamplerParameterIuivEXT() {
    Command cmd = glSamplerParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_texture_border_clamp;
  }
  public static final Command glRenderbufferStorageMultisampleEXT = new Command();
  private static void glRenderbufferStorageMultisampleEXT() {
    Command cmd = glRenderbufferStorageMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_multisampled_render_to_texture;
  }
  public static final Command glShaderOp3EXT = new Command();
  private static void glShaderOp3EXT() {
    Command cmd = glShaderOp3EXT;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glIsRenderbuffer = new Command();
  private static void glIsRenderbuffer() {
    Command cmd = glIsRenderbuffer;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glMatrixMult3x3fNV = new Command();
  private static void glMatrixMult3x3fNV() {
    Command cmd = glMatrixMult3x3fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("matrixMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetProgramResourceName = new Command();
  private static void glGetProgramResourceName() {
    Command cmd = glGetProgramResourceName;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.extension = GL_ARB_program_interface_query;
  }
  public static final Command glMultiTexGendvEXT = new Command();
  private static void glMultiTexGendvEXT() {
    Command cmd = glMultiTexGendvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glNamedRenderbufferStorageMultisampleEXT = new Command();
  private static void glNamedRenderbufferStorageMultisampleEXT() {
    Command cmd = glNamedRenderbufferStorageMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glColorMaskIndexedEXT = new Command();
  private static void glColorMaskIndexedEXT() {
    Command cmd = glColorMaskIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("r", GLboolean, Boolean);
    cmd.addParam("g", GLboolean, Boolean);
    cmd.addParam("b", GLboolean, Boolean);
    cmd.addParam("a", GLboolean, Boolean);
  }
  public static final Command glCopyTextureImage1DEXT = new Command();
  private static void glCopyTextureImage1DEXT() {
    Command cmd = glCopyTextureImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix4dv = new Command();
  private static void glUniformMatrix4dv() {
    Command cmd = glUniformMatrix4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glGetCombinerOutputParameterivNV = new Command();
  private static void glGetCombinerOutputParameterivNV() {
    Command cmd = glGetCombinerOutputParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("portion", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glMatrixTranslatedEXT = new Command();
  private static void glMatrixTranslatedEXT() {
    Command cmd = glMatrixTranslatedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetSemaphoreParameterui64vEXT = new Command();
  private static void glGetSemaphoreParameterui64vEXT() {
    Command cmd = glGetSemaphoreParameterui64vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, SemaphoreParameterName);
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glVertexStream3ivATI = new Command();
  private static void glVertexStream3ivATI() {
    Command cmd = glVertexStream3ivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glUniformMatrix2x3fvNV = new Command();
  private static void glUniformMatrix2x3fvNV() {
    Command cmd = glUniformMatrix2x3fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_NV_non_square_matrices;
  }
  public static final Command glVertexAttribP4ui = new Command();
  private static void glVertexAttribP4ui() {
    Command cmd = glVertexAttribP4ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetVideoi64vNV = new Command();
  private static void glGetVideoi64vNV() {
    Command cmd = glGetVideoi64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_present_video;
  }
  public static final Command glMultiTexCoordP2ui = new Command();
  private static void glMultiTexCoordP2ui() {
    Command cmd = glMultiTexCoordP2ui;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glTextureImage3DMultisampleNV = new Command();
  private static void glTextureImage3DMultisampleNV() {
    Command cmd = glTextureImage3DMultisampleNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_NV_texture_multisample;
  }
  public static final Command glGetTexGenxvOES = new Command();
  private static void glGetTexGenxvOES() {
    Command cmd = glGetTexGenxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glMultiTexCoord2sv = new Command();
  private static void glMultiTexCoord2sv() {
    Command cmd = glMultiTexCoord2sv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glWaitSyncAPPLE = new Command();
  private static void glWaitSyncAPPLE() {
    Command cmd = glWaitSyncAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_APPLE_sync;
  }
  public static final Command glCopyMultiTexImage2DEXT = new Command();
  private static void glCopyMultiTexImage2DEXT() {
    Command cmd = glCopyMultiTexImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glBlendEquationSeparateiARB = new Command();
  private static void glBlendEquationSeparateiARB() {
    Command cmd = glBlendEquationSeparateiARB;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, _null_);
    cmd.addParam("modeAlpha", GLenum, _null_);
  }
  public static final Command glGetProgramInterfaceiv = new Command();
  private static void glGetProgramInterfaceiv() {
    Command cmd = glGetProgramInterfaceiv;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_program_interface_query;
  }
  public static final Command glVariantArrayObjectATI = new Command();
  private static void glVariantArrayObjectATI() {
    Command cmd = glVariantArrayObjectATI;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glUniformMatrix4fv = new Command();
  private static void glUniformMatrix4fv() {
    Command cmd = glUniformMatrix4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glMultiTexCoord2xvOES = new Command();
  private static void glMultiTexCoord2xvOES() {
    Command cmd = glMultiTexCoord2xvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetPixelTexGenParameterivSGIS = new Command();
  private static void glGetPixelTexGenParameterivSGIS() {
    Command cmd = glGetPixelTexGenParameterivSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTexGenParameterNameSGIS);
    cmd.extension = GL_SGIS_pixel_texture;
  }
  public static final Command glSemaphoreParameterui64vEXT = new Command();
  private static void glSemaphoreParameterui64vEXT() {
    Command cmd = glSemaphoreParameterui64vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, SemaphoreParameterName);
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glImportMemoryWin32NameEXT = new Command();
  private static void glImportMemoryWin32NameEXT() {
    Command cmd = glImportMemoryWin32NameEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("handleType", GLenum, ExternalHandleType);
    cmd.extension = GL_EXT_memory_object_win32;
  }
  public static final Command glGenSymbolsEXT = new Command();
  private static void glGenSymbolsEXT() {
    Command cmd = glGenSymbolsEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("datatype", GLenum, _null_);
    cmd.addParam("storagetype", GLenum, _null_);
    cmd.addParam("range", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glTexCoordP4uiv = new Command();
  private static void glTexCoordP4uiv() {
    Command cmd = glTexCoordP4uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetFragmentMaterialfvSGIX = new Command();
  private static void glGetFragmentMaterialfvSGIX() {
    Command cmd = glGetFragmentMaterialfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glGetTexBumpParameterfvATI = new Command();
  private static void glGetTexBumpParameterfvATI() {
    Command cmd = glGetTexBumpParameterfvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_envmap_bumpmap;
  }
  public static final Command glSampleCoverage = new Command();
  private static void glSampleCoverage() {
    Command cmd = glSampleCoverage;
    cmd.returnGroup = _null_;
    cmd.addParam("invert", GLboolean, Boolean);
  }
  public static final Command glGetTexParameterxvOES = new Command();
  private static void glGetTexParameterxvOES() {
    Command cmd = glGetTexParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetBooleanIndexedvEXT = new Command();
  private static void glGetBooleanIndexedvEXT() {
    Command cmd = glGetBooleanIndexedvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("data", GLboolean, Boolean);
  }
  public static final Command glMultiTexCoord3fvARB = new Command();
  private static void glMultiTexCoord3fvARB() {
    Command cmd = glMultiTexCoord3fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glVertexStream2iATI = new Command();
  private static void glVertexStream2iATI() {
    Command cmd = glVertexStream2iATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glMultiTexCoord4xOES = new Command();
  private static void glMultiTexCoord4xOES() {
    Command cmd = glMultiTexCoord4xOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glDrawArrays = new Command();
  private static void glDrawArrays() {
    Command cmd = glDrawArrays;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glNamedFramebufferParameteriEXT = new Command();
  private static void glNamedFramebufferParameteriEXT() {
    Command cmd = glNamedFramebufferParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMatrixLoadIdentityEXT = new Command();
  private static void glMatrixLoadIdentityEXT() {
    Command cmd = glMatrixLoadIdentityEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glSamplerParameteri = new Command();
  private static void glSamplerParameteri() {
    Command cmd = glSamplerParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glSamplerParameterf = new Command();
  private static void glSamplerParameterf() {
    Command cmd = glSamplerParameterf;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glSampleCoverageARB = new Command();
  private static void glSampleCoverageARB() {
    Command cmd = glSampleCoverageARB;
    cmd.returnGroup = _null_;
    cmd.addParam("invert", GLboolean, Boolean);
    cmd.extension = GL_ARB_multisample;
  }
  public static final Command glWeightPointerARB = new Command();
  private static void glWeightPointerARB() {
    Command cmd = glWeightPointerARB;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_blend;
  }
  public static final Command glDrawTransformFeedbackStream = new Command();
  private static void glDrawTransformFeedbackStream() {
    Command cmd = glDrawTransformFeedbackStream;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ARB_transform_feedback3;
  }
  public static final Command glRenderMode = new Command();
  private static void glRenderMode() {
    Command cmd = glRenderMode;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, RenderingMode);
  }
  public static final Command glTextureRangeAPPLE = new Command();
  private static void glTextureRangeAPPLE() {
    Command cmd = glTextureRangeAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_APPLE_texture_range;
  }
  public static final Command glNormalStream3fvATI = new Command();
  private static void glNormalStream3fvATI() {
    Command cmd = glNormalStream3fvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glEndQueryIndexed = new Command();
  private static void glEndQueryIndexed() {
    Command cmd = glEndQueryIndexed;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_transform_feedback3;
  }
  public static final Command glMultiTexCoord4bOES = new Command();
  private static void glMultiTexCoord4bOES() {
    Command cmd = glMultiTexCoord4bOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glNewList = new Command();
  private static void glNewList() {
    Command cmd = glNewList;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, ListMode);
  }
  public static final Command glVertexStream2fvATI = new Command();
  private static void glVertexStream2fvATI() {
    Command cmd = glVertexStream2fvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glProgramLocalParameterI4uivNV = new Command();
  private static void glProgramLocalParameterI4uivNV() {
    Command cmd = glProgramLocalParameterI4uivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glBufferSubDataARB = new Command();
  private static void glBufferSubDataARB() {
    Command cmd = glBufferSubDataARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glProgramUniformMatrix2x4dv = new Command();
  private static void glProgramUniformMatrix2x4dv() {
    Command cmd = glProgramUniformMatrix2x4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glBlitFramebufferNV = new Command();
  private static void glBlitFramebufferNV() {
    Command cmd = glBlitFramebufferNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_NV_framebuffer_blit;
  }
  public static final Command glFlushMappedBufferRangeAPPLE = new Command();
  private static void glFlushMappedBufferRangeAPPLE() {
    Command cmd = glFlushMappedBufferRangeAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_APPLE_flush_buffer_range;
  }
  public static final Command glPixelMapfv = new Command();
  private static void glPixelMapfv() {
    Command cmd = glPixelMapfv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, PixelMap);
  }
  public static final Command glGetObjectLabelKHR = new Command();
  private static void glGetObjectLabelKHR() {
    Command cmd = glGetObjectLabelKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glPushClientAttribDefaultEXT = new Command();
  private static void glPushClientAttribDefaultEXT() {
    Command cmd = glPushClientAttribDefaultEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, ClientAttribMask);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord2hvNV = new Command();
  private static void glMultiTexCoord2hvNV() {
    Command cmd = glMultiTexCoord2hvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glVDPAURegisterVideoSurfaceNV = new Command();
  private static void glVDPAURegisterVideoSurfaceNV() {
    Command cmd = glVDPAURegisterVideoSurfaceNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vdpau_interop;
  }
  public static final Command glGetVertexAttribdvARB = new Command();
  private static void glGetVertexAttribdvARB() {
    Command cmd = glGetVertexAttribdvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_shader;
  }
  public static final Command glUniformMatrix3x2dv = new Command();
  private static void glUniformMatrix3x2dv() {
    Command cmd = glUniformMatrix3x2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glStencilOp = new Command();
  private static void glStencilOp() {
    Command cmd = glStencilOp;
    cmd.returnGroup = _null_;
    cmd.addParam("fail", GLenum, StencilOp);
    cmd.addParam("zfail", GLenum, StencilOp);
    cmd.addParam("zpass", GLenum, StencilOp);
  }
  public static final Command glGetnMapivARB = new Command();
  private static void glGetnMapivARB() {
    Command cmd = glGetnMapivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glBindBuffer = new Command();
  private static void glBindBuffer() {
    Command cmd = glBindBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
  }
  public static final Command glTexCoordP3ui = new Command();
  private static void glTexCoordP3ui() {
    Command cmd = glTexCoordP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glVertexAttribIPointerEXT = new Command();
  private static void glVertexAttribIPointerEXT() {
    Command cmd = glVertexAttribIPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program4;
  }
  public static final Command glVertexArrayParameteriAPPLE = new Command();
  private static void glVertexArrayParameteriAPPLE() {
    Command cmd = glVertexArrayParameteriAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_vertex_array_range;
  }
  public static final Command glProgramUniformMatrix3fv = new Command();
  private static void glProgramUniformMatrix3fv() {
    Command cmd = glProgramUniformMatrix3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glNormalPointer = new Command();
  private static void glNormalPointer() {
    Command cmd = glNormalPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, NormalPointerType);
  }
  public static final Command glCompressedTexSubImage2DARB = new Command();
  private static void glCompressedTexSubImage2DARB() {
    Command cmd = glCompressedTexSubImage2DARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glGetNamedBufferParameteri64v = new Command();
  private static void glGetNamedBufferParameteri64v() {
    Command cmd = glGetNamedBufferParameteri64v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetActiveUniformARB = new Command();
  private static void glGetActiveUniformARB() {
    Command cmd = glGetActiveUniformARB;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glBegin = new Command();
  private static void glBegin() {
    Command cmd = glBegin;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glEnable = new Command();
  private static void glEnable() {
    Command cmd = glEnable;
    cmd.returnGroup = _null_;
    cmd.addParam("cap", GLenum, EnableCap);
  }
  public static final Command glApplyTextureEXT = new Command();
  private static void glApplyTextureEXT() {
    Command cmd = glApplyTextureEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_EXT_light_texture;
  }
  public static final Command glMulticastGetQueryObjecti64vNV = new Command();
  private static void glMulticastGetQueryObjecti64vNV() {
    Command cmd = glMulticastGetQueryObjecti64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glTexParameterIuivEXT = new Command();
  private static void glTexParameterIuivEXT() {
    Command cmd = glTexParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_texture_integer;
  }
  public static final Command glTexturePageCommitmentEXT = new Command();
  private static void glTexturePageCommitmentEXT() {
    Command cmd = glTexturePageCommitmentEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("commit", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDrawArraysInstancedBaseInstanceEXT = new Command();
  private static void glDrawArraysInstancedBaseInstanceEXT() {
    Command cmd = glDrawArraysInstancedBaseInstanceEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glIsProgramNV = new Command();
  private static void glIsProgramNV() {
    Command cmd = glIsProgramNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glTextureBufferRange = new Command();
  private static void glTextureBufferRange() {
    Command cmd = glTextureBufferRange;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glBeginQueryEXT = new Command();
  private static void glBeginQueryEXT() {
    Command cmd = glBeginQueryEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_occlusion_query_boolean;
  }
  public static final Command glGetQueryObjectivEXT = new Command();
  private static void glGetQueryObjectivEXT() {
    Command cmd = glGetQueryObjectivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_disjoint_timer_query;
  }
  public static final Command glPixelTexGenParameterivSGIS = new Command();
  private static void glPixelTexGenParameterivSGIS() {
    Command cmd = glPixelTexGenParameterivSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTexGenParameterNameSGIS);
    cmd.extension = GL_SGIS_pixel_texture;
  }
  public static final Command glGetVertexAttribLui64vARB = new Command();
  private static void glGetVertexAttribLui64vARB() {
    Command cmd = glGetVertexAttribLui64vARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_bindless_texture;
  }
  public static final Command glProgramUniformMatrix3dv = new Command();
  private static void glProgramUniformMatrix3dv() {
    Command cmd = glProgramUniformMatrix3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glGetLightxv = new Command();
  private static void glGetLightxv() {
    Command cmd = glGetLightxv;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetVertexAttribIuivEXT = new Command();
  private static void glGetVertexAttribIuivEXT() {
    Command cmd = glGetVertexAttribIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program4;
  }
  public static final Command glBlendFuncSeparateiARB = new Command();
  private static void glBlendFuncSeparateiARB() {
    Command cmd = glBlendFuncSeparateiARB;
    cmd.returnGroup = _null_;
    cmd.addParam("srcRGB", GLenum, _null_);
    cmd.addParam("dstRGB", GLenum, _null_);
    cmd.addParam("srcAlpha", GLenum, _null_);
    cmd.addParam("dstAlpha", GLenum, _null_);
  }
  public static final Command glNamedProgramLocalParametersI4ivEXT = new Command();
  private static void glNamedProgramLocalParametersI4ivEXT() {
    Command cmd = glNamedProgramLocalParametersI4ivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureSubImage1DEXT = new Command();
  private static void glTextureSubImage1DEXT() {
    Command cmd = glTextureSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCompressedTextureSubImage3DEXT = new Command();
  private static void glCompressedTextureSubImage3DEXT() {
    Command cmd = glCompressedTextureSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDrawElementsInstancedBaseInstance = new Command();
  private static void glDrawElementsInstancedBaseInstance() {
    Command cmd = glDrawElementsInstancedBaseInstance;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glMatrixPopEXT = new Command();
  private static void glMatrixPopEXT() {
    Command cmd = glMatrixPopEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFrontFace = new Command();
  private static void glFrontFace() {
    Command cmd = glFrontFace;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, FrontFaceDirection);
  }
  public static final Command glProgramUniformMatrix2x4fv = new Command();
  private static void glProgramUniformMatrix2x4fv() {
    Command cmd = glProgramUniformMatrix2x4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glUpdateObjectBufferATI = new Command();
  private static void glUpdateObjectBufferATI() {
    Command cmd = glUpdateObjectBufferATI;
    cmd.returnGroup = _null_;
    cmd.addParam("preserve", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glAlphaFunc = new Command();
  private static void glAlphaFunc() {
    Command cmd = glAlphaFunc;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, AlphaFunction);
  }
  public static final Command glTextureBufferEXT = new Command();
  private static void glTextureBufferEXT() {
    Command cmd = glTextureBufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDrawElementsInstancedARB = new Command();
  private static void glDrawElementsInstancedARB() {
    Command cmd = glDrawElementsInstancedARB;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glMulticastBlitFramebufferNV = new Command();
  private static void glMulticastBlitFramebufferNV() {
    Command cmd = glMulticastBlitFramebufferNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glClearNamedBufferSubData = new Command();
  private static void glClearNamedBufferSubData() {
    Command cmd = glClearNamedBufferSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMinmaxEXT = new Command();
  private static void glMinmaxEXT() {
    Command cmd = glMinmaxEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MinmaxTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("sink", GLboolean, Boolean);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glNormalStream3bATI = new Command();
  private static void glNormalStream3bATI() {
    Command cmd = glNormalStream3bATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glTessellationModeAMD = new Command();
  private static void glTessellationModeAMD() {
    Command cmd = glTessellationModeAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_AMD_vertex_shader_tessellator;
  }
  public static final Command glGetTexParameterIuiv = new Command();
  private static void glGetTexParameterIuiv() {
    Command cmd = glGetTexParameterIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
  }
  public static final Command glSamplerParameterfv = new Command();
  private static void glSamplerParameterfv() {
    Command cmd = glSamplerParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glTexCoordP1uiv = new Command();
  private static void glTexCoordP1uiv() {
    Command cmd = glTexCoordP1uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glNamedBufferStorageEXT = new Command();
  private static void glNamedBufferStorageEXT() {
    Command cmd = glNamedBufferStorageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glVertexAttribP1uiv = new Command();
  private static void glVertexAttribP1uiv() {
    Command cmd = glVertexAttribP1uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glTexParameterIiv = new Command();
  private static void glTexParameterIiv() {
    Command cmd = glTexParameterIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
  }
  public static final Command glMatrixLoadTransposedEXT = new Command();
  private static void glMatrixLoadTransposedEXT() {
    Command cmd = glMatrixLoadTransposedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetVertexAttribLdvEXT = new Command();
  private static void glGetVertexAttribLdvEXT() {
    Command cmd = glGetVertexAttribLdvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_attrib_64bit;
  }
  public static final Command glSamplerParameteriv = new Command();
  private static void glSamplerParameteriv() {
    Command cmd = glSamplerParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glTexEnvxv = new Command();
  private static void glTexEnvxv() {
    Command cmd = glTexEnvxv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetVariantArrayObjectivATI = new Command();
  private static void glGetVariantArrayObjectivATI() {
    Command cmd = glGetVariantArrayObjectivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glFramebufferTextureLayerDownsampleIMG = new Command();
  private static void glFramebufferTextureLayerDownsampleIMG() {
    Command cmd = glFramebufferTextureLayerDownsampleIMG;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_IMG_framebuffer_downsample;
  }
  public static final Command glGetConvolutionParameterivEXT = new Command();
  private static void glGetConvolutionParameterivEXT() {
    Command cmd = glGetConvolutionParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("pname", GLenum, ConvolutionParameterEXT);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glGetActiveUniformsiv = new Command();
  private static void glGetActiveUniformsiv() {
    Command cmd = glGetActiveUniformsiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_uniform_buffer_object;
  }
  public static final Command glNamedFramebufferTexture = new Command();
  private static void glNamedFramebufferTexture() {
    Command cmd = glNamedFramebufferTexture;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glUniformMatrix3fvARB = new Command();
  private static void glUniformMatrix3fvARB() {
    Command cmd = glUniformMatrix3fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glTransformPathNV = new Command();
  private static void glTransformPathNV() {
    Command cmd = glTransformPathNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glMultiTexCoord3dv = new Command();
  private static void glMultiTexCoord3dv() {
    Command cmd = glMultiTexCoord3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMap2xOES = new Command();
  private static void glMap2xOES() {
    Command cmd = glMap2xOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glIsVariantEnabledEXT = new Command();
  private static void glIsVariantEnabledEXT() {
    Command cmd = glIsVariantEnabledEXT;
    cmd.returnGroup = Boolean;
    cmd.addParam("cap", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glGetFramebufferParameterfvAMD = new Command();
  private static void glGetFramebufferParameterfvAMD() {
    Command cmd = glGetFramebufferParameterfvAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_framebuffer_sample_positions;
  }
  public static final Command glExecuteProgramNV = new Command();
  private static void glExecuteProgramNV() {
    Command cmd = glExecuteProgramNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glFragmentMaterialfSGIX = new Command();
  private static void glFragmentMaterialfSGIX() {
    Command cmd = glFragmentMaterialfSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glEnablei = new Command();
  private static void glEnablei() {
    Command cmd = glEnablei;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glReplacementCodePointerSUN = new Command();
  private static void glReplacementCodePointerSUN() {
    Command cmd = glReplacementCodePointerSUN;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_SUN_triangle_list;
  }
  public static final Command glCallLists = new Command();
  private static void glCallLists() {
    Command cmd = glCallLists;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ListNameType);
  }
  public static final Command glColorMaski = new Command();
  private static void glColorMaski() {
    Command cmd = glColorMaski;
    cmd.returnGroup = _null_;
    cmd.addParam("r", GLboolean, Boolean);
    cmd.addParam("g", GLboolean, Boolean);
    cmd.addParam("b", GLboolean, Boolean);
    cmd.addParam("a", GLboolean, Boolean);
  }
  public static final Command glCopyConvolutionFilter1D = new Command();
  private static void glCopyConvolutionFilter1D() {
    Command cmd = glCopyConvolutionFilter1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glMultiTexCoord3fv = new Command();
  private static void glMultiTexCoord3fv() {
    Command cmd = glMultiTexCoord3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMultiTexCoord4fARB = new Command();
  private static void glMultiTexCoord4fARB() {
    Command cmd = glMultiTexCoord4fARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glNamedProgramLocalParametersI4uivEXT = new Command();
  private static void glNamedProgramLocalParametersI4uivEXT() {
    Command cmd = glNamedProgramLocalParametersI4uivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGenNamesAMD = new Command();
  private static void glGenNamesAMD() {
    Command cmd = glGenNamesAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_AMD_name_gen_delete;
  }
  public static final Command glGetIntegeri_v = new Command();
  private static void glGetIntegeri_v() {
    Command cmd = glGetIntegeri_v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_uniform_buffer_object;
  }
  public static final Command glGetMultiTexParameterIivEXT = new Command();
  private static void glGetMultiTexParameterIivEXT() {
    Command cmd = glGetMultiTexParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glImportSyncEXT = new Command();
  private static void glImportSyncEXT() {
    Command cmd = glImportSyncEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("external_sync_type", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_EXT_x11_sync_object;
  }
  public static final Command glCopyConvolutionFilter2D = new Command();
  private static void glCopyConvolutionFilter2D() {
    Command cmd = glCopyConvolutionFilter2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glDisableVertexAttribAPPLE = new Command();
  private static void glDisableVertexAttribAPPLE() {
    Command cmd = glDisableVertexAttribAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_vertex_program_evaluators;
  }
  public static final Command glMatrixMultTransposedEXT = new Command();
  private static void glMatrixMultTransposedEXT() {
    Command cmd = glMatrixMultTransposedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetBufferParameteriv = new Command();
  private static void glGetBufferParameteriv() {
    Command cmd = glGetBufferParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glDrawBuffers = new Command();
  private static void glDrawBuffers() {
    Command cmd = glDrawBuffers;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, _null_);
  }
  public static final Command glSharpenTexFuncSGIS = new Command();
  private static void glSharpenTexFuncSGIS() {
    Command cmd = glSharpenTexFuncSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_SGIS_sharpen_texture;
  }
  public static final Command glSamplePatternSGIS = new Command();
  private static void glSamplePatternSGIS() {
    Command cmd = glSamplePatternSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pattern", GLenum, SamplePatternSGIS);
    cmd.extension = GL_SGIS_multisample;
  }
  public static final Command glGetInternalformatSampleivNV = new Command();
  private static void glGetInternalformatSampleivNV() {
    Command cmd = glGetInternalformatSampleivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_internalformat_sample_query;
  }
  public static final Command glDebugMessageControlARB = new Command();
  private static void glDebugMessageControlARB() {
    Command cmd = glDebugMessageControlARB;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.addParam("enabled", GLboolean, Boolean);
    cmd.extension = GL_ARB_debug_output;
  }
  public static final Command glGetNamedProgramLocalParameterfvEXT = new Command();
  private static void glGetNamedProgramLocalParameterfvEXT() {
    Command cmd = glGetNamedProgramLocalParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glStencilMaskSeparate = new Command();
  private static void glStencilMaskSeparate() {
    Command cmd = glStencilMaskSeparate;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, StencilFaceDirection);
  }
  public static final Command glGetVideoui64vNV = new Command();
  private static void glGetVideoui64vNV() {
    Command cmd = glGetVideoui64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_present_video;
  }
  public static final Command glDrawElementsInstancedBaseVertexEXT = new Command();
  private static void glDrawElementsInstancedBaseVertexEXT() {
    Command cmd = glDrawElementsInstancedBaseVertexEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glGetDoublei_v = new Command();
  private static void glGetDoublei_v() {
    Command cmd = glGetDoublei_v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_viewport_array;
  }
  public static final Command glBlendFuncIndexedAMD = new Command();
  private static void glBlendFuncIndexedAMD() {
    Command cmd = glBlendFuncIndexedAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.addParam("dst", GLenum, _null_);
  }
  public static final Command glMultiTexCoord3iv = new Command();
  private static void glMultiTexCoord3iv() {
    Command cmd = glMultiTexCoord3iv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMultiTexCoord3dARB = new Command();
  private static void glMultiTexCoord3dARB() {
    Command cmd = glMultiTexCoord3dARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetColorTableParameterivEXT = new Command();
  private static void glGetColorTableParameterivEXT() {
    Command cmd = glGetColorTableParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_paletted_texture;
  }
  public static final Command glGetVertexAttribfvNV = new Command();
  private static void glGetVertexAttribfvNV() {
    Command cmd = glGetVertexAttribfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glDisableVertexArrayEXT = new Command();
  private static void glDisableVertexArrayEXT() {
    Command cmd = glDisableVertexArrayEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetNamedProgramStringEXT = new Command();
  private static void glGetNamedProgramStringEXT() {
    Command cmd = glGetNamedProgramStringEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexGendv = new Command();
  private static void glTexGendv() {
    Command cmd = glTexGendv;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glNamedProgramLocalParameter4dEXT = new Command();
  private static void glNamedProgramLocalParameter4dEXT() {
    Command cmd = glNamedProgramLocalParameter4dEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glAcquireKeyedMutexWin32EXT = new Command();
  private static void glAcquireKeyedMutexWin32EXT() {
    Command cmd = glAcquireKeyedMutexWin32EXT;
    cmd.returnGroup = Boolean;
  }
  public static final Command glGetMultiTexParameterfvEXT = new Command();
  private static void glGetMultiTexParameterfvEXT() {
    Command cmd = glGetMultiTexParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramUniformMatrix2x4fvEXT = new Command();
  private static void glProgramUniformMatrix2x4fvEXT() {
    Command cmd = glProgramUniformMatrix2x4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glIsRenderbufferOES = new Command();
  private static void glIsRenderbufferOES() {
    Command cmd = glIsRenderbufferOES;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glGetClipPlanexOES = new Command();
  private static void glGetClipPlanexOES() {
    Command cmd = glGetClipPlanexOES;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTextureParameterivEXT = new Command();
  private static void glTextureParameterivEXT() {
    Command cmd = glTextureParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix4x3fvNV = new Command();
  private static void glUniformMatrix4x3fvNV() {
    Command cmd = glUniformMatrix4x3fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_NV_non_square_matrices;
  }
  public static final Command glColorSubTable = new Command();
  private static void glColorSubTable() {
    Command cmd = glColorSubTable;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glAreTexturesResidentEXT = new Command();
  private static void glAreTexturesResidentEXT() {
    Command cmd = glAreTexturesResidentEXT;
    cmd.returnGroup = Boolean;
    cmd.addParam("residences", GLboolean, Boolean);
    cmd.extension = GL_EXT_texture_object;
  }
  public static final Command glGetConvolutionParameteriv = new Command();
  private static void glGetConvolutionParameteriv() {
    Command cmd = glGetConvolutionParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glTestFenceAPPLE = new Command();
  private static void glTestFenceAPPLE() {
    Command cmd = glTestFenceAPPLE;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_APPLE_fence;
  }
  public static final Command glMultiTexSubImage2DEXT = new Command();
  private static void glMultiTexSubImage2DEXT() {
    Command cmd = glMultiTexSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexGenfv = new Command();
  private static void glTexGenfv() {
    Command cmd = glTexGenfv;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glGetConvolutionParameterfv = new Command();
  private static void glGetConvolutionParameterfv() {
    Command cmd = glGetConvolutionParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glClampColor = new Command();
  private static void glClampColor() {
    Command cmd = glClampColor;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("clamp", GLenum, _null_);
  }
  public static final Command glCompressedTextureImage2DEXT = new Command();
  private static void glCompressedTextureImage2DEXT() {
    Command cmd = glCompressedTextureImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetProgramStringARB = new Command();
  private static void glGetProgramStringARB() {
    Command cmd = glGetProgramStringARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glVertexPointerListIBM = new Command();
  private static void glVertexPointerListIBM() {
    Command cmd = glVertexPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glImageTransformParameteriHP = new Command();
  private static void glImageTransformParameteriHP() {
    Command cmd = glImageTransformParameteriHP;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_HP_image_transform;
  }
  public static final Command glDrawElements = new Command();
  private static void glDrawElements() {
    Command cmd = glDrawElements;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glSamplerParameterIuivOES = new Command();
  private static void glSamplerParameterIuivOES() {
    Command cmd = glSamplerParameterIuivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glMulticastCopyImageSubDataNV = new Command();
  private static void glMulticastCopyImageSubDataNV() {
    Command cmd = glMulticastCopyImageSubDataNV;
    cmd.returnGroup = _null_;
    cmd.addParam("dstGpuMask", GLbitfield, _null_);
    cmd.addParam("srcTarget", GLenum, _null_);
    cmd.addParam("dstTarget", GLenum, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glBlendFunciEXT = new Command();
  private static void glBlendFunciEXT() {
    Command cmd = glBlendFunciEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.addParam("dst", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glGetMultiTexEnvfvEXT = new Command();
  private static void glGetMultiTexEnvfvEXT() {
    Command cmd = glGetMultiTexEnvfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDisableiEXT = new Command();
  private static void glDisableiEXT() {
    Command cmd = glDisableiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glFogiv = new Command();
  private static void glFogiv() {
    Command cmd = glFogiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FogParameter);
  }
  public static final Command glBlendFunc = new Command();
  private static void glBlendFunc() {
    Command cmd = glBlendFunc;
    cmd.returnGroup = _null_;
    cmd.addParam("sfactor", GLenum, BlendingFactorSrc);
    cmd.addParam("dfactor", GLenum, BlendingFactorDest);
  }
  public static final Command glGetFixedv = new Command();
  private static void glGetFixedv() {
    Command cmd = glGetFixedv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glTexGeniv = new Command();
  private static void glTexGeniv() {
    Command cmd = glTexGeniv;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glMulticastGetQueryObjectivNV = new Command();
  private static void glMulticastGetQueryObjectivNV() {
    Command cmd = glMulticastGetQueryObjectivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glGetImageHandleNV = new Command();
  private static void glGetImageHandleNV() {
    Command cmd = glGetImageHandleNV;
    cmd.returnGroup = _null_;
    cmd.addParam("layered", GLboolean, Boolean);
    cmd.addParam("format", GLenum, _null_);
  }
  public static final Command glNamedFramebufferTexture2DEXT = new Command();
  private static void glNamedFramebufferTexture2DEXT() {
    Command cmd = glNamedFramebufferTexture2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord4ivARB = new Command();
  private static void glMultiTexCoord4ivARB() {
    Command cmd = glMultiTexCoord4ivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glFramebufferTextureLayerARB = new Command();
  private static void glFramebufferTextureLayerARB() {
    Command cmd = glFramebufferTextureLayerARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_ARB_geometry_shader4;
  }
  public static final Command glGetTextureParameterIiv = new Command();
  private static void glGetTextureParameterIiv() {
    Command cmd = glGetTextureParameterIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVertexAttribP3uiv = new Command();
  private static void glVertexAttribP3uiv() {
    Command cmd = glVertexAttribP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glTransformFeedbackVaryingsEXT = new Command();
  private static void glTransformFeedbackVaryingsEXT() {
    Command cmd = glTransformFeedbackVaryingsEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("bufferMode", GLenum, _null_);
    cmd.extension = GL_EXT_transform_feedback;
  }
  public static final Command glFogfv = new Command();
  private static void glFogfv() {
    Command cmd = glFogfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FogParameter);
  }
  public static final Command glMultiTexGenivEXT = new Command();
  private static void glMultiTexGenivEXT() {
    Command cmd = glMultiTexGenivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glEnableiNV = new Command();
  private static void glEnableiNV() {
    Command cmd = glEnableiNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_viewport_array;
  }
  public static final Command glMultiTexCoord4hNV = new Command();
  private static void glMultiTexCoord4hNV() {
    Command cmd = glMultiTexCoord4hNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glGetCommandHeaderNV = new Command();
  private static void glGetCommandHeaderNV() {
    Command cmd = glGetCommandHeaderNV;
    cmd.returnGroup = _null_;
    cmd.addParam("tokenID", GLenum, _null_);
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glUnmapBufferARB = new Command();
  private static void glUnmapBufferARB() {
    Command cmd = glUnmapBufferARB;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glUnmapNamedBufferEXT = new Command();
  private static void glUnmapNamedBufferEXT() {
    Command cmd = glUnmapNamedBufferEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetNamedProgramLocalParameterdvEXT = new Command();
  private static void glGetNamedProgramLocalParameterdvEXT() {
    Command cmd = glGetNamedProgramLocalParameterdvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetBufferParameterivARB = new Command();
  private static void glGetBufferParameterivARB() {
    Command cmd = glGetBufferParameterivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glMultiTexCoord2f = new Command();
  private static void glMultiTexCoord2f() {
    Command cmd = glMultiTexCoord2f;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMultiTexCoord2d = new Command();
  private static void glMultiTexCoord2d() {
    Command cmd = glMultiTexCoord2d;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMultiTexCoord2i = new Command();
  private static void glMultiTexCoord2i() {
    Command cmd = glMultiTexCoord2i;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glReadnPixelsKHR = new Command();
  private static void glReadnPixelsKHR() {
    Command cmd = glReadnPixelsKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_KHR_robustness;
  }
  public static final Command glUniformMatrix4x3dv = new Command();
  private static void glUniformMatrix4x3dv() {
    Command cmd = glUniformMatrix4x3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glMultiTexCoord1s = new Command();
  private static void glMultiTexCoord1s() {
    Command cmd = glMultiTexCoord1s;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glDrawTransformFeedbackInstancedEXT = new Command();
  private static void glDrawTransformFeedbackInstancedEXT() {
    Command cmd = glDrawTransformFeedbackInstancedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glNormalPointervINTEL = new Command();
  private static void glNormalPointervINTEL() {
    Command cmd = glNormalPointervINTEL;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, NormalPointerType);
    cmd.extension = GL_INTEL_parallel_arrays;
  }
  public static final Command glUniformMatrix3x4fvNV = new Command();
  private static void glUniformMatrix3x4fvNV() {
    Command cmd = glUniformMatrix3x4fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_NV_non_square_matrices;
  }
  public static final Command glGetPathParameterfvNV = new Command();
  private static void glGetPathParameterfvNV() {
    Command cmd = glGetPathParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glFenceSyncAPPLE = new Command();
  private static void glFenceSyncAPPLE() {
    Command cmd = glFenceSyncAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("condition", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_APPLE_sync;
  }
  public static final Command glGetTexGenfv = new Command();
  private static void glGetTexGenfv() {
    Command cmd = glGetTexGenfv;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glIsShader = new Command();
  private static void glIsShader() {
    Command cmd = glIsShader;
    cmd.returnGroup = Boolean;
  }
  public static final Command glMultiTexCoord1f = new Command();
  private static void glMultiTexCoord1f() {
    Command cmd = glMultiTexCoord1f;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glBlendFunci = new Command();
  private static void glBlendFunci() {
    Command cmd = glBlendFunci;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.addParam("dst", GLenum, _null_);
  }
  public static final Command glMultiTexCoord1d = new Command();
  private static void glMultiTexCoord1d() {
    Command cmd = glMultiTexCoord1d;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMultiTexCoord1i = new Command();
  private static void glMultiTexCoord1i() {
    Command cmd = glMultiTexCoord1i;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glClipPlanexIMG = new Command();
  private static void glClipPlanexIMG() {
    Command cmd = glClipPlanexIMG;
    cmd.returnGroup = _null_;
    cmd.addParam("p", GLenum, _null_);
    cmd.extension = GL_IMG_user_clip_plane;
  }
  public static final Command glGetProgramParameterdvNV = new Command();
  private static void glGetProgramParameterdvNV() {
    Command cmd = glGetProgramParameterdvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetInternalformati64v = new Command();
  private static void glGetInternalformati64v() {
    Command cmd = glGetInternalformati64v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_internalformat_query2;
  }
  public static final Command glGetNamedBufferParameteriv = new Command();
  private static void glGetNamedBufferParameteriv() {
    Command cmd = glGetNamedBufferParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glPathGlyphIndexArrayNV = new Command();
  private static void glPathGlyphIndexArrayNV() {
    Command cmd = glPathGlyphIndexArrayNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fontTarget", GLenum, _null_);
    cmd.addParam("fontStyle", GLbitfield, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetVariantIntegervEXT = new Command();
  private static void glGetVariantIntegervEXT() {
    Command cmd = glGetVariantIntegervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glDepthFunc = new Command();
  private static void glDepthFunc() {
    Command cmd = glDepthFunc;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, DepthFunction);
  }
  public static final Command glGetTexGeniv = new Command();
  private static void glGetTexGeniv() {
    Command cmd = glGetTexGeniv;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glUniformMatrix4x3fv = new Command();
  private static void glUniformMatrix4x3fv() {
    Command cmd = glUniformMatrix4x3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glConvolutionFilter2DEXT = new Command();
  private static void glConvolutionFilter2DEXT() {
    Command cmd = glConvolutionFilter2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glDrawBuffersARB = new Command();
  private static void glDrawBuffersARB() {
    Command cmd = glDrawBuffersARB;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, _null_);
    cmd.extension = GL_ARB_draw_buffers;
  }
  public static final Command glMultiTexCoord4iARB = new Command();
  private static void glMultiTexCoord4iARB() {
    Command cmd = glMultiTexCoord4iARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glSecondaryColorFormatNV = new Command();
  private static void glSecondaryColorFormatNV() {
    Command cmd = glSecondaryColorFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glMakeBufferResidentNV = new Command();
  private static void glMakeBufferResidentNV() {
    Command cmd = glMakeBufferResidentNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glCopyTexImage1D = new Command();
  private static void glCopyTexImage1D() {
    Command cmd = glCopyTexImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glGetPixelMapxv = new Command();
  private static void glGetPixelMapxv() {
    Command cmd = glGetPixelMapxv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glDisableiNV = new Command();
  private static void glDisableiNV() {
    Command cmd = glDisableiNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_viewport_array;
  }
  public static final Command glVDPAUIsSurfaceNV = new Command();
  private static void glVDPAUIsSurfaceNV() {
    Command cmd = glVDPAUIsSurfaceNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_vdpau_interop;
  }
  public static final Command glBlendEquationSeparate = new Command();
  private static void glBlendEquationSeparate() {
    Command cmd = glBlendEquationSeparate;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, BlendEquationModeEXT);
    cmd.addParam("modeAlpha", GLenum, BlendEquationModeEXT);
  }
  public static final Command glGetTextureLevelParameterfvEXT = new Command();
  private static void glGetTextureLevelParameterfvEXT() {
    Command cmd = glGetTextureLevelParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glImageTransformParameterivHP = new Command();
  private static void glImageTransformParameterivHP() {
    Command cmd = glImageTransformParameterivHP;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_HP_image_transform;
  }
  public static final Command glColorFormatNV = new Command();
  private static void glColorFormatNV() {
    Command cmd = glColorFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glMultiTexCoord1sv = new Command();
  private static void glMultiTexCoord1sv() {
    Command cmd = glMultiTexCoord1sv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glTransformFeedbackVaryingsNV = new Command();
  private static void glTransformFeedbackVaryingsNV() {
    Command cmd = glTransformFeedbackVaryingsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("bufferMode", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glSeparableFilter2D = new Command();
  private static void glSeparableFilter2D() {
    Command cmd = glSeparableFilter2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glCopyTexImage2D = new Command();
  private static void glCopyTexImage2D() {
    Command cmd = glCopyTexImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glGetPathMetricsNV = new Command();
  private static void glGetPathMetricsNV() {
    Command cmd = glGetPathMetricsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("metricQueryMask", GLbitfield, _null_);
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glProgramUniformMatrix4x3fv = new Command();
  private static void glProgramUniformMatrix4x3fv() {
    Command cmd = glProgramUniformMatrix4x3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glMultiTexCoord4s = new Command();
  private static void glMultiTexCoord4s() {
    Command cmd = glMultiTexCoord4s;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glDisableClientStateIndexedEXT = new Command();
  private static void glDisableClientStateIndexedEXT() {
    Command cmd = glDisableClientStateIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetMultiTexLevelParameterivEXT = new Command();
  private static void glGetMultiTexLevelParameterivEXT() {
    Command cmd = glGetMultiTexLevelParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord4x = new Command();
  private static void glMultiTexCoord4x() {
    Command cmd = glMultiTexCoord4x;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
  }
  public static final Command glPathGlyphsNV = new Command();
  private static void glPathGlyphsNV() {
    Command cmd = glPathGlyphsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fontTarget", GLenum, _null_);
    cmd.addParam("fontStyle", GLbitfield, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("handleMissingGlyphs", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glNamedFramebufferDrawBuffers = new Command();
  private static void glNamedFramebufferDrawBuffers() {
    Command cmd = glNamedFramebufferDrawBuffers;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMultiDrawElementsIndirectBindlessCountNV = new Command();
  private static void glMultiDrawElementsIndirectBindlessCountNV() {
    Command cmd = glMultiDrawElementsIndirectBindlessCountNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glBindBufferARB = new Command();
  private static void glBindBufferARB() {
    Command cmd = glBindBufferARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glMultiTexCoord4d = new Command();
  private static void glMultiTexCoord4d() {
    Command cmd = glMultiTexCoord4d;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glTextureParameterfEXT = new Command();
  private static void glTextureParameterfEXT() {
    Command cmd = glTextureParameterfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord4i = new Command();
  private static void glMultiTexCoord4i() {
    Command cmd = glMultiTexCoord4i;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glDrawElementsBaseVertex = new Command();
  private static void glDrawElementsBaseVertex() {
    Command cmd = glDrawElementsBaseVertex;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glMultiTexCoord4f = new Command();
  private static void glMultiTexCoord4f() {
    Command cmd = glMultiTexCoord4f;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMultiTexCoord3s = new Command();
  private static void glMultiTexCoord3s() {
    Command cmd = glMultiTexCoord3s;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glFlushMappedBufferRangeEXT = new Command();
  private static void glFlushMappedBufferRangeEXT() {
    Command cmd = glFlushMappedBufferRangeEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_map_buffer_range;
  }
  public static final Command glGetnPixelMapfv = new Command();
  private static void glGetnPixelMapfv() {
    Command cmd = glGetnPixelMapfv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
  }
  public static final Command glMultiTexCoord3d = new Command();
  private static void glMultiTexCoord3d() {
    Command cmd = glMultiTexCoord3d;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glDiscardFramebufferEXT = new Command();
  private static void glDiscardFramebufferEXT() {
    Command cmd = glDiscardFramebufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachments", GLenum, _null_);
    cmd.extension = GL_EXT_discard_framebuffer;
  }
  public static final Command glGetTexGendv = new Command();
  private static void glGetTexGendv() {
    Command cmd = glGetTexGendv;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glMultiTexCoord3f = new Command();
  private static void glMultiTexCoord3f() {
    Command cmd = glMultiTexCoord3f;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glProgramUniformMatrix4x3dv = new Command();
  private static void glProgramUniformMatrix4x3dv() {
    Command cmd = glProgramUniformMatrix4x3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glMultiTexCoord3i = new Command();
  private static void glMultiTexCoord3i() {
    Command cmd = glMultiTexCoord3i;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glCreateShaderObjectARB = new Command();
  private static void glCreateShaderObjectARB() {
    Command cmd = glCreateShaderObjectARB;
    cmd.returnGroup = _null_;
    cmd.addParam("shaderType", GLenum, _null_);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glMultiTexCoord2s = new Command();
  private static void glMultiTexCoord2s() {
    Command cmd = glMultiTexCoord2s;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glCullParameterdvEXT = new Command();
  private static void glCullParameterdvEXT() {
    Command cmd = glCullParameterdvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_cull_vertex;
  }
  public static final Command glVertexStream2sATI = new Command();
  private static void glVertexStream2sATI() {
    Command cmd = glVertexStream2sATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glListParameterivSGIX = new Command();
  private static void glListParameterivSGIX() {
    Command cmd = glListParameterivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, ListParameterName);
    cmd.extension = GL_SGIX_list_priority;
  }
  public static final Command glRenderbufferStorage = new Command();
  private static void glRenderbufferStorage() {
    Command cmd = glRenderbufferStorage;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glGetHistogramParameteriv = new Command();
  private static void glGetHistogramParameteriv() {
    Command cmd = glGetHistogramParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glMultiTexCoord2iv = new Command();
  private static void glMultiTexCoord2iv() {
    Command cmd = glMultiTexCoord2iv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glTextureStorageMem2DEXT = new Command();
  private static void glTextureStorageMem2DEXT() {
    Command cmd = glTextureStorageMem2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glGetListParameterfvSGIX = new Command();
  private static void glGetListParameterfvSGIX() {
    Command cmd = glGetListParameterfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, ListParameterName);
    cmd.extension = GL_SGIX_list_priority;
  }
  public static final Command glPathStencilFuncNV = new Command();
  private static void glPathStencilFuncNV() {
    Command cmd = glPathStencilFuncNV;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, StencilFunction);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glAlphaFragmentOp3ATI = new Command();
  private static void glAlphaFragmentOp3ATI() {
    Command cmd = glAlphaFragmentOp3ATI;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glSampleCoveragex = new Command();
  private static void glSampleCoveragex() {
    Command cmd = glSampleCoveragex;
    cmd.returnGroup = _null_;
    cmd.addParam("invert", GLboolean, Boolean);
  }
  public static final Command glGetInvariantBooleanvEXT = new Command();
  private static void glGetInvariantBooleanvEXT() {
    Command cmd = glGetInvariantBooleanvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.addParam("data", GLboolean, Boolean);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glGetMultiTexParameterIuivEXT = new Command();
  private static void glGetMultiTexParameterIuivEXT() {
    Command cmd = glGetMultiTexParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetInteger64v = new Command();
  private static void glGetInteger64v() {
    Command cmd = glGetInteger64v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sync;
  }
  public static final Command glSamplerParameterIivOES = new Command();
  private static void glSamplerParameterIivOES() {
    Command cmd = glSamplerParameterIivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glGetPixelMapuiv = new Command();
  private static void glGetPixelMapuiv() {
    Command cmd = glGetPixelMapuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, PixelMap);
  }
  public static final Command glGetTexParameterIuivEXT = new Command();
  private static void glGetTexParameterIuivEXT() {
    Command cmd = glGetTexParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_texture_integer;
  }
  public static final Command glAlphaFuncQCOM = new Command();
  private static void glAlphaFuncQCOM() {
    Command cmd = glAlphaFuncQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, _null_);
    cmd.extension = GL_QCOM_alpha_test;
  }
  public static final Command glGetSynciv = new Command();
  private static void glGetSynciv() {
    Command cmd = glGetSynciv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sync;
  }
  public static final Command glVertexArraySecondaryColorOffsetEXT = new Command();
  private static void glVertexArraySecondaryColorOffsetEXT() {
    Command cmd = glVertexArraySecondaryColorOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramParameter4dvNV = new Command();
  private static void glProgramParameter4dvNV() {
    Command cmd = glProgramParameter4dvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glMultiTexEnviEXT = new Command();
  private static void glMultiTexEnviEXT() {
    Command cmd = glMultiTexEnviEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glConservativeRasterParameterfNV = new Command();
  private static void glConservativeRasterParameterfNV() {
    Command cmd = glConservativeRasterParameterfNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_conservative_raster_dilate;
  }
  public static final Command glBindImageTextureEXT = new Command();
  private static void glBindImageTextureEXT() {
    Command cmd = glBindImageTextureEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("layered", GLboolean, Boolean);
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_EXT_shader_image_load_store;
  }
  public static final Command glVertexStream1fATI = new Command();
  private static void glVertexStream1fATI() {
    Command cmd = glVertexStream1fATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glExtGetProgramBinarySourceQCOM = new Command();
  private static void glExtGetProgramBinarySourceQCOM() {
    Command cmd = glExtGetProgramBinarySourceQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
  }
  public static final Command glImportSemaphoreFdEXT = new Command();
  private static void glImportSemaphoreFdEXT() {
    Command cmd = glImportSemaphoreFdEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("handleType", GLenum, ExternalHandleType);
    cmd.extension = GL_EXT_semaphore_fd;
  }
  public static final Command glGetHistogramParameterfv = new Command();
  private static void glGetHistogramParameterfv() {
    Command cmd = glGetHistogramParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glMultiDrawArraysIndirectBindlessNV = new Command();
  private static void glMultiDrawArraysIndirectBindlessNV() {
    Command cmd = glMultiDrawArraysIndirectBindlessNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glMulticastGetQueryObjectuivNV = new Command();
  private static void glMulticastGetQueryObjectuivNV() {
    Command cmd = glMulticastGetQueryObjectuivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glNamedRenderbufferStorageEXT = new Command();
  private static void glNamedRenderbufferStorageEXT() {
    Command cmd = glNamedRenderbufferStorageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glVertexAttribIFormatNV = new Command();
  private static void glVertexAttribIFormatNV() {
    Command cmd = glVertexAttribIFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glFramebufferTextureOES = new Command();
  private static void glFramebufferTextureOES() {
    Command cmd = glFramebufferTextureOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_OES_geometry_shader;
  }
  public static final Command glMultiTexCoord4xvOES = new Command();
  private static void glMultiTexCoord4xvOES() {
    Command cmd = glMultiTexCoord4xvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glCreateShaderProgramv = new Command();
  private static void glCreateShaderProgramv() {
    Command cmd = glCreateShaderProgramv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glGetnSeparableFilterARB = new Command();
  private static void glGetnSeparableFilterARB() {
    Command cmd = glGetnSeparableFilterARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glProgramUniformMatrix4fv = new Command();
  private static void glProgramUniformMatrix4fv() {
    Command cmd = glProgramUniformMatrix4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glGetTransformFeedbackVarying = new Command();
  private static void glGetTransformFeedbackVarying() {
    Command cmd = glGetTransformFeedbackVarying;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glDrawBuffersATI = new Command();
  private static void glDrawBuffersATI() {
    Command cmd = glDrawBuffersATI;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, _null_);
    cmd.extension = GL_ATI_draw_buffers;
  }
  public static final Command glFogxv = new Command();
  private static void glFogxv() {
    Command cmd = glFogxv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glVertexAttribLFormat = new Command();
  private static void glVertexAttribLFormat() {
    Command cmd = glVertexAttribLFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_attrib_binding;
  }
  public static final Command glColorPointer = new Command();
  private static void glColorPointer() {
    Command cmd = glColorPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
  }
  public static final Command glDisableIndexedEXT = new Command();
  private static void glDisableIndexedEXT() {
    Command cmd = glDisableIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetDebugMessageLogKHR = new Command();
  private static void glGetDebugMessageLogKHR() {
    Command cmd = glGetDebugMessageLogKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("sources", GLenum, _null_);
    cmd.addParam("types", GLenum, _null_);
    cmd.addParam("severities", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glTexImage4DSGIS = new Command();
  private static void glTexImage4DSGIS() {
    Command cmd = glTexImage4DSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_SGIS_texture4D;
  }
  public static final Command glProgramUniformMatrix4dv = new Command();
  private static void glProgramUniformMatrix4dv() {
    Command cmd = glProgramUniformMatrix4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glNamedFramebufferReadBuffer = new Command();
  private static void glNamedFramebufferReadBuffer() {
    Command cmd = glNamedFramebufferReadBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetVideoCaptureivNV = new Command();
  private static void glGetVideoCaptureivNV() {
    Command cmd = glGetVideoCaptureivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glNormalStream3dvATI = new Command();
  private static void glNormalStream3dvATI() {
    Command cmd = glNormalStream3dvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glVertexArrayAttribLFormat = new Command();
  private static void glVertexArrayAttribLFormat() {
    Command cmd = glVertexArrayAttribLFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTexSubImage1DEXT = new Command();
  private static void glTexSubImage1DEXT() {
    Command cmd = glTexSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glGetProgramSubroutineParameteruivNV = new Command();
  private static void glGetProgramSubroutineParameteruivNV() {
    Command cmd = glGetProgramSubroutineParameteruivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program5;
  }
  public static final Command glGetMinmaxParameterfv = new Command();
  private static void glGetMinmaxParameterfv() {
    Command cmd = glGetMinmaxParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glMulticastGetQueryObjectui64vNV = new Command();
  private static void glMulticastGetQueryObjectui64vNV() {
    Command cmd = glMulticastGetQueryObjectui64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glTextureBufferRangeEXT = new Command();
  private static void glTextureBufferRangeEXT() {
    Command cmd = glTextureBufferRangeEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramBinaryOES = new Command();
  private static void glProgramBinaryOES() {
    Command cmd = glProgramBinaryOES;
    cmd.returnGroup = _null_;
    cmd.addParam("binaryFormat", GLenum, _null_);
    cmd.extension = GL_OES_get_program_binary;
  }
  public static final Command glGetLightxOES = new Command();
  private static void glGetLightxOES() {
    Command cmd = glGetLightxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glPatchParameteri = new Command();
  private static void glPatchParameteri() {
    Command cmd = glPatchParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_tessellation_shader;
  }
  public static final Command glMultiDrawElementsIndirectBindlessNV = new Command();
  private static void glMultiDrawElementsIndirectBindlessNV() {
    Command cmd = glMultiDrawElementsIndirectBindlessNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetArrayObjectivATI = new Command();
  private static void glGetArrayObjectivATI() {
    Command cmd = glGetArrayObjectivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glNormalStream3svATI = new Command();
  private static void glNormalStream3svATI() {
    Command cmd = glNormalStream3svATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetMinmaxParameteriv = new Command();
  private static void glGetMinmaxParameteriv() {
    Command cmd = glGetMinmaxParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glLightxOES = new Command();
  private static void glLightxOES() {
    Command cmd = glLightxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetVertexArrayPointervEXT = new Command();
  private static void glGetVertexArrayPointervEXT() {
    Command cmd = glGetVertexArrayPointervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexPageCommitmentARB = new Command();
  private static void glTexPageCommitmentARB() {
    Command cmd = glTexPageCommitmentARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("commit", GLboolean, Boolean);
    cmd.extension = GL_ARB_sparse_texture;
  }
  public static final Command glCompressedMultiTexImage1DEXT = new Command();
  private static void glCompressedMultiTexImage1DEXT() {
    Command cmd = glCompressedMultiTexImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClearNamedBufferSubDataEXT = new Command();
  private static void glClearNamedBufferSubDataEXT() {
    Command cmd = glClearNamedBufferSubDataEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetInvariantIntegervEXT = new Command();
  private static void glGetInvariantIntegervEXT() {
    Command cmd = glGetInvariantIntegervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glMultiTexCoord1bOES = new Command();
  private static void glMultiTexCoord1bOES() {
    Command cmd = glMultiTexCoord1bOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glConvolutionParameterxvOES = new Command();
  private static void glConvolutionParameterxvOES() {
    Command cmd = glConvolutionParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glIsTransformFeedbackNV = new Command();
  private static void glIsTransformFeedbackNV() {
    Command cmd = glIsTransformFeedbackNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_transform_feedback2;
  }
  public static final Command glBindRenderbufferEXT = new Command();
  private static void glBindRenderbufferEXT() {
    Command cmd = glBindRenderbufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glFramebufferTextureFaceEXT = new Command();
  private static void glFramebufferTextureFaceEXT() {
    Command cmd = glFramebufferTextureFaceEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("face", GLenum, TextureTarget);
    cmd.extension = GL_NV_geometry_program4;
  }
  public static final Command glGetMaterialxOES = new Command();
  private static void glGetMaterialxOES() {
    Command cmd = glGetMaterialxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glMultiTexCoord1xOES = new Command();
  private static void glMultiTexCoord1xOES() {
    Command cmd = glMultiTexCoord1xOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glDrawArraysInstancedARB = new Command();
  private static void glDrawArraysInstancedARB() {
    Command cmd = glDrawArraysInstancedARB;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glProgramParameters4dvNV = new Command();
  private static void glProgramParameters4dvNV() {
    Command cmd = glProgramParameters4dvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glBlendEquationSeparatei = new Command();
  private static void glBlendEquationSeparatei() {
    Command cmd = glBlendEquationSeparatei;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, _null_);
    cmd.addParam("modeAlpha", GLenum, _null_);
  }
  public static final Command glTransformFeedbackStreamAttribsNV = new Command();
  private static void glTransformFeedbackStreamAttribsNV() {
    Command cmd = glTransformFeedbackStreamAttribsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("bufferMode", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glProgramUniformMatrix2fvEXT = new Command();
  private static void glProgramUniformMatrix2fvEXT() {
    Command cmd = glProgramUniformMatrix2fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glGetPixelMapusv = new Command();
  private static void glGetPixelMapusv() {
    Command cmd = glGetPixelMapusv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, PixelMap);
  }
  public static final Command glPixelTexGenParameterfSGIS = new Command();
  private static void glPixelTexGenParameterfSGIS() {
    Command cmd = glPixelTexGenParameterfSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTexGenParameterNameSGIS);
    cmd.extension = GL_SGIS_pixel_texture;
  }
  public static final Command glProgramEnvParameter4dvARB = new Command();
  private static void glProgramEnvParameter4dvARB() {
    Command cmd = glProgramEnvParameter4dvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glGetnMapdvARB = new Command();
  private static void glGetnMapdvARB() {
    Command cmd = glGetnMapdvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glTangentPointerEXT = new Command();
  private static void glTangentPointerEXT() {
    Command cmd = glTangentPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_coordinate_frame;
  }
  public static final Command glMatrixMultdEXT = new Command();
  private static void glMatrixMultdEXT() {
    Command cmd = glMatrixMultdEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDrawArraysInstancedANGLE = new Command();
  private static void glDrawArraysInstancedANGLE() {
    Command cmd = glDrawArraysInstancedANGLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ANGLE_instanced_arrays;
  }
  public static final Command glNamedProgramLocalParameter4dvEXT = new Command();
  private static void glNamedProgramLocalParameter4dvEXT() {
    Command cmd = glNamedProgramLocalParameter4dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCompressedTexImage3DARB = new Command();
  private static void glCompressedTexImage3DARB() {
    Command cmd = glCompressedTexImage3DARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glMultiTexCoord2dv = new Command();
  private static void glMultiTexCoord2dv() {
    Command cmd = glMultiTexCoord2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glStencilStrokePathInstancedNV = new Command();
  private static void glStencilStrokePathInstancedNV() {
    Command cmd = glStencilStrokePathInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glMap1d = new Command();
  private static void glMap1d() {
    Command cmd = glMap1d;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
  }
  public static final Command glGetVertexArrayPointeri_vEXT = new Command();
  private static void glGetVertexArrayPointeri_vEXT() {
    Command cmd = glGetVertexArrayPointeri_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMap1f = new Command();
  private static void glMap1f() {
    Command cmd = glMap1f;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
  }
  public static final Command glMap2d = new Command();
  private static void glMap2d() {
    Command cmd = glMap2d;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
  }
  public static final Command glMap2f = new Command();
  private static void glMap2f() {
    Command cmd = glMap2f;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MapTarget);
  }
  public static final Command glGetProgramResourceLocation = new Command();
  private static void glGetProgramResourceLocation() {
    Command cmd = glGetProgramResourceLocation;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.extension = GL_ARB_program_interface_query;
  }
  public static final Command glMultiTexCoord2dvARB = new Command();
  private static void glMultiTexCoord2dvARB() {
    Command cmd = glMultiTexCoord2dvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glTexCoordPointer = new Command();
  private static void glTexCoordPointer() {
    Command cmd = glTexCoordPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, TexCoordPointerType);
  }
  public static final Command glGetHistogram = new Command();
  private static void glGetHistogram() {
    Command cmd = glGetHistogram;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glBlendFunciOES = new Command();
  private static void glBlendFunciOES() {
    Command cmd = glBlendFunciOES;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.addParam("dst", GLenum, _null_);
    cmd.extension = GL_OES_draw_buffers_indexed;
  }
  public static final Command glGetHistogramParameterxvOES = new Command();
  private static void glGetHistogramParameterxvOES() {
    Command cmd = glGetHistogramParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glMultiTexCoord2fv = new Command();
  private static void glMultiTexCoord2fv() {
    Command cmd = glMultiTexCoord2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glVertexArrayVertexAttribLFormatEXT = new Command();
  private static void glVertexArrayVertexAttribLFormatEXT() {
    Command cmd = glVertexArrayVertexAttribLFormatEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glEdgeFlagPointerEXT = new Command();
  private static void glEdgeFlagPointerEXT() {
    Command cmd = glEdgeFlagPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pointer", GLboolean, Boolean);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glEndQueryARB = new Command();
  private static void glEndQueryARB() {
    Command cmd = glEndQueryARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_occlusion_query;
  }
  public static final Command glNamedFramebufferTextureFaceEXT = new Command();
  private static void glNamedFramebufferTextureFaceEXT() {
    Command cmd = glNamedFramebufferTextureFaceEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("face", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glVertexAttribPointerARB = new Command();
  private static void glVertexAttribPointerARB() {
    Command cmd = glVertexAttribPointerARB;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_shader;
  }
  public static final Command glFogxvOES = new Command();
  private static void glFogxvOES() {
    Command cmd = glFogxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glDrawRangeElementsBaseVertex = new Command();
  private static void glDrawRangeElementsBaseVertex() {
    Command cmd = glDrawRangeElementsBaseVertex;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glGetGraphicsResetStatusEXT = new Command();
  private static void glGetGraphicsResetStatusEXT() {
    Command cmd = glGetGraphicsResetStatusEXT;
    cmd.returnGroup = _null_;
    cmd.extension = GL_EXT_robustness;
  }
  public static final Command glBeginTransformFeedback = new Command();
  private static void glBeginTransformFeedback() {
    Command cmd = glBeginTransformFeedback;
    cmd.returnGroup = _null_;
    cmd.addParam("primitiveMode", GLenum, _null_);
  }
  public static final Command glGetFinalCombinerInputParameterfvNV = new Command();
  private static void glGetFinalCombinerInputParameterfvNV() {
    Command cmd = glGetFinalCombinerInputParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("variable", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glGetTexParameterIiv = new Command();
  private static void glGetTexParameterIiv() {
    Command cmd = glGetTexParameterIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
  }
  public static final Command glVertexArrayMultiTexCoordOffsetEXT = new Command();
  private static void glVertexArrayMultiTexCoordOffsetEXT() {
    Command cmd = glVertexArrayMultiTexCoordOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("type", GLenum, TexCoordPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord1hNV = new Command();
  private static void glMultiTexCoord1hNV() {
    Command cmd = glMultiTexCoord1hNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glProgramLocalParameterI4ivNV = new Command();
  private static void glProgramLocalParameterI4ivNV() {
    Command cmd = glProgramLocalParameterI4ivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glSetInvariantEXT = new Command();
  private static void glSetInvariantEXT() {
    Command cmd = glSetInvariantEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glIsQuery = new Command();
  private static void glIsQuery() {
    Command cmd = glIsQuery;
    cmd.returnGroup = Boolean;
  }
  public static final Command glFogCoordPointerEXT = new Command();
  private static void glFogCoordPointerEXT() {
    Command cmd = glFogCoordPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, FogPointerTypeEXT);
    cmd.extension = GL_EXT_fog_coord;
  }
  public static final Command glProgramBufferParametersfvNV = new Command();
  private static void glProgramBufferParametersfvNV() {
    Command cmd = glProgramBufferParametersfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_parameter_buffer_object;
  }
  public static final Command glCombinerParameterivNV = new Command();
  private static void glCombinerParameterivNV() {
    Command cmd = glCombinerParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glPathParameterfNV = new Command();
  private static void glPathParameterfNV() {
    Command cmd = glPathParameterfNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glMakeNamedBufferResidentNV = new Command();
  private static void glMakeNamedBufferResidentNV() {
    Command cmd = glMakeNamedBufferResidentNV;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glInvalidateNamedFramebufferSubData = new Command();
  private static void glInvalidateNamedFramebufferSubData() {
    Command cmd = glInvalidateNamedFramebufferSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("attachments", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glColorPointerListIBM = new Command();
  private static void glColorPointerListIBM() {
    Command cmd = glColorPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glIsCommandListNV = new Command();
  private static void glIsCommandListNV() {
    Command cmd = glIsCommandListNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glGetColorTableParameterfvSGI = new Command();
  private static void glGetColorTableParameterfvSGI() {
    Command cmd = glGetColorTableParameterfvSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("pname", GLenum, GetColorTableParameterPNameSGI);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glGetTransformFeedbacki_v = new Command();
  private static void glGetTransformFeedbacki_v() {
    Command cmd = glGetTransformFeedbacki_v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMultiTexCoord2svARB = new Command();
  private static void glMultiTexCoord2svARB() {
    Command cmd = glMultiTexCoord2svARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glMultiDrawElementsIndirectCount = new Command();
  private static void glMultiDrawElementsIndirectCount() {
    Command cmd = glMultiDrawElementsIndirectCount;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glNormalStream3sATI = new Command();
  private static void glNormalStream3sATI() {
    Command cmd = glNormalStream3sATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGenerateTextureMipmapEXT = new Command();
  private static void glGenerateTextureMipmapEXT() {
    Command cmd = glGenerateTextureMipmapEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDebugMessageEnableAMD = new Command();
  private static void glDebugMessageEnableAMD() {
    Command cmd = glDebugMessageEnableAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("category", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.addParam("enabled", GLboolean, Boolean);
    cmd.extension = GL_AMD_debug_output;
  }
  public static final Command glPointParameterfvSGIS = new Command();
  private static void glPointParameterfvSGIS() {
    Command cmd = glPointParameterfvSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIS_point_parameters;
  }
  public static final Command glLightModeliv = new Command();
  private static void glLightModeliv() {
    Command cmd = glLightModeliv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, LightModelParameter);
  }
  public static final Command glCopyTexSubImage1DEXT = new Command();
  private static void glCopyTexSubImage1DEXT() {
    Command cmd = glCopyTexSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glVertexStream4dATI = new Command();
  private static void glVertexStream4dATI() {
    Command cmd = glVertexStream4dATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glSpriteParameterfvSGIX = new Command();
  private static void glSpriteParameterfvSGIX() {
    Command cmd = glSpriteParameterfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_sprite;
  }
  public static final Command glLightModelfv = new Command();
  private static void glLightModelfv() {
    Command cmd = glLightModelfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, LightModelParameter);
  }
  public static final Command glConvolutionParameterxOES = new Command();
  private static void glConvolutionParameterxOES() {
    Command cmd = glConvolutionParameterxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glMultiTexCoord3xvOES = new Command();
  private static void glMultiTexCoord3xvOES() {
    Command cmd = glMultiTexCoord3xvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glBlendParameteriNV = new Command();
  private static void glBlendParameteriNV() {
    Command cmd = glBlendParameteriNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_blend_equation_advanced;
  }
  public static final Command glGetMultisamplefv = new Command();
  private static void glGetMultisamplefv() {
    Command cmd = glGetMultisamplefv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_texture_multisample;
  }
  public static final Command glIsQueryARB = new Command();
  private static void glIsQueryARB() {
    Command cmd = glIsQueryARB;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_occlusion_query;
  }
  public static final Command glGetInternalformativ = new Command();
  private static void glGetInternalformativ() {
    Command cmd = glGetInternalformativ;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_internalformat_query;
  }
  public static final Command glBufferSubData = new Command();
  private static void glBufferSubData() {
    Command cmd = glBufferSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
  }
  public static final Command glRenderbufferStorageMultisampleNV = new Command();
  private static void glRenderbufferStorageMultisampleNV() {
    Command cmd = glRenderbufferStorageMultisampleNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_NV_framebuffer_multisample;
  }
  public static final Command glGetSyncivAPPLE = new Command();
  private static void glGetSyncivAPPLE() {
    Command cmd = glGetSyncivAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_sync;
  }
  public static final Command glBindTextureUnitParameterEXT = new Command();
  private static void glBindTextureUnitParameterEXT() {
    Command cmd = glBindTextureUnitParameterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("unit", GLenum, _null_);
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glTextureParameteriEXT = new Command();
  private static void glTextureParameteriEXT() {
    Command cmd = glTextureParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCreateShaderProgramEXT = new Command();
  private static void glCreateShaderProgramEXT() {
    Command cmd = glCreateShaderProgramEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glTextureImage2DMultisampleNV = new Command();
  private static void glTextureImage2DMultisampleNV() {
    Command cmd = glTextureImage2DMultisampleNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_NV_texture_multisample;
  }
  public static final Command glGetDoubleIndexedvEXT = new Command();
  private static void glGetDoubleIndexedvEXT() {
    Command cmd = glGetDoubleIndexedvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glNamedStringARB = new Command();
  private static void glNamedStringARB() {
    Command cmd = glNamedStringARB;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_shading_language_include;
  }
  public static final Command glTexCoordPointervINTEL = new Command();
  private static void glTexCoordPointervINTEL() {
    Command cmd = glTexCoordPointervINTEL;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
    cmd.extension = GL_INTEL_parallel_arrays;
  }
  public static final Command glVertexArrayVertexAttribFormatEXT = new Command();
  private static void glVertexArrayVertexAttribFormatEXT() {
    Command cmd = glVertexArrayVertexAttribFormatEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetVariantArrayObjectfvATI = new Command();
  private static void glGetVariantArrayObjectfvATI() {
    Command cmd = glGetVariantArrayObjectfvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glMultiTexCoordP4ui = new Command();
  private static void glMultiTexCoordP4ui() {
    Command cmd = glMultiTexCoordP4ui;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glIsRenderbufferEXT = new Command();
  private static void glIsRenderbufferEXT() {
    Command cmd = glIsRenderbufferEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glGetBooleanv = new Command();
  private static void glGetBooleanv() {
    Command cmd = glGetBooleanv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPName);
    cmd.addParam("data", GLboolean, Boolean);
  }
  public static final Command glEndQuery = new Command();
  private static void glEndQuery() {
    Command cmd = glEndQuery;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glBlitFramebuffer = new Command();
  private static void glBlitFramebuffer() {
    Command cmd = glBlitFramebuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, ClearBufferMask);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glStencilThenCoverFillPathInstancedNV = new Command();
  private static void glStencilThenCoverFillPathInstancedNV() {
    Command cmd = glStencilThenCoverFillPathInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("fillMode", GLenum, _null_);
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glUniformSubroutinesuiv = new Command();
  private static void glUniformSubroutinesuiv() {
    Command cmd = glUniformSubroutinesuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glIndexPointerListIBM = new Command();
  private static void glIndexPointerListIBM() {
    Command cmd = glIndexPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, IndexPointerType);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glVertexStream4dvATI = new Command();
  private static void glVertexStream4dvATI() {
    Command cmd = glVertexStream4dvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glVertexArrayVertexAttribLOffsetEXT = new Command();
  private static void glVertexArrayVertexAttribLOffsetEXT() {
    Command cmd = glVertexArrayVertexAttribLOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glBlendFuncSeparateIndexedAMD = new Command();
  private static void glBlendFuncSeparateIndexedAMD() {
    Command cmd = glBlendFuncSeparateIndexedAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("srcRGB", GLenum, _null_);
    cmd.addParam("dstRGB", GLenum, _null_);
    cmd.addParam("srcAlpha", GLenum, _null_);
    cmd.addParam("dstAlpha", GLenum, _null_);
  }
  public static final Command glGetnTexImageARB = new Command();
  private static void glGetnTexImageARB() {
    Command cmd = glGetnTexImageARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glMemoryBarrierEXT = new Command();
  private static void glMemoryBarrierEXT() {
    Command cmd = glMemoryBarrierEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("barriers", GLbitfield, _null_);
    cmd.extension = GL_EXT_shader_image_load_store;
  }
  public static final Command glEnableClientStateIndexedEXT = new Command();
  private static void glEnableClientStateIndexedEXT() {
    Command cmd = glEnableClientStateIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexStorageMem1DEXT = new Command();
  private static void glTexStorageMem1DEXT() {
    Command cmd = glTexStorageMem1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glMultiTexCoordP2uiv = new Command();
  private static void glMultiTexCoordP2uiv() {
    Command cmd = glMultiTexCoordP2uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glCompressedTextureSubImage2DEXT = new Command();
  private static void glCompressedTextureSubImage2DEXT() {
    Command cmd = glCompressedTextureSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureStorage3DMultisample = new Command();
  private static void glTextureStorage3DMultisample() {
    Command cmd = glTextureStorage3DMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTextureStorage2DEXT = new Command();
  private static void glTextureStorage2DEXT() {
    Command cmd = glTextureStorage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_storage;
  }
  public static final Command glIsImageHandleResidentARB = new Command();
  private static void glIsImageHandleResidentARB() {
    Command cmd = glIsImageHandleResidentARB;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_bindless_texture;
  }
  public static final Command glPresentFrameKeyedNV = new Command();
  private static void glPresentFrameKeyedNV() {
    Command cmd = glPresentFrameKeyedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("target0", GLenum, _null_);
    cmd.addParam("target1", GLenum, _null_);
    cmd.extension = GL_NV_present_video;
  }
  public static final Command glGetNamedBufferParameterivEXT = new Command();
  private static void glGetNamedBufferParameterivEXT() {
    Command cmd = glGetNamedBufferParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiDrawArraysIndirectCountARB = new Command();
  private static void glMultiDrawArraysIndirectCountARB() {
    Command cmd = glMultiDrawArraysIndirectCountARB;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ARB_indirect_parameters;
  }
  public static final Command glDisableiOES = new Command();
  private static void glDisableiOES() {
    Command cmd = glDisableiOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_viewport_array;
  }
  public static final Command glMultiTexCoord1fARB = new Command();
  private static void glMultiTexCoord1fARB() {
    Command cmd = glMultiTexCoord1fARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetNamedBufferParameterui64vNV = new Command();
  private static void glGetNamedBufferParameterui64vNV() {
    Command cmd = glGetNamedBufferParameterui64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glTextureImage2DEXT = new Command();
  private static void glTextureImage2DEXT() {
    Command cmd = glTextureImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCheckFramebufferStatusEXT = new Command();
  private static void glCheckFramebufferStatusEXT() {
    Command cmd = glCheckFramebufferStatusEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glBeginConditionalRender = new Command();
  private static void glBeginConditionalRender() {
    Command cmd = glBeginConditionalRender;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
  }
  public static final Command glBlendEquation = new Command();
  private static void glBlendEquation() {
    Command cmd = glBlendEquation;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glGenerateMipmap = new Command();
  private static void glGenerateMipmap() {
    Command cmd = glGenerateMipmap;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glTexStorage2DMultisample = new Command();
  private static void glTexStorage2DMultisample() {
    Command cmd = glTexStorage2DMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
  }
  public static final Command glGetVertexArrayIndexediv = new Command();
  private static void glGetVertexArrayIndexediv() {
    Command cmd = glGetVertexArrayIndexediv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVertexStream1iATI = new Command();
  private static void glVertexStream1iATI() {
    Command cmd = glVertexStream1iATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glPathParameterivNV = new Command();
  private static void glPathParameterivNV() {
    Command cmd = glPathParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glUniformMatrix4x2dv = new Command();
  private static void glUniformMatrix4x2dv() {
    Command cmd = glUniformMatrix4x2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glGetHandleARB = new Command();
  private static void glGetHandleARB() {
    Command cmd = glGetHandleARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glGetSeparableFilterEXT = new Command();
  private static void glGetSeparableFilterEXT() {
    Command cmd = glGetSeparableFilterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, SeparableTargetEXT);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glProgramPathFragmentInputGenNV = new Command();
  private static void glProgramPathFragmentInputGenNV() {
    Command cmd = glProgramPathFragmentInputGenNV;
    cmd.returnGroup = _null_;
    cmd.addParam("genMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glStencilFunc = new Command();
  private static void glStencilFunc() {
    Command cmd = glStencilFunc;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, StencilFunction);
  }
  public static final Command glTexCoordP2uiv = new Command();
  private static void glTexCoordP2uiv() {
    Command cmd = glTexCoordP2uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glMultiDrawElementArrayAPPLE = new Command();
  private static void glMultiDrawElementArrayAPPLE() {
    Command cmd = glMultiDrawElementArrayAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_APPLE_element_array;
  }
  public static final Command glSecondaryColorPointerEXT = new Command();
  private static void glSecondaryColorPointerEXT() {
    Command cmd = glSecondaryColorPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
    cmd.extension = GL_EXT_secondary_color;
  }
  public static final Command glSamplerParameterIivEXT = new Command();
  private static void glSamplerParameterIivEXT() {
    Command cmd = glSamplerParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_texture_border_clamp;
  }
  public static final Command glGetProgramLocalParameterfvARB = new Command();
  private static void glGetProgramLocalParameterfvARB() {
    Command cmd = glGetProgramLocalParameterfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glGetVertexAttribivARB = new Command();
  private static void glGetVertexAttribivARB() {
    Command cmd = glGetVertexAttribivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_shader;
  }
  public static final Command glUniformMatrix4x2fv = new Command();
  private static void glUniformMatrix4x2fv() {
    Command cmd = glUniformMatrix4x2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glMultiTexCoord2sARB = new Command();
  private static void glMultiTexCoord2sARB() {
    Command cmd = glMultiTexCoord2sARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetActiveVaryingNV = new Command();
  private static void glGetActiveVaryingNV() {
    Command cmd = glGetActiveVaryingNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glMultiDrawArrays = new Command();
  private static void glMultiDrawArrays() {
    Command cmd = glMultiDrawArrays;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glVertexArrayTexCoordOffsetEXT = new Command();
  private static void glVertexArrayTexCoordOffsetEXT() {
    Command cmd = glVertexArrayTexCoordOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, TexCoordPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCreateShader = new Command();
  private static void glCreateShader() {
    Command cmd = glCreateShader;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glProgramUniformMatrix4x2dv = new Command();
  private static void glProgramUniformMatrix4x2dv() {
    Command cmd = glProgramUniformMatrix4x2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glTexGenfvOES = new Command();
  private static void glTexGenfvOES() {
    Command cmd = glTexGenfvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glMultiDrawArraysIndirect = new Command();
  private static void glMultiDrawArraysIndirect() {
    Command cmd = glMultiDrawArraysIndirect;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glMatrixIndexPointerOES = new Command();
  private static void glMatrixIndexPointerOES() {
    Command cmd = glMatrixIndexPointerOES;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_OES_matrix_palette;
  }
  public static final Command glProgramLocalParameter4fARB = new Command();
  private static void glProgramLocalParameter4fARB() {
    Command cmd = glProgramLocalParameter4fARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glUniformMatrix2dv = new Command();
  private static void glUniformMatrix2dv() {
    Command cmd = glUniformMatrix2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glMapParameterfvNV = new Command();
  private static void glMapParameterfvNV() {
    Command cmd = glMapParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glIsNameAMD = new Command();
  private static void glIsNameAMD() {
    Command cmd = glIsNameAMD;
    cmd.returnGroup = Boolean;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_AMD_name_gen_delete;
  }
  public static final Command glGetNamedFramebufferParameteriv = new Command();
  private static void glGetNamedFramebufferParameteriv() {
    Command cmd = glGetNamedFramebufferParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMultiDrawArraysIndirectAMD = new Command();
  private static void glMultiDrawArraysIndirectAMD() {
    Command cmd = glMultiDrawArraysIndirectAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glCopyConvolutionFilter1DEXT = new Command();
  private static void glCopyConvolutionFilter1DEXT() {
    Command cmd = glCopyConvolutionFilter1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glTexParameterxOES = new Command();
  private static void glTexParameterxOES() {
    Command cmd = glTexParameterxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetTrackMatrixivNV = new Command();
  private static void glGetTrackMatrixivNV() {
    Command cmd = glGetTrackMatrixivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetActiveAttrib = new Command();
  private static void glGetActiveAttrib() {
    Command cmd = glGetActiveAttrib;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glProgramUniformMatrix4dvEXT = new Command();
  private static void glProgramUniformMatrix4dvEXT() {
    Command cmd = glProgramUniformMatrix4dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glBlitFramebufferANGLE = new Command();
  private static void glBlitFramebufferANGLE() {
    Command cmd = glBlitFramebufferANGLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_ANGLE_framebuffer_blit;
  }
  public static final Command glGetTexParameterIuivOES = new Command();
  private static void glGetTexParameterIuivOES() {
    Command cmd = glGetTexParameterIuivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glMatrixTranslatefEXT = new Command();
  private static void glMatrixTranslatefEXT() {
    Command cmd = glMatrixTranslatefEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix2fv = new Command();
  private static void glUniformMatrix2fv() {
    Command cmd = glUniformMatrix2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glMultiTexCoord1dvARB = new Command();
  private static void glMultiTexCoord1dvARB() {
    Command cmd = glMultiTexCoord1dvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glQueryCounter = new Command();
  private static void glQueryCounter() {
    Command cmd = glQueryCounter;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_timer_query;
  }
  public static final Command glColorTableSGI = new Command();
  private static void glColorTableSGI() {
    Command cmd = glColorTableSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glGetVertexAttribIiv = new Command();
  private static void glGetVertexAttribIiv() {
    Command cmd = glGetVertexAttribIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glCopyMultiTexImage1DEXT = new Command();
  private static void glCopyMultiTexImage1DEXT() {
    Command cmd = glCopyMultiTexImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glColorPointerEXT = new Command();
  private static void glColorPointerEXT() {
    Command cmd = glColorPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glPointParameterfvEXT = new Command();
  private static void glPointParameterfvEXT() {
    Command cmd = glPointParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_point_parameters;
  }
  public static final Command glBindBufferRangeNV = new Command();
  private static void glBindBufferRangeNV() {
    Command cmd = glBindBufferRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glClearNamedFramebufferfv = new Command();
  private static void glClearNamedFramebufferfv() {
    Command cmd = glClearNamedFramebufferfv;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glBindVideoCaptureStreamBufferNV = new Command();
  private static void glBindVideoCaptureStreamBufferNV() {
    Command cmd = glBindVideoCaptureStreamBufferNV;
    cmd.returnGroup = _null_;
    cmd.addParam("frame_region", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glTextureStorage2D = new Command();
  private static void glTextureStorage2D() {
    Command cmd = glTextureStorage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTexStorageMem2DMultisampleEXT = new Command();
  private static void glTexStorageMem2DMultisampleEXT() {
    Command cmd = glTexStorageMem2DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glFlushStaticDataIBM = new Command();
  private static void glFlushStaticDataIBM() {
    Command cmd = glFlushStaticDataIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_IBM_static_data;
  }
  public static final Command glGetProgramStringNV = new Command();
  private static void glGetProgramStringNV() {
    Command cmd = glGetProgramStringNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetQueryObjectuivEXT = new Command();
  private static void glGetQueryObjectuivEXT() {
    Command cmd = glGetQueryObjectuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_occlusion_query_boolean;
  }
  public static final Command glTextureStorage1D = new Command();
  private static void glTextureStorage1D() {
    Command cmd = glTextureStorage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetVertexAttribdv = new Command();
  private static void glGetVertexAttribdv() {
    Command cmd = glGetVertexAttribdv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glTextureViewEXT = new Command();
  private static void glTextureViewEXT() {
    Command cmd = glTextureViewEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_view;
  }
  public static final Command glPathParameterfvNV = new Command();
  private static void glPathParameterfvNV() {
    Command cmd = glPathParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glBeginTransformFeedbackEXT = new Command();
  private static void glBeginTransformFeedbackEXT() {
    Command cmd = glBeginTransformFeedbackEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("primitiveMode", GLenum, _null_);
    cmd.extension = GL_EXT_transform_feedback;
  }
  public static final Command glIsImageHandleResidentNV = new Command();
  private static void glIsImageHandleResidentNV() {
    Command cmd = glIsImageHandleResidentNV;
    cmd.returnGroup = Boolean;
  }
  public static final Command glVertexP3uiv = new Command();
  private static void glVertexP3uiv() {
    Command cmd = glVertexP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glFramebufferTextureEXT = new Command();
  private static void glFramebufferTextureEXT() {
    Command cmd = glFramebufferTextureEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_NV_geometry_program4;
  }
  public static final Command glMultiTexCoord1iv = new Command();
  private static void glMultiTexCoord1iv() {
    Command cmd = glMultiTexCoord1iv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glColorFragmentOp3ATI = new Command();
  private static void glColorFragmentOp3ATI() {
    Command cmd = glColorFragmentOp3ATI;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glProgramBufferParametersIivNV = new Command();
  private static void glProgramBufferParametersIivNV() {
    Command cmd = glProgramBufferParametersIivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_parameter_buffer_object;
  }
  public static final Command glStencilThenCoverStrokePathNV = new Command();
  private static void glStencilThenCoverStrokePathNV() {
    Command cmd = glStencilThenCoverStrokePathNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glDebugMessageInsertKHR = new Command();
  private static void glDebugMessageInsertKHR() {
    Command cmd = glDebugMessageInsertKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glReleaseKeyedMutexWin32EXT = new Command();
  private static void glReleaseKeyedMutexWin32EXT() {
    Command cmd = glReleaseKeyedMutexWin32EXT;
    cmd.returnGroup = Boolean;
  }
  public static final Command glGetCompressedTexImageARB = new Command();
  private static void glGetCompressedTexImageARB() {
    Command cmd = glGetCompressedTexImageARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glTextureStorage3D = new Command();
  private static void glTextureStorage3D() {
    Command cmd = glTextureStorage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glProgramUniformMatrix4x2fv = new Command();
  private static void glProgramUniformMatrix4x2fv() {
    Command cmd = glProgramUniformMatrix4x2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glBindMultiTextureEXT = new Command();
  private static void glBindMultiTextureEXT() {
    Command cmd = glBindMultiTextureEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMapNamedBufferRange = new Command();
  private static void glMapNamedBufferRange() {
    Command cmd = glMapNamedBufferRange;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLbitfield, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glClearNamedFramebufferfi = new Command();
  private static void glClearNamedFramebufferfi() {
    Command cmd = glClearNamedFramebufferfi;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glNamedRenderbufferStorageMultisample = new Command();
  private static void glNamedRenderbufferStorageMultisample() {
    Command cmd = glNamedRenderbufferStorageMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetTexParameterIivEXT = new Command();
  private static void glGetTexParameterIivEXT() {
    Command cmd = glGetTexParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_texture_integer;
  }
  public static final Command glCombinerParameterfNV = new Command();
  private static void glCombinerParameterfNV() {
    Command cmd = glCombinerParameterfNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glGetVertexAttribfv = new Command();
  private static void glGetVertexAttribfv() {
    Command cmd = glGetVertexAttribfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glPointParameterx = new Command();
  private static void glPointParameterx() {
    Command cmd = glPointParameterx;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glSampleMaskEXT = new Command();
  private static void glSampleMaskEXT() {
    Command cmd = glSampleMaskEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("invert", GLboolean, Boolean);
    cmd.extension = GL_EXT_multisample;
  }
  public static final Command glCopyTextureSubImage2DEXT = new Command();
  private static void glCopyTextureSubImage2DEXT() {
    Command cmd = glCopyTextureSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glResetHistogram = new Command();
  private static void glResetHistogram() {
    Command cmd = glResetHistogram;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glMaterialxvOES = new Command();
  private static void glMaterialxvOES() {
    Command cmd = glMaterialxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetFinalCombinerInputParameterivNV = new Command();
  private static void glGetFinalCombinerInputParameterivNV() {
    Command cmd = glGetFinalCombinerInputParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("variable", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glPointParameteri = new Command();
  private static void glPointParameteri() {
    Command cmd = glPointParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glPointParameterf = new Command();
  private static void glPointParameterf() {
    Command cmd = glPointParameterf;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetnConvolutionFilterARB = new Command();
  private static void glGetnConvolutionFilterARB() {
    Command cmd = glGetnConvolutionFilterARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glGetVertexAttribIivEXT = new Command();
  private static void glGetVertexAttribIivEXT() {
    Command cmd = glGetVertexAttribIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program4;
  }
  public static final Command glTexBufferARB = new Command();
  private static void glTexBufferARB() {
    Command cmd = glTexBufferARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_texture_buffer_object;
  }
  public static final Command glTextureStorage2DMultisampleEXT = new Command();
  private static void glTextureStorage2DMultisampleEXT() {
    Command cmd = glTextureStorage2DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glReadnPixelsARB = new Command();
  private static void glReadnPixelsARB() {
    Command cmd = glReadnPixelsARB;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glTexCoordPointerEXT = new Command();
  private static void glTexCoordPointerEXT() {
    Command cmd = glTexCoordPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, TexCoordPointerType);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glFragmentLightModelfSGIX = new Command();
  private static void glFragmentLightModelfSGIX() {
    Command cmd = glFragmentLightModelfSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FragmentLightModelParameterSGIX);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glLightModelxv = new Command();
  private static void glLightModelxv() {
    Command cmd = glLightModelxv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glTexStorageMem3DMultisampleEXT = new Command();
  private static void glTexStorageMem3DMultisampleEXT() {
    Command cmd = glTexStorageMem3DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glMapBufferRange = new Command();
  private static void glMapBufferRange() {
    Command cmd = glMapBufferRange;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("access", GLbitfield, _null_);
    cmd.extension = GL_ARB_map_buffer_range;
  }
  public static final Command glIsFramebuffer = new Command();
  private static void glIsFramebuffer() {
    Command cmd = glIsFramebuffer;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glGetVertexAttribArrayObjectfvATI = new Command();
  private static void glGetVertexAttribArrayObjectfvATI() {
    Command cmd = glGetVertexAttribArrayObjectfvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetVertexAttribiv = new Command();
  private static void glGetVertexAttribiv() {
    Command cmd = glGetVertexAttribiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glCompressedTexSubImage1DARB = new Command();
  private static void glCompressedTexSubImage1DARB() {
    Command cmd = glCompressedTexSubImage1DARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glCoverStrokePathInstancedNV = new Command();
  private static void glCoverStrokePathInstancedNV() {
    Command cmd = glCoverStrokePathInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glClearNamedFramebufferiv = new Command();
  private static void glClearNamedFramebufferiv() {
    Command cmd = glClearNamedFramebufferiv;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTexStorage3DEXT = new Command();
  private static void glTexStorage3DEXT() {
    Command cmd = glTexStorage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_storage;
  }
  public static final Command glGetProgramBinary = new Command();
  private static void glGetProgramBinary() {
    Command cmd = glGetProgramBinary;
    cmd.returnGroup = _null_;
    cmd.addParam("binaryFormat", GLenum, _null_);
    cmd.extension = GL_ARB_get_program_binary;
  }
  public static final Command glElementPointerAPPLE = new Command();
  private static void glElementPointerAPPLE() {
    Command cmd = glElementPointerAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_APPLE_element_array;
  }
  public static final Command glGetQueryObjectiv = new Command();
  private static void glGetQueryObjectiv() {
    Command cmd = glGetQueryObjectiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glIsProgramPipelineEXT = new Command();
  private static void glIsProgramPipelineEXT() {
    Command cmd = glIsProgramPipelineEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glColorP4uiv = new Command();
  private static void glColorP4uiv() {
    Command cmd = glColorP4uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glBindTransformFeedback = new Command();
  private static void glBindTransformFeedback() {
    Command cmd = glBindTransformFeedback;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_transform_feedback2;
  }
  public static final Command glPointParameterfEXT = new Command();
  private static void glPointParameterfEXT() {
    Command cmd = glPointParameterfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_point_parameters;
  }
  public static final Command glGetPathParameterivNV = new Command();
  private static void glGetPathParameterivNV() {
    Command cmd = glGetPathParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glObjectLabel = new Command();
  private static void glObjectLabel() {
    Command cmd = glObjectLabel;
    cmd.returnGroup = _null_;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glVDPAUGetSurfaceivNV = new Command();
  private static void glVDPAUGetSurfaceivNV() {
    Command cmd = glVDPAUGetSurfaceivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vdpau_interop;
  }
  public static final Command glVertexStream1fvATI = new Command();
  private static void glVertexStream1fvATI() {
    Command cmd = glVertexStream1fvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetTransformFeedbackiv = new Command();
  private static void glGetTransformFeedbackiv() {
    Command cmd = glGetTransformFeedbackiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVertexAttribParameteriAMD = new Command();
  private static void glVertexAttribParameteriAMD() {
    Command cmd = glVertexAttribParameteriAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_interleaved_elements;
  }
  public static final Command glGetProgramResourceLocationIndex = new Command();
  private static void glGetProgramResourceLocationIndex() {
    Command cmd = glGetProgramResourceLocationIndex;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.extension = GL_ARB_program_interface_query;
  }
  public static final Command glGetImageTransformParameterfvHP = new Command();
  private static void glGetImageTransformParameterfvHP() {
    Command cmd = glGetImageTransformParameterfvHP;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_HP_image_transform;
  }
  public static final Command glIsBufferARB = new Command();
  private static void glIsBufferARB() {
    Command cmd = glIsBufferARB;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glGetVertexAttribLui64vNV = new Command();
  private static void glGetVertexAttribLui64vNV() {
    Command cmd = glGetVertexAttribLui64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_attrib_integer_64bit;
  }
  public static final Command glProgramParameteriARB = new Command();
  private static void glProgramParameteriARB() {
    Command cmd = glProgramParameteriARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_geometry_shader4;
  }
  public static final Command glActiveStencilFaceEXT = new Command();
  private static void glActiveStencilFaceEXT() {
    Command cmd = glActiveStencilFaceEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, StencilFaceDirection);
    cmd.extension = GL_EXT_stencil_two_side;
  }
  public static final Command glMultiTexCoord4dARB = new Command();
  private static void glMultiTexCoord4dARB() {
    Command cmd = glMultiTexCoord4dARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetPixelMapfv = new Command();
  private static void glGetPixelMapfv() {
    Command cmd = glGetPixelMapfv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, PixelMap);
  }
  public static final Command glVertexStream4svATI = new Command();
  private static void glVertexStream4svATI() {
    Command cmd = glVertexStream4svATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glTexEnvxvOES = new Command();
  private static void glTexEnvxvOES() {
    Command cmd = glTexEnvxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glNamedProgramLocalParameterI4uiEXT = new Command();
  private static void glNamedProgramLocalParameterI4uiEXT() {
    Command cmd = glNamedProgramLocalParameterI4uiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFogCoordFormatNV = new Command();
  private static void glFogCoordFormatNV() {
    Command cmd = glFogCoordFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glGetIntegeri_vEXT = new Command();
  private static void glGetIntegeri_vEXT() {
    Command cmd = glGetIntegeri_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_multiview_draw_buffers;
  }
  public static final Command glColorMaterial = new Command();
  private static void glColorMaterial() {
    Command cmd = glColorMaterial;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("mode", GLenum, ColorMaterialParameter);
  }
  public static final Command glGetConvolutionParameterfvEXT = new Command();
  private static void glGetConvolutionParameterfvEXT() {
    Command cmd = glGetConvolutionParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("pname", GLenum, ConvolutionParameterEXT);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glReadnPixels = new Command();
  private static void glReadnPixels() {
    Command cmd = glReadnPixels;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_KHR_robustness;
  }
  public static final Command glCombinerInputNV = new Command();
  private static void glCombinerInputNV() {
    Command cmd = glCombinerInputNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("portion", GLenum, _null_);
    cmd.addParam("variable", GLenum, _null_);
    cmd.addParam("input", GLenum, _null_);
    cmd.addParam("mapping", GLenum, _null_);
    cmd.addParam("componentUsage", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glVDPAURegisterOutputSurfaceNV = new Command();
  private static void glVDPAURegisterOutputSurfaceNV() {
    Command cmd = glVDPAURegisterOutputSurfaceNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vdpau_interop;
  }
  public static final Command glMultiTexEnvfEXT = new Command();
  private static void glMultiTexEnvfEXT() {
    Command cmd = glMultiTexEnvfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glIsProgramPipeline = new Command();
  private static void glIsProgramPipeline() {
    Command cmd = glIsProgramPipeline;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glPathMemoryGlyphIndexArrayNV = new Command();
  private static void glPathMemoryGlyphIndexArrayNV() {
    Command cmd = glPathMemoryGlyphIndexArrayNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fontTarget", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glCopyImageSubDataOES = new Command();
  private static void glCopyImageSubDataOES() {
    Command cmd = glCopyImageSubDataOES;
    cmd.returnGroup = _null_;
    cmd.addParam("srcTarget", GLenum, _null_);
    cmd.addParam("dstTarget", GLenum, _null_);
  }
  public static final Command glBindRenderbufferOES = new Command();
  private static void glBindRenderbufferOES() {
    Command cmd = glBindRenderbufferOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glVertexStream2ivATI = new Command();
  private static void glVertexStream2ivATI() {
    Command cmd = glVertexStream2ivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glMultiTexCoord3hvNV = new Command();
  private static void glMultiTexCoord3hvNV() {
    Command cmd = glMultiTexCoord3hvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glFramebufferDrawBuffersEXT = new Command();
  private static void glFramebufferDrawBuffersEXT() {
    Command cmd = glFramebufferDrawBuffersEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, DrawBufferMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glNewObjectBufferATI = new Command();
  private static void glNewObjectBufferATI() {
    Command cmd = glNewObjectBufferATI;
    cmd.returnGroup = _null_;
    cmd.addParam("usage", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glTextureStorage3DMultisampleEXT = new Command();
  private static void glTextureStorage3DMultisampleEXT() {
    Command cmd = glTextureStorage3DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord2bvOES = new Command();
  private static void glMultiTexCoord2bvOES() {
    Command cmd = glMultiTexCoord2bvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glGetProgramEnvParameterfvARB = new Command();
  private static void glGetProgramEnvParameterfvARB() {
    Command cmd = glGetProgramEnvParameterfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glMakeImageHandleResidentARB = new Command();
  private static void glMakeImageHandleResidentARB() {
    Command cmd = glMakeImageHandleResidentARB;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_ARB_bindless_texture;
  }
  public static final Command glMultiTexCoord1dv = new Command();
  private static void glMultiTexCoord1dv() {
    Command cmd = glMultiTexCoord1dv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glMatrixLoadTransposefEXT = new Command();
  private static void glMatrixLoadTransposefEXT() {
    Command cmd = glMatrixLoadTransposefEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetVertexAttribLi64vNV = new Command();
  private static void glGetVertexAttribLi64vNV() {
    Command cmd = glGetVertexAttribLi64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_attrib_integer_64bit;
  }
  public static final Command glBlendEquationiOES = new Command();
  private static void glBlendEquationiOES() {
    Command cmd = glBlendEquationiOES;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_OES_draw_buffers_indexed;
  }
  public static final Command glCopyImageSubData = new Command();
  private static void glCopyImageSubData() {
    Command cmd = glCopyImageSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("srcTarget", GLenum, _null_);
    cmd.addParam("dstTarget", GLenum, _null_);
  }
  public static final Command glIsSync = new Command();
  private static void glIsSync() {
    Command cmd = glIsSync;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_sync;
  }
  public static final Command glMatrixRotatedEXT = new Command();
  private static void glMatrixRotatedEXT() {
    Command cmd = glMatrixRotatedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord4fvARB = new Command();
  private static void glMultiTexCoord4fvARB() {
    Command cmd = glMultiTexCoord4fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glMultiDrawElementsEXT = new Command();
  private static void glMultiDrawElementsEXT() {
    Command cmd = glMultiDrawElementsEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glMap1xOES = new Command();
  private static void glMap1xOES() {
    Command cmd = glMap1xOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glMultiTexCoord1fv = new Command();
  private static void glMultiTexCoord1fv() {
    Command cmd = glMultiTexCoord1fv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glIsFenceNV = new Command();
  private static void glIsFenceNV() {
    Command cmd = glIsFenceNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_fence;
  }
  public static final Command glFramebufferTexture3DOES = new Command();
  private static void glFramebufferTexture3DOES() {
    Command cmd = glFramebufferTexture3DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_OES_texture_3D;
  }
  public static final Command glVertexP2ui = new Command();
  private static void glVertexP2ui() {
    Command cmd = glVertexP2ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetFixedvOES = new Command();
  private static void glGetFixedvOES() {
    Command cmd = glGetFixedvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glLoadIdentityDeformationMapSGIX = new Command();
  private static void glLoadIdentityDeformationMapSGIX() {
    Command cmd = glLoadIdentityDeformationMapSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, FfdMaskSGIX);
    cmd.extension = GL_SGIX_polynomial_ffd;
  }
  public static final Command glHintPGI = new Command();
  private static void glHintPGI() {
    Command cmd = glHintPGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_PGI_misc_hints;
  }
  public static final Command glBindRenderbuffer = new Command();
  private static void glBindRenderbuffer() {
    Command cmd = glBindRenderbuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glAlphaFuncxOES = new Command();
  private static void glAlphaFuncxOES() {
    Command cmd = glAlphaFuncxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTexGeniOES = new Command();
  private static void glTexGeniOES() {
    Command cmd = glTexGeniOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glUseProgramStages = new Command();
  private static void glUseProgramStages() {
    Command cmd = glUseProgramStages;
    cmd.returnGroup = _null_;
    cmd.addParam("stages", GLbitfield, _null_);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glNamedBufferDataEXT = new Command();
  private static void glNamedBufferDataEXT() {
    Command cmd = glNamedBufferDataEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("usage", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramSubroutineParametersuivNV = new Command();
  private static void glProgramSubroutineParametersuivNV() {
    Command cmd = glProgramSubroutineParametersuivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program5;
  }
  public static final Command glSecondaryColorPointerListIBM = new Command();
  private static void glSecondaryColorPointerListIBM() {
    Command cmd = glSecondaryColorPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glNamedFramebufferTextureEXT = new Command();
  private static void glNamedFramebufferTextureEXT() {
    Command cmd = glNamedFramebufferTextureEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glAccum = new Command();
  private static void glAccum() {
    Command cmd = glAccum;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, AccumOp);
  }
  public static final Command glShadeModel = new Command();
  private static void glShadeModel() {
    Command cmd = glShadeModel;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, ShadingModel);
  }
  public static final Command glFragmentLightivSGIX = new Command();
  private static void glFragmentLightivSGIX() {
    Command cmd = glFragmentLightivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glUniformMatrix4fvARB = new Command();
  private static void glUniformMatrix4fvARB() {
    Command cmd = glUniformMatrix4fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glGetVideoCaptureStreamfvNV = new Command();
  private static void glGetVideoCaptureStreamfvNV() {
    Command cmd = glGetVideoCaptureStreamfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glMultiTexCoord3bvOES = new Command();
  private static void glMultiTexCoord3bvOES() {
    Command cmd = glMultiTexCoord3bvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glClearNamedBufferData = new Command();
  private static void glClearNamedBufferData() {
    Command cmd = glClearNamedBufferData;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glFramebufferSamplePositionsfvAMD = new Command();
  private static void glFramebufferSamplePositionsfvAMD() {
    Command cmd = glFramebufferSamplePositionsfvAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_AMD_framebuffer_sample_positions;
  }
  public static final Command glCoverFillPathInstancedNV = new Command();
  private static void glCoverFillPathInstancedNV() {
    Command cmd = glCoverFillPathInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glTextureParameterIiv = new Command();
  private static void glTextureParameterIiv() {
    Command cmd = glTextureParameterIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetHistogramParameterfvEXT = new Command();
  private static void glGetHistogramParameterfvEXT() {
    Command cmd = glGetHistogramParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, HistogramTargetEXT);
    cmd.addParam("pname", GLenum, GetHistogramParameterPNameEXT);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glGetMultiTexLevelParameterfvEXT = new Command();
  private static void glGetMultiTexLevelParameterfvEXT() {
    Command cmd = glGetMultiTexLevelParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCopyMultiTexSubImage3DEXT = new Command();
  private static void glCopyMultiTexSubImage3DEXT() {
    Command cmd = glCopyMultiTexSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix4x2fvNV = new Command();
  private static void glUniformMatrix4x2fvNV() {
    Command cmd = glUniformMatrix4x2fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_NV_non_square_matrices;
  }
  public static final Command glCompressedMultiTexImage2DEXT = new Command();
  private static void glCompressedMultiTexImage2DEXT() {
    Command cmd = glCompressedMultiTexImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexSubImage3DEXT = new Command();
  private static void glMultiTexSubImage3DEXT() {
    Command cmd = glMultiTexSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMapParameterivNV = new Command();
  private static void glMapParameterivNV() {
    Command cmd = glMapParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glProgramLocalParametersI4uivNV = new Command();
  private static void glProgramLocalParametersI4uivNV() {
    Command cmd = glProgramLocalParametersI4uivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glProgramLocalParameterI4uiNV = new Command();
  private static void glProgramLocalParameterI4uiNV() {
    Command cmd = glProgramLocalParameterI4uiNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glHistogram = new Command();
  private static void glHistogram() {
    Command cmd = glHistogram;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("sink", GLboolean, Boolean);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glClientActiveTexture = new Command();
  private static void glClientActiveTexture() {
    Command cmd = glClientActiveTexture;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
  }
  public static final Command glVertexWeightPointerEXT = new Command();
  private static void glVertexWeightPointerEXT() {
    Command cmd = glVertexWeightPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_weighting;
  }
  public static final Command glTexFilterFuncSGIS = new Command();
  private static void glTexFilterFuncSGIS() {
    Command cmd = glTexFilterFuncSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_SGIS_texture_filter4;
  }
  public static final Command glIsEnablediEXT = new Command();
  private static void glIsEnablediEXT() {
    Command cmd = glIsEnablediEXT;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glRenderbufferStorageMultisampleIMG = new Command();
  private static void glRenderbufferStorageMultisampleIMG() {
    Command cmd = glRenderbufferStorageMultisampleIMG;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_IMG_multisampled_render_to_texture;
  }
  public static final Command glGetTexEnviv = new Command();
  private static void glGetTexEnviv() {
    Command cmd = glGetTexEnviv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
  }
  public static final Command glGetVertexAttribIuiv = new Command();
  private static void glGetVertexAttribIuiv() {
    Command cmd = glGetVertexAttribIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glHint = new Command();
  private static void glHint() {
    Command cmd = glHint;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, HintTarget);
    cmd.addParam("mode", GLenum, HintMode);
  }
  public static final Command glMultiTexCoord1iARB = new Command();
  private static void glMultiTexCoord1iARB() {
    Command cmd = glMultiTexCoord1iARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glColorPointervINTEL = new Command();
  private static void glColorPointervINTEL() {
    Command cmd = glColorPointervINTEL;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
    cmd.extension = GL_INTEL_parallel_arrays;
  }
  public static final Command glCompressedTexSubImage3DOES = new Command();
  private static void glCompressedTexSubImage3DOES() {
    Command cmd = glCompressedTexSubImage3DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_OES_texture_3D;
  }
  public static final Command glGetProgramParameterfvNV = new Command();
  private static void glGetProgramParameterfvNV() {
    Command cmd = glGetProgramParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glSetMultisamplefvAMD = new Command();
  private static void glSetMultisamplefvAMD() {
    Command cmd = glSetMultisamplefvAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_sample_positions;
  }
  public static final Command glGetTextureParameterivEXT = new Command();
  private static void glGetTextureParameterivEXT() {
    Command cmd = glGetTextureParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetActiveUniform = new Command();
  private static void glGetActiveUniform() {
    Command cmd = glGetActiveUniform;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glMultiDrawArraysEXT = new Command();
  private static void glMultiDrawArraysEXT() {
    Command cmd = glMultiDrawArraysEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glCombinerOutputNV = new Command();
  private static void glCombinerOutputNV() {
    Command cmd = glCombinerOutputNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("portion", GLenum, _null_);
    cmd.addParam("abOutput", GLenum, _null_);
    cmd.addParam("cdOutput", GLenum, _null_);
    cmd.addParam("sumOutput", GLenum, _null_);
    cmd.addParam("scale", GLenum, _null_);
    cmd.addParam("bias", GLenum, _null_);
    cmd.addParam("abDotProduct", GLboolean, Boolean);
    cmd.addParam("cdDotProduct", GLboolean, Boolean);
    cmd.addParam("muxSum", GLboolean, Boolean);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glTexImage3DOES = new Command();
  private static void glTexImage3DOES() {
    Command cmd = glTexImage3DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_OES_texture_3D;
  }
  public static final Command glNamedFramebufferTexture1DEXT = new Command();
  private static void glNamedFramebufferTexture1DEXT() {
    Command cmd = glNamedFramebufferTexture1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetMultiTexImageEXT = new Command();
  private static void glGetMultiTexImageEXT() {
    Command cmd = glGetMultiTexImageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glLightModelxvOES = new Command();
  private static void glLightModelxvOES() {
    Command cmd = glLightModelxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glCopyColorTable = new Command();
  private static void glCopyColorTable() {
    Command cmd = glCopyColorTable;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glHistogramEXT = new Command();
  private static void glHistogramEXT() {
    Command cmd = glHistogramEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, HistogramTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("sink", GLboolean, Boolean);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glTexCoordP3uiv = new Command();
  private static void glTexCoordP3uiv() {
    Command cmd = glTexCoordP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glBindImageTexture = new Command();
  private static void glBindImageTexture() {
    Command cmd = glBindImageTexture;
    cmd.returnGroup = _null_;
    cmd.addParam("layered", GLboolean, Boolean);
    cmd.addParam("access", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_ARB_shader_image_load_store;
  }
  public static final Command glNamedProgramLocalParameter4fEXT = new Command();
  private static void glNamedProgramLocalParameter4fEXT() {
    Command cmd = glNamedProgramLocalParameter4fEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glWaitSync = new Command();
  private static void glWaitSync() {
    Command cmd = glWaitSync;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_ARB_sync;
  }
  public static final Command glListParameteriSGIX = new Command();
  private static void glListParameteriSGIX() {
    Command cmd = glListParameteriSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, ListParameterName);
    cmd.extension = GL_SGIX_list_priority;
  }
  public static final Command glGetIntegerui64i_vNV = new Command();
  private static void glGetIntegerui64i_vNV() {
    Command cmd = glGetIntegerui64i_vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glTextureRenderbufferEXT = new Command();
  private static void glTextureRenderbufferEXT() {
    Command cmd = glTextureRenderbufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glElementPointerATI = new Command();
  private static void glElementPointerATI() {
    Command cmd = glElementPointerATI;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ATI_element_array;
  }
  public static final Command glVertexStream1sATI = new Command();
  private static void glVertexStream1sATI() {
    Command cmd = glVertexStream1sATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glExtIsProgramBinaryQCOM = new Command();
  private static void glExtIsProgramBinaryQCOM() {
    Command cmd = glExtIsProgramBinaryQCOM;
    cmd.returnGroup = Boolean;
  }
  public static final Command glProgramUniformMatrix2x3fvEXT = new Command();
  private static void glProgramUniformMatrix2x3fvEXT() {
    Command cmd = glProgramUniformMatrix2x3fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glDrawRangeElementsBaseVertexEXT = new Command();
  private static void glDrawRangeElementsBaseVertexEXT() {
    Command cmd = glDrawRangeElementsBaseVertexEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glGetObjectLabelEXT = new Command();
  private static void glGetObjectLabelEXT() {
    Command cmd = glGetObjectLabelEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_debug_label;
  }
  public static final Command glTextureView = new Command();
  private static void glTextureView() {
    Command cmd = glTextureView;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_texture_view;
  }
  public static final Command glImportMemoryFdEXT = new Command();
  private static void glImportMemoryFdEXT() {
    Command cmd = glImportMemoryFdEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("handleType", GLenum, ExternalHandleType);
    cmd.extension = GL_EXT_memory_object_fd;
  }
  public static final Command glMatrixMult3x2fNV = new Command();
  private static void glMatrixMult3x2fNV() {
    Command cmd = glMatrixMult3x2fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("matrixMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glVertexAttribP1ui = new Command();
  private static void glVertexAttribP1ui() {
    Command cmd = glVertexAttribP1ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glLightEnviSGIX = new Command();
  private static void glLightEnviSGIX() {
    Command cmd = glLightEnviSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, LightEnvParameterSGIX);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glIsVertexArrayOES = new Command();
  private static void glIsVertexArrayOES() {
    Command cmd = glIsVertexArrayOES;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_OES_vertex_array_object;
  }
  public static final Command glDrawArraysIndirect = new Command();
  private static void glDrawArraysIndirect() {
    Command cmd = glDrawArraysIndirect;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ARB_draw_indirect;
  }
  public static final Command glIsPointInFillPathNV = new Command();
  private static void glIsPointInFillPathNV() {
    Command cmd = glIsPointInFillPathNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glTextureStorageMem1DEXT = new Command();
  private static void glTextureStorageMem1DEXT() {
    Command cmd = glTextureStorageMem1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glFragmentLightModelfvSGIX = new Command();
  private static void glFragmentLightModelfvSGIX() {
    Command cmd = glFragmentLightModelfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FragmentLightModelParameterSGIX);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glGetNamedFramebufferParameterivEXT = new Command();
  private static void glGetNamedFramebufferParameterivEXT() {
    Command cmd = glGetNamedFramebufferParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetSamplerParameterIivEXT = new Command();
  private static void glGetSamplerParameterIivEXT() {
    Command cmd = glGetSamplerParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_texture_border_clamp;
  }
  public static final Command glTexGenxvOES = new Command();
  private static void glTexGenxvOES() {
    Command cmd = glTexGenxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glTextureParameteriv = new Command();
  private static void glTextureParameteriv() {
    Command cmd = glTextureParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glIsTransformFeedback = new Command();
  private static void glIsTransformFeedback() {
    Command cmd = glIsTransformFeedback;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_transform_feedback2;
  }
  public static final Command glMapBufferRangeEXT = new Command();
  private static void glMapBufferRangeEXT() {
    Command cmd = glMapBufferRangeEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("access", GLbitfield, _null_);
    cmd.extension = GL_EXT_map_buffer_range;
  }
  public static final Command glBlendFuncSeparateiOES = new Command();
  private static void glBlendFuncSeparateiOES() {
    Command cmd = glBlendFuncSeparateiOES;
    cmd.returnGroup = _null_;
    cmd.addParam("srcRGB", GLenum, _null_);
    cmd.addParam("dstRGB", GLenum, _null_);
    cmd.addParam("srcAlpha", GLenum, _null_);
    cmd.addParam("dstAlpha", GLenum, _null_);
    cmd.extension = GL_OES_draw_buffers_indexed;
  }
  public static final Command glDrawRangeElements = new Command();
  private static void glDrawRangeElements() {
    Command cmd = glDrawRangeElements;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glDrawTransformFeedbackStreamInstanced = new Command();
  private static void glDrawTransformFeedbackStreamInstanced() {
    Command cmd = glDrawTransformFeedbackStreamInstanced;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glGetProgramEnvParameterIuivNV = new Command();
  private static void glGetProgramEnvParameterIuivNV() {
    Command cmd = glGetProgramEnvParameterIuivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glProgramUniformMatrix3x2dvEXT = new Command();
  private static void glProgramUniformMatrix3x2dvEXT() {
    Command cmd = glProgramUniformMatrix3x2dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetSamplerParameterIuivOES = new Command();
  private static void glGetSamplerParameterIuivOES() {
    Command cmd = glGetSamplerParameterIuivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glVertexP2uiv = new Command();
  private static void glVertexP2uiv() {
    Command cmd = glVertexP2uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glUniformMatrix2x4fv = new Command();
  private static void glUniformMatrix2x4fv() {
    Command cmd = glUniformMatrix2x4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glGetSamplerParameterIivOES = new Command();
  private static void glGetSamplerParameterIivOES() {
    Command cmd = glGetSamplerParameterIivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glMultiDrawElementsIndirectAMD = new Command();
  private static void glMultiDrawElementsIndirectAMD() {
    Command cmd = glMultiDrawElementsIndirectAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glClipPlanefOES = new Command();
  private static void glClipPlanefOES() {
    Command cmd = glClipPlanefOES;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
  }
  public static final Command glInvalidateFramebuffer = new Command();
  private static void glInvalidateFramebuffer() {
    Command cmd = glInvalidateFramebuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachments", GLenum, _null_);
  }
  public static final Command glLGPUCopyImageSubDataNVX = new Command();
  private static void glLGPUCopyImageSubDataNVX() {
    Command cmd = glLGPUCopyImageSubDataNVX;
    cmd.returnGroup = _null_;
    cmd.addParam("destinationGpuMask", GLbitfield, _null_);
    cmd.addParam("srcTarget", GLenum, _null_);
    cmd.addParam("dstTarget", GLenum, _null_);
    cmd.extension = GL_NVX_linked_gpu_multicast;
  }
  public static final Command glVertexStream3dvATI = new Command();
  private static void glVertexStream3dvATI() {
    Command cmd = glVertexStream3dvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glMultiTexGenfvEXT = new Command();
  private static void glMultiTexGenfvEXT() {
    Command cmd = glMultiTexGenfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glWaitSemaphoreEXT = new Command();
  private static void glWaitSemaphoreEXT() {
    Command cmd = glWaitSemaphoreEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("srcLayouts", GLenum, TextureLayout);
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glRenderGpuMaskNV = new Command();
  private static void glRenderGpuMaskNV() {
    Command cmd = glRenderGpuMaskNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glColorTableParameterivSGI = new Command();
  private static void glColorTableParameterivSGI() {
    Command cmd = glColorTableParameterivSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("pname", GLenum, ColorTableParameterPNameSGI);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glGetMultiTexEnvivEXT = new Command();
  private static void glGetMultiTexEnvivEXT() {
    Command cmd = glGetMultiTexEnvivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramLocalParametersI4ivNV = new Command();
  private static void glProgramLocalParametersI4ivNV() {
    Command cmd = glProgramLocalParametersI4ivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glGetMultiTexGendvEXT = new Command();
  private static void glGetMultiTexGendvEXT() {
    Command cmd = glGetMultiTexGendvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureParameterIuiv = new Command();
  private static void glTextureParameterIuiv() {
    Command cmd = glTextureParameterIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetnColorTable = new Command();
  private static void glGetnColorTable() {
    Command cmd = glGetnColorTable;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glIsBuffer = new Command();
  private static void glIsBuffer() {
    Command cmd = glIsBuffer;
    cmd.returnGroup = Boolean;
  }
  public static final Command glTexSubImage2DEXT = new Command();
  private static void glTexSubImage2DEXT() {
    Command cmd = glTexSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glTextureNormalEXT = new Command();
  private static void glTextureNormalEXT() {
    Command cmd = glTextureNormalEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_EXT_texture_perturb_normal;
  }
  public static final Command glExtTexObjectStateOverrideiQCOM = new Command();
  private static void glExtTexObjectStateOverrideiQCOM() {
    Command cmd = glExtTexObjectStateOverrideiQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_QCOM_extended_get;
  }
  public static final Command glBufferStorage = new Command();
  private static void glBufferStorage() {
    Command cmd = glBufferStorage;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_ARB_buffer_storage;
  }
  public static final Command glPointParameterfSGIS = new Command();
  private static void glPointParameterfSGIS() {
    Command cmd = glPointParameterfSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIS_point_parameters;
  }
  public static final Command glShaderOp1EXT = new Command();
  private static void glShaderOp1EXT() {
    Command cmd = glShaderOp1EXT;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glTexImage3DEXT = new Command();
  private static void glTexImage3DEXT() {
    Command cmd = glTexImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_texture3D;
  }
  public static final Command glDrawTransformFeedbackEXT = new Command();
  private static void glDrawTransformFeedbackEXT() {
    Command cmd = glDrawTransformFeedbackEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glTexStorage3DMultisampleOES = new Command();
  private static void glTexStorage3DMultisampleOES() {
    Command cmd = glTexStorage3DMultisampleOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_OES_texture_storage_multisample_2d_array;
  }
  public static final Command glGetVariantPointervEXT = new Command();
  private static void glGetVariantPointervEXT() {
    Command cmd = glGetVariantPointervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glBlendEquationSeparateEXT = new Command();
  private static void glBlendEquationSeparateEXT() {
    Command cmd = glBlendEquationSeparateEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, BlendEquationModeEXT);
    cmd.addParam("modeAlpha", GLenum, BlendEquationModeEXT);
    cmd.extension = GL_EXT_blend_equation_separate;
  }
  public static final Command glSelectPerfMonitorCountersAMD = new Command();
  private static void glSelectPerfMonitorCountersAMD() {
    Command cmd = glSelectPerfMonitorCountersAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("enable", GLboolean, Boolean);
    cmd.extension = GL_AMD_performance_monitor;
  }
  public static final Command glColorP3ui = new Command();
  private static void glColorP3ui() {
    Command cmd = glColorP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glMapBuffer = new Command();
  private static void glMapBuffer() {
    Command cmd = glMapBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("access", GLenum, BufferAccessARB);
  }
  public static final Command glPathCommandsNV = new Command();
  private static void glPathCommandsNV() {
    Command cmd = glPathCommandsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coordType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glMapNamedBufferEXT = new Command();
  private static void glMapNamedBufferEXT() {
    Command cmd = glMapNamedBufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClipControl = new Command();
  private static void glClipControl() {
    Command cmd = glClipControl;
    cmd.returnGroup = _null_;
    cmd.addParam("origin", GLenum, _null_);
    cmd.addParam("depth", GLenum, _null_);
    cmd.extension = GL_ARB_clip_control;
  }
  public static final Command glBindLightParameterEXT = new Command();
  private static void glBindLightParameterEXT() {
    Command cmd = glBindLightParameterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("value", GLenum, LightParameter);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glBindBufferBase = new Command();
  private static void glBindBufferBase() {
    Command cmd = glBindBufferBase;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_uniform_buffer_object;
  }
  public static final Command glVertexAttribArrayObjectATI = new Command();
  private static void glVertexAttribArrayObjectATI() {
    Command cmd = glVertexAttribArrayObjectATI;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
  }
  public static final Command glGetCompressedTextureImageEXT = new Command();
  private static void glGetCompressedTextureImageEXT() {
    Command cmd = glGetCompressedTextureImageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glIsOcclusionQueryNV = new Command();
  private static void glIsOcclusionQueryNV() {
    Command cmd = glIsOcclusionQueryNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_occlusion_query;
  }
  public static final Command glCopyTexSubImage3DOES = new Command();
  private static void glCopyTexSubImage3DOES() {
    Command cmd = glCopyTexSubImage3DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_texture_3D;
  }
  public static final Command glRenderbufferStorageEXT = new Command();
  private static void glRenderbufferStorageEXT() {
    Command cmd = glRenderbufferStorageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glWeightPointerOES = new Command();
  private static void glWeightPointerOES() {
    Command cmd = glWeightPointerOES;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_OES_matrix_palette;
  }
  public static final Command glBlendEquationiARB = new Command();
  private static void glBlendEquationiARB() {
    Command cmd = glBlendEquationiARB;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
  }
  public static final Command glMultiTexImage1DEXT = new Command();
  private static void glMultiTexImage1DEXT() {
    Command cmd = glMultiTexImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFeedbackBuffer = new Command();
  private static void glFeedbackBuffer() {
    Command cmd = glFeedbackBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, FeedbackType);
  }
  public static final Command glTexCoordFormatNV = new Command();
  private static void glTexCoordFormatNV() {
    Command cmd = glTexCoordFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glTexStorageMem3DEXT = new Command();
  private static void glTexStorageMem3DEXT() {
    Command cmd = glTexStorageMem3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glVertexArrayVertexAttribOffsetEXT = new Command();
  private static void glVertexArrayVertexAttribOffsetEXT() {
    Command cmd = glVertexArrayVertexAttribOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCullFace = new Command();
  private static void glCullFace() {
    Command cmd = glCullFace;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, CullFaceMode);
  }
  public static final Command glDetailTexFuncSGIS = new Command();
  private static void glDetailTexFuncSGIS() {
    Command cmd = glDetailTexFuncSGIS;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_SGIS_detail_texture;
  }
  public static final Command glTexGenfOES = new Command();
  private static void glTexGenfOES() {
    Command cmd = glTexGenfOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glNamedBufferPageCommitmentEXT = new Command();
  private static void glNamedBufferPageCommitmentEXT() {
    Command cmd = glNamedBufferPageCommitmentEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("commit", GLboolean, Boolean);
    cmd.extension = GL_ARB_sparse_buffer;
  }
  public static final Command glGetFramebufferAttachmentParameterivOES = new Command();
  private static void glGetFramebufferAttachmentParameterivOES() {
    Command cmd = glGetFramebufferAttachmentParameterivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glDisable = new Command();
  private static void glDisable() {
    Command cmd = glDisable;
    cmd.returnGroup = _null_;
    cmd.addParam("cap", GLenum, EnableCap);
  }
  public static final Command glGetFenceivNV = new Command();
  private static void glGetFenceivNV() {
    Command cmd = glGetFenceivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_fence;
  }
  public static final Command glDebugMessageInsert = new Command();
  private static void glDebugMessageInsert() {
    Command cmd = glDebugMessageInsert;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("severity", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glPixelTexGenSGIX = new Command();
  private static void glPixelTexGenSGIX() {
    Command cmd = glPixelTexGenSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_SGIX_pixel_texture;
  }
  public static final Command glAlphaFragmentOp1ATI = new Command();
  private static void glAlphaFragmentOp1ATI() {
    Command cmd = glAlphaFragmentOp1ATI;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glBindTexGenParameterEXT = new Command();
  private static void glBindTexGenParameterEXT() {
    Command cmd = glBindTexGenParameterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("unit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("value", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glColorTableEXT = new Command();
  private static void glColorTableEXT() {
    Command cmd = glColorTableEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalFormat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_paletted_texture;
  }
  public static final Command glEnableiEXT = new Command();
  private static void glEnableiEXT() {
    Command cmd = glEnableiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glGetTexEnvfv = new Command();
  private static void glGetTexEnvfv() {
    Command cmd = glGetTexEnvfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
  }
  public static final Command glTexGenivOES = new Command();
  private static void glTexGenivOES() {
    Command cmd = glTexGenivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glGetProgramiv = new Command();
  private static void glGetProgramiv() {
    Command cmd = glGetProgramiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glClipPlane = new Command();
  private static void glClipPlane() {
    Command cmd = glClipPlane;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, ClipPlaneName);
  }
  public static final Command glLabelObjectEXT = new Command();
  private static void glLabelObjectEXT() {
    Command cmd = glLabelObjectEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_debug_label;
  }
  public static final Command glGetShaderPrecisionFormat = new Command();
  private static void glGetShaderPrecisionFormat() {
    Command cmd = glGetShaderPrecisionFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.addParam("precisiontype", GLenum, _null_);
    cmd.extension = GL_ARB_ES2_compatibility;
  }
  public static final Command glMaterialf = new Command();
  private static void glMaterialf() {
    Command cmd = glMaterialf;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
  }
  public static final Command glIsNamedBufferResidentNV = new Command();
  private static void glIsNamedBufferResidentNV() {
    Command cmd = glIsNamedBufferResidentNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glMateriali = new Command();
  private static void glMateriali() {
    Command cmd = glMateriali;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
  }
  public static final Command glProgramLocalParameter4dvARB = new Command();
  private static void glProgramLocalParameter4dvARB() {
    Command cmd = glProgramLocalParameter4dvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glVertexStream4fATI = new Command();
  private static void glVertexStream4fATI() {
    Command cmd = glVertexStream4fATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glColorMaskiEXT = new Command();
  private static void glColorMaskiEXT() {
    Command cmd = glColorMaskiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("r", GLboolean, Boolean);
    cmd.addParam("g", GLboolean, Boolean);
    cmd.addParam("b", GLboolean, Boolean);
    cmd.addParam("a", GLboolean, Boolean);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glGetQueryObjectui64v = new Command();
  private static void glGetQueryObjectui64v() {
    Command cmd = glGetQueryObjectui64v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_timer_query;
  }
  public static final Command glNamedRenderbufferStorage = new Command();
  private static void glNamedRenderbufferStorage() {
    Command cmd = glNamedRenderbufferStorage;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVertexStream3dATI = new Command();
  private static void glVertexStream3dATI() {
    Command cmd = glVertexStream3dATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glMaterialx = new Command();
  private static void glMaterialx() {
    Command cmd = glMaterialx;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glListParameterfvSGIX = new Command();
  private static void glListParameterfvSGIX() {
    Command cmd = glListParameterfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, ListParameterName);
    cmd.extension = GL_SGIX_list_priority;
  }
  public static final Command glSampleMapATI = new Command();
  private static void glSampleMapATI() {
    Command cmd = glSampleMapATI;
    cmd.returnGroup = _null_;
    cmd.addParam("swizzle", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glConvolutionParameteriEXT = new Command();
  private static void glConvolutionParameteriEXT() {
    Command cmd = glConvolutionParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("pname", GLenum, ConvolutionParameterEXT);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glAccumxOES = new Command();
  private static void glAccumxOES() {
    Command cmd = glAccumxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetClipPlane = new Command();
  private static void glGetClipPlane() {
    Command cmd = glGetClipPlane;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, ClipPlaneName);
  }
  public static final Command glIsProgram = new Command();
  private static void glIsProgram() {
    Command cmd = glIsProgram;
    cmd.returnGroup = Boolean;
  }
  public static final Command glGetDoublei_vEXT = new Command();
  private static void glGetDoublei_vEXT() {
    Command cmd = glGetDoublei_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glIsVertexArrayAPPLE = new Command();
  private static void glIsVertexArrayAPPLE() {
    Command cmd = glIsVertexArrayAPPLE;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_APPLE_vertex_array_object;
  }
  public static final Command glGetPathTexGenfvNV = new Command();
  private static void glGetPathTexGenfvNV() {
    Command cmd = glGetPathTexGenfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("texCoordSet", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glSamplePatternEXT = new Command();
  private static void glSamplePatternEXT() {
    Command cmd = glSamplePatternEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pattern", GLenum, _null_);
    cmd.extension = GL_EXT_multisample;
  }
  public static final Command glGetMapxvOES = new Command();
  private static void glGetMapxvOES() {
    Command cmd = glGetMapxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glBindProgramARB = new Command();
  private static void glBindProgramARB() {
    Command cmd = glBindProgramARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glClearBufferfv = new Command();
  private static void glClearBufferfv() {
    Command cmd = glClearBufferfv;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
  }
  public static final Command glGetSamplerParameterfv = new Command();
  private static void glGetSamplerParameterfv() {
    Command cmd = glGetSamplerParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glClearBufferfi = new Command();
  private static void glClearBufferfi() {
    Command cmd = glClearBufferfi;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
  }
  public static final Command glGetFragmentLightfvSGIX = new Command();
  private static void glGetFragmentLightfvSGIX() {
    Command cmd = glGetFragmentLightfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glLightModeli = new Command();
  private static void glLightModeli() {
    Command cmd = glLightModeli;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, LightModelParameter);
  }
  public static final Command glGetTexLevelParameterfv = new Command();
  private static void glGetTexLevelParameterfv() {
    Command cmd = glGetTexLevelParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
  }
  public static final Command glDrawRangeElementsBaseVertexOES = new Command();
  private static void glDrawRangeElementsBaseVertexOES() {
    Command cmd = glDrawRangeElementsBaseVertexOES;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glClearBufferiv = new Command();
  private static void glClearBufferiv() {
    Command cmd = glClearBufferiv;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
  }
  public static final Command glProgramEnvParameterI4uivNV = new Command();
  private static void glProgramEnvParameterI4uivNV() {
    Command cmd = glProgramEnvParameterI4uivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glCompressedTexSubImage2D = new Command();
  private static void glCompressedTexSubImage2D() {
    Command cmd = glCompressedTexSubImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
  }
  public static final Command glLightModelf = new Command();
  private static void glLightModelf() {
    Command cmd = glLightModelf;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, LightModelParameter);
  }
  public static final Command glSampleMaski = new Command();
  private static void glSampleMaski() {
    Command cmd = glSampleMaski;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.extension = GL_ARB_texture_multisample;
  }
  public static final Command glMatrixPushEXT = new Command();
  private static void glMatrixPushEXT() {
    Command cmd = glMatrixPushEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetNamedStringivARB = new Command();
  private static void glGetNamedStringivARB() {
    Command cmd = glGetNamedStringivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shading_language_include;
  }
  public static final Command glGetTextureParameterfv = new Command();
  private static void glGetTextureParameterfv() {
    Command cmd = glGetTextureParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glDrawElementsInstancedANGLE = new Command();
  private static void glDrawElementsInstancedANGLE() {
    Command cmd = glDrawElementsInstancedANGLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ANGLE_instanced_arrays;
  }
  public static final Command glGetSamplerParameteriv = new Command();
  private static void glGetSamplerParameteriv() {
    Command cmd = glGetSamplerParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glCompressedTexSubImage1D = new Command();
  private static void glCompressedTexSubImage1D() {
    Command cmd = glCompressedTexSubImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
  }
  public static final Command glMultiTexCoord3dvARB = new Command();
  private static void glMultiTexCoord3dvARB() {
    Command cmd = glMultiTexCoord3dvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glConvolutionParameteri = new Command();
  private static void glConvolutionParameteri() {
    Command cmd = glConvolutionParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glConvolutionParameterf = new Command();
  private static void glConvolutionParameterf() {
    Command cmd = glConvolutionParameterf;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glBindTextureEXT = new Command();
  private static void glBindTextureEXT() {
    Command cmd = glBindTextureEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_texture_object;
  }
  public static final Command glDrawElementsInstancedBaseVertex = new Command();
  private static void glDrawElementsInstancedBaseVertex() {
    Command cmd = glDrawElementsInstancedBaseVertex;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glGetInvariantFloatvEXT = new Command();
  private static void glGetInvariantFloatvEXT() {
    Command cmd = glGetInvariantFloatvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glCreateQueries = new Command();
  private static void glCreateQueries() {
    Command cmd = glCreateQueries;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glBeginTransformFeedbackNV = new Command();
  private static void glBeginTransformFeedbackNV() {
    Command cmd = glBeginTransformFeedbackNV;
    cmd.returnGroup = _null_;
    cmd.addParam("primitiveMode", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glImageTransformParameterfvHP = new Command();
  private static void glImageTransformParameterfvHP() {
    Command cmd = glImageTransformParameterfvHP;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_HP_image_transform;
  }
  public static final Command glClearBufferData = new Command();
  private static void glClearBufferData() {
    Command cmd = glClearBufferData;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetActiveAttribARB = new Command();
  private static void glGetActiveAttribARB() {
    Command cmd = glGetActiveAttribARB;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_shader;
  }
  public static final Command glGetImageHandleARB = new Command();
  private static void glGetImageHandleARB() {
    Command cmd = glGetImageHandleARB;
    cmd.returnGroup = _null_;
    cmd.addParam("layered", GLboolean, Boolean);
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_ARB_bindless_texture;
  }
  public static final Command glGetFloati_vNV = new Command();
  private static void glGetFloati_vNV() {
    Command cmd = glGetFloati_vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_viewport_array;
  }
  public static final Command glCompressedTexSubImage3D = new Command();
  private static void glCompressedTexSubImage3D() {
    Command cmd = glCompressedTexSubImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
  }
  public static final Command glSwizzleEXT = new Command();
  private static void glSwizzleEXT() {
    Command cmd = glSwizzleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("outX", GLenum, _null_);
    cmd.addParam("outY", GLenum, _null_);
    cmd.addParam("outZ", GLenum, _null_);
    cmd.addParam("outW", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glCopyBufferSubData = new Command();
  private static void glCopyBufferSubData() {
    Command cmd = glCopyBufferSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("readTarget", GLenum, _null_);
    cmd.addParam("writeTarget", GLenum, _null_);
    cmd.extension = GL_ARB_copy_buffer;
  }
  public static final Command glMatrixMultfEXT = new Command();
  private static void glMatrixMultfEXT() {
    Command cmd = glMatrixMultfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramUniformMatrix4x3dvEXT = new Command();
  private static void glProgramUniformMatrix4x3dvEXT() {
    Command cmd = glProgramUniformMatrix4x3dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetTextureParameteriv = new Command();
  private static void glGetTextureParameteriv() {
    Command cmd = glGetTextureParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMultiTexCoord2bOES = new Command();
  private static void glMultiTexCoord2bOES() {
    Command cmd = glMultiTexCoord2bOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glMultiTexCoord2xOES = new Command();
  private static void glMultiTexCoord2xOES() {
    Command cmd = glMultiTexCoord2xOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGenerateMultiTexMipmapEXT = new Command();
  private static void glGenerateMultiTexMipmapEXT() {
    Command cmd = glGenerateMultiTexMipmapEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glStencilThenCoverFillPathNV = new Command();
  private static void glStencilThenCoverFillPathNV() {
    Command cmd = glStencilThenCoverFillPathNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fillMode", GLenum, _null_);
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glVertexArrayFogCoordOffsetEXT = new Command();
  private static void glVertexArrayFogCoordOffsetEXT() {
    Command cmd = glVertexArrayFogCoordOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, FogCoordinatePointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetQueryObjectuiv = new Command();
  private static void glGetQueryObjectuiv() {
    Command cmd = glGetQueryObjectuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetTexLevelParameteriv = new Command();
  private static void glGetTexLevelParameteriv() {
    Command cmd = glGetTexLevelParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
  }
  public static final Command glExtGetTexLevelParameterivQCOM = new Command();
  private static void glExtGetTexLevelParameterivQCOM() {
    Command cmd = glExtGetTexLevelParameterivQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_QCOM_extended_get;
  }
  public static final Command glPassTexCoordATI = new Command();
  private static void glPassTexCoordATI() {
    Command cmd = glPassTexCoordATI;
    cmd.returnGroup = _null_;
    cmd.addParam("swizzle", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glMatrixLoadfEXT = new Command();
  private static void glMatrixLoadfEXT() {
    Command cmd = glMatrixLoadfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glDrawMeshArraysSUN = new Command();
  private static void glDrawMeshArraysSUN() {
    Command cmd = glDrawMeshArraysSUN;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_SUN_mesh_array;
  }
  public static final Command glGetVertexAttribPointervNV = new Command();
  private static void glGetVertexAttribPointervNV() {
    Command cmd = glGetVertexAttribPointervNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetnPixelMapusvARB = new Command();
  private static void glGetnPixelMapusvARB() {
    Command cmd = glGetnPixelMapusvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glIsAsyncMarkerSGIX = new Command();
  private static void glIsAsyncMarkerSGIX() {
    Command cmd = glIsAsyncMarkerSGIX;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_SGIX_async;
  }
  public static final Command glTexParameterxv = new Command();
  private static void glTexParameterxv() {
    Command cmd = glTexParameterxv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glProgramUniformMatrix3x4fvEXT = new Command();
  private static void glProgramUniformMatrix3x4fvEXT() {
    Command cmd = glProgramUniformMatrix3x4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glBlendEquationEXT = new Command();
  private static void glBlendEquationEXT() {
    Command cmd = glBlendEquationEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, BlendEquationModeEXT);
    cmd.extension = GL_EXT_blend_minmax;
  }
  public static final Command glBlendEquationSeparateiEXT = new Command();
  private static void glBlendEquationSeparateiEXT() {
    Command cmd = glBlendEquationSeparateiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, _null_);
    cmd.addParam("modeAlpha", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glMakeImageHandleResidentNV = new Command();
  private static void glMakeImageHandleResidentNV() {
    Command cmd = glMakeImageHandleResidentNV;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLenum, _null_);
  }
  public static final Command glGetFloatIndexedvEXT = new Command();
  private static void glGetFloatIndexedvEXT() {
    Command cmd = glGetFloatIndexedvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord3sARB = new Command();
  private static void glMultiTexCoord3sARB() {
    Command cmd = glMultiTexCoord3sARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetSamplerParameterIuivEXT = new Command();
  private static void glGetSamplerParameterIuivEXT() {
    Command cmd = glGetSamplerParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_texture_border_clamp;
  }
  public static final Command glBindBuffersRange = new Command();
  private static void glBindBuffersRange() {
    Command cmd = glBindBuffersRange;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glBeginQueryIndexed = new Command();
  private static void glBeginQueryIndexed() {
    Command cmd = glBeginQueryIndexed;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_transform_feedback3;
  }
  public static final Command glFramebufferTexture3DEXT = new Command();
  private static void glFramebufferTexture3DEXT() {
    Command cmd = glFramebufferTexture3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glGetVideoCaptureStreamivNV = new Command();
  private static void glGetVideoCaptureStreamivNV() {
    Command cmd = glGetVideoCaptureStreamivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glStencilFillPathInstancedNV = new Command();
  private static void glStencilFillPathInstancedNV() {
    Command cmd = glStencilFillPathInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("fillMode", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glProgramUniformMatrix4x2dvEXT = new Command();
  private static void glProgramUniformMatrix4x2dvEXT() {
    Command cmd = glProgramUniformMatrix4x2dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCopyColorSubTableEXT = new Command();
  private static void glCopyColorSubTableEXT() {
    Command cmd = glCopyColorSubTableEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetDebugMessageLogARB = new Command();
  private static void glGetDebugMessageLogARB() {
    Command cmd = glGetDebugMessageLogARB;
    cmd.returnGroup = _null_;
    cmd.addParam("sources", GLenum, _null_);
    cmd.addParam("types", GLenum, _null_);
    cmd.addParam("severities", GLenum, _null_);
    cmd.extension = GL_ARB_debug_output;
  }
  public static final Command glMultiTexCoordPointerEXT = new Command();
  private static void glMultiTexCoordPointerEXT() {
    Command cmd = glMultiTexCoordPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("type", GLenum, TexCoordPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClearNamedFramebufferuiv = new Command();
  private static void glClearNamedFramebufferuiv() {
    Command cmd = glClearNamedFramebufferuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("buffer", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glFragmentLightfvSGIX = new Command();
  private static void glFragmentLightfvSGIX() {
    Command cmd = glFragmentLightfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glDepthMask = new Command();
  private static void glDepthMask() {
    Command cmd = glDepthMask;
    cmd.returnGroup = _null_;
    cmd.addParam("flag", GLboolean, Boolean);
  }
  public static final Command glTexSubImage3DOES = new Command();
  private static void glTexSubImage3DOES() {
    Command cmd = glTexSubImage3DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_OES_texture_3D;
  }
  public static final Command glProgramVertexLimitNV = new Command();
  private static void glProgramVertexLimitNV() {
    Command cmd = glProgramVertexLimitNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_geometry_program4;
  }
  public static final Command glTexSubImage1D = new Command();
  private static void glTexSubImage1D() {
    Command cmd = glTexSubImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glDeleteNamesAMD = new Command();
  private static void glDeleteNamesAMD() {
    Command cmd = glDeleteNamesAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_AMD_name_gen_delete;
  }
  public static final Command glTextureStorage1DEXT = new Command();
  private static void glTextureStorage1DEXT() {
    Command cmd = glTextureStorage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_storage;
  }
  public static final Command glVertexPointerEXT = new Command();
  private static void glVertexPointerEXT() {
    Command cmd = glVertexPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glVertexStream1ivATI = new Command();
  private static void glVertexStream1ivATI() {
    Command cmd = glVertexStream1ivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glColorFragmentOp1ATI = new Command();
  private static void glColorFragmentOp1ATI() {
    Command cmd = glColorFragmentOp1ATI;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glGetVertexAttribArrayObjectivATI = new Command();
  private static void glGetVertexAttribArrayObjectivATI() {
    Command cmd = glGetVertexAttribArrayObjectivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetColorTableParameterivSGI = new Command();
  private static void glGetColorTableParameterivSGI() {
    Command cmd = glGetColorTableParameterivSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("pname", GLenum, GetColorTableParameterPNameSGI);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glUniformMatrix2x3fv = new Command();
  private static void glUniformMatrix2x3fv() {
    Command cmd = glUniformMatrix2x3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glTextureImage1DEXT = new Command();
  private static void glTextureImage1DEXT() {
    Command cmd = glTextureImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetDebugMessageLogAMD = new Command();
  private static void glGetDebugMessageLogAMD() {
    Command cmd = glGetDebugMessageLogAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("categories", GLenum, _null_);
    cmd.extension = GL_AMD_debug_output;
  }
  public static final Command glLightModelx = new Command();
  private static void glLightModelx() {
    Command cmd = glLightModelx;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glTexSubImage2D = new Command();
  private static void glTexSubImage2D() {
    Command cmd = glTexSubImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glColorTableParameterfvSGI = new Command();
  private static void glColorTableParameterfvSGI() {
    Command cmd = glColorTableParameterfvSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("pname", GLenum, ColorTableParameterPNameSGI);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glGetQueryivEXT = new Command();
  private static void glGetQueryivEXT() {
    Command cmd = glGetQueryivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_occlusion_query_boolean;
  }
  public static final Command glVertexArrayVertexOffsetEXT = new Command();
  private static void glVertexArrayVertexOffsetEXT() {
    Command cmd = glVertexArrayVertexOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glEdgeFlagPointerListIBM = new Command();
  private static void glEdgeFlagPointerListIBM() {
    Command cmd = glEdgeFlagPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("pointer", GLboolean, Boolean);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glVertexStream3svATI = new Command();
  private static void glVertexStream3svATI() {
    Command cmd = glVertexStream3svATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetNamedBufferPointerv = new Command();
  private static void glGetNamedBufferPointerv() {
    Command cmd = glGetNamedBufferPointerv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glIndexMaterialEXT = new Command();
  private static void glIndexMaterialEXT() {
    Command cmd = glIndexMaterialEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_EXT_index_material;
  }
  public static final Command glMultiModeDrawArraysIBM = new Command();
  private static void glMultiModeDrawArraysIBM() {
    Command cmd = glMultiModeDrawArraysIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glMatrixLoad3x2fNV = new Command();
  private static void glMatrixLoad3x2fNV() {
    Command cmd = glMatrixLoad3x2fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("matrixMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glCompressedMultiTexSubImage2DEXT = new Command();
  private static void glCompressedMultiTexSubImage2DEXT() {
    Command cmd = glCompressedMultiTexSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexSubImage3D = new Command();
  private static void glTexSubImage3D() {
    Command cmd = glTexSubImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glCreateTextures = new Command();
  private static void glCreateTextures() {
    Command cmd = glCreateTextures;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glDrawBuffersIndexedEXT = new Command();
  private static void glDrawBuffersIndexedEXT() {
    Command cmd = glDrawBuffersIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("location", GLenum, _null_);
    cmd.extension = GL_EXT_multiview_draw_buffers;
  }
  public static final Command glCompressedTextureSubImage1DEXT = new Command();
  private static void glCompressedTextureSubImage1DEXT() {
    Command cmd = glCompressedTextureSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix2x3dv = new Command();
  private static void glUniformMatrix2x3dv() {
    Command cmd = glUniformMatrix2x3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glFramebufferTextureMultisampleMultiviewOVR = new Command();
  private static void glFramebufferTextureMultisampleMultiviewOVR() {
    Command cmd = glFramebufferTextureMultisampleMultiviewOVR;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
  }
  public static final Command glGetNamedRenderbufferParameteriv = new Command();
  private static void glGetNamedRenderbufferParameteriv() {
    Command cmd = glGetNamedRenderbufferParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glProgramEnvParameter4dARB = new Command();
  private static void glProgramEnvParameter4dARB() {
    Command cmd = glProgramEnvParameter4dARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glGetTexImage = new Command();
  private static void glGetTexImage() {
    Command cmd = glGetTexImage;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glCopyTextureSubImage1DEXT = new Command();
  private static void glCopyTextureSubImage1DEXT() {
    Command cmd = glCopyTextureSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFramebufferTexture1D = new Command();
  private static void glFramebufferTexture1D() {
    Command cmd = glFramebufferTexture1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glLightModelxOES = new Command();
  private static void glLightModelxOES() {
    Command cmd = glLightModelxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTexImage3DMultisample = new Command();
  private static void glTexImage3DMultisample() {
    Command cmd = glTexImage3DMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_ARB_texture_multisample;
  }
  public static final Command glProgramUniformMatrix3x2dv = new Command();
  private static void glProgramUniformMatrix3x2dv() {
    Command cmd = glProgramUniformMatrix3x2dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glRenderbufferStorageOES = new Command();
  private static void glRenderbufferStorageOES() {
    Command cmd = glRenderbufferStorageOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glTexRenderbufferNV = new Command();
  private static void glTexRenderbufferNV() {
    Command cmd = glTexRenderbufferNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_NV_explicit_multisample;
  }
  public static final Command glMatrixRotatefEXT = new Command();
  private static void glMatrixRotatefEXT() {
    Command cmd = glMatrixRotatefEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix2x4dv = new Command();
  private static void glUniformMatrix2x4dv() {
    Command cmd = glUniformMatrix2x4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glGetColorTableEXT = new Command();
  private static void glGetColorTableEXT() {
    Command cmd = glGetColorTableEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_paletted_texture;
  }
  public static final Command glFlushMappedBufferRange = new Command();
  private static void glFlushMappedBufferRange() {
    Command cmd = glFlushMappedBufferRange;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_ARB_map_buffer_range;
  }
  public static final Command glGetTextureImageEXT = new Command();
  private static void glGetTextureImageEXT() {
    Command cmd = glGetTextureImageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glBindBufferBaseNV = new Command();
  private static void glBindBufferBaseNV() {
    Command cmd = glBindBufferBaseNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glCopyConvolutionFilter2DEXT = new Command();
  private static void glCopyConvolutionFilter2DEXT() {
    Command cmd = glCopyConvolutionFilter2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glTransformFeedbackVaryings = new Command();
  private static void glTransformFeedbackVaryings() {
    Command cmd = glTransformFeedbackVaryings;
    cmd.returnGroup = _null_;
    cmd.addParam("bufferMode", GLenum, _null_);
  }
  public static final Command glProgramLocalParameterI4iNV = new Command();
  private static void glProgramLocalParameterI4iNV() {
    Command cmd = glProgramLocalParameterI4iNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glIsTexture = new Command();
  private static void glIsTexture() {
    Command cmd = glIsTexture;
    cmd.returnGroup = Boolean;
  }
  public static final Command glGetMapAttribParameterfvNV = new Command();
  private static void glGetMapAttribParameterfvNV() {
    Command cmd = glGetMapAttribParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glEnableiOES = new Command();
  private static void glEnableiOES() {
    Command cmd = glEnableiOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_viewport_array;
  }
  public static final Command glRenderbufferStorageMultisampleANGLE = new Command();
  private static void glRenderbufferStorageMultisampleANGLE() {
    Command cmd = glRenderbufferStorageMultisampleANGLE;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ANGLE_framebuffer_multisample;
  }
  public static final Command glFramebufferTexture3D = new Command();
  private static void glFramebufferTexture3D() {
    Command cmd = glFramebufferTexture3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glMultiTexCoordP4uiv = new Command();
  private static void glMultiTexCoordP4uiv() {
    Command cmd = glMultiTexCoordP4uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glTexParameterxvOES = new Command();
  private static void glTexParameterxvOES() {
    Command cmd = glTexParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTexStorage2DEXT = new Command();
  private static void glTexStorage2DEXT() {
    Command cmd = glTexStorage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_storage;
  }
  public static final Command glFramebufferTexture2D = new Command();
  private static void glFramebufferTexture2D() {
    Command cmd = glFramebufferTexture2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glBlendEquationSeparateiOES = new Command();
  private static void glBlendEquationSeparateiOES() {
    Command cmd = glBlendEquationSeparateiOES;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, _null_);
    cmd.addParam("modeAlpha", GLenum, _null_);
    cmd.extension = GL_OES_draw_buffers_indexed;
  }
  public static final Command glTexParameterIuiv = new Command();
  private static void glTexParameterIuiv() {
    Command cmd = glTexParameterIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
  }
  public static final Command glGetUnsignedBytevEXT = new Command();
  private static void glGetUnsignedBytevEXT() {
    Command cmd = glGetUnsignedBytevEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPName);
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glIsSemaphoreEXT = new Command();
  private static void glIsSemaphoreEXT() {
    Command cmd = glIsSemaphoreEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glVertexStream4iATI = new Command();
  private static void glVertexStream4iATI() {
    Command cmd = glVertexStream4iATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glDrawElementArrayAPPLE = new Command();
  private static void glDrawElementArrayAPPLE() {
    Command cmd = glDrawElementArrayAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_APPLE_element_array;
  }
  public static final Command glGetFloatv = new Command();
  private static void glGetFloatv() {
    Command cmd = glGetFloatv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPName);
  }
  public static final Command glReadPixels = new Command();
  private static void glReadPixels() {
    Command cmd = glReadPixels;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glBlendFuncSeparateiEXT = new Command();
  private static void glBlendFuncSeparateiEXT() {
    Command cmd = glBlendFuncSeparateiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("srcRGB", GLenum, _null_);
    cmd.addParam("dstRGB", GLenum, _null_);
    cmd.addParam("srcAlpha", GLenum, _null_);
    cmd.addParam("dstAlpha", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers_indexed;
  }
  public static final Command glGetOcclusionQueryivNV = new Command();
  private static void glGetOcclusionQueryivNV() {
    Command cmd = glGetOcclusionQueryivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_occlusion_query;
  }
  public static final Command glMultiTexCoord2fARB = new Command();
  private static void glMultiTexCoord2fARB() {
    Command cmd = glMultiTexCoord2fARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glFragmentLightModelivSGIX = new Command();
  private static void glFragmentLightModelivSGIX() {
    Command cmd = glFragmentLightModelivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, FragmentLightModelParameterSGIX);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glGetFragmentMaterialivSGIX = new Command();
  private static void glGetFragmentMaterialivSGIX() {
    Command cmd = glGetFragmentMaterialivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glDrawElementsInstancedEXT = new Command();
  private static void glDrawElementsInstancedEXT() {
    Command cmd = glDrawElementsInstancedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
    cmd.extension = GL_EXT_instanced_arrays;
  }
  public static final Command glVertexBlendEnviATI = new Command();
  private static void glVertexBlendEnviATI() {
    Command cmd = glVertexBlendEnviATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glClampColorARB = new Command();
  private static void glClampColorARB() {
    Command cmd = glClampColorARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("clamp", GLenum, _null_);
    cmd.extension = GL_ARB_color_buffer_float;
  }
  public static final Command glConvolutionFilter2D = new Command();
  private static void glConvolutionFilter2D() {
    Command cmd = glConvolutionFilter2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glGetQueryObjectivARB = new Command();
  private static void glGetQueryObjectivARB() {
    Command cmd = glGetQueryObjectivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_occlusion_query;
  }
  public static final Command glGetHistogramParameterivEXT = new Command();
  private static void glGetHistogramParameterivEXT() {
    Command cmd = glGetHistogramParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, HistogramTargetEXT);
    cmd.addParam("pname", GLenum, GetHistogramParameterPNameEXT);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glGetMapAttribParameterivNV = new Command();
  private static void glGetMapAttribParameterivNV() {
    Command cmd = glGetMapAttribParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glProgramUniformMatrix3x2fv = new Command();
  private static void glProgramUniformMatrix3x2fv() {
    Command cmd = glProgramUniformMatrix3x2fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glGetPathTexGenivNV = new Command();
  private static void glGetPathTexGenivNV() {
    Command cmd = glGetPathTexGenivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("texCoordSet", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glBufferPageCommitmentARB = new Command();
  private static void glBufferPageCommitmentARB() {
    Command cmd = glBufferPageCommitmentARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("commit", GLboolean, Boolean);
    cmd.extension = GL_ARB_sparse_buffer;
  }
  public static final Command glBeginQueryARB = new Command();
  private static void glBeginQueryARB() {
    Command cmd = glBeginQueryARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_occlusion_query;
  }
  public static final Command glConvolutionFilter1D = new Command();
  private static void glConvolutionFilter1D() {
    Command cmd = glConvolutionFilter1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glVertexArrayIndexOffsetEXT = new Command();
  private static void glVertexArrayIndexOffsetEXT() {
    Command cmd = glVertexArrayIndexOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, IndexPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glExtGetTexSubImageQCOM = new Command();
  private static void glExtGetTexSubImageQCOM() {
    Command cmd = glExtGetTexSubImageQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_QCOM_extended_get;
  }
  public static final Command glImportSemaphoreWin32HandleEXT = new Command();
  private static void glImportSemaphoreWin32HandleEXT() {
    Command cmd = glImportSemaphoreWin32HandleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("handleType", GLenum, ExternalHandleType);
    cmd.extension = GL_EXT_semaphore_win32;
  }
  public static final Command glMultiTexCoord1dARB = new Command();
  private static void glMultiTexCoord1dARB() {
    Command cmd = glMultiTexCoord1dARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glColorSubTableEXT = new Command();
  private static void glColorSubTableEXT() {
    Command cmd = glColorSubTableEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glGetVertexArrayIntegervEXT = new Command();
  private static void glGetVertexArrayIntegervEXT() {
    Command cmd = glGetVertexArrayIntegervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glSecondaryColorP3ui = new Command();
  private static void glSecondaryColorP3ui() {
    Command cmd = glSecondaryColorP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glColorMaskiOES = new Command();
  private static void glColorMaskiOES() {
    Command cmd = glColorMaskiOES;
    cmd.returnGroup = _null_;
    cmd.addParam("r", GLboolean, Boolean);
    cmd.addParam("g", GLboolean, Boolean);
    cmd.addParam("b", GLboolean, Boolean);
    cmd.addParam("a", GLboolean, Boolean);
    cmd.extension = GL_OES_draw_buffers_indexed;
  }
  public static final Command glIndexFormatNV = new Command();
  private static void glIndexFormatNV() {
    Command cmd = glIndexFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glCopyTexSubImage2DEXT = new Command();
  private static void glCopyTexSubImage2DEXT() {
    Command cmd = glCopyTexSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glProgramUniformMatrix3dvEXT = new Command();
  private static void glProgramUniformMatrix3dvEXT() {
    Command cmd = glProgramUniformMatrix3dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glRenderbufferStorageMultisample = new Command();
  private static void glRenderbufferStorageMultisample() {
    Command cmd = glRenderbufferStorageMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glGetPerfMonitorCounterInfoAMD = new Command();
  private static void glGetPerfMonitorCounterInfoAMD() {
    Command cmd = glGetPerfMonitorCounterInfoAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_performance_monitor;
  }
  public static final Command glGetVertexAttribfvARB = new Command();
  private static void glGetVertexAttribfvARB() {
    Command cmd = glGetVertexAttribfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_shader;
  }
  public static final Command glIsSampler = new Command();
  private static void glIsSampler() {
    Command cmd = glIsSampler;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glGetQueryObjecti64v = new Command();
  private static void glGetQueryObjecti64v() {
    Command cmd = glGetQueryObjecti64v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_timer_query;
  }
  public static final Command glDeformationMap3fSGIX = new Command();
  private static void glDeformationMap3fSGIX() {
    Command cmd = glDeformationMap3fSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, FfdTargetSGIX);
    cmd.extension = GL_SGIX_polynomial_ffd;
  }
  public static final Command glGetBufferSubDataARB = new Command();
  private static void glGetBufferSubDataARB() {
    Command cmd = glGetBufferSubDataARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_ARB_vertex_buffer_object;
  }
  public static final Command glDrawPixels = new Command();
  private static void glDrawPixels() {
    Command cmd = glDrawPixels;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glSampleMaskIndexedNV = new Command();
  private static void glSampleMaskIndexedNV() {
    Command cmd = glSampleMaskIndexedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.extension = GL_NV_explicit_multisample;
  }
  public static final Command glTexParameteriv = new Command();
  private static void glTexParameteriv() {
    Command cmd = glTexParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
  }
  public static final Command glMultiTexCoord1ivARB = new Command();
  private static void glMultiTexCoord1ivARB() {
    Command cmd = glMultiTexCoord1ivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glMultiTexCoord4hvNV = new Command();
  private static void glMultiTexCoord4hvNV() {
    Command cmd = glMultiTexCoord4hvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glShaderBinary = new Command();
  private static void glShaderBinary() {
    Command cmd = glShaderBinary;
    cmd.returnGroup = _null_;
    cmd.addParam("binaryformat", GLenum, _null_);
    cmd.extension = GL_ARB_ES2_compatibility;
  }
  public static final Command glTexImage2D = new Command();
  private static void glTexImage2D() {
    Command cmd = glTexImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glCoverageModulationNV = new Command();
  private static void glCoverageModulationNV() {
    Command cmd = glCoverageModulationNV;
    cmd.returnGroup = _null_;
    cmd.addParam("components", GLenum, _null_);
    cmd.extension = GL_NV_framebuffer_mixed_samples;
  }
  public static final Command glTexStorage3DMultisample = new Command();
  private static void glTexStorage3DMultisample() {
    Command cmd = glTexStorage3DMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
  }
  public static final Command glMultiModeDrawElementsIBM = new Command();
  private static void glMultiModeDrawElementsIBM() {
    Command cmd = glMultiModeDrawElementsIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glFinalCombinerInputNV = new Command();
  private static void glFinalCombinerInputNV() {
    Command cmd = glFinalCombinerInputNV;
    cmd.returnGroup = _null_;
    cmd.addParam("variable", GLenum, _null_);
    cmd.addParam("input", GLenum, _null_);
    cmd.addParam("mapping", GLenum, _null_);
    cmd.addParam("componentUsage", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glMultiDrawElements = new Command();
  private static void glMultiDrawElements() {
    Command cmd = glMultiDrawElements;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glTexImage3D = new Command();
  private static void glTexImage3D() {
    Command cmd = glTexImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glGetSamplerParameterIuiv = new Command();
  private static void glGetSamplerParameterIuiv() {
    Command cmd = glGetSamplerParameterIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glFramebufferRenderbufferOES = new Command();
  private static void glFramebufferRenderbufferOES() {
    Command cmd = glFramebufferRenderbufferOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("renderbuffertarget", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glNormalStream3fATI = new Command();
  private static void glNormalStream3fATI() {
    Command cmd = glNormalStream3fATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glPathParameteriNV = new Command();
  private static void glPathParameteriNV() {
    Command cmd = glPathParameteriNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glNamedBufferStorage = new Command();
  private static void glNamedBufferStorage() {
    Command cmd = glNamedBufferStorage;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glBindBufferOffsetNV = new Command();
  private static void glBindBufferOffsetNV() {
    Command cmd = glBindBufferOffsetNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glVertexAttribFormatNV = new Command();
  private static void glVertexAttribFormatNV() {
    Command cmd = glVertexAttribFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glBlendFuncSeparate = new Command();
  private static void glBlendFuncSeparate() {
    Command cmd = glBlendFuncSeparate;
    cmd.returnGroup = _null_;
    cmd.addParam("sfactorRGB", GLenum, _null_);
    cmd.addParam("dfactorRGB", GLenum, _null_);
    cmd.addParam("sfactorAlpha", GLenum, _null_);
    cmd.addParam("dfactorAlpha", GLenum, _null_);
  }
  public static final Command glMultiDrawElementsIndirectCountARB = new Command();
  private static void glMultiDrawElementsIndirectCountARB() {
    Command cmd = glMultiDrawElementsIndirectCountARB;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_indirect_parameters;
  }
  public static final Command glBufferData = new Command();
  private static void glBufferData() {
    Command cmd = glBufferData;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.addParam("usage", GLenum, BufferUsageARB);
  }
  public static final Command glMapControlPointsNV = new Command();
  private static void glMapControlPointsNV() {
    Command cmd = glMapControlPointsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("packed", GLboolean, Boolean);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glTextureSubImage3DEXT = new Command();
  private static void glTextureSubImage3DEXT() {
    Command cmd = glTextureSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexBuffer = new Command();
  private static void glTexBuffer() {
    Command cmd = glTexBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
  }
  public static final Command glGetPointeri_vEXT = new Command();
  private static void glGetPointeri_vEXT() {
    Command cmd = glGetPointeri_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClientActiveTextureARB = new Command();
  private static void glClientActiveTextureARB() {
    Command cmd = glClientActiveTextureARB;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glTexImage1D = new Command();
  private static void glTexImage1D() {
    Command cmd = glTexImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
  }
  public static final Command glIsEnabledIndexedEXT = new Command();
  private static void glIsEnabledIndexedEXT() {
    Command cmd = glIsEnabledIndexedEXT;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glCopyColorTableSGI = new Command();
  private static void glCopyColorTableSGI() {
    Command cmd = glCopyColorTableSGI;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ColorTableTargetSGI);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_SGI_color_table;
  }
  public static final Command glIsTextureHandleResidentNV = new Command();
  private static void glIsTextureHandleResidentNV() {
    Command cmd = glIsTextureHandleResidentNV;
    cmd.returnGroup = Boolean;
  }
  public static final Command glMatrixMultTranspose3x3fNV = new Command();
  private static void glMatrixMultTranspose3x3fNV() {
    Command cmd = glMatrixMultTranspose3x3fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("matrixMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glFragmentMaterialivSGIX = new Command();
  private static void glFragmentMaterialivSGIX() {
    Command cmd = glFragmentMaterialivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glMatrixLoadTranspose3x3fNV = new Command();
  private static void glMatrixLoadTranspose3x3fNV() {
    Command cmd = glMatrixLoadTranspose3x3fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("matrixMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glPointAlongPathNV = new Command();
  private static void glPointAlongPathNV() {
    Command cmd = glPointAlongPathNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetVertexArrayIndexed64iv = new Command();
  private static void glGetVertexArrayIndexed64iv() {
    Command cmd = glGetVertexArrayIndexed64iv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetFramebufferAttachmentParameterivEXT = new Command();
  private static void glGetFramebufferAttachmentParameterivEXT() {
    Command cmd = glGetFramebufferAttachmentParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glTexImage2DMultisampleCoverageNV = new Command();
  private static void glTexImage2DMultisampleCoverageNV() {
    Command cmd = glTexImage2DMultisampleCoverageNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_NV_texture_multisample;
  }
  public static final Command glBufferStorageExternalEXT = new Command();
  private static void glBufferStorageExternalEXT() {
    Command cmd = glBufferStorageExternalEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
  }
  public static final Command glGetBufferPointervOES = new Command();
  private static void glGetBufferPointervOES() {
    Command cmd = glGetBufferPointervOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_mapbuffer;
  }
  public static final Command glBlendEquationSeparateOES = new Command();
  private static void glBlendEquationSeparateOES() {
    Command cmd = glBlendEquationSeparateOES;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, _null_);
    cmd.addParam("modeAlpha", GLenum, _null_);
    cmd.extension = GL_OES_blend_equation_separate;
  }
  public static final Command glDrawBuffersNV = new Command();
  private static void glDrawBuffersNV() {
    Command cmd = glDrawBuffersNV;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, _null_);
    cmd.extension = GL_NV_draw_buffers;
  }
  public static final Command glGetnColorTableARB = new Command();
  private static void glGetnColorTableARB() {
    Command cmd = glGetnColorTableARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glDrawTransformFeedback = new Command();
  private static void glDrawTransformFeedback() {
    Command cmd = glDrawTransformFeedback;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ARB_transform_feedback2;
  }
  public static final Command glVertexPointer = new Command();
  private static void glVertexPointer() {
    Command cmd = glVertexPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
  }
  public static final Command glPathSubCommandsNV = new Command();
  private static void glPathSubCommandsNV() {
    Command cmd = glPathSubCommandsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("coordType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glMultiTexParameterIivEXT = new Command();
  private static void glMultiTexParameterIivEXT() {
    Command cmd = glMultiTexParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureImage2DMultisampleCoverageNV = new Command();
  private static void glTextureImage2DMultisampleCoverageNV() {
    Command cmd = glTextureImage2DMultisampleCoverageNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_NV_texture_multisample;
  }
  public static final Command glMultiTexCoord3svARB = new Command();
  private static void glMultiTexCoord3svARB() {
    Command cmd = glMultiTexCoord3svARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glCopyBufferSubDataNV = new Command();
  private static void glCopyBufferSubDataNV() {
    Command cmd = glCopyBufferSubDataNV;
    cmd.returnGroup = _null_;
    cmd.addParam("readTarget", GLenum, _null_);
    cmd.addParam("writeTarget", GLenum, _null_);
    cmd.extension = GL_NV_copy_buffer;
  }
  public static final Command glBufferStorageMemEXT = new Command();
  private static void glBufferStorageMemEXT() {
    Command cmd = glBufferStorageMemEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glPointParameteriv = new Command();
  private static void glPointParameteriv() {
    Command cmd = glPointParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glDrawElementsInstancedBaseInstanceEXT = new Command();
  private static void glDrawElementsInstancedBaseInstanceEXT() {
    Command cmd = glDrawElementsInstancedBaseInstanceEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetProgramLocalParameterIuivNV = new Command();
  private static void glGetProgramLocalParameterIuivNV() {
    Command cmd = glGetProgramLocalParameterIuivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glCompressedMultiTexImage3DEXT = new Command();
  private static void glCompressedMultiTexImage3DEXT() {
    Command cmd = glCompressedMultiTexImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glNormalStream3iATI = new Command();
  private static void glNormalStream3iATI() {
    Command cmd = glNormalStream3iATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glPushDebugGroup = new Command();
  private static void glPushDebugGroup() {
    Command cmd = glPushDebugGroup;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glMultiDrawArraysIndirectBindlessCountNV = new Command();
  private static void glMultiDrawArraysIndirectBindlessCountNV() {
    Command cmd = glMultiDrawArraysIndirectBindlessCountNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glGetObjectParameterivAPPLE = new Command();
  private static void glGetObjectParameterivAPPLE() {
    Command cmd = glGetObjectParameterivAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("objectType", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_object_purgeable;
  }
  public static final Command glVertexAttribLPointerEXT = new Command();
  private static void glVertexAttribLPointerEXT() {
    Command cmd = glVertexAttribLPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_attrib_64bit;
  }
  public static final Command glAlphaFuncx = new Command();
  private static void glAlphaFuncx() {
    Command cmd = glAlphaFuncx;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, _null_);
  }
  public static final Command glGetConvolutionParameterxvOES = new Command();
  private static void glGetConvolutionParameterxvOES() {
    Command cmd = glGetConvolutionParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glInvalidateNamedFramebufferData = new Command();
  private static void glInvalidateNamedFramebufferData() {
    Command cmd = glInvalidateNamedFramebufferData;
    cmd.returnGroup = _null_;
    cmd.addParam("attachments", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVertexAttribPointer = new Command();
  private static void glVertexAttribPointer() {
    Command cmd = glVertexAttribPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
  }
  public static final Command glCoverageMaskNV = new Command();
  private static void glCoverageMaskNV() {
    Command cmd = glCoverageMaskNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLboolean, Boolean);
    cmd.extension = GL_NV_coverage_sample;
  }
  public static final Command glFragmentLightiSGIX = new Command();
  private static void glFragmentLightiSGIX() {
    Command cmd = glFragmentLightiSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glBlendFunciARB = new Command();
  private static void glBlendFunciARB() {
    Command cmd = glBlendFunciARB;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.addParam("dst", GLenum, _null_);
  }
  public static final Command glMultiTexCoord2iARB = new Command();
  private static void glMultiTexCoord2iARB() {
    Command cmd = glMultiTexCoord2iARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glConvolutionParameterivEXT = new Command();
  private static void glConvolutionParameterivEXT() {
    Command cmd = glConvolutionParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("pname", GLenum, ConvolutionParameterEXT);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glFramebufferRenderbufferEXT = new Command();
  private static void glFramebufferRenderbufferEXT() {
    Command cmd = glFramebufferRenderbufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("renderbuffertarget", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glGetUnsignedBytei_vEXT = new Command();
  private static void glGetUnsignedBytei_vEXT() {
    Command cmd = glGetUnsignedBytei_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_semaphore;
  }
  public static final Command glFramebufferTextureLayerEXT = new Command();
  private static void glFramebufferTextureLayerEXT() {
    Command cmd = glFramebufferTextureLayerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_NV_geometry_program4;
  }
  public static final Command glActiveTextureARB = new Command();
  private static void glActiveTextureARB() {
    Command cmd = glActiveTextureARB;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glBlendEquationOES = new Command();
  private static void glBlendEquationOES() {
    Command cmd = glBlendEquationOES;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_OES_blend_subtract;
  }
  public static final Command glGenerateMipmapOES = new Command();
  private static void glGenerateMipmapOES() {
    Command cmd = glGenerateMipmapOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glNormalP3uiv = new Command();
  private static void glNormalP3uiv() {
    Command cmd = glNormalP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glBindBufferRangeEXT = new Command();
  private static void glBindBufferRangeEXT() {
    Command cmd = glBindBufferRangeEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_transform_feedback;
  }
  public static final Command glPointParameterfv = new Command();
  private static void glPointParameterfv() {
    Command cmd = glPointParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glCoverageOperationNV = new Command();
  private static void glCoverageOperationNV() {
    Command cmd = glCoverageOperationNV;
    cmd.returnGroup = _null_;
    cmd.addParam("operation", GLenum, _null_);
    cmd.extension = GL_NV_coverage_sample;
  }
  public static final Command glNamedRenderbufferStorageMultisampleCoverageEXT = new Command();
  private static void glNamedRenderbufferStorageMultisampleCoverageEXT() {
    Command cmd = glNamedRenderbufferStorageMultisampleCoverageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexEnvfvEXT = new Command();
  private static void glMultiTexEnvfvEXT() {
    Command cmd = glMultiTexEnvfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureEnvTarget);
    cmd.addParam("pname", GLenum, TextureEnvParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClipPlanefIMG = new Command();
  private static void glClipPlanefIMG() {
    Command cmd = glClipPlanefIMG;
    cmd.returnGroup = _null_;
    cmd.addParam("p", GLenum, _null_);
    cmd.extension = GL_IMG_user_clip_plane;
  }
  public static final Command glIndexFuncEXT = new Command();
  private static void glIndexFuncEXT() {
    Command cmd = glIndexFuncEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, _null_);
    cmd.extension = GL_EXT_index_func;
  }
  public static final Command glGetnMapfvARB = new Command();
  private static void glGetnMapfvARB() {
    Command cmd = glGetnMapfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("query", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glClearBufferSubData = new Command();
  private static void glClearBufferSubData() {
    Command cmd = glClearBufferSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glCompressedTexImage3DOES = new Command();
  private static void glCompressedTexImage3DOES() {
    Command cmd = glCompressedTexImage3DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_OES_texture_3D;
  }
  public static final Command glGetnMinmaxARB = new Command();
  private static void glGetnMinmaxARB() {
    Command cmd = glGetnMinmaxARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glGetQueryObjectui64vEXT = new Command();
  private static void glGetQueryObjectui64vEXT() {
    Command cmd = glGetQueryObjectui64vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_timer_query;
  }
  public static final Command glGetMultiTexGenivEXT = new Command();
  private static void glGetMultiTexGenivEXT() {
    Command cmd = glGetMultiTexGenivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProvokingVertex = new Command();
  private static void glProvokingVertex() {
    Command cmd = glProvokingVertex;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_ARB_provoking_vertex;
  }
  public static final Command glGetTexLevelParameterxvOES = new Command();
  private static void glGetTexLevelParameterxvOES() {
    Command cmd = glGetTexLevelParameterxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glIsVertexAttribEnabledAPPLE = new Command();
  private static void glIsVertexAttribEnabledAPPLE() {
    Command cmd = glIsVertexAttribEnabledAPPLE;
    cmd.returnGroup = Boolean;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_vertex_program_evaluators;
  }
  public static final Command glGetNamedFramebufferParameterfvAMD = new Command();
  private static void glGetNamedFramebufferParameterfvAMD() {
    Command cmd = glGetNamedFramebufferParameterfvAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_framebuffer_sample_positions;
  }
  public static final Command glMaterialfv = new Command();
  private static void glMaterialfv() {
    Command cmd = glMaterialfv;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
  }
  public static final Command glDrawRangeElementArrayATI = new Command();
  private static void glDrawRangeElementArrayATI() {
    Command cmd = glDrawRangeElementArrayATI;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ATI_element_array;
  }
  public static final Command glEGLImageTargetRenderbufferStorageOES = new Command();
  private static void glEGLImageTargetRenderbufferStorageOES() {
    Command cmd = glEGLImageTargetRenderbufferStorageOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glGetIntegerv = new Command();
  private static void glGetIntegerv() {
    Command cmd = glGetIntegerv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, GetPName);
  }
  public static final Command glGetVariantFloatvEXT = new Command();
  private static void glGetVariantFloatvEXT() {
    Command cmd = glGetVariantFloatvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glBlendEquationSeparateIndexedAMD = new Command();
  private static void glBlendEquationSeparateIndexedAMD() {
    Command cmd = glBlendEquationSeparateIndexedAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("modeRGB", GLenum, _null_);
    cmd.addParam("modeAlpha", GLenum, _null_);
  }
  public static final Command glPNTrianglesiATI = new Command();
  private static void glPNTrianglesiATI() {
    Command cmd = glPNTrianglesiATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_pn_triangles;
  }
  public static final Command glFragmentMaterialfvSGIX = new Command();
  private static void glFragmentMaterialfvSGIX() {
    Command cmd = glFragmentMaterialfvSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glPixelMapuiv = new Command();
  private static void glPixelMapuiv() {
    Command cmd = glPixelMapuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, PixelMap);
  }
  public static final Command glStencilFuncSeparateATI = new Command();
  private static void glStencilFuncSeparateATI() {
    Command cmd = glStencilFuncSeparateATI;
    cmd.returnGroup = _null_;
    cmd.addParam("frontfunc", GLenum, StencilFunction);
    cmd.addParam("backfunc", GLenum, StencilFunction);
    cmd.extension = GL_ATI_separate_stencil;
  }
  public static final Command glTextureLightEXT = new Command();
  private static void glTextureLightEXT() {
    Command cmd = glTextureLightEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_light_texture;
  }
  public static final Command glMatrixIndexPointerARB = new Command();
  private static void glMatrixIndexPointerARB() {
    Command cmd = glMatrixIndexPointerARB;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_matrix_palette;
  }
  public static final Command glEnableClientState = new Command();
  private static void glEnableClientState() {
    Command cmd = glEnableClientState;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
  }
  public static final Command glPixelMapx = new Command();
  private static void glPixelMapx() {
    Command cmd = glPixelMapx;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glNormalPointerListIBM = new Command();
  private static void glNormalPointerListIBM() {
    Command cmd = glNormalPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, NormalPointerType);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glIsEnablediNV = new Command();
  private static void glIsEnablediNV() {
    Command cmd = glIsEnablediNV;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_viewport_array;
  }
  public static final Command glAreTexturesResident = new Command();
  private static void glAreTexturesResident() {
    Command cmd = glAreTexturesResident;
    cmd.returnGroup = Boolean;
    cmd.addParam("residences", GLboolean, Boolean);
  }
  public static final Command glDrawTransformFeedbackInstanced = new Command();
  private static void glDrawTransformFeedbackInstanced() {
    Command cmd = glDrawTransformFeedbackInstanced;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glGetTextureLevelParameterfv = new Command();
  private static void glGetTextureLevelParameterfv() {
    Command cmd = glGetTextureLevelParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVideoCaptureStreamParameterivNV = new Command();
  private static void glVideoCaptureStreamParameterivNV() {
    Command cmd = glVideoCaptureStreamParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glCullParameterfvEXT = new Command();
  private static void glCullParameterfvEXT() {
    Command cmd = glCullParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_cull_vertex;
  }
  public static final Command glTexParameterfv = new Command();
  private static void glTexParameterfv() {
    Command cmd = glTexParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
  }
  public static final Command glCopyMultiTexSubImage2DEXT = new Command();
  private static void glCopyMultiTexSubImage2DEXT() {
    Command cmd = glCopyMultiTexSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClientAttribDefaultEXT = new Command();
  private static void glClientAttribDefaultEXT() {
    Command cmd = glClientAttribDefaultEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, ClientAttribMask);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCheckFramebufferStatus = new Command();
  private static void glCheckFramebufferStatus() {
    Command cmd = glCheckFramebufferStatus;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glGetLightiv = new Command();
  private static void glGetLightiv() {
    Command cmd = glGetLightiv;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("pname", GLenum, LightParameter);
  }
  public static final Command glListParameterfSGIX = new Command();
  private static void glListParameterfSGIX() {
    Command cmd = glListParameterfSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, ListParameterName);
    cmd.extension = GL_SGIX_list_priority;
  }
  public static final Command glGetnPixelMapfvARB = new Command();
  private static void glGetnPixelMapfvARB() {
    Command cmd = glGetnPixelMapfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glBlendEquationIndexedAMD = new Command();
  private static void glBlendEquationIndexedAMD() {
    Command cmd = glBlendEquationIndexedAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
  }
  public static final Command glDrawElementsInstanced = new Command();
  private static void glDrawElementsInstanced() {
    Command cmd = glDrawElementsInstanced;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glMultiTexParameterfEXT = new Command();
  private static void glMultiTexParameterfEXT() {
    Command cmd = glMultiTexParameterfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glEdgeFlagv = new Command();
  private static void glEdgeFlagv() {
    Command cmd = glEdgeFlagv;
    cmd.returnGroup = _null_;
    cmd.addParam("flag", GLboolean, Boolean);
  }
  public static final Command glGetProgramResourcefvNV = new Command();
  private static void glGetProgramResourcefvNV() {
    Command cmd = glGetProgramResourcefvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.addParam("props", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetProgramBinaryOES = new Command();
  private static void glGetProgramBinaryOES() {
    Command cmd = glGetProgramBinaryOES;
    cmd.returnGroup = _null_;
    cmd.addParam("binaryFormat", GLenum, _null_);
    cmd.extension = GL_OES_get_program_binary;
  }
  public static final Command glCopyTextureSubImage3DEXT = new Command();
  private static void glCopyTextureSubImage3DEXT() {
    Command cmd = glCopyTextureSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMaterialiv = new Command();
  private static void glMaterialiv() {
    Command cmd = glMaterialiv;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
  }
  public static final Command glMulticastWaitSyncNV = new Command();
  private static void glMulticastWaitSyncNV() {
    Command cmd = glMulticastWaitSyncNV;
    cmd.returnGroup = _null_;
    cmd.addParam("waitGpuMask", GLbitfield, _null_);
    cmd.extension = GL_NV_gpu_multicast;
  }
  public static final Command glMinmax = new Command();
  private static void glMinmax() {
    Command cmd = glMinmax;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("sink", GLboolean, Boolean);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glVertexAttribP3ui = new Command();
  private static void glVertexAttribP3ui() {
    Command cmd = glVertexAttribP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glVertexPointervINTEL = new Command();
  private static void glVertexPointervINTEL() {
    Command cmd = glVertexPointervINTEL;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, VertexPointerType);
    cmd.extension = GL_INTEL_parallel_arrays;
  }
  public static final Command glBindFramebuffer = new Command();
  private static void glBindFramebuffer() {
    Command cmd = glBindFramebuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glMakeBufferNonResidentNV = new Command();
  private static void glMakeBufferNonResidentNV() {
    Command cmd = glMakeBufferNonResidentNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glVertexStream2dvATI = new Command();
  private static void glVertexStream2dvATI() {
    Command cmd = glVertexStream2dvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glTransformFeedbackAttribsNV = new Command();
  private static void glTransformFeedbackAttribsNV() {
    Command cmd = glTransformFeedbackAttribsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("bufferMode", GLenum, _null_);
    cmd.extension = GL_NV_transform_feedback;
  }
  public static final Command glIsFenceAPPLE = new Command();
  private static void glIsFenceAPPLE() {
    Command cmd = glIsFenceAPPLE;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_APPLE_fence;
  }
  public static final Command glColorTableParameteriv = new Command();
  private static void glColorTableParameteriv() {
    Command cmd = glColorTableParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glDrawBuffersEXT = new Command();
  private static void glDrawBuffersEXT() {
    Command cmd = glDrawBuffersEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("bufs", GLenum, _null_);
    cmd.extension = GL_EXT_draw_buffers;
  }
  public static final Command glProgramUniformMatrix2x4dvEXT = new Command();
  private static void glProgramUniformMatrix2x4dvEXT() {
    Command cmd = glProgramUniformMatrix2x4dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCopyTexImage1DEXT = new Command();
  private static void glCopyTexImage1DEXT() {
    Command cmd = glCopyTexImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glCreateShaderProgramvEXT = new Command();
  private static void glCreateShaderProgramvEXT() {
    Command cmd = glCreateShaderProgramvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glFramebufferTexture = new Command();
  private static void glFramebufferTexture() {
    Command cmd = glFramebufferTexture;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
  }
  public static final Command glNamedProgramLocalParameters4fvEXT = new Command();
  private static void glNamedProgramLocalParameters4fvEXT() {
    Command cmd = glNamedProgramLocalParameters4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetVideoivNV = new Command();
  private static void glGetVideoivNV() {
    Command cmd = glGetVideoivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_present_video;
  }
  public static final Command glGetLightfv = new Command();
  private static void glGetLightfv() {
    Command cmd = glGetLightfv;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, LightName);
    cmd.addParam("pname", GLenum, LightParameter);
  }
  public static final Command glGetNamedRenderbufferParameterivEXT = new Command();
  private static void glGetNamedRenderbufferParameterivEXT() {
    Command cmd = glGetNamedRenderbufferParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCompressedTextureSubImage3D = new Command();
  private static void glCompressedTextureSubImage3D() {
    Command cmd = glCompressedTextureSubImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetClipPlanefOES = new Command();
  private static void glGetClipPlanefOES() {
    Command cmd = glGetClipPlanefOES;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
  }
  public static final Command glFinishObjectAPPLE = new Command();
  private static void glFinishObjectAPPLE() {
    Command cmd = glFinishObjectAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("object", GLenum, _null_);
    cmd.extension = GL_APPLE_fence;
  }
  public static final Command glGetRenderbufferParameterivOES = new Command();
  private static void glGetRenderbufferParameterivOES() {
    Command cmd = glGetRenderbufferParameterivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glMultiTexGendEXT = new Command();
  private static void glMultiTexGendEXT() {
    Command cmd = glMultiTexGendEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glVertexArrayAttribFormat = new Command();
  private static void glVertexArrayAttribFormat() {
    Command cmd = glVertexArrayAttribFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glFogCoordPointerListIBM = new Command();
  private static void glFogCoordPointerListIBM() {
    Command cmd = glFogCoordPointerListIBM;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, FogPointerTypeIBM);
    cmd.extension = GL_IBM_vertex_array_lists;
  }
  public static final Command glVertexArrayAttribIFormat = new Command();
  private static void glVertexArrayAttribIFormat() {
    Command cmd = glVertexArrayAttribIFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetPixelTransformParameterfvEXT = new Command();
  private static void glGetPixelTransformParameterfvEXT() {
    Command cmd = glGetPixelTransformParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_pixel_transform;
  }
  public static final Command glMatrixLoad3x3fNV = new Command();
  private static void glMatrixLoad3x3fNV() {
    Command cmd = glMatrixLoad3x3fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("matrixMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glProgramLocalParameters4fvEXT = new Command();
  private static void glProgramLocalParameters4fvEXT() {
    Command cmd = glProgramLocalParameters4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glDrawElementsBaseVertexOES = new Command();
  private static void glDrawElementsBaseVertexOES() {
    Command cmd = glDrawElementsBaseVertexOES;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glMultiTexCoordP1uiv = new Command();
  private static void glMultiTexCoordP1uiv() {
    Command cmd = glMultiTexCoordP1uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glColorTableParameterfv = new Command();
  private static void glColorTableParameterfv() {
    Command cmd = glColorTableParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glGetVertexAttribPointerv = new Command();
  private static void glGetVertexAttribPointerv() {
    Command cmd = glGetVertexAttribPointerv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glCompressedTextureSubImage1D = new Command();
  private static void glCompressedTextureSubImage1D() {
    Command cmd = glCompressedTextureSubImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTexBumpParameterivATI = new Command();
  private static void glTexBumpParameterivATI() {
    Command cmd = glTexBumpParameterivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_envmap_bumpmap;
  }
  public static final Command glFramebufferTexture2DOES = new Command();
  private static void glFramebufferTexture2DOES() {
    Command cmd = glFramebufferTexture2DOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glMultiTexCoordP1ui = new Command();
  private static void glMultiTexCoordP1ui() {
    Command cmd = glMultiTexCoordP1ui;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glIndexPointerEXT = new Command();
  private static void glIndexPointerEXT() {
    Command cmd = glIndexPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, IndexPointerType);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glGetBufferSubData = new Command();
  private static void glGetBufferSubData() {
    Command cmd = glGetBufferSubData;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, BufferTargetARB);
  }
  public static final Command glCompressedTextureSubImage2D = new Command();
  private static void glCompressedTextureSubImage2D() {
    Command cmd = glCompressedTextureSubImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glDrawTransformFeedbackNV = new Command();
  private static void glDrawTransformFeedbackNV() {
    Command cmd = glDrawTransformFeedbackNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_NV_transform_feedback2;
  }
  public static final Command glGetFragmentLightivSGIX = new Command();
  private static void glGetFragmentLightivSGIX() {
    Command cmd = glGetFragmentLightivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glTexSubImage3DEXT = new Command();
  private static void glTexSubImage3DEXT() {
    Command cmd = glTexSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_texture3D;
  }
  public static final Command glGetnPixelMapusv = new Command();
  private static void glGetnPixelMapusv() {
    Command cmd = glGetnPixelMapusv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
  }
  public static final Command glPathFogGenNV = new Command();
  private static void glPathFogGenNV() {
    Command cmd = glPathFogGenNV;
    cmd.returnGroup = _null_;
    cmd.addParam("genMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetSubroutineIndex = new Command();
  private static void glGetSubroutineIndex() {
    Command cmd = glGetSubroutineIndex;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glProgramStringARB = new Command();
  private static void glProgramStringARB() {
    Command cmd = glProgramStringARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glIsList = new Command();
  private static void glIsList() {
    Command cmd = glIsList;
    cmd.returnGroup = Boolean;
  }
  public static final Command glMultiTexCoord2ivARB = new Command();
  private static void glMultiTexCoord2ivARB() {
    Command cmd = glMultiTexCoord2ivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glColorFragmentOp2ATI = new Command();
  private static void glColorFragmentOp2ATI() {
    Command cmd = glColorFragmentOp2ATI;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glFramebufferSampleLocationsfvARB = new Command();
  private static void glFramebufferSampleLocationsfvARB() {
    Command cmd = glFramebufferSampleLocationsfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_sample_locations;
  }
  public static final Command glGetQueryBufferObjectui64v = new Command();
  private static void glGetQueryBufferObjectui64v() {
    Command cmd = glGetQueryBufferObjectui64v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glFramebufferTexture2DMultisampleIMG = new Command();
  private static void glFramebufferTexture2DMultisampleIMG() {
    Command cmd = glFramebufferTexture2DMultisampleIMG;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_IMG_multisampled_render_to_texture;
  }
  public static final Command glGetString = new Command();
  private static void glGetString() {
    Command cmd = glGetString;
    cmd.returnGroup = _null_;
    cmd.addParam("name", GLenum, StringName);
  }
  public static final Command glPathCoverDepthFuncNV = new Command();
  private static void glPathCoverDepthFuncNV() {
    Command cmd = glPathCoverDepthFuncNV;
    cmd.returnGroup = _null_;
    cmd.addParam("func", GLenum, DepthFunction);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetSubroutineUniformLocation = new Command();
  private static void glGetSubroutineUniformLocation() {
    Command cmd = glGetSubroutineUniformLocation;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glTexGenf = new Command();
  private static void glTexGenf() {
    Command cmd = glTexGenf;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glTexGeni = new Command();
  private static void glTexGeni() {
    Command cmd = glTexGeni;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glIsFramebufferEXT = new Command();
  private static void glIsFramebufferEXT() {
    Command cmd = glIsFramebufferEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glProgramUniformMatrix2dvEXT = new Command();
  private static void glProgramUniformMatrix2dvEXT() {
    Command cmd = glProgramUniformMatrix2dvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glBlitNamedFramebuffer = new Command();
  private static void glBlitNamedFramebuffer() {
    Command cmd = glBlitNamedFramebuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, _null_);
    cmd.addParam("filter", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTexGend = new Command();
  private static void glTexGend() {
    Command cmd = glTexGend;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, TextureCoordName);
    cmd.addParam("pname", GLenum, TextureGenParameter);
  }
  public static final Command glGetBooleani_v = new Command();
  private static void glGetBooleani_v() {
    Command cmd = glGetBooleani_v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("data", GLboolean, Boolean);
  }
  public static final Command glGetQueryiv = new Command();
  private static void glGetQueryiv() {
    Command cmd = glGetQueryiv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetVariantBooleanvEXT = new Command();
  private static void glGetVariantBooleanvEXT() {
    Command cmd = glGetVariantBooleanvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.addParam("data", GLboolean, Boolean);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glBindBufferBaseEXT = new Command();
  private static void glBindBufferBaseEXT() {
    Command cmd = glBindBufferBaseEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_transform_feedback;
  }
  public static final Command glVertexStream4ivATI = new Command();
  private static void glVertexStream4ivATI() {
    Command cmd = glVertexStream4ivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetnHistogram = new Command();
  private static void glGetnHistogram() {
    Command cmd = glGetnHistogram;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetActiveAtomicCounterBufferiv = new Command();
  private static void glGetActiveAtomicCounterBufferiv() {
    Command cmd = glGetActiveAtomicCounterBufferiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shader_atomic_counters;
  }
  public static final Command glMapNamedBufferRangeEXT = new Command();
  private static void glMapNamedBufferRangeEXT() {
    Command cmd = glMapNamedBufferRangeEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLbitfield, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramEnvParameter4fvARB = new Command();
  private static void glProgramEnvParameter4fvARB() {
    Command cmd = glProgramEnvParameter4fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glGetVideouivNV = new Command();
  private static void glGetVideouivNV() {
    Command cmd = glGetVideouivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_present_video;
  }
  public static final Command glPointParameterxv = new Command();
  private static void glPointParameterxv() {
    Command cmd = glPointParameterxv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glGetnPixelMapuivARB = new Command();
  private static void glGetnPixelMapuivARB() {
    Command cmd = glGetnPixelMapuivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glIsTextureHandleResidentARB = new Command();
  private static void glIsTextureHandleResidentARB() {
    Command cmd = glIsTextureHandleResidentARB;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_bindless_texture;
  }
  public static final Command glNamedFramebufferDrawBuffer = new Command();
  private static void glNamedFramebufferDrawBuffer() {
    Command cmd = glNamedFramebufferDrawBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("buf", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTextureStorage3DEXT = new Command();
  private static void glTextureStorage3DEXT() {
    Command cmd = glTextureStorage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_storage;
  }
  public static final Command glGetObjectBufferfvATI = new Command();
  private static void glGetObjectBufferfvATI() {
    Command cmd = glGetObjectBufferfvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glEvalMesh1 = new Command();
  private static void glEvalMesh1() {
    Command cmd = glEvalMesh1;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MeshMode1);
  }
  public static final Command glEvalMesh2 = new Command();
  private static void glEvalMesh2() {
    Command cmd = glEvalMesh2;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MeshMode2);
  }
  public static final Command glFramebufferParameteri = new Command();
  private static void glFramebufferParameteri() {
    Command cmd = glFramebufferParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_no_attachments;
  }
  public static final Command glGetObjectParameterivARB = new Command();
  private static void glGetObjectParameterivARB() {
    Command cmd = glGetObjectParameterivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glTexImage3DMultisampleCoverageNV = new Command();
  private static void glTexImage3DMultisampleCoverageNV() {
    Command cmd = glTexImage3DMultisampleCoverageNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_NV_texture_multisample;
  }
  public static final Command glProgramUniformMatrix2x3fv = new Command();
  private static void glProgramUniformMatrix2x3fv() {
    Command cmd = glProgramUniformMatrix2x3fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glFramebufferTextureFaceARB = new Command();
  private static void glFramebufferTextureFaceARB() {
    Command cmd = glFramebufferTextureFaceARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("face", GLenum, TextureTarget);
    cmd.extension = GL_ARB_geometry_shader4;
  }
  public static final Command glTexStorageMem2DEXT = new Command();
  private static void glTexStorageMem2DEXT() {
    Command cmd = glTexStorageMem2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glGetnPixelMapuiv = new Command();
  private static void glGetnPixelMapuiv() {
    Command cmd = glGetnPixelMapuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, _null_);
  }
  public static final Command glTexCoordP2ui = new Command();
  private static void glTexCoordP2ui() {
    Command cmd = glTexCoordP2ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetLightxvOES = new Command();
  private static void glGetLightxvOES() {
    Command cmd = glGetLightxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glMultiTexCoord4bvOES = new Command();
  private static void glMultiTexCoord4bvOES() {
    Command cmd = glMultiTexCoord4bvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glIndexPointer = new Command();
  private static void glIndexPointer() {
    Command cmd = glIndexPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, IndexPointerType);
  }
  public static final Command glNamedProgramLocalParameter4fvEXT = new Command();
  private static void glNamedProgramLocalParameter4fvEXT() {
    Command cmd = glNamedProgramLocalParameter4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glClearTexSubImage = new Command();
  private static void glClearTexSubImage() {
    Command cmd = glClearTexSubImage;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_clear_texture;
  }
  public static final Command glFramebufferTextureLayer = new Command();
  private static void glFramebufferTextureLayer() {
    Command cmd = glFramebufferTextureLayer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glGetVertexAttribLdv = new Command();
  private static void glGetVertexAttribLdv() {
    Command cmd = glGetVertexAttribLdv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_attrib_64bit;
  }
  public static final Command glVertexP4uiv = new Command();
  private static void glVertexP4uiv() {
    Command cmd = glVertexP4uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetTexParameterxv = new Command();
  private static void glGetTexParameterxv() {
    Command cmd = glGetTexParameterxv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glSampleCoveragexOES = new Command();
  private static void glSampleCoveragexOES() {
    Command cmd = glSampleCoveragexOES;
    cmd.returnGroup = _null_;
    cmd.addParam("invert", GLboolean, Boolean);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetSamplerParameterIiv = new Command();
  private static void glGetSamplerParameterIiv() {
    Command cmd = glGetSamplerParameterIiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glVertexAttribPointerNV = new Command();
  private static void glVertexAttribPointerNV() {
    Command cmd = glVertexAttribPointerNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glVertexStream4sATI = new Command();
  private static void glVertexStream4sATI() {
    Command cmd = glVertexStream4sATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glProgramUniformMatrix2x3dv = new Command();
  private static void glProgramUniformMatrix2x3dv() {
    Command cmd = glProgramUniformMatrix2x3dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glFramebufferTexture2DEXT = new Command();
  private static void glFramebufferTexture2DEXT() {
    Command cmd = glFramebufferTexture2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glUniformMatrix3x2fvNV = new Command();
  private static void glUniformMatrix3x2fvNV() {
    Command cmd = glUniformMatrix3x2fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_NV_non_square_matrices;
  }
  public static final Command glPathGlyphRangeNV = new Command();
  private static void glPathGlyphRangeNV() {
    Command cmd = glPathGlyphRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fontTarget", GLenum, _null_);
    cmd.addParam("fontStyle", GLbitfield, _null_);
    cmd.addParam("handleMissingGlyphs", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glProgramBufferParametersIuivNV = new Command();
  private static void glProgramBufferParametersIuivNV() {
    Command cmd = glProgramBufferParametersIuivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_parameter_buffer_object;
  }
  public static final Command glBinormalPointerEXT = new Command();
  private static void glBinormalPointerEXT() {
    Command cmd = glBinormalPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_coordinate_frame;
  }
  public static final Command glStencilFillPathNV = new Command();
  private static void glStencilFillPathNV() {
    Command cmd = glStencilFillPathNV;
    cmd.returnGroup = _null_;
    cmd.addParam("fillMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glGetError = new Command();
  private static void glGetError() {
    Command cmd = glGetError;
    cmd.returnGroup = ErrorCode;
  }
  public static final Command glDrawElementsInstancedBaseVertexOES = new Command();
  private static void glDrawElementsInstancedBaseVertexOES() {
    Command cmd = glDrawElementsInstancedBaseVertexOES;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glVertexStream3fATI = new Command();
  private static void glVertexStream3fATI() {
    Command cmd = glVertexStream3fATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glCombinerParameteriNV = new Command();
  private static void glCombinerParameteriNV() {
    Command cmd = glCombinerParameteriNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glGetGraphicsResetStatus = new Command();
  private static void glGetGraphicsResetStatus() {
    Command cmd = glGetGraphicsResetStatus;
    cmd.returnGroup = _null_;
    cmd.extension = GL_KHR_robustness;
  }
  public static final Command glNamedProgramLocalParameterI4uivEXT = new Command();
  private static void glNamedProgramLocalParameterI4uivEXT() {
    Command cmd = glNamedProgramLocalParameterI4uivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glPointParameterivNV = new Command();
  private static void glPointParameterivNV() {
    Command cmd = glPointParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_point_sprite;
  }
  public static final Command glNormalPointerEXT = new Command();
  private static void glNormalPointerEXT() {
    Command cmd = glNormalPointerEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, NormalPointerType);
    cmd.extension = GL_EXT_vertex_array;
  }
  public static final Command glLogicOp = new Command();
  private static void glLogicOp() {
    Command cmd = glLogicOp;
    cmd.returnGroup = _null_;
    cmd.addParam("opcode", GLenum, LogicOp);
  }
  public static final Command glMatrixScaledEXT = new Command();
  private static void glMatrixScaledEXT() {
    Command cmd = glMatrixScaledEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetPathColorGenivNV = new Command();
  private static void glGetPathColorGenivNV() {
    Command cmd = glGetPathColorGenivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("color", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glUnmapNamedBuffer = new Command();
  private static void glUnmapNamedBuffer() {
    Command cmd = glUnmapNamedBuffer;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glDrawArraysInstancedEXT = new Command();
  private static void glDrawArraysInstancedEXT() {
    Command cmd = glDrawArraysInstancedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_EXT_instanced_arrays;
  }
  public static final Command glVertexStream2svATI = new Command();
  private static void glVertexStream2svATI() {
    Command cmd = glVertexStream2svATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetTextureImage = new Command();
  private static void glGetTextureImage() {
    Command cmd = glGetTextureImage;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glPixelTransformParameterfvEXT = new Command();
  private static void glPixelTransformParameterfvEXT() {
    Command cmd = glPixelTransformParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_pixel_transform;
  }
  public static final Command glIsBufferResidentNV = new Command();
  private static void glIsBufferResidentNV() {
    Command cmd = glIsBufferResidentNV;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glClientWaitSyncAPPLE = new Command();
  private static void glClientWaitSyncAPPLE() {
    Command cmd = glClientWaitSyncAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_APPLE_sync;
  }
  public static final Command glVertexStream2dATI = new Command();
  private static void glVertexStream2dATI() {
    Command cmd = glVertexStream2dATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glCopyImageSubDataNV = new Command();
  private static void glCopyImageSubDataNV() {
    Command cmd = glCopyImageSubDataNV;
    cmd.returnGroup = _null_;
    cmd.addParam("srcTarget", GLenum, _null_);
    cmd.addParam("dstTarget", GLenum, _null_);
  }
  public static final Command glColorP3uiv = new Command();
  private static void glColorP3uiv() {
    Command cmd = glColorP3uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glClientWaitSync = new Command();
  private static void glClientWaitSync() {
    Command cmd = glClientWaitSync;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_ARB_sync;
  }
  public static final Command glGetVertexArrayIntegeri_vEXT = new Command();
  private static void glGetVertexArrayIntegeri_vEXT() {
    Command cmd = glGetVertexArrayIntegeri_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexParameterIivEXT = new Command();
  private static void glTexParameterIivEXT() {
    Command cmd = glTexParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_texture_integer;
  }
  public static final Command glCompressedTexImage1DARB = new Command();
  private static void glCompressedTexImage1DARB() {
    Command cmd = glCompressedTexImage1DARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glPatchParameteriEXT = new Command();
  private static void glPatchParameteriEXT() {
    Command cmd = glPatchParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_tessellation_shader;
  }
  public static final Command glTexPageCommitmentEXT = new Command();
  private static void glTexPageCommitmentEXT() {
    Command cmd = glTexPageCommitmentEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("commit", GLboolean, Boolean);
    cmd.extension = GL_EXT_sparse_texture;
  }
  public static final Command glMultiTexImage2DEXT = new Command();
  private static void glMultiTexImage2DEXT() {
    Command cmd = glMultiTexImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetRenderbufferParameteriv = new Command();
  private static void glGetRenderbufferParameteriv() {
    Command cmd = glGetRenderbufferParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glPixelMapusv = new Command();
  private static void glPixelMapusv() {
    Command cmd = glPixelMapusv;
    cmd.returnGroup = _null_;
    cmd.addParam("map", GLenum, PixelMap);
  }
  public static final Command glEnableVertexAttribAPPLE = new Command();
  private static void glEnableVertexAttribAPPLE() {
    Command cmd = glEnableVertexAttribAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_vertex_program_evaluators;
  }
  public static final Command glGetNamedProgramLocalParameterIuivEXT = new Command();
  private static void glGetNamedProgramLocalParameterIuivEXT() {
    Command cmd = glGetNamedProgramLocalParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glPatchParameterfv = new Command();
  private static void glPatchParameterfv() {
    Command cmd = glPatchParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_tessellation_shader;
  }
  public static final Command glGetTexParameterPointervAPPLE = new Command();
  private static void glGetTexParameterPointervAPPLE() {
    Command cmd = glGetTexParameterPointervAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_APPLE_texture_range;
  }
  public static final Command glNormalFormatNV = new Command();
  private static void glNormalFormatNV() {
    Command cmd = glNormalFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glMemoryBarrierByRegion = new Command();
  private static void glMemoryBarrierByRegion() {
    Command cmd = glMemoryBarrierByRegion;
    cmd.returnGroup = _null_;
    cmd.addParam("barriers", GLbitfield, _null_);
    cmd.extension = GL_ARB_ES3_1_compatibility;
  }
  public static final Command glGetSeparableFilter = new Command();
  private static void glGetSeparableFilter() {
    Command cmd = glGetSeparableFilter;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glNormalStream3bvATI = new Command();
  private static void glNormalStream3bvATI() {
    Command cmd = glNormalStream3bvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetNamedProgramivEXT = new Command();
  private static void glGetNamedProgramivEXT() {
    Command cmd = glGetNamedProgramivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glVertexP4ui = new Command();
  private static void glVertexP4ui() {
    Command cmd = glVertexP4ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetGraphicsResetStatusARB = new Command();
  private static void glGetGraphicsResetStatusARB() {
    Command cmd = glGetGraphicsResetStatusARB;
    cmd.returnGroup = _null_;
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glGetTextureParameterfvEXT = new Command();
  private static void glGetTextureParameterfvEXT() {
    Command cmd = glGetTextureParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexParameterIuivOES = new Command();
  private static void glTexParameterIuivOES() {
    Command cmd = glTexParameterIuivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glGetFramebufferParameteriv = new Command();
  private static void glGetFramebufferParameteriv() {
    Command cmd = glGetFramebufferParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_no_attachments;
  }
  public static final Command glMultiTexCoord1xvOES = new Command();
  private static void glMultiTexCoord1xvOES() {
    Command cmd = glMultiTexCoord1xvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glVertexBlendEnvfATI = new Command();
  private static void glVertexBlendEnvfATI() {
    Command cmd = glVertexBlendEnvfATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glProgramParameter4dNV = new Command();
  private static void glProgramParameter4dNV() {
    Command cmd = glProgramParameter4dNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glObjectLabelKHR = new Command();
  private static void glObjectLabelKHR() {
    Command cmd = glObjectLabelKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glGetMultisamplefvNV = new Command();
  private static void glGetMultisamplefvNV() {
    Command cmd = glGetMultisamplefvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_explicit_multisample;
  }
  public static final Command glEndQueryEXT = new Command();
  private static void glEndQueryEXT() {
    Command cmd = glEndQueryEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_occlusion_query_boolean;
  }
  public static final Command glGetQueryBufferObjectuiv = new Command();
  private static void glGetQueryBufferObjectuiv() {
    Command cmd = glGetQueryBufferObjectuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glTexBufferRange = new Command();
  private static void glTexBufferRange() {
    Command cmd = glTexBufferRange;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_ARB_texture_buffer_range;
  }
  public static final Command glProgramUniformMatrix4x3fvEXT = new Command();
  private static void glProgramUniformMatrix4x3fvEXT() {
    Command cmd = glProgramUniformMatrix4x3fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glSpriteParameteriSGIX = new Command();
  private static void glSpriteParameteriSGIX() {
    Command cmd = glSpriteParameteriSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_sprite;
  }
  public static final Command glDrawArraysInstancedBaseInstance = new Command();
  private static void glDrawArraysInstancedBaseInstance() {
    Command cmd = glDrawArraysInstancedBaseInstance;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glTexParameterIivOES = new Command();
  private static void glTexParameterIivOES() {
    Command cmd = glTexParameterIivOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_OES_texture_border_clamp;
  }
  public static final Command glGetRenderbufferParameterivEXT = new Command();
  private static void glGetRenderbufferParameterivEXT() {
    Command cmd = glGetRenderbufferParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glGetnHistogramARB = new Command();
  private static void glGetnHistogramARB() {
    Command cmd = glGetnHistogramARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_robustness;
  }
  public static final Command glIsPointInStrokePathNV = new Command();
  private static void glIsPointInStrokePathNV() {
    Command cmd = glIsPointInStrokePathNV;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glBlendFuncSeparateOES = new Command();
  private static void glBlendFuncSeparateOES() {
    Command cmd = glBlendFuncSeparateOES;
    cmd.returnGroup = _null_;
    cmd.addParam("srcRGB", GLenum, _null_);
    cmd.addParam("dstRGB", GLenum, _null_);
    cmd.addParam("srcAlpha", GLenum, _null_);
    cmd.addParam("dstAlpha", GLenum, _null_);
    cmd.extension = GL_OES_blend_func_separate;
  }
  public static final Command glReadBufferIndexedEXT = new Command();
  private static void glReadBufferIndexedEXT() {
    Command cmd = glReadBufferIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("src", GLenum, _null_);
    cmd.extension = GL_EXT_multiview_draw_buffers;
  }
  public static final Command glGetFramebufferParameterivEXT = new Command();
  private static void glGetFramebufferParameterivEXT() {
    Command cmd = glGetFramebufferParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramEnvParametersI4ivNV = new Command();
  private static void glProgramEnvParametersI4ivNV() {
    Command cmd = glProgramEnvParametersI4ivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glGetNamedFramebufferAttachmentParameteriv = new Command();
  private static void glGetNamedFramebufferAttachmentParameteriv() {
    Command cmd = glGetNamedFramebufferAttachmentParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMatrixLoaddEXT = new Command();
  private static void glMatrixLoaddEXT() {
    Command cmd = glMatrixLoaddEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetOcclusionQueryuivNV = new Command();
  private static void glGetOcclusionQueryuivNV() {
    Command cmd = glGetOcclusionQueryuivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_occlusion_query;
  }
  public static final Command glGetTextureSubImage = new Command();
  private static void glGetTextureSubImage() {
    Command cmd = glGetTextureSubImage;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glVertexArrayNormalOffsetEXT = new Command();
  private static void glVertexArrayNormalOffsetEXT() {
    Command cmd = glVertexArrayNormalOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, NormalPointerType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetTransformFeedbackVaryingEXT = new Command();
  private static void glGetTransformFeedbackVaryingEXT() {
    Command cmd = glGetTransformFeedbackVaryingEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_transform_feedback;
  }
  public static final Command glProvokingVertexEXT = new Command();
  private static void glProvokingVertexEXT() {
    Command cmd = glProvokingVertexEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_EXT_provoking_vertex;
  }
  public static final Command glTrackMatrixNV = new Command();
  private static void glTrackMatrixNV() {
    Command cmd = glTrackMatrixNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("matrix", GLenum, _null_);
    cmd.addParam("transform", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glConvolutionParameteriv = new Command();
  private static void glConvolutionParameteriv() {
    Command cmd = glConvolutionParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glResetHistogramEXT = new Command();
  private static void glResetHistogramEXT() {
    Command cmd = glResetHistogramEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, HistogramTargetEXT);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glGetCombinerInputParameterfvNV = new Command();
  private static void glGetCombinerInputParameterfvNV() {
    Command cmd = glGetCombinerInputParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("portion", GLenum, _null_);
    cmd.addParam("variable", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glMultiTexCoord3xOES = new Command();
  private static void glMultiTexCoord3xOES() {
    Command cmd = glMultiTexCoord3xOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glSpriteParameterfSGIX = new Command();
  private static void glSpriteParameterfSGIX() {
    Command cmd = glSpriteParameterfSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_sprite;
  }
  public static final Command glGetVertexArrayiv = new Command();
  private static void glGetVertexArrayiv() {
    Command cmd = glGetVertexArrayiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glVertexFormatNV = new Command();
  private static void glVertexFormatNV() {
    Command cmd = glVertexFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_buffer_unified_memory;
  }
  public static final Command glGetProgramResourceIndex = new Command();
  private static void glGetProgramResourceIndex() {
    Command cmd = glGetProgramResourceIndex;
    cmd.returnGroup = _null_;
    cmd.addParam("programInterface", GLenum, _null_);
    cmd.extension = GL_ARB_program_interface_query;
  }
  public static final Command glProgramEnvParametersI4uivNV = new Command();
  private static void glProgramEnvParametersI4uivNV() {
    Command cmd = glProgramEnvParametersI4uivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glProgramParameter4fNV = new Command();
  private static void glProgramParameter4fNV() {
    Command cmd = glProgramParameter4fNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glMultiTexParameterfvEXT = new Command();
  private static void glMultiTexParameterfvEXT() {
    Command cmd = glMultiTexParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord3bOES = new Command();
  private static void glMultiTexCoord3bOES() {
    Command cmd = glMultiTexCoord3bOES;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
    cmd.extension = GL_OES_byte_coordinates;
  }
  public static final Command glGetTextureParameterIuiv = new Command();
  private static void glGetTextureParameterIuiv() {
    Command cmd = glGetTextureParameterIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glQueryMatrixxOES = new Command();
  private static void glQueryMatrixxOES() {
    Command cmd = glQueryMatrixxOES;
    cmd.returnGroup = _null_;
  }
  public static final Command glVertexP3ui = new Command();
  private static void glVertexP3ui() {
    Command cmd = glVertexP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetTexParameteriv = new Command();
  private static void glGetTexParameteriv() {
    Command cmd = glGetTexParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
  }
  public static final Command glGetPathMetricRangeNV = new Command();
  private static void glGetPathMetricRangeNV() {
    Command cmd = glGetPathMetricRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("metricQueryMask", GLbitfield, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glMultiTexBufferEXT = new Command();
  private static void glMultiTexBufferEXT() {
    Command cmd = glMultiTexBufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiTexCoord3hNV = new Command();
  private static void glMultiTexCoord3hNV() {
    Command cmd = glMultiTexCoord3hNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glAlphaToCoverageDitherControlNV = new Command();
  private static void glAlphaToCoverageDitherControlNV() {
    Command cmd = glAlphaToCoverageDitherControlNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_NV_alpha_to_coverage_dither_control;
  }
  public static final Command glVertexAttribIFormat = new Command();
  private static void glVertexAttribIFormat() {
    Command cmd = glVertexAttribIFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_attrib_binding;
  }
  public static final Command glMultiTexCoord1fvARB = new Command();
  private static void glMultiTexCoord1fvARB() {
    Command cmd = glMultiTexCoord1fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glFragmentMaterialiSGIX = new Command();
  private static void glFragmentMaterialiSGIX() {
    Command cmd = glFragmentMaterialiSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("pname", GLenum, MaterialParameter);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glGetVertexAttribPointervARB = new Command();
  private static void glGetVertexAttribPointervARB() {
    Command cmd = glGetVertexAttribPointervARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_shader;
  }
  public static final Command glMapTexture2DINTEL = new Command();
  private static void glMapTexture2DINTEL() {
    Command cmd = glMapTexture2DINTEL;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLbitfield, _null_);
    cmd.addParam("layout", GLenum, _null_);
    cmd.extension = GL_INTEL_map_texture;
  }
  public static final Command glIsEnabled = new Command();
  private static void glIsEnabled() {
    Command cmd = glIsEnabled;
    cmd.returnGroup = Boolean;
    cmd.addParam("cap", GLenum, EnableCap);
  }
  public static final Command glVertexAttribP2uiv = new Command();
  private static void glVertexAttribP2uiv() {
    Command cmd = glVertexAttribP2uiv;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glClientActiveVertexStreamATI = new Command();
  private static void glClientActiveVertexStreamATI() {
    Command cmd = glClientActiveVertexStreamATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glDrawElementsInstancedNV = new Command();
  private static void glDrawElementsInstancedNV() {
    Command cmd = glDrawElementsInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glCopyTextureImage2DEXT = new Command();
  private static void glCopyTextureImage2DEXT() {
    Command cmd = glCopyTextureImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glIsQueryEXT = new Command();
  private static void glIsQueryEXT() {
    Command cmd = glIsQueryEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_occlusion_query_boolean;
  }
  public static final Command glStateCaptureNV = new Command();
  private static void glStateCaptureNV() {
    Command cmd = glStateCaptureNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glGetQueryIndexediv = new Command();
  private static void glGetQueryIndexediv() {
    Command cmd = glGetQueryIndexediv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_transform_feedback3;
  }
  public static final Command glGetActiveSubroutineUniformName = new Command();
  private static void glGetActiveSubroutineUniformName() {
    Command cmd = glGetActiveSubroutineUniformName;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glTexBumpParameterfvATI = new Command();
  private static void glTexBumpParameterfvATI() {
    Command cmd = glTexBumpParameterfvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_envmap_bumpmap;
  }
  public static final Command glGetObjectParameterfvARB = new Command();
  private static void glGetObjectParameterfvARB() {
    Command cmd = glGetObjectParameterfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glGetQueryBufferObjecti64v = new Command();
  private static void glGetQueryBufferObjecti64v() {
    Command cmd = glGetQueryBufferObjecti64v;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glClipPlanexOES = new Command();
  private static void glClipPlanexOES() {
    Command cmd = glClipPlanexOES;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glGetTexParameterfv = new Command();
  private static void glGetTexParameterfv() {
    Command cmd = glGetTexParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
  }
  public static final Command glStencilThenCoverStrokePathInstancedNV = new Command();
  private static void glStencilThenCoverStrokePathInstancedNV() {
    Command cmd = glStencilThenCoverStrokePathInstancedNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pathNameType", GLenum, _null_);
    cmd.addParam("coverMode", GLenum, _null_);
    cmd.addParam("transformType", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glPointParameterxOES = new Command();
  private static void glPointParameterxOES() {
    Command cmd = glPointParameterxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTextureParameteri = new Command();
  private static void glTextureParameteri() {
    Command cmd = glTextureParameteri;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glDisablei = new Command();
  private static void glDisablei() {
    Command cmd = glDisablei;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glTextureParameterf = new Command();
  private static void glTextureParameterf() {
    Command cmd = glTextureParameterf;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glColorTable = new Command();
  private static void glColorTable() {
    Command cmd = glColorTable;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glBindBuffersBase = new Command();
  private static void glBindBuffersBase() {
    Command cmd = glBindBuffersBase;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glExtGetBufferPointervQCOM = new Command();
  private static void glExtGetBufferPointervQCOM() {
    Command cmd = glExtGetBufferPointervQCOM;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_QCOM_extended_get;
  }
  public static final Command glIsEnablediOES = new Command();
  private static void glIsEnablediOES() {
    Command cmd = glIsEnablediOES;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_viewport_array;
  }
  public static final Command glGetCompressedMultiTexImageEXT = new Command();
  private static void glGetCompressedMultiTexImageEXT() {
    Command cmd = glGetCompressedMultiTexImageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetnConvolutionFilter = new Command();
  private static void glGetnConvolutionFilter() {
    Command cmd = glGetnConvolutionFilter;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glTextureStorage2DMultisample = new Command();
  private static void glTextureStorage2DMultisample() {
    Command cmd = glTextureStorage2DMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glMapNamedBuffer = new Command();
  private static void glMapNamedBuffer() {
    Command cmd = glMapNamedBuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetFloati_vEXT = new Command();
  private static void glGetFloati_vEXT() {
    Command cmd = glGetFloati_vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glPushAttrib = new Command();
  private static void glPushAttrib() {
    Command cmd = glPushAttrib;
    cmd.returnGroup = _null_;
    cmd.addParam("mask", GLbitfield, AttribMask);
  }
  public static final Command glGetObjectLabel = new Command();
  private static void glGetObjectLabel() {
    Command cmd = glGetObjectLabel;
    cmd.returnGroup = _null_;
    cmd.addParam("identifier", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glMultiDrawArraysIndirectEXT = new Command();
  private static void glMultiDrawArraysIndirectEXT() {
    Command cmd = glMultiDrawArraysIndirectEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
  }
  public static final Command glDrawElementArrayATI = new Command();
  private static void glDrawElementArrayATI() {
    Command cmd = glDrawElementArrayATI;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_ATI_element_array;
  }
  public static final Command glMemoryBarrier = new Command();
  private static void glMemoryBarrier() {
    Command cmd = glMemoryBarrier;
    cmd.returnGroup = _null_;
    cmd.addParam("barriers", GLbitfield, _null_);
    cmd.extension = GL_ARB_shader_image_load_store;
  }
  public static final Command glMapBufferOES = new Command();
  private static void glMapBufferOES() {
    Command cmd = glMapBufferOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("access", GLenum, _null_);
    cmd.extension = GL_OES_mapbuffer;
  }
  public static final Command glTextureStorageSparseAMD = new Command();
  private static void glTextureStorageSparseAMD() {
    Command cmd = glTextureStorageSparseAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_AMD_sparse_texture;
  }
  public static final Command glSamplerParameterIuiv = new Command();
  private static void glSamplerParameterIuiv() {
    Command cmd = glSamplerParameterIuiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_sampler_objects;
  }
  public static final Command glIsNamedStringARB = new Command();
  private static void glIsNamedStringARB() {
    Command cmd = glIsNamedStringARB;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ARB_shading_language_include;
  }
  public static final Command glBindFramebufferOES = new Command();
  private static void glBindFramebufferOES() {
    Command cmd = glBindFramebufferOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glNamedProgramLocalParameterI4ivEXT = new Command();
  private static void glNamedProgramLocalParameterI4ivEXT() {
    Command cmd = glNamedProgramLocalParameterI4ivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexBufferRangeOES = new Command();
  private static void glTexBufferRangeOES() {
    Command cmd = glTexBufferRangeOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_OES_texture_buffer;
  }
  public static final Command glFramebufferTexture2DDownsampleIMG = new Command();
  private static void glFramebufferTexture2DDownsampleIMG() {
    Command cmd = glFramebufferTexture2DDownsampleIMG;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("textarget", GLenum, TextureTarget);
    cmd.extension = GL_IMG_framebuffer_downsample;
  }
  public static final Command glColorP4ui = new Command();
  private static void glColorP4ui() {
    Command cmd = glColorP4ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glCompressedMultiTexSubImage1DEXT = new Command();
  private static void glCompressedMultiTexSubImage1DEXT() {
    Command cmd = glCompressedMultiTexSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetPerfMonitorCounterDataAMD = new Command();
  private static void glGetPerfMonitorCounterDataAMD() {
    Command cmd = glGetPerfMonitorCounterDataAMD;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_AMD_performance_monitor;
  }
  public static final Command glBindProgramNV = new Command();
  private static void glBindProgramNV() {
    Command cmd = glBindProgramNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetProgramEnvParameterIivNV = new Command();
  private static void glGetProgramEnvParameterIivNV() {
    Command cmd = glGetProgramEnvParameterIivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glProgramUniformMatrix3x4dv = new Command();
  private static void glProgramUniformMatrix3x4dv() {
    Command cmd = glProgramUniformMatrix3x4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glVideoCaptureStreamParameterfvNV = new Command();
  private static void glVideoCaptureStreamParameterfvNV() {
    Command cmd = glVideoCaptureStreamParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glPathTexGenNV = new Command();
  private static void glPathTexGenNV() {
    Command cmd = glPathTexGenNV;
    cmd.returnGroup = _null_;
    cmd.addParam("texCoordSet", GLenum, _null_);
    cmd.addParam("genMode", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glImageTransformParameterfHP = new Command();
  private static void glImageTransformParameterfHP() {
    Command cmd = glImageTransformParameterfHP;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_HP_image_transform;
  }
  public static final Command glGetTexGenfvOES = new Command();
  private static void glGetTexGenfvOES() {
    Command cmd = glGetTexGenfvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("coord", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_texture_cube_map;
  }
  public static final Command glPixelDataRangeNV = new Command();
  private static void glPixelDataRangeNV() {
    Command cmd = glPixelDataRangeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_pixel_data_range;
  }
  public static final Command glPointParameterfvARB = new Command();
  private static void glPointParameterfvARB() {
    Command cmd = glPointParameterfvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_point_parameters;
  }
  public static final Command glVertexAttribLPointer = new Command();
  private static void glVertexAttribLPointer() {
    Command cmd = glVertexAttribLPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_attrib_64bit;
  }
  public static final Command glGetMapParameterfvNV = new Command();
  private static void glGetMapParameterfvNV() {
    Command cmd = glGetMapParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_evaluators;
  }
  public static final Command glGetMinmaxParameterfvEXT = new Command();
  private static void glGetMinmaxParameterfvEXT() {
    Command cmd = glGetMinmaxParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MinmaxTargetEXT);
    cmd.addParam("pname", GLenum, GetMinmaxParameterPNameEXT);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glProgramBinary = new Command();
  private static void glProgramBinary() {
    Command cmd = glProgramBinary;
    cmd.returnGroup = _null_;
    cmd.addParam("binaryFormat", GLenum, _null_);
    cmd.extension = GL_ARB_get_program_binary;
  }
  public static final Command glUniformMatrix2fvARB = new Command();
  private static void glUniformMatrix2fvARB() {
    Command cmd = glUniformMatrix2fvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_shader_objects;
  }
  public static final Command glVertexAttribP2ui = new Command();
  private static void glVertexAttribP2ui() {
    Command cmd = glVertexAttribP2ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glVertexStream4fvATI = new Command();
  private static void glVertexStream4fvATI() {
    Command cmd = glVertexStream4fvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glProgramEnvParameter4fARB = new Command();
  private static void glProgramEnvParameter4fARB() {
    Command cmd = glProgramEnvParameter4fARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glConvolutionParameterfv = new Command();
  private static void glConvolutionParameterfv() {
    Command cmd = glConvolutionParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glUnmapBufferOES = new Command();
  private static void glUnmapBufferOES() {
    Command cmd = glUnmapBufferOES;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_mapbuffer;
  }
  public static final Command glCompressedTexSubImage3DARB = new Command();
  private static void glCompressedTexSubImage3DARB() {
    Command cmd = glCompressedTexSubImage3DARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.extension = GL_ARB_texture_compression;
  }
  public static final Command glDrawElementsIndirect = new Command();
  private static void glDrawElementsIndirect() {
    Command cmd = glDrawElementsIndirect;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_draw_indirect;
  }
  public static final Command glUniformMatrix2x4fvNV = new Command();
  private static void glUniformMatrix2x4fvNV() {
    Command cmd = glUniformMatrix2x4fvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_NV_non_square_matrices;
  }
  public static final Command glBindBufferOffsetEXT = new Command();
  private static void glBindBufferOffsetEXT() {
    Command cmd = glBindBufferOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_transform_feedback;
  }
  public static final Command glVertexArrayVertexAttribIOffsetEXT = new Command();
  private static void glVertexArrayVertexAttribIOffsetEXT() {
    Command cmd = glVertexArrayVertexAttribIOffsetEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetMinmaxEXT = new Command();
  private static void glGetMinmaxEXT() {
    Command cmd = glGetMinmaxEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, MinmaxTargetEXT);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_histogram;
  }
  public static final Command glGetPathColorGenfvNV = new Command();
  private static void glGetPathColorGenfvNV() {
    Command cmd = glGetPathColorGenfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("color", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glBlendFuncSeparatei = new Command();
  private static void glBlendFuncSeparatei() {
    Command cmd = glBlendFuncSeparatei;
    cmd.returnGroup = _null_;
    cmd.addParam("srcRGB", GLenum, _null_);
    cmd.addParam("dstRGB", GLenum, _null_);
    cmd.addParam("srcAlpha", GLenum, _null_);
    cmd.addParam("dstAlpha", GLenum, _null_);
  }
  public static final Command glFogxOES = new Command();
  private static void glFogxOES() {
    Command cmd = glFogxOES;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glTexImage2DMultisample = new Command();
  private static void glTexImage2DMultisample() {
    Command cmd = glTexImage2DMultisample;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_ARB_texture_multisample;
  }
  public static final Command glObjectPurgeableAPPLE = new Command();
  private static void glObjectPurgeableAPPLE() {
    Command cmd = glObjectPurgeableAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("objectType", GLenum, _null_);
    cmd.addParam("option", GLenum, _null_);
    cmd.extension = GL_APPLE_object_purgeable;
  }
  public static final Command glViewportSwizzleNV = new Command();
  private static void glViewportSwizzleNV() {
    Command cmd = glViewportSwizzleNV;
    cmd.returnGroup = _null_;
    cmd.addParam("swizzlex", GLenum, _null_);
    cmd.addParam("swizzley", GLenum, _null_);
    cmd.addParam("swizzlez", GLenum, _null_);
    cmd.addParam("swizzlew", GLenum, _null_);
    cmd.extension = GL_NV_viewport_swizzle;
  }
  public static final Command glMultiTexCoord3fARB = new Command();
  private static void glMultiTexCoord3fARB() {
    Command cmd = glMultiTexCoord3fARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glDisableClientStateiEXT = new Command();
  private static void glDisableClientStateiEXT() {
    Command cmd = glDisableClientStateiEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureSubImage2DEXT = new Command();
  private static void glTextureSubImage2DEXT() {
    Command cmd = glTextureSubImage2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glFragmentLightfSGIX = new Command();
  private static void glFragmentLightfSGIX() {
    Command cmd = glFragmentLightfSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("light", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_fragment_lighting;
  }
  public static final Command glVertexStream3iATI = new Command();
  private static void glVertexStream3iATI() {
    Command cmd = glVertexStream3iATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glBindParameterEXT = new Command();
  private static void glBindParameterEXT() {
    Command cmd = glBindParameterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("value", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glDrawElementsBaseVertexEXT = new Command();
  private static void glDrawElementsBaseVertexEXT() {
    Command cmd = glDrawElementsBaseVertexEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
  }
  public static final Command glGetColorTableParameterfvEXT = new Command();
  private static void glGetColorTableParameterfvEXT() {
    Command cmd = glGetColorTableParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_paletted_texture;
  }
  public static final Command glRasterSamplesEXT = new Command();
  private static void glRasterSamplesEXT() {
    Command cmd = glRasterSamplesEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("fixedsamplelocations", GLboolean, Boolean);
    cmd.extension = GL_NV_framebuffer_mixed_samples;
  }
  public static final Command glNormalStream3dATI = new Command();
  private static void glNormalStream3dATI() {
    Command cmd = glNormalStream3dATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glGetVertexAttribdvNV = new Command();
  private static void glGetVertexAttribdvNV() {
    Command cmd = glGetVertexAttribdvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetProgramLocalParameterdvARB = new Command();
  private static void glGetProgramLocalParameterdvARB() {
    Command cmd = glGetProgramLocalParameterdvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glIsSyncAPPLE = new Command();
  private static void glIsSyncAPPLE() {
    Command cmd = glIsSyncAPPLE;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_APPLE_sync;
  }
  public static final Command glGetQueryObjectuivARB = new Command();
  private static void glGetQueryObjectuivARB() {
    Command cmd = glGetQueryObjectuivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_occlusion_query;
  }
  public static final Command glProgramUniformMatrix3x4fv = new Command();
  private static void glProgramUniformMatrix3x4fv() {
    Command cmd = glProgramUniformMatrix3x4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glFramebufferReadBufferEXT = new Command();
  private static void glFramebufferReadBufferEXT() {
    Command cmd = glFramebufferReadBufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, ReadBufferMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTextureParameterfv = new Command();
  private static void glTextureParameterfv() {
    Command cmd = glTextureParameterfv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glGetMaterialxvOES = new Command();
  private static void glGetMaterialxvOES() {
    Command cmd = glGetMaterialxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glMultiTexCoord2dARB = new Command();
  private static void glMultiTexCoord2dARB() {
    Command cmd = glMultiTexCoord2dARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glPolygonModeNV = new Command();
  private static void glPolygonModeNV() {
    Command cmd = glPolygonModeNV;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("mode", GLenum, PolygonMode);
    cmd.extension = GL_NV_polygon_mode;
  }
  public static final Command glTextureStorageMem2DMultisampleEXT = new Command();
  private static void glTextureStorageMem2DMultisampleEXT() {
    Command cmd = glTextureStorageMem2DMultisampleEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("internalFormat", GLenum, _null_);
    cmd.addParam("fixedSampleLocations", GLboolean, Boolean);
    cmd.extension = GL_EXT_memory_object;
  }
  public static final Command glGetNamedBufferPointervEXT = new Command();
  private static void glGetNamedBufferPointervEXT() {
    Command cmd = glGetNamedBufferPointervEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glUniformMatrix3x4fv = new Command();
  private static void glUniformMatrix3x4fv() {
    Command cmd = glUniformMatrix3x4fv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
  }
  public static final Command glGetTexEnvxv = new Command();
  private static void glGetTexEnvxv() {
    Command cmd = glGetTexEnvxv;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glCompressedTexImage3D = new Command();
  private static void glCompressedTexImage3D() {
    Command cmd = glCompressedTexImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glMultiTexCoord1hvNV = new Command();
  private static void glMultiTexCoord1hvNV() {
    Command cmd = glMultiTexCoord1hvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_half_float;
  }
  public static final Command glUnmapBuffer = new Command();
  private static void glUnmapBuffer() {
    Command cmd = glUnmapBuffer;
    cmd.returnGroup = Boolean;
    cmd.addParam("target", GLenum, BufferTargetARB);
  }
  public static final Command glMultiTexParameterIuivEXT = new Command();
  private static void glMultiTexParameterIuivEXT() {
    Command cmd = glMultiTexParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetnTexImage = new Command();
  private static void glGetnTexImage() {
    Command cmd = glGetnTexImage;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glReadnPixelsEXT = new Command();
  private static void glReadnPixelsEXT() {
    Command cmd = glReadnPixelsEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_EXT_robustness;
  }
  public static final Command glCopyMultiTexSubImage1DEXT = new Command();
  private static void glCopyMultiTexSubImage1DEXT() {
    Command cmd = glCopyMultiTexSubImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetConvolutionFilter = new Command();
  private static void glGetConvolutionFilter() {
    Command cmd = glGetConvolutionFilter;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glConservativeRasterParameteriNV = new Command();
  private static void glConservativeRasterParameteriNV() {
    Command cmd = glConservativeRasterParameteriNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_conservative_raster_pre_snap_triangles;
  }
  public static final Command glEnableIndexedEXT = new Command();
  private static void glEnableIndexedEXT() {
    Command cmd = glEnableIndexedEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glUniformMatrix3x4dv = new Command();
  private static void glUniformMatrix3x4dv() {
    Command cmd = glUniformMatrix3x4dv;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_ARB_gpu_shader_fp64;
  }
  public static final Command glPointParameterfARB = new Command();
  private static void glPointParameterfARB() {
    Command cmd = glPointParameterfARB;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_point_parameters;
  }
  public static final Command glGetClipPlanex = new Command();
  private static void glGetClipPlanex() {
    Command cmd = glGetClipPlanex;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
  }
  public static final Command glMultiTexCoord4sARB = new Command();
  private static void glMultiTexCoord4sARB() {
    Command cmd = glMultiTexCoord4sARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glGetnCompressedTexImage = new Command();
  private static void glGetnCompressedTexImage() {
    Command cmd = glGetnCompressedTexImage;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glNormalStream3ivATI = new Command();
  private static void glNormalStream3ivATI() {
    Command cmd = glNormalStream3ivATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glVertexAttribLFormatNV = new Command();
  private static void glVertexAttribLFormatNV() {
    Command cmd = glVertexAttribLFormatNV;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_NV_vertex_attrib_integer_64bit;
  }
  public static final Command glShaderOp2EXT = new Command();
  private static void glShaderOp2EXT() {
    Command cmd = glShaderOp2EXT;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_EXT_vertex_shader;
  }
  public static final Command glGetActiveSubroutineName = new Command();
  private static void glGetActiveSubroutineName() {
    Command cmd = glGetActiveSubroutineName;
    cmd.returnGroup = _null_;
    cmd.addParam("shadertype", GLenum, _null_);
    cmd.extension = GL_ARB_shader_subroutine;
  }
  public static final Command glGetClipPlanef = new Command();
  private static void glGetClipPlanef() {
    Command cmd = glGetClipPlanef;
    cmd.returnGroup = _null_;
    cmd.addParam("plane", GLenum, _null_);
  }
  public static final Command glNamedProgramStringEXT = new Command();
  private static void glNamedProgramStringEXT() {
    Command cmd = glNamedProgramStringEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramUniformMatrix4fvEXT = new Command();
  private static void glProgramUniformMatrix4fvEXT() {
    Command cmd = glProgramUniformMatrix4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("transpose", GLboolean, Boolean);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glMatrixFrustumEXT = new Command();
  private static void glMatrixFrustumEXT() {
    Command cmd = glMatrixFrustumEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexCoordP1ui = new Command();
  private static void glTexCoordP1ui() {
    Command cmd = glTexCoordP1ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glCompressedTexImage1D = new Command();
  private static void glCompressedTexImage1D() {
    Command cmd = glCompressedTexImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glGetTexEnvxvOES = new Command();
  private static void glGetTexEnvxvOES() {
    Command cmd = glGetTexEnvxvOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glStencilOpSeparate = new Command();
  private static void glStencilOpSeparate() {
    Command cmd = glStencilOpSeparate;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, StencilFaceDirection);
    cmd.addParam("sfail", GLenum, StencilOp);
    cmd.addParam("dpfail", GLenum, StencilOp);
    cmd.addParam("dppass", GLenum, StencilOp);
  }
  public static final Command glPixelTransformParameterfEXT = new Command();
  private static void glPixelTransformParameterfEXT() {
    Command cmd = glPixelTransformParameterfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_pixel_transform;
  }
  public static final Command glConvolutionParameterfEXT = new Command();
  private static void glConvolutionParameterfEXT() {
    Command cmd = glConvolutionParameterfEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("pname", GLenum, ConvolutionParameterEXT);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glGetFloati_vOES = new Command();
  private static void glGetFloati_vOES() {
    Command cmd = glGetFloati_vOES;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_OES_viewport_array;
  }
  public static final Command glGetProgramLocalParameterIivNV = new Command();
  private static void glGetProgramLocalParameterIivNV() {
    Command cmd = glGetProgramLocalParameterIivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_gpu_program4;
  }
  public static final Command glGetMinmax = new Command();
  private static void glGetMinmax() {
    Command cmd = glGetMinmax;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("reset", GLboolean, Boolean);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_ARB_imaging;
  }
  public static final Command glSetFenceNV = new Command();
  private static void glSetFenceNV() {
    Command cmd = glSetFenceNV;
    cmd.returnGroup = _null_;
    cmd.addParam("condition", GLenum, _null_);
    cmd.extension = GL_NV_fence;
  }
  public static final Command glCompressedTexImage2D = new Command();
  private static void glCompressedTexImage2D() {
    Command cmd = glCompressedTexImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, InternalFormat);
  }
  public static final Command glMultiTexCoord4dvARB = new Command();
  private static void glMultiTexCoord4dvARB() {
    Command cmd = glMultiTexCoord4dvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_multitexture;
  }
  public static final Command glLoadProgramNV = new Command();
  private static void glLoadProgramNV() {
    Command cmd = glLoadProgramNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glGetTextureParameterIuivEXT = new Command();
  private static void glGetTextureParameterIuivEXT() {
    Command cmd = glGetTextureParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, GetTextureParameter);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCopyPixels = new Command();
  private static void glCopyPixels() {
    Command cmd = glCopyPixels;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, PixelCopyType);
  }
  public static final Command glConvolutionParameterfvEXT = new Command();
  private static void glConvolutionParameterfvEXT() {
    Command cmd = glConvolutionParameterfvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("pname", GLenum, ConvolutionParameterEXT);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glNamedProgramLocalParameterI4iEXT = new Command();
  private static void glNamedProgramLocalParameterI4iEXT() {
    Command cmd = glNamedProgramLocalParameterI4iEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glTexStorage1DEXT = new Command();
  private static void glTexStorage1DEXT() {
    Command cmd = glTexStorage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_storage;
  }
  public static final Command glCopyTexSubImage3D = new Command();
  private static void glCopyTexSubImage3D() {
    Command cmd = glCopyTexSubImage3D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glGetnSeparableFilter = new Command();
  private static void glGetnSeparableFilter() {
    Command cmd = glGetnSeparableFilter;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glNormalP3ui = new Command();
  private static void glNormalP3ui() {
    Command cmd = glNormalP3ui;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev;
  }
  public static final Command glGetGraphicsResetStatusKHR = new Command();
  private static void glGetGraphicsResetStatusKHR() {
    Command cmd = glGetGraphicsResetStatusKHR;
    cmd.returnGroup = _null_;
    cmd.extension = GL_KHR_robustness;
  }
  public static final Command glIsObjectBufferATI = new Command();
  private static void glIsObjectBufferATI() {
    Command cmd = glIsObjectBufferATI;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_ATI_vertex_array_object;
  }
  public static final Command glIglooInterfaceSGIX = new Command();
  private static void glIglooInterfaceSGIX() {
    Command cmd = glIglooInterfaceSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glReadBufferNV = new Command();
  private static void glReadBufferNV() {
    Command cmd = glReadBufferNV;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_NV_read_buffer;
  }
  public static final Command glGetCombinerStageParameterfvNV = new Command();
  private static void glGetCombinerStageParameterfvNV() {
    Command cmd = glGetCombinerStageParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners2;
  }
  public static final Command glDrawElementsInstancedBaseVertexBaseInstance = new Command();
  private static void glDrawElementsInstancedBaseVertexBaseInstance() {
    Command cmd = glDrawElementsInstancedBaseVertexBaseInstance;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGenerateMipmapEXT = new Command();
  private static void glGenerateMipmapEXT() {
    Command cmd = glGenerateMipmapEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_framebuffer_object;
  }
  public static final Command glDrawRangeElementsEXT = new Command();
  private static void glDrawRangeElementsEXT() {
    Command cmd = glDrawRangeElementsEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.addParam("type", GLenum, DrawElementsType);
    cmd.extension = GL_EXT_draw_range_elements;
  }
  public static final Command glPixelStoref = new Command();
  private static void glPixelStoref() {
    Command cmd = glPixelStoref;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelStoreParameter);
  }
  public static final Command glIsFramebufferOES = new Command();
  private static void glIsFramebufferOES() {
    Command cmd = glIsFramebufferOES;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_OES_framebuffer_object;
  }
  public static final Command glStencilFuncSeparate = new Command();
  private static void glStencilFuncSeparate() {
    Command cmd = glStencilFuncSeparate;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, StencilFaceDirection);
    cmd.addParam("func", GLenum, StencilFunction);
  }
  public static final Command glGetProgramEnvParameterdvARB = new Command();
  private static void glGetProgramEnvParameterdvARB() {
    Command cmd = glGetProgramEnvParameterdvARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glPixelStorei = new Command();
  private static void glPixelStorei() {
    Command cmd = glPixelStorei;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelStoreParameter);
  }
  public static final Command glCheckNamedFramebufferStatusEXT = new Command();
  private static void glCheckNamedFramebufferStatusEXT() {
    Command cmd = glCheckNamedFramebufferStatusEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetInteger64i_v = new Command();
  private static void glGetInteger64i_v() {
    Command cmd = glGetInteger64i_v;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glClearTexSubImageEXT = new Command();
  private static void glClearTexSubImageEXT() {
    Command cmd = glClearTexSubImageEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("format", GLenum, _null_);
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glGetTextureLevelParameteriv = new Command();
  private static void glGetTextureLevelParameteriv() {
    Command cmd = glGetTextureLevelParameteriv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_direct_state_access;
  }
  public static final Command glPixelStorex = new Command();
  private static void glPixelStorex() {
    Command cmd = glPixelStorex;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_OES_fixed_point;
  }
  public static final Command glCopyTexSubImage1D = new Command();
  private static void glCopyTexSubImage1D() {
    Command cmd = glCopyTexSubImage1D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glDrawCommandsNV = new Command();
  private static void glDrawCommandsNV() {
    Command cmd = glDrawCommandsNV;
    cmd.returnGroup = _null_;
    cmd.addParam("primitiveMode", GLenum, _null_);
    cmd.extension = GL_NV_command_list;
  }
  public static final Command glPathColorGenNV = new Command();
  private static void glPathColorGenNV() {
    Command cmd = glPathColorGenNV;
    cmd.returnGroup = _null_;
    cmd.addParam("color", GLenum, _null_);
    cmd.addParam("genMode", GLenum, _null_);
    cmd.addParam("colorFormat", GLenum, _null_);
    cmd.extension = GL_NV_path_rendering;
  }
  public static final Command glTexBufferEXT = new Command();
  private static void glTexBufferEXT() {
    Command cmd = glTexBufferEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_texture_buffer_object;
  }
  public static final Command glMatrixMultTransposefEXT = new Command();
  private static void glMatrixMultTransposefEXT() {
    Command cmd = glMatrixMultTransposefEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, MatrixMode);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glMultiDrawRangeElementArrayAPPLE = new Command();
  private static void glMultiDrawRangeElementArrayAPPLE() {
    Command cmd = glMultiDrawRangeElementArrayAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_APPLE_element_array;
  }
  public static final Command glSpriteParameterivSGIX = new Command();
  private static void glSpriteParameterivSGIX() {
    Command cmd = glSpriteParameterivSGIX;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_SGIX_sprite;
  }
  public static final Command glGetCombinerInputParameterivNV = new Command();
  private static void glGetCombinerInputParameterivNV() {
    Command cmd = glGetCombinerInputParameterivNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("portion", GLenum, _null_);
    cmd.addParam("variable", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners;
  }
  public static final Command glGetProgramPipelineiv = new Command();
  private static void glGetProgramPipelineiv() {
    Command cmd = glGetProgramPipelineiv;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_separate_shader_objects;
  }
  public static final Command glRenderbufferStorageMultisampleCoverageNV = new Command();
  private static void glRenderbufferStorageMultisampleCoverageNV() {
    Command cmd = glRenderbufferStorageMultisampleCoverageNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.extension = GL_NV_framebuffer_multisample_coverage;
  }
  public static final Command glGetNamedFramebufferAttachmentParameterivEXT = new Command();
  private static void glGetNamedFramebufferAttachmentParameterivEXT() {
    Command cmd = glGetNamedFramebufferAttachmentParameterivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCopyTexSubImage2D = new Command();
  private static void glCopyTexSubImage2D() {
    Command cmd = glCopyTexSubImage2D;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glDrawRangeElementArrayAPPLE = new Command();
  private static void glDrawRangeElementArrayAPPLE() {
    Command cmd = glDrawRangeElementArrayAPPLE;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, PrimitiveType);
    cmd.extension = GL_APPLE_element_array;
  }
  public static final Command glGetProgramivARB = new Command();
  private static void glGetProgramivARB() {
    Command cmd = glGetProgramivARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ARB_vertex_program;
  }
  public static final Command glGetPointervKHR = new Command();
  private static void glGetPointervKHR() {
    Command cmd = glGetPointervKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glTextureParameterIuivEXT = new Command();
  private static void glTextureParameterIuivEXT() {
    Command cmd = glTextureParameterIuivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glProgramParameteriEXT = new Command();
  private static void glProgramParameteriEXT() {
    Command cmd = glProgramParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_separate_shader_objects;
  }
  public static final Command glPointSizePointerOES = new Command();
  private static void glPointSizePointerOES() {
    Command cmd = glPointSizePointerOES;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.extension = GL_OES_point_size_array;
  }
  public static final Command glBlendEquationi = new Command();
  private static void glBlendEquationi() {
    Command cmd = glBlendEquationi;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
  }
  public static final Command glMaterialxv = new Command();
  private static void glMaterialxv() {
    Command cmd = glMaterialxv;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
  }
  public static final Command glWindowRectanglesEXT = new Command();
  private static void glWindowRectanglesEXT() {
    Command cmd = glWindowRectanglesEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("mode", GLenum, _null_);
    cmd.extension = GL_EXT_window_rectangles;
  }
  public static final Command glGetConvolutionFilterEXT = new Command();
  private static void glGetConvolutionFilterEXT() {
    Command cmd = glGetConvolutionFilterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, ConvolutionTargetEXT);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glGetNamedProgramLocalParameterIivEXT = new Command();
  private static void glGetNamedProgramLocalParameterIivEXT() {
    Command cmd = glGetNamedProgramLocalParameterIivEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glCopyTexSubImage3DEXT = new Command();
  private static void glCopyTexSubImage3DEXT() {
    Command cmd = glCopyTexSubImage3DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
  }
  public static final Command glGetBufferParameterui64vNV = new Command();
  private static void glGetBufferParameterui64vNV() {
    Command cmd = glGetBufferParameterui64vNV;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_shader_buffer_load;
  }
  public static final Command glPNTrianglesfATI = new Command();
  private static void glPNTrianglesfATI() {
    Command cmd = glPNTrianglesfATI;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_ATI_pn_triangles;
  }
  public static final Command glGetVideoCaptureStreamdvNV = new Command();
  private static void glGetVideoCaptureStreamdvNV() {
    Command cmd = glGetVideoCaptureStreamdvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_video_capture;
  }
  public static final Command glProgramEnvParameters4fvEXT = new Command();
  private static void glProgramEnvParameters4fvEXT() {
    Command cmd = glProgramEnvParameters4fvEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
  }
  public static final Command glIsTextureEXT = new Command();
  private static void glIsTextureEXT() {
    Command cmd = glIsTextureEXT;
    cmd.returnGroup = Boolean;
    cmd.extension = GL_EXT_texture_object;
  }
  public static final Command glCreateSyncFromCLeventARB = new Command();
  private static void glCreateSyncFromCLeventARB() {
    Command cmd = glCreateSyncFromCLeventARB;
    cmd.returnGroup = _null_;
    cmd.addParam("flags", GLbitfield, _null_);
    cmd.extension = GL_ARB_cl_event;
  }
  public static final Command glSeparableFilter2DEXT = new Command();
  private static void glSeparableFilter2DEXT() {
    Command cmd = glSeparableFilter2DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, SeparableTargetEXT);
    cmd.addParam("internalformat", GLenum, InternalFormat);
    cmd.addParam("format", GLenum, PixelFormat);
    cmd.addParam("type", GLenum, PixelType);
    cmd.extension = GL_EXT_convolution;
  }
  public static final Command glFramebufferTextureARB = new Command();
  private static void glFramebufferTextureARB() {
    Command cmd = glFramebufferTextureARB;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_ARB_geometry_shader4;
  }
  public static final Command glSecondaryColorPointer = new Command();
  private static void glSecondaryColorPointer() {
    Command cmd = glSecondaryColorPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, ColorPointerType);
  }
  public static final Command glAlphaFragmentOp2ATI = new Command();
  private static void glAlphaFragmentOp2ATI() {
    Command cmd = glAlphaFragmentOp2ATI;
    cmd.returnGroup = _null_;
    cmd.addParam("op", GLenum, _null_);
    cmd.extension = GL_ATI_fragment_shader;
  }
  public static final Command glMultiTexParameteriEXT = new Command();
  private static void glMultiTexParameteriEXT() {
    Command cmd = glMultiTexParameteriEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("texunit", GLenum, _null_);
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("pname", GLenum, TextureParameterName);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glGetQueryObjecti64vEXT = new Command();
  private static void glGetQueryObjecti64vEXT() {
    Command cmd = glGetQueryObjecti64vEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_EXT_timer_query;
  }
  public static final Command glPixelTransferf = new Command();
  private static void glPixelTransferf() {
    Command cmd = glPixelTransferf;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTransferParameter);
  }
  public static final Command glCompressedTextureImage1DEXT = new Command();
  private static void glCompressedTextureImage1DEXT() {
    Command cmd = glCompressedTextureImage1DEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, TextureTarget);
    cmd.addParam("internalformat", GLenum, _null_);
    cmd.extension = GL_EXT_direct_state_access;
  }
  public static final Command glPixelTransferi = new Command();
  private static void glPixelTransferi() {
    Command cmd = glPixelTransferi;
    cmd.returnGroup = _null_;
    cmd.addParam("pname", GLenum, PixelTransferParameter);
  }
  public static final Command glFogCoordPointer = new Command();
  private static void glFogCoordPointer() {
    Command cmd = glFogCoordPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, FogPointerTypeEXT);
  }
  public static final Command glFramebufferTextureMultiviewOVR = new Command();
  private static void glFramebufferTextureMultiviewOVR() {
    Command cmd = glFramebufferTextureMultiviewOVR;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.extension = GL_OVR_multiview;
  }
  public static final Command glPushDebugGroupKHR = new Command();
  private static void glPushDebugGroupKHR() {
    Command cmd = glPushDebugGroupKHR;
    cmd.returnGroup = _null_;
    cmd.addParam("source", GLenum, _null_);
    cmd.extension = GL_KHR_debug;
  }
  public static final Command glVertexAttribIPointer = new Command();
  private static void glVertexAttribIPointer() {
    Command cmd = glVertexAttribIPointer;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
  }
  public static final Command glVertexStream1dvATI = new Command();
  private static void glVertexStream1dvATI() {
    Command cmd = glVertexStream1dvATI;
    cmd.returnGroup = _null_;
    cmd.addParam("stream", GLenum, _null_);
    cmd.extension = GL_ATI_vertex_streams;
  }
  public static final Command glFramebufferRenderbuffer = new Command();
  private static void glFramebufferRenderbuffer() {
    Command cmd = glFramebufferRenderbuffer;
    cmd.returnGroup = _null_;
    cmd.addParam("target", GLenum, _null_);
    cmd.addParam("attachment", GLenum, _null_);
    cmd.addParam("renderbuffertarget", GLenum, _null_);
    cmd.extension = GL_ARB_framebuffer_object;
  }
  public static final Command glCombinerStageParameterfvNV = new Command();
  private static void glCombinerStageParameterfvNV() {
    Command cmd = glCombinerStageParameterfvNV;
    cmd.returnGroup = _null_;
    cmd.addParam("stage", GLenum, _null_);
    cmd.addParam("pname", GLenum, _null_);
    cmd.extension = GL_NV_register_combiners2;
  }
  public static final Command glAreProgramsResidentNV = new Command();
  private static void glAreProgramsResidentNV() {
    Command cmd = glAreProgramsResidentNV;
    cmd.returnGroup = Boolean;
    cmd.addParam("residences", GLboolean, Boolean);
    cmd.extension = GL_NV_vertex_program;
  }
  public static final Command glActiveTexture = new Command();
  private static void glActiveTexture() {
    Command cmd = glActiveTexture;
    cmd.returnGroup = _null_;
    cmd.addParam("texture", GLenum, _null_);
  }
  public static final Command glVertexAttribFormat = new Command();
  private static void glVertexAttribFormat() {
    Command cmd = glVertexAttribFormat;
    cmd.returnGroup = _null_;
    cmd.addParam("type", GLenum, _null_);
    cmd.addParam("normalized", GLboolean, Boolean);
    cmd.extension = GL_ARB_vertex_attrib_binding;
  }
  public static final Command glDisableClientState = new Command();
  private static void glDisableClientState() {
    Command cmd = glDisableClientState;
    cmd.returnGroup = _null_;
    cmd.addParam("array", GLenum, EnableCap);
  }
  public static final Command glBindMaterialParameterEXT = new Command();
  private static void glBindMaterialParameterEXT() {
    Command cmd = glBindMaterialParameterEXT;
    cmd.returnGroup = _null_;
    cmd.addParam("face", GLenum, MaterialFace);
    cmd.addParam("value", GLenum, MaterialParameter);
    cmd.extension = GL_EXT_vertex_shader;
  }
  static {
    _null_0();
    _null_1();
    _null_2();
    _null_3();
    _null_4();
    _null_5();
    _null_6();
    _null_7();
    _null_8();
    _null_9();
    _null_10();
    _null_11();
    _null_12();
    _null_13();
    _null_14();
    _null_15();
    _null_16();
    _null_17();
    _null_18();
    _null_19();
    _null_20();
    _null_21();
    _null_22();
    _null_23();
    _null_24();
    _null_25();
    _null_26();
    _null_27();
    _null_28();
    _null_29();
    _null_30();
    _null_31();
    _null_32();
    _null_33();
    _null_34();
    _null_35();
    _null_36();
    _null_37();
    _null_38();
    _null_39();
    _null_40();
    _null_41();
    _null_42();
    _null_43();
    _null_44();
    _null_45();
    _null_46();
    _null_47();
    _null_48();
    _null_49();
    _null_50();
    _null_51();
    _null_52();
    _null_53();
    _null_54();
    _null_55();
    _null_56();
    _null_57();
    CullFaceMode0();
    AlphaFunction0();
    PolygonMode0();
    GetMapQuery0();
    PixelStoreResampleMode0();
    FeedBackToken0();
    TextureEnvParameter0();
    GetPointervPName0();
    MapTextureFormatINTEL0();
    ExternalHandleType0();
    TextureEnvMode0();
    RenderingMode0();
    ColorTableTargetSGI0();
    ConvolutionTargetEXT0();
    HintMode0();
    TextureParameterName0();
    TextureFilterFuncSGIS0();
    PrimitiveType0();
    AttribMask0();
    Boolean0();
    ClearBufferMask0();
    LogicOp0();
    MeshMode10();
    MeshMode20();
    MemoryBarrierMask0();
    PixelTexGenParameterNameSGIS0();
    UseProgramStageMask0();
    BufferTargetARB0();
    ColorTableParameterPNameSGI0();
    MinmaxTargetEXT0();
    PixelStoreParameter0();
    ContextFlagMask0();
    MaterialParameter0();
    ShadingModel0();
    TextureLayout0();
    LightEnvModeSGIX0();
    FrontFaceDirection0();
    TextureCoordName0();
    FogPointerTypeIBM0();
    TextureGenMode0();
    TextureGenParameter0();
    GetPName0();
    GetPName1();
    GetPName2();
    GetPName3();
    ClipPlaneName0();
    PixelMap0();
    DrawElementsType0();
    TextureMagFilter0();
    ConvolutionParameterEXT0();
    FogMode0();
    StringName0();
    PixelCopyType0();
    DataType0();
    GetTextureParameter0();
    ListNameType0();
    GetConvolutionParameter0();
    PixelTexGenMode0();
    SemaphoreParameterName0();
    BlendingFactorSrc0();
    MapTarget0();
    NormalPointerType0();
    ClientAttribMask0();
    FragmentLightModelParameterSGIX0();
    ContextProfileMask0();
    AccumOp0();
    ColorMaterialFace0();
    GetColorTableParameterPNameSGI0();
    MemoryObjectParameterName0();
    FogCoordinatePointerType0();
    LightParameter0();
    TexCoordPointerType0();
    HistogramTargetEXT0();
    BufferUsageARB0();
    BlendingFactorDest0();
    ListMode0();
    MapBufferUsageMask0();
    FogParameter0();
    FeedbackType0();
    LightModelParameter0();
    InterleavedArrayFormat0();
    OcclusionQueryEventMaskAMD0();
    ReadBufferMode0();
    PixelFormat0();
    GetMinmaxParameterPNameEXT0();
    GetHistogramParameterPNameEXT0();
    MatrixMode0();
    HintTarget0();
    DepthFunction0();
    PointParameterNameSGIS0();
    InternalFormat0();
    TextureWrapMode0();
    IndexPointerType0();
    LightEnvParameterSGIX0();
    VertexPointerType0();
    StencilFaceDirection0();
    TextureTarget0();
    ColorMaterialParameter0();
    TextureMinFilter0();
    BlendEquationModeEXT0();
    FramebufferFetchNoncoherent0();
    DrawBufferMode0();
    PixelStoreSubsampleRate0();
    FfdMaskSGIX0();
    LightModelColorControl0();
    ConvolutionBorderModeEXT0();
    StencilFunction0();
    TextureEnvTarget0();
    PixelType0();
    ColorPointerType0();
    EnableCap0();
    EnableCap1();
    ListParameterName0();
    LightName0();
    FogPointerTypeEXT0();
    MaterialFace0();
    GetPixelMap0();
    PixelTransferParameter0();
    SamplePatternSGIS0();
    BufferAccessARB0();
    StencilOp0();
    ErrorCode0();
    FfdTargetSGIX0();
    SeparableTargetEXT0();
    GL_EXT_discard_framebuffer();
    GL_NV_fog_distance();
    GL_EXT_read_format_bgra();
    GL_QCOM_tiled_rendering();
    GL_NV_depth_clamp();
    GL_DMP_program_binary();
    GL_NV_parameter_buffer_object();
    GL_KHR_robustness();
    GL_NV_shader_thread_group();
    GL_SGIX_fragment_lighting();
    GL_EXT_pixel_buffer_object();
    GL_APPLE_texture_format_BGRA8888();
    GL_EXT_stencil_clear_tag();
    GL_ARB_draw_indirect();
    GL_ARB_texture_float();
    GL_NV_sample_locations();
    GL_ARB_clear_texture();
    GL_HP_occlusion_test();
    GL_EXT_abgr();
    GL_NV_texture_shader();
    GL_ARB_texture_compression_bptc();
    GL_OES_point_size_array();
    GL_EXT_clip_cull_distance();
    GL_ARB_parallel_shader_compile();
    GL_EXT_draw_buffers_indexed();
    GL_NV_conditional_render();
    GL_NV_point_sprite();
    GL_WIN_phong_shading();
    GL_ATI_fragment_shader();
    GL_APPLE_flush_buffer_range();
    GL_OES_byte_coordinates();
    GL_ARB_point_sprite();
    GL_KHR_blend_equation_advanced_coherent();
    GL_SGIX_shadow_ambient();
    GL_ARB_sync();
    GL_NV_multisample_filter_hint();
    GL_EXT_color_buffer_half_float();
    GL_ANGLE_texture_usage();
    GL_EXT_rescale_normal();
    GL_NV_evaluators();
    GL_NVX_gpu_memory_info();
    GL_EXT_semaphore();
    GL_OES_packed_depth_stencil();
    GL_ARB_gpu_shader_int64();
    GL_NV_light_max_exponent();
    GL_EXT_vertex_shader();
    GL_NV_transform_feedback();
    GL_ATI_text_fragment_shader();
    GL_NV_fbo_color_attachments();
    GL_EXT_cmyka();
    GL_IMG_texture_filter_cubic();
    GL_EXT_texture_sRGB_RG8();
    GL_EXT_transform_feedback();
    GL_EXT_debug_label();
    GL_EXT_texture_sRGB_R8();
    GL_ARB_vertex_type_2_10_10_10_rev();
    GL_EXT_framebuffer_sRGB();
    GL_NV_draw_buffers();
    GL_ARB_half_float_vertex();
    GL_EXT_bgra();
    GL_NV_clip_space_w_scaling();
    GL_PGI_vertex_hints();
    GL_EXT_blend_color();
    GL_EXT_draw_buffers();
    GL_INTEL_map_texture();
    GL_ARB_provoking_vertex();
    GL_EXT_unpack_subimage();
    GL_ARB_texture_storage();
    GL_OML_interlace();
    GL_EXT_map_buffer_range();
    GL_ANGLE_program_binary();
    GL_ARB_shading_language_100();
    GL_ANGLE_depth_texture();
    GL_NV_texture_env_combine4();
    GL_ARB_compressed_texture_pixel_storage();
    GL_OES_texture_cube_map_array();
    GL_WIN_specular_fog();
    GL_ARB_framebuffer_no_attachments();
    GL_EXT_fog_coord();
    GL_OES_get_program_binary();
    GL_QCOM_alpha_test();
    GL_SUN_convolution_border_modes();
    GL_NV_alpha_to_coverage_dither_control();
    GL_NV_present_video();
    GL_ARB_texture_rectangle();
    GL_ARB_shadow_ambient();
    GL_EXT_blend_subtract();
    GL_NV_fill_rectangle();
    GL_ARB_seamless_cubemap_per_texture();
    GL_SGIS_detail_texture();
    GL_EXT_framebuffer_multisample();
    GL_NV_framebuffer_blit();
    GL_NV_framebuffer_multisample();
    GL_APPLE_texture_range();
    GL_NV_explicit_multisample();
    GL_ARB_fragment_shader();
    GL_ARB_texture_cube_map();
    GL_OES_framebuffer_object();
    GL_EXT_texture_cube_map();
    GL_ARB_get_program_binary();
    GL_EXT_shader_image_load_store();
    GL_SGIS_texture4D();
    GL_QCOM_writeonly_rendering();
    GL_EXT_texture_mirror_clamp();
    GL_S3_s3tc();
    GL_OES_vertex_array_object();
    GL_OES_stencil_wrap();
    GL_ARB_multitexture();
    GL_EXT_multisampled_render_to_texture();
    GL_NVX_linked_gpu_multicast();
    GL_ARB_robustness();
    GL_SGIX_async();
    GL_KHR_texture_compression_astc_ldr();
    GL_QCOM_binning_control();
    GL_ARB_texture_swizzle();
    GL_EXT_coordinate_frame();
    GL_NV_path_rendering();
    GL_APPLE_element_array();
    GL_ARB_separate_shader_objects();
    GL_EXT_shadow_samplers();
    GL_ARB_cl_event();
    GL_EXT_index_material();
    GL_SGIX_texture_add_env();
    GL_EXT_texture_sRGB_decode();
    GL_NV_conservative_raster();
    GL_OES_required_internalformat();
    GL_ARB_color_buffer_float();
    GL_OES_tessellation_shader();
    GL_SGIX_clipmap();
    GL_SUN_mesh_array();
    GL_OES_draw_texture();
    GL_APPLE_vertex_array_object();
    GL_EXT_semaphore_fd();
    GL_NV_framebuffer_mixed_samples();
    GL_OES_texture_float();
    GL_ARB_depth_clamp();
    GL_APPLE_rgb_422();
    GL_SGIX_ycrcb();
    GL_NV_blend_equation_advanced();
    GL_SGIX_pixel_texture();
    GL_SGIS_texture_select();
    GL_EXT_index_func();
    GL_APPLE_sync();
    GL_ATI_draw_buffers();
    GL_EXT_buffer_storage();
    GL_AMD_stencil_operation_extended();
    GL_OES_draw_buffers_indexed();
    GL_SGIX_blend_alpha_minmax();
    GL_QCOM_shader_framebuffer_fetch_noncoherent();
    GL_NV_texture_multisample();
    GL_ANGLE_framebuffer_multisample();
    GL_OES_read_format();
    GL_NV_blend_minmax_factor();
    GL_PGI_misc_hints();
    GL_VIV_shader_binary();
    GL_IBM_rasterpos_clip();
    GL_NV_geometry_program4();
    GL_NV_conservative_raster_dilate();
    GL_AMD_gpu_shader_int64();
    GL_ARB_draw_buffers();
    GL_NV_depth_nonlinear();
    GL_OES_matrix_palette();
    GL_ARB_compute_variable_group_size();
    GL_NV_texgen_reflection();
    GL_AMD_compressed_3DC_texture();
    GL_SGIX_pixel_tiles();
    GL_EXT_texture_snorm();
    GL_NV_path_rendering_shared_edge();
    GL_ARB_texture_rg();
    GL_ARB_texture_env_dot3();
    GL_ARB_conditional_render_inverted();
    GL_NV_multisample_coverage();
    GL_OES_rgb8_rgba8();
    GL_EXT_separate_specular_color();
    GL_NV_deep_texture3D();
    GL_EXT_index_array_formats();
    GL_EXT_texture_compression_s3tc_srgb();
    GL_ARB_buffer_storage();
    GL_ARB_instanced_arrays();
    GL_ARB_sample_locations();
    GL_OES_texture_mirrored_repeat();
    GL_SGIX_sprite();
    GL_NV_fragment_program();
    GL_EXT_vertex_array_bgra();
    GL_SGIX_texture_coordinate_clamp();
    GL_NV_vertex_program2_option();
    GL_NV_half_float();
    GL_EXT_occlusion_query_boolean();
    GL_ARB_vertex_attrib_binding();
    GL_ARB_texture_rgb10_a2ui();
    GL_AMD_program_binary_Z400();
    GL_SGIS_pixel_texture();
    GL_NV_copy_depth_to_color();
    GL_IMG_texture_compression_pvrtc2();
    GL_EXT_raster_multisample();
    GL_OML_resample();
    GL_ARB_shadow();
    GL_NV_pixel_data_range();
    GL_ARB_ES2_compatibility();
    GL_SGIX_interlace();
    GL_NV_viewport_array();
    GL_EXT_sRGB();
    GL_EXT_polygon_offset_clamp();
    GL_ARM_mali_shader_binary();
    GL_EXT_paletted_texture();
    GL_EXT_direct_state_access();
    GL_EXT_texture_shared_exponent();
    GL_REND_screen_coordinates();
    GL_SGIS_sharpen_texture();
    GL_EXT_blend_minmax();
    GL_EXT_polygon_offset();
    GL_SGIS_point_line_texgen();
    GL_ARB_imaging();
    GL_ARB_clip_control();
    GL_EXT_YUV_target();
    GL_SGIS_fog_function();
    GL_OES_depth24();
    GL_NV_non_square_matrices();
    GL_APPLE_specular_vector();
    GL_AMD_sample_positions();
    GL_ARB_texture_filter_minmax();
    GL_OES_blend_subtract();
    GL_ARB_point_parameters();
    GL_OES_depth32();
    GL_APPLE_fence();
    GL_SGIS_generate_mipmap();
    GL_OVR_multiview();
    GL_ATI_separate_stencil();
    GL_ARB_vertex_type_10f_11f_11f_rev();
    GL_ARB_texture_mirror_clamp_to_edge();
    GL_EXT_disjoint_timer_query();
    GL_ATI_vertex_streams();
    GL_SGIS_texture_edge_clamp();
    GL_OES_texture_compression_astc();
    GL_ARB_bindless_texture();
    GL_EXT_texture_compression_latc();
    GL_OES_vertex_type_10_10_10_2();
    GL_SGIX_shadow();
    GL_HP_image_transform();
    GL_HP_convolution_border_modes();
    GL_EXT_shader_pixel_local_storage2();
    GL_EXT_texture_rg();
    GL_NV_fence();
    GL_SGIS_texture_lod();
    GL_EXT_texture_storage();
    GL_ARB_texture_buffer_object();
    GL_NV_register_combiners2();
    GL_OES_depth_texture();
    GL_ARB_map_buffer_range();
    GL_INGR_color_clamp();
    GL_QCOM_framebuffer_foveated();
    GL_SGIS_multisample();
    GL_EXT_texture_compression_rgtc();
    GL_ARB_texture_buffer_object_rgb32();
    GL_ARB_texture_env_combine();
    GL_ARB_framebuffer_object();
    GL_NV_fragment_program2();
    GL_AMD_compressed_ATC_texture();
    GL_EXT_vertex_weighting();
    GL_NV_robustness_video_memory_purge();
    GL_EXT_texture3D();
    GL_EXT_semaphore_win32();
    GL_EXT_422_pixels();
    GL_OES_fixed_point();
    GL_ARB_texture_multisample();
    GL_IMG_read_format();
    GL_EXT_clip_volume_hint();
    GL_ARB_ES3_1_compatibility();
    GL_SGIX_reference_plane();
    GL_OES_compressed_ETC1_RGB8_texture();
    GL_ARB_texture_stencil8();
    GL_EXT_draw_range_elements();
    GL_ARB_blend_func_extended();
    GL_EXT_render_snorm();
    GL_ARB_texture_filter_anisotropic();
    GL_SUN_global_alpha();
    GL_IBM_vertex_array_lists();
    GL_NV_register_combiners();
    GL_EXT_geometry_shader();
    GL_EXT_texture_compression_dxt1();
    GL_INTEL_parallel_arrays();
    GL_NV_packed_depth_stencil();
    GL_APPLE_vertex_array_range();
    GL_ARB_shader_subroutine();
    GL_SGIX_async_histogram();
    GL_NV_compute_program5();
    GL_ARB_compute_shader();
    GL_OES_vertex_half_float();
    GL_OES_surfaceless_context();
    GL_EXT_pixel_transform();
    GL_OES_primitive_bounding_box();
    GL_SGIX_fog_offset();
    GL_APPLE_clip_distance();
    GL_SGI_color_table();
    GL_EXT_secondary_color();
    GL_NV_instanced_arrays();
    GL_EXT_stencil_wrap();
    GL_IMG_framebuffer_downsample();
    GL_EXT_protected_textures();
    GL_ARB_tessellation_shader();
    GL_SGIX_async_pixel();
    GL_ARB_fragment_program();
    GL_INGR_interlace_read();
    GL_OES_blend_equation_separate();
    GL_ARB_shading_language_include();
    GL_SGIX_calligraphic_fragment();
    GL_ARB_uniform_buffer_object();
    GL_ARB_texture_compression_rgtc();
    GL_ARB_vertex_array_bgra();
    GL_IMG_shader_binary();
    GL_SGI_texture_color_table();
    GL_SGIX_list_priority();
    GL_ARB_enhanced_layouts();
    GL_ARB_occlusion_query();
    GL_ARB_cull_distance();
    GL_NV_shadow_samplers_array();
    GL_AMD_debug_output();
    GL_OES_EGL_image_external();
    GL_EXT_x11_sync_object();
    GL_APPLE_ycbcr_422();
    GL_OES_texture_stencil8();
    GL_KHR_no_error();
    GL_NV_fragment_coverage_to_color();
    GL_NV_copy_buffer();
    GL_APPLE_transform_hint();
    GL_NV_video_capture();
    GL_SGIX_texture_lod_bias();
    GL_SGIX_convolution_accuracy();
    GL_NV_vertex_array_range();
    GL_EXT_cull_vertex();
    GL_SGIX_instruments();
    GL_NV_texture_rectangle();
    GL_EXT_shared_texture_palette();
    GL_ARB_occlusion_query2();
    GL_NV_depth_buffer_float();
    GL_ARB_texture_mirrored_repeat();
    GL_AMD_seamless_cubemap_per_texture();
    GL_ARB_texture_gather();
    GL_ARM_shader_framebuffer_fetch();
    GL_ATI_texture_float();
    GL_EXT_shader_framebuffer_fetch();
    GL_ARB_shader_objects();
    GL_IBM_texture_mirrored_repeat();
    GL_EXT_multiview_draw_buffers();
    GL_ANGLE_framebuffer_blit();
    GL_ANGLE_texture_compression_dxt3();
    GL_MESA_pack_invert();
    GL_QCOM_perfmon_global_mode();
    GL_AMD_interleaved_elements();
    GL_OES_point_sprite();
    GL_ARB_vertex_array_object();
    GL_EXT_memory_object_win32();
    GL_EXT_geometry_shader4();
    GL_ANGLE_texture_compression_dxt5();
    GL_EXT_stencil_two_side();
    GL_APPLE_float_pixels();
    GL_NV_shader_buffer_load();
    GL_IMG_program_binary();
    GL_NV_coverage_sample();
    GL_NV_float_buffer();
    GL_NV_texture_expand_normal();
    GL_ATI_envmap_bumpmap();
    GL_AMD_framebuffer_sample_positions();
    GL_NV_occlusion_query();
    GL_AMD_sparse_texture();
    GL_EXT_texture_norm16();
    GL_NV_shader_buffer_store();
    GL_EXT_texture_compression_s3tc();
    GL_EXT_robustness();
    GL_MESAX_texture_stack();
    GL_NV_tessellation_program5();
    GL_AMD_pinned_memory();
    GL_ARB_texture_border_clamp();
    GL_NV_blend_equation_advanced_coherent();
    GL_ARB_sample_shading();
    GL_IMG_multisampled_render_to_texture();
    GL_INTEL_conservative_rasterization();
    GL_EXT_vertex_array();
    GL_OES_texture_border_clamp();
    GL_3DFX_texture_compression_FXT1();
    GL_ARB_vertex_buffer_object();
    GL_ARB_viewport_array();
    GL_EXT_framebuffer_multisample_blit_scaled();
    GL_NV_sRGB_formats();
    GL_APPLE_vertex_program_evaluators();
    GL_ARB_depth_buffer_float();
    GL_EXT_memory_object_fd();
    GL_SUN_triangle_list();
    GL_EXT_texture_buffer();
    GL_ARB_map_buffer_alignment();
    GL_EXT_depth_bounds_test();
    GL_ATI_pn_triangles();
    GL_ARB_polygon_offset_clamp();
    GL_EXT_separate_shader_objects();
    GL_EXT_packed_pixels();
    GL_OES_texture_3D();
    GL_SGI_color_matrix();
    GL_EXT_texture_lod_bias();
    GL_DMP_shader_binary();
    GL_ARB_texture_view();
    GL_EXT_texture_perturb_normal();
    GL_NV_viewport_swizzle();
    GL_ARB_shader_image_load_store();
    GL_ARB_internalformat_query2();
    GL_ARB_explicit_uniform_location();
    GL_AMD_blend_minmax_factor();
    GL_ATI_texture_mirror_once();
    GL_EXT_texture_cube_map_array();
    GL_FJ_shader_binary_GCCSO();
    GL_IBM_cull_vertex();
    GL_IBM_static_data();
    GL_ANGLE_translated_shader_source();
    GL_SGIX_texture_multi_buffer();
    GL_AMD_gpu_shader_half_float();
    GL_AMD_vertex_shader_tessellator();
    GL_ARB_matrix_palette();
    GL_AMD_depth_clamp_separate();
    GL_EXT_memory_object();
    GL_SGIX_scalebias_hint();
    GL_ARB_pipeline_statistics_query();
    GL_OES_shader_multisample_interpolation();
    GL_SGIX_subsample();
    GL_AMD_occlusion_query_event();
    GL_APPLE_texture_packed_float();
    GL_NV_gpu_program4();
    GL_ATI_pixel_format_float();
    GL_NV_gpu_program5();
    GL_ARB_geometry_shader4();
    GL_OES_element_index_uint();
    GL_IMG_user_clip_plane();
    GL_ATI_vertex_array_object();
    GL_OES_geometry_shader();
    GL_NV_conservative_raster_pre_snap_triangles();
    GL_ARB_transpose_matrix();
    GL_MESA_ycbcr_texture();
    GL_APPLE_aux_depth_stencil();
    GL_ATI_element_array();
    GL_ARB_transform_feedback3();
    GL_ARB_transform_feedback2();
    GL_EXT_packed_depth_stencil();
    GL_APPLE_framebuffer_multisample();
    GL_ATI_texture_env_combine3();
    GL_OES_texture_storage_multisample_2d_array();
    GL_NV_uniform_buffer_unified_memory();
    GL_EXT_clip_control();
    GL_EXT_compiled_vertex_array();
    GL_EXT_primitive_bounding_box();
    GL_EXT_provoking_vertex();
    GL_SGIX_ycrcba();
    GL_OES_standard_derivatives();
    GL_EXT_texture_buffer_object();
    GL_ARB_sampler_objects();
    GL_ARB_vertex_program();
    GL_NV_gpu_multicast();
    GL_ARB_vertex_attrib_64bit();
    GL_NV_command_list();
    GL_ARB_texture_buffer_range();
    GL_ARB_direct_state_access();
    GL_EXT_texture_env_combine();
    GL_EXT_pvrtc_sRGB();
    GL_EXT_texture_object();
    GL_NV_primitive_restart();
    GL_EXT_blend_func_extended();
    GL_EXT_blend_func_separate();
    GL_AMD_query_buffer_object();
    GL_EXT_instanced_arrays();
    GL_OES_matrix_get();
    GL_ARB_gpu_shader_fp64();
    GL_IMG_texture_env_enhanced_fixed_function();
    GL_EXT_window_rectangles();
    GL_SGIS_texture_filter4();
    GL_AMD_name_gen_delete();
    GL_ARB_internalformat_query();
    GL_NV_texture_shader3();
    GL_NV_texture_shader2();
    GL_ARB_copy_buffer();
    GL_SUNX_constant_data();
    GL_NV_transform_feedback2();
    GL_EXT_tessellation_shader();
    GL_KHR_texture_compression_astc_hdr();
    GL_3DFX_multisample();
    GL_SGIX_resample();
    GL_ARB_timer_query();
    GL_NV_internalformat_sample_query();
    GL_EXT_timer_query();
    GL_EXT_point_parameters();
    GL_EXT_sRGB_write_control();
    GL_AMD_performance_monitor();
    GL_NV_vertex_array_range2();
    GL_SGIX_framezoom();
    GL_OES_texture_buffer();
    GL_ARB_half_float_pixel();
    GL_OES_blend_func_separate();
    GL_EXT_texture_view();
    GL_NV_gpu_shader5();
    GL_KHR_context_flush_control();
    GL_OES_texture_cube_map();
    GL_EXT_bindable_uniform();
    GL_EXT_framebuffer_object();
    GL_SGIX_polynomial_ffd();
    GL_OES_sample_shading();
    GL_SGIS_point_parameters();
    GL_ARB_shader_storage_buffer_object();
    GL_INTEL_performance_query();
    GL_EXT_vertex_attrib_64bit();
    GL_ARB_ES3_compatibility();
    GL_OES_mapbuffer();
    GL_SGIS_texture_color_mask();
    GL_ARB_program_interface_query();
    GL_ARB_sparse_buffer();
    GL_EXT_texture_type_2_10_10_10_REV();
    GL_NV_read_buffer();
    GL_NV_vertex_program();
    GL_EXT_texture_filter_minmax();
    GL_ARB_depth_texture();
    GL_ARB_debug_output();
    GL_SGIX_texture_scale_bias();
    GL_SUN_slice_accum();
    GL_SGIX_ir_instrument1();
    GL_KHR_blend_equation_advanced();
    GL_EXT_texture_border_clamp();
    GL_ARB_query_buffer_object();
    GL_EXT_texture_format_BGRA8888();
    GL_ANGLE_pack_reverse_row_order();
    GL_KHR_debug();
    GL_ARB_gl_spirv();
    GL_EXT_texture_filter_anisotropic();
    GL_NV_vertex_buffer_unified_memory();
    GL_ARB_seamless_cube_map();
    GL_NV_framebuffer_multisample_coverage();
    GL_ARB_gpu_shader5();
    GL_ARB_transform_feedback_overflow_query();
    GL_AMD_transform_feedback4();
    GL_ARB_texture_cube_map_array();
    GL_HP_texture_lighting();
    GL_SGIX_vertex_preclip();
    GL_ARB_shader_atomic_counters();
    GL_ARB_sparse_texture();
    GL_EXT_texture();
    GL_ARB_multisample();
    GL_QCOM_extended_get();
    GL_ARB_texture_compression();
    GL_ARB_pixel_buffer_object();
    GL_OML_subsample();
    GL_EXT_texture_compression_astc_decode_mode();
    GL_APPLE_object_purgeable();
    GL_EXT_sparse_texture();
    GL_EXT_texture_array();
    GL_EXT_texture_integer();
    GL_NV_texture_border_clamp();
    GL_ARB_vertex_blend();
    GL_IMG_texture_compression_pvrtc();
    GL_ARB_indirect_parameters();
    GL_EXT_texture_env_dot3();
    GL_EXT_blend_equation_separate();
    GL_ARB_spirv_extensions();
    GL_EXT_framebuffer_blit();
    GL_EXT_gpu_shader4();
    GL_ARB_vertex_shader();
    GL_KHR_parallel_shader_compile();
    GL_ARB_stencil_texturing();
    GL_NV_polygon_mode();
    GL_APPLE_client_storage();
    GL_ARB_ES3_2_compatibility();
    GL_EXT_texture_sRGB();
    GL_OES_texture_view();
    GL_EXT_convolution();
    GL_ANGLE_instanced_arrays();
    GL_EXT_shader_pixel_local_storage();
    GL_NV_pixel_buffer_object();
    GL_EXT_texture_swizzle();
    GL_SGIX_depth_texture();
    GL_OES_texture_half_float();
    GL_EXT_histogram();
    GL_EXT_light_texture();
    GL_EXT_packed_float();
    GL_NV_vertex_program4();
    GL_NV_vertex_program3();
    GL_NV_shadow_samplers_cube();
    GL_ATI_meminfo();
    GL_OES_compressed_paletted_texture();
    GL_NV_vdpau_interop();
    GL_ARM_mali_program_binary();
    GL_NV_texgen_emboss();
    GL_OES_stencil8();
    GL_EXT_multisample();
    GL_EXT_multisampled_compatibility();
    GL_APPLE_texture_max_level();
    GL_OES_stencil4();
    GL_OES_stencil1();
    GL_APPLE_row_bytes();
    GL_ARB_framebuffer_sRGB();
    GL_OES_viewport_array();
    GL_EXT_texture_compression_bptc();
    GL_NV_vertex_attrib_integer_64bit();
    GL_SGIS_texture_border_clamp();
    glMultiTexImage3DEXT();
    glCheckFramebufferStatusOES();
    glTextureMaterialEXT();
    glBufferAddressRangeNV();
    glNamedFramebufferParameteri();
    glClipPlanex();
    glCopyColorSubTable();
    glNamedBufferData();
    glPixelTransformParameteriEXT();
    glProgramEnvParameterI4ivNV();
    glTexBufferRangeEXT();
    glGetTextureLevelParameterivEXT();
    glGetQueryBufferObjectiv();
    glGetImageTransformParameterivHP();
    glFragmentLightModeliSGIX();
    glMultiTexCoord2hNV();
    glVertexStream1svATI();
    glImportSemaphoreWin32NameEXT();
    glGetStringi();
    glGetPixelTexGenParameterfvSGIS();
    glClipControlEXT();
    glClipPlanef();
    glGetPathSpacingNV();
    glClearNamedBufferDataEXT();
    glGetnMapfv();
    glMultiTexGenfEXT();
    glClearTexImageEXT();
    glGetTextureParameterIivEXT();
    glGetMapParameterivNV();
    glImportMemoryWin32HandleEXT();
    glCoverFillPathNV();
    glDrawCommandsAddressNV();
    glMapBufferARB();
    glInterleavedArrays();
    glGetProgramResourceiv();
    glMemoryObjectParameterivEXT();
    glMatrixMode();
    glGetColorTableSGI();
    glGetObjectBufferivATI();
    glNamedFramebufferTexture3DEXT();
    glGetnMapdv();
    glConvolutionFilter1DEXT();
    glCopyImageSubDataEXT();
    glGetUniformSubroutineuiv();
    glCompressedTextureImage3DEXT();
    glIsStateNV();
    glSamplerParameterIiv();
    glGetShaderiv();
    glVariantPointerEXT();
    glProgramUniformMatrix3x2fvEXT();
    glGetIntegerui64vNV();
    glColorMask();
    glMultiDrawElementsIndirect();
    glBufferStorageEXT();
    glMultiTexCoordP3ui();
    glTexEnviv();
    glGetCompressedTexImage();
    glPathGlyphIndexRangeNV();
    glProgramParameter4fvNV();
    glResetMinmaxEXT();
    glBindTransformFeedbackNV();
    glMultiTexCoord3sv();
    glPixelTexGenParameteriSGIS();
    glBeginQuery();
    glGetFloati_v();
    glBindTexture();
    glIsEnabledi();
    glGetDebugMessageLog();
    glPointParameterxvOES();
    glPixelTexGenParameterfvSGIS();
    glPathCoordsNV();
    glGetIntegerIndexedvEXT();
    glCheckNamedFramebufferStatus();
    glMultiTexEnvivEXT();
    glTestFenceNV();
    glTextureBuffer();
    glObjectUnpurgeableAPPLE();
    glBindVideoCaptureStreamTextureNV();
    glBlendFuncSeparateINGR();
    glIsPathNV();
    glGetMemoryObjectParameterivEXT();
    glMatrixOrthoEXT();
    glMultiDrawElementsBaseVertexEXT();
    glGetnMapiv();
    glTexEnvfv();
    glUniformMatrix3dv();
    glCoverStrokePathNV();
    glNamedFramebufferRenderbuffer();
    glNamedFramebufferTextureLayerEXT();
    glSecondaryColorP3uiv();
    glTexStorage1D();
    glTextureStorageMem3DMultisampleEXT();
    glGetPointerv();
    glCompressedMultiTexSubImage3DEXT();
    glTexGenxOES();
    glMultiTexSubImage1DEXT();
    glUniformMatrix3fv();
    glTexStorage2D();
    glEnableClientStateiEXT();
    glMultiTexCoord1bvOES();
    glTexStorage3D();
    glVDPAUSurfaceAccessNV();
    glIsMemoryObjectEXT();
    glGetProgramResourceLocationIndexEXT();
    glGetActiveSubroutineUniformiv();
    glEnableVertexArrayEXT();
    glFlushPixelDataRangeNV();
    glMultiTexCoord3iARB();
    glResetMinmax();
    glGetTransformFeedbacki64_v();
    glMultiDrawElementsBaseVertex();
    glUniformMatrix3x2fv();
    glUseShaderProgramEXT();
    glLightxv();
    glGetColorTableParameteriv();
    glTexCoordP4ui();
    glGetMaterialfv();
    glNamedFramebufferRenderbufferEXT();
    glGetActiveUniformBlockiv();
    glGetStageIndexNV();
    glProgramUniformMatrix2fv();
    glFramebufferTexture1DEXT();
    glUseProgramStagesEXT();
    glMultiTexCoord4svARB();
    glGetMapdv();
    glTexStorageSparseAMD();
    glDrawArraysInstancedNV();
    glTexParameterf();
    glGetInteger64vAPPLE();
    glMultiTexParameterivEXT();
    glProgramUniformMatrix2x3dvEXT();
    glGetCombinerOutputParameterfvNV();
    glStencilOpSeparateATI();
    glProgramUniformMatrix2dv();
    glGetMapfv();
    glVertexStream3sATI();
    glTextureStorageMem3DEXT();
    glProgramUniformMatrix3x4dvEXT();
    glNamedFramebufferTextureLayer();
    glGetTexFilterFuncSGIS();
    glProgramLocalParameter4fvARB();
    glGetLocalConstantBooleanvEXT();
    glTestObjectAPPLE();
    glCopyTexImage2DEXT();
    glVertexStream2fATI();
    glDrawElementsInstancedBaseVertexBaseInstanceEXT();
    glGetArrayObjectfvATI();
    glMultiDrawElementsIndirectEXT();
    glProgramParameters4fvNV();
    glVertexStream1dATI();
    glMultiTexCoord1svARB();
    glProgramParameteri();
    glBindFramebufferEXT();
    glGetTexParameterIivOES();
    glMultiTexCoordP3uiv();
    glClearBufferuiv();
    glGetBufferPointervARB();
    glSampleMaskSGIS();
    glTexEnvxOES();
    glDebugMessageInsertARB();
    glGetTexBumpParameterivATI();
    glFragmentColorMaterialSGIX();
    glTexParameteri();
    glGetDetailTexFuncSGIS();
    glGetMapiv();
    glQueryCounterEXT();
    glMulticastCopyBufferSubDataNV();
    glGetPointervEXT();
    glGetDoublev();
    glTexParameterx();
    glMultiTexCoord4sv();
    glGetMaterialiv();
    glVideoCaptureStreamParameterdvNV();
    glGetSharpenTexFuncSGIS();
    glTextureViewOES();
    glPixelTransformParameterivEXT();
    glGetColorTableParameterfv();
    glGetBufferPointerv();
    glProgramLocalParameter4dARB();
    glSignalSemaphoreEXT();
    glGetTexGenivOES();
    glTextureParameterfvEXT();
    glLightx();
    glMultiTexCoord4dv();
    glPresentFrameDualFillNV();
    glGetMinmaxParameterivEXT();
    glBindBufferRange();
    glCombinerParameterfvNV();
    glPathSubCoordsNV();
    glVertexStream3fvATI();
    glLightf();
    glGetPixelTransformParameterivEXT();
    glLighti();
    glQueryObjectParameteruiAMD();
    glBlendEquationiEXT();
    glDebugMessageControlKHR();
    glVertexArrayVertexAttribIFormatEXT();
    glTextureImage3DMultisampleCoverageNV();
    glMultiTexCoord3ivARB();
    glMultiTexCoord4fv();
    glGetBufferParameteri64v();
    glTextureColorMaskSGIS();
    glGetListParameterivSGIX();
    glVertexArrayColorOffsetEXT();
    glBlendFuncSeparateEXT();
    glDebugMessageInsertAMD();
    glBeginConditionalRenderNV();
    glMultiDrawArraysIndirectCount();
    glPushClientAttrib();
    glStencilOpValueAMD();
    glNamedBufferPageCommitmentARB();
    glMultiTexGeniEXT();
    glTexBufferOES();
    glEvalMapsNV();
    glMulticastBufferSubDataNV();
    glMatrixScalefEXT();
    glMultiTexCoord4iv();
    glGetProgramStageiv();
    glGetnCompressedTexImageARB();
    glLGPUNamedBufferSubDataNVX();
    glGetLocalConstantIntegervEXT();
    glTextureSubImage3D();
    glClearTexImage();
    glEdgeFlag();
    glGetMultiTexParameterivEXT();
    glMaterialxOES();
    glTextureSubImage2D();
    glDebugMessageControl();
    glArrayObjectATI();
    glGetColorTable();
    glRenderbufferStorageMultisampleAPPLE();
    glIsProgramARB();
    glBlitFramebufferEXT();
    glProgramEnvParameterI4iNV();
    glTexSubImage4DSGIS();
    glGetProgramivNV();
    glTextureSubImage1D();
    glLightiv();
    glGetMultiTexGenfvEXT();
    glCompressedTexImage2DARB();
    glPathStringNV();
    glGetMapControlPointsNV();
    glDeformationMap3dSGIX();
    glGetPointerIndexedvEXT();
    glGetVertexAttribivNV();
    glSetLocalConstantEXT();
    glIsVertexArray();
    glTexEnvf();
    glTexEnvi();
    glFramebufferTexture2DMultisampleEXT();
    glMultiTexCoord1sARB();
    glVideoCaptureNV();
    glFogi();
    glGetnMinmax();
    glFenceSync();
    glFramebufferDrawBufferEXT();
    glFogx();
    glLightfv();
    glGetProgramPipelineivEXT();
    glProgramUniformMatrix3fvEXT();
    glGetMaterialxv();
    glFogf();
    glProgramUniformMatrix4x2fvEXT();
    glDeformSGIX();
    glStartTilingQCOM();
    glTexCoordPointerListIBM();
    glLightxvOES();
    glGetHistogramEXT();
    glFramebufferSampleLocationsfvNV();
    glPolygonMode();
    glNamedBufferStorageExternalEXT();
    glTexEnvx();
    glVertexAttribP4uiv();
    glGetQueryivARB();
    glInvalidateSubFramebuffer();
    glMultiTexCoord2fvARB();
    glDrawArraysEXT();
    glPointParameteriNV();
    glEGLImageTargetTexture2DOES();
    glFeedbackBufferxOES();
    glBufferParameteriAPPLE();
    glPatchParameteriOES();
    glBufferDataARB();
    glGetLocalConstantFloatvEXT();
    glClear();
    glEndTilingQCOM();
    glWriteMaskEXT();
    glGetFramebufferAttachmentParameteriv();
    glReadBuffer();
    glTextureImage3DEXT();
    glPixelTransferxOES();
    glDrawArraysInstanced();
    glTextureParameterIivEXT();
    glDrawBuffer();
    glProgramEnvParameterI4uiNV();
    glMultiTexRenderbufferEXT();
    glSamplerParameterIuivEXT();
    glRenderbufferStorageMultisampleEXT();
    glShaderOp3EXT();
    glIsRenderbuffer();
    glMatrixMult3x3fNV();
    glGetProgramResourceName();
    glMultiTexGendvEXT();
    glNamedRenderbufferStorageMultisampleEXT();
    glColorMaskIndexedEXT();
    glCopyTextureImage1DEXT();
    glUniformMatrix4dv();
    glGetCombinerOutputParameterivNV();
    glMatrixTranslatedEXT();
    glGetSemaphoreParameterui64vEXT();
    glVertexStream3ivATI();
    glUniformMatrix2x3fvNV();
    glVertexAttribP4ui();
    glGetVideoi64vNV();
    glMultiTexCoordP2ui();
    glTextureImage3DMultisampleNV();
    glGetTexGenxvOES();
    glMultiTexCoord2sv();
    glWaitSyncAPPLE();
    glCopyMultiTexImage2DEXT();
    glBlendEquationSeparateiARB();
    glGetProgramInterfaceiv();
    glVariantArrayObjectATI();
    glUniformMatrix4fv();
    glMultiTexCoord2xvOES();
    glGetPixelTexGenParameterivSGIS();
    glSemaphoreParameterui64vEXT();
    glImportMemoryWin32NameEXT();
    glGenSymbolsEXT();
    glTexCoordP4uiv();
    glGetFragmentMaterialfvSGIX();
    glGetTexBumpParameterfvATI();
    glSampleCoverage();
    glGetTexParameterxvOES();
    glGetBooleanIndexedvEXT();
    glMultiTexCoord3fvARB();
    glVertexStream2iATI();
    glMultiTexCoord4xOES();
    glDrawArrays();
    glNamedFramebufferParameteriEXT();
    glMatrixLoadIdentityEXT();
    glSamplerParameteri();
    glSamplerParameterf();
    glSampleCoverageARB();
    glWeightPointerARB();
    glDrawTransformFeedbackStream();
    glRenderMode();
    glTextureRangeAPPLE();
    glNormalStream3fvATI();
    glEndQueryIndexed();
    glMultiTexCoord4bOES();
    glNewList();
    glVertexStream2fvATI();
    glProgramLocalParameterI4uivNV();
    glBufferSubDataARB();
    glProgramUniformMatrix2x4dv();
    glBlitFramebufferNV();
    glFlushMappedBufferRangeAPPLE();
    glPixelMapfv();
    glGetObjectLabelKHR();
    glPushClientAttribDefaultEXT();
    glMultiTexCoord2hvNV();
    glVDPAURegisterVideoSurfaceNV();
    glGetVertexAttribdvARB();
    glUniformMatrix3x2dv();
    glStencilOp();
    glGetnMapivARB();
    glBindBuffer();
    glTexCoordP3ui();
    glVertexAttribIPointerEXT();
    glVertexArrayParameteriAPPLE();
    glProgramUniformMatrix3fv();
    glNormalPointer();
    glCompressedTexSubImage2DARB();
    glGetNamedBufferParameteri64v();
    glGetActiveUniformARB();
    glBegin();
    glEnable();
    glApplyTextureEXT();
    glMulticastGetQueryObjecti64vNV();
    glTexParameterIuivEXT();
    glTexturePageCommitmentEXT();
    glDrawArraysInstancedBaseInstanceEXT();
    glIsProgramNV();
    glTextureBufferRange();
    glBeginQueryEXT();
    glGetQueryObjectivEXT();
    glPixelTexGenParameterivSGIS();
    glGetVertexAttribLui64vARB();
    glProgramUniformMatrix3dv();
    glGetLightxv();
    glGetVertexAttribIuivEXT();
    glBlendFuncSeparateiARB();
    glNamedProgramLocalParametersI4ivEXT();
    glTextureSubImage1DEXT();
    glCompressedTextureSubImage3DEXT();
    glDrawElementsInstancedBaseInstance();
    glMatrixPopEXT();
    glFrontFace();
    glProgramUniformMatrix2x4fv();
    glUpdateObjectBufferATI();
    glAlphaFunc();
    glTextureBufferEXT();
    glDrawElementsInstancedARB();
    glMulticastBlitFramebufferNV();
    glClearNamedBufferSubData();
    glMinmaxEXT();
    glNormalStream3bATI();
    glTessellationModeAMD();
    glGetTexParameterIuiv();
    glSamplerParameterfv();
    glTexCoordP1uiv();
    glNamedBufferStorageEXT();
    glVertexAttribP1uiv();
    glTexParameterIiv();
    glMatrixLoadTransposedEXT();
    glGetVertexAttribLdvEXT();
    glSamplerParameteriv();
    glTexEnvxv();
    glGetVariantArrayObjectivATI();
    glFramebufferTextureLayerDownsampleIMG();
    glGetConvolutionParameterivEXT();
    glGetActiveUniformsiv();
    glNamedFramebufferTexture();
    glUniformMatrix3fvARB();
    glTransformPathNV();
    glMultiTexCoord3dv();
    glMap2xOES();
    glIsVariantEnabledEXT();
    glGetFramebufferParameterfvAMD();
    glExecuteProgramNV();
    glFragmentMaterialfSGIX();
    glEnablei();
    glReplacementCodePointerSUN();
    glCallLists();
    glColorMaski();
    glCopyConvolutionFilter1D();
    glMultiTexCoord3fv();
    glMultiTexCoord4fARB();
    glNamedProgramLocalParametersI4uivEXT();
    glGenNamesAMD();
    glGetIntegeri_v();
    glGetMultiTexParameterIivEXT();
    glImportSyncEXT();
    glCopyConvolutionFilter2D();
    glDisableVertexAttribAPPLE();
    glMatrixMultTransposedEXT();
    glGetBufferParameteriv();
    glDrawBuffers();
    glSharpenTexFuncSGIS();
    glSamplePatternSGIS();
    glGetInternalformatSampleivNV();
    glDebugMessageControlARB();
    glGetNamedProgramLocalParameterfvEXT();
    glStencilMaskSeparate();
    glGetVideoui64vNV();
    glDrawElementsInstancedBaseVertexEXT();
    glGetDoublei_v();
    glBlendFuncIndexedAMD();
    glMultiTexCoord3iv();
    glMultiTexCoord3dARB();
    glGetColorTableParameterivEXT();
    glGetVertexAttribfvNV();
    glDisableVertexArrayEXT();
    glGetNamedProgramStringEXT();
    glTexGendv();
    glNamedProgramLocalParameter4dEXT();
    glAcquireKeyedMutexWin32EXT();
    glGetMultiTexParameterfvEXT();
    glProgramUniformMatrix2x4fvEXT();
    glIsRenderbufferOES();
    glGetClipPlanexOES();
    glTextureParameterivEXT();
    glUniformMatrix4x3fvNV();
    glColorSubTable();
    glAreTexturesResidentEXT();
    glGetConvolutionParameteriv();
    glTestFenceAPPLE();
    glMultiTexSubImage2DEXT();
    glTexGenfv();
    glGetConvolutionParameterfv();
    glClampColor();
    glCompressedTextureImage2DEXT();
    glGetProgramStringARB();
    glVertexPointerListIBM();
    glImageTransformParameteriHP();
    glDrawElements();
    glSamplerParameterIuivOES();
    glMulticastCopyImageSubDataNV();
    glBlendFunciEXT();
    glGetMultiTexEnvfvEXT();
    glDisableiEXT();
    glFogiv();
    glBlendFunc();
    glGetFixedv();
    glTexGeniv();
    glMulticastGetQueryObjectivNV();
    glGetImageHandleNV();
    glNamedFramebufferTexture2DEXT();
    glMultiTexCoord4ivARB();
    glFramebufferTextureLayerARB();
    glGetTextureParameterIiv();
    glVertexAttribP3uiv();
    glTransformFeedbackVaryingsEXT();
    glFogfv();
    glMultiTexGenivEXT();
    glEnableiNV();
    glMultiTexCoord4hNV();
    glGetCommandHeaderNV();
    glUnmapBufferARB();
    glUnmapNamedBufferEXT();
    glGetNamedProgramLocalParameterdvEXT();
    glGetBufferParameterivARB();
    glMultiTexCoord2f();
    glMultiTexCoord2d();
    glMultiTexCoord2i();
    glReadnPixelsKHR();
    glUniformMatrix4x3dv();
    glMultiTexCoord1s();
    glDrawTransformFeedbackInstancedEXT();
    glNormalPointervINTEL();
    glUniformMatrix3x4fvNV();
    glGetPathParameterfvNV();
    glFenceSyncAPPLE();
    glGetTexGenfv();
    glIsShader();
    glMultiTexCoord1f();
    glBlendFunci();
    glMultiTexCoord1d();
    glMultiTexCoord1i();
    glClipPlanexIMG();
    glGetProgramParameterdvNV();
    glGetInternalformati64v();
    glGetNamedBufferParameteriv();
    glPathGlyphIndexArrayNV();
    glGetVariantIntegervEXT();
    glDepthFunc();
    glGetTexGeniv();
    glUniformMatrix4x3fv();
    glConvolutionFilter2DEXT();
    glDrawBuffersARB();
    glMultiTexCoord4iARB();
    glSecondaryColorFormatNV();
    glMakeBufferResidentNV();
    glCopyTexImage1D();
    glGetPixelMapxv();
    glDisableiNV();
    glVDPAUIsSurfaceNV();
    glBlendEquationSeparate();
    glGetTextureLevelParameterfvEXT();
    glImageTransformParameterivHP();
    glColorFormatNV();
    glMultiTexCoord1sv();
    glTransformFeedbackVaryingsNV();
    glSeparableFilter2D();
    glCopyTexImage2D();
    glGetPathMetricsNV();
    glProgramUniformMatrix4x3fv();
    glMultiTexCoord4s();
    glDisableClientStateIndexedEXT();
    glGetMultiTexLevelParameterivEXT();
    glMultiTexCoord4x();
    glPathGlyphsNV();
    glNamedFramebufferDrawBuffers();
    glMultiDrawElementsIndirectBindlessCountNV();
    glBindBufferARB();
    glMultiTexCoord4d();
    glTextureParameterfEXT();
    glMultiTexCoord4i();
    glDrawElementsBaseVertex();
    glMultiTexCoord4f();
    glMultiTexCoord3s();
    glFlushMappedBufferRangeEXT();
    glGetnPixelMapfv();
    glMultiTexCoord3d();
    glDiscardFramebufferEXT();
    glGetTexGendv();
    glMultiTexCoord3f();
    glProgramUniformMatrix4x3dv();
    glMultiTexCoord3i();
    glCreateShaderObjectARB();
    glMultiTexCoord2s();
    glCullParameterdvEXT();
    glVertexStream2sATI();
    glListParameterivSGIX();
    glRenderbufferStorage();
    glGetHistogramParameteriv();
    glMultiTexCoord2iv();
    glTextureStorageMem2DEXT();
    glGetListParameterfvSGIX();
    glPathStencilFuncNV();
    glAlphaFragmentOp3ATI();
    glSampleCoveragex();
    glGetInvariantBooleanvEXT();
    glGetMultiTexParameterIuivEXT();
    glGetInteger64v();
    glSamplerParameterIivOES();
    glGetPixelMapuiv();
    glGetTexParameterIuivEXT();
    glAlphaFuncQCOM();
    glGetSynciv();
    glVertexArraySecondaryColorOffsetEXT();
    glProgramParameter4dvNV();
    glMultiTexEnviEXT();
    glConservativeRasterParameterfNV();
    glBindImageTextureEXT();
    glVertexStream1fATI();
    glExtGetProgramBinarySourceQCOM();
    glImportSemaphoreFdEXT();
    glGetHistogramParameterfv();
    glMultiDrawArraysIndirectBindlessNV();
    glMulticastGetQueryObjectuivNV();
    glNamedRenderbufferStorageEXT();
    glVertexAttribIFormatNV();
    glFramebufferTextureOES();
    glMultiTexCoord4xvOES();
    glCreateShaderProgramv();
    glGetnSeparableFilterARB();
    glProgramUniformMatrix4fv();
    glGetTransformFeedbackVarying();
    glDrawBuffersATI();
    glFogxv();
    glVertexAttribLFormat();
    glColorPointer();
    glDisableIndexedEXT();
    glGetDebugMessageLogKHR();
    glTexImage4DSGIS();
    glProgramUniformMatrix4dv();
    glNamedFramebufferReadBuffer();
    glGetVideoCaptureivNV();
    glNormalStream3dvATI();
    glVertexArrayAttribLFormat();
    glTexSubImage1DEXT();
    glGetProgramSubroutineParameteruivNV();
    glGetMinmaxParameterfv();
    glMulticastGetQueryObjectui64vNV();
    glTextureBufferRangeEXT();
    glProgramBinaryOES();
    glGetLightxOES();
    glPatchParameteri();
    glMultiDrawElementsIndirectBindlessNV();
    glGetArrayObjectivATI();
    glNormalStream3svATI();
    glGetMinmaxParameteriv();
    glLightxOES();
    glGetVertexArrayPointervEXT();
    glTexPageCommitmentARB();
    glCompressedMultiTexImage1DEXT();
    glClearNamedBufferSubDataEXT();
    glGetInvariantIntegervEXT();
    glMultiTexCoord1bOES();
    glConvolutionParameterxvOES();
    glIsTransformFeedbackNV();
    glBindRenderbufferEXT();
    glFramebufferTextureFaceEXT();
    glGetMaterialxOES();
    glMultiTexCoord1xOES();
    glDrawArraysInstancedARB();
    glProgramParameters4dvNV();
    glBlendEquationSeparatei();
    glTransformFeedbackStreamAttribsNV();
    glProgramUniformMatrix2fvEXT();
    glGetPixelMapusv();
    glPixelTexGenParameterfSGIS();
    glProgramEnvParameter4dvARB();
    glGetnMapdvARB();
    glTangentPointerEXT();
    glMatrixMultdEXT();
    glDrawArraysInstancedANGLE();
    glNamedProgramLocalParameter4dvEXT();
    glCompressedTexImage3DARB();
    glMultiTexCoord2dv();
    glStencilStrokePathInstancedNV();
    glMap1d();
    glGetVertexArrayPointeri_vEXT();
    glMap1f();
    glMap2d();
    glMap2f();
    glGetProgramResourceLocation();
    glMultiTexCoord2dvARB();
    glTexCoordPointer();
    glGetHistogram();
    glBlendFunciOES();
    glGetHistogramParameterxvOES();
    glMultiTexCoord2fv();
    glVertexArrayVertexAttribLFormatEXT();
    glEdgeFlagPointerEXT();
    glEndQueryARB();
    glNamedFramebufferTextureFaceEXT();
    glVertexAttribPointerARB();
    glFogxvOES();
    glDrawRangeElementsBaseVertex();
    glGetGraphicsResetStatusEXT();
    glBeginTransformFeedback();
    glGetFinalCombinerInputParameterfvNV();
    glGetTexParameterIiv();
    glVertexArrayMultiTexCoordOffsetEXT();
    glMultiTexCoord1hNV();
    glProgramLocalParameterI4ivNV();
    glSetInvariantEXT();
    glIsQuery();
    glFogCoordPointerEXT();
    glProgramBufferParametersfvNV();
    glCombinerParameterivNV();
    glPathParameterfNV();
    glMakeNamedBufferResidentNV();
    glInvalidateNamedFramebufferSubData();
    glColorPointerListIBM();
    glIsCommandListNV();
    glGetColorTableParameterfvSGI();
    glGetTransformFeedbacki_v();
    glMultiTexCoord2svARB();
    glMultiDrawElementsIndirectCount();
    glNormalStream3sATI();
    glGenerateTextureMipmapEXT();
    glDebugMessageEnableAMD();
    glPointParameterfvSGIS();
    glLightModeliv();
    glCopyTexSubImage1DEXT();
    glVertexStream4dATI();
    glSpriteParameterfvSGIX();
    glLightModelfv();
    glConvolutionParameterxOES();
    glMultiTexCoord3xvOES();
    glBlendParameteriNV();
    glGetMultisamplefv();
    glIsQueryARB();
    glGetInternalformativ();
    glBufferSubData();
    glRenderbufferStorageMultisampleNV();
    glGetSyncivAPPLE();
    glBindTextureUnitParameterEXT();
    glTextureParameteriEXT();
    glCreateShaderProgramEXT();
    glTextureImage2DMultisampleNV();
    glGetDoubleIndexedvEXT();
    glNamedStringARB();
    glTexCoordPointervINTEL();
    glVertexArrayVertexAttribFormatEXT();
    glGetVariantArrayObjectfvATI();
    glMultiTexCoordP4ui();
    glIsRenderbufferEXT();
    glGetBooleanv();
    glEndQuery();
    glBlitFramebuffer();
    glStencilThenCoverFillPathInstancedNV();
    glUniformSubroutinesuiv();
    glIndexPointerListIBM();
    glVertexStream4dvATI();
    glVertexArrayVertexAttribLOffsetEXT();
    glBlendFuncSeparateIndexedAMD();
    glGetnTexImageARB();
    glMemoryBarrierEXT();
    glEnableClientStateIndexedEXT();
    glTexStorageMem1DEXT();
    glMultiTexCoordP2uiv();
    glCompressedTextureSubImage2DEXT();
    glTextureStorage3DMultisample();
    glTextureStorage2DEXT();
    glIsImageHandleResidentARB();
    glPresentFrameKeyedNV();
    glGetNamedBufferParameterivEXT();
    glMultiDrawArraysIndirectCountARB();
    glDisableiOES();
    glMultiTexCoord1fARB();
    glGetNamedBufferParameterui64vNV();
    glTextureImage2DEXT();
    glCheckFramebufferStatusEXT();
    glBeginConditionalRender();
    glBlendEquation();
    glGenerateMipmap();
    glTexStorage2DMultisample();
    glGetVertexArrayIndexediv();
    glVertexStream1iATI();
    glPathParameterivNV();
    glUniformMatrix4x2dv();
    glGetHandleARB();
    glGetSeparableFilterEXT();
    glProgramPathFragmentInputGenNV();
    glStencilFunc();
    glTexCoordP2uiv();
    glMultiDrawElementArrayAPPLE();
    glSecondaryColorPointerEXT();
    glSamplerParameterIivEXT();
    glGetProgramLocalParameterfvARB();
    glGetVertexAttribivARB();
    glUniformMatrix4x2fv();
    glMultiTexCoord2sARB();
    glGetActiveVaryingNV();
    glMultiDrawArrays();
    glVertexArrayTexCoordOffsetEXT();
    glCreateShader();
    glProgramUniformMatrix4x2dv();
    glTexGenfvOES();
    glMultiDrawArraysIndirect();
    glMatrixIndexPointerOES();
    glProgramLocalParameter4fARB();
    glUniformMatrix2dv();
    glMapParameterfvNV();
    glIsNameAMD();
    glGetNamedFramebufferParameteriv();
    glMultiDrawArraysIndirectAMD();
    glCopyConvolutionFilter1DEXT();
    glTexParameterxOES();
    glGetTrackMatrixivNV();
    glGetActiveAttrib();
    glProgramUniformMatrix4dvEXT();
    glBlitFramebufferANGLE();
    glGetTexParameterIuivOES();
    glMatrixTranslatefEXT();
    glUniformMatrix2fv();
    glMultiTexCoord1dvARB();
    glQueryCounter();
    glColorTableSGI();
    glGetVertexAttribIiv();
    glCopyMultiTexImage1DEXT();
    glColorPointerEXT();
    glPointParameterfvEXT();
    glBindBufferRangeNV();
    glClearNamedFramebufferfv();
    glBindVideoCaptureStreamBufferNV();
    glTextureStorage2D();
    glTexStorageMem2DMultisampleEXT();
    glFlushStaticDataIBM();
    glGetProgramStringNV();
    glGetQueryObjectuivEXT();
    glTextureStorage1D();
    glGetVertexAttribdv();
    glTextureViewEXT();
    glPathParameterfvNV();
    glBeginTransformFeedbackEXT();
    glIsImageHandleResidentNV();
    glVertexP3uiv();
    glFramebufferTextureEXT();
    glMultiTexCoord1iv();
    glColorFragmentOp3ATI();
    glProgramBufferParametersIivNV();
    glStencilThenCoverStrokePathNV();
    glDebugMessageInsertKHR();
    glReleaseKeyedMutexWin32EXT();
    glGetCompressedTexImageARB();
    glTextureStorage3D();
    glProgramUniformMatrix4x2fv();
    glBindMultiTextureEXT();
    glMapNamedBufferRange();
    glClearNamedFramebufferfi();
    glNamedRenderbufferStorageMultisample();
    glGetTexParameterIivEXT();
    glCombinerParameterfNV();
    glGetVertexAttribfv();
    glPointParameterx();
    glSampleMaskEXT();
    glCopyTextureSubImage2DEXT();
    glResetHistogram();
    glMaterialxvOES();
    glGetFinalCombinerInputParameterivNV();
    glPointParameteri();
    glPointParameterf();
    glGetnConvolutionFilterARB();
    glGetVertexAttribIivEXT();
    glTexBufferARB();
    glTextureStorage2DMultisampleEXT();
    glReadnPixelsARB();
    glTexCoordPointerEXT();
    glFragmentLightModelfSGIX();
    glLightModelxv();
    glTexStorageMem3DMultisampleEXT();
    glMapBufferRange();
    glIsFramebuffer();
    glGetVertexAttribArrayObjectfvATI();
    glGetVertexAttribiv();
    glCompressedTexSubImage1DARB();
    glCoverStrokePathInstancedNV();
    glClearNamedFramebufferiv();
    glTexStorage3DEXT();
    glGetProgramBinary();
    glElementPointerAPPLE();
    glGetQueryObjectiv();
    glIsProgramPipelineEXT();
    glColorP4uiv();
    glBindTransformFeedback();
    glPointParameterfEXT();
    glGetPathParameterivNV();
    glObjectLabel();
    glVDPAUGetSurfaceivNV();
    glVertexStream1fvATI();
    glGetTransformFeedbackiv();
    glVertexAttribParameteriAMD();
    glGetProgramResourceLocationIndex();
    glGetImageTransformParameterfvHP();
    glIsBufferARB();
    glGetVertexAttribLui64vNV();
    glProgramParameteriARB();
    glActiveStencilFaceEXT();
    glMultiTexCoord4dARB();
    glGetPixelMapfv();
    glVertexStream4svATI();
    glTexEnvxvOES();
    glNamedProgramLocalParameterI4uiEXT();
    glFogCoordFormatNV();
    glGetIntegeri_vEXT();
    glColorMaterial();
    glGetConvolutionParameterfvEXT();
    glReadnPixels();
    glCombinerInputNV();
    glVDPAURegisterOutputSurfaceNV();
    glMultiTexEnvfEXT();
    glIsProgramPipeline();
    glPathMemoryGlyphIndexArrayNV();
    glCopyImageSubDataOES();
    glBindRenderbufferOES();
    glVertexStream2ivATI();
    glMultiTexCoord3hvNV();
    glFramebufferDrawBuffersEXT();
    glNewObjectBufferATI();
    glTextureStorage3DMultisampleEXT();
    glMultiTexCoord2bvOES();
    glGetProgramEnvParameterfvARB();
    glMakeImageHandleResidentARB();
    glMultiTexCoord1dv();
    glMatrixLoadTransposefEXT();
    glGetVertexAttribLi64vNV();
    glBlendEquationiOES();
    glCopyImageSubData();
    glIsSync();
    glMatrixRotatedEXT();
    glMultiTexCoord4fvARB();
    glMultiDrawElementsEXT();
    glMap1xOES();
    glMultiTexCoord1fv();
    glIsFenceNV();
    glFramebufferTexture3DOES();
    glVertexP2ui();
    glGetFixedvOES();
    glLoadIdentityDeformationMapSGIX();
    glHintPGI();
    glBindRenderbuffer();
    glAlphaFuncxOES();
    glTexGeniOES();
    glUseProgramStages();
    glNamedBufferDataEXT();
    glProgramSubroutineParametersuivNV();
    glSecondaryColorPointerListIBM();
    glNamedFramebufferTextureEXT();
    glAccum();
    glShadeModel();
    glFragmentLightivSGIX();
    glUniformMatrix4fvARB();
    glGetVideoCaptureStreamfvNV();
    glMultiTexCoord3bvOES();
    glClearNamedBufferData();
    glFramebufferSamplePositionsfvAMD();
    glCoverFillPathInstancedNV();
    glTextureParameterIiv();
    glGetHistogramParameterfvEXT();
    glGetMultiTexLevelParameterfvEXT();
    glCopyMultiTexSubImage3DEXT();
    glUniformMatrix4x2fvNV();
    glCompressedMultiTexImage2DEXT();
    glMultiTexSubImage3DEXT();
    glMapParameterivNV();
    glProgramLocalParametersI4uivNV();
    glProgramLocalParameterI4uiNV();
    glHistogram();
    glClientActiveTexture();
    glVertexWeightPointerEXT();
    glTexFilterFuncSGIS();
    glIsEnablediEXT();
    glRenderbufferStorageMultisampleIMG();
    glGetTexEnviv();
    glGetVertexAttribIuiv();
    glHint();
    glMultiTexCoord1iARB();
    glColorPointervINTEL();
    glCompressedTexSubImage3DOES();
    glGetProgramParameterfvNV();
    glSetMultisamplefvAMD();
    glGetTextureParameterivEXT();
    glGetActiveUniform();
    glMultiDrawArraysEXT();
    glCombinerOutputNV();
    glTexImage3DOES();
    glNamedFramebufferTexture1DEXT();
    glGetMultiTexImageEXT();
    glLightModelxvOES();
    glCopyColorTable();
    glHistogramEXT();
    glTexCoordP3uiv();
    glBindImageTexture();
    glNamedProgramLocalParameter4fEXT();
    glWaitSync();
    glListParameteriSGIX();
    glGetIntegerui64i_vNV();
    glTextureRenderbufferEXT();
    glElementPointerATI();
    glVertexStream1sATI();
    glExtIsProgramBinaryQCOM();
    glProgramUniformMatrix2x3fvEXT();
    glDrawRangeElementsBaseVertexEXT();
    glGetObjectLabelEXT();
    glTextureView();
    glImportMemoryFdEXT();
    glMatrixMult3x2fNV();
    glVertexAttribP1ui();
    glLightEnviSGIX();
    glIsVertexArrayOES();
    glDrawArraysIndirect();
    glIsPointInFillPathNV();
    glTextureStorageMem1DEXT();
    glFragmentLightModelfvSGIX();
    glGetNamedFramebufferParameterivEXT();
    glGetSamplerParameterIivEXT();
    glTexGenxvOES();
    glTextureParameteriv();
    glIsTransformFeedback();
    glMapBufferRangeEXT();
    glBlendFuncSeparateiOES();
    glDrawRangeElements();
    glDrawTransformFeedbackStreamInstanced();
    glGetProgramEnvParameterIuivNV();
    glProgramUniformMatrix3x2dvEXT();
    glGetSamplerParameterIuivOES();
    glVertexP2uiv();
    glUniformMatrix2x4fv();
    glGetSamplerParameterIivOES();
    glMultiDrawElementsIndirectAMD();
    glClipPlanefOES();
    glInvalidateFramebuffer();
    glLGPUCopyImageSubDataNVX();
    glVertexStream3dvATI();
    glMultiTexGenfvEXT();
    glWaitSemaphoreEXT();
    glRenderGpuMaskNV();
    glColorTableParameterivSGI();
    glGetMultiTexEnvivEXT();
    glProgramLocalParametersI4ivNV();
    glGetMultiTexGendvEXT();
    glTextureParameterIuiv();
    glGetnColorTable();
    glIsBuffer();
    glTexSubImage2DEXT();
    glTextureNormalEXT();
    glExtTexObjectStateOverrideiQCOM();
    glBufferStorage();
    glPointParameterfSGIS();
    glShaderOp1EXT();
    glTexImage3DEXT();
    glDrawTransformFeedbackEXT();
    glTexStorage3DMultisampleOES();
    glGetVariantPointervEXT();
    glBlendEquationSeparateEXT();
    glSelectPerfMonitorCountersAMD();
    glColorP3ui();
    glMapBuffer();
    glPathCommandsNV();
    glMapNamedBufferEXT();
    glClipControl();
    glBindLightParameterEXT();
    glBindBufferBase();
    glVertexAttribArrayObjectATI();
    glGetCompressedTextureImageEXT();
    glIsOcclusionQueryNV();
    glCopyTexSubImage3DOES();
    glRenderbufferStorageEXT();
    glWeightPointerOES();
    glBlendEquationiARB();
    glMultiTexImage1DEXT();
    glFeedbackBuffer();
    glTexCoordFormatNV();
    glTexStorageMem3DEXT();
    glVertexArrayVertexAttribOffsetEXT();
    glCullFace();
    glDetailTexFuncSGIS();
    glTexGenfOES();
    glNamedBufferPageCommitmentEXT();
    glGetFramebufferAttachmentParameterivOES();
    glDisable();
    glGetFenceivNV();
    glDebugMessageInsert();
    glPixelTexGenSGIX();
    glAlphaFragmentOp1ATI();
    glBindTexGenParameterEXT();
    glColorTableEXT();
    glEnableiEXT();
    glGetTexEnvfv();
    glTexGenivOES();
    glGetProgramiv();
    glClipPlane();
    glLabelObjectEXT();
    glGetShaderPrecisionFormat();
    glMaterialf();
    glIsNamedBufferResidentNV();
    glMateriali();
    glProgramLocalParameter4dvARB();
    glVertexStream4fATI();
    glColorMaskiEXT();
    glGetQueryObjectui64v();
    glNamedRenderbufferStorage();
    glVertexStream3dATI();
    glMaterialx();
    glListParameterfvSGIX();
    glSampleMapATI();
    glConvolutionParameteriEXT();
    glAccumxOES();
    glGetClipPlane();
    glIsProgram();
    glGetDoublei_vEXT();
    glIsVertexArrayAPPLE();
    glGetPathTexGenfvNV();
    glSamplePatternEXT();
    glGetMapxvOES();
    glBindProgramARB();
    glClearBufferfv();
    glGetSamplerParameterfv();
    glClearBufferfi();
    glGetFragmentLightfvSGIX();
    glLightModeli();
    glGetTexLevelParameterfv();
    glDrawRangeElementsBaseVertexOES();
    glClearBufferiv();
    glProgramEnvParameterI4uivNV();
    glCompressedTexSubImage2D();
    glLightModelf();
    glSampleMaski();
    glMatrixPushEXT();
    glGetNamedStringivARB();
    glGetTextureParameterfv();
    glDrawElementsInstancedANGLE();
    glGetSamplerParameteriv();
    glCompressedTexSubImage1D();
    glMultiTexCoord3dvARB();
    glConvolutionParameteri();
    glConvolutionParameterf();
    glBindTextureEXT();
    glDrawElementsInstancedBaseVertex();
    glGetInvariantFloatvEXT();
    glCreateQueries();
    glBeginTransformFeedbackNV();
    glImageTransformParameterfvHP();
    glClearBufferData();
    glGetActiveAttribARB();
    glGetImageHandleARB();
    glGetFloati_vNV();
    glCompressedTexSubImage3D();
    glSwizzleEXT();
    glCopyBufferSubData();
    glMatrixMultfEXT();
    glProgramUniformMatrix4x3dvEXT();
    glGetTextureParameteriv();
    glMultiTexCoord2bOES();
    glMultiTexCoord2xOES();
    glGenerateMultiTexMipmapEXT();
    glStencilThenCoverFillPathNV();
    glVertexArrayFogCoordOffsetEXT();
    glGetQueryObjectuiv();
    glGetTexLevelParameteriv();
    glExtGetTexLevelParameterivQCOM();
    glPassTexCoordATI();
    glMatrixLoadfEXT();
    glDrawMeshArraysSUN();
    glGetVertexAttribPointervNV();
    glGetnPixelMapusvARB();
    glIsAsyncMarkerSGIX();
    glTexParameterxv();
    glProgramUniformMatrix3x4fvEXT();
    glBlendEquationEXT();
    glBlendEquationSeparateiEXT();
    glMakeImageHandleResidentNV();
    glGetFloatIndexedvEXT();
    glMultiTexCoord3sARB();
    glGetSamplerParameterIuivEXT();
    glBindBuffersRange();
    glBeginQueryIndexed();
    glFramebufferTexture3DEXT();
    glGetVideoCaptureStreamivNV();
    glStencilFillPathInstancedNV();
    glProgramUniformMatrix4x2dvEXT();
    glCopyColorSubTableEXT();
    glGetDebugMessageLogARB();
    glMultiTexCoordPointerEXT();
    glClearNamedFramebufferuiv();
    glFragmentLightfvSGIX();
    glDepthMask();
    glTexSubImage3DOES();
    glProgramVertexLimitNV();
    glTexSubImage1D();
    glDeleteNamesAMD();
    glTextureStorage1DEXT();
    glVertexPointerEXT();
    glVertexStream1ivATI();
    glColorFragmentOp1ATI();
    glGetVertexAttribArrayObjectivATI();
    glGetColorTableParameterivSGI();
    glUniformMatrix2x3fv();
    glTextureImage1DEXT();
    glGetDebugMessageLogAMD();
    glLightModelx();
    glTexSubImage2D();
    glColorTableParameterfvSGI();
    glGetQueryivEXT();
    glVertexArrayVertexOffsetEXT();
    glEdgeFlagPointerListIBM();
    glVertexStream3svATI();
    glGetNamedBufferPointerv();
    glIndexMaterialEXT();
    glMultiModeDrawArraysIBM();
    glMatrixLoad3x2fNV();
    glCompressedMultiTexSubImage2DEXT();
    glTexSubImage3D();
    glCreateTextures();
    glDrawBuffersIndexedEXT();
    glCompressedTextureSubImage1DEXT();
    glUniformMatrix2x3dv();
    glFramebufferTextureMultisampleMultiviewOVR();
    glGetNamedRenderbufferParameteriv();
    glProgramEnvParameter4dARB();
    glGetTexImage();
    glCopyTextureSubImage1DEXT();
    glFramebufferTexture1D();
    glLightModelxOES();
    glTexImage3DMultisample();
    glProgramUniformMatrix3x2dv();
    glRenderbufferStorageOES();
    glTexRenderbufferNV();
    glMatrixRotatefEXT();
    glUniformMatrix2x4dv();
    glGetColorTableEXT();
    glFlushMappedBufferRange();
    glGetTextureImageEXT();
    glBindBufferBaseNV();
    glCopyConvolutionFilter2DEXT();
    glTransformFeedbackVaryings();
    glProgramLocalParameterI4iNV();
    glIsTexture();
    glGetMapAttribParameterfvNV();
    glEnableiOES();
    glRenderbufferStorageMultisampleANGLE();
    glFramebufferTexture3D();
    glMultiTexCoordP4uiv();
    glTexParameterxvOES();
    glTexStorage2DEXT();
    glFramebufferTexture2D();
    glBlendEquationSeparateiOES();
    glTexParameterIuiv();
    glGetUnsignedBytevEXT();
    glIsSemaphoreEXT();
    glVertexStream4iATI();
    glDrawElementArrayAPPLE();
    glGetFloatv();
    glReadPixels();
    glBlendFuncSeparateiEXT();
    glGetOcclusionQueryivNV();
    glMultiTexCoord2fARB();
    glFragmentLightModelivSGIX();
    glGetFragmentMaterialivSGIX();
    glDrawElementsInstancedEXT();
    glVertexBlendEnviATI();
    glClampColorARB();
    glConvolutionFilter2D();
    glGetQueryObjectivARB();
    glGetHistogramParameterivEXT();
    glGetMapAttribParameterivNV();
    glProgramUniformMatrix3x2fv();
    glGetPathTexGenivNV();
    glBufferPageCommitmentARB();
    glBeginQueryARB();
    glConvolutionFilter1D();
    glVertexArrayIndexOffsetEXT();
    glExtGetTexSubImageQCOM();
    glImportSemaphoreWin32HandleEXT();
    glMultiTexCoord1dARB();
    glColorSubTableEXT();
    glGetVertexArrayIntegervEXT();
    glSecondaryColorP3ui();
    glColorMaskiOES();
    glIndexFormatNV();
    glCopyTexSubImage2DEXT();
    glProgramUniformMatrix3dvEXT();
    glRenderbufferStorageMultisample();
    glGetPerfMonitorCounterInfoAMD();
    glGetVertexAttribfvARB();
    glIsSampler();
    glGetQueryObjecti64v();
    glDeformationMap3fSGIX();
    glGetBufferSubDataARB();
    glDrawPixels();
    glSampleMaskIndexedNV();
    glTexParameteriv();
    glMultiTexCoord1ivARB();
    glMultiTexCoord4hvNV();
    glShaderBinary();
    glTexImage2D();
    glCoverageModulationNV();
    glTexStorage3DMultisample();
    glMultiModeDrawElementsIBM();
    glFinalCombinerInputNV();
    glMultiDrawElements();
    glTexImage3D();
    glGetSamplerParameterIuiv();
    glFramebufferRenderbufferOES();
    glNormalStream3fATI();
    glPathParameteriNV();
    glNamedBufferStorage();
    glBindBufferOffsetNV();
    glVertexAttribFormatNV();
    glBlendFuncSeparate();
    glMultiDrawElementsIndirectCountARB();
    glBufferData();
    glMapControlPointsNV();
    glTextureSubImage3DEXT();
    glTexBuffer();
    glGetPointeri_vEXT();
    glClientActiveTextureARB();
    glTexImage1D();
    glIsEnabledIndexedEXT();
    glCopyColorTableSGI();
    glIsTextureHandleResidentNV();
    glMatrixMultTranspose3x3fNV();
    glFragmentMaterialivSGIX();
    glMatrixLoadTranspose3x3fNV();
    glPointAlongPathNV();
    glGetVertexArrayIndexed64iv();
    glGetFramebufferAttachmentParameterivEXT();
    glTexImage2DMultisampleCoverageNV();
    glBufferStorageExternalEXT();
    glGetBufferPointervOES();
    glBlendEquationSeparateOES();
    glDrawBuffersNV();
    glGetnColorTableARB();
    glDrawTransformFeedback();
    glVertexPointer();
    glPathSubCommandsNV();
    glMultiTexParameterIivEXT();
    glTextureImage2DMultisampleCoverageNV();
    glMultiTexCoord3svARB();
    glCopyBufferSubDataNV();
    glBufferStorageMemEXT();
    glPointParameteriv();
    glDrawElementsInstancedBaseInstanceEXT();
    glGetProgramLocalParameterIuivNV();
    glCompressedMultiTexImage3DEXT();
    glNormalStream3iATI();
    glPushDebugGroup();
    glMultiDrawArraysIndirectBindlessCountNV();
    glGetObjectParameterivAPPLE();
    glVertexAttribLPointerEXT();
    glAlphaFuncx();
    glGetConvolutionParameterxvOES();
    glInvalidateNamedFramebufferData();
    glVertexAttribPointer();
    glCoverageMaskNV();
    glFragmentLightiSGIX();
    glBlendFunciARB();
    glMultiTexCoord2iARB();
    glConvolutionParameterivEXT();
    glFramebufferRenderbufferEXT();
    glGetUnsignedBytei_vEXT();
    glFramebufferTextureLayerEXT();
    glActiveTextureARB();
    glBlendEquationOES();
    glGenerateMipmapOES();
    glNormalP3uiv();
    glBindBufferRangeEXT();
    glPointParameterfv();
    glCoverageOperationNV();
    glNamedRenderbufferStorageMultisampleCoverageEXT();
    glMultiTexEnvfvEXT();
    glClipPlanefIMG();
    glIndexFuncEXT();
    glGetnMapfvARB();
    glClearBufferSubData();
    glCompressedTexImage3DOES();
    glGetnMinmaxARB();
    glGetQueryObjectui64vEXT();
    glGetMultiTexGenivEXT();
    glProvokingVertex();
    glGetTexLevelParameterxvOES();
    glIsVertexAttribEnabledAPPLE();
    glGetNamedFramebufferParameterfvAMD();
    glMaterialfv();
    glDrawRangeElementArrayATI();
    glEGLImageTargetRenderbufferStorageOES();
    glGetIntegerv();
    glGetVariantFloatvEXT();
    glBlendEquationSeparateIndexedAMD();
    glPNTrianglesiATI();
    glFragmentMaterialfvSGIX();
    glPixelMapuiv();
    glStencilFuncSeparateATI();
    glTextureLightEXT();
    glMatrixIndexPointerARB();
    glEnableClientState();
    glPixelMapx();
    glNormalPointerListIBM();
    glIsEnablediNV();
    glAreTexturesResident();
    glDrawTransformFeedbackInstanced();
    glGetTextureLevelParameterfv();
    glVideoCaptureStreamParameterivNV();
    glCullParameterfvEXT();
    glTexParameterfv();
    glCopyMultiTexSubImage2DEXT();
    glClientAttribDefaultEXT();
    glCheckFramebufferStatus();
    glGetLightiv();
    glListParameterfSGIX();
    glGetnPixelMapfvARB();
    glBlendEquationIndexedAMD();
    glDrawElementsInstanced();
    glMultiTexParameterfEXT();
    glEdgeFlagv();
    glGetProgramResourcefvNV();
    glGetProgramBinaryOES();
    glCopyTextureSubImage3DEXT();
    glMaterialiv();
    glMulticastWaitSyncNV();
    glMinmax();
    glVertexAttribP3ui();
    glVertexPointervINTEL();
    glBindFramebuffer();
    glMakeBufferNonResidentNV();
    glVertexStream2dvATI();
    glTransformFeedbackAttribsNV();
    glIsFenceAPPLE();
    glColorTableParameteriv();
    glDrawBuffersEXT();
    glProgramUniformMatrix2x4dvEXT();
    glCopyTexImage1DEXT();
    glCreateShaderProgramvEXT();
    glFramebufferTexture();
    glNamedProgramLocalParameters4fvEXT();
    glGetVideoivNV();
    glGetLightfv();
    glGetNamedRenderbufferParameterivEXT();
    glCompressedTextureSubImage3D();
    glGetClipPlanefOES();
    glFinishObjectAPPLE();
    glGetRenderbufferParameterivOES();
    glMultiTexGendEXT();
    glVertexArrayAttribFormat();
    glFogCoordPointerListIBM();
    glVertexArrayAttribIFormat();
    glGetPixelTransformParameterfvEXT();
    glMatrixLoad3x3fNV();
    glProgramLocalParameters4fvEXT();
    glDrawElementsBaseVertexOES();
    glMultiTexCoordP1uiv();
    glColorTableParameterfv();
    glGetVertexAttribPointerv();
    glCompressedTextureSubImage1D();
    glTexBumpParameterivATI();
    glFramebufferTexture2DOES();
    glMultiTexCoordP1ui();
    glIndexPointerEXT();
    glGetBufferSubData();
    glCompressedTextureSubImage2D();
    glDrawTransformFeedbackNV();
    glGetFragmentLightivSGIX();
    glTexSubImage3DEXT();
    glGetnPixelMapusv();
    glPathFogGenNV();
    glGetSubroutineIndex();
    glProgramStringARB();
    glIsList();
    glMultiTexCoord2ivARB();
    glColorFragmentOp2ATI();
    glFramebufferSampleLocationsfvARB();
    glGetQueryBufferObjectui64v();
    glFramebufferTexture2DMultisampleIMG();
    glGetString();
    glPathCoverDepthFuncNV();
    glGetSubroutineUniformLocation();
    glTexGenf();
    glTexGeni();
    glIsFramebufferEXT();
    glProgramUniformMatrix2dvEXT();
    glBlitNamedFramebuffer();
    glTexGend();
    glGetBooleani_v();
    glGetQueryiv();
    glGetVariantBooleanvEXT();
    glBindBufferBaseEXT();
    glVertexStream4ivATI();
    glGetnHistogram();
    glGetActiveAtomicCounterBufferiv();
    glMapNamedBufferRangeEXT();
    glProgramEnvParameter4fvARB();
    glGetVideouivNV();
    glPointParameterxv();
    glGetnPixelMapuivARB();
    glIsTextureHandleResidentARB();
    glNamedFramebufferDrawBuffer();
    glTextureStorage3DEXT();
    glGetObjectBufferfvATI();
    glEvalMesh1();
    glEvalMesh2();
    glFramebufferParameteri();
    glGetObjectParameterivARB();
    glTexImage3DMultisampleCoverageNV();
    glProgramUniformMatrix2x3fv();
    glFramebufferTextureFaceARB();
    glTexStorageMem2DEXT();
    glGetnPixelMapuiv();
    glTexCoordP2ui();
    glGetLightxvOES();
    glMultiTexCoord4bvOES();
    glIndexPointer();
    glNamedProgramLocalParameter4fvEXT();
    glClearTexSubImage();
    glFramebufferTextureLayer();
    glGetVertexAttribLdv();
    glVertexP4uiv();
    glGetTexParameterxv();
    glSampleCoveragexOES();
    glGetSamplerParameterIiv();
    glVertexAttribPointerNV();
    glVertexStream4sATI();
    glProgramUniformMatrix2x3dv();
    glFramebufferTexture2DEXT();
    glUniformMatrix3x2fvNV();
    glPathGlyphRangeNV();
    glProgramBufferParametersIuivNV();
    glBinormalPointerEXT();
    glStencilFillPathNV();
    glGetError();
    glDrawElementsInstancedBaseVertexOES();
    glVertexStream3fATI();
    glCombinerParameteriNV();
    glGetGraphicsResetStatus();
    glNamedProgramLocalParameterI4uivEXT();
    glPointParameterivNV();
    glNormalPointerEXT();
    glLogicOp();
    glMatrixScaledEXT();
    glGetPathColorGenivNV();
    glUnmapNamedBuffer();
    glDrawArraysInstancedEXT();
    glVertexStream2svATI();
    glGetTextureImage();
    glPixelTransformParameterfvEXT();
    glIsBufferResidentNV();
    glClientWaitSyncAPPLE();
    glVertexStream2dATI();
    glCopyImageSubDataNV();
    glColorP3uiv();
    glClientWaitSync();
    glGetVertexArrayIntegeri_vEXT();
    glTexParameterIivEXT();
    glCompressedTexImage1DARB();
    glPatchParameteriEXT();
    glTexPageCommitmentEXT();
    glMultiTexImage2DEXT();
    glGetRenderbufferParameteriv();
    glPixelMapusv();
    glEnableVertexAttribAPPLE();
    glGetNamedProgramLocalParameterIuivEXT();
    glPatchParameterfv();
    glGetTexParameterPointervAPPLE();
    glNormalFormatNV();
    glMemoryBarrierByRegion();
    glGetSeparableFilter();
    glNormalStream3bvATI();
    glGetNamedProgramivEXT();
    glVertexP4ui();
    glGetGraphicsResetStatusARB();
    glGetTextureParameterfvEXT();
    glTexParameterIuivOES();
    glGetFramebufferParameteriv();
    glMultiTexCoord1xvOES();
    glVertexBlendEnvfATI();
    glProgramParameter4dNV();
    glObjectLabelKHR();
    glGetMultisamplefvNV();
    glEndQueryEXT();
    glGetQueryBufferObjectuiv();
    glTexBufferRange();
    glProgramUniformMatrix4x3fvEXT();
    glSpriteParameteriSGIX();
    glDrawArraysInstancedBaseInstance();
    glTexParameterIivOES();
    glGetRenderbufferParameterivEXT();
    glGetnHistogramARB();
    glIsPointInStrokePathNV();
    glBlendFuncSeparateOES();
    glReadBufferIndexedEXT();
    glGetFramebufferParameterivEXT();
    glProgramEnvParametersI4ivNV();
    glGetNamedFramebufferAttachmentParameteriv();
    glMatrixLoaddEXT();
    glGetOcclusionQueryuivNV();
    glGetTextureSubImage();
    glVertexArrayNormalOffsetEXT();
    glGetTransformFeedbackVaryingEXT();
    glProvokingVertexEXT();
    glTrackMatrixNV();
    glConvolutionParameteriv();
    glResetHistogramEXT();
    glGetCombinerInputParameterfvNV();
    glMultiTexCoord3xOES();
    glSpriteParameterfSGIX();
    glGetVertexArrayiv();
    glVertexFormatNV();
    glGetProgramResourceIndex();
    glProgramEnvParametersI4uivNV();
    glProgramParameter4fNV();
    glMultiTexParameterfvEXT();
    glMultiTexCoord3bOES();
    glGetTextureParameterIuiv();
    glQueryMatrixxOES();
    glVertexP3ui();
    glGetTexParameteriv();
    glGetPathMetricRangeNV();
    glMultiTexBufferEXT();
    glMultiTexCoord3hNV();
    glAlphaToCoverageDitherControlNV();
    glVertexAttribIFormat();
    glMultiTexCoord1fvARB();
    glFragmentMaterialiSGIX();
    glGetVertexAttribPointervARB();
    glMapTexture2DINTEL();
    glIsEnabled();
    glVertexAttribP2uiv();
    glClientActiveVertexStreamATI();
    glDrawElementsInstancedNV();
    glCopyTextureImage2DEXT();
    glIsQueryEXT();
    glStateCaptureNV();
    glGetQueryIndexediv();
    glGetActiveSubroutineUniformName();
    glTexBumpParameterfvATI();
    glGetObjectParameterfvARB();
    glGetQueryBufferObjecti64v();
    glClipPlanexOES();
    glGetTexParameterfv();
    glStencilThenCoverStrokePathInstancedNV();
    glPointParameterxOES();
    glTextureParameteri();
    glDisablei();
    glTextureParameterf();
    glColorTable();
    glBindBuffersBase();
    glExtGetBufferPointervQCOM();
    glIsEnablediOES();
    glGetCompressedMultiTexImageEXT();
    glGetnConvolutionFilter();
    glTextureStorage2DMultisample();
    glMapNamedBuffer();
    glGetFloati_vEXT();
    glPushAttrib();
    glGetObjectLabel();
    glMultiDrawArraysIndirectEXT();
    glDrawElementArrayATI();
    glMemoryBarrier();
    glMapBufferOES();
    glTextureStorageSparseAMD();
    glSamplerParameterIuiv();
    glIsNamedStringARB();
    glBindFramebufferOES();
    glNamedProgramLocalParameterI4ivEXT();
    glTexBufferRangeOES();
    glFramebufferTexture2DDownsampleIMG();
    glColorP4ui();
    glCompressedMultiTexSubImage1DEXT();
    glGetPerfMonitorCounterDataAMD();
    glBindProgramNV();
    glGetProgramEnvParameterIivNV();
    glProgramUniformMatrix3x4dv();
    glVideoCaptureStreamParameterfvNV();
    glPathTexGenNV();
    glImageTransformParameterfHP();
    glGetTexGenfvOES();
    glPixelDataRangeNV();
    glPointParameterfvARB();
    glVertexAttribLPointer();
    glGetMapParameterfvNV();
    glGetMinmaxParameterfvEXT();
    glProgramBinary();
    glUniformMatrix2fvARB();
    glVertexAttribP2ui();
    glVertexStream4fvATI();
    glProgramEnvParameter4fARB();
    glConvolutionParameterfv();
    glUnmapBufferOES();
    glCompressedTexSubImage3DARB();
    glDrawElementsIndirect();
    glUniformMatrix2x4fvNV();
    glBindBufferOffsetEXT();
    glVertexArrayVertexAttribIOffsetEXT();
    glGetMinmaxEXT();
    glGetPathColorGenfvNV();
    glBlendFuncSeparatei();
    glFogxOES();
    glTexImage2DMultisample();
    glObjectPurgeableAPPLE();
    glViewportSwizzleNV();
    glMultiTexCoord3fARB();
    glDisableClientStateiEXT();
    glTextureSubImage2DEXT();
    glFragmentLightfSGIX();
    glVertexStream3iATI();
    glBindParameterEXT();
    glDrawElementsBaseVertexEXT();
    glGetColorTableParameterfvEXT();
    glRasterSamplesEXT();
    glNormalStream3dATI();
    glGetVertexAttribdvNV();
    glGetProgramLocalParameterdvARB();
    glIsSyncAPPLE();
    glGetQueryObjectuivARB();
    glProgramUniformMatrix3x4fv();
    glFramebufferReadBufferEXT();
    glTextureParameterfv();
    glGetMaterialxvOES();
    glMultiTexCoord2dARB();
    glPolygonModeNV();
    glTextureStorageMem2DMultisampleEXT();
    glGetNamedBufferPointervEXT();
    glUniformMatrix3x4fv();
    glGetTexEnvxv();
    glCompressedTexImage3D();
    glMultiTexCoord1hvNV();
    glUnmapBuffer();
    glMultiTexParameterIuivEXT();
    glGetnTexImage();
    glReadnPixelsEXT();
    glCopyMultiTexSubImage1DEXT();
    glGetConvolutionFilter();
    glConservativeRasterParameteriNV();
    glEnableIndexedEXT();
    glUniformMatrix3x4dv();
    glPointParameterfARB();
    glGetClipPlanex();
    glMultiTexCoord4sARB();
    glGetnCompressedTexImage();
    glNormalStream3ivATI();
    glVertexAttribLFormatNV();
    glShaderOp2EXT();
    glGetActiveSubroutineName();
    glGetClipPlanef();
    glNamedProgramStringEXT();
    glProgramUniformMatrix4fvEXT();
    glMatrixFrustumEXT();
    glTexCoordP1ui();
    glCompressedTexImage1D();
    glGetTexEnvxvOES();
    glStencilOpSeparate();
    glPixelTransformParameterfEXT();
    glConvolutionParameterfEXT();
    glGetFloati_vOES();
    glGetProgramLocalParameterIivNV();
    glGetMinmax();
    glSetFenceNV();
    glCompressedTexImage2D();
    glMultiTexCoord4dvARB();
    glLoadProgramNV();
    glGetTextureParameterIuivEXT();
    glCopyPixels();
    glConvolutionParameterfvEXT();
    glNamedProgramLocalParameterI4iEXT();
    glTexStorage1DEXT();
    glCopyTexSubImage3D();
    glGetnSeparableFilter();
    glNormalP3ui();
    glGetGraphicsResetStatusKHR();
    glIsObjectBufferATI();
    glIglooInterfaceSGIX();
    glReadBufferNV();
    glGetCombinerStageParameterfvNV();
    glDrawElementsInstancedBaseVertexBaseInstance();
    glGenerateMipmapEXT();
    glDrawRangeElementsEXT();
    glPixelStoref();
    glIsFramebufferOES();
    glStencilFuncSeparate();
    glGetProgramEnvParameterdvARB();
    glPixelStorei();
    glCheckNamedFramebufferStatusEXT();
    glGetInteger64i_v();
    glClearTexSubImageEXT();
    glGetTextureLevelParameteriv();
    glPixelStorex();
    glCopyTexSubImage1D();
    glDrawCommandsNV();
    glPathColorGenNV();
    glTexBufferEXT();
    glMatrixMultTransposefEXT();
    glMultiDrawRangeElementArrayAPPLE();
    glSpriteParameterivSGIX();
    glGetCombinerInputParameterivNV();
    glGetProgramPipelineiv();
    glRenderbufferStorageMultisampleCoverageNV();
    glGetNamedFramebufferAttachmentParameterivEXT();
    glCopyTexSubImage2D();
    glDrawRangeElementArrayAPPLE();
    glGetProgramivARB();
    glGetPointervKHR();
    glTextureParameterIuivEXT();
    glProgramParameteriEXT();
    glPointSizePointerOES();
    glBlendEquationi();
    glMaterialxv();
    glWindowRectanglesEXT();
    glGetConvolutionFilterEXT();
    glGetNamedProgramLocalParameterIivEXT();
    glCopyTexSubImage3DEXT();
    glGetBufferParameterui64vNV();
    glPNTrianglesfATI();
    glGetVideoCaptureStreamdvNV();
    glProgramEnvParameters4fvEXT();
    glIsTextureEXT();
    glCreateSyncFromCLeventARB();
    glSeparableFilter2DEXT();
    glFramebufferTextureARB();
    glSecondaryColorPointer();
    glAlphaFragmentOp2ATI();
    glMultiTexParameteriEXT();
    glGetQueryObjecti64vEXT();
    glPixelTransferf();
    glCompressedTextureImage1DEXT();
    glPixelTransferi();
    glFogCoordPointer();
    glFramebufferTextureMultiviewOVR();
    glPushDebugGroupKHR();
    glVertexAttribIPointer();
    glVertexStream1dvATI();
    glFramebufferRenderbuffer();
    glCombinerStageParameterfvNV();
    glAreProgramsResidentNV();
    glActiveTexture();
    glVertexAttribFormat();
    glDisableClientState();
    glBindMaterialParameterEXT();
  }
}
