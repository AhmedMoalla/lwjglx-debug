package org.lwjglx.debug;
import java.util.Map;
import java.util.HashMap;
public class GLmetadata {
  private static final int GL_MULTISAMPLE_BUFFER_BIT7_QCOM = -2147483648;
  private static final int GL_TEXCOORD4_BIT_PGI = -2147483648;
  private static final int GL_SKIP_COMPONENTS1_NV = -6;
  private static final int GL_SKIP_COMPONENTS2_NV = -5;
  private static final int GL_SKIP_COMPONENTS3_NV = -4;
  private static final int GL_SKIP_COMPONENTS4_NV = -3;
  private static final int GL_NEXT_BUFFER_NV = -2;
  private static final int GL_ALL_BARRIER_BITS = -1;
  private static final int GL_TIMEOUT_IGNORED_APPLE = -1;
  private static final int GL_ALL_BARRIER_BITS_EXT = -1;
  private static final int GL_QUERY_ALL_EVENT_BITS_AMD = -1;
  private static final int GL_ALL_PIXELS_AMD = -1;
  private static final int GL_INVALID_INDEX = -1;
  private static final int GL_CLIENT_ALL_ATTRIB_BITS = -1;
  private static final int GL_ALL_SHADER_BITS = -1;
  private static final int GL_ALL_SHADER_BITS_EXT = -1;
  private static final int GL_TIMEOUT_IGNORED = -1;
  private static final int GL_ALL_ATTRIB_BITS = -1;
  private static final int GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0;
  private static final int GL_TERMINATE_SEQUENCE_COMMAND_NV = 0;
  private static final int GL_FALSE = 0;
  private static final int GL_NONE = 0;
  private static final int GL_POINTS = 0;
  private static final int GL_CLOSE_PATH_NV = 0;
  private static final int GL_NO_ERROR = 0;
  private static final int GL_NONE_OES = 0;
  private static final int GL_ZERO = 0;
  private static final int GL_LAYOUT_DEFAULT_INTEL = 0;
  private static final int GL_VERSION_ES_CM_1_1 = 1;
  private static final int GL_VERTEX_SHADER_BIT = 1;
  private static final int GL_RED_BIT_ATI = 1;
  private static final int GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1;
  private static final int GL_LINES = 1;
  private static final int GL_FOVEATION_ENABLE_BIT_QCOM = 1;
  private static final int GL_CONTEXT_CORE_PROFILE_BIT = 1;
  private static final int GL_MAP_READ_BIT_EXT = 1;
  private static final int GL_SYNC_FLUSH_COMMANDS_BIT = 1;
  private static final int GL_CURRENT_BIT = 1;
  private static final int GL_NOP_COMMAND_NV = 1;
  private static final int GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 1;
  private static final int GL_VERTEX_SHADER_BIT_EXT = 1;
  private static final int GL_TEXTURE_DEFORMATION_BIT_SGIX = 1;
  private static final int GL_COLOR_BUFFER_BIT0_QCOM = 1;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 1;
  private static final int GL_ONE = 1;
  private static final int GL_LAYOUT_LINEAR_INTEL = 1;
  private static final int GL_CLIENT_PIXEL_STORE_BIT = 1;
  private static final int GL_TRUE = 1;
  private static final int GL_VERSION_ES_CL_1_1 = 1;
  private static final int GL_VERSION_ES_CL_1_0 = 1;
  private static final int GL_BOLD_BIT_NV = 1;
  private static final int GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 1;
  private static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1;
  private static final int GL_RESTART_SUN = 1;
  private static final int GL_MAP_READ_BIT = 1;
  private static final int GL_2X_BIT_ATI = 1;
  private static final int GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1;
  private static final int GL_TRACE_OPERATIONS_BIT_MESA = 1;
  private static final int GL_GLYPH_WIDTH_BIT_NV = 1;
  private static final int GL_GREEN_BIT_ATI = 2;
  private static final int GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2;
  private static final int GL_4X_BIT_ATI = 2;
  private static final int GL_GLYPH_HEIGHT_BIT_NV = 2;
  private static final int GL_DRAW_ELEMENTS_COMMAND_NV = 2;
  private static final int GL_MAP_WRITE_BIT_EXT = 2;
  private static final int GL_GEOMETRY_DEFORMATION_BIT_SGIX = 2;
  private static final int GL_MOVE_TO_NV = 2;
  private static final int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 2;
  private static final int GL_MAP_WRITE_BIT = 2;
  private static final int GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 2;
  private static final int GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2;
  private static final int GL_LINE_LOOP = 2;
  private static final int GL_FRAGMENT_SHADER_BIT_EXT = 2;
  private static final int GL_TRACE_PRIMITIVES_BIT_MESA = 2;
  private static final int GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
  private static final int GL_FRAGMENT_SHADER_BIT = 2;
  private static final int GL_COMP_BIT_ATI = 2;
  private static final int GL_ITALIC_BIT_NV = 2;
  private static final int GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 2;
  private static final int GL_CLIENT_VERTEX_ARRAY_BIT = 2;
  private static final int GL_ELEMENT_ARRAY_BARRIER_BIT = 2;
  private static final int GL_CONTEXT_FLAG_DEBUG_BIT = 2;
  private static final int GL_REPLACE_MIDDLE_SUN = 2;
  private static final int GL_POINT_BIT = 2;
  private static final int GL_COLOR_BUFFER_BIT1_QCOM = 2;
  private static final int GL_LINE_STRIP = 3;
  private static final int GL_REPLACE_OLDEST_SUN = 3;
  private static final int GL_DRAW_ARRAYS_COMMAND_NV = 3;
  private static final int GL_RELATIVE_MOVE_TO_NV = 3;
  private static final int GL_LINE_TO_NV = 4;
  private static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4;
  private static final int GL_TRIANGLES = 4;
  private static final int GL_MAP_INVALIDATE_RANGE_BIT_EXT = 4;
  private static final int GL_GEOMETRY_SHADER_BIT_EXT = 4;
  private static final int GL_COLOR_BUFFER_BIT2_QCOM = 4;
  private static final int GL_NEGATE_BIT_ATI = 4;
  private static final int GL_TRACE_ARRAYS_BIT_MESA = 4;
  private static final int GL_UNIFORM_BARRIER_BIT_EXT = 4;
  private static final int GL_VERTEX23_BIT_PGI = 4;
  private static final int GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 4;
  private static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4;
  private static final int GL_GEOMETRY_SHADER_BIT = 4;
  private static final int GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4;
  private static final int GL_8X_BIT_ATI = 4;
  private static final int GL_BLUE_BIT_ATI = 4;
  private static final int GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4;
  private static final int GL_LINE_BIT = 4;
  private static final int GL_UNIFORM_BARRIER_BIT = 4;
  private static final int GL_MAP_INVALIDATE_RANGE_BIT = 4;
  private static final int GL_GEOMETRY_SHADER_BIT_OES = 4;
  private static final int GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 5;
  private static final int GL_RELATIVE_LINE_TO_NV = 5;
  private static final int GL_TRIANGLE_STRIP = 5;
  private static final int GL_HORIZONTAL_LINE_TO_NV = 6;
  private static final int GL_TRIANGLE_FAN = 6;
  private static final int GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 6;
  private static final int GL_QUADS_EXT = 7;
  private static final int GL_QUADS_OES = 7;
  private static final int GL_QUADS = 7;
  private static final int GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7;
  private static final int GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 7;
  private static final int GL_TEXTURE_FETCH_BARRIER_BIT = 8;
  private static final int GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 8;
  private static final int GL_MAP_INVALIDATE_BUFFER_BIT = 8;
  private static final int GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 8;
  private static final int GL_ELEMENT_ADDRESS_COMMAND_NV = 8;
  private static final int GL_TRACE_TEXTURES_BIT_MESA = 8;
  private static final int GL_TESS_CONTROL_SHADER_BIT = 8;
  private static final int GL_LUID_SIZE_EXT = 8;
  private static final int GL_COLOR_BUFFER_BIT3_QCOM = 8;
  private static final int GL_TESS_CONTROL_SHADER_BIT_EXT = 8;
  private static final int GL_BIAS_BIT_ATI = 8;
  private static final int GL_VERTEX4_BIT_PGI = 8;
  private static final int GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8;
  private static final int GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8;
  private static final int GL_TESS_CONTROL_SHADER_BIT_OES = 8;
  private static final int GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8;
  private static final int GL_CONTEXT_FLAG_NO_ERROR_BIT = 8;
  private static final int GL_POLYGON_BIT = 8;
  private static final int GL_QUAD_STRIP = 8;
  private static final int GL_VERTICAL_LINE_TO_NV = 8;
  private static final int GL_HALF_BIT_ATI = 8;
  private static final int GL_RELATIVE_VERTICAL_LINE_TO_NV = 9;
  private static final int GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 9;
  private static final int GL_POLYGON = 9;
  private static final int GL_LINES_ADJACENCY = 10;
  private static final int GL_LINES_ADJACENCY_ARB = 10;
  private static final int GL_QUADRATIC_CURVE_TO_NV = 10;
  private static final int GL_LINES_ADJACENCY_OES = 10;
  private static final int GL_LINES_ADJACENCY_EXT = 10;
  private static final int GL_UNIFORM_ADDRESS_COMMAND_NV = 10;
  private static final int GL_BLEND_COLOR_COMMAND_NV = 11;
  private static final int GL_LINE_STRIP_ADJACENCY_ARB = 11;
  private static final int GL_LINE_STRIP_ADJACENCY = 11;
  private static final int GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11;
  private static final int GL_LINE_STRIP_ADJACENCY_EXT = 11;
  private static final int GL_LINE_STRIP_ADJACENCY_OES = 11;
  private static final int GL_TRIANGLES_ADJACENCY_EXT = 12;
  private static final int GL_STENCIL_REF_COMMAND_NV = 12;
  private static final int GL_TRIANGLES_ADJACENCY_ARB = 12;
  private static final int GL_TRIANGLES_ADJACENCY = 12;
  private static final int GL_TRIANGLES_ADJACENCY_OES = 12;
  private static final int GL_CUBIC_CURVE_TO_NV = 12;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY_ARB = 13;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY = 13;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY_OES = 13;
  private static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;
  private static final int GL_LINE_WIDTH_COMMAND_NV = 13;
  private static final int GL_RELATIVE_CUBIC_CURVE_TO_NV = 13;
  private static final int GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14;
  private static final int GL_PATCHES = 14;
  private static final int GL_PATCHES_OES = 14;
  private static final int GL_PATCHES_EXT = 14;
  private static final int GL_POLYGON_OFFSET_COMMAND_NV = 14;
  private static final int GL_ALPHA_REF_COMMAND_NV = 15;
  private static final int GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15;
  private static final int GL_TESS_EVALUATION_SHADER_BIT_EXT = 16;
  private static final int GL_VIEWPORT_COMMAND_NV = 16;
  private static final int GL_TESS_EVALUATION_SHADER_BIT_OES = 16;
  private static final int GL_COLOR_BUFFER_BIT4_QCOM = 16;
  private static final int GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16;
  private static final int GL_QUARTER_BIT_ATI = 16;
  private static final int GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 16;
  private static final int GL_SMOOTH_CUBIC_CURVE_TO_NV = 16;
  private static final int GL_UUID_SIZE_EXT = 16;
  private static final int GL_TESS_EVALUATION_SHADER_BIT = 16;
  private static final int GL_TRACE_PIXELS_BIT_MESA = 16;
  private static final int GL_MAP_FLUSH_EXPLICIT_BIT = 16;
  private static final int GL_POLYGON_STIPPLE_BIT = 16;
  private static final int GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17;
  private static final int GL_SCISSOR_COMMAND_NV = 17;
  private static final int GL_SMALL_CCW_ARC_TO_NV = 18;
  private static final int GL_FRONT_FACE_COMMAND_NV = 18;
  private static final int GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19;
  private static final int GL_SMALL_CW_ARC_TO_NV = 20;
  private static final int GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21;
  private static final int GL_LARGE_CCW_ARC_TO_NV = 22;
  private static final int GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23;
  private static final int GL_LARGE_CW_ARC_TO_NV = 24;
  private static final int GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25;
  private static final int GL_CONIC_CURVE_TO_NV = 26;
  private static final int GL_RELATIVE_CONIC_CURVE_TO_NV = 27;
  private static final int GL_EIGHTH_BIT_ATI = 32;
  private static final int GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32;
  private static final int GL_PIXEL_MODE_BIT = 32;
  private static final int GL_COLOR_BUFFER_BIT5_QCOM = 32;
  private static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 32;
  private static final int GL_TRACE_ERRORS_BIT_MESA = 32;
  private static final int GL_MAP_UNSYNCHRONIZED_BIT_EXT = 32;
  private static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32;
  private static final int GL_COMPUTE_SHADER_BIT = 32;
  private static final int GL_MAP_UNSYNCHRONIZED_BIT = 32;
  private static final int GL_COMMAND_BARRIER_BIT = 64;
  private static final int GL_MAP_PERSISTENT_BIT_EXT = 64;
  private static final int GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64;
  private static final int GL_COMMAND_BARRIER_BIT_EXT = 64;
  private static final int GL_MAP_PERSISTENT_BIT = 64;
  private static final int GL_COLOR_BUFFER_BIT6_QCOM = 64;
  private static final int GL_LIGHTING_BIT = 64;
  private static final int GL_SATURATE_BIT_ATI = 64;
  private static final int GL_MAP_COHERENT_BIT = 128;
  private static final int GL_PIXEL_BUFFER_BARRIER_BIT = 128;
  private static final int GL_FOG_BIT = 128;
  private static final int GL_COLOR_BUFFER_BIT7_QCOM = 128;
  private static final int GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 128;
  private static final int GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128;
  private static final int GL_MAP_COHERENT_BIT_EXT = 128;
  private static final int GL_ROUNDED_RECT_NV = 232;
  private static final int GL_RELATIVE_ROUNDED_RECT_NV = 233;
  private static final int GL_ROUNDED_RECT2_NV = 234;
  private static final int GL_RELATIVE_ROUNDED_RECT2_NV = 235;
  private static final int GL_ROUNDED_RECT4_NV = 236;
  private static final int GL_RELATIVE_ROUNDED_RECT4_NV = 237;
  private static final int GL_ROUNDED_RECT8_NV = 238;
  private static final int GL_RELATIVE_ROUNDED_RECT8_NV = 239;
  private static final int GL_RESTART_PATH_NV = 240;
  private static final int GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242;
  private static final int GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244;
  private static final int GL_RECT_NV = 246;
  private static final int GL_RELATIVE_RECT_NV = 247;
  private static final int GL_CIRCULAR_CCW_ARC_TO_NV = 248;
  private static final int GL_CIRCULAR_CW_ARC_TO_NV = 250;
  private static final int GL_CIRCULAR_TANGENT_ARC_TO_NV = 252;
  private static final int GL_ARC_TO_NV = 254;
  private static final int GL_RELATIVE_ARC_TO_NV = 255;
  private static final int GL_DEPTH_BUFFER_BIT0_QCOM = 256;
  private static final int GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 256;
  private static final int GL_GLYPH_HAS_KERNING_BIT_NV = 256;
  private static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 256;
  private static final int GL_DEPTH_BUFFER_BIT = 256;
  private static final int GL_DYNAMIC_STORAGE_BIT_EXT = 256;
  private static final int GL_DYNAMIC_STORAGE_BIT = 256;
  private static final int GL_ACCUM = 256;
  private static final int GL_LOAD = 257;
  private static final int GL_RETURN = 258;
  private static final int GL_MULT = 259;
  private static final int GL_ADD = 260;
  private static final int GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 512;
  private static final int GL_DEPTH_BUFFER_BIT1_QCOM = 512;
  private static final int GL_ACCUM_BUFFER_BIT = 512;
  private static final int GL_NEVER = 512;
  private static final int GL_BUFFER_UPDATE_BARRIER_BIT = 512;
  private static final int GL_CLIENT_STORAGE_BIT = 512;
  private static final int GL_CLIENT_STORAGE_BIT_EXT = 512;
  private static final int GL_LESS = 513;
  private static final int GL_EQUAL = 514;
  private static final int GL_LEQUAL = 515;
  private static final int GL_GREATER = 516;
  private static final int GL_NOTEQUAL = 517;
  private static final int GL_GEQUAL = 518;
  private static final int GL_ALWAYS = 519;
  private static final int GL_SRC_COLOR = 768;
  private static final int GL_ONE_MINUS_SRC_COLOR = 769;
  private static final int GL_SRC_ALPHA = 770;
  private static final int GL_ONE_MINUS_SRC_ALPHA = 771;
  private static final int GL_DST_ALPHA = 772;
  private static final int GL_ONE_MINUS_DST_ALPHA = 773;
  private static final int GL_DST_COLOR = 774;
  private static final int GL_ONE_MINUS_DST_COLOR = 775;
  private static final int GL_SRC_ALPHA_SATURATE_EXT = 776;
  private static final int GL_SRC_ALPHA_SATURATE = 776;
  private static final int GL_FRAMEBUFFER_BARRIER_BIT = 1024;
  private static final int GL_SPARSE_STORAGE_BIT_ARB = 1024;
  private static final int GL_FRAMEBUFFER_BARRIER_BIT_EXT = 1024;
  private static final int GL_STENCIL_BUFFER_BIT = 1024;
  private static final int GL_DEPTH_BUFFER_BIT2_QCOM = 1024;
  private static final int GL_FRONT_LEFT = 1024;
  private static final int GL_FRONT_RIGHT = 1025;
  private static final int GL_BACK_LEFT = 1026;
  private static final int GL_BACK_RIGHT = 1027;
  private static final int GL_FRONT = 1028;
  private static final int GL_BACK = 1029;
  private static final int GL_LEFT = 1030;
  private static final int GL_RIGHT = 1031;
  private static final int GL_FRONT_AND_BACK = 1032;
  private static final int GL_AUX0 = 1033;
  private static final int GL_AUX1 = 1034;
  private static final int GL_AUX2 = 1035;
  private static final int GL_AUX3 = 1036;
  private static final int GL_INVALID_ENUM = 1280;
  private static final int GL_INVALID_VALUE = 1281;
  private static final int GL_INVALID_OPERATION = 1282;
  private static final int GL_STACK_OVERFLOW = 1283;
  private static final int GL_STACK_OVERFLOW_KHR = 1283;
  private static final int GL_STACK_UNDERFLOW_KHR = 1284;
  private static final int GL_STACK_UNDERFLOW = 1284;
  private static final int GL_OUT_OF_MEMORY = 1285;
  private static final int GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
  private static final int GL_INVALID_FRAMEBUFFER_OPERATION_OES = 1286;
  private static final int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286;
  private static final int GL_CONTEXT_LOST_KHR = 1287;
  private static final int GL_CONTEXT_LOST = 1287;
  private static final int GL_2D = 1536;
  private static final int GL_3D = 1537;
  private static final int GL_3D_COLOR = 1538;
  private static final int GL_3D_COLOR_TEXTURE = 1539;
  private static final int GL_4D_COLOR_TEXTURE = 1540;
  private static final int GL_PASS_THROUGH_TOKEN = 1792;
  private static final int GL_POINT_TOKEN = 1793;
  private static final int GL_LINE_TOKEN = 1794;
  private static final int GL_POLYGON_TOKEN = 1795;
  private static final int GL_BITMAP_TOKEN = 1796;
  private static final int GL_DRAW_PIXEL_TOKEN = 1797;
  private static final int GL_COPY_PIXEL_TOKEN = 1798;
  private static final int GL_LINE_RESET_TOKEN = 1799;
  private static final int GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 2048;
  private static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;
  private static final int GL_VIEWPORT_BIT = 2048;
  private static final int GL_EXP = 2048;
  private static final int GL_PER_GPU_STORAGE_BIT_NV = 2048;
  private static final int GL_DEPTH_BUFFER_BIT3_QCOM = 2048;
  private static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 2048;
  private static final int GL_EXP2 = 2049;
  private static final int GL_CW = 2304;
  private static final int GL_CCW = 2305;
  private static final int GL_COEFF = 2560;
  private static final int GL_ORDER = 2561;
  private static final int GL_DOMAIN = 2562;
  private static final int GL_CURRENT_COLOR = 2816;
  private static final int GL_CURRENT_INDEX = 2817;
  private static final int GL_CURRENT_NORMAL = 2818;
  private static final int GL_CURRENT_TEXTURE_COORDS = 2819;
  private static final int GL_CURRENT_RASTER_COLOR = 2820;
  private static final int GL_CURRENT_RASTER_INDEX = 2821;
  private static final int GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
  private static final int GL_CURRENT_RASTER_POSITION = 2823;
  private static final int GL_CURRENT_RASTER_POSITION_VALID = 2824;
  private static final int GL_CURRENT_RASTER_DISTANCE = 2825;
  private static final int GL_POINT_SMOOTH = 2832;
  private static final int GL_POINT_SIZE = 2833;
  private static final int GL_POINT_SIZE_RANGE = 2834;
  private static final int GL_SMOOTH_POINT_SIZE_RANGE = 2834;
  private static final int GL_POINT_SIZE_GRANULARITY = 2835;
  private static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835;
  private static final int GL_LINE_SMOOTH = 2848;
  private static final int GL_LINE_WIDTH = 2849;
  private static final int GL_SMOOTH_LINE_WIDTH_RANGE = 2850;
  private static final int GL_LINE_WIDTH_RANGE = 2850;
  private static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851;
  private static final int GL_LINE_WIDTH_GRANULARITY = 2851;
  private static final int GL_LINE_STIPPLE = 2852;
  private static final int GL_LINE_STIPPLE_PATTERN = 2853;
  private static final int GL_LINE_STIPPLE_REPEAT = 2854;
  private static final int GL_LIST_MODE = 2864;
  private static final int GL_MAX_LIST_NESTING = 2865;
  private static final int GL_LIST_BASE = 2866;
  private static final int GL_LIST_INDEX = 2867;
  private static final int GL_POLYGON_MODE = 2880;
  private static final int GL_POLYGON_MODE_NV = 2880;
  private static final int GL_POLYGON_SMOOTH = 2881;
  private static final int GL_POLYGON_STIPPLE = 2882;
  private static final int GL_EDGE_FLAG = 2883;
  private static final int GL_CULL_FACE = 2884;
  private static final int GL_CULL_FACE_MODE = 2885;
  private static final int GL_FRONT_FACE = 2886;
  private static final int GL_LIGHTING = 2896;
  private static final int GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
  private static final int GL_LIGHT_MODEL_TWO_SIDE = 2898;
  private static final int GL_LIGHT_MODEL_AMBIENT = 2899;
  private static final int GL_SHADE_MODEL = 2900;
  private static final int GL_COLOR_MATERIAL_FACE = 2901;
  private static final int GL_COLOR_MATERIAL_PARAMETER = 2902;
  private static final int GL_COLOR_MATERIAL = 2903;
  private static final int GL_FOG = 2912;
  private static final int GL_FOG_INDEX = 2913;
  private static final int GL_FOG_DENSITY = 2914;
  private static final int GL_FOG_START = 2915;
  private static final int GL_FOG_END = 2916;
  private static final int GL_FOG_MODE = 2917;
  private static final int GL_FOG_COLOR = 2918;
  private static final int GL_DEPTH_RANGE = 2928;
  private static final int GL_DEPTH_TEST = 2929;
  private static final int GL_DEPTH_WRITEMASK = 2930;
  private static final int GL_DEPTH_CLEAR_VALUE = 2931;
  private static final int GL_DEPTH_FUNC = 2932;
  private static final int GL_ACCUM_CLEAR_VALUE = 2944;
  private static final int GL_STENCIL_TEST = 2960;
  private static final int GL_STENCIL_CLEAR_VALUE = 2961;
  private static final int GL_STENCIL_FUNC = 2962;
  private static final int GL_STENCIL_VALUE_MASK = 2963;
  private static final int GL_STENCIL_FAIL = 2964;
  private static final int GL_STENCIL_PASS_DEPTH_FAIL = 2965;
  private static final int GL_STENCIL_PASS_DEPTH_PASS = 2966;
  private static final int GL_STENCIL_REF = 2967;
  private static final int GL_STENCIL_WRITEMASK = 2968;
  private static final int GL_MATRIX_MODE = 2976;
  private static final int GL_NORMALIZE = 2977;
  private static final int GL_VIEWPORT = 2978;
  private static final int GL_MODELVIEW_STACK_DEPTH = 2979;
  private static final int GL_PATH_MODELVIEW_STACK_DEPTH_NV = 2979;
  private static final int GL_MODELVIEW0_STACK_DEPTH_EXT = 2979;
  private static final int GL_PROJECTION_STACK_DEPTH = 2980;
  private static final int GL_PATH_PROJECTION_STACK_DEPTH_NV = 2980;
  private static final int GL_TEXTURE_STACK_DEPTH = 2981;
  private static final int GL_MODELVIEW_MATRIX = 2982;
  private static final int GL_PATH_MODELVIEW_MATRIX_NV = 2982;
  private static final int GL_MODELVIEW0_MATRIX_EXT = 2982;
  private static final int GL_PROJECTION_MATRIX = 2983;
  private static final int GL_PATH_PROJECTION_MATRIX_NV = 2983;
  private static final int GL_TEXTURE_MATRIX = 2984;
  private static final int GL_ATTRIB_STACK_DEPTH = 2992;
  private static final int GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
  private static final int GL_ALPHA_TEST_QCOM = 3008;
  private static final int GL_ALPHA_TEST = 3008;
  private static final int GL_ALPHA_TEST_FUNC = 3009;
  private static final int GL_ALPHA_TEST_FUNC_QCOM = 3009;
  private static final int GL_ALPHA_TEST_REF = 3010;
  private static final int GL_ALPHA_TEST_REF_QCOM = 3010;
  private static final int GL_DITHER = 3024;
  private static final int GL_BLEND_DST = 3040;
  private static final int GL_BLEND_SRC = 3041;
  private static final int GL_BLEND = 3042;
  private static final int GL_LOGIC_OP_MODE = 3056;
  private static final int GL_INDEX_LOGIC_OP = 3057;
  private static final int GL_LOGIC_OP = 3057;
  private static final int GL_COLOR_LOGIC_OP = 3058;
  private static final int GL_AUX_BUFFERS = 3072;
  private static final int GL_DRAW_BUFFER = 3073;
  private static final int GL_DRAW_BUFFER_EXT = 3073;
  private static final int GL_READ_BUFFER_NV = 3074;
  private static final int GL_READ_BUFFER_EXT = 3074;
  private static final int GL_READ_BUFFER = 3074;
  private static final int GL_SCISSOR_BOX = 3088;
  private static final int GL_SCISSOR_TEST = 3089;
  private static final int GL_INDEX_CLEAR_VALUE = 3104;
  private static final int GL_INDEX_WRITEMASK = 3105;
  private static final int GL_COLOR_CLEAR_VALUE = 3106;
  private static final int GL_COLOR_WRITEMASK = 3107;
  private static final int GL_INDEX_MODE = 3120;
  private static final int GL_RGBA_MODE = 3121;
  private static final int GL_DOUBLEBUFFER = 3122;
  private static final int GL_STEREO = 3123;
  private static final int GL_RENDER_MODE = 3136;
  private static final int GL_PERSPECTIVE_CORRECTION_HINT = 3152;
  private static final int GL_POINT_SMOOTH_HINT = 3153;
  private static final int GL_LINE_SMOOTH_HINT = 3154;
  private static final int GL_POLYGON_SMOOTH_HINT = 3155;
  private static final int GL_FOG_HINT = 3156;
  private static final int GL_TEXTURE_GEN_S = 3168;
  private static final int GL_TEXTURE_GEN_T = 3169;
  private static final int GL_TEXTURE_GEN_R = 3170;
  private static final int GL_TEXTURE_GEN_Q = 3171;
  private static final int GL_PIXEL_MAP_I_TO_I = 3184;
  private static final int GL_PIXEL_MAP_S_TO_S = 3185;
  private static final int GL_PIXEL_MAP_I_TO_R = 3186;
  private static final int GL_PIXEL_MAP_I_TO_G = 3187;
  private static final int GL_PIXEL_MAP_I_TO_B = 3188;
  private static final int GL_PIXEL_MAP_I_TO_A = 3189;
  private static final int GL_PIXEL_MAP_R_TO_R = 3190;
  private static final int GL_PIXEL_MAP_G_TO_G = 3191;
  private static final int GL_PIXEL_MAP_B_TO_B = 3192;
  private static final int GL_PIXEL_MAP_A_TO_A = 3193;
  private static final int GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
  private static final int GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
  private static final int GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
  private static final int GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
  private static final int GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
  private static final int GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
  private static final int GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
  private static final int GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
  private static final int GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
  private static final int GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
  private static final int GL_UNPACK_SWAP_BYTES = 3312;
  private static final int GL_UNPACK_LSB_FIRST = 3313;
  private static final int GL_UNPACK_ROW_LENGTH = 3314;
  private static final int GL_UNPACK_SKIP_ROWS = 3315;
  private static final int GL_UNPACK_SKIP_PIXELS = 3316;
  private static final int GL_UNPACK_ALIGNMENT = 3317;
  private static final int GL_PACK_SWAP_BYTES = 3328;
  private static final int GL_PACK_LSB_FIRST = 3329;
  private static final int GL_PACK_ROW_LENGTH = 3330;
  private static final int GL_PACK_SKIP_ROWS = 3331;
  private static final int GL_PACK_SKIP_PIXELS = 3332;
  private static final int GL_PACK_ALIGNMENT = 3333;
  private static final int GL_MAP_COLOR = 3344;
  private static final int GL_MAP_STENCIL = 3345;
  private static final int GL_INDEX_SHIFT = 3346;
  private static final int GL_INDEX_OFFSET = 3347;
  private static final int GL_RED_SCALE = 3348;
  private static final int GL_RED_BIAS = 3349;
  private static final int GL_ZOOM_X = 3350;
  private static final int GL_ZOOM_Y = 3351;
  private static final int GL_GREEN_SCALE = 3352;
  private static final int GL_GREEN_BIAS = 3353;
  private static final int GL_BLUE_SCALE = 3354;
  private static final int GL_BLUE_BIAS = 3355;
  private static final int GL_ALPHA_SCALE = 3356;
  private static final int GL_ALPHA_BIAS = 3357;
  private static final int GL_DEPTH_SCALE = 3358;
  private static final int GL_DEPTH_BIAS = 3359;
  private static final int GL_MAX_EVAL_ORDER = 3376;
  private static final int GL_MAX_LIGHTS = 3377;
  private static final int GL_MAX_CLIP_PLANES = 3378;
  private static final int GL_MAX_CLIP_DISTANCES = 3378;
  private static final int GL_MAX_CLIP_PLANES_IMG = 3378;
  private static final int GL_MAX_CLIP_DISTANCES_APPLE = 3378;
  private static final int GL_MAX_TEXTURE_SIZE = 3379;
  private static final int GL_MAX_PIXEL_MAP_TABLE = 3380;
  private static final int GL_MAX_ATTRIB_STACK_DEPTH = 3381;
  private static final int GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382;
  private static final int GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
  private static final int GL_MAX_NAME_STACK_DEPTH = 3383;
  private static final int GL_MAX_PROJECTION_STACK_DEPTH = 3384;
  private static final int GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384;
  private static final int GL_MAX_TEXTURE_STACK_DEPTH = 3385;
  private static final int GL_MAX_VIEWPORT_DIMS = 3386;
  private static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
  private static final int GL_SUBPIXEL_BITS = 3408;
  private static final int GL_INDEX_BITS = 3409;
  private static final int GL_RED_BITS = 3410;
  private static final int GL_GREEN_BITS = 3411;
  private static final int GL_BLUE_BITS = 3412;
  private static final int GL_ALPHA_BITS = 3413;
  private static final int GL_DEPTH_BITS = 3414;
  private static final int GL_STENCIL_BITS = 3415;
  private static final int GL_ACCUM_RED_BITS = 3416;
  private static final int GL_ACCUM_GREEN_BITS = 3417;
  private static final int GL_ACCUM_BLUE_BITS = 3418;
  private static final int GL_ACCUM_ALPHA_BITS = 3419;
  private static final int GL_NAME_STACK_DEPTH = 3440;
  private static final int GL_AUTO_NORMAL = 3456;
  private static final int GL_MAP1_COLOR_4 = 3472;
  private static final int GL_MAP1_INDEX = 3473;
  private static final int GL_MAP1_NORMAL = 3474;
  private static final int GL_MAP1_TEXTURE_COORD_1 = 3475;
  private static final int GL_MAP1_TEXTURE_COORD_2 = 3476;
  private static final int GL_MAP1_TEXTURE_COORD_3 = 3477;
  private static final int GL_MAP1_TEXTURE_COORD_4 = 3478;
  private static final int GL_MAP1_VERTEX_3 = 3479;
  private static final int GL_MAP1_VERTEX_4 = 3480;
  private static final int GL_MAP2_COLOR_4 = 3504;
  private static final int GL_MAP2_INDEX = 3505;
  private static final int GL_MAP2_NORMAL = 3506;
  private static final int GL_MAP2_TEXTURE_COORD_1 = 3507;
  private static final int GL_MAP2_TEXTURE_COORD_2 = 3508;
  private static final int GL_MAP2_TEXTURE_COORD_3 = 3509;
  private static final int GL_MAP2_TEXTURE_COORD_4 = 3510;
  private static final int GL_MAP2_VERTEX_3 = 3511;
  private static final int GL_MAP2_VERTEX_4 = 3512;
  private static final int GL_MAP1_GRID_DOMAIN = 3536;
  private static final int GL_MAP1_GRID_SEGMENTS = 3537;
  private static final int GL_MAP2_GRID_DOMAIN = 3538;
  private static final int GL_MAP2_GRID_SEGMENTS = 3539;
  private static final int GL_TEXTURE_1D = 3552;
  private static final int GL_TEXTURE_2D = 3553;
  private static final int GL_FEEDBACK_BUFFER_POINTER = 3568;
  private static final int GL_FEEDBACK_BUFFER_SIZE = 3569;
  private static final int GL_FEEDBACK_BUFFER_TYPE = 3570;
  private static final int GL_SELECTION_BUFFER_POINTER = 3571;
  private static final int GL_SELECTION_BUFFER_SIZE = 3572;
  private static final int GL_DEPTH_BUFFER_BIT4_QCOM = 4096;
  private static final int GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 4096;
  private static final int GL_TRANSFORM_BIT = 4096;
  private static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;
  private static final int GL_TEXTURE_WIDTH = 4096;
  private static final int GL_TEXTURE_HEIGHT = 4097;
  private static final int GL_TEXTURE_INTERNAL_FORMAT = 4099;
  private static final int GL_TEXTURE_COMPONENTS = 4099;
  private static final int GL_TEXTURE_BORDER_COLOR = 4100;
  private static final int GL_TEXTURE_BORDER_COLOR_EXT = 4100;
  private static final int GL_TEXTURE_BORDER_COLOR_OES = 4100;
  private static final int GL_TEXTURE_BORDER = 4101;
  private static final int GL_TEXTURE_TARGET = 4102;
  private static final int GL_DONT_CARE = 4352;
  private static final int GL_FASTEST = 4353;
  private static final int GL_NICEST = 4354;
  private static final int GL_AMBIENT = 4608;
  private static final int GL_DIFFUSE = 4609;
  private static final int GL_SPECULAR = 4610;
  private static final int GL_POSITION = 4611;
  private static final int GL_SPOT_DIRECTION = 4612;
  private static final int GL_SPOT_EXPONENT = 4613;
  private static final int GL_SPOT_CUTOFF = 4614;
  private static final int GL_CONSTANT_ATTENUATION = 4615;
  private static final int GL_LINEAR_ATTENUATION = 4616;
  private static final int GL_QUADRATIC_ATTENUATION = 4617;
  private static final int GL_COMPILE = 4864;
  private static final int GL_COMPILE_AND_EXECUTE = 4865;
  private static final int GL_BYTE = 5120;
  private static final int GL_UNSIGNED_BYTE = 5121;
  private static final int GL_SHORT = 5122;
  private static final int GL_UNSIGNED_SHORT = 5123;
  private static final int GL_INT = 5124;
  private static final int GL_UNSIGNED_INT = 5125;
  private static final int GL_FLOAT = 5126;
  private static final int GL_2_BYTES_NV = 5127;
  private static final int GL_2_BYTES = 5127;
  private static final int GL_3_BYTES_NV = 5128;
  private static final int GL_3_BYTES = 5128;
  private static final int GL_4_BYTES_NV = 5129;
  private static final int GL_4_BYTES = 5129;
  private static final int GL_DOUBLE = 5130;
  private static final int GL_HALF_FLOAT_NV = 5131;
  private static final int GL_HALF_APPLE = 5131;
  private static final int GL_HALF_FLOAT = 5131;
  private static final int GL_FIXED = 5132;
  private static final int GL_FIXED_OES = 5132;
  private static final int GL_INT64_NV = 5134;
  private static final int GL_UNSIGNED_INT64_ARB = 5135;
  private static final int GL_UNSIGNED_INT64_NV = 5135;
  private static final int GL_CLEAR = 5376;
  private static final int GL_AND = 5377;
  private static final int GL_AND_REVERSE = 5378;
  private static final int GL_COPY = 5379;
  private static final int GL_AND_INVERTED = 5380;
  private static final int GL_NOOP = 5381;
  private static final int GL_XOR = 5382;
  private static final int GL_XOR_NV = 5382;
  private static final int GL_OR = 5383;
  private static final int GL_NOR = 5384;
  private static final int GL_EQUIV = 5385;
  private static final int GL_INVERT = 5386;
  private static final int GL_OR_REVERSE = 5387;
  private static final int GL_COPY_INVERTED = 5388;
  private static final int GL_OR_INVERTED = 5389;
  private static final int GL_NAND = 5390;
  private static final int GL_SET = 5391;
  private static final int GL_EMISSION = 5632;
  private static final int GL_SHININESS = 5633;
  private static final int GL_AMBIENT_AND_DIFFUSE = 5634;
  private static final int GL_COLOR_INDEXES = 5635;
  private static final int GL_MODELVIEW0_ARB = 5888;
  private static final int GL_MODELVIEW0_EXT = 5888;
  private static final int GL_MODELVIEW = 5888;
  private static final int GL_PATH_MODELVIEW_NV = 5888;
  private static final int GL_PATH_PROJECTION_NV = 5889;
  private static final int GL_PROJECTION = 5889;
  private static final int GL_TEXTURE = 5890;
  private static final int GL_COLOR = 6144;
  private static final int GL_COLOR_EXT = 6144;
  private static final int GL_DEPTH_EXT = 6145;
  private static final int GL_DEPTH = 6145;
  private static final int GL_STENCIL_EXT = 6146;
  private static final int GL_STENCIL = 6146;
  private static final int GL_COLOR_INDEX = 6400;
  private static final int GL_STENCIL_INDEX = 6401;
  private static final int GL_DEPTH_COMPONENT = 6402;
  private static final int GL_RED = 6403;
  private static final int GL_RED_NV = 6403;
  private static final int GL_GREEN = 6404;
  private static final int GL_GREEN_NV = 6404;
  private static final int GL_BLUE = 6405;
  private static final int GL_BLUE_NV = 6405;
  private static final int GL_ALPHA = 6406;
  private static final int GL_RGB = 6407;
  private static final int GL_RGBA = 6408;
  private static final int GL_LUMINANCE = 6409;
  private static final int GL_LUMINANCE_ALPHA = 6410;
  private static final int GL_BITMAP = 6656;
  private static final int GL_POINT = 6912;
  private static final int GL_POINT_NV = 6912;
  private static final int GL_LINE_NV = 6913;
  private static final int GL_LINE = 6913;
  private static final int GL_FILL_NV = 6914;
  private static final int GL_FILL = 6914;
  private static final int GL_RENDER = 7168;
  private static final int GL_FEEDBACK = 7169;
  private static final int GL_SELECT = 7170;
  private static final int GL_FLAT = 7424;
  private static final int GL_SMOOTH = 7425;
  private static final int GL_KEEP = 7680;
  private static final int GL_REPLACE = 7681;
  private static final int GL_INCR = 7682;
  private static final int GL_DECR = 7683;
  private static final int GL_VENDOR = 7936;
  private static final int GL_RENDERER = 7937;
  private static final int GL_VERSION = 7938;
  private static final int GL_EXTENSIONS = 7939;
  private static final int GL_EXTERNAL_STORAGE_BIT_NVX = 8192;
  private static final int GL_S = 8192;
  private static final int GL_SHADER_STORAGE_BARRIER_BIT = 8192;
  private static final int GL_DEPTH_BUFFER_BIT5_QCOM = 8192;
  private static final int GL_ENABLE_BIT = 8192;
  private static final int GL_T = 8193;
  private static final int GL_R = 8194;
  private static final int GL_Q = 8195;
  private static final int GL_MODULATE = 8448;
  private static final int GL_DECAL = 8449;
  private static final int GL_TEXTURE_ENV_MODE = 8704;
  private static final int GL_TEXTURE_ENV_COLOR = 8705;
  private static final int GL_TEXTURE_ENV = 8960;
  private static final int GL_EYE_LINEAR_NV = 9216;
  private static final int GL_EYE_LINEAR = 9216;
  private static final int GL_OBJECT_LINEAR_NV = 9217;
  private static final int GL_OBJECT_LINEAR = 9217;
  private static final int GL_SPHERE_MAP = 9218;
  private static final int GL_TEXTURE_GEN_MODE = 9472;
  private static final int GL_TEXTURE_GEN_MODE_OES = 9472;
  private static final int GL_OBJECT_PLANE = 9473;
  private static final int GL_EYE_PLANE = 9474;
  private static final int GL_NEAREST = 9728;
  private static final int GL_LINEAR = 9729;
  private static final int GL_NEAREST_MIPMAP_NEAREST = 9984;
  private static final int GL_LINEAR_MIPMAP_NEAREST = 9985;
  private static final int GL_NEAREST_MIPMAP_LINEAR = 9986;
  private static final int GL_LINEAR_MIPMAP_LINEAR = 9987;
  private static final int GL_TEXTURE_MAG_FILTER = 10240;
  private static final int GL_TEXTURE_MIN_FILTER = 10241;
  private static final int GL_TEXTURE_WRAP_S = 10242;
  private static final int GL_TEXTURE_WRAP_T = 10243;
  private static final int GL_CLAMP = 10496;
  private static final int GL_REPEAT = 10497;
  private static final int GL_POLYGON_OFFSET_UNITS = 10752;
  private static final int GL_POLYGON_OFFSET_POINT = 10753;
  private static final int GL_POLYGON_OFFSET_POINT_NV = 10753;
  private static final int GL_POLYGON_OFFSET_LINE = 10754;
  private static final int GL_POLYGON_OFFSET_LINE_NV = 10754;
  private static final int GL_R3_G3_B2 = 10768;
  private static final int GL_V2F = 10784;
  private static final int GL_V3F = 10785;
  private static final int GL_C4UB_V2F = 10786;
  private static final int GL_C4UB_V3F = 10787;
  private static final int GL_C3F_V3F = 10788;
  private static final int GL_N3F_V3F = 10789;
  private static final int GL_C4F_N3F_V3F = 10790;
  private static final int GL_T2F_V3F = 10791;
  private static final int GL_T4F_V4F = 10792;
  private static final int GL_T2F_C4UB_V3F = 10793;
  private static final int GL_T2F_C3F_V3F = 10794;
  private static final int GL_T2F_N3F_V3F = 10795;
  private static final int GL_T2F_C4F_N3F_V3F = 10796;
  private static final int GL_T4F_C4F_N3F_V4F = 10797;
  private static final int GL_CLIP_DISTANCE0 = 12288;
  private static final int GL_CLIP_DISTANCE0_APPLE = 12288;
  private static final int GL_CLIP_PLANE0_IMG = 12288;
  private static final int GL_CLIP_PLANE0 = 12288;
  private static final int GL_CLIP_DISTANCE1 = 12289;
  private static final int GL_CLIP_PLANE1_IMG = 12289;
  private static final int GL_CLIP_DISTANCE1_APPLE = 12289;
  private static final int GL_CLIP_PLANE1 = 12289;
  private static final int GL_CLIP_DISTANCE2 = 12290;
  private static final int GL_CLIP_DISTANCE2_APPLE = 12290;
  private static final int GL_CLIP_PLANE2 = 12290;
  private static final int GL_CLIP_PLANE2_IMG = 12290;
  private static final int GL_CLIP_DISTANCE3 = 12291;
  private static final int GL_CLIP_PLANE3_IMG = 12291;
  private static final int GL_CLIP_DISTANCE3_APPLE = 12291;
  private static final int GL_CLIP_PLANE3 = 12291;
  private static final int GL_CLIP_DISTANCE4 = 12292;
  private static final int GL_CLIP_DISTANCE4_APPLE = 12292;
  private static final int GL_CLIP_PLANE4_IMG = 12292;
  private static final int GL_CLIP_PLANE4 = 12292;
  private static final int GL_CLIP_DISTANCE5 = 12293;
  private static final int GL_CLIP_DISTANCE5_APPLE = 12293;
  private static final int GL_CLIP_PLANE5_IMG = 12293;
  private static final int GL_CLIP_PLANE5 = 12293;
  private static final int GL_CLIP_DISTANCE6 = 12294;
  private static final int GL_CLIP_DISTANCE6_APPLE = 12294;
  private static final int GL_CLIP_DISTANCE7 = 12295;
  private static final int GL_CLIP_DISTANCE7_APPLE = 12295;
  private static final int GL_LIGHT0 = 16384;
  private static final int GL_DEPTH_BUFFER_BIT6_QCOM = 16384;
  private static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384;
  private static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 16384;
  private static final int GL_COLOR_BUFFER_BIT = 16384;
  private static final int GL_LIGHT1 = 16385;
  private static final int GL_LIGHT2 = 16386;
  private static final int GL_LIGHT3 = 16387;
  private static final int GL_LIGHT4 = 16388;
  private static final int GL_LIGHT5 = 16389;
  private static final int GL_LIGHT6 = 16390;
  private static final int GL_LIGHT7 = 16391;
  private static final int GL_DEPTH_BUFFER_BIT7_QCOM = 32768;
  private static final int GL_QUERY_BUFFER_BARRIER_BIT = 32768;
  private static final int GL_HINT_BIT = 32768;
  private static final int GL_COVERAGE_BUFFER_BIT_NV = 32768;
  private static final int GL_CONSTANT_COLOR = 32769;
  private static final int GL_ONE_MINUS_CONSTANT_COLOR = 32770;
  private static final int GL_CONSTANT_ALPHA = 32771;
  private static final int GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
  private static final int GL_BLEND_COLOR = 32773;
  private static final int GL_FUNC_ADD = 32774;
  private static final int GL_FUNC_ADD_OES = 32774;
  private static final int GL_FUNC_ADD_EXT = 32774;
  private static final int GL_MIN_EXT = 32775;
  private static final int GL_MIN = 32775;
  private static final int GL_MAX_EXT = 32776;
  private static final int GL_MAX = 32776;
  private static final int GL_BLEND_EQUATION_RGB = 32777;
  private static final int GL_BLEND_EQUATION_EXT = 32777;
  private static final int GL_BLEND_EQUATION = 32777;
  private static final int GL_BLEND_EQUATION_OES = 32777;
  private static final int GL_BLEND_EQUATION_RGB_OES = 32777;
  private static final int GL_BLEND_EQUATION_RGB_EXT = 32777;
  private static final int GL_FUNC_SUBTRACT_OES = 32778;
  private static final int GL_FUNC_SUBTRACT = 32778;
  private static final int GL_FUNC_REVERSE_SUBTRACT_OES = 32779;
  private static final int GL_FUNC_REVERSE_SUBTRACT = 32779;
  private static final int GL_CONVOLUTION_1D = 32784;
  private static final int GL_CONVOLUTION_1D_EXT = 32784;
  private static final int GL_CONVOLUTION_2D_EXT = 32785;
  private static final int GL_CONVOLUTION_2D = 32785;
  private static final int GL_SEPARABLE_2D_EXT = 32786;
  private static final int GL_SEPARABLE_2D = 32786;
  private static final int GL_CONVOLUTION_BORDER_MODE_EXT = 32787;
  private static final int GL_CONVOLUTION_BORDER_MODE = 32787;
  private static final int GL_CONVOLUTION_FILTER_SCALE_EXT = 32788;
  private static final int GL_CONVOLUTION_FILTER_SCALE = 32788;
  private static final int GL_CONVOLUTION_FILTER_BIAS_EXT = 32789;
  private static final int GL_CONVOLUTION_FILTER_BIAS = 32789;
  private static final int GL_REDUCE = 32790;
  private static final int GL_REDUCE_EXT = 32790;
  private static final int GL_CONVOLUTION_FORMAT_EXT = 32791;
  private static final int GL_CONVOLUTION_FORMAT = 32791;
  private static final int GL_CONVOLUTION_WIDTH = 32792;
  private static final int GL_CONVOLUTION_WIDTH_EXT = 32792;
  private static final int GL_CONVOLUTION_HEIGHT = 32793;
  private static final int GL_CONVOLUTION_HEIGHT_EXT = 32793;
  private static final int GL_MAX_CONVOLUTION_WIDTH_EXT = 32794;
  private static final int GL_MAX_CONVOLUTION_WIDTH = 32794;
  private static final int GL_MAX_CONVOLUTION_HEIGHT_EXT = 32795;
  private static final int GL_MAX_CONVOLUTION_HEIGHT = 32795;
  private static final int GL_POST_CONVOLUTION_RED_SCALE_EXT = 32796;
  private static final int GL_POST_CONVOLUTION_RED_SCALE = 32796;
  private static final int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 32797;
  private static final int GL_POST_CONVOLUTION_GREEN_SCALE = 32797;
  private static final int GL_POST_CONVOLUTION_BLUE_SCALE = 32798;
  private static final int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 32798;
  private static final int GL_POST_CONVOLUTION_ALPHA_SCALE = 32799;
  private static final int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799;
  private static final int GL_POST_CONVOLUTION_RED_BIAS_EXT = 32800;
  private static final int GL_POST_CONVOLUTION_RED_BIAS = 32800;
  private static final int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 32801;
  private static final int GL_POST_CONVOLUTION_GREEN_BIAS = 32801;
  private static final int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 32802;
  private static final int GL_POST_CONVOLUTION_BLUE_BIAS = 32802;
  private static final int GL_POST_CONVOLUTION_ALPHA_BIAS = 32803;
  private static final int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803;
  private static final int GL_HISTOGRAM_EXT = 32804;
  private static final int GL_HISTOGRAM = 32804;
  private static final int GL_PROXY_HISTOGRAM_EXT = 32805;
  private static final int GL_PROXY_HISTOGRAM = 32805;
  private static final int GL_HISTOGRAM_WIDTH = 32806;
  private static final int GL_HISTOGRAM_WIDTH_EXT = 32806;
  private static final int GL_HISTOGRAM_FORMAT_EXT = 32807;
  private static final int GL_HISTOGRAM_FORMAT = 32807;
  private static final int GL_HISTOGRAM_RED_SIZE_EXT = 32808;
  private static final int GL_HISTOGRAM_RED_SIZE = 32808;
  private static final int GL_HISTOGRAM_GREEN_SIZE_EXT = 32809;
  private static final int GL_HISTOGRAM_GREEN_SIZE = 32809;
  private static final int GL_HISTOGRAM_BLUE_SIZE_EXT = 32810;
  private static final int GL_HISTOGRAM_BLUE_SIZE = 32810;
  private static final int GL_HISTOGRAM_ALPHA_SIZE = 32811;
  private static final int GL_HISTOGRAM_ALPHA_SIZE_EXT = 32811;
  private static final int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 32812;
  private static final int GL_HISTOGRAM_LUMINANCE_SIZE = 32812;
  private static final int GL_HISTOGRAM_SINK_EXT = 32813;
  private static final int GL_HISTOGRAM_SINK = 32813;
  private static final int GL_MINMAX = 32814;
  private static final int GL_MINMAX_EXT = 32814;
  private static final int GL_MINMAX_FORMAT = 32815;
  private static final int GL_MINMAX_FORMAT_EXT = 32815;
  private static final int GL_MINMAX_SINK = 32816;
  private static final int GL_MINMAX_SINK_EXT = 32816;
  private static final int GL_TABLE_TOO_LARGE_EXT = 32817;
  private static final int GL_TABLE_TOO_LARGE = 32817;
  private static final int GL_UNSIGNED_BYTE_3_3_2 = 32818;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
  private static final int GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
  private static final int GL_UNSIGNED_INT_8_8_8_8 = 32821;
  private static final int GL_UNSIGNED_INT_10_10_10_2 = 32822;
  private static final int GL_POLYGON_OFFSET_FILL = 32823;
  private static final int GL_POLYGON_OFFSET_FACTOR = 32824;
  private static final int GL_RESCALE_NORMAL = 32826;
  private static final int GL_ALPHA4 = 32827;
  private static final int GL_ALPHA8 = 32828;
  private static final int GL_ALPHA8_EXT = 32828;
  private static final int GL_ALPHA12 = 32829;
  private static final int GL_ALPHA16 = 32830;
  private static final int GL_LUMINANCE4 = 32831;
  private static final int GL_LUMINANCE8 = 32832;
  private static final int GL_LUMINANCE8_EXT = 32832;
  private static final int GL_LUMINANCE12 = 32833;
  private static final int GL_LUMINANCE16 = 32834;
  private static final int GL_LUMINANCE4_ALPHA4 = 32835;
  private static final int GL_LUMINANCE6_ALPHA2 = 32836;
  private static final int GL_LUMINANCE8_ALPHA8 = 32837;
  private static final int GL_LUMINANCE8_ALPHA8_EXT = 32837;
  private static final int GL_LUMINANCE12_ALPHA4 = 32838;
  private static final int GL_LUMINANCE12_ALPHA12 = 32839;
  private static final int GL_LUMINANCE16_ALPHA16 = 32840;
  private static final int GL_INTENSITY = 32841;
  private static final int GL_INTENSITY4 = 32842;
  private static final int GL_INTENSITY8 = 32843;
  private static final int GL_INTENSITY12 = 32844;
  private static final int GL_INTENSITY16 = 32845;
  private static final int GL_RGB4 = 32847;
  private static final int GL_RGB5 = 32848;
  private static final int GL_RGB8 = 32849;
  private static final int GL_RGB10_EXT = 32850;
  private static final int GL_RGB10 = 32850;
  private static final int GL_RGB12 = 32851;
  private static final int GL_RGB16 = 32852;
  private static final int GL_RGBA2 = 32853;
  private static final int GL_RGBA4 = 32854;
  private static final int GL_RGBA4_OES = 32854;
  private static final int GL_RGB5_A1 = 32855;
  private static final int GL_RGB5_A1_OES = 32855;
  private static final int GL_RGBA8 = 32856;
  private static final int GL_RGB10_A2 = 32857;
  private static final int GL_RGB10_A2_EXT = 32857;
  private static final int GL_RGBA12 = 32858;
  private static final int GL_RGBA16 = 32859;
  private static final int GL_TEXTURE_RED_SIZE = 32860;
  private static final int GL_TEXTURE_GREEN_SIZE = 32861;
  private static final int GL_TEXTURE_BLUE_SIZE = 32862;
  private static final int GL_TEXTURE_ALPHA_SIZE = 32863;
  private static final int GL_TEXTURE_LUMINANCE_SIZE = 32864;
  private static final int GL_TEXTURE_INTENSITY_SIZE = 32865;
  private static final int GL_PROXY_TEXTURE_1D = 32867;
  private static final int GL_PROXY_TEXTURE_2D = 32868;
  private static final int GL_TEXTURE_PRIORITY = 32870;
  private static final int GL_TEXTURE_PRIORITY_EXT = 32870;
  private static final int GL_TEXTURE_RESIDENT = 32871;
  private static final int GL_TEXTURE_RESIDENT_EXT = 32871;
  private static final int GL_TEXTURE_1D_BINDING_EXT = 32872;
  private static final int GL_TEXTURE_BINDING_1D = 32872;
  private static final int GL_TEXTURE_2D_BINDING_EXT = 32873;
  private static final int GL_TEXTURE_BINDING_2D = 32873;
  private static final int GL_TEXTURE_BINDING_3D_OES = 32874;
  private static final int GL_TEXTURE_3D_BINDING_EXT = 32874;
  private static final int GL_TEXTURE_BINDING_3D = 32874;
  private static final int GL_PACK_SKIP_IMAGES = 32875;
  private static final int GL_PACK_SKIP_IMAGES_EXT = 32875;
  private static final int GL_PACK_IMAGE_HEIGHT = 32876;
  private static final int GL_PACK_IMAGE_HEIGHT_EXT = 32876;
  private static final int GL_UNPACK_SKIP_IMAGES = 32877;
  private static final int GL_UNPACK_SKIP_IMAGES_EXT = 32877;
  private static final int GL_UNPACK_IMAGE_HEIGHT_EXT = 32878;
  private static final int GL_UNPACK_IMAGE_HEIGHT = 32878;
  private static final int GL_TEXTURE_3D = 32879;
  private static final int GL_TEXTURE_3D_OES = 32879;
  private static final int GL_TEXTURE_3D_EXT = 32879;
  private static final int GL_PROXY_TEXTURE_3D_EXT = 32880;
  private static final int GL_PROXY_TEXTURE_3D = 32880;
  private static final int GL_TEXTURE_DEPTH_EXT = 32881;
  private static final int GL_TEXTURE_DEPTH = 32881;
  private static final int GL_TEXTURE_WRAP_R_EXT = 32882;
  private static final int GL_TEXTURE_WRAP_R = 32882;
  private static final int GL_TEXTURE_WRAP_R_OES = 32882;
  private static final int GL_MAX_3D_TEXTURE_SIZE_EXT = 32883;
  private static final int GL_MAX_3D_TEXTURE_SIZE = 32883;
  private static final int GL_MAX_3D_TEXTURE_SIZE_OES = 32883;
  private static final int GL_VERTEX_ARRAY_KHR = 32884;
  private static final int GL_VERTEX_ARRAY = 32884;
  private static final int GL_VERTEX_ARRAY_EXT = 32884;
  private static final int GL_NORMAL_ARRAY_EXT = 32885;
  private static final int GL_NORMAL_ARRAY = 32885;
  private static final int GL_COLOR_ARRAY_EXT = 32886;
  private static final int GL_COLOR_ARRAY = 32886;
  private static final int GL_INDEX_ARRAY_EXT = 32887;
  private static final int GL_INDEX_ARRAY = 32887;
  private static final int GL_TEXTURE_COORD_ARRAY = 32888;
  private static final int GL_TEXTURE_COORD_ARRAY_EXT = 32888;
  private static final int GL_EDGE_FLAG_ARRAY_EXT = 32889;
  private static final int GL_EDGE_FLAG_ARRAY = 32889;
  private static final int GL_VERTEX_ARRAY_SIZE = 32890;
  private static final int GL_VERTEX_ARRAY_SIZE_EXT = 32890;
  private static final int GL_VERTEX_ARRAY_TYPE = 32891;
  private static final int GL_VERTEX_ARRAY_TYPE_EXT = 32891;
  private static final int GL_VERTEX_ARRAY_STRIDE_EXT = 32892;
  private static final int GL_VERTEX_ARRAY_STRIDE = 32892;
  private static final int GL_VERTEX_ARRAY_COUNT_EXT = 32893;
  private static final int GL_NORMAL_ARRAY_TYPE_EXT = 32894;
  private static final int GL_NORMAL_ARRAY_TYPE = 32894;
  private static final int GL_NORMAL_ARRAY_STRIDE = 32895;
  private static final int GL_NORMAL_ARRAY_STRIDE_EXT = 32895;
  private static final int GL_NORMAL_ARRAY_COUNT_EXT = 32896;
  private static final int GL_COLOR_ARRAY_SIZE_EXT = 32897;
  private static final int GL_COLOR_ARRAY_SIZE = 32897;
  private static final int GL_COLOR_ARRAY_TYPE = 32898;
  private static final int GL_COLOR_ARRAY_TYPE_EXT = 32898;
  private static final int GL_COLOR_ARRAY_STRIDE_EXT = 32899;
  private static final int GL_COLOR_ARRAY_STRIDE = 32899;
  private static final int GL_COLOR_ARRAY_COUNT_EXT = 32900;
  private static final int GL_INDEX_ARRAY_TYPE = 32901;
  private static final int GL_INDEX_ARRAY_TYPE_EXT = 32901;
  private static final int GL_INDEX_ARRAY_STRIDE = 32902;
  private static final int GL_INDEX_ARRAY_STRIDE_EXT = 32902;
  private static final int GL_INDEX_ARRAY_COUNT_EXT = 32903;
  private static final int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;
  private static final int GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
  private static final int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;
  private static final int GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
  private static final int GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
  private static final int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;
  private static final int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;
  private static final int GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
  private static final int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;
  private static final int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;
  private static final int GL_VERTEX_ARRAY_POINTER = 32910;
  private static final int GL_VERTEX_ARRAY_POINTER_EXT = 32910;
  private static final int GL_NORMAL_ARRAY_POINTER_EXT = 32911;
  private static final int GL_NORMAL_ARRAY_POINTER = 32911;
  private static final int GL_COLOR_ARRAY_POINTER = 32912;
  private static final int GL_COLOR_ARRAY_POINTER_EXT = 32912;
  private static final int GL_INDEX_ARRAY_POINTER_EXT = 32913;
  private static final int GL_INDEX_ARRAY_POINTER = 32913;
  private static final int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;
  private static final int GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
  private static final int GL_EDGE_FLAG_ARRAY_POINTER = 32915;
  private static final int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;
  private static final int GL_INTERLACE_SGIX = 32916;
  private static final int GL_DETAIL_TEXTURE_2D_SGIS = 32917;
  private static final int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 32918;
  private static final int GL_LINEAR_DETAIL_SGIS = 32919;
  private static final int GL_LINEAR_DETAIL_ALPHA_SGIS = 32920;
  private static final int GL_LINEAR_DETAIL_COLOR_SGIS = 32921;
  private static final int GL_DETAIL_TEXTURE_LEVEL_SGIS = 32922;
  private static final int GL_DETAIL_TEXTURE_MODE_SGIS = 32923;
  private static final int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924;
  private static final int GL_MULTISAMPLE_EXT = 32925;
  private static final int GL_MULTISAMPLE_SGIS = 32925;
  private static final int GL_MULTISAMPLE = 32925;
  private static final int GL_MULTISAMPLE_ARB = 32925;
  private static final int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926;
  private static final int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 32926;
  private static final int GL_SAMPLE_ALPHA_TO_MASK_EXT = 32926;
  private static final int GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
  private static final int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 32927;
  private static final int GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927;
  private static final int GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927;
  private static final int GL_SAMPLE_ALPHA_TO_ONE = 32927;
  private static final int GL_SAMPLE_MASK_SGIS = 32928;
  private static final int GL_SAMPLE_COVERAGE_ARB = 32928;
  private static final int GL_SAMPLE_COVERAGE = 32928;
  private static final int GL_SAMPLE_MASK_EXT = 32928;
  private static final int GL_1PASS_EXT = 32929;
  private static final int GL_1PASS_SGIS = 32929;
  private static final int GL_2PASS_0_EXT = 32930;
  private static final int GL_2PASS_0_SGIS = 32930;
  private static final int GL_2PASS_1_SGIS = 32931;
  private static final int GL_2PASS_1_EXT = 32931;
  private static final int GL_4PASS_0_SGIS = 32932;
  private static final int GL_4PASS_0_EXT = 32932;
  private static final int GL_4PASS_1_EXT = 32933;
  private static final int GL_4PASS_1_SGIS = 32933;
  private static final int GL_4PASS_2_EXT = 32934;
  private static final int GL_4PASS_2_SGIS = 32934;
  private static final int GL_4PASS_3_EXT = 32935;
  private static final int GL_4PASS_3_SGIS = 32935;
  private static final int GL_SAMPLE_BUFFERS_SGIS = 32936;
  private static final int GL_SAMPLE_BUFFERS_ARB = 32936;
  private static final int GL_SAMPLE_BUFFERS = 32936;
  private static final int GL_SAMPLE_BUFFERS_EXT = 32936;
  private static final int GL_SAMPLES_SGIS = 32937;
  private static final int GL_SAMPLES_ARB = 32937;
  private static final int GL_SAMPLES = 32937;
  private static final int GL_SAMPLES_EXT = 32937;
  private static final int GL_SAMPLE_COVERAGE_VALUE = 32938;
  private static final int GL_SAMPLE_MASK_VALUE_SGIS = 32938;
  private static final int GL_SAMPLE_MASK_VALUE_EXT = 32938;
  private static final int GL_SAMPLE_COVERAGE_VALUE_ARB = 32938;
  private static final int GL_SAMPLE_MASK_INVERT_EXT = 32939;
  private static final int GL_SAMPLE_COVERAGE_INVERT_ARB = 32939;
  private static final int GL_SAMPLE_MASK_INVERT_SGIS = 32939;
  private static final int GL_SAMPLE_COVERAGE_INVERT = 32939;
  private static final int GL_SAMPLE_PATTERN_SGIS = 32940;
  private static final int GL_SAMPLE_PATTERN_EXT = 32940;
  private static final int GL_LINEAR_SHARPEN_SGIS = 32941;
  private static final int GL_LINEAR_SHARPEN_ALPHA_SGIS = 32942;
  private static final int GL_LINEAR_SHARPEN_COLOR_SGIS = 32943;
  private static final int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944;
  private static final int GL_COLOR_MATRIX = 32945;
  private static final int GL_COLOR_MATRIX_SGI = 32945;
  private static final int GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946;
  private static final int GL_COLOR_MATRIX_STACK_DEPTH = 32946;
  private static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947;
  private static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947;
  private static final int GL_POST_COLOR_MATRIX_RED_SCALE = 32948;
  private static final int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948;
  private static final int GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949;
  private static final int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949;
  private static final int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950;
  private static final int GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951;
  private static final int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952;
  private static final int GL_POST_COLOR_MATRIX_RED_BIAS = 32952;
  private static final int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953;
  private static final int GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953;
  private static final int GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954;
  private static final int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955;
  private static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955;
  private static final int GL_TEXTURE_COLOR_TABLE_SGI = 32956;
  private static final int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 32957;
  private static final int GL_TEXTURE_ENV_BIAS_SGIX = 32958;
  private static final int GL_SHADOW_AMBIENT_SGIX = 32959;
  private static final int GL_BLEND_DST_RGB_OES = 32968;
  private static final int GL_BLEND_DST_RGB_EXT = 32968;
  private static final int GL_BLEND_DST_RGB = 32968;
  private static final int GL_BLEND_SRC_RGB_OES = 32969;
  private static final int GL_BLEND_SRC_RGB_EXT = 32969;
  private static final int GL_BLEND_SRC_RGB = 32969;
  private static final int GL_BLEND_DST_ALPHA_EXT = 32970;
  private static final int GL_BLEND_DST_ALPHA = 32970;
  private static final int GL_BLEND_DST_ALPHA_OES = 32970;
  private static final int GL_BLEND_SRC_ALPHA_OES = 32971;
  private static final int GL_BLEND_SRC_ALPHA_EXT = 32971;
  private static final int GL_BLEND_SRC_ALPHA = 32971;
  private static final int GL_COLOR_TABLE_SGI = 32976;
  private static final int GL_COLOR_TABLE = 32976;
  private static final int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 32977;
  private static final int GL_POST_CONVOLUTION_COLOR_TABLE = 32977;
  private static final int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978;
  private static final int GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978;
  private static final int GL_PROXY_COLOR_TABLE_SGI = 32979;
  private static final int GL_PROXY_COLOR_TABLE = 32979;
  private static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980;
  private static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980;
  private static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981;
  private static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981;
  private static final int GL_COLOR_TABLE_SCALE_SGI = 32982;
  private static final int GL_COLOR_TABLE_SCALE = 32982;
  private static final int GL_COLOR_TABLE_BIAS_SGI = 32983;
  private static final int GL_COLOR_TABLE_BIAS = 32983;
  private static final int GL_COLOR_TABLE_FORMAT_SGI = 32984;
  private static final int GL_COLOR_TABLE_FORMAT = 32984;
  private static final int GL_COLOR_TABLE_WIDTH_SGI = 32985;
  private static final int GL_COLOR_TABLE_WIDTH = 32985;
  private static final int GL_COLOR_TABLE_RED_SIZE_SGI = 32986;
  private static final int GL_COLOR_TABLE_RED_SIZE = 32986;
  private static final int GL_COLOR_TABLE_GREEN_SIZE_SGI = 32987;
  private static final int GL_COLOR_TABLE_GREEN_SIZE = 32987;
  private static final int GL_COLOR_TABLE_BLUE_SIZE = 32988;
  private static final int GL_COLOR_TABLE_BLUE_SIZE_SGI = 32988;
  private static final int GL_COLOR_TABLE_ALPHA_SIZE = 32989;
  private static final int GL_COLOR_TABLE_ALPHA_SIZE_SGI = 32989;
  private static final int GL_COLOR_TABLE_LUMINANCE_SIZE = 32990;
  private static final int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990;
  private static final int GL_COLOR_TABLE_INTENSITY_SIZE = 32991;
  private static final int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 32991;
  private static final int GL_BGR = 32992;
  private static final int GL_BGRA_IMG = 32993;
  private static final int GL_BGRA = 32993;
  private static final int GL_COLOR_INDEX1_EXT = 32994;
  private static final int GL_COLOR_INDEX2_EXT = 32995;
  private static final int GL_COLOR_INDEX4_EXT = 32996;
  private static final int GL_COLOR_INDEX8_EXT = 32997;
  private static final int GL_COLOR_INDEX12_EXT = 32998;
  private static final int GL_COLOR_INDEX16_EXT = 32999;
  private static final int GL_MAX_ELEMENTS_VERTICES = 33000;
  private static final int GL_MAX_ELEMENTS_VERTICES_EXT = 33000;
  private static final int GL_MAX_ELEMENTS_INDICES_EXT = 33001;
  private static final int GL_MAX_ELEMENTS_INDICES = 33001;
  private static final int GL_PHONG_WIN = 33002;
  private static final int GL_PHONG_HINT_WIN = 33003;
  private static final int GL_FOG_SPECULAR_TEXTURE_WIN = 33004;
  private static final int GL_TEXTURE_INDEX_SIZE_EXT = 33005;
  private static final int GL_PARAMETER_BUFFER_ARB = 33006;
  private static final int GL_PARAMETER_BUFFER = 33006;
  private static final int GL_PARAMETER_BUFFER_BINDING = 33007;
  private static final int GL_PARAMETER_BUFFER_BINDING_ARB = 33007;
  private static final int GL_DUAL_ALPHA4_SGIS = 33040;
  private static final int GL_DUAL_ALPHA8_SGIS = 33041;
  private static final int GL_DUAL_ALPHA12_SGIS = 33042;
  private static final int GL_DUAL_ALPHA16_SGIS = 33043;
  private static final int GL_DUAL_LUMINANCE4_SGIS = 33044;
  private static final int GL_DUAL_LUMINANCE8_SGIS = 33045;
  private static final int GL_DUAL_LUMINANCE12_SGIS = 33046;
  private static final int GL_DUAL_LUMINANCE16_SGIS = 33047;
  private static final int GL_DUAL_INTENSITY4_SGIS = 33048;
  private static final int GL_DUAL_INTENSITY8_SGIS = 33049;
  private static final int GL_DUAL_INTENSITY12_SGIS = 33050;
  private static final int GL_DUAL_INTENSITY16_SGIS = 33051;
  private static final int GL_DUAL_LUMINANCE_ALPHA4_SGIS = 33052;
  private static final int GL_DUAL_LUMINANCE_ALPHA8_SGIS = 33053;
  private static final int GL_QUAD_ALPHA4_SGIS = 33054;
  private static final int GL_QUAD_ALPHA8_SGIS = 33055;
  private static final int GL_QUAD_LUMINANCE4_SGIS = 33056;
  private static final int GL_QUAD_LUMINANCE8_SGIS = 33057;
  private static final int GL_QUAD_INTENSITY4_SGIS = 33058;
  private static final int GL_QUAD_INTENSITY8_SGIS = 33059;
  private static final int GL_DUAL_TEXTURE_SELECT_SGIS = 33060;
  private static final int GL_QUAD_TEXTURE_SELECT_SGIS = 33061;
  private static final int GL_POINT_SIZE_MIN = 33062;
  private static final int GL_POINT_SIZE_MIN_SGIS = 33062;
  private static final int GL_POINT_SIZE_MIN_EXT = 33062;
  private static final int GL_POINT_SIZE_MIN_ARB = 33062;
  private static final int GL_POINT_SIZE_MAX = 33063;
  private static final int GL_POINT_SIZE_MAX_ARB = 33063;
  private static final int GL_POINT_SIZE_MAX_SGIS = 33063;
  private static final int GL_POINT_SIZE_MAX_EXT = 33063;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 33064;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 33064;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE = 33064;
  private static final int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064;
  private static final int GL_DISTANCE_ATTENUATION_SGIS = 33065;
  private static final int GL_POINT_DISTANCE_ATTENUATION_ARB = 33065;
  private static final int GL_DISTANCE_ATTENUATION_EXT = 33065;
  private static final int GL_POINT_DISTANCE_ATTENUATION = 33065;
  private static final int GL_FOG_FUNC_SGIS = 33066;
  private static final int GL_FOG_FUNC_POINTS_SGIS = 33067;
  private static final int GL_MAX_FOG_FUNC_POINTS_SGIS = 33068;
  private static final int GL_CLAMP_TO_BORDER_OES = 33069;
  private static final int GL_CLAMP_TO_BORDER_EXT = 33069;
  private static final int GL_CLAMP_TO_BORDER_SGIS = 33069;
  private static final int GL_CLAMP_TO_BORDER = 33069;
  private static final int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070;
  private static final int GL_CLAMP_TO_EDGE = 33071;
  private static final int GL_CLAMP_TO_EDGE_SGIS = 33071;
  private static final int GL_PACK_SKIP_VOLUMES_SGIS = 33072;
  private static final int GL_PACK_IMAGE_DEPTH_SGIS = 33073;
  private static final int GL_UNPACK_SKIP_VOLUMES_SGIS = 33074;
  private static final int GL_UNPACK_IMAGE_DEPTH_SGIS = 33075;
  private static final int GL_TEXTURE_4D_SGIS = 33076;
  private static final int GL_PROXY_TEXTURE_4D_SGIS = 33077;
  private static final int GL_TEXTURE_4DSIZE_SGIS = 33078;
  private static final int GL_TEXTURE_WRAP_Q_SGIS = 33079;
  private static final int GL_MAX_4D_TEXTURE_SIZE_SGIS = 33080;
  private static final int GL_PIXEL_TEX_GEN_SGIX = 33081;
  private static final int GL_TEXTURE_MIN_LOD = 33082;
  private static final int GL_TEXTURE_MIN_LOD_SGIS = 33082;
  private static final int GL_TEXTURE_MAX_LOD_SGIS = 33083;
  private static final int GL_TEXTURE_MAX_LOD = 33083;
  private static final int GL_TEXTURE_BASE_LEVEL_SGIS = 33084;
  private static final int GL_TEXTURE_BASE_LEVEL = 33084;
  private static final int GL_TEXTURE_MAX_LEVEL_SGIS = 33085;
  private static final int GL_TEXTURE_MAX_LEVEL = 33085;
  private static final int GL_TEXTURE_MAX_LEVEL_APPLE = 33085;
  private static final int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086;
  private static final int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087;
  private static final int GL_PIXEL_TILE_WIDTH_SGIX = 33088;
  private static final int GL_PIXEL_TILE_HEIGHT_SGIX = 33089;
  private static final int GL_PIXEL_TILE_GRID_WIDTH_SGIX = 33090;
  private static final int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 33091;
  private static final int GL_PIXEL_TILE_GRID_DEPTH_SGIX = 33092;
  private static final int GL_PIXEL_TILE_CACHE_SIZE_SGIX = 33093;
  private static final int GL_FILTER4_SGIS = 33094;
  private static final int GL_TEXTURE_FILTER4_SIZE_SGIS = 33095;
  private static final int GL_SPRITE_SGIX = 33096;
  private static final int GL_SPRITE_MODE_SGIX = 33097;
  private static final int GL_SPRITE_AXIS_SGIX = 33098;
  private static final int GL_SPRITE_TRANSLATION_SGIX = 33099;
  private static final int GL_SPRITE_AXIAL_SGIX = 33100;
  private static final int GL_SPRITE_OBJECT_ALIGNED_SGIX = 33101;
  private static final int GL_SPRITE_EYE_ALIGNED_SGIX = 33102;
  private static final int GL_TEXTURE_4D_BINDING_SGIS = 33103;
  private static final int GL_IGNORE_BORDER_HP = 33104;
  private static final int GL_CONSTANT_BORDER = 33105;
  private static final int GL_CONSTANT_BORDER_HP = 33105;
  private static final int GL_REPLICATE_BORDER = 33107;
  private static final int GL_REPLICATE_BORDER_HP = 33107;
  private static final int GL_CONVOLUTION_BORDER_COLOR_HP = 33108;
  private static final int GL_CONVOLUTION_BORDER_COLOR = 33108;
  private static final int GL_IMAGE_SCALE_X_HP = 33109;
  private static final int GL_IMAGE_SCALE_Y_HP = 33110;
  private static final int GL_IMAGE_TRANSLATE_X_HP = 33111;
  private static final int GL_IMAGE_TRANSLATE_Y_HP = 33112;
  private static final int GL_IMAGE_ROTATE_ANGLE_HP = 33113;
  private static final int GL_IMAGE_ROTATE_ORIGIN_X_HP = 33114;
  private static final int GL_IMAGE_ROTATE_ORIGIN_Y_HP = 33115;
  private static final int GL_IMAGE_MAG_FILTER_HP = 33116;
  private static final int GL_IMAGE_MIN_FILTER_HP = 33117;
  private static final int GL_IMAGE_CUBIC_WEIGHT_HP = 33118;
  private static final int GL_CUBIC_HP = 33119;
  private static final int GL_AVERAGE_HP = 33120;
  private static final int GL_IMAGE_TRANSFORM_2D_HP = 33121;
  private static final int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122;
  private static final int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123;
  private static final int GL_OCCLUSION_TEST_HP = 33125;
  private static final int GL_OCCLUSION_TEST_RESULT_HP = 33126;
  private static final int GL_TEXTURE_LIGHTING_MODE_HP = 33127;
  private static final int GL_TEXTURE_POST_SPECULAR_HP = 33128;
  private static final int GL_TEXTURE_PRE_SPECULAR_HP = 33129;
  private static final int GL_LINEAR_CLIPMAP_LINEAR_SGIX = 33136;
  private static final int GL_TEXTURE_CLIPMAP_CENTER_SGIX = 33137;
  private static final int GL_TEXTURE_CLIPMAP_FRAME_SGIX = 33138;
  private static final int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 33139;
  private static final int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140;
  private static final int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141;
  private static final int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 33142;
  private static final int GL_MAX_CLIPMAP_DEPTH_SGIX = 33143;
  private static final int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144;
  private static final int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 33145;
  private static final int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 33146;
  private static final int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147;
  private static final int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148;
  private static final int GL_REFERENCE_PLANE_SGIX = 33149;
  private static final int GL_REFERENCE_PLANE_EQUATION_SGIX = 33150;
  private static final int GL_IR_INSTRUMENT1_SGIX = 33151;
  private static final int GL_INSTRUMENT_BUFFER_POINTER_SGIX = 33152;
  private static final int GL_INSTRUMENT_MEASUREMENTS_SGIX = 33153;
  private static final int GL_LIST_PRIORITY_SGIX = 33154;
  private static final int GL_CALLIGRAPHIC_FRAGMENT_SGIX = 33155;
  private static final int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 33156;
  private static final int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 33157;
  private static final int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 33158;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 33159;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 33160;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 33161;
  private static final int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 33162;
  private static final int GL_FRAMEZOOM_SGIX = 33163;
  private static final int GL_FRAMEZOOM_FACTOR_SGIX = 33164;
  private static final int GL_MAX_FRAMEZOOM_FACTOR_SGIX = 33165;
  private static final int GL_TEXTURE_LOD_BIAS_S_SGIX = 33166;
  private static final int GL_TEXTURE_LOD_BIAS_T_SGIX = 33167;
  private static final int GL_TEXTURE_LOD_BIAS_R_SGIX = 33168;
  private static final int GL_GENERATE_MIPMAP_SGIS = 33169;
  private static final int GL_GENERATE_MIPMAP = 33169;
  private static final int GL_GENERATE_MIPMAP_HINT_SGIS = 33170;
  private static final int GL_GENERATE_MIPMAP_HINT = 33170;
  private static final int GL_GEOMETRY_DEFORMATION_SGIX = 33172;
  private static final int GL_TEXTURE_DEFORMATION_SGIX = 33173;
  private static final int GL_DEFORMATIONS_MASK_SGIX = 33174;
  private static final int GL_MAX_DEFORMATION_ORDER_SGIX = 33175;
  private static final int GL_FOG_OFFSET_SGIX = 33176;
  private static final int GL_FOG_OFFSET_VALUE_SGIX = 33177;
  private static final int GL_TEXTURE_COMPARE_SGIX = 33178;
  private static final int GL_TEXTURE_COMPARE_OPERATOR_SGIX = 33179;
  private static final int GL_TEXTURE_LEQUAL_R_SGIX = 33180;
  private static final int GL_TEXTURE_GEQUAL_R_SGIX = 33181;
  private static final int GL_DEPTH_COMPONENT16_SGIX = 33189;
  private static final int GL_DEPTH_COMPONENT16_OES = 33189;
  private static final int GL_DEPTH_COMPONENT16 = 33189;
  private static final int GL_DEPTH_COMPONENT24_SGIX = 33190;
  private static final int GL_DEPTH_COMPONENT24 = 33190;
  private static final int GL_DEPTH_COMPONENT32_SGIX = 33191;
  private static final int GL_DEPTH_COMPONENT32 = 33191;
  private static final int GL_CULL_VERTEX_EXT = 33194;
  private static final int GL_CULL_VERTEX_EYE_POSITION_EXT = 33195;
  private static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 33196;
  private static final int GL_INDEX_TEST_EXT = 33205;
  private static final int GL_INDEX_TEST_FUNC_EXT = 33206;
  private static final int GL_INDEX_TEST_REF_EXT = 33207;
  private static final int GL_INDEX_MATERIAL_EXT = 33208;
  private static final int GL_INDEX_MATERIAL_PARAMETER_EXT = 33209;
  private static final int GL_INDEX_MATERIAL_FACE_EXT = 33210;
  private static final int GL_YCRCB_422_SGIX = 33211;
  private static final int GL_YCRCB_444_SGIX = 33212;
  private static final int GL_WRAP_BORDER_SUN = 33236;
  private static final int GL_UNPACK_CONSTANT_DATA_SUNX = 33237;
  private static final int GL_TEXTURE_CONSTANT_DATA_SUNX = 33238;
  private static final int GL_TRIANGLE_LIST_SUN = 33239;
  private static final int GL_REPLACEMENT_CODE_SUN = 33240;
  private static final int GL_GLOBAL_ALPHA_SUN = 33241;
  private static final int GL_GLOBAL_ALPHA_FACTOR_SUN = 33242;
  private static final int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 33263;
  private static final int GL_EYE_DISTANCE_TO_POINT_SGIS = 33264;
  private static final int GL_OBJECT_DISTANCE_TO_POINT_SGIS = 33265;
  private static final int GL_EYE_DISTANCE_TO_LINE_SGIS = 33266;
  private static final int GL_OBJECT_DISTANCE_TO_LINE_SGIS = 33267;
  private static final int GL_EYE_POINT_SGIS = 33268;
  private static final int GL_OBJECT_POINT_SGIS = 33269;
  private static final int GL_EYE_LINE_SGIS = 33270;
  private static final int GL_OBJECT_LINE_SGIS = 33271;
  private static final int GL_LIGHT_MODEL_COLOR_CONTROL = 33272;
  private static final int GL_SINGLE_COLOR = 33273;
  private static final int GL_SEPARATE_SPECULAR_COLOR = 33274;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
  private static final int GL_FRAMEBUFFER_DEFAULT = 33304;
  private static final int GL_FRAMEBUFFER_UNDEFINED = 33305;
  private static final int GL_DEPTH_STENCIL_ATTACHMENT = 33306;
  private static final int GL_MAJOR_VERSION = 33307;
  private static final int GL_MINOR_VERSION = 33308;
  private static final int GL_NUM_EXTENSIONS = 33309;
  private static final int GL_CONTEXT_FLAGS = 33310;
  private static final int GL_BUFFER_IMMUTABLE_STORAGE = 33311;
  private static final int GL_BUFFER_IMMUTABLE_STORAGE_EXT = 33311;
  private static final int GL_BUFFER_STORAGE_FLAGS = 33312;
  private static final int GL_BUFFER_STORAGE_FLAGS_EXT = 33312;
  private static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 33313;
  private static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;
  private static final int GL_INDEX = 33314;
  private static final int GL_COMPRESSED_RED = 33317;
  private static final int GL_COMPRESSED_RG = 33318;
  private static final int GL_RG = 33319;
  private static final int GL_RG_INTEGER = 33320;
  private static final int GL_R8_EXT = 33321;
  private static final int GL_R8 = 33321;
  private static final int GL_R16 = 33322;
  private static final int GL_RG8 = 33323;
  private static final int GL_RG8_EXT = 33323;
  private static final int GL_RG16 = 33324;
  private static final int GL_R16F = 33325;
  private static final int GL_R16F_EXT = 33325;
  private static final int GL_R32F = 33326;
  private static final int GL_R32F_EXT = 33326;
  private static final int GL_RG16F = 33327;
  private static final int GL_RG16F_EXT = 33327;
  private static final int GL_RG32F = 33328;
  private static final int GL_RG32F_EXT = 33328;
  private static final int GL_R8I = 33329;
  private static final int GL_R8UI = 33330;
  private static final int GL_R16I = 33331;
  private static final int GL_R16UI = 33332;
  private static final int GL_R32I = 33333;
  private static final int GL_R32UI = 33334;
  private static final int GL_RG8I = 33335;
  private static final int GL_RG8UI = 33336;
  private static final int GL_RG16I = 33337;
  private static final int GL_RG16UI = 33338;
  private static final int GL_RG32I = 33339;
  private static final int GL_RG32UI = 33340;
  private static final int GL_SYNC_CL_EVENT_ARB = 33344;
  private static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = 33345;
  private static final int GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;
  private static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346;
  private static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346;
  private static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347;
  private static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347;
  private static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
  private static final int GL_DEBUG_CALLBACK_FUNCTION = 33348;
  private static final int GL_DEBUG_CALLBACK_FUNCTION_ARB = 33348;
  private static final int GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348;
  private static final int GL_DEBUG_CALLBACK_USER_PARAM = 33349;
  private static final int GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349;
  private static final int GL_DEBUG_CALLBACK_USER_PARAM_ARB = 33349;
  private static final int GL_DEBUG_SOURCE_API_KHR = 33350;
  private static final int GL_DEBUG_SOURCE_API = 33350;
  private static final int GL_DEBUG_SOURCE_API_ARB = 33350;
  private static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351;
  private static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
  private static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351;
  private static final int GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352;
  private static final int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352;
  private static final int GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;
  private static final int GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 33353;
  private static final int GL_DEBUG_SOURCE_THIRD_PARTY = 33353;
  private static final int GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353;
  private static final int GL_DEBUG_SOURCE_APPLICATION = 33354;
  private static final int GL_DEBUG_SOURCE_APPLICATION_ARB = 33354;
  private static final int GL_DEBUG_SOURCE_APPLICATION_KHR = 33354;
  private static final int GL_DEBUG_SOURCE_OTHER = 33355;
  private static final int GL_DEBUG_SOURCE_OTHER_KHR = 33355;
  private static final int GL_DEBUG_SOURCE_OTHER_ARB = 33355;
  private static final int GL_DEBUG_TYPE_ERROR = 33356;
  private static final int GL_DEBUG_TYPE_ERROR_KHR = 33356;
  private static final int GL_DEBUG_TYPE_ERROR_ARB = 33356;
  private static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357;
  private static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357;
  private static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
  private static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358;
  private static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358;
  private static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
  private static final int GL_DEBUG_TYPE_PORTABILITY_KHR = 33359;
  private static final int GL_DEBUG_TYPE_PORTABILITY_ARB = 33359;
  private static final int GL_DEBUG_TYPE_PORTABILITY = 33359;
  private static final int GL_DEBUG_TYPE_PERFORMANCE_ARB = 33360;
  private static final int GL_DEBUG_TYPE_PERFORMANCE = 33360;
  private static final int GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360;
  private static final int GL_DEBUG_TYPE_OTHER_KHR = 33361;
  private static final int GL_DEBUG_TYPE_OTHER_ARB = 33361;
  private static final int GL_DEBUG_TYPE_OTHER = 33361;
  private static final int GL_LOSE_CONTEXT_ON_RESET_ARB = 33362;
  private static final int GL_LOSE_CONTEXT_ON_RESET_KHR = 33362;
  private static final int GL_LOSE_CONTEXT_ON_RESET = 33362;
  private static final int GL_LOSE_CONTEXT_ON_RESET_EXT = 33362;
  private static final int GL_GUILTY_CONTEXT_RESET_KHR = 33363;
  private static final int GL_GUILTY_CONTEXT_RESET = 33363;
  private static final int GL_GUILTY_CONTEXT_RESET_ARB = 33363;
  private static final int GL_GUILTY_CONTEXT_RESET_EXT = 33363;
  private static final int GL_INNOCENT_CONTEXT_RESET = 33364;
  private static final int GL_INNOCENT_CONTEXT_RESET_KHR = 33364;
  private static final int GL_INNOCENT_CONTEXT_RESET_EXT = 33364;
  private static final int GL_INNOCENT_CONTEXT_RESET_ARB = 33364;
  private static final int GL_UNKNOWN_CONTEXT_RESET_ARB = 33365;
  private static final int GL_UNKNOWN_CONTEXT_RESET_KHR = 33365;
  private static final int GL_UNKNOWN_CONTEXT_RESET = 33365;
  private static final int GL_UNKNOWN_CONTEXT_RESET_EXT = 33365;
  private static final int GL_RESET_NOTIFICATION_STRATEGY = 33366;
  private static final int GL_RESET_NOTIFICATION_STRATEGY_EXT = 33366;
  private static final int GL_RESET_NOTIFICATION_STRATEGY_KHR = 33366;
  private static final int GL_RESET_NOTIFICATION_STRATEGY_ARB = 33366;
  private static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;
  private static final int GL_PROGRAM_SEPARABLE = 33368;
  private static final int GL_PROGRAM_SEPARABLE_EXT = 33368;
  private static final int GL_ACTIVE_PROGRAM = 33369;
  private static final int GL_PROGRAM_PIPELINE_BINDING = 33370;
  private static final int GL_PROGRAM_PIPELINE_BINDING_EXT = 33370;
  private static final int GL_MAX_VIEWPORTS = 33371;
  private static final int GL_MAX_VIEWPORTS_NV = 33371;
  private static final int GL_MAX_VIEWPORTS_OES = 33371;
  private static final int GL_VIEWPORT_SUBPIXEL_BITS = 33372;
  private static final int GL_VIEWPORT_SUBPIXEL_BITS_NV = 33372;
  private static final int GL_VIEWPORT_SUBPIXEL_BITS_OES = 33372;
  private static final int GL_VIEWPORT_BOUNDS_RANGE = 33373;
  private static final int GL_VIEWPORT_BOUNDS_RANGE_NV = 33373;
  private static final int GL_VIEWPORT_BOUNDS_RANGE_OES = 33373;
  private static final int GL_LAYER_PROVOKING_VERTEX_OES = 33374;
  private static final int GL_LAYER_PROVOKING_VERTEX = 33374;
  private static final int GL_LAYER_PROVOKING_VERTEX_EXT = 33374;
  private static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 33375;
  private static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 33375;
  private static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 33375;
  private static final int GL_UNDEFINED_VERTEX_OES = 33376;
  private static final int GL_UNDEFINED_VERTEX_EXT = 33376;
  private static final int GL_UNDEFINED_VERTEX = 33376;
  private static final int GL_NO_RESET_NOTIFICATION = 33377;
  private static final int GL_NO_RESET_NOTIFICATION_KHR = 33377;
  private static final int GL_NO_RESET_NOTIFICATION_ARB = 33377;
  private static final int GL_NO_RESET_NOTIFICATION_EXT = 33377;
  private static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;
  private static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;
  private static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;
  private static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;
  private static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;
  private static final int GL_COMPUTE_WORK_GROUP_SIZE = 33383;
  private static final int GL_DEBUG_TYPE_MARKER = 33384;
  private static final int GL_DEBUG_TYPE_MARKER_KHR = 33384;
  private static final int GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385;
  private static final int GL_DEBUG_TYPE_PUSH_GROUP = 33385;
  private static final int GL_DEBUG_TYPE_POP_GROUP_KHR = 33386;
  private static final int GL_DEBUG_TYPE_POP_GROUP = 33386;
  private static final int GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387;
  private static final int GL_DEBUG_SEVERITY_NOTIFICATION = 33387;
  private static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
  private static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388;
  private static final int GL_DEBUG_GROUP_STACK_DEPTH = 33389;
  private static final int GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389;
  private static final int GL_MAX_UNIFORM_LOCATIONS = 33390;
  private static final int GL_INTERNALFORMAT_SUPPORTED = 33391;
  private static final int GL_INTERNALFORMAT_PREFERRED = 33392;
  private static final int GL_INTERNALFORMAT_RED_SIZE = 33393;
  private static final int GL_INTERNALFORMAT_GREEN_SIZE = 33394;
  private static final int GL_INTERNALFORMAT_BLUE_SIZE = 33395;
  private static final int GL_INTERNALFORMAT_ALPHA_SIZE = 33396;
  private static final int GL_INTERNALFORMAT_DEPTH_SIZE = 33397;
  private static final int GL_INTERNALFORMAT_STENCIL_SIZE = 33398;
  private static final int GL_INTERNALFORMAT_SHARED_SIZE = 33399;
  private static final int GL_INTERNALFORMAT_RED_TYPE = 33400;
  private static final int GL_INTERNALFORMAT_GREEN_TYPE = 33401;
  private static final int GL_INTERNALFORMAT_BLUE_TYPE = 33402;
  private static final int GL_INTERNALFORMAT_ALPHA_TYPE = 33403;
  private static final int GL_INTERNALFORMAT_DEPTH_TYPE = 33404;
  private static final int GL_INTERNALFORMAT_STENCIL_TYPE = 33405;
  private static final int GL_MAX_WIDTH = 33406;
  private static final int GL_MAX_HEIGHT = 33407;
  private static final int GL_MAX_DEPTH = 33408;
  private static final int GL_MAX_LAYERS = 33409;
  private static final int GL_MAX_COMBINED_DIMENSIONS = 33410;
  private static final int GL_COLOR_COMPONENTS = 33411;
  private static final int GL_DEPTH_COMPONENTS = 33412;
  private static final int GL_STENCIL_COMPONENTS = 33413;
  private static final int GL_COLOR_RENDERABLE = 33414;
  private static final int GL_DEPTH_RENDERABLE = 33415;
  private static final int GL_STENCIL_RENDERABLE = 33416;
  private static final int GL_FRAMEBUFFER_RENDERABLE = 33417;
  private static final int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418;
  private static final int GL_FRAMEBUFFER_BLEND = 33419;
  private static final int GL_READ_PIXELS = 33420;
  private static final int GL_READ_PIXELS_FORMAT = 33421;
  private static final int GL_READ_PIXELS_TYPE = 33422;
  private static final int GL_TEXTURE_IMAGE_FORMAT = 33423;
  private static final int GL_TEXTURE_IMAGE_TYPE = 33424;
  private static final int GL_GET_TEXTURE_IMAGE_FORMAT = 33425;
  private static final int GL_GET_TEXTURE_IMAGE_TYPE = 33426;
  private static final int GL_MIPMAP = 33427;
  private static final int GL_MANUAL_GENERATE_MIPMAP = 33428;
  private static final int GL_AUTO_GENERATE_MIPMAP = 33429;
  private static final int GL_COLOR_ENCODING = 33430;
  private static final int GL_SRGB_READ = 33431;
  private static final int GL_SRGB_WRITE = 33432;
  private static final int GL_SRGB_DECODE_ARB = 33433;
  private static final int GL_FILTER = 33434;
  private static final int GL_VERTEX_TEXTURE = 33435;
  private static final int GL_TESS_CONTROL_TEXTURE = 33436;
  private static final int GL_TESS_EVALUATION_TEXTURE = 33437;
  private static final int GL_GEOMETRY_TEXTURE = 33438;
  private static final int GL_FRAGMENT_TEXTURE = 33439;
  private static final int GL_COMPUTE_TEXTURE = 33440;
  private static final int GL_TEXTURE_SHADOW = 33441;
  private static final int GL_TEXTURE_GATHER = 33442;
  private static final int GL_TEXTURE_GATHER_SHADOW = 33443;
  private static final int GL_SHADER_IMAGE_LOAD = 33444;
  private static final int GL_SHADER_IMAGE_STORE = 33445;
  private static final int GL_SHADER_IMAGE_ATOMIC = 33446;
  private static final int GL_IMAGE_TEXEL_SIZE = 33447;
  private static final int GL_IMAGE_COMPATIBILITY_CLASS = 33448;
  private static final int GL_IMAGE_PIXEL_FORMAT = 33449;
  private static final int GL_IMAGE_PIXEL_TYPE = 33450;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454;
  private static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455;
  private static final int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457;
  private static final int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458;
  private static final int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459;
  private static final int GL_CLEAR_BUFFER = 33460;
  private static final int GL_TEXTURE_VIEW = 33461;
  private static final int GL_VIEW_COMPATIBILITY_CLASS = 33462;
  private static final int GL_FULL_SUPPORT = 33463;
  private static final int GL_CAVEAT_SUPPORT = 33464;
  private static final int GL_IMAGE_CLASS_4_X_32 = 33465;
  private static final int GL_IMAGE_CLASS_2_X_32 = 33466;
  private static final int GL_IMAGE_CLASS_1_X_32 = 33467;
  private static final int GL_IMAGE_CLASS_4_X_16 = 33468;
  private static final int GL_IMAGE_CLASS_2_X_16 = 33469;
  private static final int GL_IMAGE_CLASS_1_X_16 = 33470;
  private static final int GL_IMAGE_CLASS_4_X_8 = 33471;
  private static final int GL_IMAGE_CLASS_2_X_8 = 33472;
  private static final int GL_IMAGE_CLASS_1_X_8 = 33473;
  private static final int GL_IMAGE_CLASS_11_11_10 = 33474;
  private static final int GL_IMAGE_CLASS_10_10_10_2 = 33475;
  private static final int GL_VIEW_CLASS_128_BITS = 33476;
  private static final int GL_VIEW_CLASS_96_BITS = 33477;
  private static final int GL_VIEW_CLASS_64_BITS = 33478;
  private static final int GL_VIEW_CLASS_48_BITS = 33479;
  private static final int GL_VIEW_CLASS_32_BITS = 33480;
  private static final int GL_VIEW_CLASS_24_BITS = 33481;
  private static final int GL_VIEW_CLASS_16_BITS = 33482;
  private static final int GL_VIEW_CLASS_8_BITS = 33483;
  private static final int GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484;
  private static final int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485;
  private static final int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486;
  private static final int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487;
  private static final int GL_VIEW_CLASS_RGTC1_RED = 33488;
  private static final int GL_VIEW_CLASS_RGTC2_RG = 33489;
  private static final int GL_VIEW_CLASS_BPTC_UNORM = 33490;
  private static final int GL_VIEW_CLASS_BPTC_FLOAT = 33491;
  private static final int GL_VERTEX_ATTRIB_BINDING = 33492;
  private static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;
  private static final int GL_VERTEX_BINDING_DIVISOR = 33494;
  private static final int GL_VERTEX_BINDING_OFFSET = 33495;
  private static final int GL_VERTEX_BINDING_STRIDE = 33496;
  private static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;
  private static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;
  private static final int GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 33499;
  private static final int GL_TEXTURE_VIEW_MIN_LEVEL_OES = 33499;
  private static final int GL_TEXTURE_VIEW_MIN_LEVEL = 33499;
  private static final int GL_TEXTURE_VIEW_NUM_LEVELS_OES = 33500;
  private static final int GL_TEXTURE_VIEW_NUM_LEVELS = 33500;
  private static final int GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 33500;
  private static final int GL_TEXTURE_VIEW_MIN_LAYER_OES = 33501;
  private static final int GL_TEXTURE_VIEW_MIN_LAYER = 33501;
  private static final int GL_TEXTURE_VIEW_MIN_LAYER_EXT = 33501;
  private static final int GL_TEXTURE_VIEW_NUM_LAYERS_OES = 33502;
  private static final int GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 33502;
  private static final int GL_TEXTURE_VIEW_NUM_LAYERS = 33502;
  private static final int GL_TEXTURE_IMMUTABLE_LEVELS = 33503;
  private static final int GL_BUFFER_KHR = 33504;
  private static final int GL_BUFFER = 33504;
  private static final int GL_SHADER_KHR = 33505;
  private static final int GL_SHADER = 33505;
  private static final int GL_PROGRAM_KHR = 33506;
  private static final int GL_PROGRAM = 33506;
  private static final int GL_QUERY = 33507;
  private static final int GL_QUERY_KHR = 33507;
  private static final int GL_PROGRAM_PIPELINE = 33508;
  private static final int GL_PROGRAM_PIPELINE_KHR = 33508;
  private static final int GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;
  private static final int GL_SAMPLER = 33510;
  private static final int GL_SAMPLER_KHR = 33510;
  private static final int GL_DISPLAY_LIST = 33511;
  private static final int GL_MAX_LABEL_LENGTH_KHR = 33512;
  private static final int GL_MAX_LABEL_LENGTH = 33512;
  private static final int GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513;
  private static final int GL_QUERY_TARGET = 33514;
  private static final int GL_TRANSFORM_FEEDBACK_OVERFLOW = 33516;
  private static final int GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 33517;
  private static final int GL_VERTICES_SUBMITTED = 33518;
  private static final int GL_PRIMITIVES_SUBMITTED = 33519;
  private static final int GL_VERTEX_SHADER_INVOCATIONS = 33520;
  private static final int GL_TESS_CONTROL_SHADER_PATCHES = 33521;
  private static final int GL_TESS_EVALUATION_SHADER_INVOCATIONS = 33522;
  private static final int GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 33523;
  private static final int GL_FRAGMENT_SHADER_INVOCATIONS = 33524;
  private static final int GL_COMPUTE_SHADER_INVOCATIONS = 33525;
  private static final int GL_CLIPPING_INPUT_PRIMITIVES = 33526;
  private static final int GL_CLIPPING_OUTPUT_PRIMITIVES = 33527;
  private static final int GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 33528;
  private static final int GL_MAX_CULL_DISTANCES = 33529;
  private static final int GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR = 33531;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 33531;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532;
  private static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 33532;
  private static final int GL_ROBUST_GPU_TIMEOUT_MS_KHR = 33533;
  private static final int GL_DEPTH_PASS_INSTRUMENT_SGIX = 33552;
  private static final int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 33553;
  private static final int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 33554;
  private static final int GL_FRAGMENTS_INSTRUMENT_SGIX = 33555;
  private static final int GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 33556;
  private static final int GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 33557;
  private static final int GL_CONVOLUTION_HINT_SGIX = 33558;
  private static final int GL_YCRCB_SGIX = 33560;
  private static final int GL_YCRCBA_SGIX = 33561;
  private static final int GL_UNPACK_COMPRESSED_SIZE_SGIX = 33562;
  private static final int GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 33563;
  private static final int GL_PACK_COMPRESSED_SIZE_SGIX = 33564;
  private static final int GL_SLIM8U_SGIX = 33565;
  private static final int GL_SLIM10U_SGIX = 33566;
  private static final int GL_SLIM12S_SGIX = 33567;
  private static final int GL_ALPHA_MIN_SGIX = 33568;
  private static final int GL_ALPHA_MAX_SGIX = 33569;
  private static final int GL_SCALEBIAS_HINT_SGIX = 33570;
  private static final int GL_ASYNC_MARKER_SGIX = 33577;
  private static final int GL_PIXEL_TEX_GEN_MODE_SGIX = 33579;
  private static final int GL_ASYNC_HISTOGRAM_SGIX = 33580;
  private static final int GL_MAX_ASYNC_HISTOGRAM_SGIX = 33581;
  private static final int GL_PIXEL_TRANSFORM_2D_EXT = 33584;
  private static final int GL_PIXEL_MAG_FILTER_EXT = 33585;
  private static final int GL_PIXEL_MIN_FILTER_EXT = 33586;
  private static final int GL_PIXEL_CUBIC_WEIGHT_EXT = 33587;
  private static final int GL_CUBIC_EXT = 33588;
  private static final int GL_AVERAGE_EXT = 33589;
  private static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590;
  private static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591;
  private static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592;
  private static final int GL_FRAGMENT_MATERIAL_EXT = 33609;
  private static final int GL_FRAGMENT_NORMAL_EXT = 33610;
  private static final int GL_FRAGMENT_COLOR_EXT = 33612;
  private static final int GL_ATTENUATION_EXT = 33613;
  private static final int GL_SHADOW_ATTENUATION_EXT = 33614;
  private static final int GL_TEXTURE_APPLICATION_MODE_EXT = 33615;
  private static final int GL_TEXTURE_LIGHT_EXT = 33616;
  private static final int GL_TEXTURE_MATERIAL_FACE_EXT = 33617;
  private static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 33618;
  private static final int GL_PIXEL_TEXTURE_SGIS = 33619;
  private static final int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620;
  private static final int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621;
  private static final int GL_PIXEL_GROUP_COLOR_SGIS = 33622;
  private static final int GL_LINE_QUALITY_HINT_SGIX = 33627;
  private static final int GL_ASYNC_TEX_IMAGE_SGIX = 33628;
  private static final int GL_ASYNC_DRAW_PIXELS_SGIX = 33629;
  private static final int GL_ASYNC_READ_PIXELS_SGIX = 33630;
  private static final int GL_MAX_ASYNC_TEX_IMAGE_SGIX = 33631;
  private static final int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 33632;
  private static final int GL_MAX_ASYNC_READ_PIXELS_SGIX = 33633;
  private static final int GL_UNSIGNED_BYTE_2_3_3_REV = 33634;
  private static final int GL_UNSIGNED_SHORT_5_6_5 = 33635;
  private static final int GL_UNSIGNED_SHORT_5_6_5_REV = 33636;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 33637;
  private static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637;
  private static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638;
  private static final int GL_UNSIGNED_INT_8_8_8_8_REV = 33639;
  private static final int GL_UNSIGNED_INT_2_10_10_10_REV = 33640;
  private static final int GL_TEXTURE_MAX_CLAMP_S_SGIX = 33641;
  private static final int GL_TEXTURE_MAX_CLAMP_T_SGIX = 33642;
  private static final int GL_TEXTURE_MAX_CLAMP_R_SGIX = 33643;
  private static final int GL_MIRRORED_REPEAT_IBM = 33648;
  private static final int GL_MIRRORED_REPEAT = 33648;
  private static final int GL_RGB_S3TC = 33696;
  private static final int GL_RGB4_S3TC = 33697;
  private static final int GL_RGBA_S3TC = 33698;
  private static final int GL_RGBA4_S3TC = 33699;
  private static final int GL_RGBA_DXT5_S3TC = 33700;
  private static final int GL_RGBA4_DXT5_S3TC = 33701;
  private static final int GL_VERTEX_PRECLIP_SGIX = 33774;
  private static final int GL_VERTEX_PRECLIP_HINT_SGIX = 33775;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 33778;
  private static final int GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 33779;
  private static final int GL_PARALLEL_ARRAYS_INTEL = 33780;
  private static final int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781;
  private static final int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782;
  private static final int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783;
  private static final int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784;
  private static final int GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785;
  private static final int GL_PERFQUERY_FLUSH_INTEL = 33786;
  private static final int GL_PERFQUERY_WAIT_INTEL = 33787;
  private static final int GL_CONSERVATIVE_RASTERIZATION_INTEL = 33790;
  private static final int GL_TEXTURE_MEMORY_LAYOUT_INTEL = 33791;
  private static final int GL_FRAGMENT_LIGHTING_SGIX = 33792;
  private static final int GL_FRAGMENT_COLOR_MATERIAL_SGIX = 33793;
  private static final int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794;
  private static final int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795;
  private static final int GL_MAX_FRAGMENT_LIGHTS_SGIX = 33796;
  private static final int GL_MAX_ACTIVE_LIGHTS_SGIX = 33797;
  private static final int GL_CURRENT_RASTER_NORMAL_SGIX = 33798;
  private static final int GL_LIGHT_ENV_MODE_SGIX = 33799;
  private static final int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800;
  private static final int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801;
  private static final int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802;
  private static final int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803;
  private static final int GL_FRAGMENT_LIGHT0_SGIX = 33804;
  private static final int GL_FRAGMENT_LIGHT1_SGIX = 33805;
  private static final int GL_FRAGMENT_LIGHT2_SGIX = 33806;
  private static final int GL_FRAGMENT_LIGHT3_SGIX = 33807;
  private static final int GL_FRAGMENT_LIGHT4_SGIX = 33808;
  private static final int GL_FRAGMENT_LIGHT5_SGIX = 33809;
  private static final int GL_FRAGMENT_LIGHT6_SGIX = 33810;
  private static final int GL_FRAGMENT_LIGHT7_SGIX = 33811;
  private static final int GL_PACK_RESAMPLE_SGIX = 33838;
  private static final int GL_UNPACK_RESAMPLE_SGIX = 33839;
  private static final int GL_RESAMPLE_DECIMATE_SGIX = 33840;
  private static final int GL_RESAMPLE_REPLICATE_SGIX = 33843;
  private static final int GL_RESAMPLE_ZERO_FILL_SGIX = 33844;
  private static final int GL_TANGENT_ARRAY_EXT = 33849;
  private static final int GL_BINORMAL_ARRAY_EXT = 33850;
  private static final int GL_CURRENT_TANGENT_EXT = 33851;
  private static final int GL_CURRENT_BINORMAL_EXT = 33852;
  private static final int GL_TANGENT_ARRAY_TYPE_EXT = 33854;
  private static final int GL_TANGENT_ARRAY_STRIDE_EXT = 33855;
  private static final int GL_BINORMAL_ARRAY_TYPE_EXT = 33856;
  private static final int GL_BINORMAL_ARRAY_STRIDE_EXT = 33857;
  private static final int GL_TANGENT_ARRAY_POINTER_EXT = 33858;
  private static final int GL_BINORMAL_ARRAY_POINTER_EXT = 33859;
  private static final int GL_MAP1_TANGENT_EXT = 33860;
  private static final int GL_MAP2_TANGENT_EXT = 33861;
  private static final int GL_MAP1_BINORMAL_EXT = 33862;
  private static final int GL_MAP2_BINORMAL_EXT = 33863;
  private static final int GL_NEAREST_CLIPMAP_NEAREST_SGIX = 33869;
  private static final int GL_NEAREST_CLIPMAP_LINEAR_SGIX = 33870;
  private static final int GL_LINEAR_CLIPMAP_NEAREST_SGIX = 33871;
  private static final int GL_FOG_COORD_SRC = 33872;
  private static final int GL_FOG_COORDINATE_SOURCE_EXT = 33872;
  private static final int GL_FOG_COORDINATE_SOURCE = 33872;
  private static final int GL_FOG_COORDINATE = 33873;
  private static final int GL_FOG_COORDINATE_EXT = 33873;
  private static final int GL_FOG_COORD = 33873;
  private static final int GL_FRAGMENT_DEPTH = 33874;
  private static final int GL_FRAGMENT_DEPTH_EXT = 33874;
  private static final int GL_CURRENT_FOG_COORD = 33875;
  private static final int GL_CURRENT_FOG_COORDINATE = 33875;
  private static final int GL_CURRENT_FOG_COORDINATE_EXT = 33875;
  private static final int GL_FOG_COORD_ARRAY_TYPE = 33876;
  private static final int GL_FOG_COORDINATE_ARRAY_TYPE = 33876;
  private static final int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876;
  private static final int GL_FOG_COORDINATE_ARRAY_STRIDE = 33877;
  private static final int GL_FOG_COORD_ARRAY_STRIDE = 33877;
  private static final int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877;
  private static final int GL_FOG_COORDINATE_ARRAY_POINTER = 33878;
  private static final int GL_FOG_COORD_ARRAY_POINTER = 33878;
  private static final int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878;
  private static final int GL_FOG_COORDINATE_ARRAY = 33879;
  private static final int GL_FOG_COORDINATE_ARRAY_EXT = 33879;
  private static final int GL_FOG_COORD_ARRAY = 33879;
  private static final int GL_COLOR_SUM = 33880;
  private static final int GL_COLOR_SUM_ARB = 33880;
  private static final int GL_COLOR_SUM_EXT = 33880;
  private static final int GL_CURRENT_SECONDARY_COLOR = 33881;
  private static final int GL_CURRENT_SECONDARY_COLOR_EXT = 33881;
  private static final int GL_SECONDARY_COLOR_ARRAY_SIZE = 33882;
  private static final int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882;
  private static final int GL_SECONDARY_COLOR_ARRAY_TYPE = 33883;
  private static final int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883;
  private static final int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884;
  private static final int GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884;
  private static final int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885;
  private static final int GL_SECONDARY_COLOR_ARRAY_POINTER = 33885;
  private static final int GL_SECONDARY_COLOR_ARRAY_EXT = 33886;
  private static final int GL_SECONDARY_COLOR_ARRAY = 33886;
  private static final int GL_CURRENT_RASTER_SECONDARY_COLOR = 33887;
  private static final int GL_ALIASED_POINT_SIZE_RANGE = 33901;
  private static final int GL_ALIASED_LINE_WIDTH_RANGE = 33902;
  private static final int GL_SCREEN_COORDINATES_REND = 33936;
  private static final int GL_INVERTED_SCREEN_W_REND = 33937;
  private static final int GL_TEXTURE0 = 33984;
  private static final int GL_TEXTURE0_ARB = 33984;
  private static final int GL_TEXTURE1_ARB = 33985;
  private static final int GL_TEXTURE1 = 33985;
  private static final int GL_TEXTURE2_ARB = 33986;
  private static final int GL_TEXTURE2 = 33986;
  private static final int GL_TEXTURE3_ARB = 33987;
  private static final int GL_TEXTURE3 = 33987;
  private static final int GL_TEXTURE4 = 33988;
  private static final int GL_TEXTURE4_ARB = 33988;
  private static final int GL_TEXTURE5_ARB = 33989;
  private static final int GL_TEXTURE5 = 33989;
  private static final int GL_TEXTURE6_ARB = 33990;
  private static final int GL_TEXTURE6 = 33990;
  private static final int GL_TEXTURE7 = 33991;
  private static final int GL_TEXTURE7_ARB = 33991;
  private static final int GL_TEXTURE8 = 33992;
  private static final int GL_TEXTURE8_ARB = 33992;
  private static final int GL_TEXTURE9_ARB = 33993;
  private static final int GL_TEXTURE9 = 33993;
  private static final int GL_TEXTURE10_ARB = 33994;
  private static final int GL_TEXTURE10 = 33994;
  private static final int GL_TEXTURE11_ARB = 33995;
  private static final int GL_TEXTURE11 = 33995;
  private static final int GL_TEXTURE12_ARB = 33996;
  private static final int GL_TEXTURE12 = 33996;
  private static final int GL_TEXTURE13_ARB = 33997;
  private static final int GL_TEXTURE13 = 33997;
  private static final int GL_TEXTURE14 = 33998;
  private static final int GL_TEXTURE14_ARB = 33998;
  private static final int GL_TEXTURE15_ARB = 33999;
  private static final int GL_TEXTURE15 = 33999;
  private static final int GL_TEXTURE16_ARB = 34000;
  private static final int GL_TEXTURE16 = 34000;
  private static final int GL_TEXTURE17_ARB = 34001;
  private static final int GL_TEXTURE17 = 34001;
  private static final int GL_TEXTURE18_ARB = 34002;
  private static final int GL_TEXTURE18 = 34002;
  private static final int GL_TEXTURE19_ARB = 34003;
  private static final int GL_TEXTURE19 = 34003;
  private static final int GL_TEXTURE20_ARB = 34004;
  private static final int GL_TEXTURE20 = 34004;
  private static final int GL_TEXTURE21_ARB = 34005;
  private static final int GL_TEXTURE21 = 34005;
  private static final int GL_TEXTURE22_ARB = 34006;
  private static final int GL_TEXTURE22 = 34006;
  private static final int GL_TEXTURE23 = 34007;
  private static final int GL_TEXTURE23_ARB = 34007;
  private static final int GL_TEXTURE24_ARB = 34008;
  private static final int GL_TEXTURE24 = 34008;
  private static final int GL_TEXTURE25_ARB = 34009;
  private static final int GL_TEXTURE25 = 34009;
  private static final int GL_TEXTURE26_ARB = 34010;
  private static final int GL_TEXTURE26 = 34010;
  private static final int GL_TEXTURE27 = 34011;
  private static final int GL_TEXTURE27_ARB = 34011;
  private static final int GL_TEXTURE28_ARB = 34012;
  private static final int GL_TEXTURE28 = 34012;
  private static final int GL_TEXTURE29_ARB = 34013;
  private static final int GL_TEXTURE29 = 34013;
  private static final int GL_TEXTURE30_ARB = 34014;
  private static final int GL_TEXTURE30 = 34014;
  private static final int GL_TEXTURE31_ARB = 34015;
  private static final int GL_TEXTURE31 = 34015;
  private static final int GL_ACTIVE_TEXTURE = 34016;
  private static final int GL_ACTIVE_TEXTURE_ARB = 34016;
  private static final int GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017;
  private static final int GL_CLIENT_ACTIVE_TEXTURE = 34017;
  private static final int GL_MAX_TEXTURE_UNITS = 34018;
  private static final int GL_MAX_TEXTURE_UNITS_ARB = 34018;
  private static final int GL_TRANSPOSE_MODELVIEW_MATRIX = 34019;
  private static final int GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019;
  private static final int GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020;
  private static final int GL_TRANSPOSE_PROJECTION_MATRIX = 34020;
  private static final int GL_TRANSPOSE_TEXTURE_MATRIX = 34021;
  private static final int GL_TRANSPOSE_COLOR_MATRIX = 34022;
  private static final int GL_SUBTRACT = 34023;
  private static final int GL_MAX_RENDERBUFFER_SIZE_EXT = 34024;
  private static final int GL_MAX_RENDERBUFFER_SIZE_OES = 34024;
  private static final int GL_MAX_RENDERBUFFER_SIZE = 34024;
  private static final int GL_COMPRESSED_ALPHA = 34025;
  private static final int GL_COMPRESSED_ALPHA_ARB = 34025;
  private static final int GL_COMPRESSED_LUMINANCE_ARB = 34026;
  private static final int GL_COMPRESSED_LUMINANCE = 34026;
  private static final int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027;
  private static final int GL_COMPRESSED_LUMINANCE_ALPHA = 34027;
  private static final int GL_COMPRESSED_INTENSITY = 34028;
  private static final int GL_COMPRESSED_INTENSITY_ARB = 34028;
  private static final int GL_COMPRESSED_RGB_ARB = 34029;
  private static final int GL_COMPRESSED_RGB = 34029;
  private static final int GL_COMPRESSED_RGBA = 34030;
  private static final int GL_COMPRESSED_RGBA_ARB = 34030;
  private static final int GL_TEXTURE_COMPRESSION_HINT = 34031;
  private static final int GL_TEXTURE_COMPRESSION_HINT_ARB = 34031;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033;
  private static final int GL_ALL_COMPLETED_NV = 34034;
  private static final int GL_FENCE_STATUS_NV = 34035;
  private static final int GL_FENCE_CONDITION_NV = 34036;
  private static final int GL_TEXTURE_RECTANGLE = 34037;
  private static final int GL_TEXTURE_BINDING_RECTANGLE = 34038;
  private static final int GL_PROXY_TEXTURE_RECTANGLE = 34039;
  private static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 34040;
  private static final int GL_DEPTH_STENCIL = 34041;
  private static final int GL_UNSIGNED_INT_24_8 = 34042;
  private static final int GL_MAX_TEXTURE_LOD_BIAS = 34045;
  private static final int GL_TEXTURE_MAX_ANISOTROPY = 34046;
  private static final int GL_MAX_TEXTURE_MAX_ANISOTROPY = 34047;
  private static final int GL_TEXTURE_FILTER_CONTROL = 34048;
  private static final int GL_TEXTURE_LOD_BIAS = 34049;
  private static final int GL_MODELVIEW1_STACK_DEPTH_EXT = 34050;
  private static final int GL_MODELVIEW1_MATRIX_EXT = 34054;
  private static final int GL_INCR_WRAP = 34055;
  private static final int GL_DECR_WRAP = 34056;
  private static final int GL_VERTEX_WEIGHTING_EXT = 34057;
  private static final int GL_MODELVIEW1_EXT = 34058;
  private static final int GL_MODELVIEW1_ARB = 34058;
  private static final int GL_CURRENT_VERTEX_WEIGHT_EXT = 34059;
  private static final int GL_VERTEX_WEIGHT_ARRAY_EXT = 34060;
  private static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061;
  private static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062;
  private static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063;
  private static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064;
  private static final int GL_NORMAL_MAP_OES = 34065;
  private static final int GL_NORMAL_MAP = 34065;
  private static final int GL_REFLECTION_MAP_OES = 34066;
  private static final int GL_REFLECTION_MAP = 34066;
  private static final int GL_TEXTURE_CUBE_MAP = 34067;
  private static final int GL_TEXTURE_CUBE_MAP_OES = 34067;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_OES = 34068;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP = 34068;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 34069;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 34070;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 34071;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 34072;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
  private static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 34073;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 34074;
  private static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP = 34075;
  private static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
  private static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 34076;
  private static final int GL_VERTEX_ARRAY_RANGE_APPLE = 34077;
  private static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078;
  private static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079;
  private static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081;
  private static final int GL_REGISTER_COMBINERS_NV = 34082;
  private static final int GL_VARIABLE_A_NV = 34083;
  private static final int GL_VARIABLE_B_NV = 34084;
  private static final int GL_VARIABLE_C_NV = 34085;
  private static final int GL_VARIABLE_D_NV = 34086;
  private static final int GL_VARIABLE_E_NV = 34087;
  private static final int GL_VARIABLE_F_NV = 34088;
  private static final int GL_VARIABLE_G_NV = 34089;
  private static final int GL_CONSTANT_COLOR0_NV = 34090;
  private static final int GL_CONSTANT_COLOR1_NV = 34091;
  private static final int GL_PRIMARY_COLOR_NV = 34092;
  private static final int GL_SECONDARY_COLOR_NV = 34093;
  private static final int GL_SPARE0_NV = 34094;
  private static final int GL_SPARE1_NV = 34095;
  private static final int GL_DISCARD_NV = 34096;
  private static final int GL_E_TIMES_F_NV = 34097;
  private static final int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 34098;
  private static final int GL_PER_STAGE_CONSTANTS_NV = 34101;
  private static final int GL_UNSIGNED_IDENTITY_NV = 34102;
  private static final int GL_UNSIGNED_INVERT_NV = 34103;
  private static final int GL_EXPAND_NORMAL_NV = 34104;
  private static final int GL_EXPAND_NEGATE_NV = 34105;
  private static final int GL_HALF_BIAS_NORMAL_NV = 34106;
  private static final int GL_HALF_BIAS_NEGATE_NV = 34107;
  private static final int GL_SIGNED_IDENTITY_NV = 34108;
  private static final int GL_SIGNED_NEGATE_NV = 34109;
  private static final int GL_SCALE_BY_TWO_NV = 34110;
  private static final int GL_SCALE_BY_FOUR_NV = 34111;
  private static final int GL_SCALE_BY_ONE_HALF_NV = 34112;
  private static final int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113;
  private static final int GL_COMBINER_INPUT_NV = 34114;
  private static final int GL_COMBINER_MAPPING_NV = 34115;
  private static final int GL_COMBINER_COMPONENT_USAGE_NV = 34116;
  private static final int GL_COMBINER_AB_DOT_PRODUCT_NV = 34117;
  private static final int GL_COMBINER_CD_DOT_PRODUCT_NV = 34118;
  private static final int GL_COMBINER_MUX_SUM_NV = 34119;
  private static final int GL_COMBINER_SCALE_NV = 34120;
  private static final int GL_COMBINER_BIAS_NV = 34121;
  private static final int GL_COMBINER_AB_OUTPUT_NV = 34122;
  private static final int GL_COMBINER_CD_OUTPUT_NV = 34123;
  private static final int GL_COMBINER_SUM_OUTPUT_NV = 34124;
  private static final int GL_MAX_GENERAL_COMBINERS_NV = 34125;
  private static final int GL_NUM_GENERAL_COMBINERS_NV = 34126;
  private static final int GL_COLOR_SUM_CLAMP_NV = 34127;
  private static final int GL_COMBINER0_NV = 34128;
  private static final int GL_COMBINER1_NV = 34129;
  private static final int GL_COMBINER2_NV = 34130;
  private static final int GL_COMBINER3_NV = 34131;
  private static final int GL_COMBINER4_NV = 34132;
  private static final int GL_COMBINER5_NV = 34133;
  private static final int GL_COMBINER6_NV = 34134;
  private static final int GL_COMBINER7_NV = 34135;
  private static final int GL_RED_MIN_CLAMP_INGR = 34144;
  private static final int GL_GREEN_MIN_CLAMP_INGR = 34145;
  private static final int GL_BLUE_MIN_CLAMP_INGR = 34146;
  private static final int GL_ALPHA_MIN_CLAMP_INGR = 34147;
  private static final int GL_RED_MAX_CLAMP_INGR = 34148;
  private static final int GL_GREEN_MAX_CLAMP_INGR = 34149;
  private static final int GL_BLUE_MAX_CLAMP_INGR = 34150;
  private static final int GL_ALPHA_MAX_CLAMP_INGR = 34151;
  private static final int GL_INTERLACE_READ_INGR = 34152;
  private static final int GL_COMBINE = 34160;
  private static final int GL_COMBINE_RGB = 34161;
  private static final int GL_COMBINE_ALPHA = 34162;
  private static final int GL_RGB_SCALE = 34163;
  private static final int GL_ADD_SIGNED = 34164;
  private static final int GL_INTERPOLATE = 34165;
  private static final int GL_CONSTANT_NV = 34166;
  private static final int GL_CONSTANT = 34166;
  private static final int GL_PRIMARY_COLOR = 34167;
  private static final int GL_PREVIOUS = 34168;
  private static final int GL_SOURCE0_RGB = 34176;
  private static final int GL_SRC0_RGB = 34176;
  private static final int GL_SOURCE1_RGB = 34177;
  private static final int GL_SRC1_RGB = 34177;
  private static final int GL_SRC2_RGB = 34178;
  private static final int GL_SOURCE2_RGB = 34178;
  private static final int GL_SOURCE0_ALPHA = 34184;
  private static final int GL_SRC0_ALPHA = 34184;
  private static final int GL_SRC1_ALPHA_EXT = 34185;
  private static final int GL_SOURCE1_ALPHA = 34185;
  private static final int GL_SRC1_ALPHA = 34185;
  private static final int GL_SRC2_ALPHA = 34186;
  private static final int GL_SOURCE2_ALPHA = 34186;
  private static final int GL_OPERAND0_RGB = 34192;
  private static final int GL_OPERAND1_RGB = 34193;
  private static final int GL_OPERAND2_RGB = 34194;
  private static final int GL_OPERAND0_ALPHA = 34200;
  private static final int GL_OPERAND1_ALPHA = 34201;
  private static final int GL_OPERAND2_ALPHA = 34202;
  private static final int GL_PACK_SUBSAMPLE_RATE_SGIX = 34208;
  private static final int GL_UNPACK_SUBSAMPLE_RATE_SGIX = 34209;
  private static final int GL_PIXEL_SUBSAMPLE_4444_SGIX = 34210;
  private static final int GL_PIXEL_SUBSAMPLE_2424_SGIX = 34211;
  private static final int GL_PIXEL_SUBSAMPLE_4242_SGIX = 34212;
  private static final int GL_PERTURB_EXT = 34222;
  private static final int GL_TEXTURE_NORMAL_EXT = 34223;
  private static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224;
  private static final int GL_TRANSFORM_HINT_APPLE = 34225;
  private static final int GL_UNPACK_CLIENT_STORAGE_APPLE = 34226;
  private static final int GL_BUFFER_OBJECT_APPLE = 34227;
  private static final int GL_STORAGE_CLIENT_APPLE = 34228;
  private static final int GL_VERTEX_ARRAY_BINDING_APPLE = 34229;
  private static final int GL_VERTEX_ARRAY_BINDING = 34229;
  private static final int GL_VERTEX_ARRAY_BINDING_OES = 34229;
  private static final int GL_TEXTURE_RANGE_LENGTH_APPLE = 34231;
  private static final int GL_TEXTURE_RANGE_POINTER_APPLE = 34232;
  private static final int GL_YCBCR_422_APPLE = 34233;
  private static final int GL_UNSIGNED_SHORT_8_8_MESA = 34234;
  private static final int GL_UNSIGNED_SHORT_8_8_APPLE = 34234;
  private static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235;
  private static final int GL_UNSIGNED_SHORT_8_8_REV_MESA = 34235;
  private static final int GL_TEXTURE_STORAGE_HINT_APPLE = 34236;
  private static final int GL_STORAGE_PRIVATE_APPLE = 34237;
  private static final int GL_STORAGE_CACHED_APPLE = 34238;
  private static final int GL_STORAGE_SHARED_APPLE = 34239;
  private static final int GL_REPLACEMENT_CODE_ARRAY_SUN = 34240;
  private static final int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241;
  private static final int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242;
  private static final int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243;
  private static final int GL_R1UI_V3F_SUN = 34244;
  private static final int GL_R1UI_C4UB_V3F_SUN = 34245;
  private static final int GL_R1UI_C3F_V3F_SUN = 34246;
  private static final int GL_R1UI_N3F_V3F_SUN = 34247;
  private static final int GL_R1UI_C4F_N3F_V3F_SUN = 34248;
  private static final int GL_R1UI_T2F_V3F_SUN = 34249;
  private static final int GL_R1UI_T2F_N3F_V3F_SUN = 34250;
  private static final int GL_R1UI_T2F_C4F_N3F_V3F_SUN = 34251;
  private static final int GL_SLICE_ACCUM_SUN = 34252;
  private static final int GL_QUAD_MESH_SUN = 34324;
  private static final int GL_TRIANGLE_MESH_SUN = 34325;
  private static final int GL_VERTEX_PROGRAM_NV = 34336;
  private static final int GL_VERTEX_PROGRAM_ARB = 34336;
  private static final int GL_VERTEX_STATE_PROGRAM_NV = 34337;
  private static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338;
  private static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
  private static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339;
  private static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
  private static final int GL_ATTRIB_ARRAY_SIZE_NV = 34339;
  private static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
  private static final int GL_ATTRIB_ARRAY_STRIDE_NV = 34340;
  private static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340;
  private static final int GL_ATTRIB_ARRAY_TYPE_NV = 34341;
  private static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341;
  private static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
  private static final int GL_CURRENT_ATTRIB_NV = 34342;
  private static final int GL_CURRENT_VERTEX_ATTRIB = 34342;
  private static final int GL_CURRENT_VERTEX_ATTRIB_ARB = 34342;
  private static final int GL_PROGRAM_LENGTH_ARB = 34343;
  private static final int GL_PROGRAM_LENGTH_NV = 34343;
  private static final int GL_PROGRAM_STRING_ARB = 34344;
  private static final int GL_PROGRAM_STRING_NV = 34344;
  private static final int GL_MODELVIEW_PROJECTION_NV = 34345;
  private static final int GL_IDENTITY_NV = 34346;
  private static final int GL_INVERSE_NV = 34347;
  private static final int GL_TRANSPOSE_NV = 34348;
  private static final int GL_INVERSE_TRANSPOSE_NV = 34349;
  private static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350;
  private static final int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350;
  private static final int GL_MAX_PROGRAM_MATRICES_ARB = 34351;
  private static final int GL_MAX_TRACK_MATRICES_NV = 34351;
  private static final int GL_MATRIX0_NV = 34352;
  private static final int GL_MATRIX1_NV = 34353;
  private static final int GL_MATRIX2_NV = 34354;
  private static final int GL_MATRIX3_NV = 34355;
  private static final int GL_MATRIX4_NV = 34356;
  private static final int GL_MATRIX5_NV = 34357;
  private static final int GL_MATRIX6_NV = 34358;
  private static final int GL_MATRIX7_NV = 34359;
  private static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368;
  private static final int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 34368;
  private static final int GL_CURRENT_MATRIX_NV = 34369;
  private static final int GL_CURRENT_MATRIX_ARB = 34369;
  private static final int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 34370;
  private static final int GL_PROGRAM_POINT_SIZE_ARB = 34370;
  private static final int GL_VERTEX_PROGRAM_POINT_SIZE = 34370;
  private static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370;
  private static final int GL_PROGRAM_POINT_SIZE_EXT = 34370;
  private static final int GL_PROGRAM_POINT_SIZE = 34370;
  private static final int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 34371;
  private static final int GL_VERTEX_PROGRAM_TWO_SIDE = 34371;
  private static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371;
  private static final int GL_PROGRAM_PARAMETER_NV = 34372;
  private static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
  private static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373;
  private static final int GL_ATTRIB_ARRAY_POINTER_NV = 34373;
  private static final int GL_PROGRAM_TARGET_NV = 34374;
  private static final int GL_PROGRAM_RESIDENT_NV = 34375;
  private static final int GL_TRACK_MATRIX_NV = 34376;
  private static final int GL_TRACK_MATRIX_TRANSFORM_NV = 34377;
  private static final int GL_VERTEX_PROGRAM_BINDING_NV = 34378;
  private static final int GL_PROGRAM_ERROR_POSITION_NV = 34379;
  private static final int GL_PROGRAM_ERROR_POSITION_ARB = 34379;
  private static final int GL_DEPTH_CLAMP = 34383;
  private static final int GL_VERTEX_ATTRIB_ARRAY0_NV = 34384;
  private static final int GL_VERTEX_ATTRIB_ARRAY1_NV = 34385;
  private static final int GL_VERTEX_ATTRIB_ARRAY2_NV = 34386;
  private static final int GL_VERTEX_ATTRIB_ARRAY3_NV = 34387;
  private static final int GL_VERTEX_ATTRIB_ARRAY4_NV = 34388;
  private static final int GL_VERTEX_ATTRIB_ARRAY5_NV = 34389;
  private static final int GL_VERTEX_ATTRIB_ARRAY6_NV = 34390;
  private static final int GL_VERTEX_ATTRIB_ARRAY7_NV = 34391;
  private static final int GL_VERTEX_ATTRIB_ARRAY8_NV = 34392;
  private static final int GL_VERTEX_ATTRIB_ARRAY9_NV = 34393;
  private static final int GL_VERTEX_ATTRIB_ARRAY10_NV = 34394;
  private static final int GL_VERTEX_ATTRIB_ARRAY11_NV = 34395;
  private static final int GL_VERTEX_ATTRIB_ARRAY12_NV = 34396;
  private static final int GL_VERTEX_ATTRIB_ARRAY13_NV = 34397;
  private static final int GL_VERTEX_ATTRIB_ARRAY14_NV = 34398;
  private static final int GL_VERTEX_ATTRIB_ARRAY15_NV = 34399;
  private static final int GL_MAP1_VERTEX_ATTRIB0_4_NV = 34400;
  private static final int GL_MAP1_VERTEX_ATTRIB1_4_NV = 34401;
  private static final int GL_MAP1_VERTEX_ATTRIB2_4_NV = 34402;
  private static final int GL_MAP1_VERTEX_ATTRIB3_4_NV = 34403;
  private static final int GL_MAP1_VERTEX_ATTRIB4_4_NV = 34404;
  private static final int GL_MAP1_VERTEX_ATTRIB5_4_NV = 34405;
  private static final int GL_MAP1_VERTEX_ATTRIB6_4_NV = 34406;
  private static final int GL_MAP1_VERTEX_ATTRIB7_4_NV = 34407;
  private static final int GL_MAP1_VERTEX_ATTRIB8_4_NV = 34408;
  private static final int GL_MAP1_VERTEX_ATTRIB9_4_NV = 34409;
  private static final int GL_MAP1_VERTEX_ATTRIB10_4_NV = 34410;
  private static final int GL_MAP1_VERTEX_ATTRIB11_4_NV = 34411;
  private static final int GL_MAP1_VERTEX_ATTRIB12_4_NV = 34412;
  private static final int GL_MAP1_VERTEX_ATTRIB13_4_NV = 34413;
  private static final int GL_MAP1_VERTEX_ATTRIB14_4_NV = 34414;
  private static final int GL_MAP1_VERTEX_ATTRIB15_4_NV = 34415;
  private static final int GL_MAP2_VERTEX_ATTRIB0_4_NV = 34416;
  private static final int GL_MAP2_VERTEX_ATTRIB1_4_NV = 34417;
  private static final int GL_MAP2_VERTEX_ATTRIB2_4_NV = 34418;
  private static final int GL_MAP2_VERTEX_ATTRIB3_4_NV = 34419;
  private static final int GL_MAP2_VERTEX_ATTRIB4_4_NV = 34420;
  private static final int GL_MAP2_VERTEX_ATTRIB5_4_NV = 34421;
  private static final int GL_MAP2_VERTEX_ATTRIB6_4_NV = 34422;
  private static final int GL_PROGRAM_BINDING_ARB = 34423;
  private static final int GL_MAP2_VERTEX_ATTRIB7_4_NV = 34423;
  private static final int GL_MAP2_VERTEX_ATTRIB8_4_NV = 34424;
  private static final int GL_MAP2_VERTEX_ATTRIB9_4_NV = 34425;
  private static final int GL_MAP2_VERTEX_ATTRIB10_4_NV = 34426;
  private static final int GL_MAP2_VERTEX_ATTRIB11_4_NV = 34427;
  private static final int GL_MAP2_VERTEX_ATTRIB12_4_NV = 34428;
  private static final int GL_MAP2_VERTEX_ATTRIB13_4_NV = 34429;
  private static final int GL_MAP2_VERTEX_ATTRIB14_4_NV = 34430;
  private static final int GL_MAP2_VERTEX_ATTRIB15_4_NV = 34431;
  private static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464;
  private static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464;
  private static final int GL_TEXTURE_COMPRESSED_ARB = 34465;
  private static final int GL_TEXTURE_COMPRESSED = 34465;
  private static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
  private static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466;
  private static final int GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467;
  private static final int GL_COMPRESSED_TEXTURE_FORMATS = 34467;
  private static final int GL_MAX_VERTEX_UNITS_OES = 34468;
  private static final int GL_MAX_VERTEX_UNITS_ARB = 34468;
  private static final int GL_ACTIVE_VERTEX_UNITS_ARB = 34469;
  private static final int GL_WEIGHT_SUM_UNITY_ARB = 34470;
  private static final int GL_VERTEX_BLEND_ARB = 34471;
  private static final int GL_CURRENT_WEIGHT_ARB = 34472;
  private static final int GL_WEIGHT_ARRAY_TYPE_ARB = 34473;
  private static final int GL_WEIGHT_ARRAY_TYPE_OES = 34473;
  private static final int GL_WEIGHT_ARRAY_STRIDE_OES = 34474;
  private static final int GL_WEIGHT_ARRAY_STRIDE_ARB = 34474;
  private static final int GL_WEIGHT_ARRAY_SIZE_ARB = 34475;
  private static final int GL_WEIGHT_ARRAY_SIZE_OES = 34475;
  private static final int GL_WEIGHT_ARRAY_POINTER_ARB = 34476;
  private static final int GL_WEIGHT_ARRAY_POINTER_OES = 34476;
  private static final int GL_WEIGHT_ARRAY_OES = 34477;
  private static final int GL_WEIGHT_ARRAY_ARB = 34477;
  private static final int GL_DOT3_RGB = 34478;
  private static final int GL_DOT3_RGBA_IMG = 34479;
  private static final int GL_DOT3_RGBA = 34479;
  private static final int GL_COMPRESSED_RGB_FXT1_3DFX = 34480;
  private static final int GL_COMPRESSED_RGBA_FXT1_3DFX = 34481;
  private static final int GL_MULTISAMPLE_3DFX = 34482;
  private static final int GL_SAMPLE_BUFFERS_3DFX = 34483;
  private static final int GL_SAMPLES_3DFX = 34484;
  private static final int GL_EVAL_2D_NV = 34496;
  private static final int GL_EVAL_TRIANGULAR_2D_NV = 34497;
  private static final int GL_MAP_TESSELLATION_NV = 34498;
  private static final int GL_MAP_ATTRIB_U_ORDER_NV = 34499;
  private static final int GL_MAP_ATTRIB_V_ORDER_NV = 34500;
  private static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 34501;
  private static final int GL_EVAL_VERTEX_ATTRIB0_NV = 34502;
  private static final int GL_EVAL_VERTEX_ATTRIB1_NV = 34503;
  private static final int GL_EVAL_VERTEX_ATTRIB2_NV = 34504;
  private static final int GL_EVAL_VERTEX_ATTRIB3_NV = 34505;
  private static final int GL_EVAL_VERTEX_ATTRIB4_NV = 34506;
  private static final int GL_EVAL_VERTEX_ATTRIB5_NV = 34507;
  private static final int GL_EVAL_VERTEX_ATTRIB6_NV = 34508;
  private static final int GL_EVAL_VERTEX_ATTRIB7_NV = 34509;
  private static final int GL_EVAL_VERTEX_ATTRIB8_NV = 34510;
  private static final int GL_EVAL_VERTEX_ATTRIB9_NV = 34511;
  private static final int GL_EVAL_VERTEX_ATTRIB10_NV = 34512;
  private static final int GL_EVAL_VERTEX_ATTRIB11_NV = 34513;
  private static final int GL_EVAL_VERTEX_ATTRIB12_NV = 34514;
  private static final int GL_EVAL_VERTEX_ATTRIB13_NV = 34515;
  private static final int GL_EVAL_VERTEX_ATTRIB14_NV = 34516;
  private static final int GL_EVAL_VERTEX_ATTRIB15_NV = 34517;
  private static final int GL_MAX_MAP_TESSELLATION_NV = 34518;
  private static final int GL_MAX_RATIONAL_EVAL_ORDER_NV = 34519;
  private static final int GL_SURFACE_STATE_NV = 34539;
  private static final int GL_SURFACE_REGISTERED_NV = 34557;
  private static final int GL_SURFACE_MAPPED_NV = 34560;
  private static final int GL_MODELVIEW2_ARB = 34594;
  private static final int GL_MODELVIEW3_ARB = 34595;
  private static final int GL_MODELVIEW4_ARB = 34596;
  private static final int GL_MODELVIEW5_ARB = 34597;
  private static final int GL_MODELVIEW6_ARB = 34598;
  private static final int GL_MODELVIEW7_ARB = 34599;
  private static final int GL_MODELVIEW8_ARB = 34600;
  private static final int GL_MODELVIEW9_ARB = 34601;
  private static final int GL_MODELVIEW10_ARB = 34602;
  private static final int GL_MODELVIEW11_ARB = 34603;
  private static final int GL_MODELVIEW12_ARB = 34604;
  private static final int GL_MODELVIEW13_ARB = 34605;
  private static final int GL_MODELVIEW14_ARB = 34606;
  private static final int GL_MODELVIEW15_ARB = 34607;
  private static final int GL_MODELVIEW16_ARB = 34608;
  private static final int GL_MODELVIEW17_ARB = 34609;
  private static final int GL_MODELVIEW18_ARB = 34610;
  private static final int GL_MODELVIEW19_ARB = 34611;
  private static final int GL_MODELVIEW20_ARB = 34612;
  private static final int GL_MODELVIEW21_ARB = 34613;
  private static final int GL_MODELVIEW22_ARB = 34614;
  private static final int GL_MODELVIEW23_ARB = 34615;
  private static final int GL_MODELVIEW24_ARB = 34616;
  private static final int GL_MODELVIEW25_ARB = 34617;
  private static final int GL_MODELVIEW26_ARB = 34618;
  private static final int GL_MODELVIEW27_ARB = 34619;
  private static final int GL_MODELVIEW28_ARB = 34620;
  private static final int GL_MODELVIEW29_ARB = 34621;
  private static final int GL_MODELVIEW30_ARB = 34622;
  private static final int GL_MODELVIEW31_ARB = 34623;
  private static final int GL_Z400_BINARY_AMD = 34624;
  private static final int GL_PROGRAM_BINARY_LENGTH_OES = 34625;
  private static final int GL_PROGRAM_BINARY_LENGTH = 34625;
  private static final int GL_MIRROR_CLAMP_TO_EDGE = 34627;
  private static final int GL_SET_AMD = 34634;
  private static final int GL_REPLACE_VALUE_AMD = 34635;
  private static final int GL_STENCIL_OP_VALUE_AMD = 34636;
  private static final int GL_STENCIL_BACK_OP_VALUE_AMD = 34637;
  private static final int GL_VERTEX_ATTRIB_ARRAY_LONG = 34638;
  private static final int GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 34639;
  private static final int GL_DEPTH_STENCIL_MESA = 34640;
  private static final int GL_UNSIGNED_INT_24_8_MESA = 34641;
  private static final int GL_UNSIGNED_INT_8_24_REV_MESA = 34642;
  private static final int GL_UNSIGNED_SHORT_15_1_MESA = 34643;
  private static final int GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644;
  private static final int GL_TRACE_MASK_MESA = 34645;
  private static final int GL_TRACE_NAME_MESA = 34646;
  private static final int GL_YCBCR_MESA = 34647;
  private static final int GL_PACK_INVERT_MESA = 34648;
  private static final int GL_DEBUG_OBJECT_MESA = 34649;
  private static final int GL_TEXTURE_1D_STACK_MESAX = 34649;
  private static final int GL_TEXTURE_2D_STACK_MESAX = 34650;
  private static final int GL_DEBUG_PRINT_MESA = 34650;
  private static final int GL_PROXY_TEXTURE_1D_STACK_MESAX = 34651;
  private static final int GL_DEBUG_ASSERT_MESA = 34651;
  private static final int GL_PROXY_TEXTURE_2D_STACK_MESAX = 34652;
  private static final int GL_TEXTURE_1D_STACK_BINDING_MESAX = 34653;
  private static final int GL_TEXTURE_2D_STACK_BINDING_MESAX = 34654;
  private static final int GL_PROGRAM_BINARY_FORMAT_MESA = 34655;
  private static final int GL_STATIC_ATI = 34656;
  private static final int GL_DYNAMIC_ATI = 34657;
  private static final int GL_PRESERVE_ATI = 34658;
  private static final int GL_DISCARD_ATI = 34659;
  private static final int GL_OBJECT_BUFFER_SIZE_ATI = 34660;
  private static final int GL_BUFFER_SIZE_ARB = 34660;
  private static final int GL_BUFFER_SIZE = 34660;
  private static final int GL_BUFFER_USAGE = 34661;
  private static final int GL_BUFFER_USAGE_ARB = 34661;
  private static final int GL_OBJECT_BUFFER_USAGE_ATI = 34661;
  private static final int GL_ARRAY_OBJECT_BUFFER_ATI = 34662;
  private static final int GL_ARRAY_OBJECT_OFFSET_ATI = 34663;
  private static final int GL_ELEMENT_ARRAY_ATI = 34664;
  private static final int GL_ELEMENT_ARRAY_TYPE_ATI = 34665;
  private static final int GL_ELEMENT_ARRAY_POINTER_ATI = 34666;
  private static final int GL_MAX_VERTEX_STREAMS_ATI = 34667;
  private static final int GL_VERTEX_STREAM0_ATI = 34668;
  private static final int GL_VERTEX_STREAM1_ATI = 34669;
  private static final int GL_VERTEX_STREAM2_ATI = 34670;
  private static final int GL_VERTEX_STREAM3_ATI = 34671;
  private static final int GL_VERTEX_STREAM4_ATI = 34672;
  private static final int GL_VERTEX_STREAM5_ATI = 34673;
  private static final int GL_VERTEX_STREAM6_ATI = 34674;
  private static final int GL_VERTEX_STREAM7_ATI = 34675;
  private static final int GL_VERTEX_SOURCE_ATI = 34676;
  private static final int GL_BUMP_ROT_MATRIX_ATI = 34677;
  private static final int GL_BUMP_ROT_MATRIX_SIZE_ATI = 34678;
  private static final int GL_BUMP_NUM_TEX_UNITS_ATI = 34679;
  private static final int GL_BUMP_TEX_UNITS_ATI = 34680;
  private static final int GL_DUDV_ATI = 34681;
  private static final int GL_DU8DV8_ATI = 34682;
  private static final int GL_BUMP_ENVMAP_ATI = 34683;
  private static final int GL_BUMP_TARGET_ATI = 34684;
  private static final int GL_VERTEX_SHADER_EXT = 34688;
  private static final int GL_VERTEX_SHADER_BINDING_EXT = 34689;
  private static final int GL_OP_INDEX_EXT = 34690;
  private static final int GL_OP_NEGATE_EXT = 34691;
  private static final int GL_OP_DOT3_EXT = 34692;
  private static final int GL_OP_DOT4_EXT = 34693;
  private static final int GL_OP_MUL_EXT = 34694;
  private static final int GL_OP_ADD_EXT = 34695;
  private static final int GL_OP_MADD_EXT = 34696;
  private static final int GL_OP_FRAC_EXT = 34697;
  private static final int GL_OP_MAX_EXT = 34698;
  private static final int GL_OP_MIN_EXT = 34699;
  private static final int GL_OP_SET_GE_EXT = 34700;
  private static final int GL_OP_SET_LT_EXT = 34701;
  private static final int GL_OP_CLAMP_EXT = 34702;
  private static final int GL_OP_FLOOR_EXT = 34703;
  private static final int GL_OP_ROUND_EXT = 34704;
  private static final int GL_OP_EXP_BASE_2_EXT = 34705;
  private static final int GL_OP_LOG_BASE_2_EXT = 34706;
  private static final int GL_OP_POWER_EXT = 34707;
  private static final int GL_OP_RECIP_EXT = 34708;
  private static final int GL_OP_RECIP_SQRT_EXT = 34709;
  private static final int GL_OP_SUB_EXT = 34710;
  private static final int GL_OP_CROSS_PRODUCT_EXT = 34711;
  private static final int GL_OP_MULTIPLY_MATRIX_EXT = 34712;
  private static final int GL_OP_MOV_EXT = 34713;
  private static final int GL_OUTPUT_VERTEX_EXT = 34714;
  private static final int GL_OUTPUT_COLOR0_EXT = 34715;
  private static final int GL_OUTPUT_COLOR1_EXT = 34716;
  private static final int GL_OUTPUT_TEXTURE_COORD0_EXT = 34717;
  private static final int GL_OUTPUT_TEXTURE_COORD1_EXT = 34718;
  private static final int GL_OUTPUT_TEXTURE_COORD2_EXT = 34719;
  private static final int GL_OUTPUT_TEXTURE_COORD3_EXT = 34720;
  private static final int GL_OUTPUT_TEXTURE_COORD4_EXT = 34721;
  private static final int GL_OUTPUT_TEXTURE_COORD5_EXT = 34722;
  private static final int GL_OUTPUT_TEXTURE_COORD6_EXT = 34723;
  private static final int GL_OUTPUT_TEXTURE_COORD7_EXT = 34724;
  private static final int GL_OUTPUT_TEXTURE_COORD8_EXT = 34725;
  private static final int GL_OUTPUT_TEXTURE_COORD9_EXT = 34726;
  private static final int GL_OUTPUT_TEXTURE_COORD10_EXT = 34727;
  private static final int GL_OUTPUT_TEXTURE_COORD11_EXT = 34728;
  private static final int GL_OUTPUT_TEXTURE_COORD12_EXT = 34729;
  private static final int GL_OUTPUT_TEXTURE_COORD13_EXT = 34730;
  private static final int GL_OUTPUT_TEXTURE_COORD14_EXT = 34731;
  private static final int GL_OUTPUT_TEXTURE_COORD15_EXT = 34732;
  private static final int GL_OUTPUT_TEXTURE_COORD16_EXT = 34733;
  private static final int GL_OUTPUT_TEXTURE_COORD17_EXT = 34734;
  private static final int GL_OUTPUT_TEXTURE_COORD18_EXT = 34735;
  private static final int GL_OUTPUT_TEXTURE_COORD19_EXT = 34736;
  private static final int GL_OUTPUT_TEXTURE_COORD20_EXT = 34737;
  private static final int GL_OUTPUT_TEXTURE_COORD21_EXT = 34738;
  private static final int GL_OUTPUT_TEXTURE_COORD22_EXT = 34739;
  private static final int GL_OUTPUT_TEXTURE_COORD23_EXT = 34740;
  private static final int GL_OUTPUT_TEXTURE_COORD24_EXT = 34741;
  private static final int GL_OUTPUT_TEXTURE_COORD25_EXT = 34742;
  private static final int GL_OUTPUT_TEXTURE_COORD26_EXT = 34743;
  private static final int GL_OUTPUT_TEXTURE_COORD27_EXT = 34744;
  private static final int GL_OUTPUT_TEXTURE_COORD28_EXT = 34745;
  private static final int GL_OUTPUT_TEXTURE_COORD29_EXT = 34746;
  private static final int GL_OUTPUT_TEXTURE_COORD30_EXT = 34747;
  private static final int GL_OUTPUT_TEXTURE_COORD31_EXT = 34748;
  private static final int GL_OUTPUT_FOG_EXT = 34749;
  private static final int GL_SCALAR_EXT = 34750;
  private static final int GL_VECTOR_EXT = 34751;
  private static final int GL_MATRIX_EXT = 34752;
  private static final int GL_VARIANT_EXT = 34753;
  private static final int GL_INVARIANT_EXT = 34754;
  private static final int GL_LOCAL_CONSTANT_EXT = 34755;
  private static final int GL_LOCAL_EXT = 34756;
  private static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757;
  private static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 34758;
  private static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759;
  private static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760;
  private static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 34761;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765;
  private static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766;
  private static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 34767;
  private static final int GL_VERTEX_SHADER_VARIANTS_EXT = 34768;
  private static final int GL_VERTEX_SHADER_INVARIANTS_EXT = 34769;
  private static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770;
  private static final int GL_VERTEX_SHADER_LOCALS_EXT = 34771;
  private static final int GL_VERTEX_SHADER_OPTIMIZED_EXT = 34772;
  private static final int GL_X_EXT = 34773;
  private static final int GL_Y_EXT = 34774;
  private static final int GL_Z_EXT = 34775;
  private static final int GL_W_EXT = 34776;
  private static final int GL_NEGATIVE_X_EXT = 34777;
  private static final int GL_NEGATIVE_Y_EXT = 34778;
  private static final int GL_NEGATIVE_Z_EXT = 34779;
  private static final int GL_NEGATIVE_W_EXT = 34780;
  private static final int GL_ZERO_EXT = 34781;
  private static final int GL_ONE_EXT = 34782;
  private static final int GL_NEGATIVE_ONE_EXT = 34783;
  private static final int GL_NORMALIZED_RANGE_EXT = 34784;
  private static final int GL_FULL_RANGE_EXT = 34785;
  private static final int GL_CURRENT_VERTEX_EXT = 34786;
  private static final int GL_MVP_MATRIX_EXT = 34787;
  private static final int GL_VARIANT_VALUE_EXT = 34788;
  private static final int GL_VARIANT_DATATYPE_EXT = 34789;
  private static final int GL_VARIANT_ARRAY_STRIDE_EXT = 34790;
  private static final int GL_VARIANT_ARRAY_TYPE_EXT = 34791;
  private static final int GL_VARIANT_ARRAY_EXT = 34792;
  private static final int GL_VARIANT_ARRAY_POINTER_EXT = 34793;
  private static final int GL_INVARIANT_VALUE_EXT = 34794;
  private static final int GL_INVARIANT_DATATYPE_EXT = 34795;
  private static final int GL_LOCAL_CONSTANT_VALUE_EXT = 34796;
  private static final int GL_LOCAL_CONSTANT_DATATYPE_EXT = 34797;
  private static final int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798;
  private static final int GL_PN_TRIANGLES_ATI = 34800;
  private static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801;
  private static final int GL_PN_TRIANGLES_POINT_MODE_ATI = 34802;
  private static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 34803;
  private static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804;
  private static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805;
  private static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806;
  private static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807;
  private static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808;
  private static final int GL_3DC_X_AMD = 34809;
  private static final int GL_3DC_XY_AMD = 34810;
  private static final int GL_NUM_PROGRAM_BINARY_FORMATS_OES = 34814;
  private static final int GL_NUM_PROGRAM_BINARY_FORMATS = 34814;
  private static final int GL_PROGRAM_BINARY_FORMATS = 34815;
  private static final int GL_PROGRAM_BINARY_FORMATS_OES = 34815;
  private static final int GL_STENCIL_BACK_FUNC = 34816;
  private static final int GL_STENCIL_BACK_FUNC_ATI = 34816;
  private static final int GL_STENCIL_BACK_FAIL = 34817;
  private static final int GL_STENCIL_BACK_FAIL_ATI = 34817;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
  private static final int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819;
  private static final int GL_FRAGMENT_PROGRAM_ARB = 34820;
  private static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821;
  private static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822;
  private static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823;
  private static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824;
  private static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825;
  private static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826;
  private static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827;
  private static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828;
  private static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829;
  private static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830;
  private static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831;
  private static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832;
  private static final int GL_RGBA_FLOAT32_APPLE = 34836;
  private static final int GL_RGBA32F = 34836;
  private static final int GL_RGBA32F_EXT = 34836;
  private static final int GL_RGB32F_EXT = 34837;
  private static final int GL_RGB32F = 34837;
  private static final int GL_RGB_FLOAT32_APPLE = 34837;
  private static final int GL_ALPHA32F_EXT = 34838;
  private static final int GL_ALPHA_FLOAT32_APPLE = 34838;
  private static final int GL_INTENSITY_FLOAT32_APPLE = 34839;
  private static final int GL_LUMINANCE_FLOAT32_APPLE = 34840;
  private static final int GL_LUMINANCE32F_EXT = 34840;
  private static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841;
  private static final int GL_LUMINANCE_ALPHA32F_EXT = 34841;
  private static final int GL_RGBA_FLOAT16_APPLE = 34842;
  private static final int GL_RGBA16F_EXT = 34842;
  private static final int GL_RGBA16F = 34842;
  private static final int GL_RGB_FLOAT16_APPLE = 34843;
  private static final int GL_RGB16F_EXT = 34843;
  private static final int GL_RGB16F = 34843;
  private static final int GL_ALPHA_FLOAT16_APPLE = 34844;
  private static final int GL_ALPHA16F_EXT = 34844;
  private static final int GL_INTENSITY_FLOAT16_APPLE = 34845;
  private static final int GL_LUMINANCE16F_EXT = 34846;
  private static final int GL_LUMINANCE_FLOAT16_APPLE = 34846;
  private static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847;
  private static final int GL_LUMINANCE_ALPHA16F_EXT = 34847;
  private static final int GL_RGBA_FLOAT_MODE_ARB = 34848;
  private static final int GL_WRITEONLY_RENDERING_QCOM = 34851;
  private static final int GL_MAX_DRAW_BUFFERS = 34852;
  private static final int GL_MAX_DRAW_BUFFERS_EXT = 34852;
  private static final int GL_MAX_DRAW_BUFFERS_ARB = 34852;
  private static final int GL_MAX_DRAW_BUFFERS_ATI = 34852;
  private static final int GL_MAX_DRAW_BUFFERS_NV = 34852;
  private static final int GL_DRAW_BUFFER0 = 34853;
  private static final int GL_DRAW_BUFFER0_NV = 34853;
  private static final int GL_DRAW_BUFFER0_EXT = 34853;
  private static final int GL_DRAW_BUFFER0_ATI = 34853;
  private static final int GL_DRAW_BUFFER0_ARB = 34853;
  private static final int GL_DRAW_BUFFER1 = 34854;
  private static final int GL_DRAW_BUFFER1_ATI = 34854;
  private static final int GL_DRAW_BUFFER1_ARB = 34854;
  private static final int GL_DRAW_BUFFER1_NV = 34854;
  private static final int GL_DRAW_BUFFER1_EXT = 34854;
  private static final int GL_DRAW_BUFFER2 = 34855;
  private static final int GL_DRAW_BUFFER2_ATI = 34855;
  private static final int GL_DRAW_BUFFER2_ARB = 34855;
  private static final int GL_DRAW_BUFFER2_NV = 34855;
  private static final int GL_DRAW_BUFFER2_EXT = 34855;
  private static final int GL_DRAW_BUFFER3 = 34856;
  private static final int GL_DRAW_BUFFER3_EXT = 34856;
  private static final int GL_DRAW_BUFFER3_NV = 34856;
  private static final int GL_DRAW_BUFFER3_ATI = 34856;
  private static final int GL_DRAW_BUFFER3_ARB = 34856;
  private static final int GL_DRAW_BUFFER4 = 34857;
  private static final int GL_DRAW_BUFFER4_EXT = 34857;
  private static final int GL_DRAW_BUFFER4_NV = 34857;
  private static final int GL_DRAW_BUFFER4_ARB = 34857;
  private static final int GL_DRAW_BUFFER4_ATI = 34857;
  private static final int GL_DRAW_BUFFER5 = 34858;
  private static final int GL_DRAW_BUFFER5_ARB = 34858;
  private static final int GL_DRAW_BUFFER5_ATI = 34858;
  private static final int GL_DRAW_BUFFER5_EXT = 34858;
  private static final int GL_DRAW_BUFFER5_NV = 34858;
  private static final int GL_DRAW_BUFFER6 = 34859;
  private static final int GL_DRAW_BUFFER6_EXT = 34859;
  private static final int GL_DRAW_BUFFER6_NV = 34859;
  private static final int GL_DRAW_BUFFER6_ARB = 34859;
  private static final int GL_DRAW_BUFFER6_ATI = 34859;
  private static final int GL_DRAW_BUFFER7 = 34860;
  private static final int GL_DRAW_BUFFER7_EXT = 34860;
  private static final int GL_DRAW_BUFFER7_NV = 34860;
  private static final int GL_DRAW_BUFFER7_ARB = 34860;
  private static final int GL_DRAW_BUFFER7_ATI = 34860;
  private static final int GL_DRAW_BUFFER8_ATI = 34861;
  private static final int GL_DRAW_BUFFER8_ARB = 34861;
  private static final int GL_DRAW_BUFFER8 = 34861;
  private static final int GL_DRAW_BUFFER8_NV = 34861;
  private static final int GL_DRAW_BUFFER8_EXT = 34861;
  private static final int GL_DRAW_BUFFER9 = 34862;
  private static final int GL_DRAW_BUFFER9_ATI = 34862;
  private static final int GL_DRAW_BUFFER9_ARB = 34862;
  private static final int GL_DRAW_BUFFER9_NV = 34862;
  private static final int GL_DRAW_BUFFER9_EXT = 34862;
  private static final int GL_DRAW_BUFFER10_EXT = 34863;
  private static final int GL_DRAW_BUFFER10_NV = 34863;
  private static final int GL_DRAW_BUFFER10_ARB = 34863;
  private static final int GL_DRAW_BUFFER10_ATI = 34863;
  private static final int GL_DRAW_BUFFER10 = 34863;
  private static final int GL_DRAW_BUFFER11_EXT = 34864;
  private static final int GL_DRAW_BUFFER11 = 34864;
  private static final int GL_DRAW_BUFFER11_NV = 34864;
  private static final int GL_DRAW_BUFFER11_ARB = 34864;
  private static final int GL_DRAW_BUFFER11_ATI = 34864;
  private static final int GL_DRAW_BUFFER12_ARB = 34865;
  private static final int GL_DRAW_BUFFER12_ATI = 34865;
  private static final int GL_DRAW_BUFFER12_NV = 34865;
  private static final int GL_DRAW_BUFFER12_EXT = 34865;
  private static final int GL_DRAW_BUFFER12 = 34865;
  private static final int GL_DRAW_BUFFER13_ARB = 34866;
  private static final int GL_DRAW_BUFFER13_ATI = 34866;
  private static final int GL_DRAW_BUFFER13_NV = 34866;
  private static final int GL_DRAW_BUFFER13 = 34866;
  private static final int GL_DRAW_BUFFER13_EXT = 34866;
  private static final int GL_DRAW_BUFFER14_NV = 34867;
  private static final int GL_DRAW_BUFFER14_EXT = 34867;
  private static final int GL_DRAW_BUFFER14_ATI = 34867;
  private static final int GL_DRAW_BUFFER14_ARB = 34867;
  private static final int GL_DRAW_BUFFER14 = 34867;
  private static final int GL_DRAW_BUFFER15_NV = 34868;
  private static final int GL_DRAW_BUFFER15_EXT = 34868;
  private static final int GL_DRAW_BUFFER15 = 34868;
  private static final int GL_DRAW_BUFFER15_ATI = 34868;
  private static final int GL_DRAW_BUFFER15_ARB = 34868;
  private static final int GL_BLEND_EQUATION_ALPHA = 34877;
  private static final int GL_BLEND_EQUATION_ALPHA_OES = 34877;
  private static final int GL_BLEND_EQUATION_ALPHA_EXT = 34877;
  private static final int GL_SUBSAMPLE_DISTANCE_AMD = 34879;
  private static final int GL_MATRIX_PALETTE_ARB = 34880;
  private static final int GL_MATRIX_PALETTE_OES = 34880;
  private static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881;
  private static final int GL_MAX_PALETTE_MATRICES_OES = 34882;
  private static final int GL_MAX_PALETTE_MATRICES_ARB = 34882;
  private static final int GL_CURRENT_PALETTE_MATRIX_ARB = 34883;
  private static final int GL_CURRENT_PALETTE_MATRIX_OES = 34883;
  private static final int GL_MATRIX_INDEX_ARRAY_ARB = 34884;
  private static final int GL_MATRIX_INDEX_ARRAY_OES = 34884;
  private static final int GL_CURRENT_MATRIX_INDEX_ARB = 34885;
  private static final int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 34886;
  private static final int GL_MATRIX_INDEX_ARRAY_SIZE_OES = 34886;
  private static final int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 34887;
  private static final int GL_MATRIX_INDEX_ARRAY_TYPE_OES = 34887;
  private static final int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888;
  private static final int GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 34888;
  private static final int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 34889;
  private static final int GL_MATRIX_INDEX_ARRAY_POINTER_OES = 34889;
  private static final int GL_TEXTURE_DEPTH_SIZE = 34890;
  private static final int GL_DEPTH_TEXTURE_MODE = 34891;
  private static final int GL_TEXTURE_COMPARE_MODE = 34892;
  private static final int GL_TEXTURE_COMPARE_FUNC = 34893;
  private static final int GL_COMPARE_REF_TO_TEXTURE = 34894;
  private static final int GL_COMPARE_R_TO_TEXTURE = 34894;
  private static final int GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894;
  private static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895;
  private static final int GL_POINT_SPRITE = 34913;
  private static final int GL_POINT_SPRITE_NV = 34913;
  private static final int GL_COORD_REPLACE = 34914;
  private static final int GL_COORD_REPLACE_NV = 34914;
  private static final int GL_POINT_SPRITE_R_MODE_NV = 34915;
  private static final int GL_QUERY_COUNTER_BITS_ARB = 34916;
  private static final int GL_QUERY_COUNTER_BITS = 34916;
  private static final int GL_PIXEL_COUNTER_BITS_NV = 34916;
  private static final int GL_QUERY_COUNTER_BITS_EXT = 34916;
  private static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 34917;
  private static final int GL_CURRENT_QUERY_ARB = 34917;
  private static final int GL_CURRENT_QUERY = 34917;
  private static final int GL_CURRENT_QUERY_EXT = 34917;
  private static final int GL_QUERY_RESULT_EXT = 34918;
  private static final int GL_PIXEL_COUNT_NV = 34918;
  private static final int GL_QUERY_RESULT = 34918;
  private static final int GL_QUERY_RESULT_ARB = 34918;
  private static final int GL_QUERY_RESULT_AVAILABLE_EXT = 34919;
  private static final int GL_PIXEL_COUNT_AVAILABLE_NV = 34919;
  private static final int GL_QUERY_RESULT_AVAILABLE_ARB = 34919;
  private static final int GL_QUERY_RESULT_AVAILABLE = 34919;
  private static final int GL_MAX_VERTEX_ATTRIBS = 34921;
  private static final int GL_MAX_VERTEX_ATTRIBS_ARB = 34921;
  private static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922;
  private static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
  private static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;
  private static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924;
  private static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 34924;
  private static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;
  private static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 34925;
  private static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925;
  private static final int GL_MAX_TEXTURE_COORDS = 34929;
  private static final int GL_MAX_TEXTURE_COORDS_ARB = 34929;
  private static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930;
  private static final int GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
  private static final int GL_PROGRAM_ERROR_STRING_ARB = 34932;
  private static final int GL_PROGRAM_FORMAT_ASCII_ARB = 34933;
  private static final int GL_PROGRAM_FORMAT_ARB = 34934;
  private static final int GL_WRITE_PIXEL_DATA_RANGE_NV = 34936;
  private static final int GL_READ_PIXEL_DATA_RANGE_NV = 34937;
  private static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938;
  private static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939;
  private static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940;
  private static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 34941;
  private static final int GL_GEOMETRY_SHADER_INVOCATIONS = 34943;
  private static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943;
  private static final int GL_GEOMETRY_SHADER_INVOCATIONS_OES = 34943;
  private static final int GL_ARRAY_BUFFER_ARB = 34962;
  private static final int GL_ARRAY_BUFFER = 34962;
  private static final int GL_ELEMENT_ARRAY_BUFFER = 34963;
  private static final int GL_ELEMENT_ARRAY_BUFFER_ARB = 34963;
  private static final int GL_ARRAY_BUFFER_BINDING_ARB = 34964;
  private static final int GL_ARRAY_BUFFER_BINDING = 34964;
  private static final int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965;
  private static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
  private static final int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966;
  private static final int GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;
  private static final int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967;
  private static final int GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;
  private static final int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968;
  private static final int GL_COLOR_ARRAY_BUFFER_BINDING = 34968;
  private static final int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969;
  private static final int GL_INDEX_ARRAY_BUFFER_BINDING = 34969;
  private static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;
  private static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970;
  private static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971;
  private static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971;
  private static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972;
  private static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972;
  private static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973;
  private static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973;
  private static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973;
  private static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 34974;
  private static final int GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974;
  private static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975;
  private static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
  private static final int GL_PROGRAM_INSTRUCTIONS_ARB = 34976;
  private static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977;
  private static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978;
  private static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979;
  private static final int GL_PROGRAM_TEMPORARIES_ARB = 34980;
  private static final int GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981;
  private static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982;
  private static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983;
  private static final int GL_PROGRAM_PARAMETERS_ARB = 34984;
  private static final int GL_MAX_PROGRAM_PARAMETERS_ARB = 34985;
  private static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986;
  private static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987;
  private static final int GL_PROGRAM_ATTRIBS_ARB = 34988;
  private static final int GL_MAX_PROGRAM_ATTRIBS_ARB = 34989;
  private static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990;
  private static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991;
  private static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992;
  private static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993;
  private static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994;
  private static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995;
  private static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996;
  private static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997;
  private static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998;
  private static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999;
  private static final int GL_READ_ONLY_ARB = 35000;
  private static final int GL_READ_ONLY = 35000;
  private static final int GL_WRITE_ONLY = 35001;
  private static final int GL_WRITE_ONLY_OES = 35001;
  private static final int GL_WRITE_ONLY_ARB = 35001;
  private static final int GL_READ_WRITE_ARB = 35002;
  private static final int GL_READ_WRITE = 35002;
  private static final int GL_BUFFER_ACCESS = 35003;
  private static final int GL_BUFFER_ACCESS_ARB = 35003;
  private static final int GL_BUFFER_ACCESS_OES = 35003;
  private static final int GL_BUFFER_MAPPED = 35004;
  private static final int GL_BUFFER_MAPPED_ARB = 35004;
  private static final int GL_BUFFER_MAPPED_OES = 35004;
  private static final int GL_BUFFER_MAP_POINTER_OES = 35005;
  private static final int GL_BUFFER_MAP_POINTER = 35005;
  private static final int GL_BUFFER_MAP_POINTER_ARB = 35005;
  private static final int GL_WRITE_DISCARD_NV = 35006;
  private static final int GL_TIME_ELAPSED_EXT = 35007;
  private static final int GL_TIME_ELAPSED = 35007;
  private static final int GL_MATRIX0_ARB = 35008;
  private static final int GL_MATRIX1_ARB = 35009;
  private static final int GL_MATRIX2_ARB = 35010;
  private static final int GL_MATRIX3_ARB = 35011;
  private static final int GL_MATRIX4_ARB = 35012;
  private static final int GL_MATRIX5_ARB = 35013;
  private static final int GL_MATRIX6_ARB = 35014;
  private static final int GL_MATRIX7_ARB = 35015;
  private static final int GL_MATRIX8_ARB = 35016;
  private static final int GL_MATRIX9_ARB = 35017;
  private static final int GL_MATRIX10_ARB = 35018;
  private static final int GL_MATRIX11_ARB = 35019;
  private static final int GL_MATRIX12_ARB = 35020;
  private static final int GL_MATRIX13_ARB = 35021;
  private static final int GL_MATRIX14_ARB = 35022;
  private static final int GL_MATRIX15_ARB = 35023;
  private static final int GL_MATRIX16_ARB = 35024;
  private static final int GL_MATRIX17_ARB = 35025;
  private static final int GL_MATRIX18_ARB = 35026;
  private static final int GL_MATRIX19_ARB = 35027;
  private static final int GL_MATRIX20_ARB = 35028;
  private static final int GL_MATRIX21_ARB = 35029;
  private static final int GL_MATRIX22_ARB = 35030;
  private static final int GL_MATRIX23_ARB = 35031;
  private static final int GL_MATRIX24_ARB = 35032;
  private static final int GL_MATRIX25_ARB = 35033;
  private static final int GL_MATRIX26_ARB = 35034;
  private static final int GL_MATRIX27_ARB = 35035;
  private static final int GL_MATRIX28_ARB = 35036;
  private static final int GL_MATRIX29_ARB = 35037;
  private static final int GL_MATRIX30_ARB = 35038;
  private static final int GL_MATRIX31_ARB = 35039;
  private static final int GL_STREAM_DRAW_ARB = 35040;
  private static final int GL_STREAM_DRAW = 35040;
  private static final int GL_STREAM_READ_ARB = 35041;
  private static final int GL_STREAM_READ = 35041;
  private static final int GL_STREAM_COPY_ARB = 35042;
  private static final int GL_STREAM_COPY = 35042;
  private static final int GL_STATIC_DRAW = 35044;
  private static final int GL_STATIC_DRAW_ARB = 35044;
  private static final int GL_STATIC_READ_ARB = 35045;
  private static final int GL_STATIC_READ = 35045;
  private static final int GL_STATIC_COPY_ARB = 35046;
  private static final int GL_STATIC_COPY = 35046;
  private static final int GL_DYNAMIC_DRAW = 35048;
  private static final int GL_DYNAMIC_DRAW_ARB = 35048;
  private static final int GL_DYNAMIC_READ_ARB = 35049;
  private static final int GL_DYNAMIC_READ = 35049;
  private static final int GL_DYNAMIC_COPY_ARB = 35050;
  private static final int GL_DYNAMIC_COPY = 35050;
  private static final int GL_PIXEL_PACK_BUFFER = 35051;
  private static final int GL_PIXEL_UNPACK_BUFFER = 35052;
  private static final int GL_PIXEL_PACK_BUFFER_BINDING = 35053;
  private static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;
  private static final int GL_DEPTH24_STENCIL8 = 35056;
  private static final int GL_TEXTURE_STENCIL_SIZE = 35057;
  private static final int GL_SRC1_COLOR = 35065;
  private static final int GL_SRC1_COLOR_EXT = 35065;
  private static final int GL_ONE_MINUS_SRC1_COLOR = 35066;
  private static final int GL_ONE_MINUS_SRC1_COLOR_EXT = 35066;
  private static final int GL_ONE_MINUS_SRC1_ALPHA = 35067;
  private static final int GL_ONE_MINUS_SRC1_ALPHA_EXT = 35067;
  private static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 35068;
  private static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068;
  private static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 35069;
  private static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
  private static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 35070;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
  private static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 35070;
  private static final int GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071;
  private static final int GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;
  private static final int GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;
  private static final int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 35076;
  private static final int GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076;
  private static final int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 35077;
  private static final int GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;
  private static final int GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077;
  private static final int GL_PROGRAM_ATTRIB_COMPONENTS_NV = 35078;
  private static final int GL_PROGRAM_RESULT_COMPONENTS_NV = 35079;
  private static final int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080;
  private static final int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081;
  private static final int GL_STENCIL_TEST_TWO_SIDE_EXT = 35088;
  private static final int GL_ACTIVE_STENCIL_FACE_EXT = 35089;
  private static final int GL_SAMPLES_PASSED = 35092;
  private static final int GL_SAMPLES_PASSED_ARB = 35092;
  private static final int GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 35094;
  private static final int GL_GEOMETRY_VERTICES_OUT = 35094;
  private static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094;
  private static final int GL_GEOMETRY_INPUT_TYPE = 35095;
  private static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095;
  private static final int GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 35095;
  private static final int GL_GEOMETRY_OUTPUT_TYPE = 35096;
  private static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 35096;
  private static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096;
  private static final int GL_SAMPLER_BINDING = 35097;
  private static final int GL_CLAMP_VERTEX_COLOR_ARB = 35098;
  private static final int GL_CLAMP_VERTEX_COLOR = 35098;
  private static final int GL_CLAMP_FRAGMENT_COLOR_ARB = 35099;
  private static final int GL_CLAMP_FRAGMENT_COLOR = 35099;
  private static final int GL_CLAMP_READ_COLOR_ARB = 35100;
  private static final int GL_CLAMP_READ_COLOR = 35100;
  private static final int GL_FIXED_ONLY = 35101;
  private static final int GL_FIXED_ONLY_ARB = 35101;
  private static final int GL_FRAGMENT_SHADER_ATI = 35104;
  private static final int GL_REG_0_ATI = 35105;
  private static final int GL_REG_1_ATI = 35106;
  private static final int GL_REG_2_ATI = 35107;
  private static final int GL_REG_3_ATI = 35108;
  private static final int GL_REG_4_ATI = 35109;
  private static final int GL_REG_5_ATI = 35110;
  private static final int GL_REG_6_ATI = 35111;
  private static final int GL_REG_7_ATI = 35112;
  private static final int GL_REG_8_ATI = 35113;
  private static final int GL_REG_9_ATI = 35114;
  private static final int GL_REG_10_ATI = 35115;
  private static final int GL_REG_11_ATI = 35116;
  private static final int GL_REG_12_ATI = 35117;
  private static final int GL_REG_13_ATI = 35118;
  private static final int GL_REG_14_ATI = 35119;
  private static final int GL_REG_15_ATI = 35120;
  private static final int GL_REG_16_ATI = 35121;
  private static final int GL_REG_17_ATI = 35122;
  private static final int GL_REG_18_ATI = 35123;
  private static final int GL_REG_19_ATI = 35124;
  private static final int GL_REG_20_ATI = 35125;
  private static final int GL_REG_21_ATI = 35126;
  private static final int GL_REG_22_ATI = 35127;
  private static final int GL_REG_23_ATI = 35128;
  private static final int GL_REG_24_ATI = 35129;
  private static final int GL_REG_25_ATI = 35130;
  private static final int GL_REG_26_ATI = 35131;
  private static final int GL_REG_27_ATI = 35132;
  private static final int GL_REG_28_ATI = 35133;
  private static final int GL_REG_29_ATI = 35134;
  private static final int GL_REG_30_ATI = 35135;
  private static final int GL_REG_31_ATI = 35136;
  private static final int GL_CON_0_ATI = 35137;
  private static final int GL_CON_1_ATI = 35138;
  private static final int GL_CON_2_ATI = 35139;
  private static final int GL_CON_3_ATI = 35140;
  private static final int GL_CON_4_ATI = 35141;
  private static final int GL_CON_5_ATI = 35142;
  private static final int GL_CON_6_ATI = 35143;
  private static final int GL_CON_7_ATI = 35144;
  private static final int GL_CON_8_ATI = 35145;
  private static final int GL_CON_9_ATI = 35146;
  private static final int GL_CON_10_ATI = 35147;
  private static final int GL_CON_11_ATI = 35148;
  private static final int GL_CON_12_ATI = 35149;
  private static final int GL_CON_13_ATI = 35150;
  private static final int GL_CON_14_ATI = 35151;
  private static final int GL_CON_15_ATI = 35152;
  private static final int GL_CON_16_ATI = 35153;
  private static final int GL_CON_17_ATI = 35154;
  private static final int GL_CON_18_ATI = 35155;
  private static final int GL_CON_19_ATI = 35156;
  private static final int GL_CON_20_ATI = 35157;
  private static final int GL_CON_21_ATI = 35158;
  private static final int GL_CON_22_ATI = 35159;
  private static final int GL_CON_23_ATI = 35160;
  private static final int GL_CON_24_ATI = 35161;
  private static final int GL_CON_25_ATI = 35162;
  private static final int GL_CON_26_ATI = 35163;
  private static final int GL_CON_27_ATI = 35164;
  private static final int GL_CON_28_ATI = 35165;
  private static final int GL_CON_29_ATI = 35166;
  private static final int GL_CON_30_ATI = 35167;
  private static final int GL_CON_31_ATI = 35168;
  private static final int GL_MOV_ATI = 35169;
  private static final int GL_ADD_ATI = 35171;
  private static final int GL_MUL_ATI = 35172;
  private static final int GL_SUB_ATI = 35173;
  private static final int GL_DOT3_ATI = 35174;
  private static final int GL_DOT4_ATI = 35175;
  private static final int GL_MAD_ATI = 35176;
  private static final int GL_LERP_ATI = 35177;
  private static final int GL_CND_ATI = 35178;
  private static final int GL_CND0_ATI = 35179;
  private static final int GL_DOT2_ADD_ATI = 35180;
  private static final int GL_SECONDARY_INTERPOLATOR_ATI = 35181;
  private static final int GL_NUM_FRAGMENT_REGISTERS_ATI = 35182;
  private static final int GL_NUM_FRAGMENT_CONSTANTS_ATI = 35183;
  private static final int GL_NUM_PASSES_ATI = 35184;
  private static final int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 35185;
  private static final int GL_NUM_INSTRUCTIONS_TOTAL_ATI = 35186;
  private static final int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187;
  private static final int GL_NUM_LOOPBACK_COMPONENTS_ATI = 35188;
  private static final int GL_COLOR_ALPHA_PAIRING_ATI = 35189;
  private static final int GL_SWIZZLE_STR_ATI = 35190;
  private static final int GL_SWIZZLE_STQ_ATI = 35191;
  private static final int GL_SWIZZLE_STR_DR_ATI = 35192;
  private static final int GL_SWIZZLE_STQ_DQ_ATI = 35193;
  private static final int GL_SWIZZLE_STRQ_ATI = 35194;
  private static final int GL_SWIZZLE_STRQ_DQ_ATI = 35195;
  private static final int GL_INTERLACE_OML = 35200;
  private static final int GL_INTERLACE_READ_OML = 35201;
  private static final int GL_FORMAT_SUBSAMPLE_24_24_OML = 35202;
  private static final int GL_FORMAT_SUBSAMPLE_244_244_OML = 35203;
  private static final int GL_PACK_RESAMPLE_OML = 35204;
  private static final int GL_UNPACK_RESAMPLE_OML = 35205;
  private static final int GL_RESAMPLE_REPLICATE_OML = 35206;
  private static final int GL_RESAMPLE_ZERO_FILL_OML = 35207;
  private static final int GL_RESAMPLE_AVERAGE_OML = 35208;
  private static final int GL_RESAMPLE_DECIMATE_OML = 35209;
  private static final int GL_POINT_SIZE_ARRAY_TYPE_OES = 35210;
  private static final int GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211;
  private static final int GL_POINT_SIZE_ARRAY_POINTER_OES = 35212;
  private static final int GL_VERTEX_ATTRIB_MAP1_APPLE = 35328;
  private static final int GL_VERTEX_ATTRIB_MAP2_APPLE = 35329;
  private static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330;
  private static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331;
  private static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332;
  private static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333;
  private static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334;
  private static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335;
  private static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336;
  private static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337;
  private static final int GL_DRAW_PIXELS_APPLE = 35338;
  private static final int GL_FENCE_APPLE = 35339;
  private static final int GL_ELEMENT_ARRAY_APPLE = 35340;
  private static final int GL_ELEMENT_ARRAY_TYPE_APPLE = 35341;
  private static final int GL_ELEMENT_ARRAY_POINTER_APPLE = 35342;
  private static final int GL_COLOR_FLOAT_APPLE = 35343;
  private static final int GL_UNIFORM_BUFFER = 35345;
  private static final int GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346;
  private static final int GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347;
  private static final int GL_AUX_DEPTH_STENCIL_APPLE = 35348;
  private static final int GL_PACK_ROW_BYTES_APPLE = 35349;
  private static final int GL_UNPACK_ROW_BYTES_APPLE = 35350;
  private static final int GL_RELEASED_APPLE = 35353;
  private static final int GL_VOLATILE_APPLE = 35354;
  private static final int GL_RETAINED_APPLE = 35355;
  private static final int GL_UNDEFINED_APPLE = 35356;
  private static final int GL_PURGEABLE_APPLE = 35357;
  private static final int GL_RGB_422_APPLE = 35359;
  private static final int GL_UNIFORM_BUFFER_BINDING = 35368;
  private static final int GL_UNIFORM_BUFFER_START = 35369;
  private static final int GL_UNIFORM_BUFFER_SIZE = 35370;
  private static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;
  private static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372;
  private static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;
  private static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 35372;
  private static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
  private static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;
  private static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;
  private static final int GL_MAX_UNIFORM_BLOCK_SIZE = 35376;
  private static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
  private static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 35378;
  private static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378;
  private static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;
  private static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
  private static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
  private static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;
  private static final int GL_ACTIVE_UNIFORM_BLOCKS = 35382;
  private static final int GL_UNIFORM_TYPE = 35383;
  private static final int GL_UNIFORM_SIZE = 35384;
  private static final int GL_UNIFORM_NAME_LENGTH = 35385;
  private static final int GL_UNIFORM_BLOCK_INDEX = 35386;
  private static final int GL_UNIFORM_OFFSET = 35387;
  private static final int GL_UNIFORM_ARRAY_STRIDE = 35388;
  private static final int GL_UNIFORM_MATRIX_STRIDE = 35389;
  private static final int GL_UNIFORM_IS_ROW_MAJOR = 35390;
  private static final int GL_UNIFORM_BLOCK_BINDING = 35391;
  private static final int GL_UNIFORM_BLOCK_DATA_SIZE = 35392;
  private static final int GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;
  private static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
  private static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
  private static final int GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407;
  private static final int GL_RGB_RAW_422_APPLE = 35409;
  private static final int GL_SYNC_OBJECT_APPLE = 35411;
  private static final int GL_FRAGMENT_SHADER = 35632;
  private static final int GL_VERTEX_SHADER_ARB = 35633;
  private static final int GL_VERTEX_SHADER = 35633;
  private static final int GL_PROGRAM_OBJECT_ARB = 35648;
  private static final int GL_PROGRAM_OBJECT_EXT = 35648;
  private static final int GL_SHADER_OBJECT_ARB = 35656;
  private static final int GL_SHADER_OBJECT_EXT = 35656;
  private static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
  private static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
  private static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658;
  private static final int GL_MAX_VARYING_FLOATS_ARB = 35659;
  private static final int GL_MAX_VARYING_FLOATS = 35659;
  private static final int GL_MAX_VARYING_COMPONENTS_EXT = 35659;
  private static final int GL_MAX_VARYING_COMPONENTS = 35659;
  private static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
  private static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660;
  private static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661;
  private static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
  private static final int GL_OBJECT_TYPE_ARB = 35662;
  private static final int GL_OBJECT_SUBTYPE_ARB = 35663;
  private static final int GL_SHADER_TYPE = 35663;
  private static final int GL_FLOAT_VEC2 = 35664;
  private static final int GL_FLOAT_VEC2_ARB = 35664;
  private static final int GL_FLOAT_VEC3 = 35665;
  private static final int GL_FLOAT_VEC3_ARB = 35665;
  private static final int GL_FLOAT_VEC4 = 35666;
  private static final int GL_FLOAT_VEC4_ARB = 35666;
  private static final int GL_INT_VEC2 = 35667;
  private static final int GL_INT_VEC2_ARB = 35667;
  private static final int GL_INT_VEC3 = 35668;
  private static final int GL_INT_VEC3_ARB = 35668;
  private static final int GL_INT_VEC4_ARB = 35669;
  private static final int GL_INT_VEC4 = 35669;
  private static final int GL_BOOL_ARB = 35670;
  private static final int GL_BOOL = 35670;
  private static final int GL_BOOL_VEC2 = 35671;
  private static final int GL_BOOL_VEC2_ARB = 35671;
  private static final int GL_BOOL_VEC3_ARB = 35672;
  private static final int GL_BOOL_VEC3 = 35672;
  private static final int GL_BOOL_VEC4 = 35673;
  private static final int GL_BOOL_VEC4_ARB = 35673;
  private static final int GL_FLOAT_MAT2_ARB = 35674;
  private static final int GL_FLOAT_MAT2 = 35674;
  private static final int GL_FLOAT_MAT3 = 35675;
  private static final int GL_FLOAT_MAT3_ARB = 35675;
  private static final int GL_FLOAT_MAT4_ARB = 35676;
  private static final int GL_FLOAT_MAT4 = 35676;
  private static final int GL_SAMPLER_1D = 35677;
  private static final int GL_SAMPLER_1D_ARB = 35677;
  private static final int GL_SAMPLER_2D = 35678;
  private static final int GL_SAMPLER_2D_ARB = 35678;
  private static final int GL_SAMPLER_3D_ARB = 35679;
  private static final int GL_SAMPLER_3D = 35679;
  private static final int GL_SAMPLER_3D_OES = 35679;
  private static final int GL_SAMPLER_CUBE_ARB = 35680;
  private static final int GL_SAMPLER_CUBE = 35680;
  private static final int GL_SAMPLER_1D_SHADOW_ARB = 35681;
  private static final int GL_SAMPLER_1D_SHADOW = 35681;
  private static final int GL_SAMPLER_2D_SHADOW = 35682;
  private static final int GL_SAMPLER_2D_SHADOW_ARB = 35682;
  private static final int GL_SAMPLER_2D_RECT_ARB = 35683;
  private static final int GL_SAMPLER_2D_RECT = 35683;
  private static final int GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684;
  private static final int GL_SAMPLER_2D_RECT_SHADOW = 35684;
  private static final int GL_FLOAT_MAT2x3_NV = 35685;
  private static final int GL_FLOAT_MAT2x3 = 35685;
  private static final int GL_FLOAT_MAT2x4_NV = 35686;
  private static final int GL_FLOAT_MAT2x4 = 35686;
  private static final int GL_FLOAT_MAT3x2 = 35687;
  private static final int GL_FLOAT_MAT3x2_NV = 35687;
  private static final int GL_FLOAT_MAT3x4 = 35688;
  private static final int GL_FLOAT_MAT3x4_NV = 35688;
  private static final int GL_FLOAT_MAT4x2 = 35689;
  private static final int GL_FLOAT_MAT4x2_NV = 35689;
  private static final int GL_FLOAT_MAT4x3 = 35690;
  private static final int GL_FLOAT_MAT4x3_NV = 35690;
  private static final int GL_DELETE_STATUS = 35712;
  private static final int GL_OBJECT_DELETE_STATUS_ARB = 35712;
  private static final int GL_OBJECT_COMPILE_STATUS_ARB = 35713;
  private static final int GL_COMPILE_STATUS = 35713;
  private static final int GL_LINK_STATUS = 35714;
  private static final int GL_OBJECT_LINK_STATUS_ARB = 35714;
  private static final int GL_OBJECT_VALIDATE_STATUS_ARB = 35715;
  private static final int GL_VALIDATE_STATUS = 35715;
  private static final int GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716;
  private static final int GL_INFO_LOG_LENGTH = 35716;
  private static final int GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717;
  private static final int GL_ATTACHED_SHADERS = 35717;
  private static final int GL_ACTIVE_UNIFORMS = 35718;
  private static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718;
  private static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
  private static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719;
  private static final int GL_SHADER_SOURCE_LENGTH = 35720;
  private static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720;
  private static final int GL_ACTIVE_ATTRIBUTES = 35721;
  private static final int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721;
  private static final int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722;
  private static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
  private static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
  private static final int GL_SHADING_LANGUAGE_VERSION = 35724;
  private static final int GL_CURRENT_PROGRAM = 35725;
  private static final int GL_ACTIVE_PROGRAM_EXT = 35725;
  private static final int GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;
  private static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
  private static final int GL_POINT_SIZE_ARRAY_OES = 35740;
  private static final int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742;
  private static final int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;
  private static final int GL_FRAGMENT_PROGRAM_POSITION_MESA = 35760;
  private static final int GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 35761;
  private static final int GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 35762;
  private static final int GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 35763;
  private static final int GL_VERTEX_PROGRAM_POSITION_MESA = 35764;
  private static final int GL_VERTEX_PROGRAM_CALLBACK_MESA = 35765;
  private static final int GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 35766;
  private static final int GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 35767;
  private static final int GL_TILE_RASTER_ORDER_FIXED_MESA = 35768;
  private static final int GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 35769;
  private static final int GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 35770;
  private static final int GL_COUNTER_TYPE_AMD = 35776;
  private static final int GL_COUNTER_RANGE_AMD = 35777;
  private static final int GL_UNSIGNED_INT64_AMD = 35778;
  private static final int GL_PERCENTAGE_AMD = 35779;
  private static final int GL_PERFMON_RESULT_AVAILABLE_AMD = 35780;
  private static final int GL_PERFMON_RESULT_SIZE_AMD = 35781;
  private static final int GL_PERFMON_RESULT_AMD = 35782;
  private static final int GL_TEXTURE_WIDTH_QCOM = 35794;
  private static final int GL_TEXTURE_HEIGHT_QCOM = 35795;
  private static final int GL_TEXTURE_DEPTH_QCOM = 35796;
  private static final int GL_TEXTURE_INTERNAL_FORMAT_QCOM = 35797;
  private static final int GL_TEXTURE_FORMAT_QCOM = 35798;
  private static final int GL_TEXTURE_TYPE_QCOM = 35799;
  private static final int GL_TEXTURE_IMAGE_VALID_QCOM = 35800;
  private static final int GL_TEXTURE_NUM_LEVELS_QCOM = 35801;
  private static final int GL_TEXTURE_TARGET_QCOM = 35802;
  private static final int GL_TEXTURE_OBJECT_VALID_QCOM = 35803;
  private static final int GL_STATE_RESTORE = 35804;
  private static final int GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 35835;
  private static final int GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 35836;
  private static final int GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 35837;
  private static final int GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 35838;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 35839;
  private static final int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
  private static final int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
  private static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
  private static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
  private static final int GL_MODULATE_COLOR_IMG = 35844;
  private static final int GL_RECIP_ADD_SIGNED_ALPHA_IMG = 35845;
  private static final int GL_TEXTURE_ALPHA_MODULATE_IMG = 35846;
  private static final int GL_FACTOR_ALPHA_MODULATE_IMG = 35847;
  private static final int GL_FRAGMENT_ALPHA_MODULATE_IMG = 35848;
  private static final int GL_ADD_BLEND_IMG = 35849;
  private static final int GL_SGX_BINARY_IMG = 35850;
  private static final int GL_TEXTURE_RED_TYPE = 35856;
  private static final int GL_TEXTURE_GREEN_TYPE = 35857;
  private static final int GL_TEXTURE_BLUE_TYPE = 35858;
  private static final int GL_TEXTURE_ALPHA_TYPE = 35859;
  private static final int GL_TEXTURE_LUMINANCE_TYPE = 35860;
  private static final int GL_TEXTURE_INTENSITY_TYPE = 35861;
  private static final int GL_TEXTURE_DEPTH_TYPE = 35862;
  private static final int GL_UNSIGNED_NORMALIZED = 35863;
  private static final int GL_TEXTURE_1D_ARRAY = 35864;
  private static final int GL_TEXTURE_1D_ARRAY_EXT = 35864;
  private static final int GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865;
  private static final int GL_PROXY_TEXTURE_1D_ARRAY = 35865;
  private static final int GL_TEXTURE_2D_ARRAY = 35866;
  private static final int GL_TEXTURE_2D_ARRAY_EXT = 35866;
  private static final int GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867;
  private static final int GL_PROXY_TEXTURE_2D_ARRAY = 35867;
  private static final int GL_TEXTURE_BINDING_1D_ARRAY = 35868;
  private static final int GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868;
  private static final int GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869;
  private static final int GL_TEXTURE_BINDING_2D_ARRAY = 35869;
  private static final int GL_GEOMETRY_PROGRAM_NV = 35878;
  private static final int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879;
  private static final int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 35881;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881;
  private static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;
  private static final int GL_TEXTURE_BUFFER = 35882;
  private static final int GL_TEXTURE_BUFFER_BINDING_EXT = 35882;
  private static final int GL_TEXTURE_BUFFER_BINDING_OES = 35882;
  private static final int GL_TEXTURE_BUFFER_ARB = 35882;
  private static final int GL_TEXTURE_BUFFER_BINDING = 35882;
  private static final int GL_TEXTURE_BUFFER_OES = 35882;
  private static final int GL_TEXTURE_BUFFER_EXT = 35882;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE_OES = 35883;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE = 35883;
  private static final int GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 35883;
  private static final int GL_TEXTURE_BINDING_BUFFER_ARB = 35884;
  private static final int GL_TEXTURE_BINDING_BUFFER_OES = 35884;
  private static final int GL_TEXTURE_BINDING_BUFFER_EXT = 35884;
  private static final int GL_TEXTURE_BINDING_BUFFER = 35884;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 35885;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885;
  private static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885;
  private static final int GL_TEXTURE_BUFFER_FORMAT_ARB = 35886;
  private static final int GL_TEXTURE_BUFFER_FORMAT_EXT = 35886;
  private static final int GL_ANY_SAMPLES_PASSED = 35887;
  private static final int GL_ANY_SAMPLES_PASSED_EXT = 35887;
  private static final int GL_SAMPLE_SHADING = 35894;
  private static final int GL_MIN_SAMPLE_SHADING_VALUE = 35895;
  private static final int GL_R11F_G11F_B10F_APPLE = 35898;
  private static final int GL_R11F_G11F_B10F = 35898;
  private static final int GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;
  private static final int GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 35899;
  private static final int GL_RGB9_E5_APPLE = 35901;
  private static final int GL_RGB9_E5 = 35901;
  private static final int GL_UNSIGNED_INT_5_9_9_9_REV = 35902;
  private static final int GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 35902;
  private static final int GL_TEXTURE_SHARED_SIZE = 35903;
  private static final int GL_SRGB = 35904;
  private static final int GL_SRGB8 = 35905;
  private static final int GL_SRGB_ALPHA = 35906;
  private static final int GL_SRGB8_ALPHA8 = 35907;
  private static final int GL_SLUMINANCE_ALPHA = 35908;
  private static final int GL_SLUMINANCE8_ALPHA8 = 35909;
  private static final int GL_SLUMINANCE = 35910;
  private static final int GL_SLUMINANCE8 = 35911;
  private static final int GL_COMPRESSED_SRGB = 35912;
  private static final int GL_COMPRESSED_SRGB_ALPHA = 35913;
  private static final int GL_COMPRESSED_SLUMINANCE = 35914;
  private static final int GL_COMPRESSED_SLUMINANCE_ALPHA = 35915;
  private static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958;
  private static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;
  private static final int GL_BACK_PRIMARY_COLOR_NV = 35959;
  private static final int GL_BACK_SECONDARY_COLOR_NV = 35960;
  private static final int GL_TEXTURE_COORD_NV = 35961;
  private static final int GL_CLIP_DISTANCE_NV = 35962;
  private static final int GL_VERTEX_ID_NV = 35963;
  private static final int GL_PRIMITIVE_ID_NV = 35964;
  private static final int GL_GENERIC_ATTRIB_NV = 35965;
  private static final int GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 35967;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 35968;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968;
  private static final int GL_ACTIVE_VARYINGS_NV = 35969;
  private static final int GL_ACTIVE_VARYING_MAX_LENGTH_NV = 35970;
  private static final int GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971;
  private static final int GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 35971;
  private static final int GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 35972;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 35973;
  private static final int GL_TRANSFORM_FEEDBACK_RECORD_NV = 35974;
  private static final int GL_PRIMITIVES_GENERATED_NV = 35975;
  private static final int GL_PRIMITIVES_GENERATED_EXT = 35975;
  private static final int GL_PRIMITIVES_GENERATED_OES = 35975;
  private static final int GL_PRIMITIVES_GENERATED = 35975;
  private static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 35976;
  private static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
  private static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976;
  private static final int GL_RASTERIZER_DISCARD_EXT = 35977;
  private static final int GL_RASTERIZER_DISCARD = 35977;
  private static final int GL_RASTERIZER_DISCARD_NV = 35977;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 35978;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 35979;
  private static final int GL_INTERLEAVED_ATTRIBS = 35980;
  private static final int GL_INTERLEAVED_ATTRIBS_EXT = 35980;
  private static final int GL_INTERLEAVED_ATTRIBS_NV = 35980;
  private static final int GL_SEPARATE_ATTRIBS_NV = 35981;
  private static final int GL_SEPARATE_ATTRIBS = 35981;
  private static final int GL_SEPARATE_ATTRIBS_EXT = 35981;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_NV = 35982;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER = 35982;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 35983;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983;
  private static final int GL_ATC_RGB_AMD = 35986;
  private static final int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
  private static final int GL_POINT_SPRITE_COORD_ORIGIN = 36000;
  private static final int GL_LOWER_LEFT = 36001;
  private static final int GL_LOWER_LEFT_EXT = 36001;
  private static final int GL_UPPER_LEFT_EXT = 36002;
  private static final int GL_UPPER_LEFT = 36002;
  private static final int GL_STENCIL_BACK_REF = 36003;
  private static final int GL_STENCIL_BACK_VALUE_MASK = 36004;
  private static final int GL_STENCIL_BACK_WRITEMASK = 36005;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING = 36006;
  private static final int GL_FRAMEBUFFER_BINDING = 36006;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 36006;
  private static final int GL_FRAMEBUFFER_BINDING_EXT = 36006;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 36006;
  private static final int GL_FRAMEBUFFER_BINDING_OES = 36006;
  private static final int GL_DRAW_FRAMEBUFFER_BINDING_NV = 36006;
  private static final int GL_FRAMEBUFFER_BINDING_ANGLE = 36006;
  private static final int GL_RENDERBUFFER_BINDING_ANGLE = 36007;
  private static final int GL_RENDERBUFFER_BINDING_EXT = 36007;
  private static final int GL_RENDERBUFFER_BINDING_OES = 36007;
  private static final int GL_RENDERBUFFER_BINDING = 36007;
  private static final int GL_READ_FRAMEBUFFER_NV = 36008;
  private static final int GL_READ_FRAMEBUFFER = 36008;
  private static final int GL_READ_FRAMEBUFFER_APPLE = 36008;
  private static final int GL_READ_FRAMEBUFFER_EXT = 36008;
  private static final int GL_READ_FRAMEBUFFER_ANGLE = 36008;
  private static final int GL_DRAW_FRAMEBUFFER_NV = 36009;
  private static final int GL_DRAW_FRAMEBUFFER_EXT = 36009;
  private static final int GL_DRAW_FRAMEBUFFER_ANGLE = 36009;
  private static final int GL_DRAW_FRAMEBUFFER = 36009;
  private static final int GL_DRAW_FRAMEBUFFER_APPLE = 36009;
  private static final int GL_READ_FRAMEBUFFER_BINDING_EXT = 36010;
  private static final int GL_READ_FRAMEBUFFER_BINDING_ANGLE = 36010;
  private static final int GL_READ_FRAMEBUFFER_BINDING_NV = 36010;
  private static final int GL_READ_FRAMEBUFFER_BINDING_APPLE = 36010;
  private static final int GL_READ_FRAMEBUFFER_BINDING = 36010;
  private static final int GL_RENDERBUFFER_SAMPLES_APPLE = 36011;
  private static final int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011;
  private static final int GL_RENDERBUFFER_SAMPLES = 36011;
  private static final int GL_RENDERBUFFER_SAMPLES_EXT = 36011;
  private static final int GL_RENDERBUFFER_SAMPLES_NV = 36011;
  private static final int GL_RENDERBUFFER_SAMPLES_ANGLE = 36011;
  private static final int GL_DEPTH_COMPONENT32F = 36012;
  private static final int GL_DEPTH32F_STENCIL8 = 36013;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 36048;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 36049;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 36050;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 36051;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 36052;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052;
  private static final int GL_FRAMEBUFFER_COMPLETE_EXT = 36053;
  private static final int GL_FRAMEBUFFER_COMPLETE = 36053;
  private static final int GL_FRAMEBUFFER_COMPLETE_OES = 36053;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 36054;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 36055;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 36057;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 36058;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060;
  private static final int GL_FRAMEBUFFER_UNSUPPORTED = 36061;
  private static final int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061;
  private static final int GL_FRAMEBUFFER_UNSUPPORTED_OES = 36061;
  private static final int GL_MAX_COLOR_ATTACHMENTS = 36063;
  private static final int GL_MAX_COLOR_ATTACHMENTS_EXT = 36063;
  private static final int GL_COLOR_ATTACHMENT0 = 36064;
  private static final int GL_COLOR_ATTACHMENT0_OES = 36064;
  private static final int GL_COLOR_ATTACHMENT0_NV = 36064;
  private static final int GL_COLOR_ATTACHMENT0_EXT = 36064;
  private static final int GL_COLOR_ATTACHMENT1_NV = 36065;
  private static final int GL_COLOR_ATTACHMENT1_EXT = 36065;
  private static final int GL_COLOR_ATTACHMENT1 = 36065;
  private static final int GL_COLOR_ATTACHMENT2 = 36066;
  private static final int GL_COLOR_ATTACHMENT2_NV = 36066;
  private static final int GL_COLOR_ATTACHMENT2_EXT = 36066;
  private static final int GL_COLOR_ATTACHMENT3 = 36067;
  private static final int GL_COLOR_ATTACHMENT3_EXT = 36067;
  private static final int GL_COLOR_ATTACHMENT3_NV = 36067;
  private static final int GL_COLOR_ATTACHMENT4_NV = 36068;
  private static final int GL_COLOR_ATTACHMENT4 = 36068;
  private static final int GL_COLOR_ATTACHMENT4_EXT = 36068;
  private static final int GL_COLOR_ATTACHMENT5_EXT = 36069;
  private static final int GL_COLOR_ATTACHMENT5 = 36069;
  private static final int GL_COLOR_ATTACHMENT5_NV = 36069;
  private static final int GL_COLOR_ATTACHMENT6 = 36070;
  private static final int GL_COLOR_ATTACHMENT6_EXT = 36070;
  private static final int GL_COLOR_ATTACHMENT6_NV = 36070;
  private static final int GL_COLOR_ATTACHMENT7 = 36071;
  private static final int GL_COLOR_ATTACHMENT7_NV = 36071;
  private static final int GL_COLOR_ATTACHMENT7_EXT = 36071;
  private static final int GL_COLOR_ATTACHMENT8 = 36072;
  private static final int GL_COLOR_ATTACHMENT8_NV = 36072;
  private static final int GL_COLOR_ATTACHMENT8_EXT = 36072;
  private static final int GL_COLOR_ATTACHMENT9_NV = 36073;
  private static final int GL_COLOR_ATTACHMENT9_EXT = 36073;
  private static final int GL_COLOR_ATTACHMENT9 = 36073;
  private static final int GL_COLOR_ATTACHMENT10_NV = 36074;
  private static final int GL_COLOR_ATTACHMENT10 = 36074;
  private static final int GL_COLOR_ATTACHMENT10_EXT = 36074;
  private static final int GL_COLOR_ATTACHMENT11_EXT = 36075;
  private static final int GL_COLOR_ATTACHMENT11 = 36075;
  private static final int GL_COLOR_ATTACHMENT11_NV = 36075;
  private static final int GL_COLOR_ATTACHMENT12 = 36076;
  private static final int GL_COLOR_ATTACHMENT12_EXT = 36076;
  private static final int GL_COLOR_ATTACHMENT12_NV = 36076;
  private static final int GL_COLOR_ATTACHMENT13_NV = 36077;
  private static final int GL_COLOR_ATTACHMENT13_EXT = 36077;
  private static final int GL_COLOR_ATTACHMENT13 = 36077;
  private static final int GL_COLOR_ATTACHMENT14_EXT = 36078;
  private static final int GL_COLOR_ATTACHMENT14 = 36078;
  private static final int GL_COLOR_ATTACHMENT14_NV = 36078;
  private static final int GL_COLOR_ATTACHMENT15 = 36079;
  private static final int GL_COLOR_ATTACHMENT15_EXT = 36079;
  private static final int GL_COLOR_ATTACHMENT15_NV = 36079;
  private static final int GL_COLOR_ATTACHMENT16 = 36080;
  private static final int GL_COLOR_ATTACHMENT17 = 36081;
  private static final int GL_COLOR_ATTACHMENT18 = 36082;
  private static final int GL_COLOR_ATTACHMENT19 = 36083;
  private static final int GL_COLOR_ATTACHMENT20 = 36084;
  private static final int GL_COLOR_ATTACHMENT21 = 36085;
  private static final int GL_COLOR_ATTACHMENT22 = 36086;
  private static final int GL_COLOR_ATTACHMENT23 = 36087;
  private static final int GL_COLOR_ATTACHMENT24 = 36088;
  private static final int GL_COLOR_ATTACHMENT25 = 36089;
  private static final int GL_COLOR_ATTACHMENT26 = 36090;
  private static final int GL_COLOR_ATTACHMENT27 = 36091;
  private static final int GL_COLOR_ATTACHMENT28 = 36092;
  private static final int GL_COLOR_ATTACHMENT29 = 36093;
  private static final int GL_COLOR_ATTACHMENT30 = 36094;
  private static final int GL_COLOR_ATTACHMENT31 = 36095;
  private static final int GL_DEPTH_ATTACHMENT_EXT = 36096;
  private static final int GL_DEPTH_ATTACHMENT_OES = 36096;
  private static final int GL_DEPTH_ATTACHMENT = 36096;
  private static final int GL_STENCIL_ATTACHMENT = 36128;
  private static final int GL_STENCIL_ATTACHMENT_OES = 36128;
  private static final int GL_STENCIL_ATTACHMENT_EXT = 36128;
  private static final int GL_FRAMEBUFFER_EXT = 36160;
  private static final int GL_FRAMEBUFFER_OES = 36160;
  private static final int GL_FRAMEBUFFER = 36160;
  private static final int GL_RENDERBUFFER_OES = 36161;
  private static final int GL_RENDERBUFFER_EXT = 36161;
  private static final int GL_RENDERBUFFER = 36161;
  private static final int GL_RENDERBUFFER_WIDTH = 36162;
  private static final int GL_RENDERBUFFER_WIDTH_EXT = 36162;
  private static final int GL_RENDERBUFFER_WIDTH_OES = 36162;
  private static final int GL_RENDERBUFFER_HEIGHT = 36163;
  private static final int GL_RENDERBUFFER_HEIGHT_EXT = 36163;
  private static final int GL_RENDERBUFFER_HEIGHT_OES = 36163;
  private static final int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164;
  private static final int GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 36164;
  private static final int GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
  private static final int GL_STENCIL_INDEX1_EXT = 36166;
  private static final int GL_STENCIL_INDEX1 = 36166;
  private static final int GL_STENCIL_INDEX4 = 36167;
  private static final int GL_STENCIL_INDEX4_EXT = 36167;
  private static final int GL_STENCIL_INDEX8 = 36168;
  private static final int GL_STENCIL_INDEX8_EXT = 36168;
  private static final int GL_STENCIL_INDEX16_EXT = 36169;
  private static final int GL_STENCIL_INDEX16 = 36169;
  private static final int GL_RENDERBUFFER_RED_SIZE_OES = 36176;
  private static final int GL_RENDERBUFFER_RED_SIZE_EXT = 36176;
  private static final int GL_RENDERBUFFER_RED_SIZE = 36176;
  private static final int GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177;
  private static final int GL_RENDERBUFFER_GREEN_SIZE = 36177;
  private static final int GL_RENDERBUFFER_GREEN_SIZE_OES = 36177;
  private static final int GL_RENDERBUFFER_BLUE_SIZE = 36178;
  private static final int GL_RENDERBUFFER_BLUE_SIZE_OES = 36178;
  private static final int GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178;
  private static final int GL_RENDERBUFFER_ALPHA_SIZE = 36179;
  private static final int GL_RENDERBUFFER_ALPHA_SIZE_OES = 36179;
  private static final int GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179;
  private static final int GL_RENDERBUFFER_DEPTH_SIZE = 36180;
  private static final int GL_RENDERBUFFER_DEPTH_SIZE_OES = 36180;
  private static final int GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180;
  private static final int GL_RENDERBUFFER_STENCIL_SIZE_OES = 36181;
  private static final int GL_RENDERBUFFER_STENCIL_SIZE = 36181;
  private static final int GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 36182;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 36182;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 36182;
  private static final int GL_MAX_SAMPLES_ANGLE = 36183;
  private static final int GL_MAX_SAMPLES_APPLE = 36183;
  private static final int GL_MAX_SAMPLES_EXT = 36183;
  private static final int GL_MAX_SAMPLES = 36183;
  private static final int GL_MAX_SAMPLES_NV = 36183;
  private static final int GL_TEXTURE_GEN_STR_OES = 36192;
  private static final int GL_RGB565 = 36194;
  private static final int GL_RGB565_OES = 36194;
  private static final int GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;
  private static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
  private static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 36202;
  private static final int GL_MAX_ELEMENT_INDEX = 36203;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 36204;
  private static final int GL_RGBA32UI = 36208;
  private static final int GL_RGBA32UI_EXT = 36208;
  private static final int GL_RGB32UI_EXT = 36209;
  private static final int GL_RGB32UI = 36209;
  private static final int GL_ALPHA32UI_EXT = 36210;
  private static final int GL_INTENSITY32UI_EXT = 36211;
  private static final int GL_LUMINANCE32UI_EXT = 36212;
  private static final int GL_LUMINANCE_ALPHA32UI_EXT = 36213;
  private static final int GL_RGBA16UI = 36214;
  private static final int GL_RGBA16UI_EXT = 36214;
  private static final int GL_RGB16UI = 36215;
  private static final int GL_RGB16UI_EXT = 36215;
  private static final int GL_ALPHA16UI_EXT = 36216;
  private static final int GL_INTENSITY16UI_EXT = 36217;
  private static final int GL_LUMINANCE16UI_EXT = 36218;
  private static final int GL_LUMINANCE_ALPHA16UI_EXT = 36219;
  private static final int GL_RGBA8UI_EXT = 36220;
  private static final int GL_RGBA8UI = 36220;
  private static final int GL_RGB8UI_EXT = 36221;
  private static final int GL_RGB8UI = 36221;
  private static final int GL_ALPHA8UI_EXT = 36222;
  private static final int GL_INTENSITY8UI_EXT = 36223;
  private static final int GL_LUMINANCE8UI_EXT = 36224;
  private static final int GL_LUMINANCE_ALPHA8UI_EXT = 36225;
  private static final int GL_RGBA32I_EXT = 36226;
  private static final int GL_RGBA32I = 36226;
  private static final int GL_RGB32I = 36227;
  private static final int GL_RGB32I_EXT = 36227;
  private static final int GL_ALPHA32I_EXT = 36228;
  private static final int GL_INTENSITY32I_EXT = 36229;
  private static final int GL_LUMINANCE32I_EXT = 36230;
  private static final int GL_LUMINANCE_ALPHA32I_EXT = 36231;
  private static final int GL_RGBA16I_EXT = 36232;
  private static final int GL_RGBA16I = 36232;
  private static final int GL_RGB16I = 36233;
  private static final int GL_RGB16I_EXT = 36233;
  private static final int GL_ALPHA16I_EXT = 36234;
  private static final int GL_INTENSITY16I_EXT = 36235;
  private static final int GL_LUMINANCE16I_EXT = 36236;
  private static final int GL_LUMINANCE_ALPHA16I_EXT = 36237;
  private static final int GL_RGBA8I_EXT = 36238;
  private static final int GL_RGBA8I = 36238;
  private static final int GL_RGB8I_EXT = 36239;
  private static final int GL_RGB8I = 36239;
  private static final int GL_ALPHA8I_EXT = 36240;
  private static final int GL_INTENSITY8I_EXT = 36241;
  private static final int GL_LUMINANCE8I_EXT = 36242;
  private static final int GL_LUMINANCE_ALPHA8I_EXT = 36243;
  private static final int GL_RED_INTEGER = 36244;
  private static final int GL_RED_INTEGER_EXT = 36244;
  private static final int GL_GREEN_INTEGER = 36245;
  private static final int GL_GREEN_INTEGER_EXT = 36245;
  private static final int GL_BLUE_INTEGER_EXT = 36246;
  private static final int GL_BLUE_INTEGER = 36246;
  private static final int GL_ALPHA_INTEGER = 36247;
  private static final int GL_ALPHA_INTEGER_EXT = 36247;
  private static final int GL_RGB_INTEGER = 36248;
  private static final int GL_RGB_INTEGER_EXT = 36248;
  private static final int GL_RGBA_INTEGER_EXT = 36249;
  private static final int GL_RGBA_INTEGER = 36249;
  private static final int GL_BGR_INTEGER_EXT = 36250;
  private static final int GL_BGR_INTEGER = 36250;
  private static final int GL_BGRA_INTEGER = 36251;
  private static final int GL_BGRA_INTEGER_EXT = 36251;
  private static final int GL_LUMINANCE_INTEGER_EXT = 36252;
  private static final int GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253;
  private static final int GL_RGBA_INTEGER_MODE_EXT = 36254;
  private static final int GL_INT_2_10_10_10_REV = 36255;
  private static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256;
  private static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257;
  private static final int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258;
  private static final int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259;
  private static final int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260;
  private static final int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261;
  private static final int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 36262;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 36263;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 36264;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265;
  private static final int GL_LAYER_NV = 36266;
  private static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
  private static final int GL_SHADER_INCLUDE_ARB = 36270;
  private static final int GL_FRAMEBUFFER_SRGB = 36281;
  private static final int GL_COMPRESSED_RED_RGTC1 = 36283;
  private static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284;
  private static final int GL_COMPRESSED_RG_RGTC2 = 36285;
  private static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286;
  private static final int GL_SAMPLER_1D_ARRAY_EXT = 36288;
  private static final int GL_SAMPLER_1D_ARRAY = 36288;
  private static final int GL_SAMPLER_2D_ARRAY = 36289;
  private static final int GL_SAMPLER_2D_ARRAY_EXT = 36289;
  private static final int GL_SAMPLER_BUFFER_OES = 36290;
  private static final int GL_SAMPLER_BUFFER = 36290;
  private static final int GL_SAMPLER_BUFFER_EXT = 36290;
  private static final int GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291;
  private static final int GL_SAMPLER_1D_ARRAY_SHADOW = 36291;
  private static final int GL_SAMPLER_2D_ARRAY_SHADOW = 36292;
  private static final int GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292;
  private static final int GL_SAMPLER_CUBE_SHADOW_EXT = 36293;
  private static final int GL_SAMPLER_CUBE_SHADOW = 36293;
  private static final int GL_UNSIGNED_INT_VEC2_EXT = 36294;
  private static final int GL_UNSIGNED_INT_VEC2 = 36294;
  private static final int GL_UNSIGNED_INT_VEC3_EXT = 36295;
  private static final int GL_UNSIGNED_INT_VEC3 = 36295;
  private static final int GL_UNSIGNED_INT_VEC4 = 36296;
  private static final int GL_UNSIGNED_INT_VEC4_EXT = 36296;
  private static final int GL_INT_SAMPLER_1D_EXT = 36297;
  private static final int GL_INT_SAMPLER_1D = 36297;
  private static final int GL_INT_SAMPLER_2D = 36298;
  private static final int GL_INT_SAMPLER_2D_EXT = 36298;
  private static final int GL_INT_SAMPLER_3D_EXT = 36299;
  private static final int GL_INT_SAMPLER_3D = 36299;
  private static final int GL_INT_SAMPLER_CUBE_EXT = 36300;
  private static final int GL_INT_SAMPLER_CUBE = 36300;
  private static final int GL_INT_SAMPLER_2D_RECT_EXT = 36301;
  private static final int GL_INT_SAMPLER_2D_RECT = 36301;
  private static final int GL_INT_SAMPLER_1D_ARRAY_EXT = 36302;
  private static final int GL_INT_SAMPLER_1D_ARRAY = 36302;
  private static final int GL_INT_SAMPLER_2D_ARRAY = 36303;
  private static final int GL_INT_SAMPLER_2D_ARRAY_EXT = 36303;
  private static final int GL_INT_SAMPLER_BUFFER = 36304;
  private static final int GL_INT_SAMPLER_BUFFER_OES = 36304;
  private static final int GL_INT_SAMPLER_BUFFER_EXT = 36304;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D = 36305;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D = 36306;
  private static final int GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307;
  private static final int GL_UNSIGNED_INT_SAMPLER_3D = 36307;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 36309;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310;
  private static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 36312;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;
  private static final int GL_GEOMETRY_SHADER_ARB = 36313;
  private static final int GL_GEOMETRY_SHADER_EXT = 36313;
  private static final int GL_GEOMETRY_SHADER = 36313;
  private static final int GL_GEOMETRY_SHADER_OES = 36313;
  private static final int GL_GEOMETRY_VERTICES_OUT_EXT = 36314;
  private static final int GL_GEOMETRY_VERTICES_OUT_ARB = 36314;
  private static final int GL_GEOMETRY_INPUT_TYPE_EXT = 36315;
  private static final int GL_GEOMETRY_INPUT_TYPE_ARB = 36315;
  private static final int GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316;
  private static final int GL_GEOMETRY_OUTPUT_TYPE_ARB = 36316;
  private static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317;
  private static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317;
  private static final int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318;
  private static final int GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 36319;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319;
  private static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 36320;
  private static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 36321;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;
  private static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321;
  private static final int GL_ACTIVE_SUBROUTINES = 36325;
  private static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = 36326;
  private static final int GL_MAX_SUBROUTINES = 36327;
  private static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328;
  private static final int GL_NAMED_STRING_LENGTH_ARB = 36329;
  private static final int GL_NAMED_STRING_TYPE_ARB = 36330;
  private static final int GL_LOW_FLOAT = 36336;
  private static final int GL_MEDIUM_FLOAT = 36337;
  private static final int GL_HIGH_FLOAT = 36338;
  private static final int GL_LOW_INT = 36339;
  private static final int GL_MEDIUM_INT = 36340;
  private static final int GL_HIGH_INT = 36341;
  private static final int GL_SHADER_BINARY_FORMATS = 36344;
  private static final int GL_NUM_SHADER_BINARY_FORMATS = 36345;
  private static final int GL_SHADER_COMPILER = 36346;
  private static final int GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
  private static final int GL_MAX_VARYING_VECTORS = 36348;
  private static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
  private static final int GL_RENDERBUFFER_COLOR_SAMPLES_NV = 36368;
  private static final int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369;
  private static final int GL_MULTISAMPLE_COVERAGE_MODES_NV = 36370;
  private static final int GL_QUERY_WAIT_NV = 36371;
  private static final int GL_QUERY_WAIT = 36371;
  private static final int GL_QUERY_NO_WAIT_NV = 36372;
  private static final int GL_QUERY_NO_WAIT = 36372;
  private static final int GL_QUERY_BY_REGION_WAIT = 36373;
  private static final int GL_QUERY_BY_REGION_WAIT_NV = 36373;
  private static final int GL_QUERY_BY_REGION_NO_WAIT = 36374;
  private static final int GL_QUERY_BY_REGION_NO_WAIT_NV = 36374;
  private static final int GL_QUERY_WAIT_INVERTED = 36375;
  private static final int GL_QUERY_NO_WAIT_INVERTED = 36376;
  private static final int GL_QUERY_BY_REGION_WAIT_INVERTED = 36377;
  private static final int GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 36378;
  private static final int GL_POLYGON_OFFSET_CLAMP = 36379;
  private static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36382;
  private static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382;
  private static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;
  private static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36383;
  private static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;
  private static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383;
  private static final int GL_COLOR_SAMPLES_NV = 36384;
  private static final int GL_TRANSFORM_FEEDBACK_NV = 36386;
  private static final int GL_TRANSFORM_FEEDBACK = 36386;
  private static final int GL_TRANSFORM_FEEDBACK_PAUSED = 36387;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 36387;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387;
  private static final int GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 36388;
  private static final int GL_TRANSFORM_FEEDBACK_BINDING = 36389;
  private static final int GL_TRANSFORM_FEEDBACK_BINDING_NV = 36389;
  private static final int GL_FRAME_NV = 36390;
  private static final int GL_FIELDS_NV = 36391;
  private static final int GL_TIMESTAMP = 36392;
  private static final int GL_TIMESTAMP_EXT = 36392;
  private static final int GL_CURRENT_TIME_NV = 36392;
  private static final int GL_NUM_FILL_STREAMS_NV = 36393;
  private static final int GL_PRESENT_TIME_NV = 36394;
  private static final int GL_PRESENT_DURATION_NV = 36395;
  private static final int GL_PROGRAM_MATRIX_EXT = 36397;
  private static final int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 36398;
  private static final int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399;
  private static final int GL_TEXTURE_SWIZZLE_R = 36418;
  private static final int GL_TEXTURE_SWIZZLE_G = 36419;
  private static final int GL_TEXTURE_SWIZZLE_B = 36420;
  private static final int GL_TEXTURE_SWIZZLE_A = 36421;
  private static final int GL_TEXTURE_SWIZZLE_RGBA = 36422;
  private static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423;
  private static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 36424;
  private static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425;
  private static final int GL_NUM_COMPATIBLE_SUBROUTINES = 36426;
  private static final int GL_COMPATIBLE_SUBROUTINES = 36427;
  private static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428;
  private static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428;
  private static final int GL_FIRST_VERTEX_CONVENTION_OES = 36429;
  private static final int GL_FIRST_VERTEX_CONVENTION_EXT = 36429;
  private static final int GL_FIRST_VERTEX_CONVENTION = 36429;
  private static final int GL_LAST_VERTEX_CONVENTION_EXT = 36430;
  private static final int GL_LAST_VERTEX_CONVENTION = 36430;
  private static final int GL_LAST_VERTEX_CONVENTION_OES = 36430;
  private static final int GL_PROVOKING_VERTEX_EXT = 36431;
  private static final int GL_PROVOKING_VERTEX = 36431;
  private static final int GL_SAMPLE_LOCATION_ARB = 36432;
  private static final int GL_SAMPLE_POSITION_NV = 36432;
  private static final int GL_SAMPLE_LOCATION_NV = 36432;
  private static final int GL_SAMPLE_POSITION = 36432;
  private static final int GL_SAMPLE_MASK_NV = 36433;
  private static final int GL_SAMPLE_MASK = 36433;
  private static final int GL_SAMPLE_MASK_VALUE = 36434;
  private static final int GL_SAMPLE_MASK_VALUE_NV = 36434;
  private static final int GL_TEXTURE_BINDING_RENDERBUFFER_NV = 36435;
  private static final int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436;
  private static final int GL_TEXTURE_RENDERBUFFER_NV = 36437;
  private static final int GL_SAMPLER_RENDERBUFFER_NV = 36438;
  private static final int GL_INT_SAMPLER_RENDERBUFFER_NV = 36439;
  private static final int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440;
  private static final int GL_MAX_SAMPLE_MASK_WORDS_NV = 36441;
  private static final int GL_MAX_SAMPLE_MASK_WORDS = 36441;
  private static final int GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442;
  private static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;
  private static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 36442;
  private static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442;
  private static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 36443;
  private static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;
  private static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;
  private static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 36444;
  private static final int GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445;
  private static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;
  private static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;
  private static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36446;
  private static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;
  private static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36447;
  private static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464;
  private static final int GL_MAX_VERTEX_STREAMS = 36465;
  private static final int GL_PATCH_VERTICES_OES = 36466;
  private static final int GL_PATCH_VERTICES_EXT = 36466;
  private static final int GL_PATCH_VERTICES = 36466;
  private static final int GL_PATCH_DEFAULT_INNER_LEVEL = 36467;
  private static final int GL_PATCH_DEFAULT_OUTER_LEVEL = 36468;
  private static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469;
  private static final int GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 36469;
  private static final int GL_TESS_CONTROL_OUTPUT_VERTICES = 36469;
  private static final int GL_TESS_GEN_MODE_OES = 36470;
  private static final int GL_TESS_GEN_MODE = 36470;
  private static final int GL_TESS_GEN_MODE_EXT = 36470;
  private static final int GL_TESS_GEN_SPACING = 36471;
  private static final int GL_TESS_GEN_SPACING_EXT = 36471;
  private static final int GL_TESS_GEN_SPACING_OES = 36471;
  private static final int GL_TESS_GEN_VERTEX_ORDER_OES = 36472;
  private static final int GL_TESS_GEN_VERTEX_ORDER = 36472;
  private static final int GL_TESS_GEN_VERTEX_ORDER_EXT = 36472;
  private static final int GL_TESS_GEN_POINT_MODE = 36473;
  private static final int GL_TESS_GEN_POINT_MODE_OES = 36473;
  private static final int GL_TESS_GEN_POINT_MODE_EXT = 36473;
  private static final int GL_ISOLINES_OES = 36474;
  private static final int GL_ISOLINES = 36474;
  private static final int GL_ISOLINES_EXT = 36474;
  private static final int GL_FRACTIONAL_ODD_OES = 36475;
  private static final int GL_FRACTIONAL_ODD_EXT = 36475;
  private static final int GL_FRACTIONAL_ODD = 36475;
  private static final int GL_FRACTIONAL_EVEN_OES = 36476;
  private static final int GL_FRACTIONAL_EVEN = 36476;
  private static final int GL_FRACTIONAL_EVEN_EXT = 36476;
  private static final int GL_MAX_PATCH_VERTICES_EXT = 36477;
  private static final int GL_MAX_PATCH_VERTICES = 36477;
  private static final int GL_MAX_PATCH_VERTICES_OES = 36477;
  private static final int GL_MAX_TESS_GEN_LEVEL_OES = 36478;
  private static final int GL_MAX_TESS_GEN_LEVEL_EXT = 36478;
  private static final int GL_MAX_TESS_GEN_LEVEL = 36478;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36479;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36480;
  private static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 36481;
  private static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481;
  private static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;
  private static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;
  private static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482;
  private static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 36482;
  private static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 36483;
  private static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483;
  private static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;
  private static final int GL_MAX_TESS_PATCH_COMPONENTS_OES = 36484;
  private static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484;
  private static final int GL_MAX_TESS_PATCH_COMPONENTS = 36484;
  private static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 36485;
  private static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485;
  private static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;
  private static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 36486;
  private static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486;
  private static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;
  private static final int GL_TESS_EVALUATION_SHADER_EXT = 36487;
  private static final int GL_TESS_EVALUATION_SHADER_OES = 36487;
  private static final int GL_TESS_EVALUATION_SHADER = 36487;
  private static final int GL_TESS_CONTROL_SHADER_EXT = 36488;
  private static final int GL_TESS_CONTROL_SHADER = 36488;
  private static final int GL_TESS_CONTROL_SHADER_OES = 36488;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 36489;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489;
  private static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490;
  private static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 36490;
  private static final int GL_COMPRESSED_RGBA_BPTC_UNORM = 36492;
  private static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;
  private static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;
  private static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;
  private static final int GL_COVERAGE_COMPONENT_NV = 36560;
  private static final int GL_COVERAGE_COMPONENT4_NV = 36561;
  private static final int GL_COVERAGE_ATTACHMENT_NV = 36562;
  private static final int GL_COVERAGE_BUFFERS_NV = 36563;
  private static final int GL_COVERAGE_SAMPLES_NV = 36564;
  private static final int GL_COVERAGE_ALL_FRAGMENTS_NV = 36565;
  private static final int GL_COVERAGE_EDGE_FRAGMENTS_NV = 36566;
  private static final int GL_COVERAGE_AUTOMATIC_NV = 36567;
  private static final int GL_INCLUSIVE_EXT = 36624;
  private static final int GL_EXCLUSIVE_EXT = 36625;
  private static final int GL_WINDOW_RECTANGLE_EXT = 36626;
  private static final int GL_WINDOW_RECTANGLE_MODE_EXT = 36627;
  private static final int GL_MAX_WINDOW_RECTANGLES_EXT = 36628;
  private static final int GL_NUM_WINDOW_RECTANGLES_EXT = 36629;
  private static final int GL_BUFFER_GPU_ADDRESS_NV = 36637;
  private static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638;
  private static final int GL_ELEMENT_ARRAY_UNIFIED_NV = 36639;
  private static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640;
  private static final int GL_VERTEX_ARRAY_ADDRESS_NV = 36641;
  private static final int GL_NORMAL_ARRAY_ADDRESS_NV = 36642;
  private static final int GL_COLOR_ARRAY_ADDRESS_NV = 36643;
  private static final int GL_INDEX_ARRAY_ADDRESS_NV = 36644;
  private static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645;
  private static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 36646;
  private static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647;
  private static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = 36648;
  private static final int GL_ELEMENT_ARRAY_ADDRESS_NV = 36649;
  private static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650;
  private static final int GL_VERTEX_ARRAY_LENGTH_NV = 36651;
  private static final int GL_NORMAL_ARRAY_LENGTH_NV = 36652;
  private static final int GL_COLOR_ARRAY_LENGTH_NV = 36653;
  private static final int GL_INDEX_ARRAY_LENGTH_NV = 36654;
  private static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 36655;
  private static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 36656;
  private static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657;
  private static final int GL_FOG_COORD_ARRAY_LENGTH_NV = 36658;
  private static final int GL_ELEMENT_ARRAY_LENGTH_NV = 36659;
  private static final int GL_GPU_ADDRESS_NV = 36660;
  private static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 36661;
  private static final int GL_COPY_READ_BUFFER = 36662;
  private static final int GL_COPY_READ_BUFFER_BINDING = 36662;
  private static final int GL_COPY_READ_BUFFER_NV = 36662;
  private static final int GL_COPY_WRITE_BUFFER = 36663;
  private static final int GL_COPY_WRITE_BUFFER_NV = 36663;
  private static final int GL_COPY_WRITE_BUFFER_BINDING = 36663;
  private static final int GL_MAX_IMAGE_UNITS = 36664;
  private static final int GL_MAX_IMAGE_UNITS_EXT = 36664;
  private static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 36665;
  private static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;
  private static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665;
  private static final int GL_IMAGE_BINDING_NAME = 36666;
  private static final int GL_IMAGE_BINDING_NAME_EXT = 36666;
  private static final int GL_IMAGE_BINDING_LEVEL = 36667;
  private static final int GL_IMAGE_BINDING_LEVEL_EXT = 36667;
  private static final int GL_IMAGE_BINDING_LAYERED = 36668;
  private static final int GL_IMAGE_BINDING_LAYERED_EXT = 36668;
  private static final int GL_IMAGE_BINDING_LAYER = 36669;
  private static final int GL_IMAGE_BINDING_LAYER_EXT = 36669;
  private static final int GL_IMAGE_BINDING_ACCESS = 36670;
  private static final int GL_IMAGE_BINDING_ACCESS_EXT = 36670;
  private static final int GL_DRAW_INDIRECT_BUFFER = 36671;
  private static final int GL_DRAW_INDIRECT_UNIFIED_NV = 36672;
  private static final int GL_DRAW_INDIRECT_ADDRESS_NV = 36673;
  private static final int GL_DRAW_INDIRECT_LENGTH_NV = 36674;
  private static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;
  private static final int GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676;
  private static final int GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677;
  private static final int GL_DOUBLE_MAT2 = 36678;
  private static final int GL_DOUBLE_MAT2_EXT = 36678;
  private static final int GL_DOUBLE_MAT3_EXT = 36679;
  private static final int GL_DOUBLE_MAT3 = 36679;
  private static final int GL_DOUBLE_MAT4_EXT = 36680;
  private static final int GL_DOUBLE_MAT4 = 36680;
  private static final int GL_DOUBLE_MAT2x3 = 36681;
  private static final int GL_DOUBLE_MAT2x3_EXT = 36681;
  private static final int GL_DOUBLE_MAT2x4_EXT = 36682;
  private static final int GL_DOUBLE_MAT2x4 = 36682;
  private static final int GL_DOUBLE_MAT3x2_EXT = 36683;
  private static final int GL_DOUBLE_MAT3x2 = 36683;
  private static final int GL_DOUBLE_MAT3x4 = 36684;
  private static final int GL_DOUBLE_MAT3x4_EXT = 36684;
  private static final int GL_DOUBLE_MAT4x2 = 36685;
  private static final int GL_DOUBLE_MAT4x2_EXT = 36685;
  private static final int GL_DOUBLE_MAT4x3_EXT = 36686;
  private static final int GL_DOUBLE_MAT4x3 = 36686;
  private static final int GL_VERTEX_BINDING_BUFFER = 36687;
  private static final int GL_MALI_SHADER_BINARY_ARM = 36704;
  private static final int GL_MALI_PROGRAM_BINARY_ARM = 36705;
  private static final int GL_FETCH_PER_SAMPLE_ARM = 36709;
  private static final int GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 36710;
  private static final int GL_RED_SNORM = 36752;
  private static final int GL_RG_SNORM = 36753;
  private static final int GL_RGB_SNORM = 36754;
  private static final int GL_RGBA_SNORM = 36755;
  private static final int GL_R8_SNORM = 36756;
  private static final int GL_RG8_SNORM = 36757;
  private static final int GL_RGB8_SNORM = 36758;
  private static final int GL_RGBA8_SNORM = 36759;
  private static final int GL_R16_SNORM = 36760;
  private static final int GL_RG16_SNORM = 36761;
  private static final int GL_RGB16_SNORM = 36762;
  private static final int GL_RGBA16_SNORM = 36763;
  private static final int GL_SIGNED_NORMALIZED = 36764;
  private static final int GL_PRIMITIVE_RESTART = 36765;
  private static final int GL_PRIMITIVE_RESTART_INDEX = 36766;
  private static final int GL_PERFMON_GLOBAL_MODE_QCOM = 36768;
  private static final int GL_BINNING_CONTROL_HINT_QCOM = 36784;
  private static final int GL_CPU_OPTIMIZED_QCOM = 36785;
  private static final int GL_GPU_OPTIMIZED_QCOM = 36786;
  private static final int GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 36787;
  private static final int GL_GPU_DISJOINT_EXT = 36795;
  private static final int GL_SHADER_BINARY_VIV = 36804;
  private static final int GL_DOUBLE_VEC2 = 36860;
  private static final int GL_DOUBLE_VEC2_EXT = 36860;
  private static final int GL_DOUBLE_VEC3_EXT = 36861;
  private static final int GL_DOUBLE_VEC3 = 36861;
  private static final int GL_DOUBLE_VEC4_EXT = 36862;
  private static final int GL_DOUBLE_VEC4 = 36862;
  private static final int GL_SAMPLER_BUFFER_AMD = 36865;
  private static final int GL_INT_SAMPLER_BUFFER_AMD = 36866;
  private static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867;
  private static final int GL_TESSELLATION_MODE_AMD = 36868;
  private static final int GL_TESSELLATION_FACTOR_AMD = 36869;
  private static final int GL_DISCRETE_AMD = 36870;
  private static final int GL_CONTINUOUS_AMD = 36871;
  private static final int GL_TEXTURE_CUBE_MAP_ARRAY_OES = 36873;
  private static final int GL_TEXTURE_CUBE_MAP_ARRAY = 36873;
  private static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;
  private static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY = 36876;
  private static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;
  private static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878;
  private static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;
  private static final int GL_ALPHA_SNORM = 36880;
  private static final int GL_LUMINANCE_SNORM = 36881;
  private static final int GL_LUMINANCE_ALPHA_SNORM = 36882;
  private static final int GL_INTENSITY_SNORM = 36883;
  private static final int GL_ALPHA8_SNORM = 36884;
  private static final int GL_LUMINANCE8_SNORM = 36885;
  private static final int GL_LUMINANCE8_ALPHA8_SNORM = 36886;
  private static final int GL_INTENSITY8_SNORM = 36887;
  private static final int GL_ALPHA16_SNORM = 36888;
  private static final int GL_LUMINANCE16_SNORM = 36889;
  private static final int GL_LUMINANCE16_ALPHA16_SNORM = 36890;
  private static final int GL_INTENSITY16_SNORM = 36891;
  private static final int GL_FACTOR_MIN_AMD = 36892;
  private static final int GL_FACTOR_MAX_AMD = 36893;
  private static final int GL_DEPTH_CLAMP_NEAR_AMD = 36894;
  private static final int GL_DEPTH_CLAMP_FAR_AMD = 36895;
  private static final int GL_VIDEO_BUFFER_NV = 36896;
  private static final int GL_VIDEO_BUFFER_BINDING_NV = 36897;
  private static final int GL_FIELD_UPPER_NV = 36898;
  private static final int GL_FIELD_LOWER_NV = 36899;
  private static final int GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 36900;
  private static final int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901;
  private static final int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902;
  private static final int GL_LAST_VIDEO_CAPTURE_STATUS_NV = 36903;
  private static final int GL_VIDEO_BUFFER_PITCH_NV = 36904;
  private static final int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905;
  private static final int GL_VIDEO_COLOR_CONVERSION_MAX_NV = 36906;
  private static final int GL_VIDEO_COLOR_CONVERSION_MIN_NV = 36907;
  private static final int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908;
  private static final int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909;
  private static final int GL_PARTIAL_SUCCESS_NV = 36910;
  private static final int GL_SUCCESS_NV = 36911;
  private static final int GL_FAILURE_NV = 36912;
  private static final int GL_YCBYCR8_422_NV = 36913;
  private static final int GL_YCBAYCR8A_4224_NV = 36914;
  private static final int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915;
  private static final int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916;
  private static final int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917;
  private static final int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918;
  private static final int GL_Z4Y12Z4CB12Z4CR12_444_NV = 36919;
  private static final int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920;
  private static final int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921;
  private static final int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922;
  private static final int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923;
  private static final int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924;
  private static final int GL_TEXTURE_COVERAGE_SAMPLES_NV = 36933;
  private static final int GL_TEXTURE_COLOR_SAMPLES_NV = 36934;
  private static final int GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935;
  private static final int GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936;
  private static final int GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937;
  private static final int GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938;
  private static final int GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939;
  private static final int GL_IMAGE_1D_EXT = 36940;
  private static final int GL_IMAGE_1D = 36940;
  private static final int GL_IMAGE_2D = 36941;
  private static final int GL_IMAGE_2D_EXT = 36941;
  private static final int GL_IMAGE_3D = 36942;
  private static final int GL_IMAGE_3D_EXT = 36942;
  private static final int GL_IMAGE_2D_RECT_EXT = 36943;
  private static final int GL_IMAGE_2D_RECT = 36943;
  private static final int GL_IMAGE_CUBE_EXT = 36944;
  private static final int GL_IMAGE_CUBE = 36944;
  private static final int GL_IMAGE_BUFFER_EXT = 36945;
  private static final int GL_IMAGE_BUFFER = 36945;
  private static final int GL_IMAGE_BUFFER_OES = 36945;
  private static final int GL_IMAGE_1D_ARRAY = 36946;
  private static final int GL_IMAGE_1D_ARRAY_EXT = 36946;
  private static final int GL_IMAGE_2D_ARRAY = 36947;
  private static final int GL_IMAGE_2D_ARRAY_EXT = 36947;
  private static final int GL_IMAGE_CUBE_MAP_ARRAY = 36948;
  private static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948;
  private static final int GL_IMAGE_2D_MULTISAMPLE = 36949;
  private static final int GL_IMAGE_2D_MULTISAMPLE_EXT = 36949;
  private static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 36950;
  private static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36950;
  private static final int GL_INT_IMAGE_1D = 36951;
  private static final int GL_INT_IMAGE_1D_EXT = 36951;
  private static final int GL_INT_IMAGE_2D = 36952;
  private static final int GL_INT_IMAGE_2D_EXT = 36952;
  private static final int GL_INT_IMAGE_3D = 36953;
  private static final int GL_INT_IMAGE_3D_EXT = 36953;
  private static final int GL_INT_IMAGE_2D_RECT = 36954;
  private static final int GL_INT_IMAGE_2D_RECT_EXT = 36954;
  private static final int GL_INT_IMAGE_CUBE_EXT = 36955;
  private static final int GL_INT_IMAGE_CUBE = 36955;
  private static final int GL_INT_IMAGE_BUFFER_EXT = 36956;
  private static final int GL_INT_IMAGE_BUFFER_OES = 36956;
  private static final int GL_INT_IMAGE_BUFFER = 36956;
  private static final int GL_INT_IMAGE_1D_ARRAY_EXT = 36957;
  private static final int GL_INT_IMAGE_1D_ARRAY = 36957;
  private static final int GL_INT_IMAGE_2D_ARRAY_EXT = 36958;
  private static final int GL_INT_IMAGE_2D_ARRAY = 36958;
  private static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959;
  private static final int GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE = 36960;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 36960;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961;
  private static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36961;
  private static final int GL_UNSIGNED_INT_IMAGE_1D = 36962;
  private static final int GL_UNSIGNED_INT_IMAGE_1D_EXT = 36962;
  private static final int GL_UNSIGNED_INT_IMAGE_2D = 36963;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_EXT = 36963;
  private static final int GL_UNSIGNED_INT_IMAGE_3D = 36964;
  private static final int GL_UNSIGNED_INT_IMAGE_3D_EXT = 36964;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 36965;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = 36965;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 36966;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE = 36966;
  private static final int GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 36967;
  private static final int GL_UNSIGNED_INT_IMAGE_BUFFER = 36967;
  private static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967;
  private static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 36968;
  private static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 36968;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 36969;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;
  private static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 36971;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36972;
  private static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972;
  private static final int GL_MAX_IMAGE_SAMPLES = 36973;
  private static final int GL_MAX_IMAGE_SAMPLES_EXT = 36973;
  private static final int GL_IMAGE_BINDING_FORMAT = 36974;
  private static final int GL_IMAGE_BINDING_FORMAT_EXT = 36974;
  private static final int GL_RGB10_A2UI = 36975;
  private static final int GL_PATH_FORMAT_SVG_NV = 36976;
  private static final int GL_PATH_FORMAT_PS_NV = 36977;
  private static final int GL_STANDARD_FONT_NAME_NV = 36978;
  private static final int GL_SYSTEM_FONT_NAME_NV = 36979;
  private static final int GL_FILE_NAME_NV = 36980;
  private static final int GL_PATH_STROKE_WIDTH_NV = 36981;
  private static final int GL_PATH_END_CAPS_NV = 36982;
  private static final int GL_PATH_INITIAL_END_CAP_NV = 36983;
  private static final int GL_PATH_TERMINAL_END_CAP_NV = 36984;
  private static final int GL_PATH_JOIN_STYLE_NV = 36985;
  private static final int GL_PATH_MITER_LIMIT_NV = 36986;
  private static final int GL_PATH_DASH_CAPS_NV = 36987;
  private static final int GL_PATH_INITIAL_DASH_CAP_NV = 36988;
  private static final int GL_PATH_TERMINAL_DASH_CAP_NV = 36989;
  private static final int GL_PATH_DASH_OFFSET_NV = 36990;
  private static final int GL_PATH_CLIENT_LENGTH_NV = 36991;
  private static final int GL_PATH_FILL_MODE_NV = 36992;
  private static final int GL_PATH_FILL_MASK_NV = 36993;
  private static final int GL_PATH_FILL_COVER_MODE_NV = 36994;
  private static final int GL_PATH_STROKE_COVER_MODE_NV = 36995;
  private static final int GL_PATH_STROKE_MASK_NV = 36996;
  private static final int GL_COUNT_UP_NV = 37000;
  private static final int GL_COUNT_DOWN_NV = 37001;
  private static final int GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002;
  private static final int GL_CONVEX_HULL_NV = 37003;
  private static final int GL_BOUNDING_BOX_NV = 37005;
  private static final int GL_TRANSLATE_X_NV = 37006;
  private static final int GL_TRANSLATE_Y_NV = 37007;
  private static final int GL_TRANSLATE_2D_NV = 37008;
  private static final int GL_TRANSLATE_3D_NV = 37009;
  private static final int GL_AFFINE_2D_NV = 37010;
  private static final int GL_AFFINE_3D_NV = 37012;
  private static final int GL_TRANSPOSE_AFFINE_2D_NV = 37014;
  private static final int GL_TRANSPOSE_AFFINE_3D_NV = 37016;
  private static final int GL_UTF8_NV = 37018;
  private static final int GL_UTF16_NV = 37019;
  private static final int GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020;
  private static final int GL_PATH_COMMAND_COUNT_NV = 37021;
  private static final int GL_PATH_COORD_COUNT_NV = 37022;
  private static final int GL_PATH_DASH_ARRAY_COUNT_NV = 37023;
  private static final int GL_PATH_COMPUTED_LENGTH_NV = 37024;
  private static final int GL_PATH_FILL_BOUNDING_BOX_NV = 37025;
  private static final int GL_PATH_STROKE_BOUNDING_BOX_NV = 37026;
  private static final int GL_SQUARE_NV = 37027;
  private static final int GL_ROUND_NV = 37028;
  private static final int GL_TRIANGULAR_NV = 37029;
  private static final int GL_BEVEL_NV = 37030;
  private static final int GL_MITER_REVERT_NV = 37031;
  private static final int GL_MITER_TRUNCATE_NV = 37032;
  private static final int GL_SKIP_MISSING_GLYPH_NV = 37033;
  private static final int GL_USE_MISSING_GLYPH_NV = 37034;
  private static final int GL_PATH_ERROR_POSITION_NV = 37035;
  private static final int GL_PATH_FOG_GEN_MODE_NV = 37036;
  private static final int GL_ACCUM_ADJACENT_PAIRS_NV = 37037;
  private static final int GL_ADJACENT_PAIRS_NV = 37038;
  private static final int GL_FIRST_TO_REST_NV = 37039;
  private static final int GL_PATH_GEN_MODE_NV = 37040;
  private static final int GL_PATH_GEN_COEFF_NV = 37041;
  private static final int GL_PATH_GEN_COLOR_FORMAT_NV = 37042;
  private static final int GL_PATH_GEN_COMPONENTS_NV = 37043;
  private static final int GL_PATH_DASH_OFFSET_RESET_NV = 37044;
  private static final int GL_MOVE_TO_RESETS_NV = 37045;
  private static final int GL_MOVE_TO_CONTINUES_NV = 37046;
  private static final int GL_PATH_STENCIL_FUNC_NV = 37047;
  private static final int GL_PATH_STENCIL_REF_NV = 37048;
  private static final int GL_PATH_STENCIL_VALUE_MASK_NV = 37049;
  private static final int GL_MIN_MAP_BUFFER_ALIGNMENT = 37052;
  private static final int GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053;
  private static final int GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054;
  private static final int GL_PATH_COVER_DEPTH_FUNC_NV = 37055;
  private static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;
  private static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;
  private static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;
  private static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;
  private static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 37067;
  private static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067;
  private static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;
  private static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;
  private static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 37068;
  private static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068;
  private static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;
  private static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069;
  private static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 37069;
  private static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;
  private static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;
  private static final int GL_SHADER_STORAGE_BUFFER = 37074;
  private static final int GL_SHADER_STORAGE_BUFFER_BINDING = 37075;
  private static final int GL_SHADER_STORAGE_BUFFER_START = 37076;
  private static final int GL_SHADER_STORAGE_BUFFER_SIZE = 37077;
  private static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;
  private static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;
  private static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079;
  private static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 37079;
  private static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080;
  private static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 37080;
  private static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;
  private static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;
  private static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081;
  private static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 37081;
  private static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;
  private static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;
  private static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;
  private static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;
  private static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;
  private static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;
  private static final int GL_SYNC_X11_FENCE_EXT = 37089;
  private static final int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;
  private static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;
  private static final int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101;
  private static final int GL_DISPATCH_INDIRECT_BUFFER = 37102;
  private static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;
  private static final int GL_COLOR_ATTACHMENT_EXT = 37104;
  private static final int GL_MULTIVIEW_EXT = 37105;
  private static final int GL_MAX_MULTIVIEW_BUFFERS_EXT = 37106;
  private static final int GL_CONTEXT_ROBUST_ACCESS_EXT = 37107;
  private static final int GL_CONTEXT_ROBUST_ACCESS = 37107;
  private static final int GL_CONTEXT_ROBUST_ACCESS_KHR = 37107;
  private static final int GL_TEXTURE_2D_MULTISAMPLE = 37120;
  private static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 37121;
  private static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;
  private static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122;
  private static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123;
  private static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;
  private static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;
  private static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125;
  private static final int GL_TEXTURE_SAMPLES = 37126;
  private static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;
  private static final int GL_SAMPLER_2D_MULTISAMPLE = 37128;
  private static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;
  private static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131;
  private static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;
  private static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;
  private static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;
  private static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133;
  private static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;
  private static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;
  private static final int GL_MAX_INTEGER_SAMPLES = 37136;
  private static final int GL_MAX_SERVER_WAIT_TIMEOUT = 37137;
  private static final int GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 37137;
  private static final int GL_OBJECT_TYPE = 37138;
  private static final int GL_OBJECT_TYPE_APPLE = 37138;
  private static final int GL_SYNC_CONDITION = 37139;
  private static final int GL_SYNC_CONDITION_APPLE = 37139;
  private static final int GL_SYNC_STATUS_APPLE = 37140;
  private static final int GL_SYNC_STATUS = 37140;
  private static final int GL_SYNC_FLAGS_APPLE = 37141;
  private static final int GL_SYNC_FLAGS = 37141;
  private static final int GL_SYNC_FENCE_APPLE = 37142;
  private static final int GL_SYNC_FENCE = 37142;
  private static final int GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;
  private static final int GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 37143;
  private static final int GL_UNSIGNALED = 37144;
  private static final int GL_UNSIGNALED_APPLE = 37144;
  private static final int GL_SIGNALED = 37145;
  private static final int GL_SIGNALED_APPLE = 37145;
  private static final int GL_ALREADY_SIGNALED_APPLE = 37146;
  private static final int GL_ALREADY_SIGNALED = 37146;
  private static final int GL_TIMEOUT_EXPIRED = 37147;
  private static final int GL_TIMEOUT_EXPIRED_APPLE = 37147;
  private static final int GL_CONDITION_SATISFIED_APPLE = 37148;
  private static final int GL_CONDITION_SATISFIED = 37148;
  private static final int GL_WAIT_FAILED_APPLE = 37149;
  private static final int GL_WAIT_FAILED = 37149;
  private static final int GL_BUFFER_ACCESS_FLAGS = 37151;
  private static final int GL_BUFFER_MAP_LENGTH = 37152;
  private static final int GL_BUFFER_MAP_OFFSET = 37153;
  private static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
  private static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155;
  private static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 37155;
  private static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155;
  private static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156;
  private static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 37156;
  private static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;
  private static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
  private static final int GL_CONTEXT_PROFILE_MASK = 37158;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 37159;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 37161;
  private static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 37162;
  private static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = 37163;
  private static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 37164;
  private static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = 37165;
  private static final int GL_PACK_COMPRESSED_BLOCK_SIZE = 37166;
  private static final int GL_TEXTURE_IMMUTABLE_FORMAT = 37167;
  private static final int GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 37167;
  private static final int GL_SGX_PROGRAM_BINARY_IMG = 37168;
  private static final int GL_RENDERBUFFER_SAMPLES_IMG = 37171;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 37172;
  private static final int GL_MAX_SAMPLES_IMG = 37173;
  private static final int GL_TEXTURE_SAMPLES_IMG = 37174;
  private static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;
  private static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;
  private static final int GL_CUBIC_IMG = 37177;
  private static final int GL_CUBIC_MIPMAP_NEAREST_IMG = 37178;
  private static final int GL_CUBIC_MIPMAP_LINEAR_IMG = 37179;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 37180;
  private static final int GL_NUM_DOWNSAMPLE_SCALES_IMG = 37181;
  private static final int GL_DOWNSAMPLE_SCALES_IMG = 37182;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 37183;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 37187;
  private static final int GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 37188;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188;
  private static final int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188;
  private static final int GL_DEBUG_LOGGED_MESSAGES_AMD = 37189;
  private static final int GL_DEBUG_LOGGED_MESSAGES_ARB = 37189;
  private static final int GL_DEBUG_LOGGED_MESSAGES_KHR = 37189;
  private static final int GL_DEBUG_LOGGED_MESSAGES = 37189;
  private static final int GL_DEBUG_SEVERITY_HIGH_KHR = 37190;
  private static final int GL_DEBUG_SEVERITY_HIGH = 37190;
  private static final int GL_DEBUG_SEVERITY_HIGH_ARB = 37190;
  private static final int GL_DEBUG_SEVERITY_HIGH_AMD = 37190;
  private static final int GL_DEBUG_SEVERITY_MEDIUM_AMD = 37191;
  private static final int GL_DEBUG_SEVERITY_MEDIUM_ARB = 37191;
  private static final int GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191;
  private static final int GL_DEBUG_SEVERITY_MEDIUM = 37191;
  private static final int GL_DEBUG_SEVERITY_LOW_AMD = 37192;
  private static final int GL_DEBUG_SEVERITY_LOW_ARB = 37192;
  private static final int GL_DEBUG_SEVERITY_LOW = 37192;
  private static final int GL_DEBUG_SEVERITY_LOW_KHR = 37192;
  private static final int GL_DEBUG_CATEGORY_API_ERROR_AMD = 37193;
  private static final int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194;
  private static final int GL_DEBUG_CATEGORY_DEPRECATION_AMD = 37195;
  private static final int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196;
  private static final int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 37197;
  private static final int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198;
  private static final int GL_DEBUG_CATEGORY_APPLICATION_AMD = 37199;
  private static final int GL_DEBUG_CATEGORY_OTHER_AMD = 37200;
  private static final int GL_DATA_BUFFER_AMD = 37201;
  private static final int GL_BUFFER_OBJECT_EXT = 37201;
  private static final int GL_PERFORMANCE_MONITOR_AMD = 37202;
  private static final int GL_QUERY_OBJECT_EXT = 37203;
  private static final int GL_QUERY_OBJECT_AMD = 37203;
  private static final int GL_VERTEX_ARRAY_OBJECT_AMD = 37204;
  private static final int GL_VERTEX_ARRAY_OBJECT_EXT = 37204;
  private static final int GL_SAMPLER_OBJECT_AMD = 37205;
  private static final int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216;
  private static final int GL_QUERY_BUFFER = 37266;
  private static final int GL_QUERY_BUFFER_AMD = 37266;
  private static final int GL_QUERY_BUFFER_BINDING_AMD = 37267;
  private static final int GL_QUERY_BUFFER_BINDING = 37267;
  private static final int GL_QUERY_RESULT_NO_WAIT = 37268;
  private static final int GL_QUERY_RESULT_NO_WAIT_AMD = 37268;
  private static final int GL_VIRTUAL_PAGE_SIZE_X_AMD = 37269;
  private static final int GL_VIRTUAL_PAGE_SIZE_X_ARB = 37269;
  private static final int GL_VIRTUAL_PAGE_SIZE_X_EXT = 37269;
  private static final int GL_VIRTUAL_PAGE_SIZE_Y_ARB = 37270;
  private static final int GL_VIRTUAL_PAGE_SIZE_Y_AMD = 37270;
  private static final int GL_VIRTUAL_PAGE_SIZE_Y_EXT = 37270;
  private static final int GL_VIRTUAL_PAGE_SIZE_Z_EXT = 37271;
  private static final int GL_VIRTUAL_PAGE_SIZE_Z_ARB = 37271;
  private static final int GL_VIRTUAL_PAGE_SIZE_Z_AMD = 37271;
  private static final int GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 37272;
  private static final int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 37272;
  private static final int GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 37272;
  private static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 37273;
  private static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273;
  private static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 37273;
  private static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274;
  private static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274;
  private static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 37274;
  private static final int GL_MIN_SPARSE_LEVEL_AMD = 37275;
  private static final int GL_MIN_LOD_WARNING_AMD = 37276;
  private static final int GL_TEXTURE_BUFFER_OFFSET = 37277;
  private static final int GL_TEXTURE_BUFFER_OFFSET_EXT = 37277;
  private static final int GL_TEXTURE_BUFFER_OFFSET_OES = 37277;
  private static final int GL_TEXTURE_BUFFER_SIZE_EXT = 37278;
  private static final int GL_TEXTURE_BUFFER_SIZE = 37278;
  private static final int GL_TEXTURE_BUFFER_SIZE_OES = 37278;
  private static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;
  private static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 37279;
  private static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279;
  private static final int GL_STREAM_RASTERIZATION_AMD = 37280;
  private static final int GL_VERTEX_ELEMENT_SWIZZLE_AMD = 37284;
  private static final int GL_VERTEX_ID_SWIZZLE_AMD = 37285;
  private static final int GL_TEXTURE_SPARSE_ARB = 37286;
  private static final int GL_TEXTURE_SPARSE_EXT = 37286;
  private static final int GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 37287;
  private static final int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287;
  private static final int GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 37288;
  private static final int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 37288;
  private static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289;
  private static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 37289;
  private static final int GL_NUM_SPARSE_LEVELS_EXT = 37290;
  private static final int GL_NUM_SPARSE_LEVELS_ARB = 37290;
  private static final int GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 37294;
  private static final int GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 37295;
  private static final int GL_MAX_SHADER_COMPILER_THREADS_KHR = 37296;
  private static final int GL_COMPLETION_STATUS_KHR = 37297;
  private static final int GL_COMPUTE_SHADER = 37305;
  private static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;
  private static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;
  private static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;
  private static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;
  private static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;
  private static final int GL_FLOAT16_MAT2_AMD = 37317;
  private static final int GL_FLOAT16_MAT3_AMD = 37318;
  private static final int GL_FLOAT16_MAT4_AMD = 37319;
  private static final int GL_FLOAT16_MAT2x3_AMD = 37320;
  private static final int GL_FLOAT16_MAT2x4_AMD = 37321;
  private static final int GL_FLOAT16_MAT3x2_AMD = 37322;
  private static final int GL_FLOAT16_MAT3x4_AMD = 37323;
  private static final int GL_FLOAT16_MAT4x2_AMD = 37324;
  private static final int GL_FLOAT16_MAT4x3_AMD = 37325;
  private static final int GL_UNPACK_FLIP_Y_WEBGL = 37440;
  private static final int GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
  private static final int GL_CONTEXT_LOST_WEBGL = 37442;
  private static final int GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
  private static final int GL_BROWSER_DEFAULT_WEBGL = 37444;
  private static final int GL_SHADER_BINARY_DMP = 37456;
  private static final int GL_SMAPHS30_PROGRAM_BINARY_DMP = 37457;
  private static final int GL_SMAPHS_PROGRAM_BINARY_DMP = 37458;
  private static final int GL_DMP_PROGRAM_BINARY_DMP = 37459;
  private static final int GL_GCCSO_SHADER_BINARY_FJ = 37472;
  private static final int GL_COMPRESSED_R11_EAC = 37488;
  private static final int GL_COMPRESSED_SIGNED_R11_EAC = 37489;
  private static final int GL_COMPRESSED_RG11_EAC = 37490;
  private static final int GL_COMPRESSED_SIGNED_RG11_EAC = 37491;
  private static final int GL_COMPRESSED_RGB8_ETC2 = 37492;
  private static final int GL_COMPRESSED_SRGB8_ETC2 = 37493;
  private static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;
  private static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;
  private static final int GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;
  private static final int GL_BLEND_PREMULTIPLIED_SRC_NV = 37504;
  private static final int GL_BLEND_OVERLAP_NV = 37505;
  private static final int GL_UNCORRELATED_NV = 37506;
  private static final int GL_DISJOINT_NV = 37507;
  private static final int GL_CONJOINT_NV = 37508;
  private static final int GL_BLEND_ADVANCED_COHERENT_KHR = 37509;
  private static final int GL_SRC_NV = 37510;
  private static final int GL_DST_NV = 37511;
  private static final int GL_SRC_OVER_NV = 37512;
  private static final int GL_DST_OVER_NV = 37513;
  private static final int GL_SRC_IN_NV = 37514;
  private static final int GL_DST_IN_NV = 37515;
  private static final int GL_SRC_OUT_NV = 37516;
  private static final int GL_DST_OUT_NV = 37517;
  private static final int GL_SRC_ATOP_NV = 37518;
  private static final int GL_DST_ATOP_NV = 37519;
  private static final int GL_PLUS_NV = 37521;
  private static final int GL_PLUS_DARKER_NV = 37522;
  private static final int GL_MULTIPLY_KHR = 37524;
  private static final int GL_MULTIPLY = 37524;
  private static final int GL_MULTIPLY_NV = 37524;
  private static final int GL_SCREEN = 37525;
  private static final int GL_SCREEN_NV = 37525;
  private static final int GL_SCREEN_KHR = 37525;
  private static final int GL_OVERLAY = 37526;
  private static final int GL_OVERLAY_NV = 37526;
  private static final int GL_OVERLAY_KHR = 37526;
  private static final int GL_DARKEN_NV = 37527;
  private static final int GL_DARKEN_KHR = 37527;
  private static final int GL_DARKEN = 37527;
  private static final int GL_LIGHTEN_NV = 37528;
  private static final int GL_LIGHTEN_KHR = 37528;
  private static final int GL_LIGHTEN = 37528;
  private static final int GL_COLORDODGE_NV = 37529;
  private static final int GL_COLORDODGE_KHR = 37529;
  private static final int GL_COLORDODGE = 37529;
  private static final int GL_COLORBURN = 37530;
  private static final int GL_COLORBURN_KHR = 37530;
  private static final int GL_COLORBURN_NV = 37530;
  private static final int GL_HARDLIGHT = 37531;
  private static final int GL_HARDLIGHT_KHR = 37531;
  private static final int GL_HARDLIGHT_NV = 37531;
  private static final int GL_SOFTLIGHT_KHR = 37532;
  private static final int GL_SOFTLIGHT = 37532;
  private static final int GL_SOFTLIGHT_NV = 37532;
  private static final int GL_DIFFERENCE_KHR = 37534;
  private static final int GL_DIFFERENCE_NV = 37534;
  private static final int GL_DIFFERENCE = 37534;
  private static final int GL_MINUS_NV = 37535;
  private static final int GL_EXCLUSION_NV = 37536;
  private static final int GL_EXCLUSION_KHR = 37536;
  private static final int GL_EXCLUSION = 37536;
  private static final int GL_CONTRAST_NV = 37537;
  private static final int GL_INVERT_RGB_NV = 37539;
  private static final int GL_LINEARDODGE_NV = 37540;
  private static final int GL_LINEARBURN_NV = 37541;
  private static final int GL_VIVIDLIGHT_NV = 37542;
  private static final int GL_LINEARLIGHT_NV = 37543;
  private static final int GL_PINLIGHT_NV = 37544;
  private static final int GL_HARDMIX_NV = 37545;
  private static final int GL_HSL_HUE = 37549;
  private static final int GL_HSL_HUE_KHR = 37549;
  private static final int GL_HSL_HUE_NV = 37549;
  private static final int GL_HSL_SATURATION = 37550;
  private static final int GL_HSL_SATURATION_KHR = 37550;
  private static final int GL_HSL_SATURATION_NV = 37550;
  private static final int GL_HSL_COLOR = 37551;
  private static final int GL_HSL_COLOR_NV = 37551;
  private static final int GL_HSL_COLOR_KHR = 37551;
  private static final int GL_HSL_LUMINOSITY_KHR = 37552;
  private static final int GL_HSL_LUMINOSITY = 37552;
  private static final int GL_HSL_LUMINOSITY_NV = 37552;
  private static final int GL_PLUS_CLAMPED_NV = 37553;
  private static final int GL_PLUS_CLAMPED_ALPHA_NV = 37554;
  private static final int GL_MINUS_CLAMPED_NV = 37555;
  private static final int GL_INVERT_OVG_NV = 37556;
  private static final int GL_MULTICAST_GPUS_NV = 37562;
  private static final int GL_MAX_LGPU_GPUS_NVX = 37562;
  private static final int GL_PRIMITIVE_BOUNDING_BOX = 37566;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 37567;
  private static final int GL_ATOMIC_COUNTER_BUFFER = 37568;
  private static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;
  private static final int GL_ATOMIC_COUNTER_BUFFER_START = 37570;
  private static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;
  private static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572;
  private static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573;
  private static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578;
  private static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579;
  private static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 37581;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 37582;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 37583;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583;
  private static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;
  private static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;
  private static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;
  private static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 37587;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588;
  private static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 37588;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 37589;
  private static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;
  private static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;
  private static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;
  private static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;
  private static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;
  private static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594;
  private static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;
  private static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;
  private static final int GL_DEBUG_OUTPUT = 37600;
  private static final int GL_DEBUG_OUTPUT_KHR = 37600;
  private static final int GL_UNIFORM = 37601;
  private static final int GL_UNIFORM_BLOCK = 37602;
  private static final int GL_PROGRAM_INPUT = 37603;
  private static final int GL_PROGRAM_OUTPUT = 37604;
  private static final int GL_BUFFER_VARIABLE = 37605;
  private static final int GL_SHADER_STORAGE_BLOCK = 37606;
  private static final int GL_IS_PER_PATCH_OES = 37607;
  private static final int GL_IS_PER_PATCH_EXT = 37607;
  private static final int GL_IS_PER_PATCH = 37607;
  private static final int GL_VERTEX_SUBROUTINE = 37608;
  private static final int GL_TESS_CONTROL_SUBROUTINE = 37609;
  private static final int GL_TESS_EVALUATION_SUBROUTINE = 37610;
  private static final int GL_GEOMETRY_SUBROUTINE = 37611;
  private static final int GL_FRAGMENT_SUBROUTINE = 37612;
  private static final int GL_COMPUTE_SUBROUTINE = 37613;
  private static final int GL_VERTEX_SUBROUTINE_UNIFORM = 37614;
  private static final int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615;
  private static final int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616;
  private static final int GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617;
  private static final int GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618;
  private static final int GL_COMPUTE_SUBROUTINE_UNIFORM = 37619;
  private static final int GL_TRANSFORM_FEEDBACK_VARYING = 37620;
  private static final int GL_ACTIVE_RESOURCES = 37621;
  private static final int GL_MAX_NAME_LENGTH = 37622;
  private static final int GL_MAX_NUM_ACTIVE_VARIABLES = 37623;
  private static final int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624;
  private static final int GL_NAME_LENGTH = 37625;
  private static final int GL_TYPE = 37626;
  private static final int GL_ARRAY_SIZE = 37627;
  private static final int GL_OFFSET = 37628;
  private static final int GL_BLOCK_INDEX = 37629;
  private static final int GL_ARRAY_STRIDE = 37630;
  private static final int GL_MATRIX_STRIDE = 37631;
  private static final int GL_IS_ROW_MAJOR = 37632;
  private static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;
  private static final int GL_BUFFER_BINDING = 37634;
  private static final int GL_BUFFER_DATA_SIZE = 37635;
  private static final int GL_NUM_ACTIVE_VARIABLES = 37636;
  private static final int GL_ACTIVE_VARIABLES = 37637;
  private static final int GL_REFERENCED_BY_VERTEX_SHADER = 37638;
  private static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;
  private static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 37639;
  private static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639;
  private static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640;
  private static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;
  private static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 37640;
  private static final int GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;
  private static final int GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 37641;
  private static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641;
  private static final int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;
  private static final int GL_REFERENCED_BY_COMPUTE_SHADER = 37643;
  private static final int GL_TOP_LEVEL_ARRAY_SIZE = 37644;
  private static final int GL_TOP_LEVEL_ARRAY_STRIDE = 37645;
  private static final int GL_LOCATION = 37646;
  private static final int GL_LOCATION_INDEX = 37647;
  private static final int GL_LOCATION_INDEX_EXT = 37647;
  private static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;
  private static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;
  private static final int GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;
  private static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650;
  private static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 37650;
  private static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;
  private static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;
  private static final int GL_MAX_FRAMEBUFFER_WIDTH = 37653;
  private static final int GL_MAX_FRAMEBUFFER_HEIGHT = 37654;
  private static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655;
  private static final int GL_MAX_FRAMEBUFFER_LAYERS = 37655;
  private static final int GL_MAX_FRAMEBUFFER_LAYERS_OES = 37655;
  private static final int GL_MAX_FRAMEBUFFER_SAMPLES = 37656;
  private static final int GL_RASTER_MULTISAMPLE_EXT = 37671;
  private static final int GL_RASTER_SAMPLES_EXT = 37672;
  private static final int GL_MAX_RASTER_SAMPLES_EXT = 37673;
  private static final int GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674;
  private static final int GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675;
  private static final int GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676;
  private static final int GL_DEPTH_SAMPLES_NV = 37677;
  private static final int GL_STENCIL_SAMPLES_NV = 37678;
  private static final int GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679;
  private static final int GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680;
  private static final int GL_COVERAGE_MODULATION_TABLE_NV = 37681;
  private static final int GL_COVERAGE_MODULATION_NV = 37682;
  private static final int GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683;
  private static final int GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 37693;
  private static final int GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 37694;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695;
  private static final int GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 37695;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 37696;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 37697;
  private static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697;
  private static final int GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698;
  private static final int GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 37698;
  private static final int GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 37699;
  private static final int GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699;
  private static final int GL_LOCATION_COMPONENT = 37706;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707;
  private static final int GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 37709;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 37710;
  private static final int GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 37711;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717;
  private static final int GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718;
  private static final int GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719;
  private static final int GL_VIEWPORT_SWIZZLE_X_NV = 37720;
  private static final int GL_VIEWPORT_SWIZZLE_Y_NV = 37721;
  private static final int GL_VIEWPORT_SWIZZLE_Z_NV = 37722;
  private static final int GL_VIEWPORT_SWIZZLE_W_NV = 37723;
  private static final int GL_CLIP_ORIGIN_EXT = 37724;
  private static final int GL_CLIP_ORIGIN = 37724;
  private static final int GL_CLIP_DEPTH_MODE_EXT = 37725;
  private static final int GL_CLIP_DEPTH_MODE = 37725;
  private static final int GL_NEGATIVE_ONE_TO_ONE = 37726;
  private static final int GL_NEGATIVE_ONE_TO_ONE_EXT = 37726;
  private static final int GL_ZERO_TO_ONE_EXT = 37727;
  private static final int GL_ZERO_TO_ONE = 37727;
  private static final int GL_CLEAR_TEXTURE = 37733;
  private static final int GL_FONT_GLYPHS_AVAILABLE_NV = 37736;
  private static final int GL_FONT_TARGET_UNAVAILABLE_NV = 37737;
  private static final int GL_FONT_UNAVAILABLE_NV = 37738;
  private static final int GL_FONT_UNINTELLIGIBLE_NV = 37739;
  private static final int GL_STANDARD_FONT_FORMAT_NV = 37740;
  private static final int GL_FRAGMENT_INPUT_NV = 37741;
  private static final int GL_MULTISAMPLES_NV = 37745;
  private static final int GL_SUPERSAMPLE_SCALE_X_NV = 37746;
  private static final int GL_SUPERSAMPLE_SCALE_Y_NV = 37747;
  private static final int GL_CONFORMANT_NV = 37748;
  private static final int GL_CONSERVATIVE_RASTER_DILATE_NV = 37753;
  private static final int GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 37754;
  private static final int GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 37755;
  private static final int GL_NUM_SAMPLE_COUNTS = 37760;
  private static final int GL_MULTISAMPLE_LINE_WIDTH_RANGE = 37761;
  private static final int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 37762;
  private static final int GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 37792;
  private static final int GL_BGRA8_EXT = 37793;
  private static final int GL_TEXTURE_USAGE_ANGLE = 37794;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 37795;
  private static final int GL_PACK_REVERSE_ROW_ORDER_ANGLE = 37796;
  private static final int GL_PROGRAM_BINARY_ANGLE = 37798;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x4 = 37808;
  private static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x4 = 37809;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x5 = 37810;
  private static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x5 = 37811;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x6 = 37812;
  private static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x5 = 37813;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x6 = 37814;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x8 = 37815;
  private static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x5 = 37816;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x6 = 37817;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x8 = 37818;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x10 = 37819;
  private static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x10 = 37820;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;
  private static final int GL_COMPRESSED_RGBA_ASTC_12x12 = 37821;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 37840;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 37841;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 37842;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 37843;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 37844;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 37845;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 37846;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 37847;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 37848;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 37849;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 37850;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 37851;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 37852;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;
  private static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 37853;
  private static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 37872;
  private static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 37873;
  private static final int GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128;
  private static final int GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129;
  private static final int GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130;
  private static final int GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131;
  private static final int GL_PERFQUERY_COUNTER_RAW_INTEL = 38132;
  private static final int GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133;
  private static final int GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136;
  private static final int GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137;
  private static final int GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138;
  private static final int GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139;
  private static final int GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140;
  private static final int GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141;
  private static final int GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142;
  private static final int GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143;
  private static final int GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144;
  private static final int GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 38192;
  private static final int GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 38193;
  private static final int GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 38208;
  private static final int GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 38210;
  private static final int GL_QUERY_RESOURCE_SYS_RESERVED_NV = 38212;
  private static final int GL_QUERY_RESOURCE_TEXTURE_NV = 38213;
  private static final int GL_QUERY_RESOURCE_RENDERBUFFER_NV = 38214;
  private static final int GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 38215;
  private static final int GL_PER_GPU_STORAGE_NV = 38216;
  private static final int GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 38217;
  private static final int GL_CONSERVATIVE_RASTER_MODE_NV = 38221;
  private static final int GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222;
  private static final int GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223;
  private static final int GL_SHADER_BINARY_FORMAT_SPIR_V = 38225;
  private static final int GL_SPIR_V_BINARY = 38226;
  private static final int GL_SPIR_V_EXTENSIONS = 38227;
  private static final int GL_NUM_SPIR_V_EXTENSIONS = 38228;
  private static final int GL_RENDER_GPU_MASK_NV = 38232;
  private static final int GL_TEXTURE_TILING_EXT = 38272;
  private static final int GL_DEDICATED_MEMORY_OBJECT_EXT = 38273;
  private static final int GL_NUM_TILING_TYPES_EXT = 38274;
  private static final int GL_TILING_TYPES_EXT = 38275;
  private static final int GL_OPTIMAL_TILING_EXT = 38276;
  private static final int GL_LINEAR_TILING_EXT = 38277;
  private static final int GL_HANDLE_TYPE_OPAQUE_FD_EXT = 38278;
  private static final int GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279;
  private static final int GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280;
  private static final int GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281;
  private static final int GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282;
  private static final int GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 38283;
  private static final int GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284;
  private static final int GL_LAYOUT_GENERAL_EXT = 38285;
  private static final int GL_LAYOUT_COLOR_ATTACHMENT_EXT = 38286;
  private static final int GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287;
  private static final int GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288;
  private static final int GL_LAYOUT_SHADER_READ_ONLY_EXT = 38289;
  private static final int GL_LAYOUT_TRANSFER_SRC_EXT = 38290;
  private static final int GL_LAYOUT_TRANSFER_DST_EXT = 38291;
  private static final int GL_HANDLE_TYPE_D3D12_FENCE_EXT = 38292;
  private static final int GL_D3D12_FENCE_VALUE_EXT = 38293;
  private static final int GL_NUM_DEVICE_UUIDS_EXT = 38294;
  private static final int GL_DEVICE_UUID_EXT = 38295;
  private static final int GL_DRIVER_UUID_EXT = 38296;
  private static final int GL_DEVICE_LUID_EXT = 38297;
  private static final int GL_DEVICE_NODE_MASK_EXT = 38298;
  private static final int GL_PROTECTED_MEMORY_OBJECT_EXT = 38299;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;
  private static final int GL_MAX_VIEWS_OVR = 38449;
  private static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;
  private static final int GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;
  private static final int GL_GS_SHADER_BINARY_MTK = 38464;
  private static final int GL_GS_PROGRAM_BINARY_MTK = 38465;
  private static final int GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 38562;
  private static final int GL_TRACE_ALL_BITS_MESA = 65535;
  private static final int GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536;
  private static final int GL_EVAL_BIT = 65536;
  private static final int GL_COLOR3_BIT_PGI = 65536;
  private static final int GL_STENCIL_BUFFER_BIT0_QCOM = 65536;
  private static final int GL_RASTER_POSITION_UNCLIPPED_IBM = 103010;
  private static final int GL_CULL_VERTEX_IBM = 103050;
  private static final int GL_ALL_STATIC_DATA_IBM = 103060;
  private static final int GL_STATIC_VERTEX_ARRAY_IBM = 103061;
  private static final int GL_VERTEX_ARRAY_LIST_IBM = 103070;
  private static final int GL_NORMAL_ARRAY_LIST_IBM = 103071;
  private static final int GL_COLOR_ARRAY_LIST_IBM = 103072;
  private static final int GL_INDEX_ARRAY_LIST_IBM = 103073;
  private static final int GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
  private static final int GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
  private static final int GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
  private static final int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
  private static final int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
  private static final int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
  private static final int GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
  private static final int GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
  private static final int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
  private static final int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
  private static final int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
  private static final int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
  private static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;
  private static final int GL_CONSERVE_MEMORY_HINT_PGI = 107005;
  private static final int GL_RECLAIM_MEMORY_HINT_PGI = 107006;
  private static final int GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010;
  private static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;
  private static final int GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;
  private static final int GL_ALWAYS_FAST_HINT_PGI = 107020;
  private static final int GL_ALWAYS_SOFT_HINT_PGI = 107021;
  private static final int GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;
  private static final int GL_ALLOW_DRAW_WIN_HINT_PGI = 107023;
  private static final int GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;
  private static final int GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;
  private static final int GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;
  private static final int GL_STRICT_LIGHTING_HINT_PGI = 107031;
  private static final int GL_STRICT_SCISSOR_HINT_PGI = 107032;
  private static final int GL_FULL_STIPPLE_HINT_PGI = 107033;
  private static final int GL_CLIP_NEAR_HINT_PGI = 107040;
  private static final int GL_CLIP_FAR_HINT_PGI = 107041;
  private static final int GL_WIDE_LINE_HINT_PGI = 107042;
  private static final int GL_BACK_NORMALS_HINT_PGI = 107043;
  private static final int GL_VERTEX_DATA_HINT_PGI = 107050;
  private static final int GL_VERTEX_CONSISTENT_HINT_PGI = 107051;
  private static final int GL_MATERIAL_SIDE_HINT_PGI = 107052;
  private static final int GL_MAX_VERTEX_HINT_PGI = 107053;
  private static final int GL_LIST_BIT = 131072;
  private static final int GL_STENCIL_BUFFER_BIT1_QCOM = 131072;
  private static final int GL_COLOR4_BIT_PGI = 131072;
  private static final int GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072;
  private static final int GL_STENCIL_BUFFER_BIT2_QCOM = 262144;
  private static final int GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144;
  private static final int GL_EDGEFLAG_BIT_PGI = 262144;
  private static final int GL_TEXTURE_BIT = 262144;
  private static final int GL_INDEX_BIT_PGI = 524288;
  private static final int GL_STENCIL_BUFFER_BIT3_QCOM = 524288;
  private static final int GL_SCISSOR_BIT = 524288;
  private static final int GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288;
  private static final int GL_MAT_AMBIENT_BIT_PGI = 1048576;
  private static final int GL_STENCIL_BUFFER_BIT4_QCOM = 1048576;
  private static final int GL_FONT_UNITS_PER_EM_BIT_NV = 1048576;
  private static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152;
  private static final int GL_STENCIL_BUFFER_BIT5_QCOM = 2097152;
  private static final int GL_FONT_ASCENDER_BIT_NV = 2097152;
  private static final int GL_STENCIL_BUFFER_BIT6_QCOM = 4194304;
  private static final int GL_MAT_DIFFUSE_BIT_PGI = 4194304;
  private static final int GL_FONT_DESCENDER_BIT_NV = 4194304;
  private static final int GL_FONT_HEIGHT_BIT_NV = 8388608;
  private static final int GL_MAT_EMISSION_BIT_PGI = 8388608;
  private static final int GL_STENCIL_BUFFER_BIT7_QCOM = 8388608;
  private static final int GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216;
  private static final int GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 16777216;
  private static final int GL_MAT_COLOR_INDEXES_BIT_PGI = 16777216;
  private static final int GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432;
  private static final int GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 33554432;
  private static final int GL_MAT_SHININESS_BIT_PGI = 33554432;
  private static final int GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 67108864;
  private static final int GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864;
  private static final int GL_MAT_SPECULAR_BIT_PGI = 67108864;
  private static final int GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 134217728;
  private static final int GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728;
  private static final int GL_NORMAL_BIT_PGI = 134217728;
  private static final int GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 268435456;
  private static final int GL_TEXCOORD1_BIT_PGI = 268435456;
  private static final int GL_FONT_HAS_KERNING_BIT_NV = 268435456;
  private static final int GL_MULTISAMPLE_BIT_ARB = 536870912;
  private static final int GL_MULTISAMPLE_BIT_EXT = 536870912;
  private static final int GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912;
  private static final int GL_MULTISAMPLE_BIT = 536870912;
  private static final int GL_MULTISAMPLE_BIT_3DFX = 536870912;
  private static final int GL_TEXCOORD2_BIT_PGI = 536870912;
  private static final int GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 536870912;
  private static final int GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 1073741824;
  private static final int GL_TEXCOORD3_BIT_PGI = 1073741824;
  private static Map<Integer, String> _null_;
  private static void _null_0() {
    _null_.put(GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING");
    _null_.put(GL_TRANSFORM_FEEDBACK_BINDING, "GL_TRANSFORM_FEEDBACK_BINDING");
    _null_.put(GL_REFERENCED_BY_GEOMETRY_SHADER, "GL_REFERENCED_BY_GEOMETRY_SHADER");
    _null_.put(GL_TEXTURE_GEN_MODE, "GL_TEXTURE_GEN_MODE");
    _null_.put(GL_CLIPPING_INPUT_PRIMITIVES, "GL_CLIPPING_INPUT_PRIMITIVES");
    _null_.put(GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX, "GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX");
    _null_.put(GL_SYNC_STATUS_APPLE, "GL_SYNC_STATUS_APPLE");
    _null_.put(GL_ACCUM_CLEAR_VALUE, "GL_ACCUM_CLEAR_VALUE");
    _null_.put(GL_SHADER_KHR, "GL_SHADER_KHR");
    _null_.put(GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA, "GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE");
    _null_.put(GL_MAX_IMAGE_UNITS, "GL_MAX_IMAGE_UNITS");
    _null_.put(GL_RENDERBUFFER_SAMPLES_APPLE, "GL_RENDERBUFFER_SAMPLES_APPLE");
    _null_.put(GL_MODELVIEW_STACK_DEPTH, "GL_MODELVIEW_STACK_DEPTH");
    _null_.put(GL_TEXTURE_MIN_LOD, "GL_TEXTURE_MIN_LOD");
    _null_.put(GL_FLOAT_MAT3x4, "GL_FLOAT_MAT3x4");
    _null_.put(GL_FLOAT_MAT3x2, "GL_FLOAT_MAT3x2");
    _null_.put(GL_FRAMEBUFFER_BARRIER_BIT, "GL_FRAMEBUFFER_BARRIER_BIT");
    _null_.put(GL_DEPTH_COMPONENT16_SGIX, "GL_DEPTH_COMPONENT16_SGIX");
    _null_.put(GL_MAX_DEBUG_LOGGED_MESSAGES, "GL_MAX_DEBUG_LOGGED_MESSAGES");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR");
    _null_.put(GL_INVALID_FRAMEBUFFER_OPERATION, "GL_INVALID_FRAMEBUFFER_OPERATION");
    _null_.put(GL_POINT_SPRITE, "GL_POINT_SPRITE");
    _null_.put(GL_MAX_FRAGMENT_UNIFORM_VECTORS, "GL_MAX_FRAGMENT_UNIFORM_VECTORS");
    _null_.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    _null_.put(GL_RGBA_DXT5_S3TC, "GL_RGBA_DXT5_S3TC");
    _null_.put(GL_INVALID_OPERATION, "GL_INVALID_OPERATION");
    _null_.put(GL_SOURCE0_RGB, "GL_SOURCE0_RGB");
    _null_.put(GL_IMAGE_BINDING_ACCESS, "GL_IMAGE_BINDING_ACCESS");
    _null_.put(GL_SAMPLE_BUFFERS_SGIS, "GL_SAMPLE_BUFFERS_SGIS");
    _null_.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    _null_.put(GL_MAX_DEBUG_MESSAGE_LENGTH, "GL_MAX_DEBUG_MESSAGE_LENGTH");
    _null_.put(GL_BLUE_MAX_CLAMP_INGR, "GL_BLUE_MAX_CLAMP_INGR");
    _null_.put(GL_SAMPLER_2D_ARRAY_SHADOW, "GL_SAMPLER_2D_ARRAY_SHADOW");
    _null_.put(GL_POST_COLOR_MATRIX_RED_SCALE, "GL_POST_COLOR_MATRIX_RED_SCALE");
    _null_.put(GL_MAX_COMBINED_IMAGE_UNIFORMS, "GL_MAX_COMBINED_IMAGE_UNIFORMS");
    _null_.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    _null_.put(GL_MAX_DEPTH_TEXTURE_SAMPLES, "GL_MAX_DEPTH_TEXTURE_SAMPLES");
    _null_.put(GL_IMAGE_BINDING_LAYER, "GL_IMAGE_BINDING_LAYER");
    _null_.put(GL_RGBA_FLOAT32_APPLE, "GL_RGBA_FLOAT32_APPLE");
    _null_.put(GL_SET, "GL_SET");
    _null_.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    _null_.put(GL_PARAMETER_BUFFER_BINDING, "GL_PARAMETER_BUFFER_BINDING");
    _null_.put(GL_UNIFORM_BLOCK_DATA_SIZE, "GL_UNIFORM_BLOCK_DATA_SIZE");
    _null_.put(GL_PACK_IMAGE_HEIGHT, "GL_PACK_IMAGE_HEIGHT");
    _null_.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    _null_.put(GL_FOG_COORD_ARRAY_TYPE, "GL_FOG_COORD_ARRAY_TYPE");
  }
  private static void _null_1() {
    _null_.put(GL_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_COLOR_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_FRAMEBUFFER_UNDEFINED, "GL_FRAMEBUFFER_UNDEFINED");
    _null_.put(GL_MAX_TEXTURE_UNITS, "GL_MAX_TEXTURE_UNITS");
    _null_.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR");
    _null_.put(GL_GREEN_INTEGER, "GL_GREEN_INTEGER");
    _null_.put(GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL, "GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL");
    _null_.put(GL_LINES_ADJACENCY, "GL_LINES_ADJACENCY");
    _null_.put(GL_STENCIL_BUFFER_BIT2_QCOM, "GL_STENCIL_BUFFER_BIT2_QCOM");
    _null_.put(GL_DYNAMIC_DRAW, "GL_DYNAMIC_DRAW");
    _null_.put(GL_SLUMINANCE8, "GL_SLUMINANCE8");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT7_QCOM, "GL_MULTISAMPLE_BUFFER_BIT7_QCOM");
    _null_.put(GL_Z400_BINARY_AMD, "GL_Z400_BINARY_AMD");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER");
    _null_.put(GL_VERSION_ES_CM_1_1, "GL_VERSION_ES_CM_1_1");
    _null_.put(GL_PERFQUERY_SINGLE_CONTEXT_INTEL, "GL_PERFQUERY_SINGLE_CONTEXT_INTEL");
    _null_.put(GL_PROGRAM_BINARY_FORMATS, "GL_PROGRAM_BINARY_FORMATS");
    _null_.put(GL_PROXY_TEXTURE_CUBE_MAP_ARRAY, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY");
    _null_.put(GL_INTENSITY_SNORM, "GL_INTENSITY_SNORM");
    _null_.put(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA, "GL_COMPRESSED_SRGB_ALPHA");
    _null_.put(GL_PIXEL_MAP_A_TO_A, "GL_PIXEL_MAP_A_TO_A");
    _null_.put(GL_SYNC_GPU_COMMANDS_COMPLETE, "GL_SYNC_GPU_COMMANDS_COMPLETE");
    _null_.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS");
    _null_.put(GL_BUFFER_SERIALIZED_MODIFY_APPLE, "GL_BUFFER_SERIALIZED_MODIFY_APPLE");
    _null_.put(GL_ALL_BARRIER_BITS, "GL_ALL_BARRIER_BITS");
    _null_.put(GL_TEXTURE_FETCH_BARRIER_BIT, "GL_TEXTURE_FETCH_BARRIER_BIT");
    _null_.put(GL_RGB_FLOAT16_APPLE, "GL_RGB_FLOAT16_APPLE");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT1_RGB, "GL_VIEW_CLASS_S3TC_DXT1_RGB");
    _null_.put(GL_EDGE_FLAG_ARRAY_STRIDE, "GL_EDGE_FLAG_ARRAY_STRIDE");
    _null_.put(GL_IMAGE_ROTATE_ORIGIN_X_HP, "GL_IMAGE_ROTATE_ORIGIN_X_HP");
    _null_.put(GL_FLOAT_VEC2, "GL_FLOAT_VEC2");
    _null_.put(GL_OBJECT_DISTANCE_TO_POINT_SGIS, "GL_OBJECT_DISTANCE_TO_POINT_SGIS");
    _null_.put(GL_FLOAT_VEC4, "GL_FLOAT_VEC4");
    _null_.put(GL_FLOAT_VEC3, "GL_FLOAT_VEC3");
    _null_.put(GL_TEXTURE_GATHER, "GL_TEXTURE_GATHER");
    _null_.put(GL_COLOR_TABLE_ALPHA_SIZE, "GL_COLOR_TABLE_ALPHA_SIZE");
    _null_.put(GL_MAX_SAMPLES_ANGLE, "GL_MAX_SAMPLES_ANGLE");
    _null_.put(GL_MAX_LABEL_LENGTH_KHR, "GL_MAX_LABEL_LENGTH_KHR");
    _null_.put(GL_IMAGE_CLASS_10_10_10_2, "GL_IMAGE_CLASS_10_10_10_2");
    _null_.put(GL_IMAGE_2D_ARRAY, "GL_IMAGE_2D_ARRAY");
    _null_.put(GL_HSL_HUE, "GL_HSL_HUE");
    _null_.put(GL_ALPHA_MIN_SGIX, "GL_ALPHA_MIN_SGIX");
    _null_.put(GL_FRONT_FACE, "GL_FRONT_FACE");
    _null_.put(GL_TEXTURE_GREEN_TYPE, "GL_TEXTURE_GREEN_TYPE");
    _null_.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS");
    _null_.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    _null_.put(GL_TESS_EVALUATION_TEXTURE, "GL_TESS_EVALUATION_TEXTURE");
    _null_.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
  }
  private static void _null_2() {
    _null_.put(GL_COLOR_MATERIAL_FACE, "GL_COLOR_MATERIAL_FACE");
    _null_.put(GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA, "GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA");
    _null_.put(GL_COMMAND_BARRIER_BIT, "GL_COMMAND_BARRIER_BIT");
    _null_.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    _null_.put(GL_RENDERBUFFER_BINDING_ANGLE, "GL_RENDERBUFFER_BINDING_ANGLE");
    _null_.put(GL_SHADER_BINARY_VIV, "GL_SHADER_BINARY_VIV");
    _null_.put(GL_QUERY_BY_REGION_NO_WAIT, "GL_QUERY_BY_REGION_NO_WAIT");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_SIZE, "GL_SECONDARY_COLOR_ARRAY_SIZE");
    _null_.put(GL_CURRENT_PROGRAM, "GL_CURRENT_PROGRAM");
    _null_.put(GL_ALPHA_TEST_FUNC, "GL_ALPHA_TEST_FUNC");
    _null_.put(GL_POLYGON_OFFSET_POINT, "GL_POLYGON_OFFSET_POINT");
    _null_.put(GL_FOG_COORDINATE, "GL_FOG_COORDINATE");
    _null_.put(GL_LIST_MODE, "GL_LIST_MODE");
    _null_.put(GL_RGB_S3TC, "GL_RGB_S3TC");
    _null_.put(GL_INCR, "GL_INCR");
    _null_.put(GL_ACTIVE_RESOURCES, "GL_ACTIVE_RESOURCES");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x8, "GL_COMPRESSED_RGBA_ASTC_8x8");
    _null_.put(GL_TEXTURE_BLUE_SIZE, "GL_TEXTURE_BLUE_SIZE");
    _null_.put(GL_WIDE_LINE_HINT_PGI, "GL_WIDE_LINE_HINT_PGI");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x6, "GL_COMPRESSED_RGBA_ASTC_8x6");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x5, "GL_COMPRESSED_RGBA_ASTC_8x5");
    _null_.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    _null_.put(GL_RGB32F, "GL_RGB32F");
    _null_.put(GL_ACTIVE_UNIFORM_BLOCKS, "GL_ACTIVE_UNIFORM_BLOCKS");
    _null_.put(GL_RGB4_S3TC, "GL_RGB4_S3TC");
    _null_.put(GL_RGB32I, "GL_RGB32I");
    _null_.put(GL_DEBUG_OUTPUT_SYNCHRONOUS, "GL_DEBUG_OUTPUT_SYNCHRONOUS");
    _null_.put(GL_AUX_DEPTH_STENCIL_APPLE, "GL_AUX_DEPTH_STENCIL_APPLE");
    _null_.put(GL_YCRCB_SGIX, "GL_YCRCB_SGIX");
    _null_.put(GL_REFERENCED_BY_VERTEX_SHADER, "GL_REFERENCED_BY_VERTEX_SHADER");
    _null_.put(GL_MULTISAMPLE_LINE_WIDTH_RANGE, "GL_MULTISAMPLE_LINE_WIDTH_RANGE");
    _null_.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    _null_.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    _null_.put(GL_SHADER_SOURCE_LENGTH, "GL_SHADER_SOURCE_LENGTH");
    _null_.put(GL_TEXTURE_COMPRESSION_HINT, "GL_TEXTURE_COMPRESSION_HINT");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x5_KHR, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR");
    _null_.put(GL_LUMINANCE_SNORM, "GL_LUMINANCE_SNORM");
    _null_.put(GL_TEXTURE_STORAGE_HINT_APPLE, "GL_TEXTURE_STORAGE_HINT_APPLE");
    _null_.put(GL_VIEW_CLASS_RGTC1_RED, "GL_VIEW_CLASS_RGTC1_RED");
    _null_.put(GL_UNSIGNED_INT_10F_11F_11F_REV, "GL_UNSIGNED_INT_10F_11F_11F_REV");
    _null_.put(GL_CULL_FACE_MODE, "GL_CULL_FACE_MODE");
    _null_.put(GL_TEXTURE_SWIZZLE_R, "GL_TEXTURE_SWIZZLE_R");
  }
  private static void _null_3() {
    _null_.put(GL_TEXTURE_FIXED_SAMPLE_LOCATIONS, "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS");
    _null_.put(GL_RESAMPLE_ZERO_FILL_OML, "GL_RESAMPLE_ZERO_FILL_OML");
    _null_.put(GL_TEXTURE_SWIZZLE_B, "GL_TEXTURE_SWIZZLE_B");
    _null_.put(GL_TEXTURE_SWIZZLE_A, "GL_TEXTURE_SWIZZLE_A");
    _null_.put(GL_TEXTURE_SWIZZLE_G, "GL_TEXTURE_SWIZZLE_G");
    _null_.put(GL_COLOR_SUM, "GL_COLOR_SUM");
    _null_.put(GL_COLOR_TABLE_FORMAT_SGI, "GL_COLOR_TABLE_FORMAT_SGI");
    _null_.put(GL_PIXEL_PACK_BUFFER_BINDING, "GL_PIXEL_PACK_BUFFER_BINDING");
    _null_.put(GL_FOG_COORDINATE_ARRAY_STRIDE, "GL_FOG_COORDINATE_ARRAY_STRIDE");
    _null_.put(GL_TEXTURE_VIEW, "GL_TEXTURE_VIEW");
    _null_.put(GL_TEXTURE_INTENSITY_SIZE, "GL_TEXTURE_INTENSITY_SIZE");
    _null_.put(GL_QUAD_MESH_SUN, "GL_QUAD_MESH_SUN");
    _null_.put(GL_PROGRAM_PIPELINE_BINDING, "GL_PROGRAM_PIPELINE_BINDING");
    _null_.put(GL_R32UI, "GL_R32UI");
    _null_.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    _null_.put(GL_TEXTURE_COORD_ARRAY_POINTER, "GL_TEXTURE_COORD_ARRAY_POINTER");
    _null_.put(GL_R1UI_C4F_N3F_V3F_SUN, "GL_R1UI_C4F_N3F_V3F_SUN");
    _null_.put(GL_ANY_SAMPLES_PASSED, "GL_ANY_SAMPLES_PASSED");
    _null_.put(GL_TEXTURE_COORD_ARRAY_LIST_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_IBM");
    _null_.put(GL_DEPTH_BUFFER_BIT0_QCOM, "GL_DEPTH_BUFFER_BIT0_QCOM");
    _null_.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    _null_.put(GL_LESS, "GL_LESS");
    _null_.put(GL_DEPTH_BUFFER_BIT4_QCOM, "GL_DEPTH_BUFFER_BIT4_QCOM");
    _null_.put(GL_TEXTURE_COORD_ARRAY, "GL_TEXTURE_COORD_ARRAY");
    _null_.put(GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG, "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG");
    _null_.put(GL_COMPRESSED_RG11_EAC, "GL_COMPRESSED_RG11_EAC");
    _null_.put(GL_RGB_RAW_422_APPLE, "GL_RGB_RAW_422_APPLE");
    _null_.put(GL_DEBUG_TYPE_PUSH_GROUP_KHR, "GL_DEBUG_TYPE_PUSH_GROUP_KHR");
    _null_.put(GL_IMAGE_BINDING_NAME, "GL_IMAGE_BINDING_NAME");
    _null_.put(GL_TESS_CONTROL_SHADER_PATCHES, "GL_TESS_CONTROL_SHADER_PATCHES");
    _null_.put(GL_TRANSFORM_FEEDBACK_PAUSED, "GL_TRANSFORM_FEEDBACK_PAUSED");
    _null_.put(GL_MIN_SPARSE_LEVEL_AMD, "GL_MIN_SPARSE_LEVEL_AMD");
    _null_.put(GL_INT_IMAGE_2D_MULTISAMPLE, "GL_INT_IMAGE_2D_MULTISAMPLE");
    _null_.put(GL_QUADRATIC_ATTENUATION, "GL_QUADRATIC_ATTENUATION");
    _null_.put(GL_CONTEXT_FLAG_DEBUG_BIT_KHR, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR");
    _null_.put(GL_DECAL, "GL_DECAL");
    _null_.put(GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT");
  }
  private static void _null_4() {
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR");
    _null_.put(GL_DRAW_BUFFER9, "GL_DRAW_BUFFER9");
    _null_.put(GL_DRAW_BUFFER5, "GL_DRAW_BUFFER5");
    _null_.put(GL_DRAW_BUFFER6, "GL_DRAW_BUFFER6");
    _null_.put(GL_CONSERVE_MEMORY_HINT_PGI, "GL_CONSERVE_MEMORY_HINT_PGI");
    _null_.put(GL_DRAW_BUFFER7, "GL_DRAW_BUFFER7");
    _null_.put(GL_DRAW_BUFFER8, "GL_DRAW_BUFFER8");
    _null_.put(GL_DRAW_BUFFER1, "GL_DRAW_BUFFER1");
    _null_.put(GL_DRAW_BUFFER2, "GL_DRAW_BUFFER2");
    _null_.put(GL_DRAW_BUFFER3, "GL_DRAW_BUFFER3");
    _null_.put(GL_STENCIL_BACK_VALUE_MASK, "GL_STENCIL_BACK_VALUE_MASK");
    _null_.put(GL_TRIANGLES, "GL_TRIANGLES");
    _null_.put(GL_DRAW_BUFFER4, "GL_DRAW_BUFFER4");
    _null_.put(GL_DEPTH_COMPONENTS, "GL_DEPTH_COMPONENTS");
    _null_.put(GL_STREAM_RASTERIZATION_AMD, "GL_STREAM_RASTERIZATION_AMD");
    _null_.put(GL_MAX_NUM_ACTIVE_VARIABLES, "GL_MAX_NUM_ACTIVE_VARIABLES");
    _null_.put(GL_DRAW_BUFFER0, "GL_DRAW_BUFFER0");
    _null_.put(GL_REFERENCED_BY_COMPUTE_SHADER, "GL_REFERENCED_BY_COMPUTE_SHADER");
    _null_.put(GL_MAX_ASYNC_READ_PIXELS_SGIX, "GL_MAX_ASYNC_READ_PIXELS_SGIX");
    _null_.put(GL_STACK_UNDERFLOW_KHR, "GL_STACK_UNDERFLOW_KHR");
    _null_.put(GL_COLOR_TABLE_RED_SIZE_SGI, "GL_COLOR_TABLE_RED_SIZE_SGI");
    _null_.put(GL_RGBA, "GL_RGBA");
    _null_.put(GL_RGB5, "GL_RGB5");
    _null_.put(GL_RGB4, "GL_RGB4");
    _null_.put(GL_GS_SHADER_BINARY_MTK, "GL_GS_SHADER_BINARY_MTK");
    _null_.put(GL_GUILTY_CONTEXT_RESET_KHR, "GL_GUILTY_CONTEXT_RESET_KHR");
    _null_.put(GL_RGB8, "GL_RGB8");
    _null_.put(GL_FRAMEBUFFER_RENDERABLE, "GL_FRAMEBUFFER_RENDERABLE");
    _null_.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS");
    _null_.put(GL_UNPACK_ROW_BYTES_APPLE, "GL_UNPACK_ROW_BYTES_APPLE");
    _null_.put(GL_PERFMON_RESULT_AMD, "GL_PERFMON_RESULT_AMD");
    _null_.put(GL_3DC_XY_AMD, "GL_3DC_XY_AMD");
    _null_.put(GL_PACK_ROW_LENGTH, "GL_PACK_ROW_LENGTH");
    _null_.put(GL_FRAGMENT_SHADER_INVOCATIONS, "GL_FRAGMENT_SHADER_INVOCATIONS");
    _null_.put(GL_DEPTH_STENCIL, "GL_DEPTH_STENCIL");
    _null_.put(GL_BYTE, "GL_BYTE");
    _null_.put(GL_RGB5_A1, "GL_RGB5_A1");
    _null_.put(GL_ZOOM_X, "GL_ZOOM_X");
    _null_.put(GL_ZOOM_Y, "GL_ZOOM_Y");
    _null_.put(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, "GL_UNPACK_COLORSPACE_CONVERSION_WEBGL");
    _null_.put(GL_UNPACK_RESAMPLE_OML, "GL_UNPACK_RESAMPLE_OML");
    _null_.put(GL_SOFTLIGHT_KHR, "GL_SOFTLIGHT_KHR");
    _null_.put(GL_QUERY_WAIT, "GL_QUERY_WAIT");
    _null_.put(GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_POINTER, "GL_VERTEX_ATTRIB_ARRAY_POINTER");
    _null_.put(GL_VERTEX_ARRAY_BINDING_APPLE, "GL_VERTEX_ARRAY_BINDING_APPLE");
    _null_.put(GL_CONVOLUTION_FORMAT, "GL_CONVOLUTION_FORMAT");
    _null_.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4");
    _null_.put(GL_LINE_STIPPLE_REPEAT, "GL_LINE_STIPPLE_REPEAT");
    _null_.put(GL_VERTEX_PROGRAM_POSITION_MESA, "GL_VERTEX_PROGRAM_POSITION_MESA");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE");
    _null_.put(GL_DEBUG_OUTPUT, "GL_DEBUG_OUTPUT");
    _null_.put(GL_PROGRAM_SEPARABLE, "GL_PROGRAM_SEPARABLE");
    _null_.put(GL_TEXTURE_LIGHTING_MODE_HP, "GL_TEXTURE_LIGHTING_MODE_HP");
  }
  private static void _null_5() {
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_LONG, "GL_VERTEX_ATTRIB_ARRAY_LONG");
    _null_.put(GL_SPHERE_MAP, "GL_SPHERE_MAP");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR");
    _null_.put(GL_VERTEX_ARRAY_KHR, "GL_VERTEX_ARRAY_KHR");
    _null_.put(GL_IMAGE_ROTATE_ANGLE_HP, "GL_IMAGE_ROTATE_ANGLE_HP");
    _null_.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    _null_.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    _null_.put(GL_PROGRAM_PIPELINE, "GL_PROGRAM_PIPELINE");
    _null_.put(GL_UNSIGNED_INT64_AMD, "GL_UNSIGNED_INT64_AMD");
    _null_.put(GL_NO_RESET_NOTIFICATION, "GL_NO_RESET_NOTIFICATION");
    _null_.put(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT");
    _null_.put(GL_SYNC_STATUS, "GL_SYNC_STATUS");
    _null_.put(GL_TEXTURE_RECTANGLE, "GL_TEXTURE_RECTANGLE");
    _null_.put(GL_POLYGON_OFFSET_UNITS, "GL_POLYGON_OFFSET_UNITS");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x10_KHR, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR");
    _null_.put(GL_SRGB8_ALPHA8, "GL_SRGB8_ALPHA8");
    _null_.put(GL_PHONG_WIN, "GL_PHONG_WIN");
    _null_.put(GL_DEBUG_TYPE_PUSH_GROUP, "GL_DEBUG_TYPE_PUSH_GROUP");
    _null_.put(GL_CURRENT_FOG_COORD, "GL_CURRENT_FOG_COORD");
    _null_.put(GL_LUMINANCE16_ALPHA16_SNORM, "GL_LUMINANCE16_ALPHA16_SNORM");
    _null_.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    _null_.put(GL_DEBUG_CATEGORY_API_ERROR_AMD, "GL_DEBUG_CATEGORY_API_ERROR_AMD");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT0_QCOM, "GL_MULTISAMPLE_BUFFER_BIT0_QCOM");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D, "GL_UNSIGNED_INT_IMAGE_2D");
    _null_.put(GL_DATA_BUFFER_AMD, "GL_DATA_BUFFER_AMD");
    _null_.put(GL_STACK_OVERFLOW, "GL_STACK_OVERFLOW");
    _null_.put(GL_MAX_PATCH_VERTICES, "GL_MAX_PATCH_VERTICES");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_SAMPLES, "GL_FRAMEBUFFER_DEFAULT_SAMPLES");
    _null_.put(GL_SLUMINANCE8_ALPHA8, "GL_SLUMINANCE8_ALPHA8");
    _null_.put(GL_INNOCENT_CONTEXT_RESET, "GL_INNOCENT_CONTEXT_RESET");
    _null_.put(GL_ALREADY_SIGNALED_APPLE, "GL_ALREADY_SIGNALED_APPLE");
    _null_.put(GL_DEBUG_SEVERITY_LOW_AMD, "GL_DEBUG_SEVERITY_LOW_AMD");
    _null_.put(GL_C4F_N3F_V3F, "GL_C4F_N3F_V3F");
    _null_.put(GL_VIEWPORT_BOUNDS_RANGE, "GL_VIEWPORT_BOUNDS_RANGE");
    _null_.put(GL_RED_INTEGER, "GL_RED_INTEGER");
    _null_.put(GL_TEXTURE_COORD_ARRAY_STRIDE, "GL_TEXTURE_COORD_ARRAY_STRIDE");
    _null_.put(GL_IGNORE_BORDER_HP, "GL_IGNORE_BORDER_HP");
    _null_.put(GL_WRAP_BORDER_SUN, "GL_WRAP_BORDER_SUN");
    _null_.put(GL_BLEND_EQUATION_RGB, "GL_BLEND_EQUATION_RGB");
    _null_.put(GL_UNSIGNED_INT_IMAGE_1D, "GL_UNSIGNED_INT_IMAGE_1D");
    _null_.put(GL_T2F_N3F_V3F, "GL_T2F_N3F_V3F");
    _null_.put(GL_MAX_TEXTURE_COORDS, "GL_MAX_TEXTURE_COORDS");
    _null_.put(GL_WRITE_ONLY, "GL_WRITE_ONLY");
    _null_.put(GL_MODELVIEW_MATRIX, "GL_MODELVIEW_MATRIX");
    _null_.put(GL_SLICE_ACCUM_SUN, "GL_SLICE_ACCUM_SUN");
    _null_.put(GL_LGPU_SEPARATE_STORAGE_BIT_NVX, "GL_LGPU_SEPARATE_STORAGE_BIT_NVX");
  }
  private static void _null_6() {
    _null_.put(GL_INDEX_WRITEMASK, "GL_INDEX_WRITEMASK");
    _null_.put(GL_DRAW_FRAMEBUFFER_BINDING, "GL_DRAW_FRAMEBUFFER_BINDING");
    _null_.put(GL_TESS_CONTROL_TEXTURE, "GL_TESS_CONTROL_TEXTURE");
    _null_.put(GL_PROXY_COLOR_TABLE_SGI, "GL_PROXY_COLOR_TABLE_SGI");
    _null_.put(GL_PIXEL_MODE_BIT, "GL_PIXEL_MODE_BIT");
    _null_.put(GL_DEPTH_BUFFER_BIT7_QCOM, "GL_DEPTH_BUFFER_BIT7_QCOM");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS");
    _null_.put(GL_PURGEABLE_APPLE, "GL_PURGEABLE_APPLE");
    _null_.put(GL_COMPUTE_SHADER_INVOCATIONS, "GL_COMPUTE_SHADER_INVOCATIONS");
    _null_.put(GL_UNSIGNED_INT_IMAGE_3D, "GL_UNSIGNED_INT_IMAGE_3D");
    _null_.put(GL_OPERAND2_RGB, "GL_OPERAND2_RGB");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG");
    _null_.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    _null_.put(GL_PIXEL_TILE_CACHE_INCREMENT_SGIX, "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX");
    _null_.put(GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE, "GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE");
    _null_.put(GL_READ_PIXELS, "GL_READ_PIXELS");
    _null_.put(GL_LOW_INT, "GL_LOW_INT");
    _null_.put(GL_STRICT_LIGHTING_HINT_PGI, "GL_STRICT_LIGHTING_HINT_PGI");
    _null_.put(GL_IMAGE_TRANSLATE_Y_HP, "GL_IMAGE_TRANSLATE_Y_HP");
    _null_.put(GL_RGB10_A2, "GL_RGB10_A2");
    _null_.put(GL_MAX_SHADER_STORAGE_BLOCK_SIZE, "GL_MAX_SHADER_STORAGE_BLOCK_SIZE");
    _null_.put(GL_TEXTURE_PRE_SPECULAR_HP, "GL_TEXTURE_PRE_SPECULAR_HP");
    _null_.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    _null_.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR");
    _null_.put(GL_NATIVE_GRAPHICS_HANDLE_PGI, "GL_NATIVE_GRAPHICS_HANDLE_PGI");
    _null_.put(GL_READ_FRAMEBUFFER_BINDING_ANGLE, "GL_READ_FRAMEBUFFER_BINDING_ANGLE");
    _null_.put(GL_PROGRAM_OUTPUT, "GL_PROGRAM_OUTPUT");
    _null_.put(GL_POLYGON_SMOOTH_HINT, "GL_POLYGON_SMOOTH_HINT");
    _null_.put(GL_BGR, "GL_BGR");
    _null_.put(GL_INT_IMAGE_1D, "GL_INT_IMAGE_1D");
    _null_.put(GL_BLEND_ADVANCED_COHERENT_KHR, "GL_BLEND_ADVANCED_COHERENT_KHR");
    _null_.put(GL_COMPRESSED_SIGNED_RG11_EAC, "GL_COMPRESSED_SIGNED_RG11_EAC");
    _null_.put(GL_POINT, "GL_POINT");
    _null_.put(GL_DEBUG_TYPE_ERROR, "GL_DEBUG_TYPE_ERROR");
    _null_.put(GL_PIXEL_UNPACK_BUFFER_BINDING, "GL_PIXEL_UNPACK_BUFFER_BINDING");
    _null_.put(GL_CLEAR, "GL_CLEAR");
    _null_.put(GL_INT_IMAGE_3D, "GL_INT_IMAGE_3D");
    _null_.put(GL_INT_IMAGE_2D, "GL_INT_IMAGE_2D");
    _null_.put(GL_IMAGE_1D_ARRAY, "GL_IMAGE_1D_ARRAY");
    _null_.put(GL_VERTEX_BINDING_DIVISOR, "GL_VERTEX_BINDING_DIVISOR");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
    _null_.put(GL_POINT_SIZE_MAX, "GL_POINT_SIZE_MAX");
    _null_.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS");
    _null_.put(GL_UNSIGNALED, "GL_UNSIGNALED");
    _null_.put(GL_INT_SAMPLER_2D_ARRAY, "GL_INT_SAMPLER_2D_ARRAY");
    _null_.put(GL_SAMPLER_2D_ARRAY, "GL_SAMPLER_2D_ARRAY");
    _null_.put(GL_POLYGON_OFFSET_LINE, "GL_POLYGON_OFFSET_LINE");
    _null_.put(GL_PIXEL_TEX_GEN_MODE_SGIX, "GL_PIXEL_TEX_GEN_MODE_SGIX");
  }
  private static void _null_7() {
    _null_.put(GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS, "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_TEXTURE_MULTI_BUFFER_HINT_SGIX, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL, "GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL");
    _null_.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    _null_.put(GL_RENDERBUFFER_SAMPLES, "GL_RENDERBUFFER_SAMPLES");
    _null_.put(GL_QUERY_BUFFER_BINDING_AMD, "GL_QUERY_BUFFER_BINDING_AMD");
    _null_.put(GL_INTERNALFORMAT_STENCIL_TYPE, "GL_INTERNALFORMAT_STENCIL_TYPE");
    _null_.put(GL_PROXY_TEXTURE_2D_STACK_MESAX, "GL_PROXY_TEXTURE_2D_STACK_MESAX");
    _null_.put(GL_MAX_PROGRAM_TEXEL_OFFSET, "GL_MAX_PROGRAM_TEXEL_OFFSET");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER");
    _null_.put(GL_COLOR_ARRAY_POINTER, "GL_COLOR_ARRAY_POINTER");
    _null_.put(GL_MAX_WIDTH, "GL_MAX_WIDTH");
    _null_.put(GL_BUFFER_MAPPED, "GL_BUFFER_MAPPED");
    _null_.put(GL_BLEND_EQUATION_ALPHA, "GL_BLEND_EQUATION_ALPHA");
    _null_.put(GL_UNPACK_FLIP_Y_WEBGL, "GL_UNPACK_FLIP_Y_WEBGL");
    _null_.put(GL_MIRRORED_REPEAT_IBM, "GL_MIRRORED_REPEAT_IBM");
    _null_.put(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    _null_.put(GL_UNPACK_COMPRESSED_SIZE_SGIX, "GL_UNPACK_COMPRESSED_SIZE_SGIX");
    _null_.put(GL_FOG_HINT, "GL_FOG_HINT");
    _null_.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE");
    _null_.put(GL_FLOAT_MAT4x3, "GL_FLOAT_MAT4x3");
    _null_.put(GL_UNSIGNED_INT_10_10_10_2, "GL_UNSIGNED_INT_10_10_10_2");
    _null_.put(GL_FLOAT_MAT4x2, "GL_FLOAT_MAT4x2");
    _null_.put(GL_ACCUM_BLUE_BITS, "GL_ACCUM_BLUE_BITS");
    _null_.put(GL_R16UI, "GL_R16UI");
    _null_.put(GL_VIEW_CLASS_24_BITS, "GL_VIEW_CLASS_24_BITS");
    _null_.put(GL_LINEAR_MIPMAP_NEAREST, "GL_LINEAR_MIPMAP_NEAREST");
    _null_.put(GL_TEXTURE_LOD_BIAS, "GL_TEXTURE_LOD_BIAS");
    _null_.put(GL_STENCIL_BACK_FAIL, "GL_STENCIL_BACK_FAIL");
    _null_.put(GL_LIST_INDEX, "GL_LIST_INDEX");
    _null_.put(GL_REPLACE, "GL_REPLACE");
    _null_.put(GL_TIMEOUT_IGNORED_APPLE, "GL_TIMEOUT_IGNORED_APPLE");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT3_QCOM, "GL_MULTISAMPLE_BUFFER_BIT3_QCOM");
    _null_.put(GL_MEDIUM_FLOAT, "GL_MEDIUM_FLOAT");
    _null_.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    _null_.put(GL_SHADER_BINARY_DMP, "GL_SHADER_BINARY_DMP");
    _null_.put(GL_INDEX_ARRAY_STRIDE, "GL_INDEX_ARRAY_STRIDE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE");
    _null_.put(GL_MAP1_GRID_DOMAIN, "GL_MAP1_GRID_DOMAIN");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR");
    _null_.put(GL_TEXTURE_RANGE_LENGTH_APPLE, "GL_TEXTURE_RANGE_LENGTH_APPLE");
    _null_.put(GL_SHININESS, "GL_SHININESS");
    _null_.put(GL_READ_FRAMEBUFFER, "GL_READ_FRAMEBUFFER");
    _null_.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x6_KHR, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR");
    _null_.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR");
    _null_.put(GL_ONE_MINUS_SRC1_COLOR, "GL_ONE_MINUS_SRC1_COLOR");
    _null_.put(GL_INTERNALFORMAT_GREEN_SIZE, "GL_INTERNALFORMAT_GREEN_SIZE");
    _null_.put(GL_DEBUG_SEVERITY_HIGH_KHR, "GL_DEBUG_SEVERITY_HIGH_KHR");
    _null_.put(GL_DEBUG_SOURCE_API_KHR, "GL_DEBUG_SOURCE_API_KHR");
    _null_.put(GL_SET_AMD, "GL_SET_AMD");
    _null_.put(GL_SAMPLER_3D, "GL_SAMPLER_3D");
    _null_.put(GL_MAX_LGPU_GPUS_NVX, "GL_MAX_LGPU_GPUS_NVX");
  }
  private static void _null_8() {
    _null_.put(GL_IMAGE_SCALE_Y_HP, "GL_IMAGE_SCALE_Y_HP");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
    _null_.put(GL_FLOAT16_MAT2x3_AMD, "GL_FLOAT16_MAT2x3_AMD");
    _null_.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
    _null_.put(GL_FLOAT16_MAT2_AMD, "GL_FLOAT16_MAT2_AMD");
    _null_.put(GL_TEXTURE_TYPE_QCOM, "GL_TEXTURE_TYPE_QCOM");
    _null_.put(GL_IMAGE_CUBE_MAP_ARRAY, "GL_IMAGE_CUBE_MAP_ARRAY");
    _null_.put(GL_INDEX_BIT_PGI, "GL_INDEX_BIT_PGI");
    _null_.put(GL_SLUMINANCE_ALPHA, "GL_SLUMINANCE_ALPHA");
    _null_.put(GL_COLOR_ARRAY_BUFFER_BINDING, "GL_COLOR_ARRAY_BUFFER_BINDING");
    _null_.put(GL_FALSE, "GL_FALSE");
    _null_.put(GL_TIMESTAMP, "GL_TIMESTAMP");
    _null_.put(GL_SUBSAMPLE_DISTANCE_AMD, "GL_SUBSAMPLE_DISTANCE_AMD");
    _null_.put(GL_SAMPLER_2D, "GL_SAMPLER_2D");
    _null_.put(GL_TEXCOORD4_BIT_PGI, "GL_TEXCOORD4_BIT_PGI");
    _null_.put(GL_SPRITE_MODE_SGIX, "GL_SPRITE_MODE_SGIX");
    _null_.put(GL_UNSIGNED_SHORT_8_8_MESA, "GL_UNSIGNED_SHORT_8_8_MESA");
    _null_.put(GL_MIRROR_CLAMP_TO_EDGE, "GL_MIRROR_CLAMP_TO_EDGE");
    _null_.put(GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM, "GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM");
    _null_.put(GL_CLEAR_TEXTURE, "GL_CLEAR_TEXTURE");
    _null_.put(GL_COMPRESSED_INTENSITY, "GL_COMPRESSED_INTENSITY");
    _null_.put(GL_INT, "GL_INT");
    _null_.put(GL_SAMPLER_1D, "GL_SAMPLER_1D");
    _null_.put(GL_FRAMEBUFFER_BINDING, "GL_FRAMEBUFFER_BINDING");
    _null_.put(GL_MEDIUM_INT, "GL_MEDIUM_INT");
    _null_.put(GL_SAMPLES_PASSED, "GL_SAMPLES_PASSED");
    _null_.put(GL_ACTIVE_SUBROUTINE_UNIFORMS, "GL_ACTIVE_SUBROUTINE_UNIFORMS");
    _null_.put(GL_CLIP_DISTANCE1, "GL_CLIP_DISTANCE1");
    _null_.put(GL_CLIP_DISTANCE0, "GL_CLIP_DISTANCE0");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED");
    _null_.put(GL_CLIP_DISTANCE3, "GL_CLIP_DISTANCE3");
    _null_.put(GL_CLIP_DISTANCE2, "GL_CLIP_DISTANCE2");
    _null_.put(GL_CLIP_DISTANCE5, "GL_CLIP_DISTANCE5");
    _null_.put(GL_R8I, "GL_R8I");
    _null_.put(GL_CLIP_DISTANCE4, "GL_CLIP_DISTANCE4");
    _null_.put(GL_CLIP_DISTANCE7, "GL_CLIP_DISTANCE7");
    _null_.put(GL_CLIP_DISTANCE6, "GL_CLIP_DISTANCE6");
    _null_.put(GL_MAX_HEIGHT, "GL_MAX_HEIGHT");
    _null_.put(GL_SGX_BINARY_IMG, "GL_SGX_BINARY_IMG");
    _null_.put(GL_VALIDATE_STATUS, "GL_VALIDATE_STATUS");
    _null_.put(GL_INTENSITY16, "GL_INTENSITY16");
    _null_.put(GL_PIXEL_SUBSAMPLE_4242_SGIX, "GL_PIXEL_SUBSAMPLE_4242_SGIX");
    _null_.put(GL_NORMAL_ARRAY_POINTER, "GL_NORMAL_ARRAY_POINTER");
    _null_.put(GL_INTENSITY12, "GL_INTENSITY12");
    _null_.put(GL_REDUCE, "GL_REDUCE");
    _null_.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    _null_.put(GL_TEXTURE_SWIZZLE_RGBA, "GL_TEXTURE_SWIZZLE_RGBA");
    _null_.put(GL_COLOR_BUFFER_BIT2_QCOM, "GL_COLOR_BUFFER_BIT2_QCOM");
    _null_.put(GL_TESS_GEN_VERTEX_ORDER, "GL_TESS_GEN_VERTEX_ORDER");
    _null_.put(GL_YCBCR_MESA, "GL_YCBCR_MESA");
    _null_.put(GL_INT_SAMPLER_CUBE_MAP_ARRAY, "GL_INT_SAMPLER_CUBE_MAP_ARRAY");
    _null_.put(GL_FRAGMENT_DEPTH, "GL_FRAGMENT_DEPTH");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT4_QCOM, "GL_MULTISAMPLE_BUFFER_BIT4_QCOM");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE");
    _null_.put(GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD, "GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD");
    _null_.put(GL_RENDERBUFFER_INTERNAL_FORMAT, "GL_RENDERBUFFER_INTERNAL_FORMAT");
  }
  private static void _null_9() {
    _null_.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS");
    _null_.put(GL_UNPACK_SKIP_IMAGES, "GL_UNPACK_SKIP_IMAGES");
    _null_.put(GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX, "GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX");
    _null_.put(GL_NORMAL_ARRAY_LIST_IBM, "GL_NORMAL_ARRAY_LIST_IBM");
    _null_.put(GL_FIXED_ONLY, "GL_FIXED_ONLY");
    _null_.put(GL_TEXTURE_IMMUTABLE_FORMAT, "GL_TEXTURE_IMMUTABLE_FORMAT");
    _null_.put(GL_STORAGE_CLIENT_APPLE, "GL_STORAGE_CLIENT_APPLE");
    _null_.put(GL_TEXTURE_1D_ARRAY, "GL_TEXTURE_1D_ARRAY");
    _null_.put(GL_TEXTURE_SHADOW, "GL_TEXTURE_SHADOW");
    _null_.put(GL_DEPTH_STENCIL_ATTACHMENT, "GL_DEPTH_STENCIL_ATTACHMENT");
    _null_.put(GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT, "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT");
    _null_.put(GL_POLYGON_STIPPLE, "GL_POLYGON_STIPPLE");
    _null_.put(GL_COMPRESSED_SLUMINANCE, "GL_COMPRESSED_SLUMINANCE");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_GEOMETRY_DEFORMATION_BIT_SGIX, "GL_GEOMETRY_DEFORMATION_BIT_SGIX");
    _null_.put(GL_DETAIL_TEXTURE_2D_BINDING_SGIS, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS");
    _null_.put(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR, "GL_DEBUG_SOURCE_SHADER_COMPILER_KHR");
    _null_.put(GL_QUERY_BUFFER_BARRIER_BIT, "GL_QUERY_BUFFER_BARRIER_BIT");
    _null_.put(GL_HISTOGRAM_ALPHA_SIZE, "GL_HISTOGRAM_ALPHA_SIZE");
    _null_.put(GL_LINE_STRIP_ADJACENCY, "GL_LINE_STRIP_ADJACENCY");
    _null_.put(GL_LUMINANCE16_SNORM, "GL_LUMINANCE16_SNORM");
    _null_.put(GL_UNKNOWN_CONTEXT_RESET_KHR, "GL_UNKNOWN_CONTEXT_RESET_KHR");
    _null_.put(GL_POINT_SIZE_GRANULARITY, "GL_POINT_SIZE_GRANULARITY");
    _null_.put(GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD");
    _null_.put(GL_UNIFORM_MATRIX_STRIDE, "GL_UNIFORM_MATRIX_STRIDE");
    _null_.put(GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS");
    _null_.put(GL_POST_COLOR_MATRIX_RED_BIAS, "GL_POST_COLOR_MATRIX_RED_BIAS");
    _null_.put(GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT, "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT");
    _null_.put(GL_DEBUG_SEVERITY_NOTIFICATION_KHR, "GL_DEBUG_SEVERITY_NOTIFICATION_KHR");
    _null_.put(GL_CLIP_PLANE3_IMG, "GL_CLIP_PLANE3_IMG");
    _null_.put(GL_VERTEX_ARRAY_POINTER, "GL_VERTEX_ARRAY_POINTER");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE, "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE");
    _null_.put(GL_TRIANGLE_MESH_SUN, "GL_TRIANGLE_MESH_SUN");
    _null_.put(GL_TEXTURE_1D_STACK_BINDING_MESAX, "GL_TEXTURE_1D_STACK_BINDING_MESAX");
    _null_.put(GL_SAMPLE_MASK_VALUE, "GL_SAMPLE_MASK_VALUE");
    _null_.put(GL_COMPILE_AND_EXECUTE, "GL_COMPILE_AND_EXECUTE");
    _null_.put(GL_LUMINANCE6_ALPHA2, "GL_LUMINANCE6_ALPHA2");
    _null_.put(GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    _null_.put(GL_FRAMEBUFFER_SRGB, "GL_FRAMEBUFFER_SRGB");
    _null_.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT");
    _null_.put(GL_EYE_DISTANCE_TO_POINT_SGIS, "GL_EYE_DISTANCE_TO_POINT_SGIS");
    _null_.put(GL_MODULATE, "GL_MODULATE");
    _null_.put(GL_ALPHA_TEST_QCOM, "GL_ALPHA_TEST_QCOM");
    _null_.put(GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG, "GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG");
    _null_.put(GL_SCREEN, "GL_SCREEN");
  }
  private static void _null_10() {
    _null_.put(GL_TEXTURE_SAMPLES, "GL_TEXTURE_SAMPLES");
    _null_.put(GL_MULTIPLY_KHR, "GL_MULTIPLY_KHR");
    _null_.put(GL_TRANSPOSE_MODELVIEW_MATRIX, "GL_TRANSPOSE_MODELVIEW_MATRIX");
    _null_.put(GL_BLUE_BIAS, "GL_BLUE_BIAS");
    _null_.put(GL_AUTO_NORMAL, "GL_AUTO_NORMAL");
    _null_.put(GL_POINT_SIZE_MIN, "GL_POINT_SIZE_MIN");
    _null_.put(GL_CULL_VERTEX_IBM, "GL_CULL_VERTEX_IBM");
    _null_.put(GL_MIPMAP, "GL_MIPMAP");
    _null_.put(GL_SINGLE_COLOR, "GL_SINGLE_COLOR");
    _null_.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_DEPTH, "GL_UNPACK_COMPRESSED_BLOCK_DEPTH");
    _null_.put(GL_NUM_SHADING_LANGUAGE_VERSIONS, "GL_NUM_SHADING_LANGUAGE_VERSIONS");
    _null_.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
    _null_.put(GL_ALPHA8_SNORM, "GL_ALPHA8_SNORM");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS, "GL_POST_COLOR_MATRIX_ALPHA_BIAS");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER");
    _null_.put(GL_MIN_FRAGMENT_INTERPOLATION_OFFSET, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET");
    _null_.put(GL_TEXTURE_INTERNAL_FORMAT_QCOM, "GL_TEXTURE_INTERNAL_FORMAT_QCOM");
    _null_.put(GL_SIGNED_NORMALIZED, "GL_SIGNED_NORMALIZED");
    _null_.put(GL_MAX_FRAGMENT_INTERPOLATION_OFFSET, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET");
    _null_.put(GL_DELETE_STATUS, "GL_DELETE_STATUS");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT3_RGBA, "GL_VIEW_CLASS_S3TC_DXT3_RGBA");
    _null_.put(GL_SAMPLE_PATTERN_SGIS, "GL_SAMPLE_PATTERN_SGIS");
    _null_.put(GL_R11F_G11F_B10F_APPLE, "GL_R11F_G11F_B10F_APPLE");
    _null_.put(GL_MAX_VERTEX_HINT_PGI, "GL_MAX_VERTEX_HINT_PGI");
    _null_.put(GL_UNSIGNED_INT_IMAGE_1D_ARRAY, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY");
    _null_.put(GL_PIXEL_MAP_R_TO_R, "GL_PIXEL_MAP_R_TO_R");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_APPLE, "GL_VERTEX_ATTRIB_MAP1_APPLE");
    _null_.put(GL_SAMPLE_COVERAGE_VALUE, "GL_SAMPLE_COVERAGE_VALUE");
    _null_.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    _null_.put(GL_ALPHA_INTEGER, "GL_ALPHA_INTEGER");
    _null_.put(GL_UNKNOWN_CONTEXT_RESET, "GL_UNKNOWN_CONTEXT_RESET");
    _null_.put(GL_MAX_PROJECTION_STACK_DEPTH, "GL_MAX_PROJECTION_STACK_DEPTH");
    _null_.put(GL_TOP_LEVEL_ARRAY_STRIDE, "GL_TOP_LEVEL_ARRAY_STRIDE");
    _null_.put(GL_R3_G3_B2, "GL_R3_G3_B2");
    _null_.put(GL_LINE_STRIP, "GL_LINE_STRIP");
    _null_.put(GL_QUERY, "GL_QUERY");
    _null_.put(GL_TEXTURE_ENV_COLOR, "GL_TEXTURE_ENV_COLOR");
    _null_.put(GL_SAMPLES_SGIS, "GL_SAMPLES_SGIS");
    _null_.put(GL_UPPER_LEFT, "GL_UPPER_LEFT");
    _null_.put(GL_INNOCENT_CONTEXT_RESET_KHR, "GL_INNOCENT_CONTEXT_RESET_KHR");
    _null_.put(GL_DEBUG_TYPE_OTHER_KHR, "GL_DEBUG_TYPE_OTHER_KHR");
    _null_.put(GL_DUAL_LUMINANCE4_SGIS, "GL_DUAL_LUMINANCE4_SGIS");
    _null_.put(GL_COLOR_BUFFER_BIT5_QCOM, "GL_COLOR_BUFFER_BIT5_QCOM");
    _null_.put(GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS, "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_TEXTURE_LUMINANCE_SIZE, "GL_TEXTURE_LUMINANCE_SIZE");
    _null_.put(GL_RESET_NOTIFICATION_STRATEGY, "GL_RESET_NOTIFICATION_STRATEGY");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x6, "GL_COMPRESSED_RGBA_ASTC_10x6");
  }
  private static void _null_11() {
    _null_.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x8, "GL_COMPRESSED_RGBA_ASTC_10x8");
    _null_.put(GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x5, "GL_COMPRESSED_RGBA_ASTC_10x5");
    _null_.put(GL_LIST_BIT, "GL_LIST_BIT");
    _null_.put(GL_ELEMENT_ARRAY_BUFFER, "GL_ELEMENT_ARRAY_BUFFER");
    _null_.put(GL_SPOT_CUTOFF, "GL_SPOT_CUTOFF");
    _null_.put(GL_TEXTURE_COLOR_WRITEMASK_SGIS, "GL_TEXTURE_COLOR_WRITEMASK_SGIS");
    _null_.put(GL_DYNAMIC_COPY, "GL_DYNAMIC_COPY");
    _null_.put(GL_OBJECT_POINT_SGIS, "GL_OBJECT_POINT_SGIS");
    _null_.put(GL_ALPHA_MAX_CLAMP_INGR, "GL_ALPHA_MAX_CLAMP_INGR");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN, "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN");
    _null_.put(GL_DEPTH_CLAMP_FAR_AMD, "GL_DEPTH_CLAMP_FAR_AMD");
    _null_.put(GL_TRANSFORM_FEEDBACK_ACTIVE, "GL_TRANSFORM_FEEDBACK_ACTIVE");
    _null_.put(GL_AND_INVERTED, "GL_AND_INVERTED");
    _null_.put(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_TEXTURE_BUFFER_OFFSET, "GL_TEXTURE_BUFFER_OFFSET");
    _null_.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
    _null_.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    _null_.put(GL_PROJECTION, "GL_PROJECTION");
    _null_.put(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH");
    _null_.put(GL_2PASS_1_SGIS, "GL_2PASS_1_SGIS");
    _null_.put(GL_LINEAR, "GL_LINEAR");
    _null_.put(GL_ACTIVE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_UNIFORM_MAX_LENGTH");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x8_KHR, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR");
    _null_.put(GL_INDEX_CLEAR_VALUE, "GL_INDEX_CLEAR_VALUE");
    _null_.put(GL_RGB9_E5_APPLE, "GL_RGB9_E5_APPLE");
    _null_.put(GL_BGRA_INTEGER, "GL_BGRA_INTEGER");
    _null_.put(GL_SGX_PROGRAM_BINARY_IMG, "GL_SGX_PROGRAM_BINARY_IMG");
    _null_.put(GL_HSL_SATURATION, "GL_HSL_SATURATION");
    _null_.put(GL_REPLICATE_BORDER, "GL_REPLICATE_BORDER");
    _null_.put(GL_TEXTURE_2D_STACK_BINDING_MESAX, "GL_TEXTURE_2D_STACK_BINDING_MESAX");
    _null_.put(GL_UNSIGNED_SHORT_5_6_5, "GL_UNSIGNED_SHORT_5_6_5");
    _null_.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    _null_.put(GL_TEXTURE_VIEW_MIN_LAYER, "GL_TEXTURE_VIEW_MIN_LAYER");
    _null_.put(GL_ALPHA_FLOAT16_APPLE, "GL_ALPHA_FLOAT16_APPLE");
    _null_.put(GL_CLAMP_FRAGMENT_COLOR, "GL_CLAMP_FRAGMENT_COLOR");
    _null_.put(GL_MAX_TESS_GEN_LEVEL, "GL_MAX_TESS_GEN_LEVEL");
    _null_.put(GL_MAX_COMPUTE_ATOMIC_COUNTERS, "GL_MAX_COMPUTE_ATOMIC_COUNTERS");
    _null_.put(GL_AND, "GL_AND");
    _null_.put(GL_UNIFORM_BUFFER_SIZE, "GL_UNIFORM_BUFFER_SIZE");
    _null_.put(GL_BACK, "GL_BACK");
    _null_.put(GL_COLOR_ARRAY_TYPE, "GL_COLOR_ARRAY_TYPE");
    _null_.put(GL_TEXTURE_MAX_LOD_SGIS, "GL_TEXTURE_MAX_LOD_SGIS");
    _null_.put(GL_TEXTURE_BINDING_CUBE_MAP, "GL_TEXTURE_BINDING_CUBE_MAP");
    _null_.put(GL_PIXEL_SUBSAMPLE_4444_SGIX, "GL_PIXEL_SUBSAMPLE_4444_SGIX");
    _null_.put(GL_LOAD, "GL_LOAD");
    _null_.put(GL_4PASS_0_SGIS, "GL_4PASS_0_SGIS");
  }
  private static void _null_12() {
    _null_.put(GL_NEGATIVE_ONE_TO_ONE, "GL_NEGATIVE_ONE_TO_ONE");
    _null_.put(GL_T2F_V3F, "GL_T2F_V3F");
    _null_.put(GL_CONTEXT_COMPATIBILITY_PROFILE_BIT, "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT");
    _null_.put(GL_READ_FRAMEBUFFER_APPLE, "GL_READ_FRAMEBUFFER_APPLE");
    _null_.put(GL_RASTER_POSITION_UNCLIPPED_IBM, "GL_RASTER_POSITION_UNCLIPPED_IBM");
    _null_.put(GL_LOGIC_OP_MODE, "GL_LOGIC_OP_MODE");
    _null_.put(GL_PACK_SKIP_IMAGES, "GL_PACK_SKIP_IMAGES");
    _null_.put(GL_VIRTUAL_PAGE_SIZE_Y_AMD, "GL_VIRTUAL_PAGE_SIZE_Y_AMD");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC, "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC");
    _null_.put(GL_ARRAY_STRIDE, "GL_ARRAY_STRIDE");
    _null_.put(GL_R1UI_C4UB_V3F_SUN, "GL_R1UI_C4UB_V3F_SUN");
    _null_.put(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV");
    _null_.put(GL_MAX_DRAW_BUFFERS, "GL_MAX_DRAW_BUFFERS");
    _null_.put(GL_TEXTURE_BORDER, "GL_TEXTURE_BORDER");
    _null_.put(GL_DRAW_BUFFER, "GL_DRAW_BUFFER");
    _null_.put(GL_COMPRESSED_RED_RGTC1, "GL_COMPRESSED_RED_RGTC1");
    _null_.put(GL_RENDERBUFFER_ALPHA_SIZE, "GL_RENDERBUFFER_ALPHA_SIZE");
    _null_.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    _null_.put(GL_FRAGMENT_SUBROUTINE, "GL_FRAGMENT_SUBROUTINE");
    _null_.put(GL_ALLOW_DRAW_MEM_HINT_PGI, "GL_ALLOW_DRAW_MEM_HINT_PGI");
    _null_.put(GL_MAX_COMPUTE_SHARED_MEMORY_SIZE, "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE");
    _null_.put(GL_UNSIGNED_INT_24_8_MESA, "GL_UNSIGNED_INT_24_8_MESA");
    _null_.put(GL_DIFFERENCE_KHR, "GL_DIFFERENCE_KHR");
    _null_.put(GL_R1UI_N3F_V3F_SUN, "GL_R1UI_N3F_V3F_SUN");
    _null_.put(GL_ACTIVE_PROGRAM, "GL_ACTIVE_PROGRAM");
    _null_.put(GL_PIXEL_MAP_I_TO_B_SIZE, "GL_PIXEL_MAP_I_TO_B_SIZE");
    _null_.put(GL_DISPLAY_LIST, "GL_DISPLAY_LIST");
    _null_.put(GL_COLOR_ATTACHMENT0, "GL_COLOR_ATTACHMENT0");
    _null_.put(GL_MAX_FRAMEZOOM_FACTOR_SGIX, "GL_MAX_FRAMEZOOM_FACTOR_SGIX");
    _null_.put(GL_COLOR_ATTACHMENT4, "GL_COLOR_ATTACHMENT4");
    _null_.put(GL_QUERY_RESULT_NO_WAIT, "GL_QUERY_RESULT_NO_WAIT");
    _null_.put(GL_COLOR_ATTACHMENT3, "GL_COLOR_ATTACHMENT3");
    _null_.put(GL_COLOR_ATTACHMENT2, "GL_COLOR_ATTACHMENT2");
    _null_.put(GL_COMPRESSED_RGB8_ETC2, "GL_COMPRESSED_RGB8_ETC2");
    _null_.put(GL_COLOR_ATTACHMENT1, "GL_COLOR_ATTACHMENT1");
    _null_.put(GL_COLOR_ATTACHMENT8, "GL_COLOR_ATTACHMENT8");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_SIZE, "GL_ATOMIC_COUNTER_BUFFER_SIZE");
    _null_.put(GL_COLOR_ATTACHMENT7, "GL_COLOR_ATTACHMENT7");
    _null_.put(GL_COLOR_ATTACHMENT6, "GL_COLOR_ATTACHMENT6");
    _null_.put(GL_COLOR_ATTACHMENT5, "GL_COLOR_ATTACHMENT5");
    _null_.put(GL_CLIP_DISTANCE0_APPLE, "GL_CLIP_DISTANCE0_APPLE");
    _null_.put(GL_COMPUTE_SUBROUTINE, "GL_COMPUTE_SUBROUTINE");
    _null_.put(GL_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET");
    _null_.put(GL_NUM_PROGRAM_BINARY_FORMATS, "GL_NUM_PROGRAM_BINARY_FORMATS");
    _null_.put(GL_LINEAR_MIPMAP_LINEAR, "GL_LINEAR_MIPMAP_LINEAR");
    _null_.put(GL_ALPHA16, "GL_ALPHA16");
    _null_.put(GL_CUBIC_MIPMAP_LINEAR_IMG, "GL_CUBIC_MIPMAP_LINEAR_IMG");
    _null_.put(GL_VERTEX_SUBROUTINE, "GL_VERTEX_SUBROUTINE");
    _null_.put(GL_ALPHA12, "GL_ALPHA12");
    _null_.put(GL_INTERNALFORMAT_SHARED_SIZE, "GL_INTERNALFORMAT_SHARED_SIZE");
    _null_.put(GL_GEOMETRY_TEXTURE, "GL_GEOMETRY_TEXTURE");
    _null_.put(GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX, "GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX");
    _null_.put(GL_NEAREST_MIPMAP_NEAREST, "GL_NEAREST_MIPMAP_NEAREST");
    _null_.put(GL_OBJECT_DISTANCE_TO_LINE_SGIS, "GL_OBJECT_DISTANCE_TO_LINE_SGIS");
    _null_.put(GL_COLOR_ATTACHMENT9, "GL_COLOR_ATTACHMENT9");
  }
  private static void _null_13() {
    _null_.put(GL_IMAGE_CLASS_1_X_8, "GL_IMAGE_CLASS_1_X_8");
    _null_.put(GL_TRACE_ARRAYS_BIT_MESA, "GL_TRACE_ARRAYS_BIT_MESA");
    _null_.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    _null_.put(GL_SPOT_DIRECTION, "GL_SPOT_DIRECTION");
    _null_.put(GL_LUMINANCE16_ALPHA16, "GL_LUMINANCE16_ALPHA16");
    _null_.put(GL_LIGHT6, "GL_LIGHT6");
    _null_.put(GL_LIGHT7, "GL_LIGHT7");
    _null_.put(GL_LIGHT4, "GL_LIGHT4");
    _null_.put(GL_BLUE_BITS, "GL_BLUE_BITS");
    _null_.put(GL_LIGHT5, "GL_LIGHT5");
    _null_.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    _null_.put(GL_TEXTURE_2D_STACK_MESAX, "GL_TEXTURE_2D_STACK_MESAX");
    _null_.put(GL_LIGHT2, "GL_LIGHT2");
    _null_.put(GL_LIGHT3, "GL_LIGHT3");
    _null_.put(GL_LIGHT0, "GL_LIGHT0");
    _null_.put(GL_LIGHT1, "GL_LIGHT1");
    _null_.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_RED, "GL_RED");
    _null_.put(GL_CLIP_DISTANCE5_APPLE, "GL_CLIP_DISTANCE5_APPLE");
    _null_.put(GL_CONVOLUTION_WIDTH, "GL_CONVOLUTION_WIDTH");
    _null_.put(GL_BROWSER_DEFAULT_WEBGL, "GL_BROWSER_DEFAULT_WEBGL");
    _null_.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    _null_.put(GL_CONTEXT_LOST_KHR, "GL_CONTEXT_LOST_KHR");
    _null_.put(GL_DUAL_ALPHA12_SGIS, "GL_DUAL_ALPHA12_SGIS");
    _null_.put(GL_DEBUG_OUTPUT_KHR, "GL_DEBUG_OUTPUT_KHR");
    _null_.put(GL_ZERO_TO_ONE, "GL_ZERO_TO_ONE");
    _null_.put(GL_ADD, "GL_ADD");
    _null_.put(GL_DOUBLE, "GL_DOUBLE");
    _null_.put(GL_UNSIGNED_SHORT_8_8_REV_APPLE, "GL_UNSIGNED_SHORT_8_8_REV_APPLE");
    _null_.put(GL_QUERY_WAIT_INVERTED, "GL_QUERY_WAIT_INVERTED");
    _null_.put(GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET");
    _null_.put(GL_PACK_REVERSE_ROW_ORDER_ANGLE, "GL_PACK_REVERSE_ROW_ORDER_ANGLE");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS");
    _null_.put(GL_HSL_COLOR, "GL_HSL_COLOR");
    _null_.put(GL_MINOR_VERSION, "GL_MINOR_VERSION");
    _null_.put(GL_QUERY_BY_REGION_WAIT, "GL_QUERY_BY_REGION_WAIT");
    _null_.put(GL_TEXTURE_BINDING_1D_ARRAY, "GL_TEXTURE_BINDING_1D_ARRAY");
    _null_.put(GL_STENCIL_BUFFER_BIT6_QCOM, "GL_STENCIL_BUFFER_BIT6_QCOM");
    _null_.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    _null_.put(GL_RG8, "GL_RG8");
    _null_.put(GL_SLIM12S_SGIX, "GL_SLIM12S_SGIX");
    _null_.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    _null_.put(GL_RGB, "GL_RGB");
    _null_.put(GL_4PASS_3_SGIS, "GL_4PASS_3_SGIS");
    _null_.put(GL_TRACE_TEXTURES_BIT_MESA, "GL_TRACE_TEXTURES_BIT_MESA");
    _null_.put(GL_MAT_EMISSION_BIT_PGI, "GL_MAT_EMISSION_BIT_PGI");
    _null_.put(GL_VERTEX_ARRAY_BINDING, "GL_VERTEX_ARRAY_BINDING");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE");
    _null_.put(GL_PIXEL_TEX_GEN_Q_CEILING_SGIX, "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX");
    _null_.put(GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS, "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS");
    _null_.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE");
    _null_.put(GL_CLIP_DISTANCE4_APPLE, "GL_CLIP_DISTANCE4_APPLE");
    _null_.put(GL_CONSTANT_ATTENUATION, "GL_CONSTANT_ATTENUATION");
  }
  private static void _null_14() {
    _null_.put(GL_OCCLUSION_TEST_HP, "GL_OCCLUSION_TEST_HP");
    _null_.put(GL_VERTEX_BINDING_STRIDE, "GL_VERTEX_BINDING_STRIDE");
    _null_.put(GL_POST_CONVOLUTION_BLUE_SCALE, "GL_POST_CONVOLUTION_BLUE_SCALE");
    _null_.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE, "GL_MAX_CUBE_MAP_TEXTURE_SIZE");
    _null_.put(GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD, "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD");
    _null_.put(GL_PIXEL_BUFFER_BARRIER_BIT, "GL_PIXEL_BUFFER_BARRIER_BIT");
    _null_.put(GL_DARKEN_KHR, "GL_DARKEN_KHR");
    _null_.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_CURRENT_RASTER_SECONDARY_COLOR, "GL_CURRENT_RASTER_SECONDARY_COLOR");
    _null_.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES");
    _null_.put(GL_T4F_C4F_N3F_V4F, "GL_T4F_C4F_N3F_V4F");
    _null_.put(GL_SRC2_ALPHA, "GL_SRC2_ALPHA");
    _null_.put(GL_RGBA16UI, "GL_RGBA16UI");
    _null_.put(GL_RASTERIZER_DISCARD, "GL_RASTERIZER_DISCARD");
    _null_.put(GL_LUMINANCE_ALPHA_FLOAT16_APPLE, "GL_LUMINANCE_ALPHA_FLOAT16_APPLE");
    _null_.put(GL_MAX_DEBUG_LOGGED_MESSAGES_AMD, "GL_MAX_DEBUG_LOGGED_MESSAGES_AMD");
    _null_.put(GL_SHADER_COMPILER, "GL_SHADER_COMPILER");
    _null_.put(GL_MAX_CLIPMAP_DEPTH_SGIX, "GL_MAX_CLIPMAP_DEPTH_SGIX");
    _null_.put(GL_TEXTURE_4D_BINDING_SGIS, "GL_TEXTURE_4D_BINDING_SGIS");
    _null_.put(GL_TESS_CONTROL_SUBROUTINE, "GL_TESS_CONTROL_SUBROUTINE");
    _null_.put(GL_COMPUTE_SHADER, "GL_COMPUTE_SHADER");
    _null_.put(GL_DEBUG_SEVERITY_MEDIUM_AMD, "GL_DEBUG_SEVERITY_MEDIUM_AMD");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE");
    _null_.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    _null_.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR");
    _null_.put(GL_DEBUG_SEVERITY_HIGH, "GL_DEBUG_SEVERITY_HIGH");
    _null_.put(GL_POLYGON_OFFSET_FACTOR, "GL_POLYGON_OFFSET_FACTOR");
    _null_.put(GL_EYE_POINT_SGIS, "GL_EYE_POINT_SGIS");
    _null_.put(GL_MAX_ASYNC_TEX_IMAGE_SGIX, "GL_MAX_ASYNC_TEX_IMAGE_SGIX");
    _null_.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    _null_.put(GL_KEEP, "GL_KEEP");
    _null_.put(GL_ACTIVE_SUBROUTINE_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_MAX_LENGTH");
    _null_.put(GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG, "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG");
    _null_.put(GL_CONDITION_SATISFIED_APPLE, "GL_CONDITION_SATISFIED_APPLE");
    _null_.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE, "GL_PROXY_TEXTURE_2D_MULTISAMPLE");
    _null_.put(GL_STENCIL_BUFFER_BIT3_QCOM, "GL_STENCIL_BUFFER_BIT3_QCOM");
    _null_.put(GL_TEXTURE_MEMORY_LAYOUT_INTEL, "GL_TEXTURE_MEMORY_LAYOUT_INTEL");
    _null_.put(GL_UNPACK_IMAGE_HEIGHT, "GL_UNPACK_IMAGE_HEIGHT");
    _null_.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR");
    _null_.put(GL_VIRTUAL_PAGE_SIZE_X_AMD, "GL_VIRTUAL_PAGE_SIZE_X_AMD");
    _null_.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    _null_.put(GL_VERTEX_ARRAY_TYPE, "GL_VERTEX_ARRAY_TYPE");
  }
  private static void _null_15() {
    _null_.put(GL_QUERY_RESULT_NO_WAIT_AMD, "GL_QUERY_RESULT_NO_WAIT_AMD");
    _null_.put(GL_INT_SAMPLER_3D, "GL_INT_SAMPLER_3D");
    _null_.put(GL_VERTEX_ID_SWIZZLE_AMD, "GL_VERTEX_ID_SWIZZLE_AMD");
    _null_.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    _null_.put(GL_DUAL_LUMINANCE_ALPHA8_SGIS, "GL_DUAL_LUMINANCE_ALPHA8_SGIS");
    _null_.put(GL_COMPARE_REF_TO_TEXTURE, "GL_COMPARE_REF_TO_TEXTURE");
    _null_.put(GL_INTERLACE_OML, "GL_INTERLACE_OML");
    _null_.put(GL_DEBUG_TYPE_PORTABILITY_KHR, "GL_DEBUG_TYPE_PORTABILITY_KHR");
    _null_.put(GL_MAX_VARYING_FLOATS, "GL_MAX_VARYING_FLOATS");
    _null_.put(GL_LUMINANCE_ALPHA_FLOAT32_APPLE, "GL_LUMINANCE_ALPHA_FLOAT32_APPLE");
    _null_.put(GL_MAX_ELEMENTS_VERTICES, "GL_MAX_ELEMENTS_VERTICES");
    _null_.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
    _null_.put(GL_TRANSFORM_HINT_APPLE, "GL_TRANSFORM_HINT_APPLE");
    _null_.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    _null_.put(GL_INT_SAMPLER_2D, "GL_INT_SAMPLER_2D");
    _null_.put(GL_TESS_EVALUATION_SHADER_INVOCATIONS, "GL_TESS_EVALUATION_SHADER_INVOCATIONS");
    _null_.put(GL_R8UI, "GL_R8UI");
    _null_.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_LINEAR_SHARPEN_ALPHA_SGIS, "GL_LINEAR_SHARPEN_ALPHA_SGIS");
    _null_.put(GL_HINT_BIT, "GL_HINT_BIT");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
    _null_.put(GL_DEBUG_LOGGED_MESSAGES_AMD, "GL_DEBUG_LOGGED_MESSAGES_AMD");
    _null_.put(GL_EYE_DISTANCE_TO_LINE_SGIS, "GL_EYE_DISTANCE_TO_LINE_SGIS");
    _null_.put(GL_SOURCE1_RGB, "GL_SOURCE1_RGB");
    _null_.put(GL_ALPHA_TEST, "GL_ALPHA_TEST");
    _null_.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
    _null_.put(GL_T2F_C4F_N3F_V3F, "GL_T2F_C4F_N3F_V3F");
    _null_.put(GL_DOUBLE_MAT4x2, "GL_DOUBLE_MAT4x2");
    _null_.put(GL_DOUBLE_MAT4x3, "GL_DOUBLE_MAT4x3");
    _null_.put(GL_INTERNALFORMAT_RED_SIZE, "GL_INTERNALFORMAT_RED_SIZE");
    _null_.put(GL_TEXTURE_RED_TYPE, "GL_TEXTURE_RED_TYPE");
    _null_.put(GL_DEBUG_CALLBACK_USER_PARAM, "GL_DEBUG_CALLBACK_USER_PARAM");
    _null_.put(GL_FRAMEZOOM_FACTOR_SGIX, "GL_FRAMEZOOM_FACTOR_SGIX");
    _null_.put(GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM, "GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM");
    _null_.put(GL_MAX_SHADER_COMPILER_THREADS_KHR, "GL_MAX_SHADER_COMPILER_THREADS_KHR");
    _null_.put(GL_DEBUG_TYPE_ERROR_KHR, "GL_DEBUG_TYPE_ERROR_KHR");
    _null_.put(GL_REPLACEMENT_CODE_SUN, "GL_REPLACEMENT_CODE_SUN");
    _null_.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    _null_.put(GL_RENDER, "GL_RENDER");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_LAYERS, "GL_FRAMEBUFFER_DEFAULT_LAYERS");
    _null_.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X, "GL_TEXTURE_CUBE_MAP_POSITIVE_X");
    _null_.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y");
    _null_.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_HEIGHT, "GL_PACK_COMPRESSED_BLOCK_HEIGHT");
  }
  private static void _null_16() {
    _null_.put(GL_FETCH_PER_SAMPLE_ARM, "GL_FETCH_PER_SAMPLE_ARM");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    _null_.put(GL_IMAGE_BINDING_FORMAT, "GL_IMAGE_BINDING_FORMAT");
    _null_.put(GL_COLORBURN, "GL_COLORBURN");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER");
    _null_.put(GL_STORAGE_SHARED_APPLE, "GL_STORAGE_SHARED_APPLE");
    _null_.put(GL_DEPTH_BUFFER_BIT1_QCOM, "GL_DEPTH_BUFFER_BIT1_QCOM");
    _null_.put(GL_VERTEX23_BIT_PGI, "GL_VERTEX23_BIT_PGI");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x6, "GL_COMPRESSED_RGBA_ASTC_6x6");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x5, "GL_COMPRESSED_RGBA_ASTC_6x5");
    _null_.put(GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX");
    _null_.put(GL_SAMPLE_BUFFERS_3DFX, "GL_SAMPLE_BUFFERS_3DFX");
    _null_.put(GL_POINT_FADE_THRESHOLD_SIZE, "GL_POINT_FADE_THRESHOLD_SIZE");
    _null_.put(GL_YCBCR_422_APPLE, "GL_YCBCR_422_APPLE");
    _null_.put(GL_SAMPLER_BUFFER, "GL_SAMPLER_BUFFER");
    _null_.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    _null_.put(GL_DRAW_FRAMEBUFFER_BINDING_ANGLE, "GL_DRAW_FRAMEBUFFER_BINDING_ANGLE");
    _null_.put(GL_CLIENT_ACTIVE_TEXTURE, "GL_CLIENT_ACTIVE_TEXTURE");
    _null_.put(GL_LINES, "GL_LINES");
    _null_.put(GL_SELECT, "GL_SELECT");
    _null_.put(GL_COMPRESSED_ALPHA, "GL_COMPRESSED_ALPHA");
    _null_.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY");
    _null_.put(GL_PERSPECTIVE_CORRECTION_HINT, "GL_PERSPECTIVE_CORRECTION_HINT");
    _null_.put(GL_ALPHA_BITS, "GL_ALPHA_BITS");
    _null_.put(GL_RGBA8_SNORM, "GL_RGBA8_SNORM");
    _null_.put(GL_PROGRAM_BINARY_LENGTH, "GL_PROGRAM_BINARY_LENGTH");
    _null_.put(GL_ONE_MINUS_SRC1_ALPHA, "GL_ONE_MINUS_SRC1_ALPHA");
    _null_.put(GL_INT_SAMPLER_1D, "GL_INT_SAMPLER_1D");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6");
    _null_.put(GL_FRAGMENT_SUBROUTINE_UNIFORM, "GL_FRAGMENT_SUBROUTINE_UNIFORM");
    _null_.put(GL_TEXTURE_COORD_ARRAY_TYPE, "GL_TEXTURE_COORD_ARRAY_TYPE");
    _null_.put(GL_PIXEL_UNPACK_BUFFER, "GL_PIXEL_UNPACK_BUFFER");
    _null_.put(GL_SAMPLER_BUFFER_AMD, "GL_SAMPLER_BUFFER_AMD");
    _null_.put(GL_FOG_MODE, "GL_FOG_MODE");
    _null_.put(GL_LOWER_LEFT, "GL_LOWER_LEFT");
    _null_.put(GL_FORMAT_SUBSAMPLE_24_24_OML, "GL_FORMAT_SUBSAMPLE_24_24_OML");
    _null_.put(GL_IMAGE_PIXEL_TYPE, "GL_IMAGE_PIXEL_TYPE");
    _null_.put(GL_RENDERBUFFER_HEIGHT, "GL_RENDERBUFFER_HEIGHT");
    _null_.put(GL_POLYGON_OFFSET_FILL, "GL_POLYGON_OFFSET_FILL");
    _null_.put(GL_FOG_COORDINATE_ARRAY, "GL_FOG_COORDINATE_ARRAY");
    _null_.put(GL_NORMALIZE, "GL_NORMALIZE");
    _null_.put(GL_FOVEATION_ENABLE_BIT_QCOM, "GL_FOVEATION_ENABLE_BIT_QCOM");
    _null_.put(GL_GEOMETRY_SHADER_INVOCATIONS, "GL_GEOMETRY_SHADER_INVOCATIONS");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR, "GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR");
    _null_.put(GL_DEPTH_RENDERABLE, "GL_DEPTH_RENDERABLE");
    _null_.put(GL_SAMPLER_2D_SHADOW, "GL_SAMPLER_2D_SHADOW");
    _null_.put(GL_PIXEL_MAP_R_TO_R_SIZE, "GL_PIXEL_MAP_R_TO_R_SIZE");
  }
  private static void _null_17() {
    _null_.put(GL_STENCIL_BACK_OP_VALUE_AMD, "GL_STENCIL_BACK_OP_VALUE_AMD");
    _null_.put(GL_RESAMPLE_AVERAGE_OML, "GL_RESAMPLE_AVERAGE_OML");
    _null_.put(GL_ACTIVE_SUBROUTINES, "GL_ACTIVE_SUBROUTINES");
    _null_.put(GL_T2F_C4UB_V3F, "GL_T2F_C4UB_V3F");
    _null_.put(GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE, "GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE");
    _null_.put(GL_RGB565, "GL_RGB565");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_SIZE, "GL_VERTEX_ATTRIB_ARRAY_SIZE");
    _null_.put(GL_VERTEX_ELEMENT_SWIZZLE_AMD, "GL_VERTEX_ELEMENT_SWIZZLE_AMD");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_WIDTH, "GL_UNPACK_COMPRESSED_BLOCK_WIDTH");
    _null_.put(GL_PIXEL_SUBSAMPLE_2424_SGIX, "GL_PIXEL_SUBSAMPLE_2424_SGIX");
    _null_.put(GL_MINMAX_FORMAT, "GL_MINMAX_FORMAT");
    _null_.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS");
    _null_.put(GL_BACK_NORMALS_HINT_PGI, "GL_BACK_NORMALS_HINT_PGI");
    _null_.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    _null_.put(GL_PIXEL_PACK_BUFFER, "GL_PIXEL_PACK_BUFFER");
    _null_.put(GL_INTERNALFORMAT_BLUE_TYPE, "GL_INTERNALFORMAT_BLUE_TYPE");
    _null_.put(GL_SRGB_WRITE, "GL_SRGB_WRITE");
    _null_.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    _null_.put(GL_UNSIGNED_SHORT_5_5_5_1, "GL_UNSIGNED_SHORT_5_5_5_1");
    _null_.put(GL_MAX_FRAMEBUFFER_WIDTH, "GL_MAX_FRAMEBUFFER_WIDTH");
    _null_.put(GL_TIMEOUT_EXPIRED, "GL_TIMEOUT_EXPIRED");
    _null_.put(GL_MAX_ELEMENT_INDEX, "GL_MAX_ELEMENT_INDEX");
    _null_.put(GL_TESS_GEN_SPACING, "GL_TESS_GEN_SPACING");
    _null_.put(GL_TILE_RASTER_ORDER_FIXED_MESA, "GL_TILE_RASTER_ORDER_FIXED_MESA");
    _null_.put(GL_OPERAND0_ALPHA, "GL_OPERAND0_ALPHA");
    _null_.put(GL_3DC_X_AMD, "GL_3DC_X_AMD");
    _null_.put(GL_SYNC_FENCE_APPLE, "GL_SYNC_FENCE_APPLE");
    _null_.put(GL_DUAL_INTENSITY12_SGIS, "GL_DUAL_INTENSITY12_SGIS");
    _null_.put(GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX, "GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX");
    _null_.put(GL_UNSIGNED_NORMALIZED, "GL_UNSIGNED_NORMALIZED");
    _null_.put(GL_COLOR_ATTACHMENT15, "GL_COLOR_ATTACHMENT15");
    _null_.put(GL_RED_MIN_CLAMP_INGR, "GL_RED_MIN_CLAMP_INGR");
    _null_.put(GL_COLOR_ATTACHMENT14, "GL_COLOR_ATTACHMENT14");
    _null_.put(GL_DEPTH_CLAMP_NEAR_AMD, "GL_DEPTH_CLAMP_NEAR_AMD");
    _null_.put(GL_COLOR_ATTACHMENT17, "GL_COLOR_ATTACHMENT17");
    _null_.put(GL_COLOR_ATTACHMENT16, "GL_COLOR_ATTACHMENT16");
    _null_.put(GL_LEQUAL, "GL_LEQUAL");
    _null_.put(GL_VIEW_CLASS_BPTC_UNORM, "GL_VIEW_CLASS_BPTC_UNORM");
    _null_.put(GL_COLOR_ATTACHMENT11, "GL_COLOR_ATTACHMENT11");
    _null_.put(GL_COLOR_ATTACHMENT10, "GL_COLOR_ATTACHMENT10");
    _null_.put(GL_COLOR_ATTACHMENT13, "GL_COLOR_ATTACHMENT13");
    _null_.put(GL_COLOR_ATTACHMENT12, "GL_COLOR_ATTACHMENT12");
    _null_.put(GL_EVAL_BIT, "GL_EVAL_BIT");
    _null_.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM, "GL_DEBUG_SOURCE_WINDOW_SYSTEM");
    _null_.put(GL_TEXTURE_GEQUAL_R_SGIX, "GL_TEXTURE_GEQUAL_R_SGIX");
    _null_.put(GL_GREEN_BITS, "GL_GREEN_BITS");
    _null_.put(GL_ACTIVE_UNIFORMS, "GL_ACTIVE_UNIFORMS");
    _null_.put(GL_DOUBLEBUFFER, "GL_DOUBLEBUFFER");
    _null_.put(GL_RED_BITS, "GL_RED_BITS");
    _null_.put(GL_R16, "GL_R16");
    _null_.put(GL_COLOR_ATTACHMENT26, "GL_COLOR_ATTACHMENT26");
    _null_.put(GL_COLOR_ATTACHMENT25, "GL_COLOR_ATTACHMENT25");
    _null_.put(GL_COLOR_ATTACHMENT28, "GL_COLOR_ATTACHMENT28");
    _null_.put(GL_COLOR_ATTACHMENT27, "GL_COLOR_ATTACHMENT27");
  }
  private static void _null_18() {
    _null_.put(GL_COLOR_ATTACHMENT22, "GL_COLOR_ATTACHMENT22");
    _null_.put(GL_COLOR_ATTACHMENT21, "GL_COLOR_ATTACHMENT21");
    _null_.put(GL_COLOR_ATTACHMENT24, "GL_COLOR_ATTACHMENT24");
    _null_.put(GL_COLOR_ATTACHMENT23, "GL_COLOR_ATTACHMENT23");
    _null_.put(GL_COLOR_ATTACHMENT20, "GL_COLOR_ATTACHMENT20");
    _null_.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER");
    _null_.put(GL_LIGHT_MODEL_AMBIENT, "GL_LIGHT_MODEL_AMBIENT");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX");
    _null_.put(GL_SHADER_IMAGE_STORE, "GL_SHADER_IMAGE_STORE");
    _null_.put(GL_COLOR_ATTACHMENT19, "GL_COLOR_ATTACHMENT19");
    _null_.put(GL_COLOR_ATTACHMENT18, "GL_COLOR_ATTACHMENT18");
    _null_.put(GL_DUAL_ALPHA4_SGIS, "GL_DUAL_ALPHA4_SGIS");
    _null_.put(GL_TEXTURE_DEPTH_TYPE, "GL_TEXTURE_DEPTH_TYPE");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD, "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD");
    _null_.put(GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD");
    _null_.put(GL_TEXTURE_UPDATE_BARRIER_BIT, "GL_TEXTURE_UPDATE_BARRIER_BIT");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST");
    _null_.put(GL_COMPRESSED_RG, "GL_COMPRESSED_RG");
    _null_.put(GL_COLOR_ATTACHMENT31, "GL_COLOR_ATTACHMENT31");
    _null_.put(GL_SHADER_STORAGE_BUFFER_SIZE, "GL_SHADER_STORAGE_BUFFER_SIZE");
    _null_.put(GL_COLOR_ATTACHMENT30, "GL_COLOR_ATTACHMENT30");
    _null_.put(GL_TILE_RASTER_ORDER_INCREASING_X_MESA, "GL_TILE_RASTER_ORDER_INCREASING_X_MESA");
    _null_.put(GL_STENCIL_BUFFER_BIT1_QCOM, "GL_STENCIL_BUFFER_BIT1_QCOM");
    _null_.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
    _null_.put(GL_DEPTH_PASS_INSTRUMENT_SGIX, "GL_DEPTH_PASS_INSTRUMENT_SGIX");
    _null_.put(GL_COLOR_ENCODING, "GL_COLOR_ENCODING");
    _null_.put(GL_GLOBAL_ALPHA_SUN, "GL_GLOBAL_ALPHA_SUN");
    _null_.put(GL_COLOR_ATTACHMENT29, "GL_COLOR_ATTACHMENT29");
    _null_.put(GL_MAX_NAME_STACK_DEPTH, "GL_MAX_NAME_STACK_DEPTH");
    _null_.put(GL_SELECTION_BUFFER_SIZE, "GL_SELECTION_BUFFER_SIZE");
    _null_.put(GL_VERTEX_BINDING_BUFFER, "GL_VERTEX_BINDING_BUFFER");
    _null_.put(GL_TEXTURE_WRAP_R, "GL_TEXTURE_WRAP_R");
    _null_.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    _null_.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    _null_.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    _null_.put(GL_CLEAR_BUFFER, "GL_CLEAR_BUFFER");
    _null_.put(GL_IS_PER_PATCH, "GL_IS_PER_PATCH");
    _null_.put(GL_UNSIGNED_SHORT_8_8_REV_MESA, "GL_UNSIGNED_SHORT_8_8_REV_MESA");
    _null_.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    _null_.put(GL_NO_RESET_NOTIFICATION_KHR, "GL_NO_RESET_NOTIFICATION_KHR");
    _null_.put(GL_COLOR_TABLE_RED_SIZE, "GL_COLOR_TABLE_RED_SIZE");
    _null_.put(GL_VIEWPORT_SUBPIXEL_BITS, "GL_VIEWPORT_SUBPIXEL_BITS");
    _null_.put(GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL, "GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL");
    _null_.put(GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL, "GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL");
    _null_.put(GL_COLOR_MATRIX, "GL_COLOR_MATRIX");
    _null_.put(GL_ALREADY_SIGNALED, "GL_ALREADY_SIGNALED");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX");
    _null_.put(GL_SHADER_BINARY_FORMAT_SPIR_V, "GL_SHADER_BINARY_FORMAT_SPIR_V");
  }
  private static void _null_19() {
    _null_.put(GL_QUERY_BUFFER_BINDING, "GL_QUERY_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    _null_.put(GL_TEXTURE_INTERNAL_FORMAT, "GL_TEXTURE_INTERNAL_FORMAT");
    _null_.put(GL_OBJECT_PLANE, "GL_OBJECT_PLANE");
    _null_.put(GL_MAX_NAME_LENGTH, "GL_MAX_NAME_LENGTH");
    _null_.put(GL_ACTIVE_TEXTURE, "GL_ACTIVE_TEXTURE");
    _null_.put(GL_FOG_COORDINATE_ARRAY_POINTER, "GL_FOG_COORDINATE_ARRAY_POINTER");
    _null_.put(GL_TEXTURE_NUM_LEVELS_QCOM, "GL_TEXTURE_NUM_LEVELS_QCOM");
    _null_.put(GL_TRANSFORM_BIT, "GL_TRANSFORM_BIT");
    _null_.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    _null_.put(GL_UNIFORM, "GL_UNIFORM");
    _null_.put(GL_SCISSOR_BIT, "GL_SCISSOR_BIT");
    _null_.put(GL_FILTER, "GL_FILTER");
    _null_.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    _null_.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    _null_.put(GL_PROXY_TEXTURE_COLOR_TABLE_SGI, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI");
    _null_.put(GL_COPY_INVERTED, "GL_COPY_INVERTED");
    _null_.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    _null_.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    _null_.put(GL_COLOR, "GL_COLOR");
    _null_.put(GL_PACK_COMPRESSED_SIZE_SGIX, "GL_PACK_COMPRESSED_SIZE_SGIX");
    _null_.put(GL_FRAGMENT_INTERPOLATION_OFFSET_BITS, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS");
    _null_.put(GL_RG8_SNORM, "GL_RG8_SNORM");
    _null_.put(GL_PIXEL_MAP_I_TO_R_SIZE, "GL_PIXEL_MAP_I_TO_R_SIZE");
    _null_.put(GL_BUFFER_USAGE, "GL_BUFFER_USAGE");
    _null_.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    _null_.put(GL_GREEN, "GL_GREEN");
    _null_.put(GL_INT_SAMPLER_2D_RECT, "GL_INT_SAMPLER_2D_RECT");
    _null_.put(GL_ALPHA_BIAS, "GL_ALPHA_BIAS");
    _null_.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE, "GL_TEXTURE_BINDING_2D_MULTISAMPLE");
    _null_.put(GL_NUM_COMPRESSED_TEXTURE_FORMATS, "GL_NUM_COMPRESSED_TEXTURE_FORMATS");
    _null_.put(GL_SMOOTH, "GL_SMOOTH");
    _null_.put(GL_LINE_LOOP, "GL_LINE_LOOP");
    _null_.put(GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI");
    _null_.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER");
    _null_.put(GL_TIMEOUT_EXPIRED_APPLE, "GL_TIMEOUT_EXPIRED_APPLE");
    _null_.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
    _null_.put(GL_PROGRAM_KHR, "GL_PROGRAM_KHR");
    _null_.put(GL_TRIANGLE_FAN, "GL_TRIANGLE_FAN");
    _null_.put(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH");
    _null_.put(GL_HSL_COLOR_KHR, "GL_HSL_COLOR_KHR");
    _null_.put(GL_RENDERBUFFER_DEPTH_SIZE, "GL_RENDERBUFFER_DEPTH_SIZE");
    _null_.put(GL_VIEW_COMPATIBILITY_CLASS, "GL_VIEW_COMPATIBILITY_CLASS");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
    _null_.put(GL_IMAGE_CLASS_2_X_16, "GL_IMAGE_CLASS_2_X_16");
    _null_.put(GL_BOOL_VEC4, "GL_BOOL_VEC4");
    _null_.put(GL_BOOL_VEC3, "GL_BOOL_VEC3");
    _null_.put(GL_BOOL_VEC2, "GL_BOOL_VEC2");
    _null_.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
  }
  private static void _null_20() {
    _null_.put(GL_COLOR_TABLE_ALPHA_SIZE_SGI, "GL_COLOR_TABLE_ALPHA_SIZE_SGI");
    _null_.put(GL_BUFFER_KHR, "GL_BUFFER_KHR");
    _null_.put(GL_DECR_WRAP, "GL_DECR_WRAP");
    _null_.put(GL_BUFFER_STORAGE_FLAGS, "GL_BUFFER_STORAGE_FLAGS");
    _null_.put(GL_SHADER_TYPE, "GL_SHADER_TYPE");
    _null_.put(GL_VERTEX_ARRAY_LIST_STRIDE_IBM, "GL_VERTEX_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_OBJECT_LINEAR, "GL_OBJECT_LINEAR");
    _null_.put(GL_R1UI_T2F_N3F_V3F_SUN, "GL_R1UI_T2F_N3F_V3F_SUN");
    _null_.put(GL_ACTIVE_ATTRIBUTES, "GL_ACTIVE_ATTRIBUTES");
    _null_.put(GL_MAX_TEXTURE_IMAGE_UNITS, "GL_MAX_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_ANY_SAMPLES_PASSED_CONSERVATIVE, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE");
    _null_.put(GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX, "GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX");
    _null_.put(GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX");
    _null_.put(GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE, "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE");
    _null_.put(GL_GEOMETRY_OUTPUT_TYPE, "GL_GEOMETRY_OUTPUT_TYPE");
    _null_.put(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS, "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS");
    _null_.put(GL_RECLAIM_MEMORY_HINT_PGI, "GL_RECLAIM_MEMORY_HINT_PGI");
    _null_.put(GL_UNSIGNED_SHORT_15_1_MESA, "GL_UNSIGNED_SHORT_15_1_MESA");
    _null_.put(GL_IMAGE_CLASS_2_X_32, "GL_IMAGE_CLASS_2_X_32");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG");
    _null_.put(GL_GET_TEXTURE_IMAGE_TYPE, "GL_GET_TEXTURE_IMAGE_TYPE");
    _null_.put(GL_INT_VEC4, "GL_INT_VEC4");
    _null_.put(GL_INT_VEC2, "GL_INT_VEC2");
    _null_.put(GL_BUFFER_ACCESS_FLAGS, "GL_BUFFER_ACCESS_FLAGS");
    _null_.put(GL_INT_VEC3, "GL_INT_VEC3");
    _null_.put(GL_MAX_FRAGMENT_ATOMIC_COUNTERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTERS");
    _null_.put(GL_WAIT_FAILED_APPLE, "GL_WAIT_FAILED_APPLE");
    _null_.put(GL_LINE_QUALITY_HINT_SGIX, "GL_LINE_QUALITY_HINT_SGIX");
    _null_.put(GL_MAX_SAMPLES_APPLE, "GL_MAX_SAMPLES_APPLE");
    _null_.put(GL_RGB16UI, "GL_RGB16UI");
    _null_.put(GL_SAMPLER_2D_RECT_SHADOW, "GL_SAMPLER_2D_RECT_SHADOW");
    _null_.put(GL_LUMINANCE8_ALPHA8, "GL_LUMINANCE8_ALPHA8");
    _null_.put(GL_UNSIGNED_BYTE_3_3_2, "GL_UNSIGNED_BYTE_3_3_2");
    _null_.put(GL_IMAGE_CLASS_11_11_10, "GL_IMAGE_CLASS_11_11_10");
    _null_.put(GL_CURRENT_INDEX, "GL_CURRENT_INDEX");
    _null_.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    _null_.put(GL_PIXEL_MAP_S_TO_S_SIZE, "GL_PIXEL_MAP_S_TO_S_SIZE");
    _null_.put(GL_OBJECT_TYPE, "GL_OBJECT_TYPE");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR");
    _null_.put(GL_CONTEXT_CORE_PROFILE_BIT, "GL_CONTEXT_CORE_PROFILE_BIT");
    _null_.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    _null_.put(GL_MAP_COLOR, "GL_MAP_COLOR");
    _null_.put(GL_ARRAY_SIZE, "GL_ARRAY_SIZE");
    _null_.put(GL_INTERNALFORMAT_DEPTH_TYPE, "GL_INTERNALFORMAT_DEPTH_TYPE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR");
    _null_.put(GL_STENCIL_FAIL, "GL_STENCIL_FAIL");
    _null_.put(GL_GUILTY_CONTEXT_RESET, "GL_GUILTY_CONTEXT_RESET");
    _null_.put(GL_DEBUG_PRINT_MESA, "GL_DEBUG_PRINT_MESA");
    _null_.put(GL_DEBUG_TYPE_POP_GROUP_KHR, "GL_DEBUG_TYPE_POP_GROUP_KHR");
  }
  private static void _null_21() {
    _null_.put(GL_TESSELLATION_MODE_AMD, "GL_TESSELLATION_MODE_AMD");
    _null_.put(GL_AVERAGE_HP, "GL_AVERAGE_HP");
    _null_.put(GL_FLOAT16_MAT4_AMD, "GL_FLOAT16_MAT4_AMD");
    _null_.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    _null_.put(GL_MAP2_GRID_DOMAIN, "GL_MAP2_GRID_DOMAIN");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR");
    _null_.put(GL_INTENSITY_FLOAT32_APPLE, "GL_INTENSITY_FLOAT32_APPLE");
    _null_.put(GL_ROBUST_GPU_TIMEOUT_MS_KHR, "GL_ROBUST_GPU_TIMEOUT_MS_KHR");
    _null_.put(GL_MAX_IMAGE_SAMPLES, "GL_MAX_IMAGE_SAMPLES");
    _null_.put(GL_COMBINE_ALPHA, "GL_COMBINE_ALPHA");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x8_KHR, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR");
    _null_.put(GL_VIEW_CLASS_32_BITS, "GL_VIEW_CLASS_32_BITS");
    _null_.put(GL_COLOR_BUFFER_BIT3_QCOM, "GL_COLOR_BUFFER_BIT3_QCOM");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_SUN, "GL_REPLACEMENT_CODE_ARRAY_SUN");
    _null_.put(GL_COMPUTE_SUBROUTINE_UNIFORM, "GL_COMPUTE_SUBROUTINE_UNIFORM");
    _null_.put(GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS, "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE");
    _null_.put(GL_UNSIGNED_INT_VEC4, "GL_UNSIGNED_INT_VEC4");
    _null_.put(GL_C4UB_V2F, "GL_C4UB_V2F");
    _null_.put(GL_FRAMEBUFFER_COMPLETE, "GL_FRAMEBUFFER_COMPLETE");
    _null_.put(GL_DEBUG_SOURCE_OTHER, "GL_DEBUG_SOURCE_OTHER");
    _null_.put(GL_ALIASED_LINE_WIDTH_RANGE, "GL_ALIASED_LINE_WIDTH_RANGE");
    _null_.put(GL_NUM_SHADER_BINARY_FORMATS, "GL_NUM_SHADER_BINARY_FORMATS");
    _null_.put(GL_ISOLINES, "GL_ISOLINES");
    _null_.put(GL_DEBUG_CATEGORY_APPLICATION_AMD, "GL_DEBUG_CATEGORY_APPLICATION_AMD");
    _null_.put(GL_STACK_OVERFLOW_KHR, "GL_STACK_OVERFLOW_KHR");
    _null_.put(GL_DARKEN, "GL_DARKEN");
    _null_.put(GL_UNSIGNED_INT_VEC3, "GL_UNSIGNED_INT_VEC3");
    _null_.put(GL_UNSIGNED_INT_VEC2, "GL_UNSIGNED_INT_VEC2");
    _null_.put(GL_FRAGMENT_SHADER_DERIVATIVE_HINT, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER");
    _null_.put(GL_HISTOGRAM_FORMAT, "GL_HISTOGRAM_FORMAT");
    _null_.put(GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL, "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    _null_.put(GL_DOWNSAMPLE_SCALES_IMG, "GL_DOWNSAMPLE_SCALES_IMG");
    _null_.put(GL_PROXY_TEXTURE_1D_STACK_MESAX, "GL_PROXY_TEXTURE_1D_STACK_MESAX");
    _null_.put(GL_STENCIL_PASS_DEPTH_PASS, "GL_STENCIL_PASS_DEPTH_PASS");
    _null_.put(GL_QUERY_COUNTER_BITS, "GL_QUERY_COUNTER_BITS");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT1_RGBA, "GL_VIEW_CLASS_S3TC_DXT1_RGBA");
    _null_.put(GL_FEEDBACK, "GL_FEEDBACK");
    _null_.put(GL_EXTERNAL_STORAGE_BIT_NVX, "GL_EXTERNAL_STORAGE_BIT_NVX");
    _null_.put(GL_MAX_SERVER_WAIT_TIMEOUT, "GL_MAX_SERVER_WAIT_TIMEOUT");
    _null_.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS");
    _null_.put(GL_PIXEL_MAP_I_TO_A_SIZE, "GL_PIXEL_MAP_I_TO_A_SIZE");
    _null_.put(GL_LUMINANCE8, "GL_LUMINANCE8");
  }
  private static void _null_22() {
    _null_.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
    _null_.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    _null_.put(GL_LUMINANCE4, "GL_LUMINANCE4");
    _null_.put(GL_AUX_BUFFERS, "GL_AUX_BUFFERS");
    _null_.put(GL_LUMINANCE_ALPHA, "GL_LUMINANCE_ALPHA");
    _null_.put(GL_XOR, "GL_XOR");
    _null_.put(GL_FENCE_APPLE, "GL_FENCE_APPLE");
    _null_.put(GL_BUFFER, "GL_BUFFER");
    _null_.put(GL_COPY, "GL_COPY");
    _null_.put(GL_SLIM10U_SGIX, "GL_SLIM10U_SGIX");
    _null_.put(GL_SAMPLER_2D_MULTISAMPLE, "GL_SAMPLER_2D_MULTISAMPLE");
    _null_.put(GL_C4UB_V3F, "GL_C4UB_V3F");
    _null_.put(GL_RGBA_S3TC, "GL_RGBA_S3TC");
    _null_.put(GL_TRIANGLE_STRIP_ADJACENCY, "GL_TRIANGLE_STRIP_ADJACENCY");
    _null_.put(GL_COMPRESSED_RGBA8_ETC2_EAC, "GL_COMPRESSED_RGBA8_ETC2_EAC");
    _null_.put(GL_MAX_VIEWS_OVR, "GL_MAX_VIEWS_OVR");
    _null_.put(GL_PIXEL_TEX_GEN_Q_ROUND_SGIX, "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    _null_.put(GL_PASS_THROUGH_TOKEN, "GL_PASS_THROUGH_TOKEN");
    _null_.put(GL_TEXTURE_BASE_LEVEL_SGIS, "GL_TEXTURE_BASE_LEVEL_SGIS");
    _null_.put(GL_SHADER, "GL_SHADER");
    _null_.put(GL_SOFTLIGHT, "GL_SOFTLIGHT");
    _null_.put(GL_PROGRAM, "GL_PROGRAM");
    _null_.put(GL_IMAGE_ROTATE_ORIGIN_Y_HP, "GL_IMAGE_ROTATE_ORIGIN_Y_HP");
    _null_.put(GL_NOOP, "GL_NOOP");
    _null_.put(GL_RGBA_SNORM, "GL_RGBA_SNORM");
    _null_.put(GL_UNPACK_ROW_LENGTH, "GL_UNPACK_ROW_LENGTH");
    _null_.put(GL_LINE_STIPPLE, "GL_LINE_STIPPLE");
    _null_.put(GL_TRACE_PRIMITIVES_BIT_MESA, "GL_TRACE_PRIMITIVES_BIT_MESA");
    _null_.put(GL_R8_SNORM, "GL_R8_SNORM");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX");
    _null_.put(GL_MAX_VERTEX_ATOMIC_COUNTERS, "GL_MAX_VERTEX_ATOMIC_COUNTERS");
    _null_.put(GL_OUT_OF_MEMORY, "GL_OUT_OF_MEMORY");
    _null_.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI");
    _null_.put(GL_CONSTANT_BORDER, "GL_CONSTANT_BORDER");
    _null_.put(GL_DEPTH_BUFFER_BIT6_QCOM, "GL_DEPTH_BUFFER_BIT6_QCOM");
    _null_.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    _null_.put(GL_UNSIGNED_INT_2_10_10_10_REV, "GL_UNSIGNED_INT_2_10_10_10_REV");
    _null_.put(GL_DOUBLE_MAT3x4, "GL_DOUBLE_MAT3x4");
    _null_.put(GL_DOUBLE_MAT3x2, "GL_DOUBLE_MAT3x2");
    _null_.put(GL_NONE, "GL_NONE");
    _null_.put(GL_TYPE, "GL_TYPE");
    _null_.put(GL_SIGNALED, "GL_SIGNALED");
    _null_.put(GL_DRAW_FRAMEBUFFER_ANGLE, "GL_DRAW_FRAMEBUFFER_ANGLE");
    _null_.put(GL_MINMAX, "GL_MINMAX");
    _null_.put(GL_MAX_FRAGMENT_IMAGE_UNIFORMS, "GL_MAX_FRAGMENT_IMAGE_UNIFORMS");
    _null_.put(GL_UNSIGNED_INT_8_8_8_8, "GL_UNSIGNED_INT_8_8_8_8");
    _null_.put(GL_TEXTURE_IMAGE_VALID_QCOM, "GL_TEXTURE_IMAGE_VALID_QCOM");
    _null_.put(GL_ALPHA, "GL_ALPHA");
    _null_.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_UNSIGNED_INT_8_8_8_8_REV, "GL_UNSIGNED_INT_8_8_8_8_REV");
    _null_.put(GL_DONT_CARE, "GL_DONT_CARE");
    _null_.put(GL_DUAL_LUMINANCE16_SGIS, "GL_DUAL_LUMINANCE16_SGIS");
    _null_.put(GL_EYE_LINE_SGIS, "GL_EYE_LINE_SGIS");
    _null_.put(GL_TEXTURE_COMPRESSED_BLOCK_SIZE, "GL_TEXTURE_COMPRESSED_BLOCK_SIZE");
    _null_.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    _null_.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    _null_.put(GL_COLOR4_BIT_PGI, "GL_COLOR4_BIT_PGI");
    _null_.put(GL_R1UI_C3F_V3F_SUN, "GL_R1UI_C3F_V3F_SUN");
  }
  private static void _null_23() {
    _null_.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE");
    _null_.put(GL_COLORDODGE_KHR, "GL_COLORDODGE_KHR");
    _null_.put(GL_MAX_RECTANGLE_TEXTURE_SIZE, "GL_MAX_RECTANGLE_TEXTURE_SIZE");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x5, "GL_COMPRESSED_RGBA_ASTC_5x5");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x4, "GL_COMPRESSED_RGBA_ASTC_5x4");
    _null_.put(GL_POINT_TOKEN, "GL_POINT_TOKEN");
    _null_.put(GL_INDEX_ARRAY_LIST_STRIDE_IBM, "GL_INDEX_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x5_KHR, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR");
    _null_.put(GL_DEPTH_WRITEMASK, "GL_DEPTH_WRITEMASK");
    _null_.put(GL_COMBINE_RGB, "GL_COMBINE_RGB");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
    _null_.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
    _null_.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    _null_.put(GL_POST_CONVOLUTION_GREEN_BIAS, "GL_POST_CONVOLUTION_GREEN_BIAS");
    _null_.put(GL_PROJECTION_STACK_DEPTH, "GL_PROJECTION_STACK_DEPTH");
    _null_.put(GL_UNPACK_SKIP_ROWS, "GL_UNPACK_SKIP_ROWS");
    _null_.put(GL_STENCIL_INDEX4, "GL_STENCIL_INDEX4");
    _null_.put(GL_PERFORMANCE_MONITOR_AMD, "GL_PERFORMANCE_MONITOR_AMD");
    _null_.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    _null_.put(GL_STENCIL_INDEX1, "GL_STENCIL_INDEX1");
    _null_.put(GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL, "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_GEOMETRY_SUBROUTINE_UNIFORM, "GL_GEOMETRY_SUBROUTINE_UNIFORM");
    _null_.put(GL_RENDERER, "GL_RENDERER");
    _null_.put(GL_UNIFORM_OFFSET, "GL_UNIFORM_OFFSET");
    _null_.put(GL_TESS_GEN_POINT_MODE, "GL_TESS_GEN_POINT_MODE");
    _null_.put(GL_DEBUG_TYPE_PERFORMANCE, "GL_DEBUG_TYPE_PERFORMANCE");
    _null_.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    _null_.put(GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED");
    _null_.put(GL_INT_SAMPLER_BUFFER, "GL_INT_SAMPLER_BUFFER");
    _null_.put(GL_COMPRESSED_RG_RGTC2, "GL_COMPRESSED_RG_RGTC2");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT2_QCOM, "GL_MULTISAMPLE_BUFFER_BIT2_QCOM");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_BUFFERS, "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS");
    _null_.put(GL_STENCIL_INDEX8, "GL_STENCIL_INDEX8");
    _null_.put(GL_ALWAYS_SOFT_HINT_PGI, "GL_ALWAYS_SOFT_HINT_PGI");
    _null_.put(GL_REPLICATE_BORDER_HP, "GL_REPLICATE_BORDER_HP");
    _null_.put(GL_COLOR_BUFFER_BIT4_QCOM, "GL_COLOR_BUFFER_BIT4_QCOM");
    _null_.put(GL_TEXTURE_RANGE_POINTER_APPLE, "GL_TEXTURE_RANGE_POINTER_APPLE");
    _null_.put(GL_MAX_PIXEL_MAP_TABLE, "GL_MAX_PIXEL_MAP_TABLE");
    _null_.put(GL_STEREO, "GL_STEREO");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE");
    _null_.put(GL_STATIC_DRAW, "GL_STATIC_DRAW");
    _null_.put(GL_CLIP_PLANE4_IMG, "GL_CLIP_PLANE4_IMG");
    _null_.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY");
    _null_.put(GL_COPY_READ_BUFFER_BINDING, "GL_COPY_READ_BUFFER_BINDING");
    _null_.put(GL_POINTS, "GL_POINTS");
    _null_.put(GL_LIGHTING, "GL_LIGHTING");
    _null_.put(GL_DOT3_RGBA_IMG, "GL_DOT3_RGBA_IMG");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x5_KHR, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_BUFFER, "GL_UNSIGNED_INT_SAMPLER_BUFFER");
    _null_.put(GL_FACTOR_ALPHA_MODULATE_IMG, "GL_FACTOR_ALPHA_MODULATE_IMG");
    _null_.put(GL_UNPACK_SWAP_BYTES, "GL_UNPACK_SWAP_BYTES");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE");
    _null_.put(GL_SYNC_FLUSH_COMMANDS_BIT, "GL_SYNC_FLUSH_COMMANDS_BIT");
    _null_.put(GL_STENCIL_BUFFER_BIT7_QCOM, "GL_STENCIL_BUFFER_BIT7_QCOM");
    _null_.put(GL_RGB_SNORM, "GL_RGB_SNORM");
  }
  private static void _null_24() {
    _null_.put(GL_STORAGE_CACHED_APPLE, "GL_STORAGE_CACHED_APPLE");
    _null_.put(GL_UNSIGNED_INT_ATOMIC_COUNTER, "GL_UNSIGNED_INT_ATOMIC_COUNTER");
    _null_.put(GL_VERTEX_PROGRAM_TWO_SIDE, "GL_VERTEX_PROGRAM_TWO_SIDE");
    _null_.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS");
    _null_.put(GL_INT_SAMPLER_BUFFER_AMD, "GL_INT_SAMPLER_BUFFER_AMD");
    _null_.put(GL_MAX_VERTEX_UNIFORM_COMPONENTS, "GL_MAX_VERTEX_UNIFORM_COMPONENTS");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE, "GL_VERTEX_ATTRIB_ARRAY_STRIDE");
    _null_.put(GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL, "GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL");
    _null_.put(GL_SLUMINANCE, "GL_SLUMINANCE");
    _null_.put(GL_LOCATION_INDEX, "GL_LOCATION_INDEX");
    _null_.put(GL_DEBUG_CATEGORY_DEPRECATION_AMD, "GL_DEBUG_CATEGORY_DEPRECATION_AMD");
    _null_.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    _null_.put(GL_SRC0_RGB, "GL_SRC0_RGB");
    _null_.put(GL_MAX_CONVOLUTION_HEIGHT, "GL_MAX_CONVOLUTION_HEIGHT");
    _null_.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
    _null_.put(GL_ALL_STATIC_DATA_IBM, "GL_ALL_STATIC_DATA_IBM");
    _null_.put(GL_HISTOGRAM_WIDTH, "GL_HISTOGRAM_WIDTH");
    _null_.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    _null_.put(GL_ACCUM_ALPHA_BITS, "GL_ACCUM_ALPHA_BITS");
    _null_.put(GL_PERFQUERY_COUNTER_RAW_INTEL, "GL_PERFQUERY_COUNTER_RAW_INTEL");
    _null_.put(GL_MAX_CLIP_PLANES, "GL_MAX_CLIP_PLANES");
    _null_.put(GL_PHONG_HINT_WIN, "GL_PHONG_HINT_WIN");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM, "GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM");
    _null_.put(GL_GEOMETRY_VERTICES_OUT, "GL_GEOMETRY_VERTICES_OUT");
    _null_.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS");
    _null_.put(GL_LAYOUT_LINEAR_CPU_CACHED_INTEL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL");
    _null_.put(GL_BLUE, "GL_BLUE");
    _null_.put(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE");
    _null_.put(GL_FRAMEBUFFER_UNSUPPORTED, "GL_FRAMEBUFFER_UNSUPPORTED");
    _null_.put(GL_CURRENT_RASTER_POSITION, "GL_CURRENT_RASTER_POSITION");
    _null_.put(GL_LINE_TOKEN, "GL_LINE_TOKEN");
    _null_.put(GL_PATCHES, "GL_PATCHES");
    _null_.put(GL_UNIFORM_BLOCK_NAME_LENGTH, "GL_UNIFORM_BLOCK_NAME_LENGTH");
    _null_.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    _null_.put(GL_HSL_HUE_KHR, "GL_HSL_HUE_KHR");
    _null_.put(GL_VERTEX_BINDING_OFFSET, "GL_VERTEX_BINDING_OFFSET");
    _null_.put(GL_OPERAND2_ALPHA, "GL_OPERAND2_ALPHA");
    _null_.put(GL_BUFFER_MAP_LENGTH, "GL_BUFFER_MAP_LENGTH");
    _null_.put(GL_SAMPLES, "GL_SAMPLES");
    _null_.put(GL_SAMPLER, "GL_SAMPLER");
    _null_.put(GL_INT_2_10_10_10_REV, "GL_INT_2_10_10_10_REV");
    _null_.put(GL_T2F_C3F_V3F, "GL_T2F_C3F_V3F");
    _null_.put(GL_DMP_PROGRAM_BINARY_DMP, "GL_DMP_PROGRAM_BINARY_DMP");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12");
    _null_.put(GL_TEXTURE_FILTER_CONTROL, "GL_TEXTURE_FILTER_CONTROL");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10");
    _null_.put(GL_TILE_RASTER_ORDER_INCREASING_Y_MESA, "GL_TILE_RASTER_ORDER_INCREASING_Y_MESA");
    _null_.put(GL_NORMAL_ARRAY_STRIDE, "GL_NORMAL_ARRAY_STRIDE");
    _null_.put(GL_DEBUG_TYPE_PERFORMANCE_KHR, "GL_DEBUG_TYPE_PERFORMANCE_KHR");
    _null_.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    _null_.put(GL_VERTEX_ARRAY_OBJECT_AMD, "GL_VERTEX_ARRAY_OBJECT_AMD");
    _null_.put(GL_ALPHA4, "GL_ALPHA4");
  }
  private static void _null_25() {
    _null_.put(GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS, "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS");
    _null_.put(GL_ALPHA8, "GL_ALPHA8");
    _null_.put(GL_EDGE_FLAG_ARRAY_POINTER, "GL_EDGE_FLAG_ARRAY_POINTER");
    _null_.put(GL_PIXEL_MAP_B_TO_B_SIZE, "GL_PIXEL_MAP_B_TO_B_SIZE");
    _null_.put(GL_RENDERBUFFER_GREEN_SIZE, "GL_RENDERBUFFER_GREEN_SIZE");
    _null_.put(GL_VIEW_CLASS_RGTC2_RG, "GL_VIEW_CLASS_RGTC2_RG");
    _null_.put(GL_FOG_COLOR, "GL_FOG_COLOR");
    _null_.put(GL_MAX_DEFORMATION_ORDER_SGIX, "GL_MAX_DEFORMATION_ORDER_SGIX");
    _null_.put(GL_LINE, "GL_LINE");
    _null_.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    _null_.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    _null_.put(GL_PRIMITIVES_SUBMITTED, "GL_PRIMITIVES_SUBMITTED");
    _null_.put(GL_IMAGE_COMPATIBILITY_CLASS, "GL_IMAGE_COMPATIBILITY_CLASS");
    _null_.put(GL_MANUAL_GENERATE_MIPMAP, "GL_MANUAL_GENERATE_MIPMAP");
    _null_.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
    _null_.put(GL_QUERY_NO_WAIT_INVERTED, "GL_QUERY_NO_WAIT_INVERTED");
    _null_.put(GL_FLOAT16_MAT4x2_AMD, "GL_FLOAT16_MAT4x2_AMD");
    _null_.put(GL_STENCIL_INDEX, "GL_STENCIL_INDEX");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    _null_.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    _null_.put(GL_UNSIGNED_SHORT_4_4_4_4_REV, "GL_UNSIGNED_SHORT_4_4_4_4_REV");
    _null_.put(GL_TESS_EVALUATION_SUBROUTINE_UNIFORM, "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM");
    _null_.put(GL_TEXTURE_BUFFER_SIZE, "GL_TEXTURE_BUFFER_SIZE");
    _null_.put(GL_RG_INTEGER, "GL_RG_INTEGER");
    _null_.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING");
    _null_.put(GL_COPY_PIXEL_TOKEN, "GL_COPY_PIXEL_TOKEN");
    _null_.put(GL_PROXY_TEXTURE_RECTANGLE, "GL_PROXY_TEXTURE_RECTANGLE");
    _null_.put(GL_RGBA4_DXT5_S3TC, "GL_RGBA4_DXT5_S3TC");
    _null_.put(GL_COLOR_MATERIAL, "GL_COLOR_MATERIAL");
    _null_.put(GL_CURRENT_BIT, "GL_CURRENT_BIT");
    _null_.put(GL_COEFF, "GL_COEFF");
    _null_.put(GL_MAX_DEPTH, "GL_MAX_DEPTH");
    _null_.put(GL_DEBUG_SEVERITY_LOW, "GL_DEBUG_SEVERITY_LOW");
    _null_.put(GL_COLOR_TABLE_GREEN_SIZE_SGI, "GL_COLOR_TABLE_GREEN_SIZE_SGI");
    _null_.put(GL_VERTICES_SUBMITTED, "GL_VERTICES_SUBMITTED");
    _null_.put(GL_FRAGMENT_SHADER, "GL_FRAGMENT_SHADER");
    _null_.put(GL_QUERY_BY_REGION_NO_WAIT_INVERTED, "GL_QUERY_BY_REGION_NO_WAIT_INVERTED");
    _null_.put(GL_CULL_FACE, "GL_CULL_FACE");
    _null_.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    _null_.put(GL_VIEWPORT, "GL_VIEWPORT");
    _null_.put(GL_FACTOR_MAX_AMD, "GL_FACTOR_MAX_AMD");
    _null_.put(GL_SOURCE0_ALPHA, "GL_SOURCE0_ALPHA");
    _null_.put(GL_ALLOW_DRAW_WIN_HINT_PGI, "GL_ALLOW_DRAW_WIN_HINT_PGI");
  }
  private static void _null_26() {
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE, "GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE");
    _null_.put(GL_MAX_FRAMEBUFFER_LAYERS, "GL_MAX_FRAMEBUFFER_LAYERS");
    _null_.put(GL_DEBUG_SOURCE_APPLICATION, "GL_DEBUG_SOURCE_APPLICATION");
    _null_.put(GL_PROGRAM_PIPELINE_KHR, "GL_PROGRAM_PIPELINE_KHR");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
    _null_.put(GL_MAX_VERTEX_UNIFORM_BLOCKS, "GL_MAX_VERTEX_UNIFORM_BLOCKS");
    _null_.put(GL_NUM_SPIR_V_EXTENSIONS, "GL_NUM_SPIR_V_EXTENSIONS");
    _null_.put(GL_SRGB8, "GL_SRGB8");
    _null_.put(GL_VIEWPORT_BIT, "GL_VIEWPORT_BIT");
    _null_.put(GL_PACK_SKIP_PIXELS, "GL_PACK_SKIP_PIXELS");
    _null_.put(GL_COLOR_TABLE_WIDTH_SGI, "GL_COLOR_TABLE_WIDTH_SGI");
    _null_.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR");
    _null_.put(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING");
    _null_.put(GL_SOURCE2_ALPHA, "GL_SOURCE2_ALPHA");
    _null_.put(GL_DOMAIN, "GL_DOMAIN");
    _null_.put(GL_SCREEN_COORDINATES_REND, "GL_SCREEN_COORDINATES_REND");
    _null_.put(GL_RGB_INTEGER, "GL_RGB_INTEGER");
    _null_.put(GL_TEXTURE_IMAGE_TYPE, "GL_TEXTURE_IMAGE_TYPE");
    _null_.put(GL_FOG_COORD_ARRAY_POINTER, "GL_FOG_COORD_ARRAY_POINTER");
    _null_.put(GL_DEPTH_BUFFER_BIT, "GL_DEPTH_BUFFER_BIT");
    _null_.put(GL_FRAMEBUFFER_DEFAULT, "GL_FRAMEBUFFER_DEFAULT");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5");
    _null_.put(GL_R16F, "GL_R16F");
    _null_.put(GL_QUAD_ALPHA8_SGIS, "GL_QUAD_ALPHA8_SGIS");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4");
    _null_.put(GL_R16I, "GL_R16I");
    _null_.put(GL_C3F_V3F, "GL_C3F_V3F");
    _null_.put(GL_PROXY_TEXTURE_4D_SGIS, "GL_PROXY_TEXTURE_4D_SGIS");
    _null_.put(GL_SPRITE_AXIAL_SGIX, "GL_SPRITE_AXIAL_SGIX");
    _null_.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    _null_.put(GL_COMPRESSED_SRGB8_ETC2, "GL_COMPRESSED_SRGB8_ETC2");
    _null_.put(GL_SHADER_STORAGE_BUFFER_START, "GL_SHADER_STORAGE_BUFFER_START");
    _null_.put(GL_FEEDBACK_BUFFER_TYPE, "GL_FEEDBACK_BUFFER_TYPE");
    _null_.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    _null_.put(GL_LINEAR_CLIPMAP_NEAREST_SGIX, "GL_LINEAR_CLIPMAP_NEAREST_SGIX");
    _null_.put(GL_2PASS_0_SGIS, "GL_2PASS_0_SGIS");
    _null_.put(GL_INTERNALFORMAT_ALPHA_SIZE, "GL_INTERNALFORMAT_ALPHA_SIZE");
    _null_.put(GL_CONSTANT, "GL_CONSTANT");
    _null_.put(GL_VERTEX_CONSISTENT_HINT_PGI, "GL_VERTEX_CONSISTENT_HINT_PGI");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_LIST_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_IBM");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_1D_ARRAY, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY");
    _null_.put(GL_TEXTURE_MAX_LEVEL_SGIS, "GL_TEXTURE_MAX_LEVEL_SGIS");
    _null_.put(GL_SAMPLES_3DFX, "GL_SAMPLES_3DFX");
    _null_.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    _null_.put(GL_IMAGE_CLASS_2_X_8, "GL_IMAGE_CLASS_2_X_8");
  }
  private static void _null_27() {
    _null_.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH");
    _null_.put(GL_RETURN, "GL_RETURN");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS");
    _null_.put(GL_TEXTURE_ALPHA_SIZE, "GL_TEXTURE_ALPHA_SIZE");
    _null_.put(GL_IMAGE_TEXEL_SIZE, "GL_IMAGE_TEXEL_SIZE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING");
    _null_.put(GL_DOT3_RGB, "GL_DOT3_RGB");
    _null_.put(GL_VERTEX_ATTRIB_BINDING, "GL_VERTEX_ATTRIB_BINDING");
    _null_.put(GL_TRANSPOSE_COLOR_MATRIX, "GL_TRANSPOSE_COLOR_MATRIX");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE");
    _null_.put(GL_FRAGMENTS_INSTRUMENT_MAX_SGIX, "GL_FRAGMENTS_INSTRUMENT_MAX_SGIX");
    _null_.put(GL_MAX_SUBROUTINES, "GL_MAX_SUBROUTINES");
    _null_.put(GL_STENCIL_RENDERABLE, "GL_STENCIL_RENDERABLE");
    _null_.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    _null_.put(GL_POINT_SIZE, "GL_POINT_SIZE");
    _null_.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_STENCIL_CLEAR_VALUE, "GL_STENCIL_CLEAR_VALUE");
    _null_.put(GL_R1UI_T2F_V3F_SUN, "GL_R1UI_T2F_V3F_SUN");
    _null_.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN");
    _null_.put(GL_COMPRESSED_LUMINANCE, "GL_COMPRESSED_LUMINANCE");
    _null_.put(GL_CURRENT_FOG_COORDINATE, "GL_CURRENT_FOG_COORDINATE");
    _null_.put(GL_TEXTURE_BUFFER_BINDING, "GL_TEXTURE_BUFFER_BINDING");
    _null_.put(GL_SMAPHS30_PROGRAM_BINARY_DMP, "GL_SMAPHS30_PROGRAM_BINARY_DMP");
    _null_.put(GL_PATCH_VERTICES, "GL_PATCH_VERTICES");
    _null_.put(GL_DIFFERENCE, "GL_DIFFERENCE");
    _null_.put(GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES, "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES");
    _null_.put(GL_CLAMP_TO_EDGE, "GL_CLAMP_TO_EDGE");
    _null_.put(GL_UNIFORM_BUFFER_START, "GL_UNIFORM_BUFFER_START");
    _null_.put(GL_MAP1_GRID_SEGMENTS, "GL_MAP1_GRID_SEGMENTS");
    _null_.put(GL_DEBUG_SEVERITY_MEDIUM_KHR, "GL_DEBUG_SEVERITY_MEDIUM_KHR");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE");
    _null_.put(GL_SAMPLE_MASK_INVERT_SGIS, "GL_SAMPLE_MASK_INVERT_SGIS");
    _null_.put(GL_DOT3_RGBA, "GL_DOT3_RGBA");
    _null_.put(GL_GET_TEXTURE_IMAGE_FORMAT, "GL_GET_TEXTURE_IMAGE_FORMAT");
    _null_.put(GL_BLEND_DST_ALPHA, "GL_BLEND_DST_ALPHA");
    _null_.put(GL_Q, "GL_Q");
    _null_.put(GL_SUBTRACT, "GL_SUBTRACT");
    _null_.put(GL_S, "GL_S");
    _null_.put(GL_R, "GL_R");
    _null_.put(GL_T, "GL_T");
    _null_.put(GL_PERCENTAGE_AMD, "GL_PERCENTAGE_AMD");
    _null_.put(GL_SRC0_ALPHA, "GL_SRC0_ALPHA");
    _null_.put(GL_STATIC_COPY, "GL_STATIC_COPY");
    _null_.put(GL_EDGE_FLAG_ARRAY, "GL_EDGE_FLAG_ARRAY");
    _null_.put(GL_CLIP_PLANE0_IMG, "GL_CLIP_PLANE0_IMG");
    _null_.put(GL_FOG_BIT, "GL_FOG_BIT");
    _null_.put(GL_COLOR_COMPONENTS, "GL_COLOR_COMPONENTS");
    _null_.put(GL_DEBUG_SOURCE_API, "GL_DEBUG_SOURCE_API");
    _null_.put(GL_FLOAT16_MAT3x4_AMD, "GL_FLOAT16_MAT3x4_AMD");
    _null_.put(GL_INTERLACE_READ_INGR, "GL_INTERLACE_READ_INGR");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
  }
  private static void _null_28() {
    _null_.put(GL_MAX_INTEGER_SAMPLES, "GL_MAX_INTEGER_SAMPLES");
    _null_.put(GL_NATIVE_GRAPHICS_END_HINT_PGI, "GL_NATIVE_GRAPHICS_END_HINT_PGI");
    _null_.put(GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM, "GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM");
    _null_.put(GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS");
    _null_.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
    _null_.put(GL_STENCIL_ATTACHMENT, "GL_STENCIL_ATTACHMENT");
    _null_.put(GL_INVALID_VALUE, "GL_INVALID_VALUE");
    _null_.put(GL_INDEX_MODE, "GL_INDEX_MODE");
    _null_.put(GL_CONSERVATIVE_RASTERIZATION_INTEL, "GL_CONSERVATIVE_RASTERIZATION_INTEL");
    _null_.put(GL_ALLOW_DRAW_FRG_HINT_PGI, "GL_ALLOW_DRAW_FRG_HINT_PGI");
    _null_.put(GL_MAT_AMBIENT_BIT_PGI, "GL_MAT_AMBIENT_BIT_PGI");
    _null_.put(GL_PIXEL_MAP_A_TO_A_SIZE, "GL_PIXEL_MAP_A_TO_A_SIZE");
    _null_.put(GL_BUFFER_FLUSHING_UNMAP_APPLE, "GL_BUFFER_FLUSHING_UNMAP_APPLE");
    _null_.put(GL_STRICT_DEPTHFUNC_HINT_PGI, "GL_STRICT_DEPTHFUNC_HINT_PGI");
    _null_.put(GL_GEQUAL, "GL_GEQUAL");
    _null_.put(GL_MAX_LAYERS, "GL_MAX_LAYERS");
    _null_.put(GL_GREEN_MIN_CLAMP_INGR, "GL_GREEN_MIN_CLAMP_INGR");
    _null_.put(GL_NICEST, "GL_NICEST");
    _null_.put(GL_MAX_UNIFORM_BLOCK_SIZE, "GL_MAX_UNIFORM_BLOCK_SIZE");
    _null_.put(GL_LUMINANCE_FLOAT32_APPLE, "GL_LUMINANCE_FLOAT32_APPLE");
    _null_.put(GL_DUAL_INTENSITY4_SGIS, "GL_DUAL_INTENSITY4_SGIS");
    _null_.put(GL_MAX_VERTEX_STREAMS, "GL_MAX_VERTEX_STREAMS");
    _null_.put(GL_SPRITE_OBJECT_ALIGNED_SGIX, "GL_SPRITE_OBJECT_ALIGNED_SGIX");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_STORAGE_SPARSE_BIT_AMD, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD");
    _null_.put(GL_COORD_REPLACE, "GL_COORD_REPLACE");
    _null_.put(GL_COMPRESSED_TEXTURE_FORMATS, "GL_COMPRESSED_TEXTURE_FORMATS");
    _null_.put(GL_GENERATE_MIPMAP, "GL_GENERATE_MIPMAP");
    _null_.put(GL_TESS_EVALUATION_SHADER, "GL_TESS_EVALUATION_SHADER");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_WIDTH, "GL_FRAMEBUFFER_DEFAULT_WIDTH");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE");
    _null_.put(GL_DEBUG_GROUP_STACK_DEPTH, "GL_DEBUG_GROUP_STACK_DEPTH");
    _null_.put(GL_RESAMPLE_REPLICATE_SGIX, "GL_RESAMPLE_REPLICATE_SGIX");
    _null_.put(GL_QUERY_ALL_EVENT_BITS_AMD, "GL_QUERY_ALL_EVENT_BITS_AMD");
    _null_.put(GL_MAX_VIEWPORTS, "GL_MAX_VIEWPORTS");
    _null_.put(GL_SHADER_STORAGE_BARRIER_BIT, "GL_SHADER_STORAGE_BARRIER_BIT");
    _null_.put(GL_INDEX_ARRAY_TYPE, "GL_INDEX_ARRAY_TYPE");
    _null_.put(GL_INSTRUMENT_BUFFER_POINTER_SGIX, "GL_INSTRUMENT_BUFFER_POINTER_SGIX");
    _null_.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN, "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN");
    _null_.put(GL_TEXTURE_MAX_LEVEL, "GL_TEXTURE_MAX_LEVEL");
    _null_.put(GL_SRGB_READ, "GL_SRGB_READ");
    _null_.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
    _null_.put(GL_RED_SCALE, "GL_RED_SCALE");
    _null_.put(GL_GEOMETRY_INPUT_TYPE, "GL_GEOMETRY_INPUT_TYPE");
    _null_.put(GL_PIXEL_GROUP_COLOR_SGIS, "GL_PIXEL_GROUP_COLOR_SGIS");
    _null_.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    _null_.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    _null_.put(GL_PATCH_DEFAULT_INNER_LEVEL, "GL_PATCH_DEFAULT_INNER_LEVEL");
    _null_.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_REFERENCED_BY_TESS_CONTROL_SHADER");
    _null_.put(GL_PROGRAM_BINARY_ANGLE, "GL_PROGRAM_BINARY_ANGLE");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    _null_.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_SCALE, "GL_POST_COLOR_MATRIX_GREEN_SCALE");
    _null_.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
  }
  private static void _null_29() {
    _null_.put(GL_CURRENT_VERTEX_ATTRIB, "GL_CURRENT_VERTEX_ATTRIB");
    _null_.put(GL_ALL_PIXELS_AMD, "GL_ALL_PIXELS_AMD");
    _null_.put(GL_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_IMAGE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_VERTEX_SHADER, "GL_VERTEX_SHADER");
    _null_.put(GL_TEXTURE_CONSTANT_DATA_SUNX, "GL_TEXTURE_CONSTANT_DATA_SUNX");
    _null_.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    _null_.put(GL_ATOMIC_COUNTER_BARRIER_BIT, "GL_ATOMIC_COUNTER_BARRIER_BIT");
    _null_.put(GL_OVERLAY, "GL_OVERLAY");
    _null_.put(GL_UNPACK_CLIENT_STORAGE_APPLE, "GL_UNPACK_CLIENT_STORAGE_APPLE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
    _null_.put(GL_TOP_LEVEL_ARRAY_SIZE, "GL_TOP_LEVEL_ARRAY_SIZE");
    _null_.put(GL_COLOR_ARRAY_LIST_IBM, "GL_COLOR_ARRAY_LIST_IBM");
    _null_.put(GL_COLOR_FLOAT_APPLE, "GL_COLOR_FLOAT_APPLE");
    _null_.put(GL_MAX_DEBUG_MESSAGE_LENGTH_KHR, "GL_MAX_DEBUG_MESSAGE_LENGTH_KHR");
    _null_.put(GL_MAX_COMBINED_ATOMIC_COUNTERS, "GL_MAX_COMBINED_ATOMIC_COUNTERS");
    _null_.put(GL_COMPARE_R_TO_TEXTURE, "GL_COMPARE_R_TO_TEXTURE");
    _null_.put(GL_UNDEFINED_APPLE, "GL_UNDEFINED_APPLE");
    _null_.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX");
    _null_.put(GL_MAX_GEOMETRY_INPUT_COMPONENTS, "GL_MAX_GEOMETRY_INPUT_COMPONENTS");
    _null_.put(GL_HISTOGRAM, "GL_HISTOGRAM");
    _null_.put(GL_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_COLOR_MATRIX_STACK_DEPTH_SGI");
    _null_.put(GL_DEPTH_TEST, "GL_DEPTH_TEST");
    _null_.put(GL_QUERY_KHR, "GL_QUERY_KHR");
    _null_.put(GL_ACCUM_BUFFER_BIT, "GL_ACCUM_BUFFER_BIT");
    _null_.put(GL_RGBA_FLOAT16_APPLE, "GL_RGBA_FLOAT16_APPLE");
    _null_.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    _null_.put(GL_MAX_COMBINED_DIMENSIONS, "GL_MAX_COMBINED_DIMENSIONS");
    _null_.put(GL_OPERAND0_RGB, "GL_OPERAND0_RGB");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_RECT, "GL_UNSIGNED_INT_SAMPLER_2D_RECT");
    _null_.put(GL_SHADER_STORAGE_BUFFER_BINDING, "GL_SHADER_STORAGE_BUFFER_BINDING");
    _null_.put(GL_UNSIGNED_SHORT_5_6_5_REV, "GL_UNSIGNED_SHORT_5_6_5_REV");
    _null_.put(GL_PACK_INVERT_MESA, "GL_PACK_INVERT_MESA");
    _null_.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    _null_.put(GL_UNIFORM_BLOCK_BINDING, "GL_UNIFORM_BLOCK_BINDING");
    _null_.put(GL_FRAMEBUFFER_RENDERABLE_LAYERED, "GL_FRAMEBUFFER_RENDERABLE_LAYERED");
    _null_.put(GL_4PASS_2_SGIS, "GL_4PASS_2_SGIS");
    _null_.put(GL_TEXTURE_GREEN_SIZE, "GL_TEXTURE_GREEN_SIZE");
    _null_.put(GL_DOUBLE_MAT2x4, "GL_DOUBLE_MAT2x4");
    _null_.put(GL_DOUBLE_MAT2x3, "GL_DOUBLE_MAT2x3");
    _null_.put(GL_INTENSITY, "GL_INTENSITY");
    _null_.put(GL_STENCIL_BACK_PASS_DEPTH_PASS, "GL_STENCIL_BACK_PASS_DEPTH_PASS");
    _null_.put(GL_DRAW_PIXELS_APPLE, "GL_DRAW_PIXELS_APPLE");
    _null_.put(GL_SRC1_COLOR, "GL_SRC1_COLOR");
    _null_.put(GL_STENCIL_BACK_FUNC, "GL_STENCIL_BACK_FUNC");
    _null_.put(GL_MAX_3D_TEXTURE_SIZE, "GL_MAX_3D_TEXTURE_SIZE");
    _null_.put(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS");
    _null_.put(GL_FRAGMENTS_INSTRUMENT_SGIX, "GL_FRAGMENTS_INSTRUMENT_SGIX");
  }
  private static void _null_30() {
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_BIAS, "GL_POST_COLOR_MATRIX_GREEN_BIAS");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_4x4, "GL_COMPRESSED_RGBA_ASTC_4x4");
    _null_.put(GL_TRIANGLE_LIST_SUN, "GL_TRIANGLE_LIST_SUN");
    _null_.put(GL_COLOR_BUFFER_BIT7_QCOM, "GL_COLOR_BUFFER_BIT7_QCOM");
    _null_.put(GL_TRANSPOSE_TEXTURE_MATRIX, "GL_TRANSPOSE_TEXTURE_MATRIX");
    _null_.put(GL_UNIFORM_TYPE, "GL_UNIFORM_TYPE");
    _null_.put(GL_DEPTH_BITS, "GL_DEPTH_BITS");
    _null_.put(GL_RESCALE_NORMAL, "GL_RESCALE_NORMAL");
    _null_.put(GL_COMPILE_STATUS, "GL_COMPILE_STATUS");
    _null_.put(GL_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_DEBUG_GROUP_STACK_DEPTH_KHR");
    _null_.put(GL_TEXTURE_HEIGHT, "GL_TEXTURE_HEIGHT");
    _null_.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
    _null_.put(GL_RGB9_E5, "GL_RGB9_E5");
    _null_.put(GL_RGB_SCALE, "GL_RGB_SCALE");
    _null_.put(GL_INDEX_ARRAY, "GL_INDEX_ARRAY");
    _null_.put(GL_LINE_SMOOTH, "GL_LINE_SMOOTH");
    _null_.put(GL_QUERY_TARGET, "GL_QUERY_TARGET");
    _null_.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    _null_.put(GL_POST_CONVOLUTION_ALPHA_SCALE, "GL_POST_CONVOLUTION_ALPHA_SCALE");
    _null_.put(GL_TEXTURE_BLUE_TYPE, "GL_TEXTURE_BLUE_TYPE");
    _null_.put(GL_NORMAL_BIT_PGI, "GL_NORMAL_BIT_PGI");
    _null_.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
    _null_.put(GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX, "GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX");
    _null_.put(GL_FRACTIONAL_ODD, "GL_FRACTIONAL_ODD");
    _null_.put(GL_TEXTURE_DEFORMATION_BIT_SGIX, "GL_TEXTURE_DEFORMATION_BIT_SGIX");
    _null_.put(GL_VERTEX_ARRAY_RANGE_APPLE, "GL_VERTEX_ARRAY_RANGE_APPLE");
    _null_.put(GL_COLOR_BUFFER_BIT0_QCOM, "GL_COLOR_BUFFER_BIT0_QCOM");
    _null_.put(GL_VERTEX_PROGRAM_POINT_SIZE, "GL_VERTEX_PROGRAM_POINT_SIZE");
    _null_.put(GL_HSL_SATURATION_KHR, "GL_HSL_SATURATION_KHR");
    _null_.put(GL_MAX_LIGHTS, "GL_MAX_LIGHTS");
    _null_.put(GL_STENCIL_BUFFER_BIT, "GL_STENCIL_BUFFER_BIT");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8");
    _null_.put(GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD");
    _null_.put(GL_MAX_COMPUTE_IMAGE_UNIFORMS, "GL_MAX_COMPUTE_IMAGE_UNIFORMS");
    _null_.put(GL_LAYER_PROVOKING_VERTEX, "GL_LAYER_PROVOKING_VERTEX");
    _null_.put(GL_DEPTH_COMPONENT32_SGIX, "GL_DEPTH_COMPONENT32_SGIX");
    _null_.put(GL_SYNC_OBJECT_APPLE, "GL_SYNC_OBJECT_APPLE");
    _null_.put(GL_VERTEX_ARRAY_LIST_IBM, "GL_VERTEX_ARRAY_LIST_IBM");
    _null_.put(GL_TEXTURE0, "GL_TEXTURE0");
    _null_.put(GL_UNSIGNED_SHORT_1_5_5_5_REV, "GL_UNSIGNED_SHORT_1_5_5_5_REV");
    _null_.put(GL_TEXTURE4, "GL_TEXTURE4");
    _null_.put(GL_TEXTURE3, "GL_TEXTURE3");
    _null_.put(GL_TEXTURE2, "GL_TEXTURE2");
    _null_.put(GL_TEXTURE1, "GL_TEXTURE1");
    _null_.put(GL_TEXTURE8, "GL_TEXTURE8");
    _null_.put(GL_SAMPLER_CUBE_SHADOW, "GL_SAMPLER_CUBE_SHADOW");
    _null_.put(GL_TEXTURE7, "GL_TEXTURE7");
    _null_.put(GL_DEBUG_SOURCE_OTHER_KHR, "GL_DEBUG_SOURCE_OTHER_KHR");
    _null_.put(GL_TEXTURE6, "GL_TEXTURE6");
    _null_.put(GL_TEXTURE5, "GL_TEXTURE5");
  }
  private static void _null_31() {
    _null_.put(GL_DEBUG_SEVERITY_NOTIFICATION, "GL_DEBUG_SEVERITY_NOTIFICATION");
    _null_.put(GL_TEXTURE9, "GL_TEXTURE9");
    _null_.put(GL_ORDER, "GL_ORDER");
    _null_.put(GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL, "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_SYNC_FLAGS_APPLE, "GL_SYNC_FLAGS_APPLE");
    _null_.put(GL_FOG_COORDINATE_ARRAY_LIST_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_IBM");
    _null_.put(GL_BLEND_DST, "GL_BLEND_DST");
    _null_.put(GL_TEXTURE_STACK_DEPTH, "GL_TEXTURE_STACK_DEPTH");
    _null_.put(GL_1PASS_SGIS, "GL_1PASS_SGIS");
    _null_.put(GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW, "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW");
    _null_.put(GL_LINEAR_SHARPEN_COLOR_SGIS, "GL_LINEAR_SHARPEN_COLOR_SGIS");
    _null_.put(GL_TRACE_ERRORS_BIT_MESA, "GL_TRACE_ERRORS_BIT_MESA");
    _null_.put(GL_STENCIL_OP_VALUE_AMD, "GL_STENCIL_OP_VALUE_AMD");
    _null_.put(GL_STATIC_READ, "GL_STATIC_READ");
    _null_.put(GL_INTENSITY8, "GL_INTENSITY8");
    _null_.put(GL_INTENSITY4, "GL_INTENSITY4");
    _null_.put(GL_SCALEBIAS_HINT_SGIX, "GL_SCALEBIAS_HINT_SGIX");
    _null_.put(GL_DOUBLE_VEC4, "GL_DOUBLE_VEC4");
    _null_.put(GL_DOUBLE_VEC3, "GL_DOUBLE_VEC3");
    _null_.put(GL_LINE_STIPPLE_PATTERN, "GL_LINE_STIPPLE_PATTERN");
    _null_.put(GL_BUFFER_ACCESS, "GL_BUFFER_ACCESS");
    _null_.put(GL_DOUBLE_VEC2, "GL_DOUBLE_VEC2");
    _null_.put(GL_OR_REVERSE, "GL_OR_REVERSE");
    _null_.put(GL_MAX_ARRAY_TEXTURE_LAYERS, "GL_MAX_ARRAY_TEXTURE_LAYERS");
    _null_.put(GL_FULL_STIPPLE_HINT_PGI, "GL_FULL_STIPPLE_HINT_PGI");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_TYPE, "GL_SECONDARY_COLOR_ARRAY_TYPE");
    _null_.put(GL_SRGB_ALPHA, "GL_SRGB_ALPHA");
    _null_.put(GL_COMPRESSED_RGBA_BPTC_UNORM, "GL_COMPRESSED_RGBA_BPTC_UNORM");
    _null_.put(GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES, "GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES");
    _null_.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    _null_.put(GL_TEXTURE_MATRIX, "GL_TEXTURE_MATRIX");
    _null_.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    _null_.put(GL_TEXTURE_COMPARE_OPERATOR_SGIX, "GL_TEXTURE_COMPARE_OPERATOR_SGIX");
    _null_.put(GL_MAX_ASYNC_HISTOGRAM_SGIX, "GL_MAX_ASYNC_HISTOGRAM_SGIX");
    _null_.put(GL_COLOR3_BIT_PGI, "GL_COLOR3_BIT_PGI");
    _null_.put(GL_MAX_COMPUTE_UNIFORM_COMPONENTS, "GL_MAX_COMPUTE_UNIFORM_COMPONENTS");
    _null_.put(GL_INVALID_INDEX, "GL_INVALID_INDEX");
    _null_.put(GL_LINEAR_CLIPMAP_LINEAR_SGIX, "GL_LINEAR_CLIPMAP_LINEAR_SGIX");
    _null_.put(GL_R32F, "GL_R32F");
    _null_.put(GL_PROXY_COLOR_TABLE, "GL_PROXY_COLOR_TABLE");
    _null_.put(GL_DEPTH_COMPONENT32F, "GL_DEPTH_COMPONENT32F");
    _null_.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_GATHER_SHADOW, "GL_TEXTURE_GATHER_SHADOW");
    _null_.put(GL_MAX_COLOR_ATTACHMENTS, "GL_MAX_COLOR_ATTACHMENTS");
    _null_.put(GL_TRANSFORM_FEEDBACK_VARYING, "GL_TRANSFORM_FEEDBACK_VARYING");
    _null_.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    _null_.put(GL_R32I, "GL_R32I");
    _null_.put(GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX");
    _null_.put(GL_TEXTURE_MAX_LEVEL_APPLE, "GL_TEXTURE_MAX_LEVEL_APPLE");
    _null_.put(GL_SAMPLER_1D_ARRAY_SHADOW, "GL_SAMPLER_1D_ARRAY_SHADOW");
    _null_.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
    _null_.put(GL_MAX_TEXTURE_STACK_DEPTH, "GL_MAX_TEXTURE_STACK_DEPTH");
  }
  private static void _null_32() {
    _null_.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    _null_.put(GL_TEXTURE_ENV, "GL_TEXTURE_ENV");
    _null_.put(GL_BITMAP, "GL_BITMAP");
    _null_.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    _null_.put(GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS, "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_VERTEX_PROGRAM_CALLBACK_MESA, "GL_VERTEX_PROGRAM_CALLBACK_MESA");
    _null_.put(GL_ALWAYS_FAST_HINT_PGI, "GL_ALWAYS_FAST_HINT_PGI");
    _null_.put(GL_NOR, "GL_NOR");
    _null_.put(GL_IMAGE_BINDING_LAYERED, "GL_IMAGE_BINDING_LAYERED");
    _null_.put(GL_PACK_MAX_COMPRESSED_SIZE_SGIX, "GL_PACK_MAX_COMPRESSED_SIZE_SGIX");
    _null_.put(GL_UNSIGNED_SHORT_8_8_APPLE, "GL_UNSIGNED_SHORT_8_8_APPLE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5");
    _null_.put(GL_RGB32UI, "GL_RGB32UI");
    _null_.put(GL_FASTEST, "GL_FASTEST");
    _null_.put(GL_4D_COLOR_TEXTURE, "GL_4D_COLOR_TEXTURE");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6");
    _null_.put(GL_COLORBURN_KHR, "GL_COLORBURN_KHR");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_4x4_KHR, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR");
    _null_.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    _null_.put(GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD, "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD");
    _null_.put(GL_ALIASED_POINT_SIZE_RANGE, "GL_ALIASED_POINT_SIZE_RANGE");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_POINTER, "GL_SECONDARY_COLOR_ARRAY_POINTER");
    _null_.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS");
    _null_.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS");
    _null_.put(GL_RG16I, "GL_RG16I");
    _null_.put(GL_LUMINANCE12_ALPHA12, "GL_LUMINANCE12_ALPHA12");
    _null_.put(GL_FRACTIONAL_EVEN, "GL_FRACTIONAL_EVEN");
    _null_.put(GL_STENCIL_COMPONENTS, "GL_STENCIL_COMPONENTS");
    _null_.put(GL_POINT_SPRITE_COORD_ORIGIN, "GL_POINT_SPRITE_COORD_ORIGIN");
    _null_.put(GL_SHORT, "GL_SHORT");
    _null_.put(GL_RG16F, "GL_RG16F");
    _null_.put(GL_COLOR_RENDERABLE, "GL_COLOR_RENDERABLE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
    _null_.put(GL_QUERY_OBJECT_AMD, "GL_QUERY_OBJECT_AMD");
    _null_.put(GL_RGB8I, "GL_RGB8I");
    _null_.put(GL_PIXEL_MAP_I_TO_G_SIZE, "GL_PIXEL_MAP_I_TO_G_SIZE");
    _null_.put(GL_EYE_LINEAR, "GL_EYE_LINEAR");
    _null_.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    _null_.put(GL_RGBA16_SNORM, "GL_RGBA16_SNORM");
    _null_.put(GL_QUAD_INTENSITY8_SGIS, "GL_QUAD_INTENSITY8_SGIS");
    _null_.put(GL_VERTEX_SUBROUTINE_UNIFORM, "GL_VERTEX_SUBROUTINE_UNIFORM");
    _null_.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    _null_.put(GL_POLYGON_MODE, "GL_POLYGON_MODE");
    _null_.put(GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    _null_.put(GL_LIGHT_MODEL_LOCAL_VIEWER, "GL_LIGHT_MODEL_LOCAL_VIEWER");
    _null_.put(GL_MAX_COMPUTE_WORK_GROUP_SIZE, "GL_MAX_COMPUTE_WORK_GROUP_SIZE");
  }
  private static void _null_33() {
    _null_.put(GL_HALF_APPLE, "GL_HALF_APPLE");
    _null_.put(GL_INTERPOLATE, "GL_INTERPOLATE");
    _null_.put(GL_DST_COLOR, "GL_DST_COLOR");
    _null_.put(GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE, "GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE");
    _null_.put(GL_SHADER_BINARY_FORMATS, "GL_SHADER_BINARY_FORMATS");
    _null_.put(GL_SAMPLER_1D_SHADOW, "GL_SAMPLER_1D_SHADOW");
    _null_.put(GL_RGBA32UI, "GL_RGBA32UI");
    _null_.put(GL_RESAMPLE_REPLICATE_OML, "GL_RESAMPLE_REPLICATE_OML");
    _null_.put(GL_EYE_PLANE, "GL_EYE_PLANE");
    _null_.put(GL_DEBUG_CATEGORY_PERFORMANCE_AMD, "GL_DEBUG_CATEGORY_PERFORMANCE_AMD");
    _null_.put(GL_ONE, "GL_ONE");
    _null_.put(GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM, "GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM");
    _null_.put(GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE, "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE");
    _null_.put(GL_DEBUG_OBJECT_MESA, "GL_DEBUG_OBJECT_MESA");
    _null_.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_SIZE, "GL_UNPACK_COMPRESSED_BLOCK_SIZE");
    _null_.put(GL_RENDERBUFFER_STENCIL_SIZE, "GL_RENDERBUFFER_STENCIL_SIZE");
    _null_.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
    _null_.put(GL_TEXTURE_STENCIL_SIZE, "GL_TEXTURE_STENCIL_SIZE");
    _null_.put(GL_SPRITE_EYE_ALIGNED_SGIX, "GL_SPRITE_EYE_ALIGNED_SGIX");
    _null_.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    _null_.put(GL_POSITION, "GL_POSITION");
    _null_.put(GL_FOG_COORD_SRC, "GL_FOG_COORD_SRC");
    _null_.put(GL_FIXED, "GL_FIXED");
    _null_.put(GL_COMPRESSED_RGB_FXT1_3DFX, "GL_COMPRESSED_RGB_FXT1_3DFX");
    _null_.put(GL_STENCIL_BUFFER_BIT4_QCOM, "GL_STENCIL_BUFFER_BIT4_QCOM");
    _null_.put(GL_INDEX_ARRAY_BUFFER_BINDING, "GL_INDEX_ARRAY_BUFFER_BINDING");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR, "GL_CONTEXT_RELEASE_BEHAVIOR");
    _null_.put(GL_MULT, "GL_MULT");
    _null_.put(GL_NEAREST_MIPMAP_LINEAR, "GL_NEAREST_MIPMAP_LINEAR");
    _null_.put(GL_DEBUG_TYPE_PORTABILITY, "GL_DEBUG_TYPE_PORTABILITY");
    _null_.put(GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD, "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD");
    _null_.put(GL_EXTENSIONS, "GL_EXTENSIONS");
    _null_.put(GL_DRAW_FRAMEBUFFER_BINDING_APPLE, "GL_DRAW_FRAMEBUFFER_BINDING_APPLE");
    _null_.put(GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM, "GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM");
    _null_.put(GL_RG32UI, "GL_RG32UI");
    _null_.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    _null_.put(GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD");
    _null_.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE, "GL_POST_COLOR_MATRIX_ALPHA_SCALE");
    _null_.put(GL_TRANSPOSE_PROJECTION_MATRIX, "GL_TRANSPOSE_PROJECTION_MATRIX");
    _null_.put(GL_STATIC_VERTEX_ARRAY_IBM, "GL_STATIC_VERTEX_ARRAY_IBM");
    _null_.put(GL_GENERATE_MIPMAP_HINT, "GL_GENERATE_MIPMAP_HINT");
    _null_.put(GL_UNSIGNED_INT_5_9_9_9_REV, "GL_UNSIGNED_INT_5_9_9_9_REV");
    _null_.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
    _null_.put(GL_LOSE_CONTEXT_ON_RESET_KHR, "GL_LOSE_CONTEXT_ON_RESET_KHR");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_INDEX, "GL_ATOMIC_COUNTER_BUFFER_INDEX");
    _null_.put(GL_FULL_SUPPORT, "GL_FULL_SUPPORT");
  }
  private static void _null_34() {
    _null_.put(GL_COLOR_MATERIAL_PARAMETER, "GL_COLOR_MATERIAL_PARAMETER");
    _null_.put(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS");
    _null_.put(GL_EQUAL, "GL_EQUAL");
    _null_.put(GL_3_BYTES, "GL_3_BYTES");
    _null_.put(GL_HARDLIGHT, "GL_HARDLIGHT");
    _null_.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES, "GL_MAX_GEOMETRY_OUTPUT_VERTICES");
    _null_.put(GL_INDEX_OFFSET, "GL_INDEX_OFFSET");
    _null_.put(GL_CONVOLUTION_BORDER_COLOR_HP, "GL_CONVOLUTION_BORDER_COLOR_HP");
    _null_.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR");
    _null_.put(GL_POST_CONVOLUTION_GREEN_SCALE, "GL_POST_CONVOLUTION_GREEN_SCALE");
    _null_.put(GL_SAMPLER_OBJECT_AMD, "GL_SAMPLER_OBJECT_AMD");
    _null_.put(GL_MAX_UNIFORM_LOCATIONS, "GL_MAX_UNIFORM_LOCATIONS");
    _null_.put(GL_MAX_4D_TEXTURE_SIZE_SGIS, "GL_MAX_4D_TEXTURE_SIZE_SGIS");
    _null_.put(GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE, "GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE");
    _null_.put(GL_MAX_VARYING_VECTORS, "GL_MAX_VARYING_VECTORS");
    _null_.put(GL_TEXTURE_BINDING_RECTANGLE, "GL_TEXTURE_BINDING_RECTANGLE");
    _null_.put(GL_CONTEXT_ROBUST_ACCESS, "GL_CONTEXT_ROBUST_ACCESS");
    _null_.put(GL_POINT_SMOOTH_HINT, "GL_POINT_SMOOTH_HINT");
    _null_.put(GL_INT_IMAGE_CUBE, "GL_INT_IMAGE_CUBE");
    _null_.put(GL_IMAGE_SCALE_X_HP, "GL_IMAGE_SCALE_X_HP");
    _null_.put(GL_VIEW_CLASS_128_BITS, "GL_VIEW_CLASS_128_BITS");
    _null_.put(GL_UNIFORM_BLOCK, "GL_UNIFORM_BLOCK");
    _null_.put(GL_MULTISAMPLE, "GL_MULTISAMPLE");
    _null_.put(GL_LUMINANCE_ALPHA_SNORM, "GL_LUMINANCE_ALPHA_SNORM");
    _null_.put(GL_SAMPLE_MASK_VALUE_SGIS, "GL_SAMPLE_MASK_VALUE_SGIS");
    _null_.put(GL_QUAD_LUMINANCE8_SGIS, "GL_QUAD_LUMINANCE8_SGIS");
    _null_.put(GL_DEBUG_CALLBACK_FUNCTION, "GL_DEBUG_CALLBACK_FUNCTION");
    _null_.put(GL_OFFSET, "GL_OFFSET");
    _null_.put(GL_ACCUM_GREEN_BITS, "GL_ACCUM_GREEN_BITS");
    _null_.put(GL_RGBA8, "GL_RGBA8");
    _null_.put(GL_HALF_FLOAT, "GL_HALF_FLOAT");
    _null_.put(GL_RGBA4, "GL_RGBA4");
    _null_.put(GL_RGBA2, "GL_RGBA2");
    _null_.put(GL_STREAM_DRAW, "GL_STREAM_DRAW");
    _null_.put(GL_UNPACK_COMPRESSED_BLOCK_HEIGHT, "GL_UNPACK_COMPRESSED_BLOCK_HEIGHT");
    _null_.put(GL_COLOR_TABLE_INTENSITY_SIZE, "GL_COLOR_TABLE_INTENSITY_SIZE");
    _null_.put(GL_VERTEX_SHADER_INVOCATIONS, "GL_VERTEX_SHADER_INVOCATIONS");
    _null_.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS");
    _null_.put(GL_TEXTURE_IMAGE_FORMAT, "GL_TEXTURE_IMAGE_FORMAT");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR");
    _null_.put(GL_RELEASED_APPLE, "GL_RELEASED_APPLE");
    _null_.put(GL_TESS_CONTROL_SUBROUTINE_UNIFORM, "GL_TESS_CONTROL_SUBROUTINE_UNIFORM");
    _null_.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    _null_.put(GL_FLOAT16_MAT3_AMD, "GL_FLOAT16_MAT3_AMD");
    _null_.put(GL_FOG_COORD_ARRAY_STRIDE, "GL_FOG_COORD_ARRAY_STRIDE");
    _null_.put(GL_COMPUTE_TEXTURE, "GL_COMPUTE_TEXTURE");
    _null_.put(GL_PRIMITIVE_RESTART_FIXED_INDEX, "GL_PRIMITIVE_RESTART_FIXED_INDEX");
    _null_.put(GL_INTERLEAVED_ATTRIBS, "GL_INTERLEAVED_ATTRIBS");
    _null_.put(GL_TIME_ELAPSED, "GL_TIME_ELAPSED");
  }
  private static void _null_35() {
    _null_.put(GL_MAX_CLIP_DISTANCES, "GL_MAX_CLIP_DISTANCES");
    _null_.put(GL_GPU_OPTIMIZED_QCOM, "GL_GPU_OPTIMIZED_QCOM");
    _null_.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
    _null_.put(GL_TEXTURE_INTENSITY_TYPE, "GL_TEXTURE_INTENSITY_TYPE");
    _null_.put(GL_INTENSITY16_SNORM, "GL_INTENSITY16_SNORM");
    _null_.put(GL_DEPTH_CLAMP, "GL_DEPTH_CLAMP");
    _null_.put(GL_SAMPLE_COVERAGE_INVERT, "GL_SAMPLE_COVERAGE_INVERT");
    _null_.put(GL_EDGE_FLAG, "GL_EDGE_FLAG");
    _null_.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_READ_FRAMEBUFFER_ANGLE, "GL_READ_FRAMEBUFFER_ANGLE");
    _null_.put(GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX, "GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX");
    _null_.put(GL_VERTEX4_BIT_PGI, "GL_VERTEX4_BIT_PGI");
    _null_.put(GL_MAX_ATTRIB_STACK_DEPTH, "GL_MAX_ATTRIB_STACK_DEPTH");
    _null_.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    _null_.put(GL_RGB_FLOAT32_APPLE, "GL_RGB_FLOAT32_APPLE");
    _null_.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");
    _null_.put(GL_VERSION, "GL_VERSION");
    _null_.put(GL_STACK_UNDERFLOW, "GL_STACK_UNDERFLOW");
    _null_.put(GL_IMPLEMENTATION_COLOR_READ_FORMAT, "GL_IMPLEMENTATION_COLOR_READ_FORMAT");
    _null_.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS");
    _null_.put(GL_RESET_NOTIFICATION_STRATEGY_KHR, "GL_RESET_NOTIFICATION_STRATEGY_KHR");
    _null_.put(GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    _null_.put(GL_ATTACHED_SHADERS, "GL_ATTACHED_SHADERS");
    _null_.put(GL_DITHER, "GL_DITHER");
    _null_.put(GL_MAT_COLOR_INDEXES_BIT_PGI, "GL_MAT_COLOR_INDEXES_BIT_PGI");
    _null_.put(GL_DEBUG_SOURCE_THIRD_PARTY, "GL_DEBUG_SOURCE_THIRD_PARTY");
    _null_.put(GL_LAYOUT_LINEAR_INTEL, "GL_LAYOUT_LINEAR_INTEL");
    _null_.put(GL_FOG, "GL_FOG");
    _null_.put(GL_FOG_START, "GL_FOG_START");
    _null_.put(GL_FOG_SPECULAR_TEXTURE_WIN, "GL_FOG_SPECULAR_TEXTURE_WIN");
    _null_.put(GL_HARDLIGHT_KHR, "GL_HARDLIGHT_KHR");
    _null_.put(GL_COLOR_MATRIX_STACK_DEPTH, "GL_COLOR_MATRIX_STACK_DEPTH");
    _null_.put(GL_YCRCB_444_SGIX, "GL_YCRCB_444_SGIX");
    _null_.put(GL_SYNC_FLAGS, "GL_SYNC_FLAGS");
    _null_.put(GL_IMAGE_2D_MULTISAMPLE, "GL_IMAGE_2D_MULTISAMPLE");
    _null_.put(GL_RECIP_ADD_SIGNED_ALPHA_IMG, "GL_RECIP_ADD_SIGNED_ALPHA_IMG");
    _null_.put(GL_TEXTURE_WIDTH, "GL_TEXTURE_WIDTH");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH");
    _null_.put(GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT");
    _null_.put(GL_PIXEL_MAP_G_TO_G_SIZE, "GL_PIXEL_MAP_G_TO_G_SIZE");
    _null_.put(GL_VIEW_CLASS_S3TC_DXT5_RGBA, "GL_VIEW_CLASS_S3TC_DXT5_RGBA");
  }
  private static void _null_36() {
    _null_.put(GL_CLAMP_VERTEX_COLOR, "GL_CLAMP_VERTEX_COLOR");
    _null_.put(GL_MAX_COLOR_TEXTURE_SAMPLES, "GL_MAX_COLOR_TEXTURE_SAMPLES");
    _null_.put(GL_CURRENT_SECONDARY_COLOR, "GL_CURRENT_SECONDARY_COLOR");
    _null_.put(GL_IMAGE_3D, "GL_IMAGE_3D");
    _null_.put(GL_COMPILE, "GL_COMPILE");
    _null_.put(GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH");
    _null_.put(GL_VIEW_CLASS_8_BITS, "GL_VIEW_CLASS_8_BITS");
    _null_.put(GL_LINE_BIT, "GL_LINE_BIT");
    _null_.put(GL_PACK_LSB_FIRST, "GL_PACK_LSB_FIRST");
    _null_.put(GL_TEXTURE_COMPARE_FUNC, "GL_TEXTURE_COMPARE_FUNC");
    _null_.put(GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY, "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY");
    _null_.put(GL_WEIGHT_ARRAY_BUFFER_BINDING, "GL_WEIGHT_ARRAY_BUFFER_BINDING");
    _null_.put(GL_PERFQUERY_DONOT_FLUSH_INTEL, "GL_PERFQUERY_DONOT_FLUSH_INTEL");
    _null_.put(GL_INVALID_ENUM, "GL_INVALID_ENUM");
    _null_.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    _null_.put(GL_TEXTURE_FORMAT_QCOM, "GL_TEXTURE_FORMAT_QCOM");
    _null_.put(GL_CURRENT_QUERY, "GL_CURRENT_QUERY");
    _null_.put(GL_ALWAYS, "GL_ALWAYS");
    _null_.put(GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM, "GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM");
    _null_.put(GL_INVERT, "GL_INVERT");
    _null_.put(GL_GREEN_BIAS, "GL_GREEN_BIAS");
    _null_.put(GL_STENCIL_BACK_WRITEMASK, "GL_STENCIL_BACK_WRITEMASK");
    _null_.put(GL_READ_FRAMEBUFFER_BINDING_APPLE, "GL_READ_FRAMEBUFFER_BINDING_APPLE");
    _null_.put(GL_LUMINANCE, "GL_LUMINANCE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE");
    _null_.put(GL_DYNAMIC_STORAGE_BIT, "GL_DYNAMIC_STORAGE_BIT");
    _null_.put(GL_PACK_ROW_BYTES_APPLE, "GL_PACK_ROW_BYTES_APPLE");
    _null_.put(GL_CLIP_ORIGIN, "GL_CLIP_ORIGIN");
    _null_.put(GL_MAX_SAMPLES, "GL_MAX_SAMPLES");
    _null_.put(GL_POST_CONVOLUTION_RED_SCALE, "GL_POST_CONVOLUTION_RED_SCALE");
    _null_.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    _null_.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    _null_.put(GL_MAP2_GRID_SEGMENTS, "GL_MAP2_GRID_SEGMENTS");
    _null_.put(GL_FRAGMENT_PROGRAM_CALLBACK_MESA, "GL_FRAGMENT_PROGRAM_CALLBACK_MESA");
    _null_.put(GL_UNIFORM_BARRIER_BIT, "GL_UNIFORM_BARRIER_BIT");
    _null_.put(GL_CURRENT_COLOR, "GL_CURRENT_COLOR");
    _null_.put(GL_PROJECTION_MATRIX, "GL_PROJECTION_MATRIX");
    _null_.put(GL_NEAREST_CLIPMAP_NEAREST_SGIX, "GL_NEAREST_CLIPMAP_NEAREST_SGIX");
    _null_.put(GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL, "GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL");
    _null_.put(GL_OR_INVERTED, "GL_OR_INVERTED");
    _null_.put(GL_CONTEXT_FLAGS, "GL_CONTEXT_FLAGS");
    _null_.put(GL_CLIP_DEPTH_MODE, "GL_CLIP_DEPTH_MODE");
  }
  private static void _null_37() {
    _null_.put(GL_BGR_INTEGER, "GL_BGR_INTEGER");
    _null_.put(GL_MALI_PROGRAM_BINARY_ARM, "GL_MALI_PROGRAM_BINARY_ARM");
    _null_.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS");
    _null_.put(GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD");
    _null_.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS");
    _null_.put(GL_CLIP_PLANE5_IMG, "GL_CLIP_PLANE5_IMG");
    _null_.put(GL_MAX_TEXTURE_SIZE, "GL_MAX_TEXTURE_SIZE");
    _null_.put(GL_CLIENT_VERTEX_ARRAY_BIT, "GL_CLIENT_VERTEX_ARRAY_BIT");
    _null_.put(GL_RENDERBUFFER_WIDTH, "GL_RENDERBUFFER_WIDTH");
    _null_.put(GL_2_BYTES, "GL_2_BYTES");
    _null_.put(GL_INDEX_ARRAY_LIST_IBM, "GL_INDEX_ARRAY_LIST_IBM");
    _null_.put(GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI, "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI");
    _null_.put(GL_DEPTH_BUFFER_BIT5_QCOM, "GL_DEPTH_BUFFER_BIT5_QCOM");
    _null_.put(GL_NEVER, "GL_NEVER");
    _null_.put(GL_IMAGE_CUBE, "GL_IMAGE_CUBE");
    _null_.put(GL_MIN_PROGRAM_TEXEL_OFFSET, "GL_MIN_PROGRAM_TEXEL_OFFSET");
    _null_.put(GL_STRICT_SCISSOR_HINT_PGI, "GL_STRICT_SCISSOR_HINT_PGI");
    _null_.put(GL_TEXTURE_MAX_LOD, "GL_TEXTURE_MAX_LOD");
    _null_.put(GL_SAMPLER_CUBE_MAP_ARRAY, "GL_SAMPLER_CUBE_MAP_ARRAY");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x12_KHR, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR");
    _null_.put(GL_YCRCB_422_SGIX, "GL_YCRCB_422_SGIX");
    _null_.put(GL_STENCIL_BACK_REF, "GL_STENCIL_BACK_REF");
    _null_.put(GL_CONVOLUTION_HEIGHT, "GL_CONVOLUTION_HEIGHT");
    _null_.put(GL_ASYNC_MARKER_SGIX, "GL_ASYNC_MARKER_SGIX");
    _null_.put(GL_INTERNALFORMAT_STENCIL_SIZE, "GL_INTERNALFORMAT_STENCIL_SIZE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
    _null_.put(GL_CLIENT_PIXEL_STORE_BIT, "GL_CLIENT_PIXEL_STORE_BIT");
    _null_.put(GL_INT_IMAGE_2D_RECT, "GL_INT_IMAGE_2D_RECT");
    _null_.put(GL_MATERIAL_SIDE_HINT_PGI, "GL_MATERIAL_SIDE_HINT_PGI");
    _null_.put(GL_TESSELLATION_FACTOR_AMD, "GL_TESSELLATION_FACTOR_AMD");
    _null_.put(GL_RG32F, "GL_RG32F");
    _null_.put(GL_PACK_ALIGNMENT, "GL_PACK_ALIGNMENT");
    _null_.put(GL_RG32I, "GL_RG32I");
    _null_.put(GL_MAX_DEBUG_LOGGED_MESSAGES_KHR, "GL_MAX_DEBUG_LOGGED_MESSAGES_KHR");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x6_KHR, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR");
    _null_.put(GL_STREAM_COPY, "GL_STREAM_COPY");
    _null_.put(GL_MINMAX_SINK, "GL_MINMAX_SINK");
    _null_.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
    _null_.put(GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS, "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_LIGHTEN_KHR, "GL_LIGHTEN_KHR");
    _null_.put(GL_FEEDBACK_BUFFER_POINTER, "GL_FEEDBACK_BUFFER_POINTER");
    _null_.put(GL_COLOR_TABLE_BLUE_SIZE, "GL_COLOR_TABLE_BLUE_SIZE");
    _null_.put(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_MAX_FRAMEBUFFER_HEIGHT, "GL_MAX_FRAMEBUFFER_HEIGHT");
    _null_.put(GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED, "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED");
    _null_.put(GL_RENDER_MODE, "GL_RENDER_MODE");
  }
  private static void _null_38() {
    _null_.put(GL_CLIP_FAR_HINT_PGI, "GL_CLIP_FAR_HINT_PGI");
    _null_.put(GL_ELEMENT_ARRAY_BARRIER_BIT, "GL_ELEMENT_ARRAY_BARRIER_BIT");
    _null_.put(GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS");
    _null_.put(GL_TEXTURE_HEIGHT_QCOM, "GL_TEXTURE_HEIGHT_QCOM");
    _null_.put(GL_PACK_SKIP_ROWS, "GL_PACK_SKIP_ROWS");
    _null_.put(GL_TEXTURE_POST_SPECULAR_HP, "GL_TEXTURE_POST_SPECULAR_HP");
    _null_.put(GL_RGBA32I, "GL_RGBA32I");
    _null_.put(GL_CURRENT_RASTER_DISTANCE, "GL_CURRENT_RASTER_DISTANCE");
    _null_.put(GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS, "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS");
    _null_.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT");
    _null_.put(GL_RGBA32F, "GL_RGBA32F");
    _null_.put(GL_DRAW_PIXEL_TOKEN, "GL_DRAW_PIXEL_TOKEN");
    _null_.put(GL_COLOR_CLEAR_VALUE, "GL_COLOR_CLEAR_VALUE");
    _null_.put(GL_DRAW_FRAMEBUFFER, "GL_DRAW_FRAMEBUFFER");
    _null_.put(GL_POLYGON_SMOOTH, "GL_POLYGON_SMOOTH");
    _null_.put(GL_NUM_EXTENSIONS, "GL_NUM_EXTENSIONS");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER, "GL_VERTEX_ATTRIB_ARRAY_INTEGER");
    _null_.put(GL_CLAMP, "GL_CLAMP");
    _null_.put(GL_MAX_CLIP_PLANES_IMG, "GL_MAX_CLIP_PLANES_IMG");
    _null_.put(GL_DISCRETE_AMD, "GL_DISCRETE_AMD");
    _null_.put(GL_MATRIX_STRIDE, "GL_MATRIX_STRIDE");
    _null_.put(GL_BLEND_EQUATION, "GL_BLEND_EQUATION");
    _null_.put(GL_PATCH_DEFAULT_OUTER_LEVEL, "GL_PATCH_DEFAULT_OUTER_LEVEL");
    _null_.put(GL_ACTIVE_VARIABLES, "GL_ACTIVE_VARIABLES");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR");
    _null_.put(GL_PERFMON_RESULT_AVAILABLE_AMD, "GL_PERFMON_RESULT_AVAILABLE_AMD");
    _null_.put(GL_ADD_BLEND_IMG, "GL_ADD_BLEND_IMG");
    _null_.put(GL_YCRCBA_SGIX, "GL_YCRCBA_SGIX");
    _null_.put(GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    _null_.put(GL_COMPRESSED_SIGNED_RED_RGTC1, "GL_COMPRESSED_SIGNED_RED_RGTC1");
    _null_.put(GL_SHADING_LANGUAGE_VERSION, "GL_SHADING_LANGUAGE_VERSION");
    _null_.put(GL_GREEN_MAX_CLAMP_INGR, "GL_GREEN_MAX_CLAMP_INGR");
    _null_.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    _null_.put(GL_ELEMENT_ARRAY_POINTER_APPLE, "GL_ELEMENT_ARRAY_POINTER_APPLE");
    _null_.put(GL_MAX_CULL_DISTANCES, "GL_MAX_CULL_DISTANCES");
    _null_.put(GL_FOG_COORD_ARRAY, "GL_FOG_COORD_ARRAY");
    _null_.put(GL_DOUBLE_MAT4, "GL_DOUBLE_MAT4");
    _null_.put(GL_RENDERBUFFER_BLUE_SIZE, "GL_RENDERBUFFER_BLUE_SIZE");
    _null_.put(GL_COUNTER_RANGE_AMD, "GL_COUNTER_RANGE_AMD");
  }
  private static void _null_39() {
    _null_.put(GL_BLUE_INTEGER, "GL_BLUE_INTEGER");
    _null_.put(GL_DOUBLE_MAT3, "GL_DOUBLE_MAT3");
    _null_.put(GL_DOUBLE_MAT2, "GL_DOUBLE_MAT2");
    _null_.put(GL_STENCIL_WRITEMASK, "GL_STENCIL_WRITEMASK");
    _null_.put(GL_MAX_CONVOLUTION_WIDTH, "GL_MAX_CONVOLUTION_WIDTH");
    _null_.put(GL_TEXTURE_ALPHA_MODULATE_IMG, "GL_TEXTURE_ALPHA_MODULATE_IMG");
    _null_.put(GL_FOG_COORD_ARRAY_BUFFER_BINDING, "GL_FOG_COORD_ARRAY_BUFFER_BINDING");
    _null_.put(GL_QUAD_LUMINANCE4_SGIS, "GL_QUAD_LUMINANCE4_SGIS");
    _null_.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR");
    _null_.put(GL_INT_IMAGE_CUBE_MAP_ARRAY, "GL_INT_IMAGE_CUBE_MAP_ARRAY");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_CUBE, "GL_UNSIGNED_INT_SAMPLER_CUBE");
    _null_.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_STENCIL_BUFFER_BIT0_QCOM, "GL_STENCIL_BUFFER_BIT0_QCOM");
    _null_.put(GL_DEBUG_LOGGED_MESSAGES_KHR, "GL_DEBUG_LOGGED_MESSAGES_KHR");
    _null_.put(GL_ELEMENT_ARRAY_APPLE, "GL_ELEMENT_ARRAY_APPLE");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_5x4_KHR, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR");
    _null_.put(GL_INTERNALFORMAT_GREEN_TYPE, "GL_INTERNALFORMAT_GREEN_TYPE");
    _null_.put(GL_SRC1_RGB, "GL_SRC1_RGB");
    _null_.put(GL_SAMPLER_CUBE, "GL_SAMPLER_CUBE");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL, "GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL");
    _null_.put(GL_COLOR_TABLE_BLUE_SIZE_SGI, "GL_COLOR_TABLE_BLUE_SIZE_SGI");
    _null_.put(GL_EQUIV, "GL_EQUIV");
    _null_.put(GL_INDEX_ARRAY_POINTER, "GL_INDEX_ARRAY_POINTER");
    _null_.put(GL_CAVEAT_SUPPORT, "GL_CAVEAT_SUPPORT");
    _null_.put(GL_PERFMON_GLOBAL_MODE_QCOM, "GL_PERFMON_GLOBAL_MODE_QCOM");
    _null_.put(GL_ENABLE_BIT, "GL_ENABLE_BIT");
    _null_.put(GL_LOW_FLOAT, "GL_LOW_FLOAT");
    _null_.put(GL_DEPTH_TEXTURE_MODE, "GL_DEPTH_TEXTURE_MODE");
    _null_.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    _null_.put(GL_STORAGE_PRIVATE_APPLE, "GL_STORAGE_PRIVATE_APPLE");
    _null_.put(GL_TEXTURE_RESIDENT, "GL_TEXTURE_RESIDENT");
    _null_.put(GL_MAX_COMPUTE_WORK_GROUP_COUNT, "GL_MAX_COMPUTE_WORK_GROUP_COUNT");
    _null_.put(GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN, "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL, "GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL");
    _null_.put(GL_CONTEXT_ROBUST_ACCESS_KHR, "GL_CONTEXT_ROBUST_ACCESS_KHR");
    _null_.put(GL_PRIMITIVE_BOUNDING_BOX, "GL_PRIMITIVE_BOUNDING_BOX");
    _null_.put(GL_EXP, "GL_EXP");
    _null_.put(GL_LINE_SMOOTH_HINT, "GL_LINE_SMOOTH_HINT");
    _null_.put(GL_VIEW_CLASS_64_BITS, "GL_VIEW_CLASS_64_BITS");
    _null_.put(GL_CLAMP_TO_EDGE_SGIS, "GL_CLAMP_TO_EDGE_SGIS");
    _null_.put(GL_DEPTH_ATTACHMENT, "GL_DEPTH_ATTACHMENT");
    _null_.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH, "GL_MAX_COLOR_MATRIX_STACK_DEPTH");
    _null_.put(GL_COLOR_ARRAY_SIZE, "GL_COLOR_ARRAY_SIZE");
    _null_.put(GL_OBJECT_LINE_SGIS, "GL_OBJECT_LINE_SGIS");
    _null_.put(GL_DRAW_FRAMEBUFFER_APPLE, "GL_DRAW_FRAMEBUFFER_APPLE");
    _null_.put(GL_CURRENT_NORMAL, "GL_CURRENT_NORMAL");
    _null_.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS");
    _null_.put(GL_AND_REVERSE, "GL_AND_REVERSE");
    _null_.put(GL_TRUE, "GL_TRUE");
    _null_.put(GL_MAX_ASYNC_DRAW_PIXELS_SGIX, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX");
    _null_.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    _null_.put(GL_MIN_MAP_BUFFER_ALIGNMENT, "GL_MIN_MAP_BUFFER_ALIGNMENT");
    _null_.put(GL_BLEND_SRC_RGB, "GL_BLEND_SRC_RGB");
    _null_.put(GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH");
    _null_.put(GL_HISTOGRAM_LUMINANCE_SIZE, "GL_HISTOGRAM_LUMINANCE_SIZE");
    _null_.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    _null_.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS");
    _null_.put(GL_COMPRESSED_RGBA, "GL_COMPRESSED_RGBA");
  }
  private static void _null_40() {
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE");
    _null_.put(GL_FORMAT_SUBSAMPLE_244_244_OML, "GL_FORMAT_SUBSAMPLE_244_244_OML");
    _null_.put(GL_BLEND_COLOR, "GL_BLEND_COLOR");
    _null_.put(GL_SIGNALED_APPLE, "GL_SIGNALED_APPLE");
    _null_.put(GL_DEPTH_BIAS, "GL_DEPTH_BIAS");
    _null_.put(GL_HISTOGRAM_SINK, "GL_HISTOGRAM_SINK");
    _null_.put(GL_DEPTH_FUNC, "GL_DEPTH_FUNC");
    _null_.put(GL_INT_IMAGE_1D_ARRAY, "GL_INT_IMAGE_1D_ARRAY");
    _null_.put(GL_TEXTURE_VIEW_NUM_LEVELS, "GL_TEXTURE_VIEW_NUM_LEVELS");
    _null_.put(GL_PROGRAM_INPUT, "GL_PROGRAM_INPUT");
    _null_.put(GL_MODULATE_COLOR_IMG, "GL_MODULATE_COLOR_IMG");
    _null_.put(GL_FILL, "GL_FILL");
    _null_.put(GL_MAX_RENDERBUFFER_SIZE, "GL_MAX_RENDERBUFFER_SIZE");
    _null_.put(GL_PROGRAM_BINARY_FORMAT_MESA, "GL_PROGRAM_BINARY_FORMAT_MESA");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_BIAS, "GL_POST_COLOR_MATRIX_BLUE_BIAS");
    _null_.put(GL_IMAGE_CLASS_1_X_32, "GL_IMAGE_CLASS_1_X_32");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10");
    _null_.put(GL_BUFFER_IMMUTABLE_STORAGE, "GL_BUFFER_IMMUTABLE_STORAGE");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS");
    _null_.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
    _null_.put(GL_FLOAT16_MAT4x3_AMD, "GL_FLOAT16_MAT4x3_AMD");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x10, "GL_COMPRESSED_RGBA_ASTC_10x10");
    _null_.put(GL_QUADS, "GL_QUADS");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_SCALE, "GL_POST_COLOR_MATRIX_BLUE_SCALE");
    _null_.put(GL_POINT_DISTANCE_ATTENUATION, "GL_POINT_DISTANCE_ATTENUATION");
    _null_.put(GL_SAMPLE_COVERAGE, "GL_SAMPLE_COVERAGE");
    _null_.put(GL_BUFFER_OBJECT_APPLE, "GL_BUFFER_OBJECT_APPLE");
    _null_.put(GL_ALPHA_MAX_SGIX, "GL_ALPHA_MAX_SGIX");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_START, "GL_ATOMIC_COUNTER_BUFFER_START");
    _null_.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
    _null_.put(GL_LINEAR_DETAIL_COLOR_SGIS, "GL_LINEAR_DETAIL_COLOR_SGIS");
    _null_.put(GL_DUAL_INTENSITY16_SGIS, "GL_DUAL_INTENSITY16_SGIS");
    _null_.put(GL_BUFFER_MAP_POINTER, "GL_BUFFER_MAP_POINTER");
    _null_.put(GL_CONTEXT_LOST_WEBGL, "GL_CONTEXT_LOST_WEBGL");
    _null_.put(GL_LIST_BASE, "GL_LIST_BASE");
    _null_.put(GL_SPOT_EXPONENT, "GL_SPOT_EXPONENT");
    _null_.put(GL_MAX_LABEL_LENGTH, "GL_MAX_LABEL_LENGTH");
    _null_.put(GL_NAME_STACK_DEPTH, "GL_NAME_STACK_DEPTH");
    _null_.put(GL_IMAGE_CLASS_1_X_16, "GL_IMAGE_CLASS_1_X_16");
    _null_.put(GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE, "GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE");
    _null_.put(GL_PIXEL_MAP_G_TO_G, "GL_PIXEL_MAP_G_TO_G");
    _null_.put(GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET");
    _null_.put(GL_INDEX, "GL_INDEX");
    _null_.put(GL_LUMINANCE_FLOAT16_APPLE, "GL_LUMINANCE_FLOAT16_APPLE");
    _null_.put(GL_DRAW_BUFFER14, "GL_DRAW_BUFFER14");
    _null_.put(GL_DRAW_BUFFER15, "GL_DRAW_BUFFER15");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT1_QCOM, "GL_MULTISAMPLE_BUFFER_BIT1_QCOM");
    _null_.put(GL_DRAW_BUFFER10, "GL_DRAW_BUFFER10");
    _null_.put(GL_DRAW_BUFFER11, "GL_DRAW_BUFFER11");
    _null_.put(GL_CUBIC_IMG, "GL_CUBIC_IMG");
  }
  private static void _null_41() {
    _null_.put(GL_DRAW_BUFFER12, "GL_DRAW_BUFFER12");
    _null_.put(GL_RED_MAX_CLAMP_INGR, "GL_RED_MAX_CLAMP_INGR");
    _null_.put(GL_DRAW_BUFFER13, "GL_DRAW_BUFFER13");
    _null_.put(GL_TEXTURE_VIEW_NUM_LAYERS, "GL_TEXTURE_VIEW_NUM_LAYERS");
    _null_.put(GL_INSTRUMENT_MEASUREMENTS_SGIX, "GL_INSTRUMENT_MEASUREMENTS_SGIX");
    _null_.put(GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS, "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_CLIP_PLANE1_IMG, "GL_CLIP_PLANE1_IMG");
    _null_.put(GL_VERTEX_ARRAY_STORAGE_HINT_APPLE, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE");
    _null_.put(GL_MAX_COMPUTE_UNIFORM_BLOCKS, "GL_MAX_COMPUTE_UNIFORM_BLOCKS");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_ANGLE, "GL_FRAMEBUFFER_ATTACHMENT_ANGLE");
    _null_.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT");
    _null_.put(GL_MIN_SAMPLE_SHADING_VALUE, "GL_MIN_SAMPLE_SHADING_VALUE");
    _null_.put(GL_PROXY_TEXTURE_2D, "GL_PROXY_TEXTURE_2D");
    _null_.put(GL_DEPTH, "GL_DEPTH");
    _null_.put(GL_FACTOR_MIN_AMD, "GL_FACTOR_MIN_AMD");
    _null_.put(GL_SAMPLE_BUFFERS, "GL_SAMPLE_BUFFERS");
    _null_.put(GL_IMAGE_CLASS_4_X_16, "GL_IMAGE_CLASS_4_X_16");
    _null_.put(GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR, "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR");
    _null_.put(GL_COMPRESSED_RGB, "GL_COMPRESSED_RGB");
    _null_.put(GL_CLIENT_ALL_ATTRIB_BITS, "GL_CLIENT_ALL_ATTRIB_BITS");
    _null_.put(GL_MAX_FRAGMENT_UNIFORM_BLOCKS, "GL_MAX_FRAGMENT_UNIFORM_BLOCKS");
    _null_.put(GL_COLOR_TABLE_FORMAT, "GL_COLOR_TABLE_FORMAT");
    _null_.put(GL_FOG_FUNC_POINTS_SGIS, "GL_FOG_FUNC_POINTS_SGIS");
    _null_.put(GL_PROXY_TEXTURE_3D, "GL_PROXY_TEXTURE_3D");
    _null_.put(GL_COLOR_LOGIC_OP, "GL_COLOR_LOGIC_OP");
    _null_.put(GL_CLIP_DISTANCE6_APPLE, "GL_CLIP_DISTANCE6_APPLE");
    _null_.put(GL_INTERNALFORMAT_SUPPORTED, "GL_INTERNALFORMAT_SUPPORTED");
    _null_.put(GL_UNSIGNED_INT_IMAGE_BUFFER, "GL_UNSIGNED_INT_IMAGE_BUFFER");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG, "GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG");
    _null_.put(GL_CURRENT_RASTER_COLOR, "GL_CURRENT_RASTER_COLOR");
    _null_.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    _null_.put(GL_MAX_DEBUG_MESSAGE_LENGTH_AMD, "GL_MAX_DEBUG_MESSAGE_LENGTH_AMD");
    _null_.put(GL_READ_ONLY, "GL_READ_ONLY");
    _null_.put(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING");
    _null_.put(GL_ACCUM, "GL_ACCUM");
    _null_.put(GL_CONTEXT_FLAG_DEBUG_BIT, "GL_CONTEXT_FLAG_DEBUG_BIT");
    _null_.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS");
    _null_.put(GL_TEXTURE_ENV_BIAS_SGIX, "GL_TEXTURE_ENV_BIAS_SGIX");
    _null_.put(GL_TRIANGLES_ADJACENCY, "GL_TRIANGLES_ADJACENCY");
    _null_.put(GL_CLIP_DISTANCE7_APPLE, "GL_CLIP_DISTANCE7_APPLE");
    _null_.put(GL_NORMAL_ARRAY_TYPE, "GL_NORMAL_ARRAY_TYPE");
    _null_.put(GL_PROXY_TEXTURE_1D, "GL_PROXY_TEXTURE_1D");
    _null_.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X");
    _null_.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z");
    _null_.put(GL_IS_ROW_MAJOR, "GL_IS_ROW_MAJOR");
    _null_.put(GL_INCR_WRAP, "GL_INCR_WRAP");
    _null_.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y");
  }
  private static void _null_42() {
    _null_.put(GL_QUERY_RESULT, "GL_QUERY_RESULT");
    _null_.put(GL_MAX_FRAGMENT_INPUT_COMPONENTS, "GL_MAX_FRAGMENT_INPUT_COMPONENTS");
    _null_.put(GL_TEXTURE_GEN_Q, "GL_TEXTURE_GEN_Q");
    _null_.put(GL_TEXTURE_GEN_R, "GL_TEXTURE_GEN_R");
    _null_.put(GL_LUMINANCE12_ALPHA4, "GL_LUMINANCE12_ALPHA4");
    _null_.put(GL_TEXTURE_GEN_S, "GL_TEXTURE_GEN_S");
    _null_.put(GL_COMBINE, "GL_COMBINE");
    _null_.put(GL_TEXTURE_GEN_T, "GL_TEXTURE_GEN_T");
    _null_.put(GL_CLIP_DISTANCE1_APPLE, "GL_CLIP_DISTANCE1_APPLE");
    _null_.put(GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL, "GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL");
    _null_.put(GL_REFERENCE_PLANE_EQUATION_SGIX, "GL_REFERENCE_PLANE_EQUATION_SGIX");
    _null_.put(GL_TESS_CONTROL_OUTPUT_VERTICES, "GL_TESS_CONTROL_OUTPUT_VERTICES");
    _null_.put(GL_CONTEXT_FLAG_NO_ERROR_BIT, "GL_CONTEXT_FLAG_NO_ERROR_BIT");
    _null_.put(GL_TEXTURE_COMPRESSED_IMAGE_SIZE, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE");
    _null_.put(GL_COMPRESSED_SRGB, "GL_COMPRESSED_SRGB");
    _null_.put(GL_COLOR_TABLE_LUMINANCE_SIZE, "GL_COLOR_TABLE_LUMINANCE_SIZE");
    _null_.put(GL_CLIP_DISTANCE2_APPLE, "GL_CLIP_DISTANCE2_APPLE");
    _null_.put(GL_TEXTURE_LUMINANCE_TYPE, "GL_TEXTURE_LUMINANCE_TYPE");
    _null_.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    _null_.put(GL_MAX_ACTIVE_LIGHTS_SGIX, "GL_MAX_ACTIVE_LIGHTS_SGIX");
    _null_.put(GL_QUERY_BY_REGION_WAIT_INVERTED, "GL_QUERY_BY_REGION_WAIT_INVERTED");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE");
    _null_.put(GL_OCCLUSION_QUERY_EVENT_MASK_AMD, "GL_OCCLUSION_QUERY_EVENT_MASK_AMD");
    _null_.put(GL_CLIP_DISTANCE3_APPLE, "GL_CLIP_DISTANCE3_APPLE");
    _null_.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS");
    _null_.put(GL_UNSIGNED_INT_24_8, "GL_UNSIGNED_INT_24_8");
    _null_.put(GL_ALPHA_SNORM, "GL_ALPHA_SNORM");
    _null_.put(GL_PROXY_TEXTURE_2D_ARRAY, "GL_PROXY_TEXTURE_2D_ARRAY");
    _null_.put(GL_COMPRESSED_RED, "GL_COMPRESSED_RED");
    _null_.put(GL_DETAIL_TEXTURE_2D_SGIS, "GL_DETAIL_TEXTURE_2D_SGIS");
    _null_.put(GL_IMAGE_CLASS_4_X_32, "GL_IMAGE_CLASS_4_X_32");
    _null_.put(GL_OVERLAY_KHR, "GL_OVERLAY_KHR");
    _null_.put(GL_RED_BIAS, "GL_RED_BIAS");
    _null_.put(GL_TEXTURE_DEPTH, "GL_TEXTURE_DEPTH");
    _null_.put(GL_IMAGE_1D, "GL_IMAGE_1D");
    _null_.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");
    _null_.put(GL_MAX_MODELVIEW_STACK_DEPTH, "GL_MAX_MODELVIEW_STACK_DEPTH");
    _null_.put(GL_DISPATCH_INDIRECT_BUFFER_BINDING, "GL_DISPATCH_INDIRECT_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_OBJECT_VALID_QCOM, "GL_TEXTURE_OBJECT_VALID_QCOM");
    _null_.put(GL_COMPRESSED_SIGNED_RG_RGTC2, "GL_COMPRESSED_SIGNED_RG_RGTC2");
    _null_.put(GL_TESS_CONTROL_SHADER, "GL_TESS_CONTROL_SHADER");
    _null_.put(GL_COLOR_INDEX, "GL_COLOR_INDEX");
    _null_.put(GL_MAX_ELEMENTS_INDICES, "GL_MAX_ELEMENTS_INDICES");
    _null_.put(GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX, "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX");
    _null_.put(GL_SAMPLER_2D_RECT, "GL_SAMPLER_2D_RECT");
  }
  private static void _null_43() {
    _null_.put(GL_STENCIL_INDEX16, "GL_STENCIL_INDEX16");
    _null_.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    _null_.put(GL_IMAGE_2D, "GL_IMAGE_2D");
    _null_.put(GL_DEPTH_BUFFER_BIT2_QCOM, "GL_DEPTH_BUFFER_BIT2_QCOM");
    _null_.put(GL_REFERENCED_BY_FRAGMENT_SHADER, "GL_REFERENCED_BY_FRAGMENT_SHADER");
    _null_.put(GL_VERSION_ES_CL_1_1, "GL_VERSION_ES_CL_1_1");
    _null_.put(GL_VERSION_ES_CL_1_0, "GL_VERSION_ES_CL_1_0");
    _null_.put(GL_INTERNALFORMAT_BLUE_SIZE, "GL_INTERNALFORMAT_BLUE_SIZE");
    _null_.put(GL_3D, "GL_3D");
    _null_.put(GL_DEBUG_TYPE_POP_GROUP, "GL_DEBUG_TYPE_POP_GROUP");
    _null_.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    _null_.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    _null_.put(GL_TRACE_MASK_MESA, "GL_TRACE_MASK_MESA");
    _null_.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS");
    _null_.put(GL_RENDERBUFFER_BINDING, "GL_RENDERBUFFER_BINDING");
    _null_.put(GL_COLOR_BUFFER_BIT, "GL_COLOR_BUFFER_BIT");
    _null_.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    _null_.put(GL_POINT_SIZE_RANGE, "GL_POINT_SIZE_RANGE");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_INDEX, "GL_TRANSFORM_FEEDBACK_BUFFER_INDEX");
    _null_.put(GL_GREEN_SCALE, "GL_GREEN_SCALE");
    _null_.put(GL_COLOR_TABLE_LUMINANCE_SIZE_SGI, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI");
    _null_.put(GL_TEXTURE_RED_SIZE, "GL_TEXTURE_RED_SIZE");
    _null_.put(GL_LUMINANCE8_SNORM, "GL_LUMINANCE8_SNORM");
    _null_.put(GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_8x6_KHR, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR");
    _null_.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    _null_.put(GL_TEXTURE_CUBE_MAP_SEAMLESS, "GL_TEXTURE_CUBE_MAP_SEAMLESS");
    _null_.put(GL_DEBUG_SEVERITY_LOW_KHR, "GL_DEBUG_SEVERITY_LOW_KHR");
    _null_.put(GL_VERTEX_ARRAY_SIZE, "GL_VERTEX_ARRAY_SIZE");
    _null_.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    _null_.put(GL_UNIFORM_IS_ROW_MAJOR, "GL_UNIFORM_IS_ROW_MAJOR");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_SIZE, "GL_PACK_COMPRESSED_BLOCK_SIZE");
    _null_.put(GL_UNIFORM_BLOCK_INDEX, "GL_UNIFORM_BLOCK_INDEX");
    _null_.put(GL_DEBUG_CATEGORY_OTHER_AMD, "GL_DEBUG_CATEGORY_OTHER_AMD");
    _null_.put(GL_DUAL_LUMINANCE12_SGIS, "GL_DUAL_LUMINANCE12_SGIS");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES");
    _null_.put(GL_TEXTURE_BASE_LEVEL, "GL_TEXTURE_BASE_LEVEL");
    _null_.put(GL_SPRITE_TRANSLATION_SGIX, "GL_SPRITE_TRANSLATION_SGIX");
    _null_.put(GL_COUNTER_TYPE_AMD, "GL_COUNTER_TYPE_AMD");
    _null_.put(GL_REPLACE_OLDEST_SUN, "GL_REPLACE_OLDEST_SUN");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER");
  }
  private static void _null_44() {
    _null_.put(GL_NORMAL_ARRAY, "GL_NORMAL_ARRAY");
    _null_.put(GL_CONSTANT_BORDER_HP, "GL_CONSTANT_BORDER_HP");
    _null_.put(GL_MAX_LIST_NESTING, "GL_MAX_LIST_NESTING");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG");
    _null_.put(GL_BUFFER_UPDATE_BARRIER_BIT, "GL_BUFFER_UPDATE_BARRIER_BIT");
    _null_.put(GL_BLUE_MIN_CLAMP_INGR, "GL_BLUE_MIN_CLAMP_INGR");
    _null_.put(GL_RGBA_MODE, "GL_RGBA_MODE");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_STRIDE, "GL_SECONDARY_COLOR_ARRAY_STRIDE");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER");
    _null_.put(GL_RGB16I, "GL_RGB16I");
    _null_.put(GL_POST_CONVOLUTION_ALPHA_BIAS, "GL_POST_CONVOLUTION_ALPHA_BIAS");
    _null_.put(GL_FRAGMENT_PROGRAM_POSITION_MESA, "GL_FRAGMENT_PROGRAM_POSITION_MESA");
    _null_.put(GL_COMPRESSED_R11_EAC, "GL_COMPRESSED_R11_EAC");
    _null_.put(GL_DEPTH_COMPONENT24_SGIX, "GL_DEPTH_COMPONENT24_SGIX");
    _null_.put(GL_RGB16F, "GL_RGB16F");
    _null_.put(GL_COLOR_MATRIX_SGI, "GL_COLOR_MATRIX_SGI");
    _null_.put(GL_RGBA4_S3TC, "GL_RGBA4_S3TC");
    _null_.put(GL_COLOR_BUFFER_BIT6_QCOM, "GL_COLOR_BUFFER_BIT6_QCOM");
    _null_.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD");
    _null_.put(GL_MAX_VERTEX_ATTRIB_STRIDE, "GL_MAX_VERTEX_ATTRIB_STRIDE");
    _null_.put(GL_MIRRORED_REPEAT, "GL_MIRRORED_REPEAT");
    _null_.put(GL_STATE_RESTORE, "GL_STATE_RESTORE");
    _null_.put(GL_TEXTURE_VIEW_MIN_LEVEL, "GL_TEXTURE_VIEW_MIN_LEVEL");
    _null_.put(GL_LIGHTING_BIT, "GL_LIGHTING_BIT");
    _null_.put(GL_AUTO_GENERATE_MIPMAP, "GL_AUTO_GENERATE_MIPMAP");
    _null_.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    _null_.put(GL_MAX_TEXTURE_LOD_BIAS, "GL_MAX_TEXTURE_LOD_BIAS");
    _null_.put(GL_BOOL, "GL_BOOL");
    _null_.put(GL_COLOR_ARRAY_STRIDE, "GL_COLOR_ARRAY_STRIDE");
    _null_.put(GL_ELEMENT_ARRAY_BUFFER_BINDING, "GL_ELEMENT_ARRAY_BUFFER_BINDING");
    _null_.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_TYPE, "GL_VERTEX_ATTRIB_ARRAY_TYPE");
    _null_.put(GL_COMPLETION_STATUS_KHR, "GL_COMPLETION_STATUS_KHR");
    _null_.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    _null_.put(GL_PRIMITIVE_RESTART_INDEX, "GL_PRIMITIVE_RESTART_INDEX");
    _null_.put(GL_EDGEFLAG_BIT_PGI, "GL_EDGEFLAG_BIT_PGI");
    _null_.put(GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX, "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX");
    _null_.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    _null_.put(GL_DUAL_INTENSITY8_SGIS, "GL_DUAL_INTENSITY8_SGIS");
    _null_.put(GL_DEPTH_BUFFER_BIT3_QCOM, "GL_DEPTH_BUFFER_BIT3_QCOM");
    _null_.put(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS");
    _null_.put(GL_HSL_LUMINOSITY_KHR, "GL_HSL_LUMINOSITY_KHR");
  }
  private static void _null_45() {
    _null_.put(GL_PACK_COMPRESSED_BLOCK_DEPTH, "GL_PACK_COMPRESSED_BLOCK_DEPTH");
    _null_.put(GL_MULTISAMPLE_3DFX, "GL_MULTISAMPLE_3DFX");
    _null_.put(GL_REPLACE_MIDDLE_SUN, "GL_REPLACE_MIDDLE_SUN");
    _null_.put(GL_BLEND_SRC, "GL_BLEND_SRC");
    _null_.put(GL_HIGH_INT, "GL_HIGH_INT");
    _null_.put(GL_FOG_COORDINATE_SOURCE, "GL_FOG_COORDINATE_SOURCE");
    _null_.put(GL_DECR, "GL_DECR");
    _null_.put(GL_DEPTH_COMPONENT32, "GL_DEPTH_COMPONENT32");
    _null_.put(GL_MAX_VERTEX_OUTPUT_COMPONENTS, "GL_MAX_VERTEX_OUTPUT_COMPONENTS");
    _null_.put(GL_ATC_RGBA_EXPLICIT_ALPHA_AMD, "GL_ATC_RGBA_EXPLICIT_ALPHA_AMD");
    _null_.put(GL_VIEW_CLASS_96_BITS, "GL_VIEW_CLASS_96_BITS");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT6_QCOM, "GL_MULTISAMPLE_BUFFER_BIT6_QCOM");
    _null_.put(GL_BLUE_SCALE, "GL_BLUE_SCALE");
    _null_.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    _null_.put(GL_IMAGE_PIXEL_FORMAT, "GL_IMAGE_PIXEL_FORMAT");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER");
    _null_.put(GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM, "GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM");
    _null_.put(GL_BLEND_SRC_ALPHA, "GL_BLEND_SRC_ALPHA");
    _null_.put(GL_IMAGE_TRANSFORM_2D_HP, "GL_IMAGE_TRANSFORM_2D_HP");
    _null_.put(GL_MAX_VERTEX_ATTRIBS, "GL_MAX_VERTEX_ATTRIBS");
    _null_.put(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING");
    _null_.put(GL_TEXTURE_COMPONENTS, "GL_TEXTURE_COMPONENTS");
    _null_.put(GL_TEXTURE_COMPRESSED, "GL_TEXTURE_COMPRESSED");
    _null_.put(GL_RED_SNORM, "GL_RED_SNORM");
    _null_.put(GL_UNSIGNED_SHORT_4_4_4_4, "GL_UNSIGNED_SHORT_4_4_4_4");
    _null_.put(GL_FOG_COORD, "GL_FOG_COORD");
    _null_.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG");
    _null_.put(GL_STENCIL_PASS_DEPTH_FAIL, "GL_STENCIL_PASS_DEPTH_FAIL");
    _null_.put(GL_MAX_FOG_FUNC_POINTS_SGIS, "GL_MAX_FOG_FUNC_POINTS_SGIS");
    _null_.put(GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG, "GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG");
    _null_.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_SAMPLE_MASK, "GL_SAMPLE_MASK");
    _null_.put(GL_UNSIGNED_BYTE_2_3_3_REV, "GL_UNSIGNED_BYTE_2_3_3_REV");
    _null_.put(GL_3D_COLOR, "GL_3D_COLOR");
    _null_.put(GL_TIMEOUT_IGNORED, "GL_TIMEOUT_IGNORED");
    _null_.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    _null_.put(GL_TEXTURE_COORD_ARRAY_SIZE, "GL_TEXTURE_COORD_ARRAY_SIZE");
    _null_.put(GL_DEBUG_SEVERITY_HIGH_AMD, "GL_DEBUG_SEVERITY_HIGH_AMD");
    _null_.put(GL_LINK_STATUS, "GL_LINK_STATUS");
    _null_.put(GL_SAMPLER_KHR, "GL_SAMPLER_KHR");
    _null_.put(GL_ALPHA16_SNORM, "GL_ALPHA16_SNORM");
  }
  private static void _null_46() {
    _null_.put(GL_LINE_WIDTH, "GL_LINE_WIDTH");
    _null_.put(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_UNSIGNED_INT_8_24_REV_MESA, "GL_UNSIGNED_INT_8_24_REV_MESA");
    _null_.put(GL_CLIPPING_OUTPUT_PRIMITIVES, "GL_CLIPPING_OUTPUT_PRIMITIVES");
    _null_.put(GL_RESAMPLE_DECIMATE_OML, "GL_RESAMPLE_DECIMATE_OML");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_APPLE, "GL_VERTEX_ATTRIB_MAP2_APPLE");
    _null_.put(GL_DEPTH_COMPONENT24, "GL_DEPTH_COMPONENT24");
    _null_.put(GL_DEFORMATIONS_MASK_SGIX, "GL_DEFORMATIONS_MASK_SGIX");
    _null_.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
    _null_.put(GL_SPIR_V_BINARY, "GL_SPIR_V_BINARY");
    _null_.put(GL_MODELVIEW, "GL_MODELVIEW");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER");
    _null_.put(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, "GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL");
    _null_.put(GL_QUERY_NO_WAIT, "GL_QUERY_NO_WAIT");
    _null_.put(GL_TEXTURE_PRIORITY, "GL_TEXTURE_PRIORITY");
    _null_.put(GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM, "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_PROXY_HISTOGRAM, "GL_PROXY_HISTOGRAM");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE");
    _null_.put(GL_DEPTH_COMPONENT16, "GL_DEPTH_COMPONENT16");
    _null_.put(GL_SPRITE_AXIS_SGIX, "GL_SPRITE_AXIS_SGIX");
    _null_.put(GL_DUAL_LUMINANCE8_SGIS, "GL_DUAL_LUMINANCE8_SGIS");
    _null_.put(GL_CW, "GL_CW");
    _null_.put(GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX, "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX");
    _null_.put(GL_BGRA_IMG, "GL_BGRA_IMG");
    _null_.put(GL_EXP2, "GL_EXP2");
    _null_.put(GL_POLYGON_TOKEN, "GL_POLYGON_TOKEN");
    _null_.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
    _null_.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    _null_.put(GL_TEXTURE_DEPTH_QCOM, "GL_TEXTURE_DEPTH_QCOM");
    _null_.put(GL_BUFFER_VARIABLE, "GL_BUFFER_VARIABLE");
    _null_.put(GL_MAX_TEXTURE_MAX_ANISOTROPY, "GL_MAX_TEXTURE_MAX_ANISOTROPY");
    _null_.put(GL_INFO_LOG_LENGTH, "GL_INFO_LOG_LENGTH");
    _null_.put(GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD");
    _null_.put(GL_IMAGE_BUFFER, "GL_IMAGE_BUFFER");
    _null_.put(GL_MAX_VERTEX_UNIFORM_VECTORS, "GL_MAX_VERTEX_UNIFORM_VECTORS");
    _null_.put(GL_SMAPHS_PROGRAM_BINARY_DMP, "GL_SMAPHS_PROGRAM_BINARY_DMP");
    _null_.put(GL_PRIMARY_COLOR, "GL_PRIMARY_COLOR");
    _null_.put(GL_SMOOTH_POINT_SIZE_GRANULARITY, "GL_SMOOTH_POINT_SIZE_GRANULARITY");
    _null_.put(GL_QUAD_ALPHA4_SGIS, "GL_QUAD_ALPHA4_SGIS");
    _null_.put(GL_COMPRESSED_SIGNED_R11_EAC, "GL_COMPRESSED_SIGNED_R11_EAC");
    _null_.put(GL_NO_ERROR, "GL_NO_ERROR");
  }
  private static void _null_47() {
    _null_.put(GL_COMPRESSED_RGBA_FXT1_3DFX, "GL_COMPRESSED_RGBA_FXT1_3DFX");
    _null_.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    _null_.put(GL_MIN, "GL_MIN");
    _null_.put(GL_RESAMPLE_ZERO_FILL_SGIX, "GL_RESAMPLE_ZERO_FILL_SGIX");
    _null_.put(GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT");
    _null_.put(GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA, "GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA");
    _null_.put(GL_SAMPLE_SHADING, "GL_SAMPLE_SHADING");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE");
    _null_.put(GL_STENCIL_VALUE_MASK, "GL_STENCIL_VALUE_MASK");
    _null_.put(GL_LINEAR_DETAIL_ALPHA_SGIS, "GL_LINEAR_DETAIL_ALPHA_SGIS");
    _null_.put(GL_DEPTH_CLEAR_VALUE, "GL_DEPTH_CLEAR_VALUE");
    _null_.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    _null_.put(GL_ATC_RGB_AMD, "GL_ATC_RGB_AMD");
    _null_.put(GL_INTERNALFORMAT_DEPTH_SIZE, "GL_INTERNALFORMAT_DEPTH_SIZE");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE");
    _null_.put(GL_PERFQUERY_FLUSH_INTEL, "GL_PERFQUERY_FLUSH_INTEL");
    _null_.put(GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX, "GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX");
    _null_.put(GL_TABLE_TOO_LARGE, "GL_TABLE_TOO_LARGE");
    _null_.put(GL_ALL_ATTRIB_BITS, "GL_ALL_ATTRIB_BITS");
    _null_.put(GL_TEXTURE_ENV_MODE, "GL_TEXTURE_ENV_MODE");
    _null_.put(GL_MAX_VERTEX_ATTRIB_BINDINGS, "GL_MAX_VERTEX_ATTRIB_BINDINGS");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR");
    _null_.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    _null_.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS");
    _null_.put(GL_RGB8UI, "GL_RGB8UI");
    _null_.put(GL_ALPHA_SCALE, "GL_ALPHA_SCALE");
    _null_.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    _null_.put(GL_UNPACK_CONSTANT_DATA_SUNX, "GL_UNPACK_CONSTANT_DATA_SUNX");
    _null_.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS");
    _null_.put(GL_RENDERBUFFER_SAMPLES_ANGLE, "GL_RENDERBUFFER_SAMPLES_ANGLE");
    _null_.put(GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL, "GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL");
    _null_.put(GL_MULTISAMPLE_BIT, "GL_MULTISAMPLE_BIT");
    _null_.put(GL_SEPARABLE_2D, "GL_SEPARABLE_2D");
    _null_.put(GL_TEXTURE_BINDING_2D_ARRAY, "GL_TEXTURE_BINDING_2D_ARRAY");
    _null_.put(GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX");
    _null_.put(GL_PACK_RESAMPLE_OML, "GL_PACK_RESAMPLE_OML");
    _null_.put(GL_INTERNALFORMAT_PREFERRED, "GL_INTERNALFORMAT_PREFERRED");
    _null_.put(GL_RGB_422_APPLE, "GL_RGB_422_APPLE");
    _null_.put(GL_4_BYTES, "GL_4_BYTES");
    _null_.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    _null_.put(GL_MAX_VERTEX_IMAGE_UNIFORMS, "GL_MAX_VERTEX_IMAGE_UNIFORMS");
    _null_.put(GL_POST_CONVOLUTION_RED_BIAS, "GL_POST_CONVOLUTION_RED_BIAS");
    _null_.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR");
    _null_.put(GL_CLAMP_READ_COLOR, "GL_CLAMP_READ_COLOR");
    _null_.put(GL_POLYGON_BIT, "GL_POLYGON_BIT");
    _null_.put(GL_BITMAP_TOKEN, "GL_BITMAP_TOKEN");
  }
  private static void _null_48() {
    _null_.put(GL_DEBUG_ASSERT_MESA, "GL_DEBUG_ASSERT_MESA");
    _null_.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE");
    _null_.put(GL_DEBUG_CALLBACK_USER_PARAM_KHR, "GL_DEBUG_CALLBACK_USER_PARAM_KHR");
    _null_.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    _null_.put(GL_INTENSITY_FLOAT16_APPLE, "GL_INTENSITY_FLOAT16_APPLE");
    _null_.put(GL_CLIP_NEAR_HINT_PGI, "GL_CLIP_NEAR_HINT_PGI");
    _null_.put(GL_IMPLEMENTATION_COLOR_READ_TYPE, "GL_IMPLEMENTATION_COLOR_READ_TYPE");
    _null_.put(GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL, "GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL");
    _null_.put(GL_LINEAR_ATTENUATION, "GL_LINEAR_ATTENUATION");
    _null_.put(GL_SYNC_FLUSH_COMMANDS_BIT_APPLE, "GL_SYNC_FLUSH_COMMANDS_BIT_APPLE");
    _null_.put(GL_DEBUG_LOGGED_MESSAGES, "GL_DEBUG_LOGGED_MESSAGES");
    _null_.put(GL_GEOMETRY_SUBROUTINE, "GL_GEOMETRY_SUBROUTINE");
    _null_.put(GL_READ_PIXELS_TYPE, "GL_READ_PIXELS_TYPE");
    _null_.put(GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE");
    _null_.put(GL_4PASS_1_SGIS, "GL_4PASS_1_SGIS");
    _null_.put(GL_LIGHT_MODEL_COLOR_CONTROL, "GL_LIGHT_MODEL_COLOR_CONTROL");
    _null_.put(GL_CLAMP_TO_BORDER_SGIS, "GL_CLAMP_TO_BORDER_SGIS");
    _null_.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    _null_.put(GL_INDEX_BITS, "GL_INDEX_BITS");
    _null_.put(GL_INT_SAMPLER_1D_ARRAY, "GL_INT_SAMPLER_1D_ARRAY");
    _null_.put(GL_BUFFER_SIZE, "GL_BUFFER_SIZE");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED");
    _null_.put(GL_DIFFUSE, "GL_DIFFUSE");
    _null_.put(GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_SMOOTH_POINT_SIZE_RANGE, "GL_SMOOTH_POINT_SIZE_RANGE");
    _null_.put(GL_SHADE_MODEL, "GL_SHADE_MODEL");
    _null_.put(GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA, "GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA");
    _null_.put(GL_TEXTURE_MAX_ANISOTROPY, "GL_TEXTURE_MAX_ANISOTROPY");
    _null_.put(GL_NAND, "GL_NAND");
    _null_.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
    _null_.put(GL_OPERAND1_RGB, "GL_OPERAND1_RGB");
    _null_.put(GL_VERTEX_TEXTURE, "GL_VERTEX_TEXTURE");
    _null_.put(GL_LUMINANCE16, "GL_LUMINANCE16");
    _null_.put(GL_TEXTURE20, "GL_TEXTURE20");
    _null_.put(GL_DEBUG_TYPE_MARKER, "GL_DEBUG_TYPE_MARKER");
    _null_.put(GL_BUFFER_BINDING, "GL_BUFFER_BINDING");
    _null_.put(GL_MAX_VIEWPORT_DIMS, "GL_MAX_VIEWPORT_DIMS");
    _null_.put(GL_TRANSFORM_FEEDBACK_VARYINGS, "GL_TRANSFORM_FEEDBACK_VARYINGS");
    _null_.put(GL_DRAW_INDIRECT_BUFFER_BINDING, "GL_DRAW_INDIRECT_BUFFER_BINDING");
    _null_.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
    _null_.put(GL_PROXY_TEXTURE_1D_ARRAY, "GL_PROXY_TEXTURE_1D_ARRAY");
    _null_.put(GL_V2F, "GL_V2F");
    _null_.put(GL_FOG_END, "GL_FOG_END");
    _null_.put(GL_TEXTURE19, "GL_TEXTURE19");
    _null_.put(GL_TEXTURE18, "GL_TEXTURE18");
    _null_.put(GL_IMAGE_2D_RECT, "GL_IMAGE_2D_RECT");
    _null_.put(GL_POST_CONVOLUTION_BLUE_BIAS, "GL_POST_CONVOLUTION_BLUE_BIAS");
    _null_.put(GL_TEXTURE17, "GL_TEXTURE17");
    _null_.put(GL_TEXTURE16, "GL_TEXTURE16");
    _null_.put(GL_TEXTURE15, "GL_TEXTURE15");
    _null_.put(GL_TEXTURE14, "GL_TEXTURE14");
    _null_.put(GL_TEXTURE13, "GL_TEXTURE13");
    _null_.put(GL_TEXTURE12, "GL_TEXTURE12");
    _null_.put(GL_TEXTURE11, "GL_TEXTURE11");
    _null_.put(GL_TEXTURE10, "GL_TEXTURE10");
    _null_.put(GL_TEXTURE31, "GL_TEXTURE31");
  }
  private static void _null_49() {
    _null_.put(GL_PIXEL_MAP_B_TO_B, "GL_PIXEL_MAP_B_TO_B");
    _null_.put(GL_TEXTURE30, "GL_TEXTURE30");
    _null_.put(GL_GEOMETRY_SHADER, "GL_GEOMETRY_SHADER");
    _null_.put(GL_MAX, "GL_MAX");
    _null_.put(GL_NORMAL_MAP, "GL_NORMAL_MAP");
    _null_.put(GL_HSL_LUMINOSITY, "GL_HSL_LUMINOSITY");
    _null_.put(GL_UNIFORM_ARRAY_STRIDE, "GL_UNIFORM_ARRAY_STRIDE");
    _null_.put(GL_R1UI_T2F_C4F_N3F_V3F_SUN, "GL_R1UI_T2F_C4F_N3F_V3F_SUN");
    _null_.put(GL_V3F, "GL_V3F");
    _null_.put(GL_OR, "GL_OR");
    _null_.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH, "GL_MAX_DEBUG_GROUP_STACK_DEPTH");
    _null_.put(GL_SPECULAR, "GL_SPECULAR");
    _null_.put(GL_TEXTURE29, "GL_TEXTURE29");
    _null_.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    _null_.put(GL_TEXTURE28, "GL_TEXTURE28");
    _null_.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    _null_.put(GL_TEXTURE27, "GL_TEXTURE27");
    _null_.put(GL_INT_SAMPLER_2D_MULTISAMPLE, "GL_INT_SAMPLER_2D_MULTISAMPLE");
    _null_.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    _null_.put(GL_TEXTURE26, "GL_TEXTURE26");
    _null_.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    _null_.put(GL_TEXTURE25, "GL_TEXTURE25");
    _null_.put(GL_LUMINANCE12, "GL_LUMINANCE12");
    _null_.put(GL_TEXTURE24, "GL_TEXTURE24");
    _null_.put(GL_TEXTURE23, "GL_TEXTURE23");
    _null_.put(GL_TEXTURE22, "GL_TEXTURE22");
    _null_.put(GL_SLIM8U_SGIX, "GL_SLIM8U_SGIX");
    _null_.put(GL_TEXTURE21, "GL_TEXTURE21");
    _null_.put(GL_VOLATILE_APPLE, "GL_VOLATILE_APPLE");
    _null_.put(GL_AMBIENT_AND_DIFFUSE, "GL_AMBIENT_AND_DIFFUSE");
    _null_.put(GL_TEXCOORD3_BIT_PGI, "GL_TEXCOORD3_BIT_PGI");
    _null_.put(GL_INDEX_SHIFT, "GL_INDEX_SHIFT");
    _null_.put(GL_SEPARATE_ATTRIBS, "GL_SEPARATE_ATTRIBS");
    _null_.put(GL_PIXEL_MAP_I_TO_B, "GL_PIXEL_MAP_I_TO_B");
    _null_.put(GL_QUAD_STRIP, "GL_QUAD_STRIP");
    _null_.put(GL_PIXEL_MAP_I_TO_A, "GL_PIXEL_MAP_I_TO_A");
    _null_.put(GL_PIXEL_MAP_I_TO_G, "GL_PIXEL_MAP_I_TO_G");
    _null_.put(GL_TEXTURE_DEPTH_SIZE, "GL_TEXTURE_DEPTH_SIZE");
    _null_.put(GL_PROXY_TEXTURE_CUBE_MAP, "GL_PROXY_TEXTURE_CUBE_MAP");
    _null_.put(GL_PIXEL_MAP_I_TO_I, "GL_PIXEL_MAP_I_TO_I");
    _null_.put(GL_PROGRAM_POINT_SIZE, "GL_PROGRAM_POINT_SIZE");
    _null_.put(GL_PIXEL_MAP_I_TO_R, "GL_PIXEL_MAP_I_TO_R");
    _null_.put(GL_IMAGE_MIN_FILTER_HP, "GL_IMAGE_MIN_FILTER_HP");
    _null_.put(GL_UNSIGNED_INT_IMAGE_CUBE, "GL_UNSIGNED_INT_IMAGE_CUBE");
    _null_.put(GL_INDEX_LOGIC_OP, "GL_INDEX_LOGIC_OP");
    _null_.put(GL_DEBUG_TYPE_MARKER_KHR, "GL_DEBUG_TYPE_MARKER_KHR");
    _null_.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    _null_.put(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH, "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH");
    _null_.put(GL_CURRENT_RASTER_NORMAL_SGIX, "GL_CURRENT_RASTER_NORMAL_SGIX");
    _null_.put(GL_T4F_V4F, "GL_T4F_V4F");
    _null_.put(GL_ALLOW_DRAW_OBJ_HINT_PGI, "GL_ALLOW_DRAW_OBJ_HINT_PGI");
    _null_.put(GL_R16_SNORM, "GL_R16_SNORM");
    _null_.put(GL_GS_PROGRAM_BINARY_MTK, "GL_GS_PROGRAM_BINARY_MTK");
    _null_.put(GL_NEAREST_CLIPMAP_LINEAR_SGIX, "GL_NEAREST_CLIPMAP_LINEAR_SGIX");
    _null_.put(GL_RG, "GL_RG");
    _null_.put(GL_ALPHA_MIN_CLAMP_INGR, "GL_ALPHA_MIN_CLAMP_INGR");
  }
  private static void _null_50() {
    _null_.put(GL_FRONT, "GL_FRONT");
    _null_.put(GL_TEXTURE_1D_STACK_MESAX, "GL_TEXTURE_1D_STACK_MESAX");
    _null_.put(GL_TESS_EVALUATION_SUBROUTINE, "GL_TESS_EVALUATION_SUBROUTINE");
    _null_.put(GL_SUBPIXEL_BITS, "GL_SUBPIXEL_BITS");
    _null_.put(GL_R8, "GL_R8");
    _null_.put(GL_R1UI_V3F_SUN, "GL_R1UI_V3F_SUN");
    _null_.put(GL_MAX_EVAL_ORDER, "GL_MAX_EVAL_ORDER");
    _null_.put(GL_PRIMITIVE_RESTART, "GL_PRIMITIVE_RESTART");
    _null_.put(GL_UNDEFINED_VERTEX, "GL_UNDEFINED_VERTEX");
    _null_.put(GL_MULTIPLY, "GL_MULTIPLY");
    _null_.put(GL_SPIR_V_EXTENSIONS, "GL_SPIR_V_EXTENSIONS");
    _null_.put(GL_IMAGE_MAG_FILTER_HP, "GL_IMAGE_MAG_FILTER_HP");
    _null_.put(GL_DYNAMIC_READ, "GL_DYNAMIC_READ");
    _null_.put(GL_TEXCOORD1_BIT_PGI, "GL_TEXCOORD1_BIT_PGI");
    _null_.put(GL_ARRAY_BUFFER_BINDING, "GL_ARRAY_BUFFER_BINDING");
    _null_.put(GL_UNSIGNED_INT_5_9_9_9_REV_APPLE, "GL_UNSIGNED_INT_5_9_9_9_REV_APPLE");
    _null_.put(GL_TEXTURE_SHARED_SIZE, "GL_TEXTURE_SHARED_SIZE");
    _null_.put(GL_COLORDODGE, "GL_COLORDODGE");
    _null_.put(GL_RG8UI, "GL_RG8UI");
    _null_.put(GL_VENDOR, "GL_VENDOR");
    _null_.put(GL_PACK_SWAP_BYTES, "GL_PACK_SWAP_BYTES");
    _null_.put(GL_MULTISAMPLE_BIT_3DFX, "GL_MULTISAMPLE_BIT_3DFX");
    _null_.put(GL_CCW, "GL_CCW");
    _null_.put(GL_STENCIL_REF, "GL_STENCIL_REF");
    _null_.put(GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE, "GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE");
    _null_.put(GL_TEXTURE, "GL_TEXTURE");
    _null_.put(GL_NORMAL_ARRAY_BUFFER_BINDING, "GL_NORMAL_ARRAY_BUFFER_BINDING");
    _null_.put(GL_ELEMENT_ARRAY_TYPE_APPLE, "GL_ELEMENT_ARRAY_TYPE_APPLE");
    _null_.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    _null_.put(GL_FLOAT16_MAT2x4_AMD, "GL_FLOAT16_MAT2x4_AMD");
    _null_.put(GL_TRACE_ALL_BITS_MESA, "GL_TRACE_ALL_BITS_MESA");
    _null_.put(GL_LINEAR_DETAIL_SGIS, "GL_LINEAR_DETAIL_SGIS");
    _null_.put(GL_DEBUG_SEVERITY_MEDIUM, "GL_DEBUG_SEVERITY_MEDIUM");
    _null_.put(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, "GL_DEBUG_SOURCE_THIRD_PARTY_KHR");
    _null_.put(GL_TRACE_PIXELS_BIT_MESA, "GL_TRACE_PIXELS_BIT_MESA");
    _null_.put(GL_RETAINED_APPLE, "GL_RETAINED_APPLE");
    _null_.put(GL_CUBIC_MIPMAP_NEAREST_IMG, "GL_CUBIC_MIPMAP_NEAREST_IMG");
    _null_.put(GL_CLAMP_TO_BORDER, "GL_CLAMP_TO_BORDER");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    _null_.put(GL_PREVIOUS, "GL_PREVIOUS");
    _null_.put(GL_BUFFER_DATA_SIZE, "GL_BUFFER_DATA_SIZE");
  }
  private static void _null_51() {
    _null_.put(GL_FOG_FUNC_SGIS, "GL_FOG_FUNC_SGIS");
    _null_.put(GL_RGBA16I, "GL_RGBA16I");
    _null_.put(GL_MAJOR_VERSION, "GL_MAJOR_VERSION");
    _null_.put(GL_RGBA16F, "GL_RGBA16F");
    _null_.put(GL_INT_IMAGE_BUFFER, "GL_INT_IMAGE_BUFFER");
    _null_.put(GL_RGB16_SNORM, "GL_RGB16_SNORM");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR");
    _null_.put(GL_TEXTURE_TARGET, "GL_TEXTURE_TARGET");
    _null_.put(GL_CURRENT_TEXTURE_COORDS, "GL_CURRENT_TEXTURE_COORDS");
    _null_.put(GL_NUM_ACTIVE_VARIABLES, "GL_NUM_ACTIVE_VARIABLES");
    _null_.put(GL_SOURCE1_ALPHA, "GL_SOURCE1_ALPHA");
    _null_.put(GL_DUAL_LUMINANCE_ALPHA4_SGIS, "GL_DUAL_LUMINANCE_ALPHA4_SGIS");
    _null_.put(GL_FLAT, "GL_FLAT");
    _null_.put(GL_OBJECT_TYPE_APPLE, "GL_OBJECT_TYPE_APPLE");
    _null_.put(GL_SAMPLE_POSITION, "GL_SAMPLE_POSITION");
    _null_.put(GL_SRGB, "GL_SRGB");
    _null_.put(GL_TESS_GEN_MODE, "GL_TESS_GEN_MODE");
    _null_.put(GL_RENDERBUFFER_SAMPLES_IMG, "GL_RENDERBUFFER_SAMPLES_IMG");
    _null_.put(GL_VIEW_CLASS_BPTC_FLOAT, "GL_VIEW_CLASS_BPTC_FLOAT");
    _null_.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS");
    _null_.put(GL_FRAMEBUFFER_DEFAULT_HEIGHT, "GL_FRAMEBUFFER_DEFAULT_HEIGHT");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG, "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG");
    _null_.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
    _null_.put(GL_MATRIX_MODE, "GL_MATRIX_MODE");
    _null_.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS");
    _null_.put(GL_MAP_STENCIL, "GL_MAP_STENCIL");
    _null_.put(GL_ARRAY_BUFFER, "GL_ARRAY_BUFFER");
    _null_.put(GL_CONVOLUTION_BORDER_COLOR, "GL_CONVOLUTION_BORDER_COLOR");
    _null_.put(GL_QUERY_RESULT_AVAILABLE, "GL_QUERY_RESULT_AVAILABLE");
    _null_.put(GL_SMOOTH_LINE_WIDTH_GRANULARITY, "GL_SMOOTH_LINE_WIDTH_GRANULARITY");
    _null_.put(GL_MAT_SPECULAR_BIT_PGI, "GL_MAT_SPECULAR_BIT_PGI");
    _null_.put(GL_FLOAT16_MAT3x2_AMD, "GL_FLOAT16_MAT3x2_AMD");
    _null_.put(GL_VERTEX_ARRAY_BUFFER_BINDING, "GL_VERTEX_ARRAY_BUFFER_BINDING");
    _null_.put(GL_READ_FRAMEBUFFER_BINDING, "GL_READ_FRAMEBUFFER_BINDING");
    _null_.put(GL_RIGHT, "GL_RIGHT");
    _null_.put(GL_CLIENT_STORAGE_BIT, "GL_CLIENT_STORAGE_BIT");
    _null_.put(GL_COMPUTE_SHADER_BIT, "GL_COMPUTE_SHADER_BIT");
    _null_.put(GL_NAME_LENGTH, "GL_NAME_LENGTH");
    _null_.put(GL_LINE_WIDTH_GRANULARITY, "GL_LINE_WIDTH_GRANULARITY");
    _null_.put(GL_PIXEL_MAP_S_TO_S, "GL_PIXEL_MAP_S_TO_S");
    _null_.put(GL_MAX_FRAGMENT_LIGHTS_SGIX, "GL_MAX_FRAGMENT_LIGHTS_SGIX");
    _null_.put(GL_VERTEX_ARRAY_STRIDE, "GL_VERTEX_ARRAY_STRIDE");
    _null_.put(GL_SECONDARY_COLOR_ARRAY, "GL_SECONDARY_COLOR_ARRAY");
    _null_.put(GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT, "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT");
    _null_.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    _null_.put(GL_MAX_TEXTURE_BUFFER_SIZE, "GL_MAX_TEXTURE_BUFFER_SIZE");
    _null_.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    _null_.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
  }
  private static void _null_52() {
    _null_.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    _null_.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    _null_.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
    _null_.put(GL_MAX_UNIFORM_BUFFER_BINDINGS, "GL_MAX_UNIFORM_BUFFER_BINDINGS");
    _null_.put(GL_ALPHA_TEST_FUNC_QCOM, "GL_ALPHA_TEST_FUNC_QCOM");
    _null_.put(GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL, "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL");
    _null_.put(GL_RG16, "GL_RG16");
    _null_.put(GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG, "GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG");
    _null_.put(GL_RGBA8I, "GL_RGBA8I");
    _null_.put(GL_CONTEXT_PROFILE_MASK, "GL_CONTEXT_PROFILE_MASK");
    _null_.put(GL_MAX_SPARSE_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_TEXTURE_SIZE_AMD");
    _null_.put(GL_POLYGON_OFFSET_CLAMP, "GL_POLYGON_OFFSET_CLAMP");
    _null_.put(GL_FLOAT_MAT2x3, "GL_FLOAT_MAT2x3");
    _null_.put(GL_FLOAT_MAT2x4, "GL_FLOAT_MAT2x4");
    _null_.put(GL_LIGHTEN, "GL_LIGHTEN");
    _null_.put(GL_VIEW_CLASS_16_BITS, "GL_VIEW_CLASS_16_BITS");
    _null_.put(GL_RG16UI, "GL_RG16UI");
    _null_.put(GL_PARAMETER_BUFFER, "GL_PARAMETER_BUFFER");
    _null_.put(GL_MAX_VARYING_COMPONENTS, "GL_MAX_VARYING_COMPONENTS");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_2D, "GL_UNSIGNED_INT_SAMPLER_2D");
    _null_.put(GL_HISTOGRAM_RED_SIZE, "GL_HISTOGRAM_RED_SIZE");
    _null_.put(GL_OPERAND1_ALPHA, "GL_OPERAND1_ALPHA");
    _null_.put(GL_DEBUG_SOURCE_SHADER_COMPILER, "GL_DEBUG_SOURCE_SHADER_COMPILER");
    _null_.put(GL_SMOOTH_LINE_WIDTH_RANGE, "GL_SMOOTH_LINE_WIDTH_RANGE");
    _null_.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    _null_.put(GL_REPEAT, "GL_REPEAT");
    _null_.put(GL_DEBUG_CALLBACK_FUNCTION_KHR, "GL_DEBUG_CALLBACK_FUNCTION_KHR");
    _null_.put(GL_LOSE_CONTEXT_ON_RESET, "GL_LOSE_CONTEXT_ON_RESET");
    _null_.put(GL_RESTART_SUN, "GL_RESTART_SUN");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_10x10_KHR, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_1D, "GL_UNSIGNED_INT_SAMPLER_1D");
    _null_.put(GL_INT_IMAGE_2D_ARRAY, "GL_INT_IMAGE_2D_ARRAY");
    _null_.put(GL_RGBA_INTEGER, "GL_RGBA_INTEGER");
    _null_.put(GL_STENCIL_TEST, "GL_STENCIL_TEST");
    _null_.put(GL_TEXTURE_WIDTH_QCOM, "GL_TEXTURE_WIDTH_QCOM");
    _null_.put(GL_DUAL_ALPHA16_SGIS, "GL_DUAL_ALPHA16_SGIS");
    _null_.put(GL_PACK_COMPRESSED_BLOCK_WIDTH, "GL_PACK_COMPRESSED_BLOCK_WIDTH");
    _null_.put(GL_RGB16, "GL_RGB16");
    _null_.put(GL_SHADER_IMAGE_LOAD, "GL_SHADER_IMAGE_LOAD");
    _null_.put(GL_RGB12, "GL_RGB12");
    _null_.put(GL_READ_WRITE, "GL_READ_WRITE");
    _null_.put(GL_RGB10, "GL_RGB10");
    _null_.put(GL_EXCLUSION_KHR, "GL_EXCLUSION_KHR");
    _null_.put(GL_FRAMEBUFFER_BLEND, "GL_FRAMEBUFFER_BLEND");
    _null_.put(GL_R11F_G11F_B10F, "GL_R11F_G11F_B10F");
    _null_.put(GL_COMPRESSED_SLUMINANCE_ALPHA, "GL_COMPRESSED_SLUMINANCE_ALPHA");
    _null_.put(GL_UNPACK_SKIP_PIXELS, "GL_UNPACK_SKIP_PIXELS");
    _null_.put(GL_LOGIC_OP, "GL_LOGIC_OP");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER");
    _null_.put(GL_LIGHT_MODEL_TWO_SIDE, "GL_LIGHT_MODEL_TWO_SIDE");
    _null_.put(GL_LINEAR_SHARPEN_SGIS, "GL_LINEAR_SHARPEN_SGIS");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_RECT, "GL_UNSIGNED_INT_IMAGE_2D_RECT");
    _null_.put(GL_WAIT_FAILED, "GL_WAIT_FAILED");
    _null_.put(GL_3D_COLOR_TEXTURE, "GL_3D_COLOR_TEXTURE");
    _null_.put(GL_UNSIGNED_INT_SAMPLER_3D, "GL_UNSIGNED_INT_SAMPLER_3D");
  }
  private static void _null_53() {
    _null_.put(GL_TEXTURE_COMPARE_MODE, "GL_TEXTURE_COMPARE_MODE");
    _null_.put(GL_UNSIGNED_INT_IMAGE_2D_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY");
    _null_.put(GL_DEBUG_TYPE_OTHER, "GL_DEBUG_TYPE_OTHER");
    _null_.put(GL_INT_SAMPLER_CUBE, "GL_INT_SAMPLER_CUBE");
    _null_.put(GL_RG_SNORM, "GL_RG_SNORM");
    _null_.put(GL_GLOBAL_ALPHA_FACTOR_SUN, "GL_GLOBAL_ALPHA_FACTOR_SUN");
    _null_.put(GL_NORMAL_ARRAY_LIST_STRIDE_IBM, "GL_NORMAL_ARRAY_LIST_STRIDE_IBM");
    _null_.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    _null_.put(GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD, "GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD");
    _null_.put(GL_FEEDBACK_BUFFER_SIZE, "GL_FEEDBACK_BUFFER_SIZE");
    _null_.put(GL_MIN_LOD_WARNING_AMD, "GL_MIN_LOD_WARNING_AMD");
    _null_.put(GL_UNSIGNED_SHORT_1_15_REV_MESA, "GL_UNSIGNED_SHORT_1_15_REV_MESA");
    _null_.put(GL_SYNC_FENCE, "GL_SYNC_FENCE");
    _null_.put(GL_DEPTH_SCALE, "GL_DEPTH_SCALE");
    _null_.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    _null_.put(GL_ACCUM_RED_BITS, "GL_ACCUM_RED_BITS");
    _null_.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    _null_.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    _null_.put(GL_TEXTURE_BIT, "GL_TEXTURE_BIT");
    _null_.put(GL_RGB8_SNORM, "GL_RGB8_SNORM");
    _null_.put(GL_TEXTURE_BINDING_1D, "GL_TEXTURE_BINDING_1D");
    _null_.put(GL_STENCIL_BUFFER_BIT5_QCOM, "GL_STENCIL_BUFFER_BIT5_QCOM");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_6x5_KHR, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR");
    _null_.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    _null_.put(GL_STENCIL_BACK_PASS_DEPTH_FAIL, "GL_STENCIL_BACK_PASS_DEPTH_FAIL");
    _null_.put(GL_CURRENT_RASTER_POSITION_VALID, "GL_CURRENT_RASTER_POSITION_VALID");
    _null_.put(GL_SELECTION_BUFFER_POINTER, "GL_SELECTION_BUFFER_POINTER");
    _null_.put(GL_LINE_RESET_TOKEN, "GL_LINE_RESET_TOKEN");
    _null_.put(GL_SYNC_CONDITION, "GL_SYNC_CONDITION");
    _null_.put(GL_QUERY_BUFFER_AMD, "GL_QUERY_BUFFER_AMD");
    _null_.put(GL_TEXTURE_BINDING_BUFFER, "GL_TEXTURE_BINDING_BUFFER");
    _null_.put(GL_TEXTURE_TARGET_QCOM, "GL_TEXTURE_TARGET_QCOM");
    _null_.put(GL_UNPACK_LSB_FIRST, "GL_UNPACK_LSB_FIRST");
    _null_.put(GL_TEXTURE_BINDING_2D, "GL_TEXTURE_BINDING_2D");
    _null_.put(GL_LEFT, "GL_LEFT");
    _null_.put(GL_COMPRESSED_LUMINANCE_ALPHA, "GL_COMPRESSED_LUMINANCE_ALPHA");
    _null_.put(GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM, "GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM");
    _null_.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS");
    _null_.put(GL_CURRENT_RASTER_TEXTURE_COORDS, "GL_CURRENT_RASTER_TEXTURE_COORDS");
    _null_.put(GL_RGBA16, "GL_RGBA16");
    _null_.put(GL_RG8I, "GL_RG8I");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x12, "GL_COMPRESSED_RGBA_ASTC_12x12");
    _null_.put(GL_VIEW_CLASS_48_BITS, "GL_VIEW_CLASS_48_BITS");
    _null_.put(GL_PREFER_DOUBLEBUFFER_HINT_PGI, "GL_PREFER_DOUBLEBUFFER_HINT_PGI");
    _null_.put(GL_RGBA12, "GL_RGBA12");
    _null_.put(GL_STENCIL_BITS, "GL_STENCIL_BITS");
    _null_.put(GL_PERFQUERY_COUNTER_EVENT_INTEL, "GL_PERFQUERY_COUNTER_EVENT_INTEL");
    _null_.put(GL_ALPHA_FLOAT32_APPLE, "GL_ALPHA_FLOAT32_APPLE");
    _null_.put(GL_READ_BUFFER, "GL_READ_BUFFER");
    _null_.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
    _null_.put(GL_TEXTURE_BINDING_3D, "GL_TEXTURE_BINDING_3D");
    _null_.put(GL_BLEND_DST_RGB, "GL_BLEND_DST_RGB");
    _null_.put(GL_FRAMEBUFFER_BINDING_ANGLE, "GL_FRAMEBUFFER_BINDING_ANGLE");
    _null_.put(GL_DUAL_ALPHA8_SGIS, "GL_DUAL_ALPHA8_SGIS");
    _null_.put(GL_REFLECTION_MAP, "GL_REFLECTION_MAP");
  }
  private static void _null_54() {
    _null_.put(GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL, "GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL");
    _null_.put(GL_BLEND, "GL_BLEND");
    _null_.put(GL_DEPTH_STENCIL_TEXTURE_MODE, "GL_DEPTH_STENCIL_TEXTURE_MODE");
    _null_.put(GL_POINT_SMOOTH, "GL_POINT_SMOOTH");
    _null_.put(GL_SEPARATE_SPECULAR_COLOR, "GL_SEPARATE_SPECULAR_COLOR");
    _null_.put(GL_FOG_COORDINATE_ARRAY_TYPE, "GL_FOG_COORDINATE_ARRAY_TYPE");
    _null_.put(GL_TEXTURE_CUBE_MAP_ARRAY, "GL_TEXTURE_CUBE_MAP_ARRAY");
    _null_.put(GL_NUM_DOWNSAMPLE_SCALES_IMG, "GL_NUM_DOWNSAMPLE_SCALES_IMG");
    _null_.put(GL_CLIP_PLANE2_IMG, "GL_CLIP_PLANE2_IMG");
    _null_.put(GL_FRAGMENT_TEXTURE, "GL_FRAGMENT_TEXTURE");
    _null_.put(GL_SHADER_IMAGE_ATOMIC, "GL_SHADER_IMAGE_ATOMIC");
    _null_.put(GL_TRANSFORM_FEEDBACK_OVERFLOW, "GL_TRANSFORM_FEEDBACK_OVERFLOW");
    _null_.put(GL_LINE_WIDTH_RANGE, "GL_LINE_WIDTH_RANGE");
    _null_.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    _null_.put(GL_PRIMITIVES_GENERATED, "GL_PRIMITIVES_GENERATED");
    _null_.put(GL_POINT_BIT, "GL_POINT_BIT");
    _null_.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    _null_.put(GL_INVERTED_SCREEN_W_REND, "GL_INVERTED_SCREEN_W_REND");
    _null_.put(GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_TEXTURE_LEQUAL_R_SGIX, "GL_TEXTURE_LEQUAL_R_SGIX");
    _null_.put(GL_INTENSITY8_SNORM, "GL_INTENSITY8_SNORM");
    _null_.put(GL_CONTEXT_LOST, "GL_CONTEXT_LOST");
    _null_.put(GL_UNIFORM_BUFFER_BINDING, "GL_UNIFORM_BUFFER_BINDING");
    _null_.put(GL_COLOR_TABLE_WIDTH, "GL_COLOR_TABLE_WIDTH");
    _null_.put(GL_COMPRESSED_RGBA_ASTC_12x10, "GL_COMPRESSED_RGBA_ASTC_12x10");
    _null_.put(GL_PERFQUERY_GLOBAL_CONTEXT_INTEL, "GL_PERFQUERY_GLOBAL_CONTEXT_INTEL");
    _null_.put(GL_IMAGE_CLASS_4_X_8, "GL_IMAGE_CLASS_4_X_8");
    _null_.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS");
    _null_.put(GL_NEAREST, "GL_NEAREST");
    _null_.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    _null_.put(GL_MAT_SHININESS_BIT_PGI, "GL_MAT_SHININESS_BIT_PGI");
    _null_.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    _null_.put(GL_ATTRIB_STACK_DEPTH, "GL_ATTRIB_STACK_DEPTH");
    _null_.put(GL_COLOR_TABLE_INTENSITY_SIZE_SGI, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI");
    _null_.put(GL_LIST_PRIORITY_SGIX, "GL_LIST_PRIORITY_SGIX");
    _null_.put(GL_SYNC_CONDITION_APPLE, "GL_SYNC_CONDITION_APPLE");
    _null_.put(GL_COLOR_BUFFER_BIT1_QCOM, "GL_COLOR_BUFFER_BIT1_QCOM");
    _null_.put(GL_SRC2_RGB, "GL_SRC2_RGB");
    _null_.put(GL_HISTOGRAM_BLUE_SIZE, "GL_HISTOGRAM_BLUE_SIZE");
    _null_.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    _null_.put(GL_RGBA8UI, "GL_RGBA8UI");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    _null_.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    _null_.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI");
    _null_.put(GL_OCCLUSION_TEST_RESULT_HP, "GL_OCCLUSION_TEST_RESULT_HP");
    _null_.put(GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL, "GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL");
    _null_.put(GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR, "GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR");
    _null_.put(GL_TEXTURE_SAMPLES_IMG, "GL_TEXTURE_SAMPLES_IMG");
    _null_.put(GL_GREATER, "GL_GREATER");
  }
  private static void _null_55() {
    _null_.put(GL_VIRTUAL_PAGE_SIZE_Z_AMD, "GL_VIRTUAL_PAGE_SIZE_Z_AMD");
    _null_.put(GL_TEXTURE_COMPRESSED_BLOCK_WIDTH, "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH");
    _null_.put(GL_TEXTURE_USAGE_ANGLE, "GL_TEXTURE_USAGE_ANGLE");
    _null_.put(GL_TRACE_OPERATIONS_BIT_MESA, "GL_TRACE_OPERATIONS_BIT_MESA");
    _null_.put(GL_CURRENT_RASTER_INDEX, "GL_CURRENT_RASTER_INDEX");
    _null_.put(GL_DEBUG_SOURCE_APPLICATION_KHR, "GL_DEBUG_SOURCE_APPLICATION_KHR");
    _null_.put(GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW");
    _null_.put(GL_SRC1_ALPHA, "GL_SRC1_ALPHA");
    _null_.put(GL_SHADER_STORAGE_BLOCK, "GL_SHADER_STORAGE_BLOCK");
    _null_.put(GL_HISTOGRAM_GREEN_SIZE, "GL_HISTOGRAM_GREEN_SIZE");
    _null_.put(GL_MAX_SAMPLE_MASK_WORDS, "GL_MAX_SAMPLE_MASK_WORDS");
    _null_.put(GL_ALPHA_TEST_REF, "GL_ALPHA_TEST_REF");
    _null_.put(GL_MAX_FRAMEBUFFER_SAMPLES, "GL_MAX_FRAMEBUFFER_SAMPLES");
    _null_.put(GL_HIGH_FLOAT, "GL_HIGH_FLOAT");
    _null_.put(GL_GCCSO_SHADER_BINARY_FJ, "GL_GCCSO_SHADER_BINARY_FJ");
    _null_.put(GL_LUMINANCE4_ALPHA4, "GL_LUMINANCE4_ALPHA4");
    _null_.put(GL_DEPTH32F_STENCIL8, "GL_DEPTH32F_STENCIL8");
    _null_.put(GL_MAX_SAMPLES_IMG, "GL_MAX_SAMPLES_IMG");
    _null_.put(GL_RENDERBUFFER_RED_SIZE, "GL_RENDERBUFFER_RED_SIZE");
    _null_.put(GL_BGRA, "GL_BGRA");
    _null_.put(GL_MAX_SERVER_WAIT_TIMEOUT_APPLE, "GL_MAX_SERVER_WAIT_TIMEOUT_APPLE");
    _null_.put(GL_MAX_CLIP_DISTANCES_APPLE, "GL_MAX_CLIP_DISTANCES_APPLE");
    _null_.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
    _null_.put(GL_UNPACK_ALIGNMENT, "GL_UNPACK_ALIGNMENT");
    _null_.put(GL_IMAGE_BINDING_LEVEL, "GL_IMAGE_BINDING_LEVEL");
    _null_.put(GL_PERFQUERY_WAIT_INTEL, "GL_PERFQUERY_WAIT_INTEL");
    _null_.put(GL_QUAD_INTENSITY4_SGIS, "GL_QUAD_INTENSITY4_SGIS");
    _null_.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    _null_.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    _null_.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    _null_.put(GL_COLOR_ARRAY, "GL_COLOR_ARRAY");
    _null_.put(GL_EXCLUSION, "GL_EXCLUSION");
    _null_.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    _null_.put(GL_DEPTH_STENCIL_MESA, "GL_DEPTH_STENCIL_MESA");
    _null_.put(GL_CONTINUOUS_AMD, "GL_CONTINUOUS_AMD");
    _null_.put(GL_POLYGON_STIPPLE_BIT, "GL_POLYGON_STIPPLE_BIT");
    _null_.put(GL_BUFFER_MAP_OFFSET, "GL_BUFFER_MAP_OFFSET");
    _null_.put(GL_WRITEONLY_RENDERING_QCOM, "GL_WRITEONLY_RENDERING_QCOM");
    _null_.put(GL_ALPHA_TEST_REF_QCOM, "GL_ALPHA_TEST_REF_QCOM");
    _null_.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
    _null_.put(GL_SAMPLE_ALPHA_TO_COVERAGE, "GL_SAMPLE_ALPHA_TO_COVERAGE");
    _null_.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS");
    _null_.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR");
    _null_.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
    _null_.put(GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS");
    _null_.put(GL_TRIANGLE_STRIP, "GL_TRIANGLE_STRIP");
    _null_.put(GL_MAX_TESS_PATCH_COMPONENTS, "GL_MAX_TESS_PATCH_COMPONENTS");
    _null_.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
    _null_.put(GL_RGB10_A2UI, "GL_RGB10_A2UI");
    _null_.put(GL_SAMPLE_ALPHA_TO_ONE, "GL_SAMPLE_ALPHA_TO_ONE");
    _null_.put(GL_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY");
    _null_.put(GL_REPLACE_VALUE_AMD, "GL_REPLACE_VALUE_AMD");
    _null_.put(GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS, "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS");
    _null_.put(GL_VERTEX_ARRAY_RANGE_POINTER_APPLE, "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE");
  }
  private static void _null_56() {
    _null_.put(GL_SAMPLER_1D_ARRAY, "GL_SAMPLER_1D_ARRAY");
    _null_.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    _null_.put(GL_INTERLACE_READ_OML, "GL_INTERLACE_READ_OML");
    _null_.put(GL_CPU_OPTIMIZED_QCOM, "GL_CPU_OPTIMIZED_QCOM");
    _null_.put(GL_TRANSFORM_FEEDBACK_BUFFER_START, "GL_TRANSFORM_FEEDBACK_BUFFER_START");
    _null_.put(GL_ZERO, "GL_ZERO");
    _null_.put(GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE");
    _null_.put(GL_COMPUTE_WORK_GROUP_SIZE, "GL_COMPUTE_WORK_GROUP_SIZE");
    _null_.put(GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS");
    _null_.put(GL_RG16_SNORM, "GL_RG16_SNORM");
    _null_.put(GL_COPY_WRITE_BUFFER_BINDING, "GL_COPY_WRITE_BUFFER_BINDING");
    _null_.put(GL_CONDITION_SATISFIED, "GL_CONDITION_SATISFIED");
    _null_.put(GL_TRACE_NAME_MESA, "GL_TRACE_NAME_MESA");
    _null_.put(GL_TEXCOORD2_BIT_PGI, "GL_TEXCOORD2_BIT_PGI");
    _null_.put(GL_PERFMON_RESULT_SIZE_AMD, "GL_PERFMON_RESULT_SIZE_AMD");
    _null_.put(GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX");
    _null_.put(GL_IMAGE_CUBIC_WEIGHT_HP, "GL_IMAGE_CUBIC_WEIGHT_HP");
    _null_.put(GL_FLOAT_MAT4, "GL_FLOAT_MAT4");
    _null_.put(GL_FLOAT_MAT3, "GL_FLOAT_MAT3");
    _null_.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    _null_.put(GL_FLOAT_MAT2, "GL_FLOAT_MAT2");
    _null_.put(GL_IMAGE_TRANSLATE_X_HP, "GL_IMAGE_TRANSLATE_X_HP");
    _null_.put(GL_CONTEXT_RELEASE_BEHAVIOR_KHR, "GL_CONTEXT_RELEASE_BEHAVIOR_KHR");
    _null_.put(GL_LOCATION, "GL_LOCATION");
    _null_.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
    _null_.put(GL_SAMPLER_BINDING, "GL_SAMPLER_BINDING");
    _null_.put(GL_SOURCE2_RGB, "GL_SOURCE2_RGB");
    _null_.put(GL_DEPTH24_STENCIL8, "GL_DEPTH24_STENCIL8");
    _null_.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST");
    _null_.put(GL_STENCIL, "GL_STENCIL");
    _null_.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    _null_.put(GL_EMISSION, "GL_EMISSION");
    _null_.put(GL_LAYOUT_DEFAULT_INTEL, "GL_LAYOUT_DEFAULT_INTEL");
    _null_.put(GL_PROVOKING_VERTEX, "GL_PROVOKING_VERTEX");
    _null_.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER");
    _null_.put(GL_N3F_V3F, "GL_N3F_V3F");
    _null_.put(GL_INTERNALFORMAT_RED_TYPE, "GL_INTERNALFORMAT_RED_TYPE");
    _null_.put(GL_RESAMPLE_DECIMATE_SGIX, "GL_RESAMPLE_DECIMATE_SGIX");
    _null_.put(GL_FLOAT, "GL_FLOAT");
    _null_.put(GL_INTERNALFORMAT_ALPHA_TYPE, "GL_INTERNALFORMAT_ALPHA_TYPE");
    _null_.put(GL_FRAGMENT_ALPHA_MODULATE_IMG, "GL_FRAGMENT_ALPHA_MODULATE_IMG");
    _null_.put(GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR");
    _null_.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    _null_.put(GL_CUBIC_HP, "GL_CUBIC_HP");
    _null_.put(GL_MAT_DIFFUSE_BIT_PGI, "GL_MAT_DIFFUSE_BIT_PGI");
    _null_.put(GL_POLYGON, "GL_POLYGON");
    _null_.put(GL_ATOMIC_COUNTER_BUFFER_BINDING, "GL_ATOMIC_COUNTER_BUFFER_BINDING");
    _null_.put(GL_STENCIL_FUNC, "GL_STENCIL_FUNC");
  }
  private static void _null_57() {
    _null_.put(GL_COLOR_INDEXES, "GL_COLOR_INDEXES");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR");
    _null_.put(GL_EDGE_FLAG_ARRAY_LIST_IBM, "GL_EDGE_FLAG_ARRAY_LIST_IBM");
    _null_.put(GL_BINNING_CONTROL_HINT_QCOM, "GL_BINNING_CONTROL_HINT_QCOM");
    _null_.put(GL_LOCATION_COMPONENT, "GL_LOCATION_COMPONENT");
    _null_.put(GL_AUX0, "GL_AUX0");
    _null_.put(GL_AUX1, "GL_AUX1");
    _null_.put(GL_AMBIENT, "GL_AMBIENT");
    _null_.put(GL_TEXTURE_ALPHA_TYPE, "GL_TEXTURE_ALPHA_TYPE");
    _null_.put(GL_VERTEX_DATA_HINT_PGI, "GL_VERTEX_DATA_HINT_PGI");
    _null_.put(GL_AUX2, "GL_AUX2");
    _null_.put(GL_AUX3, "GL_AUX3");
    _null_.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED, "GL_VERTEX_ATTRIB_ARRAY_ENABLED");
    _null_.put(GL_SCREEN_KHR, "GL_SCREEN_KHR");
    _null_.put(GL_MULTISAMPLE_BUFFER_BIT5_QCOM, "GL_MULTISAMPLE_BUFFER_BIT5_QCOM");
    _null_.put(GL_PARALLEL_ARRAYS_INTEL, "GL_PARALLEL_ARRAYS_INTEL");
    _null_.put(GL_BLOCK_INDEX, "GL_BLOCK_INDEX");
    _null_.put(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS");
    _null_.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG");
    _null_.put(GL_TEXTURE_MIN_LOD_SGIS, "GL_TEXTURE_MIN_LOD_SGIS");
    _null_.put(GL_LUMINANCE8_ALPHA8_SNORM, "GL_LUMINANCE8_ALPHA8_SNORM");
    _null_.put(GL_2D, "GL_2D");
    _null_.put(GL_COLOR_TABLE_GREEN_SIZE, "GL_COLOR_TABLE_GREEN_SIZE");
    _null_.put(GL_PIXEL_MAP_I_TO_I_SIZE, "GL_PIXEL_MAP_I_TO_I_SIZE");
    _null_.put(GL_MALI_SHADER_BINARY_ARM, "GL_MALI_SHADER_BINARY_ARM");
    _null_.put(GL_MAX_COMBINED_UNIFORM_BLOCKS, "GL_MAX_COMBINED_UNIFORM_BLOCKS");
    _null_.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    _null_.put(GL_MAX_NUM_COMPATIBLE_SUBROUTINES, "GL_MAX_NUM_COMPATIBLE_SUBROUTINES");
    _null_.put(GL_CLIENT_ATTRIB_STACK_DEPTH, "GL_CLIENT_ATTRIB_STACK_DEPTH");
    _null_.put(GL_UNSIGNALED_APPLE, "GL_UNSIGNALED_APPLE");
    _null_.put(GL_READ_PIXELS_FORMAT, "GL_READ_PIXELS_FORMAT");
    _null_.put(GL_STREAM_READ, "GL_STREAM_READ");
    _null_.put(GL_ADD_SIGNED, "GL_ADD_SIGNED");
  }
  public static Map<Integer, String> _null_() {
    if (_null_ != null)
      return _null_;
    _null_ = new HashMap<Integer, String>(2820);
    _null_0();
    _null_1();
    _null_2();
    _null_3();
    _null_4();
    _null_5();
    _null_6();
    _null_7();
    _null_8();
    _null_9();
    _null_10();
    _null_11();
    _null_12();
    _null_13();
    _null_14();
    _null_15();
    _null_16();
    _null_17();
    _null_18();
    _null_19();
    _null_20();
    _null_21();
    _null_22();
    _null_23();
    _null_24();
    _null_25();
    _null_26();
    _null_27();
    _null_28();
    _null_29();
    _null_30();
    _null_31();
    _null_32();
    _null_33();
    _null_34();
    _null_35();
    _null_36();
    _null_37();
    _null_38();
    _null_39();
    _null_40();
    _null_41();
    _null_42();
    _null_43();
    _null_44();
    _null_45();
    _null_46();
    _null_47();
    _null_48();
    _null_49();
    _null_50();
    _null_51();
    _null_52();
    _null_53();
    _null_54();
    _null_55();
    _null_56();
    _null_57();
    return _null_;
  }
  private static Map<Integer, String> CullFaceMode;
  private static void CullFaceMode0() {
    CullFaceMode.put(GL_BACK, "GL_BACK");
    CullFaceMode.put(GL_FRONT, "GL_FRONT");
    CullFaceMode.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static Map<Integer, String> CullFaceMode() {
    if (CullFaceMode != null)
      return CullFaceMode;
    CullFaceMode = new HashMap<Integer, String>(3);
    CullFaceMode0();
    return CullFaceMode;
  }
  private static Map<Integer, String> PolygonMode;
  private static void PolygonMode0() {
    PolygonMode.put(GL_POINT, "GL_POINT");
    PolygonMode.put(GL_LINE, "GL_LINE");
    PolygonMode.put(GL_FILL, "GL_FILL");
  }
  public static Map<Integer, String> PolygonMode() {
    if (PolygonMode != null)
      return PolygonMode;
    PolygonMode = new HashMap<Integer, String>(3);
    PolygonMode0();
    return PolygonMode;
  }
  private static Map<Integer, String> TextureEnvParameter;
  private static void TextureEnvParameter0() {
    TextureEnvParameter.put(GL_TEXTURE_ENV_MODE, "GL_TEXTURE_ENV_MODE");
    TextureEnvParameter.put(GL_TEXTURE_ENV_COLOR, "GL_TEXTURE_ENV_COLOR");
  }
  public static Map<Integer, String> TextureEnvParameter() {
    if (TextureEnvParameter != null)
      return TextureEnvParameter;
    TextureEnvParameter = new HashMap<Integer, String>(2);
    TextureEnvParameter0();
    return TextureEnvParameter;
  }
  private static Map<Integer, String> AtomicCounterBufferPName;
  private static void AtomicCounterBufferPName0() {
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE, "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_BINDING, "GL_ATOMIC_COUNTER_BUFFER_BINDING");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS");
    AtomicCounterBufferPName.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER");
  }
  public static Map<Integer, String> AtomicCounterBufferPName() {
    if (AtomicCounterBufferPName != null)
      return AtomicCounterBufferPName;
    AtomicCounterBufferPName = new HashMap<Integer, String>(10);
    AtomicCounterBufferPName0();
    return AtomicCounterBufferPName;
  }
  private static Map<Integer, String> GetPointervPName;
  private static void GetPointervPName0() {
    GetPointervPName.put(GL_DEBUG_CALLBACK_FUNCTION, "GL_DEBUG_CALLBACK_FUNCTION");
    GetPointervPName.put(GL_COLOR_ARRAY_POINTER, "GL_COLOR_ARRAY_POINTER");
    GetPointervPName.put(GL_INDEX_ARRAY_POINTER, "GL_INDEX_ARRAY_POINTER");
    GetPointervPName.put(GL_VERTEX_ARRAY_POINTER, "GL_VERTEX_ARRAY_POINTER");
    GetPointervPName.put(GL_FEEDBACK_BUFFER_POINTER, "GL_FEEDBACK_BUFFER_POINTER");
    GetPointervPName.put(GL_TEXTURE_COORD_ARRAY_POINTER, "GL_TEXTURE_COORD_ARRAY_POINTER");
    GetPointervPName.put(GL_SELECTION_BUFFER_POINTER, "GL_SELECTION_BUFFER_POINTER");
    GetPointervPName.put(GL_EDGE_FLAG_ARRAY_POINTER, "GL_EDGE_FLAG_ARRAY_POINTER");
    GetPointervPName.put(GL_NORMAL_ARRAY_POINTER, "GL_NORMAL_ARRAY_POINTER");
    GetPointervPName.put(GL_INSTRUMENT_BUFFER_POINTER_SGIX, "GL_INSTRUMENT_BUFFER_POINTER_SGIX");
    GetPointervPName.put(GL_DEBUG_CALLBACK_USER_PARAM, "GL_DEBUG_CALLBACK_USER_PARAM");
  }
  public static Map<Integer, String> GetPointervPName() {
    if (GetPointervPName != null)
      return GetPointervPName;
    GetPointervPName = new HashMap<Integer, String>(11);
    GetPointervPName0();
    return GetPointervPName;
  }
  private static Map<Integer, String> TransformFeedbackPName;
  private static void TransformFeedbackPName0() {
    TransformFeedbackPName.put(GL_TRANSFORM_FEEDBACK_ACTIVE, "GL_TRANSFORM_FEEDBACK_ACTIVE");
    TransformFeedbackPName.put(GL_TRANSFORM_FEEDBACK_PAUSED, "GL_TRANSFORM_FEEDBACK_PAUSED");
    TransformFeedbackPName.put(GL_TRANSFORM_FEEDBACK_BUFFER_START, "GL_TRANSFORM_FEEDBACK_BUFFER_START");
    TransformFeedbackPName.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING");
    TransformFeedbackPName.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE");
  }
  public static Map<Integer, String> TransformFeedbackPName() {
    if (TransformFeedbackPName != null)
      return TransformFeedbackPName;
    TransformFeedbackPName = new HashMap<Integer, String>(5);
    TransformFeedbackPName0();
    return TransformFeedbackPName;
  }
  private static Map<Integer, String> ExternalHandleType;
  private static void ExternalHandleType0() {
  }
  public static Map<Integer, String> ExternalHandleType() {
    if (ExternalHandleType != null)
      return ExternalHandleType;
    ExternalHandleType = new HashMap<Integer, String>(0);
    ExternalHandleType0();
    return ExternalHandleType;
  }
  private static Map<Integer, String> ColorTableTargetSGI;
  private static void ColorTableTargetSGI0() {
    ColorTableTargetSGI.put(GL_PROXY_COLOR_TABLE, "GL_PROXY_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_PROXY_COLOR_TABLE_SGI, "GL_PROXY_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_TEXTURE_COLOR_TABLE_SGI, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI");
    ColorTableTargetSGI.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
    ColorTableTargetSGI.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
  }
  public static Map<Integer, String> ColorTableTargetSGI() {
    if (ColorTableTargetSGI != null)
      return ColorTableTargetSGI;
    ColorTableTargetSGI = new HashMap<Integer, String>(14);
    ColorTableTargetSGI0();
    return ColorTableTargetSGI;
  }
  private static Map<Integer, String> VertexBufferObjectParameter;
  private static void VertexBufferObjectParameter0() {
    VertexBufferObjectParameter.put(GL_BUFFER_MAPPED, "GL_BUFFER_MAPPED");
    VertexBufferObjectParameter.put(GL_BUFFER_MAP_OFFSET, "GL_BUFFER_MAP_OFFSET");
    VertexBufferObjectParameter.put(GL_BUFFER_SIZE, "GL_BUFFER_SIZE");
    VertexBufferObjectParameter.put(GL_BUFFER_STORAGE_FLAGS, "GL_BUFFER_STORAGE_FLAGS");
    VertexBufferObjectParameter.put(GL_BUFFER_USAGE, "GL_BUFFER_USAGE");
    VertexBufferObjectParameter.put(GL_BUFFER_IMMUTABLE_STORAGE, "GL_BUFFER_IMMUTABLE_STORAGE");
    VertexBufferObjectParameter.put(GL_BUFFER_MAP_LENGTH, "GL_BUFFER_MAP_LENGTH");
    VertexBufferObjectParameter.put(GL_BUFFER_ACCESS, "GL_BUFFER_ACCESS");
    VertexBufferObjectParameter.put(GL_BUFFER_ACCESS_FLAGS, "GL_BUFFER_ACCESS_FLAGS");
  }
  public static Map<Integer, String> VertexBufferObjectParameter() {
    if (VertexBufferObjectParameter != null)
      return VertexBufferObjectParameter;
    VertexBufferObjectParameter = new HashMap<Integer, String>(9);
    VertexBufferObjectParameter0();
    return VertexBufferObjectParameter;
  }
  private static Map<Integer, String> PrimitiveType;
  private static void PrimitiveType0() {
    PrimitiveType.put(GL_LINE_LOOP, "GL_LINE_LOOP");
    PrimitiveType.put(GL_LINE_STRIP, "GL_LINE_STRIP");
    PrimitiveType.put(GL_QUAD_STRIP, "GL_QUAD_STRIP");
    PrimitiveType.put(GL_TRIANGLES, "GL_TRIANGLES");
    PrimitiveType.put(GL_QUADS, "GL_QUADS");
    PrimitiveType.put(GL_TRIANGLES_ADJACENCY, "GL_TRIANGLES_ADJACENCY");
    PrimitiveType.put(GL_POLYGON, "GL_POLYGON");
    PrimitiveType.put(GL_LINES_ADJACENCY, "GL_LINES_ADJACENCY");
    PrimitiveType.put(GL_TRIANGLE_FAN, "GL_TRIANGLE_FAN");
    PrimitiveType.put(GL_LINE_STRIP_ADJACENCY, "GL_LINE_STRIP_ADJACENCY");
    PrimitiveType.put(GL_PATCHES, "GL_PATCHES");
    PrimitiveType.put(GL_TRIANGLE_STRIP_ADJACENCY, "GL_TRIANGLE_STRIP_ADJACENCY");
    PrimitiveType.put(GL_TRIANGLE_STRIP, "GL_TRIANGLE_STRIP");
    PrimitiveType.put(GL_POINTS, "GL_POINTS");
    PrimitiveType.put(GL_LINES, "GL_LINES");
  }
  public static Map<Integer, String> PrimitiveType() {
    if (PrimitiveType != null)
      return PrimitiveType;
    PrimitiveType = new HashMap<Integer, String>(15);
    PrimitiveType0();
    return PrimitiveType;
  }
  private static Map<Integer, String> AttribMask;
  private static void AttribMask0() {
    AttribMask.put(GL_TRANSFORM_BIT, "GL_TRANSFORM_BIT");
    AttribMask.put(GL_ENABLE_BIT, "GL_ENABLE_BIT");
    AttribMask.put(GL_MULTISAMPLE_BIT, "GL_MULTISAMPLE_BIT");
    AttribMask.put(GL_ALL_ATTRIB_BITS, "GL_ALL_ATTRIB_BITS");
    AttribMask.put(GL_ACCUM_BUFFER_BIT, "GL_ACCUM_BUFFER_BIT");
    AttribMask.put(GL_VIEWPORT_BIT, "GL_VIEWPORT_BIT");
    AttribMask.put(GL_EVAL_BIT, "GL_EVAL_BIT");
    AttribMask.put(GL_SCISSOR_BIT, "GL_SCISSOR_BIT");
    AttribMask.put(GL_STENCIL_BUFFER_BIT, "GL_STENCIL_BUFFER_BIT");
    AttribMask.put(GL_HINT_BIT, "GL_HINT_BIT");
    AttribMask.put(GL_LIGHTING_BIT, "GL_LIGHTING_BIT");
    AttribMask.put(GL_LINE_BIT, "GL_LINE_BIT");
    AttribMask.put(GL_POINT_BIT, "GL_POINT_BIT");
    AttribMask.put(GL_PIXEL_MODE_BIT, "GL_PIXEL_MODE_BIT");
    AttribMask.put(GL_MULTISAMPLE_BIT_3DFX, "GL_MULTISAMPLE_BIT_3DFX");
    AttribMask.put(GL_DEPTH_BUFFER_BIT, "GL_DEPTH_BUFFER_BIT");
    AttribMask.put(GL_POLYGON_BIT, "GL_POLYGON_BIT");
    AttribMask.put(GL_COLOR_BUFFER_BIT, "GL_COLOR_BUFFER_BIT");
    AttribMask.put(GL_FOG_BIT, "GL_FOG_BIT");
    AttribMask.put(GL_TEXTURE_BIT, "GL_TEXTURE_BIT");
    AttribMask.put(GL_POLYGON_STIPPLE_BIT, "GL_POLYGON_STIPPLE_BIT");
    AttribMask.put(GL_LIST_BIT, "GL_LIST_BIT");
    AttribMask.put(GL_CURRENT_BIT, "GL_CURRENT_BIT");
  }
  public static Map<Integer, String> AttribMask() {
    if (AttribMask != null)
      return AttribMask;
    AttribMask = new HashMap<Integer, String>(23);
    AttribMask0();
    return AttribMask;
  }
  private static Map<Integer, String> LogicOp;
  private static void LogicOp0() {
    LogicOp.put(GL_XOR, "GL_XOR");
    LogicOp.put(GL_AND_INVERTED, "GL_AND_INVERTED");
    LogicOp.put(GL_EQUIV, "GL_EQUIV");
    LogicOp.put(GL_COPY, "GL_COPY");
    LogicOp.put(GL_NAND, "GL_NAND");
    LogicOp.put(GL_SET, "GL_SET");
    LogicOp.put(GL_CLEAR, "GL_CLEAR");
    LogicOp.put(GL_OR, "GL_OR");
    LogicOp.put(GL_OR_REVERSE, "GL_OR_REVERSE");
    LogicOp.put(GL_COPY_INVERTED, "GL_COPY_INVERTED");
    LogicOp.put(GL_NOR, "GL_NOR");
    LogicOp.put(GL_OR_INVERTED, "GL_OR_INVERTED");
    LogicOp.put(GL_NOOP, "GL_NOOP");
    LogicOp.put(GL_INVERT, "GL_INVERT");
    LogicOp.put(GL_AND, "GL_AND");
    LogicOp.put(GL_AND_REVERSE, "GL_AND_REVERSE");
  }
  public static Map<Integer, String> LogicOp() {
    if (LogicOp != null)
      return LogicOp;
    LogicOp = new HashMap<Integer, String>(16);
    LogicOp0();
    return LogicOp;
  }
  private static Map<Integer, String> QueryObjectParameterName;
  private static void QueryObjectParameterName0() {
    QueryObjectParameterName.put(GL_QUERY_RESULT_AVAILABLE, "GL_QUERY_RESULT_AVAILABLE");
    QueryObjectParameterName.put(GL_QUERY_TARGET, "GL_QUERY_TARGET");
    QueryObjectParameterName.put(GL_QUERY_RESULT, "GL_QUERY_RESULT");
    QueryObjectParameterName.put(GL_QUERY_RESULT_NO_WAIT, "GL_QUERY_RESULT_NO_WAIT");
  }
  public static Map<Integer, String> QueryObjectParameterName() {
    if (QueryObjectParameterName != null)
      return QueryObjectParameterName;
    QueryObjectParameterName = new HashMap<Integer, String>(4);
    QueryObjectParameterName0();
    return QueryObjectParameterName;
  }
  private static Map<Integer, String> PathMetricMask;
  private static void PathMetricMask0() {
  }
  public static Map<Integer, String> PathMetricMask() {
    if (PathMetricMask != null)
      return PathMetricMask;
    PathMetricMask = new HashMap<Integer, String>(0);
    PathMetricMask0();
    return PathMetricMask;
  }
  private static Map<Integer, String> MemoryBarrierMask;
  private static void MemoryBarrierMask0() {
    MemoryBarrierMask.put(GL_TEXTURE_UPDATE_BARRIER_BIT, "GL_TEXTURE_UPDATE_BARRIER_BIT");
    MemoryBarrierMask.put(GL_PIXEL_BUFFER_BARRIER_BIT, "GL_PIXEL_BUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_SHADER_STORAGE_BARRIER_BIT, "GL_SHADER_STORAGE_BARRIER_BIT");
    MemoryBarrierMask.put(GL_BUFFER_UPDATE_BARRIER_BIT, "GL_BUFFER_UPDATE_BARRIER_BIT");
    MemoryBarrierMask.put(GL_ALL_BARRIER_BITS, "GL_ALL_BARRIER_BITS");
    MemoryBarrierMask.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT");
    MemoryBarrierMask.put(GL_QUERY_BUFFER_BARRIER_BIT, "GL_QUERY_BUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_TEXTURE_FETCH_BARRIER_BIT, "GL_TEXTURE_FETCH_BARRIER_BIT");
    MemoryBarrierMask.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT");
    MemoryBarrierMask.put(GL_ATOMIC_COUNTER_BARRIER_BIT, "GL_ATOMIC_COUNTER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_FRAMEBUFFER_BARRIER_BIT, "GL_FRAMEBUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_COMMAND_BARRIER_BIT, "GL_COMMAND_BARRIER_BIT");
    MemoryBarrierMask.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT");
    MemoryBarrierMask.put(GL_UNIFORM_BARRIER_BIT, "GL_UNIFORM_BARRIER_BIT");
    MemoryBarrierMask.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT");
    MemoryBarrierMask.put(GL_ELEMENT_ARRAY_BARRIER_BIT, "GL_ELEMENT_ARRAY_BARRIER_BIT");
  }
  public static Map<Integer, String> MemoryBarrierMask() {
    if (MemoryBarrierMask != null)
      return MemoryBarrierMask;
    MemoryBarrierMask = new HashMap<Integer, String>(16);
    MemoryBarrierMask0();
    return MemoryBarrierMask;
  }
  private static Map<Integer, String> VertexAttribEnum;
  private static void VertexAttribEnum0() {
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED, "GL_VERTEX_ATTRIB_ARRAY_ENABLED");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_TYPE, "GL_VERTEX_ATTRIB_ARRAY_TYPE");
    VertexAttribEnum.put(GL_CURRENT_VERTEX_ATTRIB, "GL_CURRENT_VERTEX_ATTRIB");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER, "GL_VERTEX_ATTRIB_ARRAY_INTEGER");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_SIZE, "GL_VERTEX_ATTRIB_ARRAY_SIZE");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE, "GL_VERTEX_ATTRIB_ARRAY_STRIDE");
    VertexAttribEnum.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED");
  }
  public static Map<Integer, String> VertexAttribEnum() {
    if (VertexAttribEnum != null)
      return VertexAttribEnum;
    VertexAttribEnum = new HashMap<Integer, String>(9);
    VertexAttribEnum0();
    return VertexAttribEnum;
  }
  private static Map<Integer, String> PixelTexGenParameterNameSGIS;
  private static void PixelTexGenParameterNameSGIS0() {
    PixelTexGenParameterNameSGIS.put(GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS");
    PixelTexGenParameterNameSGIS.put(GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS");
  }
  public static Map<Integer, String> PixelTexGenParameterNameSGIS() {
    if (PixelTexGenParameterNameSGIS != null)
      return PixelTexGenParameterNameSGIS;
    PixelTexGenParameterNameSGIS = new HashMap<Integer, String>(2);
    PixelTexGenParameterNameSGIS0();
    return PixelTexGenParameterNameSGIS;
  }
  private static Map<Integer, String> FramebufferAttachment;
  private static void FramebufferAttachment0() {
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT15, "GL_COLOR_ATTACHMENT15");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT14, "GL_COLOR_ATTACHMENT14");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT17, "GL_COLOR_ATTACHMENT17");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT16, "GL_COLOR_ATTACHMENT16");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT11, "GL_COLOR_ATTACHMENT11");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT10, "GL_COLOR_ATTACHMENT10");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT13, "GL_COLOR_ATTACHMENT13");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT12, "GL_COLOR_ATTACHMENT12");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT26, "GL_COLOR_ATTACHMENT26");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT25, "GL_COLOR_ATTACHMENT25");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT28, "GL_COLOR_ATTACHMENT28");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT27, "GL_COLOR_ATTACHMENT27");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT22, "GL_COLOR_ATTACHMENT22");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT21, "GL_COLOR_ATTACHMENT21");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT24, "GL_COLOR_ATTACHMENT24");
    FramebufferAttachment.put(GL_DEPTH_ATTACHMENT, "GL_DEPTH_ATTACHMENT");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT23, "GL_COLOR_ATTACHMENT23");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT20, "GL_COLOR_ATTACHMENT20");
    FramebufferAttachment.put(GL_MAX_COLOR_ATTACHMENTS, "GL_MAX_COLOR_ATTACHMENTS");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT19, "GL_COLOR_ATTACHMENT19");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT18, "GL_COLOR_ATTACHMENT18");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT0, "GL_COLOR_ATTACHMENT0");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT4, "GL_COLOR_ATTACHMENT4");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT3, "GL_COLOR_ATTACHMENT3");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT2, "GL_COLOR_ATTACHMENT2");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT31, "GL_COLOR_ATTACHMENT31");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT1, "GL_COLOR_ATTACHMENT1");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT30, "GL_COLOR_ATTACHMENT30");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT8, "GL_COLOR_ATTACHMENT8");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT7, "GL_COLOR_ATTACHMENT7");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT6, "GL_COLOR_ATTACHMENT6");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT5, "GL_COLOR_ATTACHMENT5");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT29, "GL_COLOR_ATTACHMENT29");
    FramebufferAttachment.put(GL_COLOR_ATTACHMENT9, "GL_COLOR_ATTACHMENT9");
  }
  public static Map<Integer, String> FramebufferAttachment() {
    if (FramebufferAttachment != null)
      return FramebufferAttachment;
    FramebufferAttachment = new HashMap<Integer, String>(34);
    FramebufferAttachment0();
    return FramebufferAttachment;
  }
  private static Map<Integer, String> BlendingFactor;
  private static void BlendingFactor0() {
    BlendingFactor.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    BlendingFactor.put(GL_SRC1_ALPHA, "GL_SRC1_ALPHA");
    BlendingFactor.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    BlendingFactor.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    BlendingFactor.put(GL_ZERO, "GL_ZERO");
    BlendingFactor.put(GL_ONE, "GL_ONE");
    BlendingFactor.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    BlendingFactor.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    BlendingFactor.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    BlendingFactor.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    BlendingFactor.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    BlendingFactor.put(GL_SRC1_COLOR, "GL_SRC1_COLOR");
    BlendingFactor.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    BlendingFactor.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    BlendingFactor.put(GL_DST_COLOR, "GL_DST_COLOR");
    BlendingFactor.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    BlendingFactor.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
  }
  public static Map<Integer, String> BlendingFactor() {
    if (BlendingFactor != null)
      return BlendingFactor;
    BlendingFactor = new HashMap<Integer, String>(17);
    BlendingFactor0();
    return BlendingFactor;
  }
  private static Map<Integer, String> TextureLayout;
  private static void TextureLayout0() {
  }
  public static Map<Integer, String> TextureLayout() {
    if (TextureLayout != null)
      return TextureLayout;
    TextureLayout = new HashMap<Integer, String>(0);
    TextureLayout0();
    return TextureLayout;
  }
  private static Map<Integer, String> LightEnvModeSGIX;
  private static void LightEnvModeSGIX0() {
    LightEnvModeSGIX.put(GL_MODULATE, "GL_MODULATE");
    LightEnvModeSGIX.put(GL_ADD, "GL_ADD");
    LightEnvModeSGIX.put(GL_REPLACE, "GL_REPLACE");
  }
  public static Map<Integer, String> LightEnvModeSGIX() {
    if (LightEnvModeSGIX != null)
      return LightEnvModeSGIX;
    LightEnvModeSGIX = new HashMap<Integer, String>(3);
    LightEnvModeSGIX0();
    return LightEnvModeSGIX;
  }
  private static Map<Integer, String> ClipControlOrigin;
  private static void ClipControlOrigin0() {
    ClipControlOrigin.put(GL_UPPER_LEFT, "GL_UPPER_LEFT");
    ClipControlOrigin.put(GL_LOWER_LEFT, "GL_LOWER_LEFT");
  }
  public static Map<Integer, String> ClipControlOrigin() {
    if (ClipControlOrigin != null)
      return ClipControlOrigin;
    ClipControlOrigin = new HashMap<Integer, String>(2);
    ClipControlOrigin0();
    return ClipControlOrigin;
  }
  private static Map<Integer, String> FrontFaceDirection;
  private static void FrontFaceDirection0() {
    FrontFaceDirection.put(GL_CW, "GL_CW");
    FrontFaceDirection.put(GL_CCW, "GL_CCW");
  }
  public static Map<Integer, String> FrontFaceDirection() {
    if (FrontFaceDirection != null)
      return FrontFaceDirection;
    FrontFaceDirection = new HashMap<Integer, String>(2);
    FrontFaceDirection0();
    return FrontFaceDirection;
  }
  private static Map<Integer, String> TextureCoordName;
  private static void TextureCoordName0() {
    TextureCoordName.put(GL_Q, "GL_Q");
    TextureCoordName.put(GL_S, "GL_S");
    TextureCoordName.put(GL_R, "GL_R");
    TextureCoordName.put(GL_T, "GL_T");
  }
  public static Map<Integer, String> TextureCoordName() {
    if (TextureCoordName != null)
      return TextureCoordName;
    TextureCoordName = new HashMap<Integer, String>(4);
    TextureCoordName0();
    return TextureCoordName;
  }
  private static Map<Integer, String> TextureGenMode;
  private static void TextureGenMode0() {
    TextureGenMode.put(GL_OBJECT_DISTANCE_TO_LINE_SGIS, "GL_OBJECT_DISTANCE_TO_LINE_SGIS");
    TextureGenMode.put(GL_EYE_DISTANCE_TO_LINE_SGIS, "GL_EYE_DISTANCE_TO_LINE_SGIS");
    TextureGenMode.put(GL_OBJECT_LINEAR, "GL_OBJECT_LINEAR");
    TextureGenMode.put(GL_SPHERE_MAP, "GL_SPHERE_MAP");
    TextureGenMode.put(GL_OBJECT_DISTANCE_TO_POINT_SGIS, "GL_OBJECT_DISTANCE_TO_POINT_SGIS");
    TextureGenMode.put(GL_EYE_DISTANCE_TO_POINT_SGIS, "GL_EYE_DISTANCE_TO_POINT_SGIS");
    TextureGenMode.put(GL_EYE_LINEAR, "GL_EYE_LINEAR");
  }
  public static Map<Integer, String> TextureGenMode() {
    if (TextureGenMode != null)
      return TextureGenMode;
    TextureGenMode = new HashMap<Integer, String>(7);
    TextureGenMode0();
    return TextureGenMode;
  }
  private static Map<Integer, String> TextureGenParameter;
  private static void TextureGenParameter0() {
    TextureGenParameter.put(GL_OBJECT_LINE_SGIS, "GL_OBJECT_LINE_SGIS");
    TextureGenParameter.put(GL_OBJECT_PLANE, "GL_OBJECT_PLANE");
    TextureGenParameter.put(GL_EYE_POINT_SGIS, "GL_EYE_POINT_SGIS");
    TextureGenParameter.put(GL_EYE_LINE_SGIS, "GL_EYE_LINE_SGIS");
    TextureGenParameter.put(GL_OBJECT_POINT_SGIS, "GL_OBJECT_POINT_SGIS");
    TextureGenParameter.put(GL_TEXTURE_GEN_MODE, "GL_TEXTURE_GEN_MODE");
    TextureGenParameter.put(GL_EYE_PLANE, "GL_EYE_PLANE");
  }
  public static Map<Integer, String> TextureGenParameter() {
    if (TextureGenParameter != null)
      return TextureGenParameter;
    TextureGenParameter = new HashMap<Integer, String>(7);
    TextureGenParameter0();
    return TextureGenParameter;
  }
  private static Map<Integer, String> DebugSource;
  private static void DebugSource0() {
    DebugSource.put(GL_DEBUG_SOURCE_API, "GL_DEBUG_SOURCE_API");
    DebugSource.put(GL_DEBUG_SOURCE_SHADER_COMPILER, "GL_DEBUG_SOURCE_SHADER_COMPILER");
    DebugSource.put(GL_DEBUG_SOURCE_OTHER, "GL_DEBUG_SOURCE_OTHER");
    DebugSource.put(GL_DEBUG_SOURCE_APPLICATION, "GL_DEBUG_SOURCE_APPLICATION");
    DebugSource.put(GL_DONT_CARE, "GL_DONT_CARE");
    DebugSource.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM, "GL_DEBUG_SOURCE_WINDOW_SYSTEM");
    DebugSource.put(GL_DEBUG_SOURCE_THIRD_PARTY, "GL_DEBUG_SOURCE_THIRD_PARTY");
  }
  public static Map<Integer, String> DebugSource() {
    if (DebugSource != null)
      return DebugSource;
    DebugSource = new HashMap<Integer, String>(7);
    DebugSource0();
    return DebugSource;
  }
  private static Map<Integer, String> FramebufferAttachmentParameterName;
  private static void FramebufferAttachmentParameterName0() {
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING");
    FramebufferAttachmentParameterName.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
  }
  public static Map<Integer, String> FramebufferAttachmentParameterName() {
    if (FramebufferAttachmentParameterName != null)
      return FramebufferAttachmentParameterName;
    FramebufferAttachmentParameterName = new HashMap<Integer, String>(13);
    FramebufferAttachmentParameterName0();
    return FramebufferAttachmentParameterName;
  }
  private static Map<Integer, String> PixelMap;
  private static void PixelMap0() {
    PixelMap.put(GL_PIXEL_MAP_B_TO_B, "GL_PIXEL_MAP_B_TO_B");
    PixelMap.put(GL_PIXEL_MAP_S_TO_S, "GL_PIXEL_MAP_S_TO_S");
    PixelMap.put(GL_PIXEL_MAP_I_TO_I, "GL_PIXEL_MAP_I_TO_I");
    PixelMap.put(GL_PIXEL_MAP_G_TO_G, "GL_PIXEL_MAP_G_TO_G");
    PixelMap.put(GL_PIXEL_MAP_I_TO_B, "GL_PIXEL_MAP_I_TO_B");
    PixelMap.put(GL_PIXEL_MAP_I_TO_R, "GL_PIXEL_MAP_I_TO_R");
    PixelMap.put(GL_PIXEL_MAP_I_TO_A, "GL_PIXEL_MAP_I_TO_A");
    PixelMap.put(GL_PIXEL_MAP_A_TO_A, "GL_PIXEL_MAP_A_TO_A");
    PixelMap.put(GL_PIXEL_MAP_I_TO_G, "GL_PIXEL_MAP_I_TO_G");
    PixelMap.put(GL_PIXEL_MAP_R_TO_R, "GL_PIXEL_MAP_R_TO_R");
  }
  public static Map<Integer, String> PixelMap() {
    if (PixelMap != null)
      return PixelMap;
    PixelMap = new HashMap<Integer, String>(10);
    PixelMap0();
    return PixelMap;
  }
  private static Map<Integer, String> PrecisionType;
  private static void PrecisionType0() {
    PrecisionType.put(GL_MEDIUM_FLOAT, "GL_MEDIUM_FLOAT");
    PrecisionType.put(GL_HIGH_FLOAT, "GL_HIGH_FLOAT");
    PrecisionType.put(GL_LOW_FLOAT, "GL_LOW_FLOAT");
    PrecisionType.put(GL_LOW_INT, "GL_LOW_INT");
    PrecisionType.put(GL_MEDIUM_INT, "GL_MEDIUM_INT");
    PrecisionType.put(GL_HIGH_INT, "GL_HIGH_INT");
  }
  public static Map<Integer, String> PrecisionType() {
    if (PrecisionType != null)
      return PrecisionType;
    PrecisionType = new HashMap<Integer, String>(6);
    PrecisionType0();
    return PrecisionType;
  }
  private static Map<Integer, String> PathParameter;
  private static void PathParameter0() {
  }
  public static Map<Integer, String> PathParameter() {
    if (PathParameter != null)
      return PathParameter;
    PathParameter = new HashMap<Integer, String>(0);
    PathParameter0();
    return PathParameter;
  }
  private static Map<Integer, String> FramebufferStatus;
  private static void FramebufferStatus0() {
    FramebufferStatus.put(GL_FRAMEBUFFER_COMPLETE, "GL_FRAMEBUFFER_COMPLETE");
    FramebufferStatus.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
    FramebufferStatus.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
    FramebufferStatus.put(GL_FRAMEBUFFER_UNSUPPORTED, "GL_FRAMEBUFFER_UNSUPPORTED");
    FramebufferStatus.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
    FramebufferStatus.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
    FramebufferStatus.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
    FramebufferStatus.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS");
    FramebufferStatus.put(GL_FRAMEBUFFER_UNDEFINED, "GL_FRAMEBUFFER_UNDEFINED");
  }
  public static Map<Integer, String> FramebufferStatus() {
    if (FramebufferStatus != null)
      return FramebufferStatus;
    FramebufferStatus = new HashMap<Integer, String>(9);
    FramebufferStatus0();
    return FramebufferStatus;
  }
  private static Map<Integer, String> DataType;
  private static void DataType0() {
  }
  public static Map<Integer, String> DataType() {
    if (DataType != null)
      return DataType;
    DataType = new HashMap<Integer, String>(0);
    DataType0();
    return DataType;
  }
  private static Map<Integer, String> GetTextureParameter;
  private static void GetTextureParameter0() {
    GetTextureParameter.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
    GetTextureParameter.put(GL_TEXTURE_BASE_LEVEL_SGIS, "GL_TEXTURE_BASE_LEVEL_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
    GetTextureParameter.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
    GetTextureParameter.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
    GetTextureParameter.put(GL_TEXTURE_COMPARE_OPERATOR_SGIX, "GL_TEXTURE_COMPARE_OPERATOR_SGIX");
    GetTextureParameter.put(GL_TEXTURE_GEQUAL_R_SGIX, "GL_TEXTURE_GEQUAL_R_SGIX");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    GetTextureParameter.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    GetTextureParameter.put(GL_TEXTURE_RESIDENT, "GL_TEXTURE_RESIDENT");
    GetTextureParameter.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    GetTextureParameter.put(GL_TEXTURE_BORDER, "GL_TEXTURE_BORDER");
    GetTextureParameter.put(GL_TEXTURE_LEQUAL_R_SGIX, "GL_TEXTURE_LEQUAL_R_SGIX");
    GetTextureParameter.put(GL_TEXTURE_BLUE_SIZE, "GL_TEXTURE_BLUE_SIZE");
    GetTextureParameter.put(GL_TEXTURE_INTENSITY_SIZE, "GL_TEXTURE_INTENSITY_SIZE");
    GetTextureParameter.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    GetTextureParameter.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    GetTextureParameter.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    GetTextureParameter.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    GetTextureParameter.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    GetTextureParameter.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    GetTextureParameter.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    GetTextureParameter.put(GL_TEXTURE_INTERNAL_FORMAT, "GL_TEXTURE_INTERNAL_FORMAT");
    GetTextureParameter.put(GL_TEXTURE_RED_SIZE, "GL_TEXTURE_RED_SIZE");
    GetTextureParameter.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    GetTextureParameter.put(GL_TEXTURE_HEIGHT, "GL_TEXTURE_HEIGHT");
    GetTextureParameter.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    GetTextureParameter.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    GetTextureParameter.put(GL_TEXTURE_LUMINANCE_SIZE, "GL_TEXTURE_LUMINANCE_SIZE");
    GetTextureParameter.put(GL_TEXTURE_MIN_LOD_SGIS, "GL_TEXTURE_MIN_LOD_SGIS");
    GetTextureParameter.put(GL_TEXTURE_MAX_LEVEL_SGIS, "GL_TEXTURE_MAX_LEVEL_SGIS");
    GetTextureParameter.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
    GetTextureParameter.put(GL_TEXTURE_COMPONENTS, "GL_TEXTURE_COMPONENTS");
    GetTextureParameter.put(GL_TEXTURE_WIDTH, "GL_TEXTURE_WIDTH");
    GetTextureParameter.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    GetTextureParameter.put(GL_TEXTURE_MAX_LOD_SGIS, "GL_TEXTURE_MAX_LOD_SGIS");
    GetTextureParameter.put(GL_TEXTURE_GREEN_SIZE, "GL_TEXTURE_GREEN_SIZE");
    GetTextureParameter.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    GetTextureParameter.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    GetTextureParameter.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    GetTextureParameter.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
    GetTextureParameter.put(GL_TEXTURE_PRIORITY, "GL_TEXTURE_PRIORITY");
    GetTextureParameter.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    GetTextureParameter.put(GL_TEXTURE_ALPHA_SIZE, "GL_TEXTURE_ALPHA_SIZE");
    GetTextureParameter.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
  }
  public static Map<Integer, String> GetTextureParameter() {
    if (GetTextureParameter != null)
      return GetTextureParameter;
    GetTextureParameter = new HashMap<Integer, String>(51);
    GetTextureParameter0();
    return GetTextureParameter;
  }
  private static Map<Integer, String> ObjectIdentifier;
  private static void ObjectIdentifier0() {
    ObjectIdentifier.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    ObjectIdentifier.put(GL_PROGRAM, "GL_PROGRAM");
    ObjectIdentifier.put(GL_SHADER, "GL_SHADER");
    ObjectIdentifier.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    ObjectIdentifier.put(GL_BUFFER, "GL_BUFFER");
    ObjectIdentifier.put(GL_QUERY, "GL_QUERY");
    ObjectIdentifier.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
    ObjectIdentifier.put(GL_TEXTURE, "GL_TEXTURE");
    ObjectIdentifier.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    ObjectIdentifier.put(GL_PROGRAM_PIPELINE, "GL_PROGRAM_PIPELINE");
    ObjectIdentifier.put(GL_SAMPLER, "GL_SAMPLER");
  }
  public static Map<Integer, String> ObjectIdentifier() {
    if (ObjectIdentifier != null)
      return ObjectIdentifier;
    ObjectIdentifier = new HashMap<Integer, String>(11);
    ObjectIdentifier0();
    return ObjectIdentifier;
  }
  private static Map<Integer, String> ClipControlDepth;
  private static void ClipControlDepth0() {
    ClipControlDepth.put(GL_ZERO_TO_ONE, "GL_ZERO_TO_ONE");
    ClipControlDepth.put(GL_NEGATIVE_ONE_TO_ONE, "GL_NEGATIVE_ONE_TO_ONE");
  }
  public static Map<Integer, String> ClipControlDepth() {
    if (ClipControlDepth != null)
      return ClipControlDepth;
    ClipControlDepth = new HashMap<Integer, String>(2);
    ClipControlDepth0();
    return ClipControlDepth;
  }
  private static Map<Integer, String> ConvolutionTarget;
  private static void ConvolutionTarget0() {
    ConvolutionTarget.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    ConvolutionTarget.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
  }
  public static Map<Integer, String> ConvolutionTarget() {
    if (ConvolutionTarget != null)
      return ConvolutionTarget;
    ConvolutionTarget = new HashMap<Integer, String>(2);
    ConvolutionTarget0();
    return ConvolutionTarget;
  }
  private static Map<Integer, String> PathFontStyle;
  private static void PathFontStyle0() {
    PathFontStyle.put(GL_NONE, "GL_NONE");
  }
  public static Map<Integer, String> PathFontStyle() {
    if (PathFontStyle != null)
      return PathFontStyle;
    PathFontStyle = new HashMap<Integer, String>(1);
    PathFontStyle0();
    return PathFontStyle;
  }
  private static Map<Integer, String> PathElementType;
  private static void PathElementType0() {
  }
  public static Map<Integer, String> PathElementType() {
    if (PathElementType != null)
      return PathElementType;
    PathElementType = new HashMap<Integer, String>(0);
    PathElementType0();
    return PathElementType;
  }
  private static Map<Integer, String> FragmentLightModelParameterSGIX;
  private static void FragmentLightModelParameterSGIX0() {
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    FragmentLightModelParameterSGIX.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
  }
  public static Map<Integer, String> FragmentLightModelParameterSGIX() {
    if (FragmentLightModelParameterSGIX != null)
      return FragmentLightModelParameterSGIX;
    FragmentLightModelParameterSGIX = new HashMap<Integer, String>(4);
    FragmentLightModelParameterSGIX0();
    return FragmentLightModelParameterSGIX;
  }
  private static Map<Integer, String> PatchParameterName;
  private static void PatchParameterName0() {
    PatchParameterName.put(GL_PATCH_VERTICES, "GL_PATCH_VERTICES");
    PatchParameterName.put(GL_PATCH_DEFAULT_OUTER_LEVEL, "GL_PATCH_DEFAULT_OUTER_LEVEL");
    PatchParameterName.put(GL_PATCH_DEFAULT_INNER_LEVEL, "GL_PATCH_DEFAULT_INNER_LEVEL");
  }
  public static Map<Integer, String> PatchParameterName() {
    if (PatchParameterName != null)
      return PatchParameterName;
    PatchParameterName = new HashMap<Integer, String>(3);
    PatchParameterName0();
    return PatchParameterName;
  }
  private static Map<Integer, String> MemoryObjectParameterName;
  private static void MemoryObjectParameterName0() {
  }
  public static Map<Integer, String> MemoryObjectParameterName() {
    if (MemoryObjectParameterName != null)
      return MemoryObjectParameterName;
    MemoryObjectParameterName = new HashMap<Integer, String>(0);
    MemoryObjectParameterName0();
    return MemoryObjectParameterName;
  }
  private static Map<Integer, String> ShaderType;
  private static void ShaderType0() {
    ShaderType.put(GL_COMPUTE_SHADER, "GL_COMPUTE_SHADER");
    ShaderType.put(GL_VERTEX_SHADER, "GL_VERTEX_SHADER");
    ShaderType.put(GL_GEOMETRY_SHADER, "GL_GEOMETRY_SHADER");
    ShaderType.put(GL_TESS_CONTROL_SHADER, "GL_TESS_CONTROL_SHADER");
    ShaderType.put(GL_FRAGMENT_SHADER, "GL_FRAGMENT_SHADER");
    ShaderType.put(GL_TESS_EVALUATION_SHADER, "GL_TESS_EVALUATION_SHADER");
  }
  public static Map<Integer, String> ShaderType() {
    if (ShaderType != null)
      return ShaderType;
    ShaderType = new HashMap<Integer, String>(6);
    ShaderType0();
    return ShaderType;
  }
  private static Map<Integer, String> FogCoordinatePointerType;
  private static void FogCoordinatePointerType0() {
    FogCoordinatePointerType.put(GL_FLOAT, "GL_FLOAT");
    FogCoordinatePointerType.put(GL_DOUBLE, "GL_DOUBLE");
  }
  public static Map<Integer, String> FogCoordinatePointerType() {
    if (FogCoordinatePointerType != null)
      return FogCoordinatePointerType;
    FogCoordinatePointerType = new HashMap<Integer, String>(2);
    FogCoordinatePointerType0();
    return FogCoordinatePointerType;
  }
  private static Map<Integer, String> TextureUnit;
  private static void TextureUnit0() {
    TextureUnit.put(GL_TEXTURE20, "GL_TEXTURE20");
    TextureUnit.put(GL_TEXTURE19, "GL_TEXTURE19");
    TextureUnit.put(GL_TEXTURE18, "GL_TEXTURE18");
    TextureUnit.put(GL_TEXTURE17, "GL_TEXTURE17");
    TextureUnit.put(GL_TEXTURE16, "GL_TEXTURE16");
    TextureUnit.put(GL_TEXTURE15, "GL_TEXTURE15");
    TextureUnit.put(GL_TEXTURE14, "GL_TEXTURE14");
    TextureUnit.put(GL_TEXTURE13, "GL_TEXTURE13");
    TextureUnit.put(GL_TEXTURE12, "GL_TEXTURE12");
    TextureUnit.put(GL_TEXTURE11, "GL_TEXTURE11");
    TextureUnit.put(GL_TEXTURE10, "GL_TEXTURE10");
    TextureUnit.put(GL_TEXTURE31, "GL_TEXTURE31");
    TextureUnit.put(GL_TEXTURE30, "GL_TEXTURE30");
    TextureUnit.put(GL_TEXTURE0, "GL_TEXTURE0");
    TextureUnit.put(GL_TEXTURE4, "GL_TEXTURE4");
    TextureUnit.put(GL_TEXTURE3, "GL_TEXTURE3");
    TextureUnit.put(GL_TEXTURE2, "GL_TEXTURE2");
    TextureUnit.put(GL_TEXTURE1, "GL_TEXTURE1");
    TextureUnit.put(GL_TEXTURE8, "GL_TEXTURE8");
    TextureUnit.put(GL_TEXTURE7, "GL_TEXTURE7");
    TextureUnit.put(GL_TEXTURE6, "GL_TEXTURE6");
    TextureUnit.put(GL_TEXTURE5, "GL_TEXTURE5");
    TextureUnit.put(GL_TEXTURE29, "GL_TEXTURE29");
    TextureUnit.put(GL_TEXTURE28, "GL_TEXTURE28");
    TextureUnit.put(GL_TEXTURE27, "GL_TEXTURE27");
    TextureUnit.put(GL_TEXTURE26, "GL_TEXTURE26");
    TextureUnit.put(GL_TEXTURE9, "GL_TEXTURE9");
    TextureUnit.put(GL_TEXTURE25, "GL_TEXTURE25");
    TextureUnit.put(GL_TEXTURE24, "GL_TEXTURE24");
    TextureUnit.put(GL_TEXTURE23, "GL_TEXTURE23");
    TextureUnit.put(GL_TEXTURE22, "GL_TEXTURE22");
    TextureUnit.put(GL_TEXTURE21, "GL_TEXTURE21");
  }
  public static Map<Integer, String> TextureUnit() {
    if (TextureUnit != null)
      return TextureUnit;
    TextureUnit = new HashMap<Integer, String>(32);
    TextureUnit0();
    return TextureUnit;
  }
  private static Map<Integer, String> PathFillMode;
  private static void PathFillMode0() {
    PathFillMode.put(GL_INVERT, "GL_INVERT");
  }
  public static Map<Integer, String> PathFillMode() {
    if (PathFillMode != null)
      return PathFillMode;
    PathFillMode = new HashMap<Integer, String>(1);
    PathFillMode0();
    return PathFillMode;
  }
  private static Map<Integer, String> MapBufferUsageMask;
  private static void MapBufferUsageMask0() {
    MapBufferUsageMask.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    MapBufferUsageMask.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    MapBufferUsageMask.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    MapBufferUsageMask.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    MapBufferUsageMask.put(GL_CLIENT_STORAGE_BIT, "GL_CLIENT_STORAGE_BIT");
    MapBufferUsageMask.put(GL_DYNAMIC_STORAGE_BIT, "GL_DYNAMIC_STORAGE_BIT");
    MapBufferUsageMask.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    MapBufferUsageMask.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
    MapBufferUsageMask.put(GL_LGPU_SEPARATE_STORAGE_BIT_NVX, "GL_LGPU_SEPARATE_STORAGE_BIT_NVX");
    MapBufferUsageMask.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    MapBufferUsageMask.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
  }
  public static Map<Integer, String> MapBufferUsageMask() {
    if (MapBufferUsageMask != null)
      return MapBufferUsageMask;
    MapBufferUsageMask = new HashMap<Integer, String>(11);
    MapBufferUsageMask0();
    return MapBufferUsageMask;
  }
  private static Map<Integer, String> BindTransformFeedbackTarget;
  private static void BindTransformFeedbackTarget0() {
    BindTransformFeedbackTarget.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
  }
  public static Map<Integer, String> BindTransformFeedbackTarget() {
    if (BindTransformFeedbackTarget != null)
      return BindTransformFeedbackTarget;
    BindTransformFeedbackTarget = new HashMap<Integer, String>(1);
    BindTransformFeedbackTarget0();
    return BindTransformFeedbackTarget;
  }
  private static Map<Integer, String> FeedbackType;
  private static void FeedbackType0() {
    FeedbackType.put(GL_2D, "GL_2D");
    FeedbackType.put(GL_3D_COLOR_TEXTURE, "GL_3D_COLOR_TEXTURE");
    FeedbackType.put(GL_3D, "GL_3D");
    FeedbackType.put(GL_3D_COLOR, "GL_3D_COLOR");
    FeedbackType.put(GL_4D_COLOR_TEXTURE, "GL_4D_COLOR_TEXTURE");
  }
  public static Map<Integer, String> FeedbackType() {
    if (FeedbackType != null)
      return FeedbackType;
    FeedbackType = new HashMap<Integer, String>(5);
    FeedbackType0();
    return FeedbackType;
  }
  private static Map<Integer, String> OcclusionQueryEventMaskAMD;
  private static void OcclusionQueryEventMaskAMD0() {
    OcclusionQueryEventMaskAMD.put(GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD");
    OcclusionQueryEventMaskAMD.put(GL_QUERY_ALL_EVENT_BITS_AMD, "GL_QUERY_ALL_EVENT_BITS_AMD");
  }
  public static Map<Integer, String> OcclusionQueryEventMaskAMD() {
    if (OcclusionQueryEventMaskAMD != null)
      return OcclusionQueryEventMaskAMD;
    OcclusionQueryEventMaskAMD = new HashMap<Integer, String>(5);
    OcclusionQueryEventMaskAMD0();
    return OcclusionQueryEventMaskAMD;
  }
  private static Map<Integer, String> ReadBufferMode;
  private static void ReadBufferMode0() {
    ReadBufferMode.put(GL_AUX0, "GL_AUX0");
    ReadBufferMode.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    ReadBufferMode.put(GL_AUX1, "GL_AUX1");
    ReadBufferMode.put(GL_BACK, "GL_BACK");
    ReadBufferMode.put(GL_FRONT, "GL_FRONT");
    ReadBufferMode.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    ReadBufferMode.put(GL_LEFT, "GL_LEFT");
    ReadBufferMode.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    ReadBufferMode.put(GL_AUX2, "GL_AUX2");
    ReadBufferMode.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
    ReadBufferMode.put(GL_AUX3, "GL_AUX3");
    ReadBufferMode.put(GL_RIGHT, "GL_RIGHT");
  }
  public static Map<Integer, String> ReadBufferMode() {
    if (ReadBufferMode != null)
      return ReadBufferMode;
    ReadBufferMode = new HashMap<Integer, String>(12);
    ReadBufferMode0();
    return ReadBufferMode;
  }
  private static Map<Integer, String> AttributeType;
  private static void AttributeType0() {
    AttributeType.put(GL_SAMPLER_2D_RECT_SHADOW, "GL_SAMPLER_2D_RECT_SHADOW");
    AttributeType.put(GL_SAMPLER_2D_SHADOW, "GL_SAMPLER_2D_SHADOW");
    AttributeType.put(GL_FLOAT_MAT3x4, "GL_FLOAT_MAT3x4");
    AttributeType.put(GL_FLOAT_MAT3x2, "GL_FLOAT_MAT3x2");
    AttributeType.put(GL_BOOL_VEC4, "GL_BOOL_VEC4");
    AttributeType.put(GL_SAMPLER_3D, "GL_SAMPLER_3D");
    AttributeType.put(GL_BOOL_VEC3, "GL_BOOL_VEC3");
    AttributeType.put(GL_BOOL_VEC2, "GL_BOOL_VEC2");
    AttributeType.put(GL_FLOAT_MAT4, "GL_FLOAT_MAT4");
    AttributeType.put(GL_FLOAT_MAT3, "GL_FLOAT_MAT3");
    AttributeType.put(GL_FLOAT_MAT2, "GL_FLOAT_MAT2");
    AttributeType.put(GL_SAMPLER_2D, "GL_SAMPLER_2D");
    AttributeType.put(GL_BOOL, "GL_BOOL");
    AttributeType.put(GL_SAMPLER_CUBE, "GL_SAMPLER_CUBE");
    AttributeType.put(GL_SAMPLER_1D_SHADOW, "GL_SAMPLER_1D_SHADOW");
    AttributeType.put(GL_FLOAT_MAT4x3, "GL_FLOAT_MAT4x3");
    AttributeType.put(GL_FLOAT_MAT2x3, "GL_FLOAT_MAT2x3");
    AttributeType.put(GL_FLOAT_MAT2x4, "GL_FLOAT_MAT2x4");
    AttributeType.put(GL_FLOAT_MAT4x2, "GL_FLOAT_MAT4x2");
    AttributeType.put(GL_SAMPLER_2D_RECT, "GL_SAMPLER_2D_RECT");
    AttributeType.put(GL_SAMPLER_1D, "GL_SAMPLER_1D");
    AttributeType.put(GL_FLOAT_VEC2, "GL_FLOAT_VEC2");
    AttributeType.put(GL_INT_VEC4, "GL_INT_VEC4");
    AttributeType.put(GL_FLOAT_VEC4, "GL_FLOAT_VEC4");
    AttributeType.put(GL_INT_VEC2, "GL_INT_VEC2");
    AttributeType.put(GL_FLOAT_VEC3, "GL_FLOAT_VEC3");
    AttributeType.put(GL_INT_VEC3, "GL_INT_VEC3");
  }
  public static Map<Integer, String> AttributeType() {
    if (AttributeType != null)
      return AttributeType;
    AttributeType = new HashMap<Integer, String>(27);
    AttributeType0();
    return AttributeType;
  }
  private static Map<Integer, String> SyncCondition;
  private static void SyncCondition0() {
    SyncCondition.put(GL_SYNC_GPU_COMMANDS_COMPLETE, "GL_SYNC_GPU_COMMANDS_COMPLETE");
  }
  public static Map<Integer, String> SyncCondition() {
    if (SyncCondition != null)
      return SyncCondition;
    SyncCondition = new HashMap<Integer, String>(1);
    SyncCondition0();
    return SyncCondition;
  }
  private static Map<Integer, String> SamplerParameterName;
  private static void SamplerParameterName0() {
    SamplerParameterName.put(GL_TEXTURE_COMPARE_FUNC, "GL_TEXTURE_COMPARE_FUNC");
    SamplerParameterName.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    SamplerParameterName.put(GL_TEXTURE_MIN_LOD, "GL_TEXTURE_MIN_LOD");
    SamplerParameterName.put(GL_TEXTURE_COMPARE_MODE, "GL_TEXTURE_COMPARE_MODE");
    SamplerParameterName.put(GL_TEXTURE_WRAP_R, "GL_TEXTURE_WRAP_R");
    SamplerParameterName.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    SamplerParameterName.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    SamplerParameterName.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    SamplerParameterName.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
    SamplerParameterName.put(GL_TEXTURE_MAX_LOD, "GL_TEXTURE_MAX_LOD");
  }
  public static Map<Integer, String> SamplerParameterName() {
    if (SamplerParameterName != null)
      return SamplerParameterName;
    SamplerParameterName = new HashMap<Integer, String>(10);
    SamplerParameterName0();
    return SamplerParameterName;
  }
  private static Map<Integer, String> InternalFormatPName;
  private static void InternalFormatPName0() {
    InternalFormatPName.put(GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT, "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT");
    InternalFormatPName.put(GL_READ_PIXELS_TYPE, "GL_READ_PIXELS_TYPE");
    InternalFormatPName.put(GL_TEXTURE_GATHER, "GL_TEXTURE_GATHER");
    InternalFormatPName.put(GL_INTERNALFORMAT_RED_TYPE, "GL_INTERNALFORMAT_RED_TYPE");
    InternalFormatPName.put(GL_INTERNALFORMAT_BLUE_SIZE, "GL_INTERNALFORMAT_BLUE_SIZE");
    InternalFormatPName.put(GL_IMAGE_PIXEL_TYPE, "GL_IMAGE_PIXEL_TYPE");
    InternalFormatPName.put(GL_INTERNALFORMAT_ALPHA_TYPE, "GL_INTERNALFORMAT_ALPHA_TYPE");
    InternalFormatPName.put(GL_FRAGMENT_TEXTURE, "GL_FRAGMENT_TEXTURE");
    InternalFormatPName.put(GL_STENCIL_RENDERABLE, "GL_STENCIL_RENDERABLE");
    InternalFormatPName.put(GL_SHADER_IMAGE_ATOMIC, "GL_SHADER_IMAGE_ATOMIC");
    InternalFormatPName.put(GL_TESS_CONTROL_TEXTURE, "GL_TESS_CONTROL_TEXTURE");
    InternalFormatPName.put(GL_MAX_HEIGHT, "GL_MAX_HEIGHT");
    InternalFormatPName.put(GL_TEXTURE_VIEW, "GL_TEXTURE_VIEW");
    InternalFormatPName.put(GL_MAX_LAYERS, "GL_MAX_LAYERS");
    InternalFormatPName.put(GL_TEXTURE_IMAGE_TYPE, "GL_TEXTURE_IMAGE_TYPE");
    InternalFormatPName.put(GL_DEPTH_RENDERABLE, "GL_DEPTH_RENDERABLE");
    InternalFormatPName.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE");
    InternalFormatPName.put(GL_COLOR_RENDERABLE, "GL_COLOR_RENDERABLE");
    InternalFormatPName.put(GL_INTERNALFORMAT_GREEN_SIZE, "GL_INTERNALFORMAT_GREEN_SIZE");
    InternalFormatPName.put(GL_VIEW_COMPATIBILITY_CLASS, "GL_VIEW_COMPATIBILITY_CLASS");
    InternalFormatPName.put(GL_TESS_EVALUATION_TEXTURE, "GL_TESS_EVALUATION_TEXTURE");
    InternalFormatPName.put(GL_READ_PIXELS, "GL_READ_PIXELS");
    InternalFormatPName.put(GL_FRAMEBUFFER_RENDERABLE, "GL_FRAMEBUFFER_RENDERABLE");
    InternalFormatPName.put(GL_TEXTURE_GATHER_SHADOW, "GL_TEXTURE_GATHER_SHADOW");
    InternalFormatPName.put(GL_INTERNALFORMAT_SUPPORTED, "GL_INTERNALFORMAT_SUPPORTED");
    InternalFormatPName.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
    InternalFormatPName.put(GL_INTERNALFORMAT_STENCIL_TYPE, "GL_INTERNALFORMAT_STENCIL_TYPE");
    InternalFormatPName.put(GL_GENERATE_MIPMAP, "GL_GENERATE_MIPMAP");
    InternalFormatPName.put(GL_INTERNALFORMAT_DEPTH_TYPE, "GL_INTERNALFORMAT_DEPTH_TYPE");
    InternalFormatPName.put(GL_SHADER_IMAGE_LOAD, "GL_SHADER_IMAGE_LOAD");
    InternalFormatPName.put(GL_SHADER_IMAGE_STORE, "GL_SHADER_IMAGE_STORE");
    InternalFormatPName.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    InternalFormatPName.put(GL_TEXTURE_IMAGE_FORMAT, "GL_TEXTURE_IMAGE_FORMAT");
    InternalFormatPName.put(GL_SAMPLES, "GL_SAMPLES");
    InternalFormatPName.put(GL_FRAMEBUFFER_BLEND, "GL_FRAMEBUFFER_BLEND");
    InternalFormatPName.put(GL_VERTEX_TEXTURE, "GL_VERTEX_TEXTURE");
    InternalFormatPName.put(GL_MAX_DEPTH, "GL_MAX_DEPTH");
    InternalFormatPName.put(GL_MAX_WIDTH, "GL_MAX_WIDTH");
    InternalFormatPName.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST");
    InternalFormatPName.put(GL_INTERNALFORMAT_PREFERRED, "GL_INTERNALFORMAT_PREFERRED");
    InternalFormatPName.put(GL_GET_TEXTURE_IMAGE_FORMAT, "GL_GET_TEXTURE_IMAGE_FORMAT");
    InternalFormatPName.put(GL_FILTER, "GL_FILTER");
    InternalFormatPName.put(GL_INTERNALFORMAT_ALPHA_SIZE, "GL_INTERNALFORMAT_ALPHA_SIZE");
    InternalFormatPName.put(GL_TEXTURE_COMPRESSED_BLOCK_SIZE, "GL_TEXTURE_COMPRESSED_BLOCK_SIZE");
    InternalFormatPName.put(GL_TEXTURE_SHADOW, "GL_TEXTURE_SHADOW");
    InternalFormatPName.put(GL_AUTO_GENERATE_MIPMAP, "GL_AUTO_GENERATE_MIPMAP");
    InternalFormatPName.put(GL_COMPUTE_TEXTURE, "GL_COMPUTE_TEXTURE");
    InternalFormatPName.put(GL_COLOR_ENCODING, "GL_COLOR_ENCODING");
    InternalFormatPName.put(GL_IMAGE_PIXEL_FORMAT, "GL_IMAGE_PIXEL_FORMAT");
    InternalFormatPName.put(GL_INTERNALFORMAT_BLUE_TYPE, "GL_INTERNALFORMAT_BLUE_TYPE");
    InternalFormatPName.put(GL_SRGB_WRITE, "GL_SRGB_WRITE");
    InternalFormatPName.put(GL_INTERNALFORMAT_GREEN_TYPE, "GL_INTERNALFORMAT_GREEN_TYPE");
    InternalFormatPName.put(GL_FRAMEBUFFER_RENDERABLE_LAYERED, "GL_FRAMEBUFFER_RENDERABLE_LAYERED");
    InternalFormatPName.put(GL_TEXTURE_COMPRESSED, "GL_TEXTURE_COMPRESSED");
    InternalFormatPName.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST");
    InternalFormatPName.put(GL_INTERNALFORMAT_SHARED_SIZE, "GL_INTERNALFORMAT_SHARED_SIZE");
    InternalFormatPName.put(GL_GEOMETRY_TEXTURE, "GL_GEOMETRY_TEXTURE");
    InternalFormatPName.put(GL_COLOR_COMPONENTS, "GL_COLOR_COMPONENTS");
    InternalFormatPName.put(GL_INTERNALFORMAT_STENCIL_SIZE, "GL_INTERNALFORMAT_STENCIL_SIZE");
    InternalFormatPName.put(GL_MIPMAP, "GL_MIPMAP");
    InternalFormatPName.put(GL_IMAGE_COMPATIBILITY_CLASS, "GL_IMAGE_COMPATIBILITY_CLASS");
    InternalFormatPName.put(GL_INTERNALFORMAT_DEPTH_SIZE, "GL_INTERNALFORMAT_DEPTH_SIZE");
    InternalFormatPName.put(GL_CLEAR_BUFFER, "GL_CLEAR_BUFFER");
    InternalFormatPName.put(GL_CLEAR_TEXTURE, "GL_CLEAR_TEXTURE");
    InternalFormatPName.put(GL_READ_PIXELS_FORMAT, "GL_READ_PIXELS_FORMAT");
    InternalFormatPName.put(GL_SRGB_READ, "GL_SRGB_READ");
    InternalFormatPName.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE");
    InternalFormatPName.put(GL_TEXTURE_COMPRESSED_BLOCK_WIDTH, "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH");
    InternalFormatPName.put(GL_GET_TEXTURE_IMAGE_TYPE, "GL_GET_TEXTURE_IMAGE_TYPE");
    InternalFormatPName.put(GL_INTERNALFORMAT_RED_SIZE, "GL_INTERNALFORMAT_RED_SIZE");
    InternalFormatPName.put(GL_IMAGE_TEXEL_SIZE, "GL_IMAGE_TEXEL_SIZE");
  }
  public static Map<Integer, String> InternalFormatPName() {
    if (InternalFormatPName != null)
      return InternalFormatPName;
    InternalFormatPName = new HashMap<Integer, String>(71);
    InternalFormatPName0();
    return InternalFormatPName;
  }
  private static Map<Integer, String> GetMinmaxParameterPNameEXT;
  private static void GetMinmaxParameterPNameEXT0() {
    GetMinmaxParameterPNameEXT.put(GL_MINMAX_SINK, "GL_MINMAX_SINK");
    GetMinmaxParameterPNameEXT.put(GL_MINMAX_FORMAT, "GL_MINMAX_FORMAT");
  }
  public static Map<Integer, String> GetMinmaxParameterPNameEXT() {
    if (GetMinmaxParameterPNameEXT != null)
      return GetMinmaxParameterPNameEXT;
    GetMinmaxParameterPNameEXT = new HashMap<Integer, String>(2);
    GetMinmaxParameterPNameEXT0();
    return GetMinmaxParameterPNameEXT;
  }
  private static Map<Integer, String> GetHistogramParameterPNameEXT;
  private static void GetHistogramParameterPNameEXT0() {
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_ALPHA_SIZE, "GL_HISTOGRAM_ALPHA_SIZE");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_WIDTH, "GL_HISTOGRAM_WIDTH");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_GREEN_SIZE, "GL_HISTOGRAM_GREEN_SIZE");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_RED_SIZE, "GL_HISTOGRAM_RED_SIZE");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_SINK, "GL_HISTOGRAM_SINK");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_FORMAT, "GL_HISTOGRAM_FORMAT");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_BLUE_SIZE, "GL_HISTOGRAM_BLUE_SIZE");
    GetHistogramParameterPNameEXT.put(GL_HISTOGRAM_LUMINANCE_SIZE, "GL_HISTOGRAM_LUMINANCE_SIZE");
  }
  public static Map<Integer, String> GetHistogramParameterPNameEXT() {
    if (GetHistogramParameterPNameEXT != null)
      return GetHistogramParameterPNameEXT;
    GetHistogramParameterPNameEXT = new HashMap<Integer, String>(8);
    GetHistogramParameterPNameEXT0();
    return GetHistogramParameterPNameEXT;
  }
  private static Map<Integer, String> SyncStatus;
  private static void SyncStatus0() {
    SyncStatus.put(GL_TIMEOUT_EXPIRED, "GL_TIMEOUT_EXPIRED");
    SyncStatus.put(GL_CONDITION_SATISFIED, "GL_CONDITION_SATISFIED");
    SyncStatus.put(GL_ALREADY_SIGNALED, "GL_ALREADY_SIGNALED");
    SyncStatus.put(GL_WAIT_FAILED, "GL_WAIT_FAILED");
  }
  public static Map<Integer, String> SyncStatus() {
    if (SyncStatus != null)
      return SyncStatus;
    SyncStatus = new HashMap<Integer, String>(4);
    SyncStatus0();
    return SyncStatus;
  }
  private static Map<Integer, String> FogPName;
  private static void FogPName0() {
    FogPName.put(GL_FOG_END, "GL_FOG_END");
    FogPName.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    FogPName.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    FogPName.put(GL_FOG_START, "GL_FOG_START");
    FogPName.put(GL_FOG_MODE, "GL_FOG_MODE");
    FogPName.put(GL_FOG_COORD_SRC, "GL_FOG_COORD_SRC");
  }
  public static Map<Integer, String> FogPName() {
    if (FogPName != null)
      return FogPName;
    FogPName = new HashMap<Integer, String>(6);
    FogPName0();
    return FogPName;
  }
  private static Map<Integer, String> ProgramInterface;
  private static void ProgramInterface0() {
    ProgramInterface.put(GL_COMPUTE_SUBROUTINE_UNIFORM, "GL_COMPUTE_SUBROUTINE_UNIFORM");
    ProgramInterface.put(GL_PROGRAM_OUTPUT, "GL_PROGRAM_OUTPUT");
    ProgramInterface.put(GL_VERTEX_SUBROUTINE, "GL_VERTEX_SUBROUTINE");
    ProgramInterface.put(GL_TESS_EVALUATION_SUBROUTINE, "GL_TESS_EVALUATION_SUBROUTINE");
    ProgramInterface.put(GL_TESS_EVALUATION_SUBROUTINE_UNIFORM, "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM");
    ProgramInterface.put(GL_FRAGMENT_SUBROUTINE_UNIFORM, "GL_FRAGMENT_SUBROUTINE_UNIFORM");
    ProgramInterface.put(GL_SHADER_STORAGE_BLOCK, "GL_SHADER_STORAGE_BLOCK");
    ProgramInterface.put(GL_UNIFORM, "GL_UNIFORM");
    ProgramInterface.put(GL_TESS_CONTROL_SUBROUTINE_UNIFORM, "GL_TESS_CONTROL_SUBROUTINE_UNIFORM");
    ProgramInterface.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    ProgramInterface.put(GL_FRAGMENT_SUBROUTINE, "GL_FRAGMENT_SUBROUTINE");
    ProgramInterface.put(GL_COMPUTE_SUBROUTINE, "GL_COMPUTE_SUBROUTINE");
    ProgramInterface.put(GL_TRANSFORM_FEEDBACK_VARYING, "GL_TRANSFORM_FEEDBACK_VARYING");
    ProgramInterface.put(GL_VERTEX_SUBROUTINE_UNIFORM, "GL_VERTEX_SUBROUTINE_UNIFORM");
    ProgramInterface.put(GL_PROGRAM_INPUT, "GL_PROGRAM_INPUT");
    ProgramInterface.put(GL_GEOMETRY_SUBROUTINE_UNIFORM, "GL_GEOMETRY_SUBROUTINE_UNIFORM");
    ProgramInterface.put(GL_BUFFER_VARIABLE, "GL_BUFFER_VARIABLE");
    ProgramInterface.put(GL_UNIFORM_BLOCK, "GL_UNIFORM_BLOCK");
    ProgramInterface.put(GL_TESS_CONTROL_SUBROUTINE, "GL_TESS_CONTROL_SUBROUTINE");
    ProgramInterface.put(GL_GEOMETRY_SUBROUTINE, "GL_GEOMETRY_SUBROUTINE");
  }
  public static Map<Integer, String> ProgramInterface() {
    if (ProgramInterface != null)
      return ProgramInterface;
    ProgramInterface = new HashMap<Integer, String>(20);
    ProgramInterface0();
    return ProgramInterface;
  }
  private static Map<Integer, String> DepthFunction;
  private static void DepthFunction0() {
    DepthFunction.put(GL_EQUAL, "GL_EQUAL");
    DepthFunction.put(GL_GREATER, "GL_GREATER");
    DepthFunction.put(GL_LEQUAL, "GL_LEQUAL");
    DepthFunction.put(GL_NEVER, "GL_NEVER");
    DepthFunction.put(GL_GEQUAL, "GL_GEQUAL");
    DepthFunction.put(GL_LESS, "GL_LESS");
    DepthFunction.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    DepthFunction.put(GL_ALWAYS, "GL_ALWAYS");
  }
  public static Map<Integer, String> DepthFunction() {
    if (DepthFunction != null)
      return DepthFunction;
    DepthFunction = new HashMap<Integer, String>(8);
    DepthFunction0();
    return DepthFunction;
  }
  private static Map<Integer, String> PointParameterNameSGIS;
  private static void PointParameterNameSGIS0() {
    PointParameterNameSGIS.put(GL_POINT_SIZE_MIN, "GL_POINT_SIZE_MIN");
    PointParameterNameSGIS.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    PointParameterNameSGIS.put(GL_POINT_SIZE_MAX, "GL_POINT_SIZE_MAX");
    PointParameterNameSGIS.put(GL_POINT_FADE_THRESHOLD_SIZE, "GL_POINT_FADE_THRESHOLD_SIZE");
    PointParameterNameSGIS.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    PointParameterNameSGIS.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    PointParameterNameSGIS.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    PointParameterNameSGIS.put(GL_POINT_DISTANCE_ATTENUATION, "GL_POINT_DISTANCE_ATTENUATION");
  }
  public static Map<Integer, String> PointParameterNameSGIS() {
    if (PointParameterNameSGIS != null)
      return PointParameterNameSGIS;
    PointParameterNameSGIS = new HashMap<Integer, String>(8);
    PointParameterNameSGIS0();
    return PointParameterNameSGIS;
  }
  private static Map<Integer, String> PathTransformType;
  private static void PathTransformType0() {
    PathTransformType.put(GL_NONE, "GL_NONE");
  }
  public static Map<Integer, String> PathTransformType() {
    if (PathTransformType != null)
      return PathTransformType;
    PathTransformType = new HashMap<Integer, String>(1);
    PathTransformType0();
    return PathTransformType;
  }
  private static Map<Integer, String> QueryTarget;
  private static void QueryTarget0() {
    QueryTarget.put(GL_ANY_SAMPLES_PASSED, "GL_ANY_SAMPLES_PASSED");
    QueryTarget.put(GL_ANY_SAMPLES_PASSED_CONSERVATIVE, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE");
    QueryTarget.put(GL_PRIMITIVES_GENERATED, "GL_PRIMITIVES_GENERATED");
    QueryTarget.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN");
    QueryTarget.put(GL_TIME_ELAPSED, "GL_TIME_ELAPSED");
    QueryTarget.put(GL_SAMPLES_PASSED, "GL_SAMPLES_PASSED");
  }
  public static Map<Integer, String> QueryTarget() {
    if (QueryTarget != null)
      return QueryTarget;
    QueryTarget = new HashMap<Integer, String>(6);
    QueryTarget0();
    return QueryTarget;
  }
  private static Map<Integer, String> IndexPointerType;
  private static void IndexPointerType0() {
    IndexPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    IndexPointerType.put(GL_FLOAT, "GL_FLOAT");
    IndexPointerType.put(GL_INT, "GL_INT");
    IndexPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static Map<Integer, String> IndexPointerType() {
    if (IndexPointerType != null)
      return IndexPointerType;
    IndexPointerType = new HashMap<Integer, String>(4);
    IndexPointerType0();
    return IndexPointerType;
  }
  private static Map<Integer, String> LightEnvParameterSGIX;
  private static void LightEnvParameterSGIX0() {
    LightEnvParameterSGIX.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
  }
  public static Map<Integer, String> LightEnvParameterSGIX() {
    if (LightEnvParameterSGIX != null)
      return LightEnvParameterSGIX;
    LightEnvParameterSGIX = new HashMap<Integer, String>(1);
    LightEnvParameterSGIX0();
    return LightEnvParameterSGIX;
  }
  private static Map<Integer, String> VertexPointerType;
  private static void VertexPointerType0() {
    VertexPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    VertexPointerType.put(GL_FLOAT, "GL_FLOAT");
    VertexPointerType.put(GL_INT, "GL_INT");
    VertexPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static Map<Integer, String> VertexPointerType() {
    if (VertexPointerType != null)
      return VertexPointerType;
    VertexPointerType = new HashMap<Integer, String>(4);
    VertexPointerType0();
    return VertexPointerType;
  }
  private static Map<Integer, String> CheckFramebufferStatusTarget;
  private static void CheckFramebufferStatusTarget0() {
    CheckFramebufferStatusTarget.put(GL_DRAW_FRAMEBUFFER, "GL_DRAW_FRAMEBUFFER");
    CheckFramebufferStatusTarget.put(GL_READ_FRAMEBUFFER, "GL_READ_FRAMEBUFFER");
    CheckFramebufferStatusTarget.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
  }
  public static Map<Integer, String> CheckFramebufferStatusTarget() {
    if (CheckFramebufferStatusTarget != null)
      return CheckFramebufferStatusTarget;
    CheckFramebufferStatusTarget = new HashMap<Integer, String>(3);
    CheckFramebufferStatusTarget0();
    return CheckFramebufferStatusTarget;
  }
  private static Map<Integer, String> UniformPName;
  private static void UniformPName0() {
    UniformPName.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    UniformPName.put(GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX, "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX");
    UniformPName.put(GL_UNIFORM_MATRIX_STRIDE, "GL_UNIFORM_MATRIX_STRIDE");
    UniformPName.put(GL_UNIFORM_TYPE, "GL_UNIFORM_TYPE");
    UniformPName.put(GL_UNIFORM_OFFSET, "GL_UNIFORM_OFFSET");
    UniformPName.put(GL_UNIFORM_ARRAY_STRIDE, "GL_UNIFORM_ARRAY_STRIDE");
    UniformPName.put(GL_UNIFORM_IS_ROW_MAJOR, "GL_UNIFORM_IS_ROW_MAJOR");
    UniformPName.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    UniformPName.put(GL_UNIFORM_BLOCK_INDEX, "GL_UNIFORM_BLOCK_INDEX");
  }
  public static Map<Integer, String> UniformPName() {
    if (UniformPName != null)
      return UniformPName;
    UniformPName = new HashMap<Integer, String>(9);
    UniformPName0();
    return UniformPName;
  }
  private static Map<Integer, String> GetFramebufferParameter;
  private static void GetFramebufferParameter0() {
    GetFramebufferParameter.put(GL_FRAMEBUFFER_DEFAULT_WIDTH, "GL_FRAMEBUFFER_DEFAULT_WIDTH");
    GetFramebufferParameter.put(GL_FRAMEBUFFER_DEFAULT_HEIGHT, "GL_FRAMEBUFFER_DEFAULT_HEIGHT");
    GetFramebufferParameter.put(GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");
    GetFramebufferParameter.put(GL_SAMPLE_BUFFERS, "GL_SAMPLE_BUFFERS");
    GetFramebufferParameter.put(GL_STEREO, "GL_STEREO");
    GetFramebufferParameter.put(GL_FRAMEBUFFER_DEFAULT_LAYERS, "GL_FRAMEBUFFER_DEFAULT_LAYERS");
    GetFramebufferParameter.put(GL_FRAMEBUFFER_DEFAULT_SAMPLES, "GL_FRAMEBUFFER_DEFAULT_SAMPLES");
    GetFramebufferParameter.put(GL_DOUBLEBUFFER, "GL_DOUBLEBUFFER");
    GetFramebufferParameter.put(GL_IMPLEMENTATION_COLOR_READ_FORMAT, "GL_IMPLEMENTATION_COLOR_READ_FORMAT");
    GetFramebufferParameter.put(GL_IMPLEMENTATION_COLOR_READ_TYPE, "GL_IMPLEMENTATION_COLOR_READ_TYPE");
    GetFramebufferParameter.put(GL_SAMPLES, "GL_SAMPLES");
  }
  public static Map<Integer, String> GetFramebufferParameter() {
    if (GetFramebufferParameter != null)
      return GetFramebufferParameter;
    GetFramebufferParameter = new HashMap<Integer, String>(11);
    GetFramebufferParameter0();
    return GetFramebufferParameter;
  }
  private static Map<Integer, String> BlendEquationModeEXT;
  private static void BlendEquationModeEXT0() {
    BlendEquationModeEXT.put(GL_ALPHA_MAX_SGIX, "GL_ALPHA_MAX_SGIX");
    BlendEquationModeEXT.put(GL_ALPHA_MIN_SGIX, "GL_ALPHA_MIN_SGIX");
    BlendEquationModeEXT.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    BlendEquationModeEXT.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    BlendEquationModeEXT.put(GL_LOGIC_OP, "GL_LOGIC_OP");
    BlendEquationModeEXT.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
  }
  public static Map<Integer, String> BlendEquationModeEXT() {
    if (BlendEquationModeEXT != null)
      return BlendEquationModeEXT;
    BlendEquationModeEXT = new HashMap<Integer, String>(6);
    BlendEquationModeEXT0();
    return BlendEquationModeEXT;
  }
  private static Map<Integer, String> FramebufferFetchNoncoherent;
  private static void FramebufferFetchNoncoherent0() {
    FramebufferFetchNoncoherent.put(GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM, "GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM");
  }
  public static Map<Integer, String> FramebufferFetchNoncoherent() {
    if (FramebufferFetchNoncoherent != null)
      return FramebufferFetchNoncoherent;
    FramebufferFetchNoncoherent = new HashMap<Integer, String>(1);
    FramebufferFetchNoncoherent0();
    return FramebufferFetchNoncoherent;
  }
  private static Map<Integer, String> ProgramParameterPName;
  private static void ProgramParameterPName0() {
    ProgramParameterPName.put(GL_PROGRAM_SEPARABLE, "GL_PROGRAM_SEPARABLE");
    ProgramParameterPName.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
  }
  public static Map<Integer, String> ProgramParameterPName() {
    if (ProgramParameterPName != null)
      return ProgramParameterPName;
    ProgramParameterPName = new HashMap<Integer, String>(2);
    ProgramParameterPName0();
    return ProgramParameterPName;
  }
  private static Map<Integer, String> DrawBufferMode;
  private static void DrawBufferMode0() {
    DrawBufferMode.put(GL_AUX0, "GL_AUX0");
    DrawBufferMode.put(GL_AUX1, "GL_AUX1");
    DrawBufferMode.put(GL_BACK, "GL_BACK");
    DrawBufferMode.put(GL_FRONT, "GL_FRONT");
    DrawBufferMode.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    DrawBufferMode.put(GL_LEFT, "GL_LEFT");
    DrawBufferMode.put(GL_AUX2, "GL_AUX2");
    DrawBufferMode.put(GL_AUX3, "GL_AUX3");
    DrawBufferMode.put(GL_RIGHT, "GL_RIGHT");
    DrawBufferMode.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    DrawBufferMode.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
    DrawBufferMode.put(GL_NONE, "GL_NONE");
    DrawBufferMode.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    DrawBufferMode.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
  }
  public static Map<Integer, String> DrawBufferMode() {
    if (DrawBufferMode != null)
      return DrawBufferMode;
    DrawBufferMode = new HashMap<Integer, String>(14);
    DrawBufferMode0();
    return DrawBufferMode;
  }
  private static Map<Integer, String> DebugSeverity;
  private static void DebugSeverity0() {
    DebugSeverity.put(GL_DEBUG_SEVERITY_MEDIUM, "GL_DEBUG_SEVERITY_MEDIUM");
    DebugSeverity.put(GL_DEBUG_SEVERITY_LOW, "GL_DEBUG_SEVERITY_LOW");
    DebugSeverity.put(GL_DEBUG_SEVERITY_HIGH, "GL_DEBUG_SEVERITY_HIGH");
    DebugSeverity.put(GL_DONT_CARE, "GL_DONT_CARE");
  }
  public static Map<Integer, String> DebugSeverity() {
    if (DebugSeverity != null)
      return DebugSeverity;
    DebugSeverity = new HashMap<Integer, String>(4);
    DebugSeverity0();
    return DebugSeverity;
  }
  private static Map<Integer, String> QueryParameterName;
  private static void QueryParameterName0() {
    QueryParameterName.put(GL_QUERY_COUNTER_BITS, "GL_QUERY_COUNTER_BITS");
    QueryParameterName.put(GL_CURRENT_QUERY, "GL_CURRENT_QUERY");
  }
  public static Map<Integer, String> QueryParameterName() {
    if (QueryParameterName != null)
      return QueryParameterName;
    QueryParameterName = new HashMap<Integer, String>(2);
    QueryParameterName0();
    return QueryParameterName;
  }
  private static Map<Integer, String> EnableCap;
  private static void EnableCap0() {
    EnableCap.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    EnableCap.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    EnableCap.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    EnableCap.put(GL_POLYGON_OFFSET_LINE, "GL_POLYGON_OFFSET_LINE");
    EnableCap.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    EnableCap.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    EnableCap.put(GL_COLOR_LOGIC_OP, "GL_COLOR_LOGIC_OP");
    EnableCap.put(GL_STENCIL_TEST, "GL_STENCIL_TEST");
    EnableCap.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    EnableCap.put(GL_COLOR_MATERIAL, "GL_COLOR_MATERIAL");
    EnableCap.put(GL_LIGHTING, "GL_LIGHTING");
    EnableCap.put(GL_DEPTH_TEST, "GL_DEPTH_TEST");
    EnableCap.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    EnableCap.put(GL_CULL_FACE, "GL_CULL_FACE");
    EnableCap.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    EnableCap.put(GL_POLYGON_STIPPLE, "GL_POLYGON_STIPPLE");
    EnableCap.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    EnableCap.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    EnableCap.put(GL_TEXTURE_COORD_ARRAY, "GL_TEXTURE_COORD_ARRAY");
    EnableCap.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    EnableCap.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    EnableCap.put(GL_EDGE_FLAG_ARRAY, "GL_EDGE_FLAG_ARRAY");
    EnableCap.put(GL_TEXTURE_GEN_Q, "GL_TEXTURE_GEN_Q");
    EnableCap.put(GL_POLYGON_SMOOTH, "GL_POLYGON_SMOOTH");
    EnableCap.put(GL_TEXTURE_GEN_R, "GL_TEXTURE_GEN_R");
    EnableCap.put(GL_TEXTURE_GEN_S, "GL_TEXTURE_GEN_S");
    EnableCap.put(GL_TEXTURE_GEN_T, "GL_TEXTURE_GEN_T");
    EnableCap.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    EnableCap.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    EnableCap.put(GL_POLYGON_OFFSET_POINT, "GL_POLYGON_OFFSET_POINT");
    EnableCap.put(GL_LIGHT6, "GL_LIGHT6");
    EnableCap.put(GL_LIGHT7, "GL_LIGHT7");
    EnableCap.put(GL_LIGHT4, "GL_LIGHT4");
    EnableCap.put(GL_LIGHT5, "GL_LIGHT5");
    EnableCap.put(GL_NORMAL_ARRAY, "GL_NORMAL_ARRAY");
    EnableCap.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    EnableCap.put(GL_POLYGON_OFFSET_FILL, "GL_POLYGON_OFFSET_FILL");
    EnableCap.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    EnableCap.put(GL_LIGHT2, "GL_LIGHT2");
    EnableCap.put(GL_LIGHT3, "GL_LIGHT3");
    EnableCap.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
    EnableCap.put(GL_LIGHT0, "GL_LIGHT0");
    EnableCap.put(GL_NORMALIZE, "GL_NORMALIZE");
    EnableCap.put(GL_LIGHT1, "GL_LIGHT1");
    EnableCap.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    EnableCap.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    EnableCap.put(GL_LINE_STIPPLE, "GL_LINE_STIPPLE");
    EnableCap.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    EnableCap.put(GL_INDEX_LOGIC_OP, "GL_INDEX_LOGIC_OP");
    EnableCap.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    EnableCap.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    EnableCap.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    EnableCap.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
    EnableCap.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    EnableCap.put(GL_DITHER, "GL_DITHER");
    EnableCap.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    EnableCap.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
    EnableCap.put(GL_FOG, "GL_FOG");
    EnableCap.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    EnableCap.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    EnableCap.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    EnableCap.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    EnableCap.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    EnableCap.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    EnableCap.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    EnableCap.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
    EnableCap.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
    EnableCap.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    EnableCap.put(GL_INDEX_ARRAY, "GL_INDEX_ARRAY");
    EnableCap.put(GL_LINE_SMOOTH, "GL_LINE_SMOOTH");
    EnableCap.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    EnableCap.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    EnableCap.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    EnableCap.put(GL_ALPHA_TEST, "GL_ALPHA_TEST");
    EnableCap.put(GL_AUTO_NORMAL, "GL_AUTO_NORMAL");
    EnableCap.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
    EnableCap.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    EnableCap.put(GL_COLOR_ARRAY, "GL_COLOR_ARRAY");
    EnableCap.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    EnableCap.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
    EnableCap.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    EnableCap.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
    EnableCap.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    EnableCap.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    EnableCap.put(GL_BLEND, "GL_BLEND");
  }
  private static void EnableCap1() {
    EnableCap.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
    EnableCap.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    EnableCap.put(GL_POINT_SMOOTH, "GL_POINT_SMOOTH");
    EnableCap.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
  }
  public static Map<Integer, String> EnableCap() {
    if (EnableCap != null)
      return EnableCap;
    EnableCap = new HashMap<Integer, String>(98);
    EnableCap0();
    EnableCap1();
    return EnableCap;
  }
  private static Map<Integer, String> LightName;
  private static void LightName0() {
    LightName.put(GL_LIGHT6, "GL_LIGHT6");
    LightName.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    LightName.put(GL_LIGHT7, "GL_LIGHT7");
    LightName.put(GL_LIGHT4, "GL_LIGHT4");
    LightName.put(GL_LIGHT5, "GL_LIGHT5");
    LightName.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    LightName.put(GL_LIGHT2, "GL_LIGHT2");
    LightName.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    LightName.put(GL_LIGHT3, "GL_LIGHT3");
    LightName.put(GL_LIGHT0, "GL_LIGHT0");
    LightName.put(GL_LIGHT1, "GL_LIGHT1");
    LightName.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    LightName.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
  }
  public static Map<Integer, String> LightName() {
    if (LightName != null)
      return LightName;
    LightName = new HashMap<Integer, String>(16);
    LightName0();
    return LightName;
  }
  private static Map<Integer, String> RenderbufferParameterName;
  private static void RenderbufferParameterName0() {
    RenderbufferParameterName.put(GL_RENDERBUFFER_INTERNAL_FORMAT, "GL_RENDERBUFFER_INTERNAL_FORMAT");
    RenderbufferParameterName.put(GL_RENDERBUFFER_SAMPLES, "GL_RENDERBUFFER_SAMPLES");
    RenderbufferParameterName.put(GL_RENDERBUFFER_DEPTH_SIZE, "GL_RENDERBUFFER_DEPTH_SIZE");
    RenderbufferParameterName.put(GL_RENDERBUFFER_ALPHA_SIZE, "GL_RENDERBUFFER_ALPHA_SIZE");
    RenderbufferParameterName.put(GL_RENDERBUFFER_STENCIL_SIZE, "GL_RENDERBUFFER_STENCIL_SIZE");
    RenderbufferParameterName.put(GL_RENDERBUFFER_BLUE_SIZE, "GL_RENDERBUFFER_BLUE_SIZE");
    RenderbufferParameterName.put(GL_RENDERBUFFER_HEIGHT, "GL_RENDERBUFFER_HEIGHT");
    RenderbufferParameterName.put(GL_RENDERBUFFER_RED_SIZE, "GL_RENDERBUFFER_RED_SIZE");
    RenderbufferParameterName.put(GL_RENDERBUFFER_WIDTH, "GL_RENDERBUFFER_WIDTH");
    RenderbufferParameterName.put(GL_RENDERBUFFER_GREEN_SIZE, "GL_RENDERBUFFER_GREEN_SIZE");
  }
  public static Map<Integer, String> RenderbufferParameterName() {
    if (RenderbufferParameterName != null)
      return RenderbufferParameterName;
    RenderbufferParameterName = new HashMap<Integer, String>(10);
    RenderbufferParameterName0();
    return RenderbufferParameterName;
  }
  private static Map<Integer, String> FogPointerTypeEXT;
  private static void FogPointerTypeEXT0() {
    FogPointerTypeEXT.put(GL_FLOAT, "GL_FLOAT");
    FogPointerTypeEXT.put(GL_DOUBLE, "GL_DOUBLE");
  }
  public static Map<Integer, String> FogPointerTypeEXT() {
    if (FogPointerTypeEXT != null)
      return FogPointerTypeEXT;
    FogPointerTypeEXT = new HashMap<Integer, String>(2);
    FogPointerTypeEXT0();
    return FogPointerTypeEXT;
  }
  private static Map<Integer, String> GetPixelMap;
  private static void GetPixelMap0() {
    GetPixelMap.put(GL_PIXEL_MAP_B_TO_B, "GL_PIXEL_MAP_B_TO_B");
    GetPixelMap.put(GL_PIXEL_MAP_S_TO_S, "GL_PIXEL_MAP_S_TO_S");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_I, "GL_PIXEL_MAP_I_TO_I");
    GetPixelMap.put(GL_PIXEL_MAP_G_TO_G, "GL_PIXEL_MAP_G_TO_G");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_B, "GL_PIXEL_MAP_I_TO_B");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_R, "GL_PIXEL_MAP_I_TO_R");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_A, "GL_PIXEL_MAP_I_TO_A");
    GetPixelMap.put(GL_PIXEL_MAP_A_TO_A, "GL_PIXEL_MAP_A_TO_A");
    GetPixelMap.put(GL_PIXEL_MAP_I_TO_G, "GL_PIXEL_MAP_I_TO_G");
    GetPixelMap.put(GL_PIXEL_MAP_R_TO_R, "GL_PIXEL_MAP_R_TO_R");
  }
  public static Map<Integer, String> GetPixelMap() {
    if (GetPixelMap != null)
      return GetPixelMap;
    GetPixelMap = new HashMap<Integer, String>(10);
    GetPixelMap0();
    return GetPixelMap;
  }
  private static Map<Integer, String> PathFontTarget;
  private static void PathFontTarget0() {
  }
  public static Map<Integer, String> PathFontTarget() {
    if (PathFontTarget != null)
      return PathFontTarget;
    PathFontTarget = new HashMap<Integer, String>(0);
    PathFontTarget0();
    return PathFontTarget;
  }
  private static Map<Integer, String> PixelTransferParameter;
  private static void PixelTransferParameter0() {
    PixelTransferParameter.put(GL_GREEN_BIAS, "GL_GREEN_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_BIAS, "GL_POST_COLOR_MATRIX_RED_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_BIAS, "GL_POST_COLOR_MATRIX_BLUE_BIAS");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_BLUE_SCALE, "GL_POST_CONVOLUTION_BLUE_SCALE");
    PixelTransferParameter.put(GL_INDEX_SHIFT, "GL_INDEX_SHIFT");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS, "GL_POST_COLOR_MATRIX_ALPHA_BIAS");
    PixelTransferParameter.put(GL_DEPTH_SCALE, "GL_DEPTH_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    PixelTransferParameter.put(GL_BLUE_SCALE, "GL_BLUE_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_GREEN_BIAS, "GL_POST_CONVOLUTION_GREEN_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_SCALE, "GL_POST_COLOR_MATRIX_GREEN_SCALE");
    PixelTransferParameter.put(GL_RED_BIAS, "GL_RED_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_SCALE, "GL_POST_COLOR_MATRIX_BLUE_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_SCALE, "GL_POST_COLOR_MATRIX_RED_SCALE");
    PixelTransferParameter.put(GL_BLUE_BIAS, "GL_BLUE_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_BLUE_BIAS, "GL_POST_CONVOLUTION_BLUE_BIAS");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_ALPHA_SCALE, "GL_POST_CONVOLUTION_ALPHA_SCALE");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_RED_BIAS, "GL_POST_CONVOLUTION_RED_BIAS");
    PixelTransferParameter.put(GL_MAP_STENCIL, "GL_MAP_STENCIL");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    PixelTransferParameter.put(GL_ALPHA_SCALE, "GL_ALPHA_SCALE");
    PixelTransferParameter.put(GL_INDEX_OFFSET, "GL_INDEX_OFFSET");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_RED_SCALE, "GL_POST_CONVOLUTION_RED_SCALE");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_GREEN_BIAS, "GL_POST_COLOR_MATRIX_GREEN_BIAS");
    PixelTransferParameter.put(GL_DEPTH_BIAS, "GL_DEPTH_BIAS");
    PixelTransferParameter.put(GL_GREEN_SCALE, "GL_GREEN_SCALE");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_ALPHA_BIAS, "GL_POST_CONVOLUTION_ALPHA_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    PixelTransferParameter.put(GL_POST_CONVOLUTION_GREEN_SCALE, "GL_POST_CONVOLUTION_GREEN_SCALE");
    PixelTransferParameter.put(GL_MAP_COLOR, "GL_MAP_COLOR");
    PixelTransferParameter.put(GL_ALPHA_BIAS, "GL_ALPHA_BIAS");
    PixelTransferParameter.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE, "GL_POST_COLOR_MATRIX_ALPHA_SCALE");
    PixelTransferParameter.put(GL_RED_SCALE, "GL_RED_SCALE");
  }
  public static Map<Integer, String> PixelTransferParameter() {
    if (PixelTransferParameter != null)
      return PixelTransferParameter;
    PixelTransferParameter = new HashMap<Integer, String>(38);
    PixelTransferParameter0();
    return PixelTransferParameter;
  }
  private static Map<Integer, String> SamplePatternSGIS;
  private static void SamplePatternSGIS0() {
    SamplePatternSGIS.put(GL_2PASS_1_SGIS, "GL_2PASS_1_SGIS");
    SamplePatternSGIS.put(GL_4PASS_1_SGIS, "GL_4PASS_1_SGIS");
    SamplePatternSGIS.put(GL_4PASS_2_SGIS, "GL_4PASS_2_SGIS");
    SamplePatternSGIS.put(GL_1PASS_SGIS, "GL_1PASS_SGIS");
    SamplePatternSGIS.put(GL_2PASS_0_SGIS, "GL_2PASS_0_SGIS");
    SamplePatternSGIS.put(GL_4PASS_0_SGIS, "GL_4PASS_0_SGIS");
    SamplePatternSGIS.put(GL_4PASS_3_SGIS, "GL_4PASS_3_SGIS");
  }
  public static Map<Integer, String> SamplePatternSGIS() {
    if (SamplePatternSGIS != null)
      return SamplePatternSGIS;
    SamplePatternSGIS = new HashMap<Integer, String>(7);
    SamplePatternSGIS0();
    return SamplePatternSGIS;
  }
  private static Map<Integer, String> TypeEnum;
  private static void TypeEnum0() {
    TypeEnum.put(GL_QUERY_NO_WAIT, "GL_QUERY_NO_WAIT");
    TypeEnum.put(GL_QUERY_BY_REGION_WAIT, "GL_QUERY_BY_REGION_WAIT");
    TypeEnum.put(GL_QUERY_BY_REGION_NO_WAIT, "GL_QUERY_BY_REGION_NO_WAIT");
    TypeEnum.put(GL_QUERY_WAIT, "GL_QUERY_WAIT");
  }
  public static Map<Integer, String> TypeEnum() {
    if (TypeEnum != null)
      return TypeEnum;
    TypeEnum = new HashMap<Integer, String>(4);
    TypeEnum0();
    return TypeEnum;
  }
  private static Map<Integer, String> StencilOp;
  private static void StencilOp0() {
    StencilOp.put(GL_KEEP, "GL_KEEP");
    StencilOp.put(GL_INCR, "GL_INCR");
    StencilOp.put(GL_INVERT, "GL_INVERT");
    StencilOp.put(GL_REPLACE, "GL_REPLACE");
    StencilOp.put(GL_ZERO, "GL_ZERO");
    StencilOp.put(GL_DECR, "GL_DECR");
  }
  public static Map<Integer, String> StencilOp() {
    if (StencilOp != null)
      return StencilOp;
    StencilOp = new HashMap<Integer, String>(6);
    StencilOp0();
    return StencilOp;
  }
  private static Map<Integer, String> ErrorCode;
  private static void ErrorCode0() {
    ErrorCode.put(GL_TABLE_TOO_LARGE, "GL_TABLE_TOO_LARGE");
    ErrorCode.put(GL_STACK_UNDERFLOW, "GL_STACK_UNDERFLOW");
    ErrorCode.put(GL_INVALID_OPERATION, "GL_INVALID_OPERATION");
    ErrorCode.put(GL_STACK_OVERFLOW, "GL_STACK_OVERFLOW");
    ErrorCode.put(GL_OUT_OF_MEMORY, "GL_OUT_OF_MEMORY");
    ErrorCode.put(GL_INVALID_VALUE, "GL_INVALID_VALUE");
    ErrorCode.put(GL_NO_ERROR, "GL_NO_ERROR");
    ErrorCode.put(GL_INVALID_FRAMEBUFFER_OPERATION, "GL_INVALID_FRAMEBUFFER_OPERATION");
    ErrorCode.put(GL_INVALID_ENUM, "GL_INVALID_ENUM");
  }
  public static Map<Integer, String> ErrorCode() {
    if (ErrorCode != null)
      return ErrorCode;
    ErrorCode = new HashMap<Integer, String>(9);
    ErrorCode0();
    return ErrorCode;
  }
  private static Map<Integer, String> SeparableTargetEXT;
  private static void SeparableTargetEXT0() {
    SeparableTargetEXT.put(GL_SEPARABLE_2D, "GL_SEPARABLE_2D");
  }
  public static Map<Integer, String> SeparableTargetEXT() {
    if (SeparableTargetEXT != null)
      return SeparableTargetEXT;
    SeparableTargetEXT = new HashMap<Integer, String>(1);
    SeparableTargetEXT0();
    return SeparableTargetEXT;
  }
  private static Map<Integer, String> AlphaFunction;
  private static void AlphaFunction0() {
    AlphaFunction.put(GL_EQUAL, "GL_EQUAL");
    AlphaFunction.put(GL_GREATER, "GL_GREATER");
    AlphaFunction.put(GL_LEQUAL, "GL_LEQUAL");
    AlphaFunction.put(GL_NEVER, "GL_NEVER");
    AlphaFunction.put(GL_GEQUAL, "GL_GEQUAL");
    AlphaFunction.put(GL_LESS, "GL_LESS");
    AlphaFunction.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    AlphaFunction.put(GL_ALWAYS, "GL_ALWAYS");
  }
  public static Map<Integer, String> AlphaFunction() {
    if (AlphaFunction != null)
      return AlphaFunction;
    AlphaFunction = new HashMap<Integer, String>(8);
    AlphaFunction0();
    return AlphaFunction;
  }
  private static Map<Integer, String> BlitFramebufferFilter;
  private static void BlitFramebufferFilter0() {
    BlitFramebufferFilter.put(GL_LINEAR, "GL_LINEAR");
    BlitFramebufferFilter.put(GL_NEAREST, "GL_NEAREST");
  }
  public static Map<Integer, String> BlitFramebufferFilter() {
    if (BlitFramebufferFilter != null)
      return BlitFramebufferFilter;
    BlitFramebufferFilter = new HashMap<Integer, String>(2);
    BlitFramebufferFilter0();
    return BlitFramebufferFilter;
  }
  private static Map<Integer, String> GetMapQuery;
  private static void GetMapQuery0() {
    GetMapQuery.put(GL_COEFF, "GL_COEFF");
    GetMapQuery.put(GL_DOMAIN, "GL_DOMAIN");
    GetMapQuery.put(GL_ORDER, "GL_ORDER");
  }
  public static Map<Integer, String> GetMapQuery() {
    if (GetMapQuery != null)
      return GetMapQuery;
    GetMapQuery = new HashMap<Integer, String>(3);
    GetMapQuery0();
    return GetMapQuery;
  }
  private static Map<Integer, String> PixelStoreResampleMode;
  private static void PixelStoreResampleMode0() {
    PixelStoreResampleMode.put(GL_RESAMPLE_DECIMATE_SGIX, "GL_RESAMPLE_DECIMATE_SGIX");
    PixelStoreResampleMode.put(GL_RESAMPLE_REPLICATE_SGIX, "GL_RESAMPLE_REPLICATE_SGIX");
    PixelStoreResampleMode.put(GL_RESAMPLE_ZERO_FILL_SGIX, "GL_RESAMPLE_ZERO_FILL_SGIX");
  }
  public static Map<Integer, String> PixelStoreResampleMode() {
    if (PixelStoreResampleMode != null)
      return PixelStoreResampleMode;
    PixelStoreResampleMode = new HashMap<Integer, String>(3);
    PixelStoreResampleMode0();
    return PixelStoreResampleMode;
  }
  private static Map<Integer, String> FeedBackToken;
  private static void FeedBackToken0() {
    FeedBackToken.put(GL_BITMAP_TOKEN, "GL_BITMAP_TOKEN");
    FeedBackToken.put(GL_COPY_PIXEL_TOKEN, "GL_COPY_PIXEL_TOKEN");
    FeedBackToken.put(GL_DRAW_PIXEL_TOKEN, "GL_DRAW_PIXEL_TOKEN");
    FeedBackToken.put(GL_POINT_TOKEN, "GL_POINT_TOKEN");
    FeedBackToken.put(GL_LINE_TOKEN, "GL_LINE_TOKEN");
    FeedBackToken.put(GL_LINE_RESET_TOKEN, "GL_LINE_RESET_TOKEN");
    FeedBackToken.put(GL_POLYGON_TOKEN, "GL_POLYGON_TOKEN");
    FeedBackToken.put(GL_PASS_THROUGH_TOKEN, "GL_PASS_THROUGH_TOKEN");
  }
  public static Map<Integer, String> FeedBackToken() {
    if (FeedBackToken != null)
      return FeedBackToken;
    FeedBackToken = new HashMap<Integer, String>(8);
    FeedBackToken0();
    return FeedBackToken;
  }
  private static Map<Integer, String> MapTextureFormatINTEL;
  private static void MapTextureFormatINTEL0() {
    MapTextureFormatINTEL.put(GL_LAYOUT_LINEAR_CPU_CACHED_INTEL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL");
    MapTextureFormatINTEL.put(GL_LAYOUT_LINEAR_INTEL, "GL_LAYOUT_LINEAR_INTEL");
    MapTextureFormatINTEL.put(GL_LAYOUT_DEFAULT_INTEL, "GL_LAYOUT_DEFAULT_INTEL");
  }
  public static Map<Integer, String> MapTextureFormatINTEL() {
    if (MapTextureFormatINTEL != null)
      return MapTextureFormatINTEL;
    MapTextureFormatINTEL = new HashMap<Integer, String>(3);
    MapTextureFormatINTEL0();
    return MapTextureFormatINTEL;
  }
  private static Map<Integer, String> TextureEnvMode;
  private static void TextureEnvMode0() {
    TextureEnvMode.put(GL_MODULATE, "GL_MODULATE");
    TextureEnvMode.put(GL_ADD, "GL_ADD");
    TextureEnvMode.put(GL_BLEND, "GL_BLEND");
    TextureEnvMode.put(GL_DECAL, "GL_DECAL");
    TextureEnvMode.put(GL_TEXTURE_ENV_BIAS_SGIX, "GL_TEXTURE_ENV_BIAS_SGIX");
  }
  public static Map<Integer, String> TextureEnvMode() {
    if (TextureEnvMode != null)
      return TextureEnvMode;
    TextureEnvMode = new HashMap<Integer, String>(5);
    TextureEnvMode0();
    return TextureEnvMode;
  }
  private static Map<Integer, String> RenderingMode;
  private static void RenderingMode0() {
    RenderingMode.put(GL_SELECT, "GL_SELECT");
    RenderingMode.put(GL_RENDER, "GL_RENDER");
    RenderingMode.put(GL_FEEDBACK, "GL_FEEDBACK");
  }
  public static Map<Integer, String> RenderingMode() {
    if (RenderingMode != null)
      return RenderingMode;
    RenderingMode = new HashMap<Integer, String>(3);
    RenderingMode0();
    return RenderingMode;
  }
  private static Map<Integer, String> ConvolutionTargetEXT;
  private static void ConvolutionTargetEXT0() {
    ConvolutionTargetEXT.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    ConvolutionTargetEXT.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
  }
  public static Map<Integer, String> ConvolutionTargetEXT() {
    if (ConvolutionTargetEXT != null)
      return ConvolutionTargetEXT;
    ConvolutionTargetEXT = new HashMap<Integer, String>(2);
    ConvolutionTargetEXT0();
    return ConvolutionTargetEXT;
  }
  private static Map<Integer, String> HintMode;
  private static void HintMode0() {
    HintMode.put(GL_FASTEST, "GL_FASTEST");
    HintMode.put(GL_DONT_CARE, "GL_DONT_CARE");
    HintMode.put(GL_NICEST, "GL_NICEST");
  }
  public static Map<Integer, String> HintMode() {
    if (HintMode != null)
      return HintMode;
    HintMode = new HashMap<Integer, String>(3);
    HintMode0();
    return HintMode;
  }
  private static Map<Integer, String> TextureParameterName;
  private static void TextureParameterName0() {
    TextureParameterName.put(GL_SHADOW_AMBIENT_SGIX, "GL_SHADOW_AMBIENT_SGIX");
    TextureParameterName.put(GL_TEXTURE_BASE_LEVEL_SGIS, "GL_TEXTURE_BASE_LEVEL_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_CLAMP_S_SGIX, "GL_TEXTURE_MAX_CLAMP_S_SGIX");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS_S_SGIX, "GL_TEXTURE_LOD_BIAS_S_SGIX");
    TextureParameterName.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
    TextureParameterName.put(GL_TEXTURE_COMPARE_OPERATOR_SGIX, "GL_TEXTURE_COMPARE_OPERATOR_SGIX");
    TextureParameterName.put(GL_TEXTURE_GEQUAL_R_SGIX, "GL_TEXTURE_GEQUAL_R_SGIX");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX");
    TextureParameterName.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_CLAMP_T_SGIX, "GL_TEXTURE_MAX_CLAMP_T_SGIX");
    TextureParameterName.put(GL_TEXTURE_COMPARE_FUNC, "GL_TEXTURE_COMPARE_FUNC");
    TextureParameterName.put(GL_TEXTURE_RESIDENT, "GL_TEXTURE_RESIDENT");
    TextureParameterName.put(GL_TEXTURE_MIN_FILTER, "GL_TEXTURE_MIN_FILTER");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_FRAME_SGIX, "GL_TEXTURE_CLIPMAP_FRAME_SGIX");
    TextureParameterName.put(GL_TEXTURE_BORDER, "GL_TEXTURE_BORDER");
    TextureParameterName.put(GL_TEXTURE_LEQUAL_R_SGIX, "GL_TEXTURE_LEQUAL_R_SGIX");
    TextureParameterName.put(GL_TEXTURE_BLUE_SIZE, "GL_TEXTURE_BLUE_SIZE");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_RGBA, "GL_TEXTURE_SWIZZLE_RGBA");
    TextureParameterName.put(GL_TEXTURE_INTENSITY_SIZE, "GL_TEXTURE_INTENSITY_SIZE");
    TextureParameterName.put(GL_TEXTURE_MAX_CLAMP_R_SGIX, "GL_TEXTURE_MAX_CLAMP_R_SGIX");
    TextureParameterName.put(GL_POST_TEXTURE_FILTER_BIAS_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_SGIX");
    TextureParameterName.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    TextureParameterName.put(GL_TEXTURE_MIN_LOD, "GL_TEXTURE_MIN_LOD");
    TextureParameterName.put(GL_TEXTURE_MAG_FILTER, "GL_TEXTURE_MAG_FILTER");
    TextureParameterName.put(GL_QUAD_TEXTURE_SELECT_SGIS, "GL_QUAD_TEXTURE_SELECT_SGIS");
    TextureParameterName.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS_T_SGIX, "GL_TEXTURE_LOD_BIAS_T_SGIX");
    TextureParameterName.put(GL_DUAL_TEXTURE_SELECT_SGIS, "GL_DUAL_TEXTURE_SELECT_SGIS");
    TextureParameterName.put(GL_TEXTURE_INTERNAL_FORMAT, "GL_TEXTURE_INTERNAL_FORMAT");
    TextureParameterName.put(GL_TEXTURE_RED_SIZE, "GL_TEXTURE_RED_SIZE");
    TextureParameterName.put(GL_GENERATE_MIPMAP, "GL_GENERATE_MIPMAP");
    TextureParameterName.put(GL_GENERATE_MIPMAP_SGIS, "GL_GENERATE_MIPMAP_SGIS");
    TextureParameterName.put(GL_TEXTURE_HEIGHT, "GL_TEXTURE_HEIGHT");
    TextureParameterName.put(GL_TEXTURE_COMPARE_SGIX, "GL_TEXTURE_COMPARE_SGIX");
    TextureParameterName.put(GL_TEXTURE_MAX_LOD, "GL_TEXTURE_MAX_LOD");
    TextureParameterName.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_CENTER_SGIX, "GL_TEXTURE_CLIPMAP_CENTER_SGIX");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX");
    TextureParameterName.put(GL_TEXTURE_LUMINANCE_SIZE, "GL_TEXTURE_LUMINANCE_SIZE");
    TextureParameterName.put(GL_TEXTURE_MIN_LOD_SGIS, "GL_TEXTURE_MIN_LOD_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_LEVEL_SGIS, "GL_TEXTURE_MAX_LEVEL_SGIS");
    TextureParameterName.put(GL_POST_TEXTURE_FILTER_SCALE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_SGIX");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_R, "GL_TEXTURE_SWIZZLE_R");
    TextureParameterName.put(GL_TEXTURE_COMPONENTS, "GL_TEXTURE_COMPONENTS");
    TextureParameterName.put(GL_TEXTURE_WIDTH, "GL_TEXTURE_WIDTH");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS_R_SGIX, "GL_TEXTURE_LOD_BIAS_R_SGIX");
    TextureParameterName.put(GL_TEXTURE_MAX_LOD_SGIS, "GL_TEXTURE_MAX_LOD_SGIS");
    TextureParameterName.put(GL_TEXTURE_GREEN_SIZE, "GL_TEXTURE_GREEN_SIZE");
    TextureParameterName.put(GL_TEXTURE_COMPARE_MODE, "GL_TEXTURE_COMPARE_MODE");
    TextureParameterName.put(GL_TEXTURE_WRAP_R, "GL_TEXTURE_WRAP_R");
    TextureParameterName.put(GL_TEXTURE_WRAP_S, "GL_TEXTURE_WRAP_S");
    TextureParameterName.put(GL_TEXTURE_WRAP_T, "GL_TEXTURE_WRAP_T");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_OFFSET_SGIX, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX");
    TextureParameterName.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    TextureParameterName.put(GL_TEXTURE_MAX_LEVEL, "GL_TEXTURE_MAX_LEVEL");
    TextureParameterName.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_B, "GL_TEXTURE_SWIZZLE_B");
    TextureParameterName.put(GL_TEXTURE_PRIORITY, "GL_TEXTURE_PRIORITY");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_A, "GL_TEXTURE_SWIZZLE_A");
    TextureParameterName.put(GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    TextureParameterName.put(GL_TEXTURE_BASE_LEVEL, "GL_TEXTURE_BASE_LEVEL");
    TextureParameterName.put(GL_DEPTH_STENCIL_TEXTURE_MODE, "GL_DEPTH_STENCIL_TEXTURE_MODE");
    TextureParameterName.put(GL_TEXTURE_LOD_BIAS, "GL_TEXTURE_LOD_BIAS");
    TextureParameterName.put(GL_TEXTURE_SWIZZLE_G, "GL_TEXTURE_SWIZZLE_G");
    TextureParameterName.put(GL_TEXTURE_ALPHA_SIZE, "GL_TEXTURE_ALPHA_SIZE");
    TextureParameterName.put(GL_TEXTURE_BORDER_COLOR, "GL_TEXTURE_BORDER_COLOR");
  }
  public static Map<Integer, String> TextureParameterName() {
    if (TextureParameterName != null)
      return TextureParameterName;
    TextureParameterName = new HashMap<Integer, String>(66);
    TextureParameterName0();
    return TextureParameterName;
  }
  private static Map<Integer, String> TextureFilterFuncSGIS;
  private static void TextureFilterFuncSGIS0() {
    TextureFilterFuncSGIS.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
  }
  public static Map<Integer, String> TextureFilterFuncSGIS() {
    if (TextureFilterFuncSGIS != null)
      return TextureFilterFuncSGIS;
    TextureFilterFuncSGIS = new HashMap<Integer, String>(1);
    TextureFilterFuncSGIS0();
    return TextureFilterFuncSGIS;
  }
  private static Map<Integer, String> UniformBlockPName;
  private static void UniformBlockPName0() {
    UniformBlockPName.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_DATA_SIZE, "GL_UNIFORM_BLOCK_DATA_SIZE");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_NAME_LENGTH, "GL_UNIFORM_BLOCK_NAME_LENGTH");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER");
    UniformBlockPName.put(GL_UNIFORM_BLOCK_BINDING, "GL_UNIFORM_BLOCK_BINDING");
  }
  public static Map<Integer, String> UniformBlockPName() {
    if (UniformBlockPName != null)
      return UniformBlockPName;
    UniformBlockPName = new HashMap<Integer, String>(11);
    UniformBlockPName0();
    return UniformBlockPName;
  }
  private static Map<Integer, String> ProgramPropertyARB;
  private static void ProgramPropertyARB0() {
    ProgramPropertyARB.put(GL_GEOMETRY_INPUT_TYPE, "GL_GEOMETRY_INPUT_TYPE");
    ProgramPropertyARB.put(GL_ACTIVE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_UNIFORM_MAX_LENGTH");
    ProgramPropertyARB.put(GL_INFO_LOG_LENGTH, "GL_INFO_LOG_LENGTH");
    ProgramPropertyARB.put(GL_TRANSFORM_FEEDBACK_VARYINGS, "GL_TRANSFORM_FEEDBACK_VARYINGS");
    ProgramPropertyARB.put(GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH");
    ProgramPropertyARB.put(GL_GEOMETRY_VERTICES_OUT, "GL_GEOMETRY_VERTICES_OUT");
    ProgramPropertyARB.put(GL_ACTIVE_UNIFORM_BLOCKS, "GL_ACTIVE_UNIFORM_BLOCKS");
    ProgramPropertyARB.put(GL_COMPUTE_WORK_GROUP_SIZE, "GL_COMPUTE_WORK_GROUP_SIZE");
    ProgramPropertyARB.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE");
    ProgramPropertyARB.put(GL_GEOMETRY_OUTPUT_TYPE, "GL_GEOMETRY_OUTPUT_TYPE");
    ProgramPropertyARB.put(GL_DELETE_STATUS, "GL_DELETE_STATUS");
    ProgramPropertyARB.put(GL_PROGRAM_BINARY_LENGTH, "GL_PROGRAM_BINARY_LENGTH");
    ProgramPropertyARB.put(GL_LINK_STATUS, "GL_LINK_STATUS");
    ProgramPropertyARB.put(GL_ACTIVE_UNIFORMS, "GL_ACTIVE_UNIFORMS");
    ProgramPropertyARB.put(GL_VALIDATE_STATUS, "GL_VALIDATE_STATUS");
    ProgramPropertyARB.put(GL_ATTACHED_SHADERS, "GL_ATTACHED_SHADERS");
    ProgramPropertyARB.put(GL_ACTIVE_ATTRIBUTES, "GL_ACTIVE_ATTRIBUTES");
    ProgramPropertyARB.put(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH");
    ProgramPropertyARB.put(GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS");
    ProgramPropertyARB.put(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH");
  }
  public static Map<Integer, String> ProgramPropertyARB() {
    if (ProgramPropertyARB != null)
      return ProgramPropertyARB;
    ProgramPropertyARB = new HashMap<Integer, String>(20);
    ProgramPropertyARB0();
    return ProgramPropertyARB;
  }
  private static Map<Integer, String> Boolean;
  private static void Boolean0() {
    Boolean.put(GL_TRUE, "GL_TRUE");
    Boolean.put(GL_FALSE, "GL_FALSE");
  }
  public static Map<Integer, String> Boolean() {
    if (Boolean != null)
      return Boolean;
    Boolean = new HashMap<Integer, String>(2);
    Boolean0();
    return Boolean;
  }
  private static Map<Integer, String> ClearBufferMask;
  private static void ClearBufferMask0() {
    ClearBufferMask.put(GL_COLOR_BUFFER_BIT, "GL_COLOR_BUFFER_BIT");
    ClearBufferMask.put(GL_ACCUM_BUFFER_BIT, "GL_ACCUM_BUFFER_BIT");
    ClearBufferMask.put(GL_STENCIL_BUFFER_BIT, "GL_STENCIL_BUFFER_BIT");
    ClearBufferMask.put(GL_DEPTH_BUFFER_BIT, "GL_DEPTH_BUFFER_BIT");
  }
  public static Map<Integer, String> ClearBufferMask() {
    if (ClearBufferMask != null)
      return ClearBufferMask;
    ClearBufferMask = new HashMap<Integer, String>(4);
    ClearBufferMask0();
    return ClearBufferMask;
  }
  private static Map<Integer, String> PathCoverMode;
  private static void PathCoverMode0() {
  }
  public static Map<Integer, String> PathCoverMode() {
    if (PathCoverMode != null)
      return PathCoverMode;
    PathCoverMode = new HashMap<Integer, String>(0);
    PathCoverMode0();
    return PathCoverMode;
  }
  private static Map<Integer, String> MeshMode1;
  private static void MeshMode10() {
    MeshMode1.put(GL_POINT, "GL_POINT");
    MeshMode1.put(GL_LINE, "GL_LINE");
  }
  public static Map<Integer, String> MeshMode1() {
    if (MeshMode1 != null)
      return MeshMode1;
    MeshMode1 = new HashMap<Integer, String>(2);
    MeshMode10();
    return MeshMode1;
  }
  private static Map<Integer, String> Buffer;
  private static void Buffer0() {
    Buffer.put(GL_DEPTH, "GL_DEPTH");
    Buffer.put(GL_COLOR, "GL_COLOR");
    Buffer.put(GL_STENCIL, "GL_STENCIL");
  }
  public static Map<Integer, String> Buffer() {
    if (Buffer != null)
      return Buffer;
    Buffer = new HashMap<Integer, String>(3);
    Buffer0();
    return Buffer;
  }
  private static Map<Integer, String> PathGenMode;
  private static void PathGenMode0() {
    PathGenMode.put(GL_CONSTANT, "GL_CONSTANT");
    PathGenMode.put(GL_OBJECT_LINEAR, "GL_OBJECT_LINEAR");
    PathGenMode.put(GL_NONE, "GL_NONE");
    PathGenMode.put(GL_EYE_LINEAR, "GL_EYE_LINEAR");
  }
  public static Map<Integer, String> PathGenMode() {
    if (PathGenMode != null)
      return PathGenMode;
    PathGenMode = new HashMap<Integer, String>(4);
    PathGenMode0();
    return PathGenMode;
  }
  private static Map<Integer, String> MeshMode2;
  private static void MeshMode20() {
    MeshMode2.put(GL_POINT, "GL_POINT");
    MeshMode2.put(GL_LINE, "GL_LINE");
    MeshMode2.put(GL_FILL, "GL_FILL");
  }
  public static Map<Integer, String> MeshMode2() {
    if (MeshMode2 != null)
      return MeshMode2;
    MeshMode2 = new HashMap<Integer, String>(3);
    MeshMode20();
    return MeshMode2;
  }
  private static Map<Integer, String> FramebufferParameterName;
  private static void FramebufferParameterName0() {
    FramebufferParameterName.put(GL_FRAMEBUFFER_DEFAULT_WIDTH, "GL_FRAMEBUFFER_DEFAULT_WIDTH");
    FramebufferParameterName.put(GL_FRAMEBUFFER_DEFAULT_HEIGHT, "GL_FRAMEBUFFER_DEFAULT_HEIGHT");
    FramebufferParameterName.put(GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");
    FramebufferParameterName.put(GL_FRAMEBUFFER_DEFAULT_LAYERS, "GL_FRAMEBUFFER_DEFAULT_LAYERS");
    FramebufferParameterName.put(GL_FRAMEBUFFER_DEFAULT_SAMPLES, "GL_FRAMEBUFFER_DEFAULT_SAMPLES");
  }
  public static Map<Integer, String> FramebufferParameterName() {
    if (FramebufferParameterName != null)
      return FramebufferParameterName;
    FramebufferParameterName = new HashMap<Integer, String>(5);
    FramebufferParameterName0();
    return FramebufferParameterName;
  }
  private static Map<Integer, String> ColorTableTarget;
  private static void ColorTableTarget0() {
    ColorTableTarget.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    ColorTableTarget.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    ColorTableTarget.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
  }
  public static Map<Integer, String> ColorTableTarget() {
    if (ColorTableTarget != null)
      return ColorTableTarget;
    ColorTableTarget = new HashMap<Integer, String>(3);
    ColorTableTarget0();
    return ColorTableTarget;
  }
  private static Map<Integer, String> UseProgramStageMask;
  private static void UseProgramStageMask0() {
    UseProgramStageMask.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    UseProgramStageMask.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    UseProgramStageMask.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    UseProgramStageMask.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
    UseProgramStageMask.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    UseProgramStageMask.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    UseProgramStageMask.put(GL_COMPUTE_SHADER_BIT, "GL_COMPUTE_SHADER_BIT");
  }
  public static Map<Integer, String> UseProgramStageMask() {
    if (UseProgramStageMask != null)
      return UseProgramStageMask;
    UseProgramStageMask = new HashMap<Integer, String>(7);
    UseProgramStageMask0();
    return UseProgramStageMask;
  }
  private static Map<Integer, String> MapQuery;
  private static void MapQuery0() {
    MapQuery.put(GL_COEFF, "GL_COEFF");
    MapQuery.put(GL_DOMAIN, "GL_DOMAIN");
    MapQuery.put(GL_ORDER, "GL_ORDER");
  }
  public static Map<Integer, String> MapQuery() {
    if (MapQuery != null)
      return MapQuery;
    MapQuery = new HashMap<Integer, String>(3);
    MapQuery0();
    return MapQuery;
  }
  private static Map<Integer, String> BufferTargetARB;
  private static void BufferTargetARB0() {
    BufferTargetARB.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    BufferTargetARB.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    BufferTargetARB.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    BufferTargetARB.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    BufferTargetARB.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    BufferTargetARB.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    BufferTargetARB.put(GL_PIXEL_UNPACK_BUFFER, "GL_PIXEL_UNPACK_BUFFER");
    BufferTargetARB.put(GL_ELEMENT_ARRAY_BUFFER, "GL_ELEMENT_ARRAY_BUFFER");
    BufferTargetARB.put(GL_PIXEL_PACK_BUFFER, "GL_PIXEL_PACK_BUFFER");
    BufferTargetARB.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    BufferTargetARB.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    BufferTargetARB.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    BufferTargetARB.put(GL_ARRAY_BUFFER, "GL_ARRAY_BUFFER");
    BufferTargetARB.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
  }
  public static Map<Integer, String> BufferTargetARB() {
    if (BufferTargetARB != null)
      return BufferTargetARB;
    BufferTargetARB = new HashMap<Integer, String>(14);
    BufferTargetARB0();
    return BufferTargetARB;
  }
  private static Map<Integer, String> ColorTableParameterPNameSGI;
  private static void ColorTableParameterPNameSGI0() {
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    ColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
  }
  public static Map<Integer, String> ColorTableParameterPNameSGI() {
    if (ColorTableParameterPNameSGI != null)
      return ColorTableParameterPNameSGI;
    ColorTableParameterPNameSGI = new HashMap<Integer, String>(4);
    ColorTableParameterPNameSGI0();
    return ColorTableParameterPNameSGI;
  }
  private static Map<Integer, String> MinmaxTargetEXT;
  private static void MinmaxTargetEXT0() {
    MinmaxTargetEXT.put(GL_MINMAX, "GL_MINMAX");
  }
  public static Map<Integer, String> MinmaxTargetEXT() {
    if (MinmaxTargetEXT != null)
      return MinmaxTargetEXT;
    MinmaxTargetEXT = new HashMap<Integer, String>(1);
    MinmaxTargetEXT0();
    return MinmaxTargetEXT;
  }
  private static Map<Integer, String> PixelStoreParameter;
  private static void PixelStoreParameter0() {
    PixelStoreParameter.put(GL_PACK_ROW_LENGTH, "GL_PACK_ROW_LENGTH");
    PixelStoreParameter.put(GL_PACK_SKIP_IMAGES, "GL_PACK_SKIP_IMAGES");
    PixelStoreParameter.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    PixelStoreParameter.put(GL_UNPACK_LSB_FIRST, "GL_UNPACK_LSB_FIRST");
    PixelStoreParameter.put(GL_PACK_RESAMPLE_OML, "GL_PACK_RESAMPLE_OML");
    PixelStoreParameter.put(GL_PACK_IMAGE_HEIGHT, "GL_PACK_IMAGE_HEIGHT");
    PixelStoreParameter.put(GL_UNPACK_IMAGE_HEIGHT, "GL_UNPACK_IMAGE_HEIGHT");
    PixelStoreParameter.put(GL_PACK_SKIP_PIXELS, "GL_PACK_SKIP_PIXELS");
    PixelStoreParameter.put(GL_UNPACK_SKIP_PIXELS, "GL_UNPACK_SKIP_PIXELS");
    PixelStoreParameter.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    PixelStoreParameter.put(GL_UNPACK_SKIP_ROWS, "GL_UNPACK_SKIP_ROWS");
    PixelStoreParameter.put(GL_PACK_LSB_FIRST, "GL_PACK_LSB_FIRST");
    PixelStoreParameter.put(GL_PACK_SKIP_ROWS, "GL_PACK_SKIP_ROWS");
    PixelStoreParameter.put(GL_UNPACK_SWAP_BYTES, "GL_UNPACK_SWAP_BYTES");
    PixelStoreParameter.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    PixelStoreParameter.put(GL_PACK_ALIGNMENT, "GL_PACK_ALIGNMENT");
    PixelStoreParameter.put(GL_UNPACK_RESAMPLE_OML, "GL_UNPACK_RESAMPLE_OML");
    PixelStoreParameter.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
    PixelStoreParameter.put(GL_PACK_SWAP_BYTES, "GL_PACK_SWAP_BYTES");
    PixelStoreParameter.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    PixelStoreParameter.put(GL_UNPACK_ROW_LENGTH, "GL_UNPACK_ROW_LENGTH");
    PixelStoreParameter.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    PixelStoreParameter.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    PixelStoreParameter.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    PixelStoreParameter.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    PixelStoreParameter.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    PixelStoreParameter.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    PixelStoreParameter.put(GL_UNPACK_SKIP_IMAGES, "GL_UNPACK_SKIP_IMAGES");
    PixelStoreParameter.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    PixelStoreParameter.put(GL_UNPACK_ALIGNMENT, "GL_UNPACK_ALIGNMENT");
    PixelStoreParameter.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
    PixelStoreParameter.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
  }
  public static Map<Integer, String> PixelStoreParameter() {
    if (PixelStoreParameter != null)
      return PixelStoreParameter;
    PixelStoreParameter = new HashMap<Integer, String>(32);
    PixelStoreParameter0();
    return PixelStoreParameter;
  }
  private static Map<Integer, String> ContextFlagMask;
  private static void ContextFlagMask0() {
    ContextFlagMask.put(GL_CONTEXT_FLAG_NO_ERROR_BIT, "GL_CONTEXT_FLAG_NO_ERROR_BIT");
    ContextFlagMask.put(GL_CONTEXT_FLAG_DEBUG_BIT, "GL_CONTEXT_FLAG_DEBUG_BIT");
    ContextFlagMask.put(GL_CONTEXT_FLAG_DEBUG_BIT_KHR, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR");
    ContextFlagMask.put(GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT, "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT");
    ContextFlagMask.put(GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR, "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR");
    ContextFlagMask.put(GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT");
  }
  public static Map<Integer, String> ContextFlagMask() {
    if (ContextFlagMask != null)
      return ContextFlagMask;
    ContextFlagMask = new HashMap<Integer, String>(6);
    ContextFlagMask0();
    return ContextFlagMask;
  }
  private static Map<Integer, String> MaterialParameter;
  private static void MaterialParameter0() {
    MaterialParameter.put(GL_AMBIENT_AND_DIFFUSE, "GL_AMBIENT_AND_DIFFUSE");
    MaterialParameter.put(GL_AMBIENT, "GL_AMBIENT");
    MaterialParameter.put(GL_SHININESS, "GL_SHININESS");
    MaterialParameter.put(GL_COLOR_INDEXES, "GL_COLOR_INDEXES");
    MaterialParameter.put(GL_SPECULAR, "GL_SPECULAR");
    MaterialParameter.put(GL_EMISSION, "GL_EMISSION");
    MaterialParameter.put(GL_DIFFUSE, "GL_DIFFUSE");
  }
  public static Map<Integer, String> MaterialParameter() {
    if (MaterialParameter != null)
      return MaterialParameter;
    MaterialParameter = new HashMap<Integer, String>(7);
    MaterialParameter0();
    return MaterialParameter;
  }
  private static Map<Integer, String> ShadingModel;
  private static void ShadingModel0() {
    ShadingModel.put(GL_SMOOTH, "GL_SMOOTH");
    ShadingModel.put(GL_FLAT, "GL_FLAT");
  }
  public static Map<Integer, String> ShadingModel() {
    if (ShadingModel != null)
      return ShadingModel;
    ShadingModel = new HashMap<Integer, String>(2);
    ShadingModel0();
    return ShadingModel;
  }
  private static Map<Integer, String> GraphicsResetStatus;
  private static void GraphicsResetStatus0() {
    GraphicsResetStatus.put(GL_GUILTY_CONTEXT_RESET, "GL_GUILTY_CONTEXT_RESET");
    GraphicsResetStatus.put(GL_NO_ERROR, "GL_NO_ERROR");
    GraphicsResetStatus.put(GL_INNOCENT_CONTEXT_RESET, "GL_INNOCENT_CONTEXT_RESET");
    GraphicsResetStatus.put(GL_UNKNOWN_CONTEXT_RESET, "GL_UNKNOWN_CONTEXT_RESET");
  }
  public static Map<Integer, String> GraphicsResetStatus() {
    if (GraphicsResetStatus != null)
      return GraphicsResetStatus;
    GraphicsResetStatus = new HashMap<Integer, String>(4);
    GraphicsResetStatus0();
    return GraphicsResetStatus;
  }
  private static Map<Integer, String> PathHandleMissingGlyphs;
  private static void PathHandleMissingGlyphs0() {
  }
  public static Map<Integer, String> PathHandleMissingGlyphs() {
    if (PathHandleMissingGlyphs != null)
      return PathHandleMissingGlyphs;
    PathHandleMissingGlyphs = new HashMap<Integer, String>(0);
    PathHandleMissingGlyphs0();
    return PathHandleMissingGlyphs;
  }
  private static Map<Integer, String> FogPointerTypeIBM;
  private static void FogPointerTypeIBM0() {
    FogPointerTypeIBM.put(GL_FLOAT, "GL_FLOAT");
    FogPointerTypeIBM.put(GL_DOUBLE, "GL_DOUBLE");
  }
  public static Map<Integer, String> FogPointerTypeIBM() {
    if (FogPointerTypeIBM != null)
      return FogPointerTypeIBM;
    FogPointerTypeIBM = new HashMap<Integer, String>(2);
    FogPointerTypeIBM0();
    return FogPointerTypeIBM;
  }
  private static Map<Integer, String> GetPName;
  private static void GetPName0() {
    GetPName.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GetPName.put(GL_PACK_LSB_FIRST, "GL_PACK_LSB_FIRST");
    GetPName.put(GL_ACCUM_CLEAR_VALUE, "GL_ACCUM_CLEAR_VALUE");
    GetPName.put(GL_ALIASED_LINE_WIDTH_RANGE, "GL_ALIASED_LINE_WIDTH_RANGE");
    GetPName.put(GL_PACK_SWAP_BYTES, "GL_PACK_SWAP_BYTES");
    GetPName.put(GL_POLYGON_OFFSET_LINE, "GL_POLYGON_OFFSET_LINE");
    GetPName.put(GL_PIXEL_TEX_GEN_MODE_SGIX, "GL_PIXEL_TEX_GEN_MODE_SGIX");
    GetPName.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    GetPName.put(GL_STENCIL_REF, "GL_STENCIL_REF");
    GetPName.put(GL_MODELVIEW_STACK_DEPTH, "GL_MODELVIEW_STACK_DEPTH");
    GetPName.put(GL_POINT_SIZE_RANGE, "GL_POINT_SIZE_RANGE");
    GetPName.put(GL_GREEN_SCALE, "GL_GREEN_SCALE");
    GetPName.put(GL_MAX_CLIPMAP_DEPTH_SGIX, "GL_MAX_CLIPMAP_DEPTH_SGIX");
    GetPName.put(GL_TEXTURE_4D_BINDING_SGIS, "GL_TEXTURE_4D_BINDING_SGIS");
    GetPName.put(GL_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_COLOR_MATRIX_STACK_DEPTH_SGI");
    GetPName.put(GL_GREEN_BIAS, "GL_GREEN_BIAS");
    GetPName.put(GL_STENCIL_PASS_DEPTH_PASS, "GL_STENCIL_PASS_DEPTH_PASS");
    GetPName.put(GL_PIXEL_TILE_GRID_HEIGHT_SGIX, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX");
    GetPName.put(GL_DEPTH_TEST, "GL_DEPTH_TEST");
    GetPName.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    GetPName.put(GL_SAMPLE_BUFFERS_SGIS, "GL_SAMPLE_BUFFERS_SGIS");
    GetPName.put(GL_PIXEL_MAP_I_TO_A_SIZE, "GL_PIXEL_MAP_I_TO_A_SIZE");
    GetPName.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    GetPName.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    GetPName.put(GL_VERTEX_ARRAY_SIZE, "GL_VERTEX_ARRAY_SIZE");
    GetPName.put(GL_POLYGON_OFFSET_FACTOR, "GL_POLYGON_OFFSET_FACTOR");
    GetPName.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    GetPName.put(GL_AUX_BUFFERS, "GL_AUX_BUFFERS");
    GetPName.put(GL_FOG_HINT, "GL_FOG_HINT");
    GetPName.put(GL_MAX_ASYNC_TEX_IMAGE_SGIX, "GL_MAX_ASYNC_TEX_IMAGE_SGIX");
    GetPName.put(GL_MAP2_GRID_SEGMENTS, "GL_MAP2_GRID_SEGMENTS");
    GetPName.put(GL_CURRENT_TEXTURE_COORDS, "GL_CURRENT_TEXTURE_COORDS");
    GetPName.put(GL_ACCUM_BLUE_BITS, "GL_ACCUM_BLUE_BITS");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    GetPName.put(GL_CURRENT_COLOR, "GL_CURRENT_COLOR");
    GetPName.put(GL_LIST_INDEX, "GL_LIST_INDEX");
    GetPName.put(GL_SPRITE_TRANSLATION_SGIX, "GL_SPRITE_TRANSLATION_SGIX");
    GetPName.put(GL_NORMAL_ARRAY, "GL_NORMAL_ARRAY");
    GetPName.put(GL_PROJECTION_MATRIX, "GL_PROJECTION_MATRIX");
    GetPName.put(GL_INDEX_ARRAY_STRIDE, "GL_INDEX_ARRAY_STRIDE");
    GetPName.put(GL_ASYNC_DRAW_PIXELS_SGIX, "GL_ASYNC_DRAW_PIXELS_SGIX");
    GetPName.put(GL_MATRIX_MODE, "GL_MATRIX_MODE");
    GetPName.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    GetPName.put(GL_MAX_LIST_NESTING, "GL_MAX_LIST_NESTING");
    GetPName.put(GL_MAP1_GRID_DOMAIN, "GL_MAP1_GRID_DOMAIN");
    GetPName.put(GL_VERTEX_ARRAY_TYPE, "GL_VERTEX_ARRAY_TYPE");
    GetPName.put(GL_UNPACK_ROW_LENGTH, "GL_UNPACK_ROW_LENGTH");
    GetPName.put(GL_MAP_STENCIL, "GL_MAP_STENCIL");
    GetPName.put(GL_RGBA_MODE, "GL_RGBA_MODE");
    GetPName.put(GL_LINE_STIPPLE, "GL_LINE_STIPPLE");
    GetPName.put(GL_SMOOTH_LINE_WIDTH_GRANULARITY, "GL_SMOOTH_LINE_WIDTH_GRANULARITY");
    GetPName.put(GL_MAX_TEXTURE_SIZE, "GL_MAX_TEXTURE_SIZE");
    GetPName.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI");
    GetPName.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    GetPName.put(GL_COLOR_MATRIX_SGI, "GL_COLOR_MATRIX_SGI");
    GetPName.put(GL_DEPTH_BITS, "GL_DEPTH_BITS");
    GetPName.put(GL_LINE_WIDTH_GRANULARITY, "GL_LINE_WIDTH_GRANULARITY");
    GetPName.put(GL_MAX_FRAGMENT_LIGHTS_SGIX, "GL_MAX_FRAGMENT_LIGHTS_SGIX");
    GetPName.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
    GetPName.put(GL_VERTEX_ARRAY_STRIDE, "GL_VERTEX_ARRAY_STRIDE");
    GetPName.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    GetPName.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    GetPName.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    GetPName.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    GetPName.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    GetPName.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
    GetPName.put(GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI");
    GetPName.put(GL_ALPHA_TEST_FUNC_QCOM, "GL_ALPHA_TEST_FUNC_QCOM");
    GetPName.put(GL_INDEX_ARRAY, "GL_INDEX_ARRAY");
    GetPName.put(GL_LINE_SMOOTH, "GL_LINE_SMOOTH");
    GetPName.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    GetPName.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    GetPName.put(GL_ALPHA_TEST, "GL_ALPHA_TEST");
    GetPName.put(GL_SPRITE_MODE_SGIX, "GL_SPRITE_MODE_SGIX");
    GetPName.put(GL_UNPACK_RESAMPLE_SGIX, "GL_UNPACK_RESAMPLE_SGIX");
    GetPName.put(GL_INTERLACE_SGIX, "GL_INTERLACE_SGIX");
    GetPName.put(GL_ASYNC_MARKER_SGIX, "GL_ASYNC_MARKER_SGIX");
    GetPName.put(GL_COLOR_ARRAY_STRIDE, "GL_COLOR_ARRAY_STRIDE");
    GetPName.put(GL_EDGE_FLAG_ARRAY_STRIDE, "GL_EDGE_FLAG_ARRAY_STRIDE");
    GetPName.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    GetPName.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    GetPName.put(GL_DEPTH_WRITEMASK, "GL_DEPTH_WRITEMASK");
    GetPName.put(GL_FRAMEZOOM_FACTOR_SGIX, "GL_FRAMEZOOM_FACTOR_SGIX");
    GetPName.put(GL_MAX_LIGHTS, "GL_MAX_LIGHTS");
    GetPName.put(GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI");
    GetPName.put(GL_PROJECTION_STACK_DEPTH, "GL_PROJECTION_STACK_DEPTH");
    GetPName.put(GL_UNPACK_SKIP_ROWS, "GL_UNPACK_SKIP_ROWS");
    GetPName.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GetPName.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    GetPName.put(GL_SMOOTH_LINE_WIDTH_RANGE, "GL_SMOOTH_LINE_WIDTH_RANGE");
  }
  private static void GetPName1() {
    GetPName.put(GL_PACK_ALIGNMENT, "GL_PACK_ALIGNMENT");
    GetPName.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    GetPName.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
    GetPName.put(GL_FRONT_FACE, "GL_FRONT_FACE");
    GetPName.put(GL_BLEND_SRC, "GL_BLEND_SRC");
    GetPName.put(GL_PACK_SUBSAMPLE_RATE_SGIX, "GL_PACK_SUBSAMPLE_RATE_SGIX");
    GetPName.put(GL_STENCIL_TEST, "GL_STENCIL_TEST");
    GetPName.put(GL_POST_COLOR_MATRIX_RED_BIAS_SGI, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI");
    GetPName.put(GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX");
    GetPName.put(GL_COLOR_MATERIAL_FACE, "GL_COLOR_MATERIAL_FACE");
    GetPName.put(GL_MAX_PIXEL_MAP_TABLE, "GL_MAX_PIXEL_MAP_TABLE");
    GetPName.put(GL_STEREO, "GL_STEREO");
    GetPName.put(GL_RENDER_MODE, "GL_RENDER_MODE");
    GetPName.put(GL_LIGHTING, "GL_LIGHTING");
    GetPName.put(GL_BLEND_DST, "GL_BLEND_DST");
    GetPName.put(GL_TEXTURE_STACK_DEPTH, "GL_TEXTURE_STACK_DEPTH");
    GetPName.put(GL_ALPHA_BITS, "GL_ALPHA_BITS");
    GetPName.put(GL_PERSPECTIVE_CORRECTION_HINT, "GL_PERSPECTIVE_CORRECTION_HINT");
    GetPName.put(GL_UNPACK_SKIP_PIXELS, "GL_UNPACK_SKIP_PIXELS");
    GetPName.put(GL_BLUE_SCALE, "GL_BLUE_SCALE");
    GetPName.put(GL_LOGIC_OP, "GL_LOGIC_OP");
    GetPName.put(GL_PACK_SKIP_ROWS, "GL_PACK_SKIP_ROWS");
    GetPName.put(GL_UNPACK_SWAP_BYTES, "GL_UNPACK_SWAP_BYTES");
    GetPName.put(GL_POLYGON_STIPPLE, "GL_POLYGON_STIPPLE");
    GetPName.put(GL_LIGHT_MODEL_TWO_SIDE, "GL_LIGHT_MODEL_TWO_SIDE");
    GetPName.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    GetPName.put(GL_DETAIL_TEXTURE_2D_BINDING_SGIS, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS");
    GetPName.put(GL_CURRENT_RASTER_DISTANCE, "GL_CURRENT_RASTER_DISTANCE");
    GetPName.put(GL_COLOR_CLEAR_VALUE, "GL_COLOR_CLEAR_VALUE");
    GetPName.put(GL_TEXTURE_COORD_ARRAY_TYPE, "GL_TEXTURE_COORD_ARRAY_TYPE");
    GetPName.put(GL_LINE_STIPPLE_PATTERN, "GL_LINE_STIPPLE_PATTERN");
    GetPName.put(GL_POLYGON_SMOOTH, "GL_POLYGON_SMOOTH");
    GetPName.put(GL_POINT_SIZE_GRANULARITY, "GL_POINT_SIZE_GRANULARITY");
    GetPName.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    GetPName.put(GL_STENCIL_PASS_DEPTH_FAIL, "GL_STENCIL_PASS_DEPTH_FAIL");
    GetPName.put(GL_MAX_FOG_FUNC_POINTS_SGIS, "GL_MAX_FOG_FUNC_POINTS_SGIS");
    GetPName.put(GL_FOG_MODE, "GL_FOG_MODE");
    GetPName.put(GL_ALPHA_TEST_FUNC, "GL_ALPHA_TEST_FUNC");
    GetPName.put(GL_POLYGON_OFFSET_POINT, "GL_POLYGON_OFFSET_POINT");
    GetPName.put(GL_PIXEL_TILE_HEIGHT_SGIX, "GL_PIXEL_TILE_HEIGHT_SGIX");
    GetPName.put(GL_FEEDBACK_BUFFER_SIZE, "GL_FEEDBACK_BUFFER_SIZE");
    GetPName.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GetPName.put(GL_ACCUM_ALPHA_BITS, "GL_ACCUM_ALPHA_BITS");
    GetPName.put(GL_LIST_MODE, "GL_LIST_MODE");
    GetPName.put(GL_TEXTURE_MATRIX, "GL_TEXTURE_MATRIX");
    GetPName.put(GL_DEPTH_SCALE, "GL_DEPTH_SCALE");
    GetPName.put(GL_MAX_CLIP_PLANES, "GL_MAX_CLIP_PLANES");
    GetPName.put(GL_POLYGON_OFFSET_FILL, "GL_POLYGON_OFFSET_FILL");
    GetPName.put(GL_NORMALIZE, "GL_NORMALIZE");
    GetPName.put(GL_MAX_ASYNC_HISTOGRAM_SGIX, "GL_MAX_ASYNC_HISTOGRAM_SGIX");
    GetPName.put(GL_ACCUM_RED_BITS, "GL_ACCUM_RED_BITS");
    GetPName.put(GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX, "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX");
    GetPName.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    GetPName.put(GL_CURRENT_RASTER_POSITION, "GL_CURRENT_RASTER_POSITION");
    GetPName.put(GL_PIXEL_MAP_R_TO_R_SIZE, "GL_PIXEL_MAP_R_TO_R_SIZE");
    GetPName.put(GL_TEXTURE_BINDING_1D, "GL_TEXTURE_BINDING_1D");
    GetPName.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    GetPName.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    GetPName.put(GL_TEXTURE_COORD_ARRAY_SIZE, "GL_TEXTURE_COORD_ARRAY_SIZE");
    GetPName.put(GL_ALPHA_TEST_QCOM, "GL_ALPHA_TEST_QCOM");
    GetPName.put(GL_CURRENT_RASTER_POSITION_VALID, "GL_CURRENT_RASTER_POSITION_VALID");
    GetPName.put(GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX");
    GetPName.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
    GetPName.put(GL_MAX_TEXTURE_STACK_DEPTH, "GL_MAX_TEXTURE_STACK_DEPTH");
    GetPName.put(GL_LINE_WIDTH, "GL_LINE_WIDTH");
    GetPName.put(GL_STENCIL_WRITEMASK, "GL_STENCIL_WRITEMASK");
    GetPName.put(GL_UNPACK_LSB_FIRST, "GL_UNPACK_LSB_FIRST");
    GetPName.put(GL_TEXTURE_BINDING_2D, "GL_TEXTURE_BINDING_2D");
    GetPName.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    GetPName.put(GL_CURRENT_RASTER_TEXTURE_COORDS, "GL_CURRENT_RASTER_TEXTURE_COORDS");
    GetPName.put(GL_NORMAL_ARRAY_STRIDE, "GL_NORMAL_ARRAY_STRIDE");
    GetPName.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    GetPName.put(GL_BLUE_BIAS, "GL_BLUE_BIAS");
    GetPName.put(GL_AUTO_NORMAL, "GL_AUTO_NORMAL");
    GetPName.put(GL_STENCIL_BITS, "GL_STENCIL_BITS");
    GetPName.put(GL_CULL_FACE_MODE, "GL_CULL_FACE_MODE");
    GetPName.put(GL_PIXEL_MAP_B_TO_B_SIZE, "GL_PIXEL_MAP_B_TO_B_SIZE");
    GetPName.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    GetPName.put(GL_DEFORMATIONS_MASK_SGIX, "GL_DEFORMATIONS_MASK_SGIX");
    GetPName.put(GL_FRAMEZOOM_SGIX, "GL_FRAMEZOOM_SGIX");
    GetPName.put(GL_READ_BUFFER, "GL_READ_BUFFER");
    GetPName.put(GL_FOG_COLOR, "GL_FOG_COLOR");
    GetPName.put(GL_TEXTURE_BINDING_3D, "GL_TEXTURE_BINDING_3D");
    GetPName.put(GL_FOG_OFFSET_SGIX, "GL_FOG_OFFSET_SGIX");
    GetPName.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    GetPName.put(GL_TEXTURE_COLOR_TABLE_SGI, "GL_TEXTURE_COLOR_TABLE_SGI");
    GetPName.put(GL_BLEND, "GL_BLEND");
    GetPName.put(GL_POINT_SMOOTH, "GL_POINT_SMOOTH");
    GetPName.put(GL_SPRITE_AXIS_SGIX, "GL_SPRITE_AXIS_SGIX");
    GetPName.put(GL_ALIASED_POINT_SIZE_RANGE, "GL_ALIASED_POINT_SIZE_RANGE");
    GetPName.put(GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX, "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX");
  }
  private static void GetPName2() {
    GetPName.put(GL_LINE_WIDTH_RANGE, "GL_LINE_WIDTH_RANGE");
    GetPName.put(GL_GREEN_BITS, "GL_GREEN_BITS");
    GetPName.put(GL_SAMPLE_PATTERN_SGIS, "GL_SAMPLE_PATTERN_SGIS");
    GetPName.put(GL_DOUBLEBUFFER, "GL_DOUBLEBUFFER");
    GetPName.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI");
    GetPName.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    GetPName.put(GL_RED_BITS, "GL_RED_BITS");
    GetPName.put(GL_LINE_SMOOTH_HINT, "GL_LINE_SMOOTH_HINT");
    GetPName.put(GL_COLOR_ARRAY_SIZE, "GL_COLOR_ARRAY_SIZE");
    GetPName.put(GL_LIGHT_MODEL_AMBIENT, "GL_LIGHT_MODEL_AMBIENT");
    GetPName.put(GL_PIXEL_MAP_I_TO_G_SIZE, "GL_PIXEL_MAP_I_TO_G_SIZE");
    GetPName.put(GL_CURRENT_NORMAL, "GL_CURRENT_NORMAL");
    GetPName.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    GetPName.put(GL_COLOR_MATERIAL, "GL_COLOR_MATERIAL");
    GetPName.put(GL_PIXEL_TILE_CACHE_SIZE_SGIX, "GL_PIXEL_TILE_CACHE_SIZE_SGIX");
    GetPName.put(GL_POLYGON_MODE, "GL_POLYGON_MODE");
    GetPName.put(GL_ATTRIB_STACK_DEPTH, "GL_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_MAX_PROJECTION_STACK_DEPTH, "GL_MAX_PROJECTION_STACK_DEPTH");
    GetPName.put(GL_MAX_ASYNC_DRAW_PIXELS_SGIX, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX");
    GetPName.put(GL_SMOOTH_POINT_SIZE_GRANULARITY, "GL_SMOOTH_POINT_SIZE_GRANULARITY");
    GetPName.put(GL_LIGHT_MODEL_LOCAL_VIEWER, "GL_LIGHT_MODEL_LOCAL_VIEWER");
    GetPName.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    GetPName.put(GL_CULL_FACE, "GL_CULL_FACE");
    GetPName.put(GL_SAMPLES_SGIS, "GL_SAMPLES_SGIS");
    GetPName.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    GetPName.put(GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI");
    GetPName.put(GL_VIEWPORT, "GL_VIEWPORT");
    GetPName.put(GL_TEXTURE_COORD_ARRAY, "GL_TEXTURE_COORD_ARRAY");
    GetPName.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    GetPName.put(GL_MAX_NAME_STACK_DEPTH, "GL_MAX_NAME_STACK_DEPTH");
    GetPName.put(GL_SELECTION_BUFFER_SIZE, "GL_SELECTION_BUFFER_SIZE");
    GetPName.put(GL_DEPTH_BIAS, "GL_DEPTH_BIAS");
    GetPName.put(GL_STENCIL_VALUE_MASK, "GL_STENCIL_VALUE_MASK");
    GetPName.put(GL_DEPTH_CLEAR_VALUE, "GL_DEPTH_CLEAR_VALUE");
    GetPName.put(GL_DEPTH_FUNC, "GL_DEPTH_FUNC");
    GetPName.put(GL_CURRENT_RASTER_INDEX, "GL_CURRENT_RASTER_INDEX");
    GetPName.put(GL_PACK_SKIP_PIXELS, "GL_PACK_SKIP_PIXELS");
    GetPName.put(GL_ALPHA_TEST_REF, "GL_ALPHA_TEST_REF");
    GetPName.put(GL_REFERENCE_PLANE_SGIX, "GL_REFERENCE_PLANE_SGIX");
    GetPName.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    GetPName.put(GL_MAX_ASYNC_READ_PIXELS_SGIX, "GL_MAX_ASYNC_READ_PIXELS_SGIX");
    GetPName.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    GetPName.put(GL_ALPHA_SCALE, "GL_ALPHA_SCALE");
    GetPName.put(GL_INDEX_CLEAR_VALUE, "GL_INDEX_CLEAR_VALUE");
    GetPName.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    GetPName.put(GL_IR_INSTRUMENT1_SGIX, "GL_IR_INSTRUMENT1_SGIX");
    GetPName.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    GetPName.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    GetPName.put(GL_FEEDBACK_BUFFER_TYPE, "GL_FEEDBACK_BUFFER_TYPE");
    GetPName.put(GL_UNPACK_ALIGNMENT, "GL_UNPACK_ALIGNMENT");
    GetPName.put(GL_LIST_BASE, "GL_LIST_BASE");
    GetPName.put(GL_PACK_ROW_LENGTH, "GL_PACK_ROW_LENGTH");
    GetPName.put(GL_NAME_STACK_DEPTH, "GL_NAME_STACK_DEPTH");
    GetPName.put(GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX");
    GetPName.put(GL_ASYNC_TEX_IMAGE_SGIX, "GL_ASYNC_TEX_IMAGE_SGIX");
    GetPName.put(GL_ASYNC_READ_PIXELS_SGIX, "GL_ASYNC_READ_PIXELS_SGIX");
    GetPName.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    GetPName.put(GL_ZOOM_X, "GL_ZOOM_X");
    GetPName.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    GetPName.put(GL_ZOOM_Y, "GL_ZOOM_Y");
    GetPName.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    GetPName.put(GL_PIXEL_TILE_GRID_DEPTH_SGIX, "GL_PIXEL_TILE_GRID_DEPTH_SGIX");
    GetPName.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    GetPName.put(GL_COLOR_MATERIAL_PARAMETER, "GL_COLOR_MATERIAL_PARAMETER");
    GetPName.put(GL_COLOR_ARRAY, "GL_COLOR_ARRAY");
    GetPName.put(GL_INDEX_OFFSET, "GL_INDEX_OFFSET");
    GetPName.put(GL_PIXEL_MAP_I_TO_R_SIZE, "GL_PIXEL_MAP_I_TO_R_SIZE");
    GetPName.put(GL_COLOR_ARRAY_TYPE, "GL_COLOR_ARRAY_TYPE");
    GetPName.put(GL_PACK_RESAMPLE_SGIX, "GL_PACK_RESAMPLE_SGIX");
    GetPName.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    GetPName.put(GL_ALPHA_TEST_REF_QCOM, "GL_ALPHA_TEST_REF_QCOM");
    GetPName.put(GL_LINE_STIPPLE_REPEAT, "GL_LINE_STIPPLE_REPEAT");
    GetPName.put(GL_CALLIGRAPHIC_FRAGMENT_SGIX, "GL_CALLIGRAPHIC_FRAGMENT_SGIX");
    GetPName.put(GL_INSTRUMENT_MEASUREMENTS_SGIX, "GL_INSTRUMENT_MEASUREMENTS_SGIX");
    GetPName.put(GL_ALPHA_BIAS, "GL_ALPHA_BIAS");
    GetPName.put(GL_ASYNC_HISTOGRAM_SGIX, "GL_ASYNC_HISTOGRAM_SGIX");
    GetPName.put(GL_MAX_4D_TEXTURE_SIZE_SGIS, "GL_MAX_4D_TEXTURE_SIZE_SGIS");
    GetPName.put(GL_UNPACK_SUBSAMPLE_RATE_SGIX, "GL_UNPACK_SUBSAMPLE_RATE_SGIX");
    GetPName.put(GL_LOGIC_OP_MODE, "GL_LOGIC_OP_MODE");
    GetPName.put(GL_LIGHT_MODEL_COLOR_CONTROL, "GL_LIGHT_MODEL_COLOR_CONTROL");
    GetPName.put(GL_POINT_SMOOTH_HINT, "GL_POINT_SMOOTH_HINT");
    GetPName.put(GL_INDEX_BITS, "GL_INDEX_BITS");
    GetPName.put(GL_POINT_SIZE, "GL_POINT_SIZE");
    GetPName.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
  }
  private static void GetPName3() {
    GetPName.put(GL_FOG_FUNC_POINTS_SGIS, "GL_FOG_FUNC_POINTS_SGIS");
    GetPName.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    GetPName.put(GL_STENCIL_CLEAR_VALUE, "GL_STENCIL_CLEAR_VALUE");
    GetPName.put(GL_DRAW_BUFFER, "GL_DRAW_BUFFER");
    GetPName.put(GL_SAMPLE_MASK_VALUE_SGIS, "GL_SAMPLE_MASK_VALUE_SGIS");
    GetPName.put(GL_SMOOTH_POINT_SIZE_RANGE, "GL_SMOOTH_POINT_SIZE_RANGE");
    GetPName.put(GL_SHADE_MODEL, "GL_SHADE_MODEL");
    GetPName.put(GL_ACCUM_GREEN_BITS, "GL_ACCUM_GREEN_BITS");
    GetPName.put(GL_POLYGON_OFFSET_UNITS, "GL_POLYGON_OFFSET_UNITS");
    GetPName.put(GL_COLOR_LOGIC_OP, "GL_COLOR_LOGIC_OP");
    GetPName.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
    GetPName.put(GL_CURRENT_RASTER_COLOR, "GL_CURRENT_RASTER_COLOR");
    GetPName.put(GL_PIXEL_MAP_I_TO_B_SIZE, "GL_PIXEL_MAP_I_TO_B_SIZE");
    GetPName.put(GL_MAP1_GRID_SEGMENTS, "GL_MAP1_GRID_SEGMENTS");
    GetPName.put(GL_MAX_VIEWPORT_DIMS, "GL_MAX_VIEWPORT_DIMS");
    GetPName.put(GL_MAX_FRAMEZOOM_FACTOR_SGIX, "GL_MAX_FRAMEZOOM_FACTOR_SGIX");
    GetPName.put(GL_SAMPLE_MASK_INVERT_SGIS, "GL_SAMPLE_MASK_INVERT_SGIS");
    GetPName.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
    GetPName.put(GL_FOG_END, "GL_FOG_END");
    GetPName.put(GL_TEXTURE_COORD_ARRAY_STRIDE, "GL_TEXTURE_COORD_ARRAY_STRIDE");
    GetPName.put(GL_NORMAL_ARRAY_TYPE, "GL_NORMAL_ARRAY_TYPE");
    GetPName.put(GL_EDGE_FLAG_ARRAY, "GL_EDGE_FLAG_ARRAY");
    GetPName.put(GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX");
    GetPName.put(GL_MAX_CLIP_DISTANCES, "GL_MAX_CLIP_DISTANCES");
    GetPName.put(GL_TEXTURE_GEN_Q, "GL_TEXTURE_GEN_Q");
    GetPName.put(GL_TEXTURE_GEN_R, "GL_TEXTURE_GEN_R");
    GetPName.put(GL_TEXTURE_GEN_S, "GL_TEXTURE_GEN_S");
    GetPName.put(GL_TEXTURE_GEN_T, "GL_TEXTURE_GEN_T");
    GetPName.put(GL_EDGE_FLAG, "GL_EDGE_FLAG");
    GetPName.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    GetPName.put(GL_MODELVIEW_MATRIX, "GL_MODELVIEW_MATRIX");
    GetPName.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    GetPName.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    GetPName.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    GetPName.put(GL_LIGHT6, "GL_LIGHT6");
    GetPName.put(GL_REFERENCE_PLANE_EQUATION_SGIX, "GL_REFERENCE_PLANE_EQUATION_SGIX");
    GetPName.put(GL_LIGHT7, "GL_LIGHT7");
    GetPName.put(GL_LIGHT4, "GL_LIGHT4");
    GetPName.put(GL_BLUE_BITS, "GL_BLUE_BITS");
    GetPName.put(GL_INDEX_WRITEMASK, "GL_INDEX_WRITEMASK");
    GetPName.put(GL_LIGHT5, "GL_LIGHT5");
    GetPName.put(GL_INDEX_SHIFT, "GL_INDEX_SHIFT");
    GetPName.put(GL_MAX_ATTRIB_STACK_DEPTH, "GL_MAX_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_LIGHT2, "GL_LIGHT2");
    GetPName.put(GL_LIGHT3, "GL_LIGHT3");
    GetPName.put(GL_INDEX_MODE, "GL_INDEX_MODE");
    GetPName.put(GL_LIGHT0, "GL_LIGHT0");
    GetPName.put(GL_LIGHT1, "GL_LIGHT1");
    GetPName.put(GL_POST_COLOR_MATRIX_RED_SCALE_SGI, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI");
    GetPName.put(GL_PIXEL_MAP_A_TO_A_SIZE, "GL_PIXEL_MAP_A_TO_A_SIZE");
    GetPName.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    GetPName.put(GL_STENCIL_FUNC, "GL_STENCIL_FUNC");
    GetPName.put(GL_CURRENT_INDEX, "GL_CURRENT_INDEX");
    GetPName.put(GL_INDEX_LOGIC_OP, "GL_INDEX_LOGIC_OP");
    GetPName.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    GetPName.put(GL_PIXEL_MAP_S_TO_S_SIZE, "GL_PIXEL_MAP_S_TO_S_SIZE");
    GetPName.put(GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI");
    GetPName.put(GL_PIXEL_TILE_CACHE_INCREMENT_SGIX, "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX");
    GetPName.put(GL_MAX_ACTIVE_LIGHTS_SGIX, "GL_MAX_ACTIVE_LIGHTS_SGIX");
    GetPName.put(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH, "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_MAP_COLOR, "GL_MAP_COLOR");
    GetPName.put(GL_DITHER, "GL_DITHER");
    GetPName.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    GetPName.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
    GetPName.put(GL_STENCIL_FAIL, "GL_STENCIL_FAIL");
    GetPName.put(GL_FOG, "GL_FOG");
    GetPName.put(GL_FOG_START, "GL_FOG_START");
    GetPName.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    GetPName.put(GL_SUBPIXEL_BITS, "GL_SUBPIXEL_BITS");
    GetPName.put(GL_POLYGON_SMOOTH_HINT, "GL_POLYGON_SMOOTH_HINT");
    GetPName.put(GL_RED_BIAS, "GL_RED_BIAS");
    GetPName.put(GL_INDEX_ARRAY_TYPE, "GL_INDEX_ARRAY_TYPE");
    GetPName.put(GL_PIXEL_TILE_WIDTH_SGIX, "GL_PIXEL_TILE_WIDTH_SGIX");
    GetPName.put(GL_MAX_MODELVIEW_STACK_DEPTH, "GL_MAX_MODELVIEW_STACK_DEPTH");
    GetPName.put(GL_PIXEL_MAP_I_TO_I_SIZE, "GL_PIXEL_MAP_I_TO_I_SIZE");
    GetPName.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    GetPName.put(GL_MAX_EVAL_ORDER, "GL_MAX_EVAL_ORDER");
    GetPName.put(GL_MAP2_GRID_DOMAIN, "GL_MAP2_GRID_DOMAIN");
    GetPName.put(GL_PIXEL_TILE_GRID_WIDTH_SGIX, "GL_PIXEL_TILE_GRID_WIDTH_SGIX");
    GetPName.put(GL_CLIENT_ATTRIB_STACK_DEPTH, "GL_CLIENT_ATTRIB_STACK_DEPTH");
    GetPName.put(GL_PIXEL_MAP_G_TO_G_SIZE, "GL_PIXEL_MAP_G_TO_G_SIZE");
    GetPName.put(GL_RED_SCALE, "GL_RED_SCALE");
  }
  public static Map<Integer, String> GetPName() {
    if (GetPName != null)
      return GetPName;
    GetPName = new HashMap<Integer, String>(349);
    GetPName0();
    GetPName1();
    GetPName2();
    GetPName3();
    return GetPName;
  }
  private static Map<Integer, String> VertexProvokingMode;
  private static void VertexProvokingMode0() {
    VertexProvokingMode.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    VertexProvokingMode.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
  }
  public static Map<Integer, String> VertexProvokingMode() {
    if (VertexProvokingMode != null)
      return VertexProvokingMode;
    VertexProvokingMode = new HashMap<Integer, String>(2);
    VertexProvokingMode0();
    return VertexProvokingMode;
  }
  private static Map<Integer, String> ClipPlaneName;
  private static void ClipPlaneName0() {
    ClipPlaneName.put(GL_CLIP_DISTANCE1, "GL_CLIP_DISTANCE1");
    ClipPlaneName.put(GL_CLIP_DISTANCE0, "GL_CLIP_DISTANCE0");
    ClipPlaneName.put(GL_CLIP_DISTANCE3, "GL_CLIP_DISTANCE3");
    ClipPlaneName.put(GL_CLIP_DISTANCE2, "GL_CLIP_DISTANCE2");
    ClipPlaneName.put(GL_CLIP_PLANE0, "GL_CLIP_PLANE0");
    ClipPlaneName.put(GL_CLIP_DISTANCE5, "GL_CLIP_DISTANCE5");
    ClipPlaneName.put(GL_CLIP_PLANE1, "GL_CLIP_PLANE1");
    ClipPlaneName.put(GL_CLIP_DISTANCE4, "GL_CLIP_DISTANCE4");
    ClipPlaneName.put(GL_CLIP_PLANE2, "GL_CLIP_PLANE2");
    ClipPlaneName.put(GL_CLIP_DISTANCE7, "GL_CLIP_DISTANCE7");
    ClipPlaneName.put(GL_CLIP_PLANE3, "GL_CLIP_PLANE3");
    ClipPlaneName.put(GL_CLIP_DISTANCE6, "GL_CLIP_DISTANCE6");
    ClipPlaneName.put(GL_CLIP_PLANE4, "GL_CLIP_PLANE4");
    ClipPlaneName.put(GL_CLIP_PLANE5, "GL_CLIP_PLANE5");
  }
  public static Map<Integer, String> ClipPlaneName() {
    if (ClipPlaneName != null)
      return ClipPlaneName;
    ClipPlaneName = new HashMap<Integer, String>(14);
    ClipPlaneName0();
    return ClipPlaneName;
  }
  private static Map<Integer, String> DrawElementsType;
  private static void DrawElementsType0() {
    DrawElementsType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    DrawElementsType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    DrawElementsType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  public static Map<Integer, String> DrawElementsType() {
    if (DrawElementsType != null)
      return DrawElementsType;
    DrawElementsType = new HashMap<Integer, String>(3);
    DrawElementsType0();
    return DrawElementsType;
  }
  private static Map<Integer, String> FramebufferTarget;
  private static void FramebufferTarget0() {
    FramebufferTarget.put(GL_DRAW_FRAMEBUFFER, "GL_DRAW_FRAMEBUFFER");
    FramebufferTarget.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
    FramebufferTarget.put(GL_READ_FRAMEBUFFER, "GL_READ_FRAMEBUFFER");
  }
  public static Map<Integer, String> FramebufferTarget() {
    if (FramebufferTarget != null)
      return FramebufferTarget;
    FramebufferTarget = new HashMap<Integer, String>(3);
    FramebufferTarget0();
    return FramebufferTarget;
  }
  private static Map<Integer, String> TextureMagFilter;
  private static void TextureMagFilter0() {
    TextureMagFilter.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    TextureMagFilter.put(GL_LINEAR, "GL_LINEAR");
    TextureMagFilter.put(GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX, "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX");
    TextureMagFilter.put(GL_LINEAR_DETAIL_SGIS, "GL_LINEAR_DETAIL_SGIS");
    TextureMagFilter.put(GL_LINEAR_SHARPEN_COLOR_SGIS, "GL_LINEAR_SHARPEN_COLOR_SGIS");
    TextureMagFilter.put(GL_LINEAR_SHARPEN_ALPHA_SGIS, "GL_LINEAR_SHARPEN_ALPHA_SGIS");
    TextureMagFilter.put(GL_PIXEL_TEX_GEN_Q_CEILING_SGIX, "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX");
    TextureMagFilter.put(GL_LINEAR_SHARPEN_SGIS, "GL_LINEAR_SHARPEN_SGIS");
    TextureMagFilter.put(GL_LINEAR_DETAIL_COLOR_SGIS, "GL_LINEAR_DETAIL_COLOR_SGIS");
    TextureMagFilter.put(GL_NEAREST, "GL_NEAREST");
    TextureMagFilter.put(GL_LINEAR_DETAIL_ALPHA_SGIS, "GL_LINEAR_DETAIL_ALPHA_SGIS");
    TextureMagFilter.put(GL_PIXEL_TEX_GEN_Q_ROUND_SGIX, "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX");
  }
  public static Map<Integer, String> TextureMagFilter() {
    if (TextureMagFilter != null)
      return TextureMagFilter;
    TextureMagFilter = new HashMap<Integer, String>(12);
    TextureMagFilter0();
    return TextureMagFilter;
  }
  private static Map<Integer, String> ConvolutionParameterEXT;
  private static void ConvolutionParameterEXT0() {
    ConvolutionParameterEXT.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    ConvolutionParameterEXT.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    ConvolutionParameterEXT.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
  }
  public static Map<Integer, String> ConvolutionParameterEXT() {
    if (ConvolutionParameterEXT != null)
      return ConvolutionParameterEXT;
    ConvolutionParameterEXT = new HashMap<Integer, String>(3);
    ConvolutionParameterEXT0();
    return ConvolutionParameterEXT;
  }
  private static Map<Integer, String> FogMode;
  private static void FogMode0() {
    FogMode.put(GL_EXP, "GL_EXP");
    FogMode.put(GL_LINEAR, "GL_LINEAR");
    FogMode.put(GL_EXP2, "GL_EXP2");
    FogMode.put(GL_FOG_FUNC_SGIS, "GL_FOG_FUNC_SGIS");
  }
  public static Map<Integer, String> FogMode() {
    if (FogMode != null)
      return FogMode;
    FogMode = new HashMap<Integer, String>(4);
    FogMode0();
    return FogMode;
  }
  private static Map<Integer, String> VertexAttribPointerType;
  private static void VertexAttribPointerType0() {
    VertexAttribPointerType.put(GL_INT_2_10_10_10_REV, "GL_INT_2_10_10_10_REV");
    VertexAttribPointerType.put(GL_FLOAT, "GL_FLOAT");
    VertexAttribPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    VertexAttribPointerType.put(GL_BYTE, "GL_BYTE");
    VertexAttribPointerType.put(GL_HALF_FLOAT, "GL_HALF_FLOAT");
    VertexAttribPointerType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    VertexAttribPointerType.put(GL_UNSIGNED_INT_2_10_10_10_REV, "GL_UNSIGNED_INT_2_10_10_10_REV");
    VertexAttribPointerType.put(GL_INT, "GL_INT");
    VertexAttribPointerType.put(GL_UNSIGNED_INT_10F_11F_11F_REV, "GL_UNSIGNED_INT_10F_11F_11F_REV");
    VertexAttribPointerType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    VertexAttribPointerType.put(GL_FIXED, "GL_FIXED");
    VertexAttribPointerType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    VertexAttribPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static Map<Integer, String> VertexAttribPointerType() {
    if (VertexAttribPointerType != null)
      return VertexAttribPointerType;
    VertexAttribPointerType = new HashMap<Integer, String>(13);
    VertexAttribPointerType0();
    return VertexAttribPointerType;
  }
  private static Map<Integer, String> StringName;
  private static void StringName0() {
    StringName.put(GL_VERSION, "GL_VERSION");
    StringName.put(GL_SHADING_LANGUAGE_VERSION, "GL_SHADING_LANGUAGE_VERSION");
    StringName.put(GL_VENDOR, "GL_VENDOR");
    StringName.put(GL_RENDERER, "GL_RENDERER");
    StringName.put(GL_EXTENSIONS, "GL_EXTENSIONS");
  }
  public static Map<Integer, String> StringName() {
    if (StringName != null)
      return StringName;
    StringName = new HashMap<Integer, String>(5);
    StringName0();
    return StringName;
  }
  private static Map<Integer, String> PixelCopyType;
  private static void PixelCopyType0() {
    PixelCopyType.put(GL_DEPTH, "GL_DEPTH");
    PixelCopyType.put(GL_COLOR, "GL_COLOR");
    PixelCopyType.put(GL_STENCIL, "GL_STENCIL");
  }
  public static Map<Integer, String> PixelCopyType() {
    if (PixelCopyType != null)
      return PixelCopyType;
    PixelCopyType = new HashMap<Integer, String>(3);
    PixelCopyType0();
    return PixelCopyType;
  }
  private static Map<Integer, String> ListNameType;
  private static void ListNameType0() {
    ListNameType.put(GL_3_BYTES, "GL_3_BYTES");
    ListNameType.put(GL_FLOAT, "GL_FLOAT");
    ListNameType.put(GL_BYTE, "GL_BYTE");
    ListNameType.put(GL_INT, "GL_INT");
    ListNameType.put(GL_2_BYTES, "GL_2_BYTES");
    ListNameType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    ListNameType.put(GL_4_BYTES, "GL_4_BYTES");
    ListNameType.put(GL_SHORT, "GL_SHORT");
    ListNameType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    ListNameType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  public static Map<Integer, String> ListNameType() {
    if (ListNameType != null)
      return ListNameType;
    ListNameType = new HashMap<Integer, String>(10);
    ListNameType0();
    return ListNameType;
  }
  private static Map<Integer, String> GetConvolutionParameter;
  private static void GetConvolutionParameter0() {
    GetConvolutionParameter.put(GL_MAX_CONVOLUTION_WIDTH, "GL_MAX_CONVOLUTION_WIDTH");
    GetConvolutionParameter.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
    GetConvolutionParameter.put(GL_CONVOLUTION_FORMAT, "GL_CONVOLUTION_FORMAT");
    GetConvolutionParameter.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    GetConvolutionParameter.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    GetConvolutionParameter.put(GL_CONVOLUTION_WIDTH, "GL_CONVOLUTION_WIDTH");
    GetConvolutionParameter.put(GL_MAX_CONVOLUTION_HEIGHT, "GL_MAX_CONVOLUTION_HEIGHT");
    GetConvolutionParameter.put(GL_CONVOLUTION_BORDER_COLOR, "GL_CONVOLUTION_BORDER_COLOR");
    GetConvolutionParameter.put(GL_CONVOLUTION_HEIGHT, "GL_CONVOLUTION_HEIGHT");
  }
  public static Map<Integer, String> GetConvolutionParameter() {
    if (GetConvolutionParameter != null)
      return GetConvolutionParameter;
    GetConvolutionParameter = new HashMap<Integer, String>(9);
    GetConvolutionParameter0();
    return GetConvolutionParameter;
  }
  private static Map<Integer, String> ProgramStagePName;
  private static void ProgramStagePName0() {
    ProgramStagePName.put(GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS");
    ProgramStagePName.put(GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH");
    ProgramStagePName.put(GL_ACTIVE_SUBROUTINES, "GL_ACTIVE_SUBROUTINES");
    ProgramStagePName.put(GL_ACTIVE_SUBROUTINE_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_MAX_LENGTH");
    ProgramStagePName.put(GL_ACTIVE_SUBROUTINE_UNIFORMS, "GL_ACTIVE_SUBROUTINE_UNIFORMS");
  }
  public static Map<Integer, String> ProgramStagePName() {
    if (ProgramStagePName != null)
      return ProgramStagePName;
    ProgramStagePName = new HashMap<Integer, String>(5);
    ProgramStagePName0();
    return ProgramStagePName;
  }
  private static Map<Integer, String> PixelTexGenMode;
  private static void PixelTexGenMode0() {
    PixelTexGenMode.put(GL_RGB, "GL_RGB");
    PixelTexGenMode.put(GL_LUMINANCE_ALPHA, "GL_LUMINANCE_ALPHA");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX");
    PixelTexGenMode.put(GL_LUMINANCE, "GL_LUMINANCE");
    PixelTexGenMode.put(GL_RGBA, "GL_RGBA");
    PixelTexGenMode.put(GL_NONE, "GL_NONE");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX");
    PixelTexGenMode.put(GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX, "GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX");
  }
  public static Map<Integer, String> PixelTexGenMode() {
    if (PixelTexGenMode != null)
      return PixelTexGenMode;
    PixelTexGenMode = new HashMap<Integer, String>(9);
    PixelTexGenMode0();
    return PixelTexGenMode;
  }
  private static Map<Integer, String> SubroutineParameterName;
  private static void SubroutineParameterName0() {
    SubroutineParameterName.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    SubroutineParameterName.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    SubroutineParameterName.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    SubroutineParameterName.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
  }
  public static Map<Integer, String> SubroutineParameterName() {
    if (SubroutineParameterName != null)
      return SubroutineParameterName;
    SubroutineParameterName = new HashMap<Integer, String>(4);
    SubroutineParameterName0();
    return SubroutineParameterName;
  }
  private static Map<Integer, String> SemaphoreParameterName;
  private static void SemaphoreParameterName0() {
  }
  public static Map<Integer, String> SemaphoreParameterName() {
    if (SemaphoreParameterName != null)
      return SemaphoreParameterName;
    SemaphoreParameterName = new HashMap<Integer, String>(0);
    SemaphoreParameterName0();
    return SemaphoreParameterName;
  }
  private static Map<Integer, String> MapTarget;
  private static void MapTarget0() {
    MapTarget.put(GL_MAP2_INDEX, "GL_MAP2_INDEX");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_3, "GL_MAP1_TEXTURE_COORD_3");
    MapTarget.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_2, "GL_MAP1_TEXTURE_COORD_2");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_4, "GL_MAP1_TEXTURE_COORD_4");
    MapTarget.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
    MapTarget.put(GL_MAP1_TEXTURE_COORD_1, "GL_MAP1_TEXTURE_COORD_1");
    MapTarget.put(GL_MAP2_VERTEX_4, "GL_MAP2_VERTEX_4");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_4, "GL_MAP2_TEXTURE_COORD_4");
    MapTarget.put(GL_MAP2_VERTEX_3, "GL_MAP2_VERTEX_3");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_3, "GL_MAP2_TEXTURE_COORD_3");
    MapTarget.put(GL_MAP1_COLOR_4, "GL_MAP1_COLOR_4");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_2, "GL_MAP2_TEXTURE_COORD_2");
    MapTarget.put(GL_MAP2_TEXTURE_COORD_1, "GL_MAP2_TEXTURE_COORD_1");
    MapTarget.put(GL_MAP1_INDEX, "GL_MAP1_INDEX");
    MapTarget.put(GL_MAP1_NORMAL, "GL_MAP1_NORMAL");
    MapTarget.put(GL_MAP2_NORMAL, "GL_MAP2_NORMAL");
    MapTarget.put(GL_MAP1_VERTEX_3, "GL_MAP1_VERTEX_3");
    MapTarget.put(GL_MAP2_COLOR_4, "GL_MAP2_COLOR_4");
    MapTarget.put(GL_MAP1_VERTEX_4, "GL_MAP1_VERTEX_4");
  }
  public static Map<Integer, String> MapTarget() {
    if (MapTarget != null)
      return MapTarget;
    MapTarget = new HashMap<Integer, String>(20);
    MapTarget0();
    return MapTarget;
  }
  private static Map<Integer, String> NormalPointerType;
  private static void NormalPointerType0() {
    NormalPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    NormalPointerType.put(GL_FLOAT, "GL_FLOAT");
    NormalPointerType.put(GL_BYTE, "GL_BYTE");
    NormalPointerType.put(GL_INT, "GL_INT");
    NormalPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static Map<Integer, String> NormalPointerType() {
    if (NormalPointerType != null)
      return NormalPointerType;
    NormalPointerType = new HashMap<Integer, String>(5);
    NormalPointerType0();
    return NormalPointerType;
  }
  private static Map<Integer, String> ClientAttribMask;
  private static void ClientAttribMask0() {
    ClientAttribMask.put(GL_CLIENT_VERTEX_ARRAY_BIT, "GL_CLIENT_VERTEX_ARRAY_BIT");
    ClientAttribMask.put(GL_CLIENT_PIXEL_STORE_BIT, "GL_CLIENT_PIXEL_STORE_BIT");
    ClientAttribMask.put(GL_CLIENT_ALL_ATTRIB_BITS, "GL_CLIENT_ALL_ATTRIB_BITS");
  }
  public static Map<Integer, String> ClientAttribMask() {
    if (ClientAttribMask != null)
      return ClientAttribMask;
    ClientAttribMask = new HashMap<Integer, String>(3);
    ClientAttribMask0();
    return ClientAttribMask;
  }
  private static Map<Integer, String> ContextProfileMask;
  private static void ContextProfileMask0() {
    ContextProfileMask.put(GL_CONTEXT_CORE_PROFILE_BIT, "GL_CONTEXT_CORE_PROFILE_BIT");
    ContextProfileMask.put(GL_CONTEXT_COMPATIBILITY_PROFILE_BIT, "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT");
  }
  public static Map<Integer, String> ContextProfileMask() {
    if (ContextProfileMask != null)
      return ContextProfileMask;
    ContextProfileMask = new HashMap<Integer, String>(2);
    ContextProfileMask0();
    return ContextProfileMask;
  }
  private static Map<Integer, String> AccumOp;
  private static void AccumOp0() {
    AccumOp.put(GL_ACCUM, "GL_ACCUM");
    AccumOp.put(GL_MULT, "GL_MULT");
    AccumOp.put(GL_ADD, "GL_ADD");
    AccumOp.put(GL_LOAD, "GL_LOAD");
    AccumOp.put(GL_RETURN, "GL_RETURN");
  }
  public static Map<Integer, String> AccumOp() {
    if (AccumOp != null)
      return AccumOp;
    AccumOp = new HashMap<Integer, String>(5);
    AccumOp0();
    return AccumOp;
  }
  private static Map<Integer, String> ColorMaterialFace;
  private static void ColorMaterialFace0() {
    ColorMaterialFace.put(GL_BACK, "GL_BACK");
    ColorMaterialFace.put(GL_FRONT, "GL_FRONT");
    ColorMaterialFace.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static Map<Integer, String> ColorMaterialFace() {
    if (ColorMaterialFace != null)
      return ColorMaterialFace;
    ColorMaterialFace = new HashMap<Integer, String>(3);
    ColorMaterialFace0();
    return ColorMaterialFace;
  }
  private static Map<Integer, String> GetColorTableParameterPNameSGI;
  private static void GetColorTableParameterPNameSGI0() {
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_GREEN_SIZE, "GL_COLOR_TABLE_GREEN_SIZE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BLUE_SIZE_SGI, "GL_COLOR_TABLE_BLUE_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_RED_SIZE_SGI, "GL_COLOR_TABLE_RED_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_GREEN_SIZE_SGI, "GL_COLOR_TABLE_GREEN_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_ALPHA_SIZE, "GL_COLOR_TABLE_ALPHA_SIZE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_WIDTH_SGI, "GL_COLOR_TABLE_WIDTH_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_WIDTH, "GL_COLOR_TABLE_WIDTH");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_LUMINANCE_SIZE_SGI, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_BLUE_SIZE, "GL_COLOR_TABLE_BLUE_SIZE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_INTENSITY_SIZE, "GL_COLOR_TABLE_INTENSITY_SIZE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_FORMAT, "GL_COLOR_TABLE_FORMAT");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_RED_SIZE, "GL_COLOR_TABLE_RED_SIZE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_ALPHA_SIZE_SGI, "GL_COLOR_TABLE_ALPHA_SIZE_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_LUMINANCE_SIZE, "GL_COLOR_TABLE_LUMINANCE_SIZE");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_FORMAT_SGI, "GL_COLOR_TABLE_FORMAT_SGI");
    GetColorTableParameterPNameSGI.put(GL_COLOR_TABLE_INTENSITY_SIZE_SGI, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI");
  }
  public static Map<Integer, String> GetColorTableParameterPNameSGI() {
    if (GetColorTableParameterPNameSGI != null)
      return GetColorTableParameterPNameSGI;
    GetColorTableParameterPNameSGI = new HashMap<Integer, String>(20);
    GetColorTableParameterPNameSGI0();
    return GetColorTableParameterPNameSGI;
  }
  private static Map<Integer, String> LightParameter;
  private static void LightParameter0() {
    LightParameter.put(GL_CONSTANT_ATTENUATION, "GL_CONSTANT_ATTENUATION");
    LightParameter.put(GL_LINEAR_ATTENUATION, "GL_LINEAR_ATTENUATION");
    LightParameter.put(GL_AMBIENT, "GL_AMBIENT");
    LightParameter.put(GL_SPECULAR, "GL_SPECULAR");
    LightParameter.put(GL_QUADRATIC_ATTENUATION, "GL_QUADRATIC_ATTENUATION");
    LightParameter.put(GL_SPOT_CUTOFF, "GL_SPOT_CUTOFF");
    LightParameter.put(GL_POSITION, "GL_POSITION");
    LightParameter.put(GL_SPOT_DIRECTION, "GL_SPOT_DIRECTION");
    LightParameter.put(GL_DIFFUSE, "GL_DIFFUSE");
    LightParameter.put(GL_SPOT_EXPONENT, "GL_SPOT_EXPONENT");
  }
  public static Map<Integer, String> LightParameter() {
    if (LightParameter != null)
      return LightParameter;
    LightParameter = new HashMap<Integer, String>(10);
    LightParameter0();
    return LightParameter;
  }
  private static Map<Integer, String> PathColor;
  private static void PathColor0() {
    PathColor.put(GL_PRIMARY_COLOR, "GL_PRIMARY_COLOR");
  }
  public static Map<Integer, String> PathColor() {
    if (PathColor != null)
      return PathColor;
    PathColor = new HashMap<Integer, String>(1);
    PathColor0();
    return PathColor;
  }
  private static Map<Integer, String> VertexArrayPName;
  private static void VertexArrayPName0() {
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED, "GL_VERTEX_ATTRIB_ARRAY_ENABLED");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_TYPE, "GL_VERTEX_ATTRIB_ARRAY_TYPE");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_LONG, "GL_VERTEX_ATTRIB_ARRAY_LONG");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER, "GL_VERTEX_ATTRIB_ARRAY_INTEGER");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_SIZE, "GL_VERTEX_ATTRIB_ARRAY_SIZE");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE, "GL_VERTEX_ATTRIB_ARRAY_STRIDE");
    VertexArrayPName.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED");
  }
  public static Map<Integer, String> VertexArrayPName() {
    if (VertexArrayPName != null)
      return VertexArrayPName;
    VertexArrayPName = new HashMap<Integer, String>(9);
    VertexArrayPName0();
    return VertexArrayPName;
  }
  private static Map<Integer, String> TexCoordPointerType;
  private static void TexCoordPointerType0() {
    TexCoordPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    TexCoordPointerType.put(GL_FLOAT, "GL_FLOAT");
    TexCoordPointerType.put(GL_INT, "GL_INT");
    TexCoordPointerType.put(GL_SHORT, "GL_SHORT");
  }
  public static Map<Integer, String> TexCoordPointerType() {
    if (TexCoordPointerType != null)
      return TexCoordPointerType;
    TexCoordPointerType = new HashMap<Integer, String>(4);
    TexCoordPointerType0();
    return TexCoordPointerType;
  }
  private static Map<Integer, String> HistogramTargetEXT;
  private static void HistogramTargetEXT0() {
    HistogramTargetEXT.put(GL_PROXY_HISTOGRAM, "GL_PROXY_HISTOGRAM");
    HistogramTargetEXT.put(GL_HISTOGRAM, "GL_HISTOGRAM");
  }
  public static Map<Integer, String> HistogramTargetEXT() {
    if (HistogramTargetEXT != null)
      return HistogramTargetEXT;
    HistogramTargetEXT = new HashMap<Integer, String>(2);
    HistogramTargetEXT0();
    return HistogramTargetEXT;
  }
  private static Map<Integer, String> PathListMode;
  private static void PathListMode0() {
  }
  public static Map<Integer, String> PathListMode() {
    if (PathListMode != null)
      return PathListMode;
    PathListMode = new HashMap<Integer, String>(0);
    PathListMode0();
    return PathListMode;
  }
  private static Map<Integer, String> BufferUsageARB;
  private static void BufferUsageARB0() {
    BufferUsageARB.put(GL_STATIC_COPY, "GL_STATIC_COPY");
    BufferUsageARB.put(GL_STATIC_DRAW, "GL_STATIC_DRAW");
    BufferUsageARB.put(GL_STREAM_READ, "GL_STREAM_READ");
    BufferUsageARB.put(GL_DYNAMIC_DRAW, "GL_DYNAMIC_DRAW");
    BufferUsageARB.put(GL_DYNAMIC_READ, "GL_DYNAMIC_READ");
    BufferUsageARB.put(GL_DYNAMIC_COPY, "GL_DYNAMIC_COPY");
    BufferUsageARB.put(GL_STATIC_READ, "GL_STATIC_READ");
    BufferUsageARB.put(GL_STREAM_DRAW, "GL_STREAM_DRAW");
    BufferUsageARB.put(GL_STREAM_COPY, "GL_STREAM_COPY");
  }
  public static Map<Integer, String> BufferUsageARB() {
    if (BufferUsageARB != null)
      return BufferUsageARB;
    BufferUsageARB = new HashMap<Integer, String>(9);
    BufferUsageARB0();
    return BufferUsageARB;
  }
  private static Map<Integer, String> ListMode;
  private static void ListMode0() {
    ListMode.put(GL_COMPILE_AND_EXECUTE, "GL_COMPILE_AND_EXECUTE");
    ListMode.put(GL_COMPILE, "GL_COMPILE");
  }
  public static Map<Integer, String> ListMode() {
    if (ListMode != null)
      return ListMode;
    ListMode = new HashMap<Integer, String>(2);
    ListMode0();
    return ListMode;
  }
  private static Map<Integer, String> FogParameter;
  private static void FogParameter0() {
    FogParameter.put(GL_FOG_COLOR, "GL_FOG_COLOR");
    FogParameter.put(GL_FOG_OFFSET_VALUE_SGIX, "GL_FOG_OFFSET_VALUE_SGIX");
    FogParameter.put(GL_FOG_END, "GL_FOG_END");
    FogParameter.put(GL_FOG_DENSITY, "GL_FOG_DENSITY");
    FogParameter.put(GL_FOG_INDEX, "GL_FOG_INDEX");
    FogParameter.put(GL_FOG_START, "GL_FOG_START");
    FogParameter.put(GL_FOG_MODE, "GL_FOG_MODE");
  }
  public static Map<Integer, String> FogParameter() {
    if (FogParameter != null)
      return FogParameter;
    FogParameter = new HashMap<Integer, String>(7);
    FogParameter0();
    return FogParameter;
  }
  private static Map<Integer, String> LightModelParameter;
  private static void LightModelParameter0() {
    LightModelParameter.put(GL_LIGHT_MODEL_LOCAL_VIEWER, "GL_LIGHT_MODEL_LOCAL_VIEWER");
    LightModelParameter.put(GL_LIGHT_MODEL_TWO_SIDE, "GL_LIGHT_MODEL_TWO_SIDE");
    LightModelParameter.put(GL_LIGHT_MODEL_COLOR_CONTROL, "GL_LIGHT_MODEL_COLOR_CONTROL");
    LightModelParameter.put(GL_LIGHT_MODEL_AMBIENT, "GL_LIGHT_MODEL_AMBIENT");
  }
  public static Map<Integer, String> LightModelParameter() {
    if (LightModelParameter != null)
      return LightModelParameter;
    LightModelParameter = new HashMap<Integer, String>(4);
    LightModelParameter0();
    return LightModelParameter;
  }
  private static Map<Integer, String> InterleavedArrayFormat;
  private static void InterleavedArrayFormat0() {
    InterleavedArrayFormat.put(GL_N3F_V3F, "GL_N3F_V3F");
    InterleavedArrayFormat.put(GL_T2F_C3F_V3F, "GL_T2F_C3F_V3F");
    InterleavedArrayFormat.put(GL_T2F_C4F_N3F_V3F, "GL_T2F_C4F_N3F_V3F");
    InterleavedArrayFormat.put(GL_C3F_V3F, "GL_C3F_V3F");
    InterleavedArrayFormat.put(GL_T2F_N3F_V3F, "GL_T2F_N3F_V3F");
    InterleavedArrayFormat.put(GL_V3F, "GL_V3F");
    InterleavedArrayFormat.put(GL_C4UB_V2F, "GL_C4UB_V2F");
    InterleavedArrayFormat.put(GL_C4UB_V3F, "GL_C4UB_V3F");
    InterleavedArrayFormat.put(GL_C4F_N3F_V3F, "GL_C4F_N3F_V3F");
    InterleavedArrayFormat.put(GL_V2F, "GL_V2F");
    InterleavedArrayFormat.put(GL_T2F_C4UB_V3F, "GL_T2F_C4UB_V3F");
    InterleavedArrayFormat.put(GL_T4F_V4F, "GL_T4F_V4F");
    InterleavedArrayFormat.put(GL_T2F_V3F, "GL_T2F_V3F");
    InterleavedArrayFormat.put(GL_T4F_C4F_N3F_V4F, "GL_T4F_C4F_N3F_V4F");
  }
  public static Map<Integer, String> InterleavedArrayFormat() {
    if (InterleavedArrayFormat != null)
      return InterleavedArrayFormat;
    InterleavedArrayFormat = new HashMap<Integer, String>(14);
    InterleavedArrayFormat0();
    return InterleavedArrayFormat;
  }
  private static Map<Integer, String> ColorBuffer;
  private static void ColorBuffer0() {
    ColorBuffer.put(GL_COLOR_ATTACHMENT15, "GL_COLOR_ATTACHMENT15");
    ColorBuffer.put(GL_COLOR_ATTACHMENT14, "GL_COLOR_ATTACHMENT14");
    ColorBuffer.put(GL_COLOR_ATTACHMENT17, "GL_COLOR_ATTACHMENT17");
    ColorBuffer.put(GL_COLOR_ATTACHMENT16, "GL_COLOR_ATTACHMENT16");
    ColorBuffer.put(GL_COLOR_ATTACHMENT0, "GL_COLOR_ATTACHMENT0");
    ColorBuffer.put(GL_COLOR_ATTACHMENT11, "GL_COLOR_ATTACHMENT11");
    ColorBuffer.put(GL_FRONT, "GL_FRONT");
    ColorBuffer.put(GL_COLOR_ATTACHMENT10, "GL_COLOR_ATTACHMENT10");
    ColorBuffer.put(GL_COLOR_ATTACHMENT13, "GL_COLOR_ATTACHMENT13");
    ColorBuffer.put(GL_FRONT_RIGHT, "GL_FRONT_RIGHT");
    ColorBuffer.put(GL_COLOR_ATTACHMENT12, "GL_COLOR_ATTACHMENT12");
    ColorBuffer.put(GL_LEFT, "GL_LEFT");
    ColorBuffer.put(GL_COLOR_ATTACHMENT4, "GL_COLOR_ATTACHMENT4");
    ColorBuffer.put(GL_COLOR_ATTACHMENT3, "GL_COLOR_ATTACHMENT3");
    ColorBuffer.put(GL_COLOR_ATTACHMENT2, "GL_COLOR_ATTACHMENT2");
    ColorBuffer.put(GL_COLOR_ATTACHMENT31, "GL_COLOR_ATTACHMENT31");
    ColorBuffer.put(GL_COLOR_ATTACHMENT1, "GL_COLOR_ATTACHMENT1");
    ColorBuffer.put(GL_COLOR_ATTACHMENT30, "GL_COLOR_ATTACHMENT30");
    ColorBuffer.put(GL_COLOR_ATTACHMENT8, "GL_COLOR_ATTACHMENT8");
    ColorBuffer.put(GL_COLOR_ATTACHMENT7, "GL_COLOR_ATTACHMENT7");
    ColorBuffer.put(GL_COLOR_ATTACHMENT6, "GL_COLOR_ATTACHMENT6");
    ColorBuffer.put(GL_COLOR_ATTACHMENT5, "GL_COLOR_ATTACHMENT5");
    ColorBuffer.put(GL_BACK_LEFT, "GL_BACK_LEFT");
    ColorBuffer.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
    ColorBuffer.put(GL_BACK_RIGHT, "GL_BACK_RIGHT");
    ColorBuffer.put(GL_FRONT_LEFT, "GL_FRONT_LEFT");
    ColorBuffer.put(GL_COLOR_ATTACHMENT29, "GL_COLOR_ATTACHMENT29");
    ColorBuffer.put(GL_COLOR_ATTACHMENT26, "GL_COLOR_ATTACHMENT26");
    ColorBuffer.put(GL_COLOR_ATTACHMENT25, "GL_COLOR_ATTACHMENT25");
    ColorBuffer.put(GL_COLOR_ATTACHMENT28, "GL_COLOR_ATTACHMENT28");
    ColorBuffer.put(GL_COLOR_ATTACHMENT27, "GL_COLOR_ATTACHMENT27");
    ColorBuffer.put(GL_COLOR_ATTACHMENT22, "GL_COLOR_ATTACHMENT22");
    ColorBuffer.put(GL_BACK, "GL_BACK");
    ColorBuffer.put(GL_COLOR_ATTACHMENT21, "GL_COLOR_ATTACHMENT21");
    ColorBuffer.put(GL_COLOR_ATTACHMENT24, "GL_COLOR_ATTACHMENT24");
    ColorBuffer.put(GL_COLOR_ATTACHMENT23, "GL_COLOR_ATTACHMENT23");
    ColorBuffer.put(GL_COLOR_ATTACHMENT20, "GL_COLOR_ATTACHMENT20");
    ColorBuffer.put(GL_RIGHT, "GL_RIGHT");
    ColorBuffer.put(GL_COLOR_ATTACHMENT9, "GL_COLOR_ATTACHMENT9");
    ColorBuffer.put(GL_NONE, "GL_NONE");
    ColorBuffer.put(GL_COLOR_ATTACHMENT19, "GL_COLOR_ATTACHMENT19");
    ColorBuffer.put(GL_COLOR_ATTACHMENT18, "GL_COLOR_ATTACHMENT18");
  }
  public static Map<Integer, String> ColorBuffer() {
    if (ColorBuffer != null)
      return ColorBuffer;
    ColorBuffer = new HashMap<Integer, String>(42);
    ColorBuffer0();
    return ColorBuffer;
  }
  private static Map<Integer, String> PixelFormat;
  private static void PixelFormat0() {
    PixelFormat.put(GL_LUMINANCE_ALPHA, "GL_LUMINANCE_ALPHA");
    PixelFormat.put(GL_ALPHA, "GL_ALPHA");
    PixelFormat.put(GL_LUMINANCE, "GL_LUMINANCE");
    PixelFormat.put(GL_RGBA, "GL_RGBA");
    PixelFormat.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    PixelFormat.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    PixelFormat.put(GL_BLUE, "GL_BLUE");
    PixelFormat.put(GL_COLOR_INDEX, "GL_COLOR_INDEX");
    PixelFormat.put(GL_RGB, "GL_RGB");
    PixelFormat.put(GL_GREEN, "GL_GREEN");
    PixelFormat.put(GL_YCRCB_444_SGIX, "GL_YCRCB_444_SGIX");
    PixelFormat.put(GL_RED, "GL_RED");
    PixelFormat.put(GL_STENCIL_INDEX, "GL_STENCIL_INDEX");
    PixelFormat.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    PixelFormat.put(GL_YCRCB_422_SGIX, "GL_YCRCB_422_SGIX");
  }
  public static Map<Integer, String> PixelFormat() {
    if (PixelFormat != null)
      return PixelFormat;
    PixelFormat = new HashMap<Integer, String>(15);
    PixelFormat0();
    return PixelFormat;
  }
  private static Map<Integer, String> VertexBufferObjectUsage;
  private static void VertexBufferObjectUsage0() {
    VertexBufferObjectUsage.put(GL_STATIC_COPY, "GL_STATIC_COPY");
    VertexBufferObjectUsage.put(GL_STATIC_DRAW, "GL_STATIC_DRAW");
    VertexBufferObjectUsage.put(GL_STREAM_READ, "GL_STREAM_READ");
    VertexBufferObjectUsage.put(GL_DYNAMIC_DRAW, "GL_DYNAMIC_DRAW");
    VertexBufferObjectUsage.put(GL_DYNAMIC_READ, "GL_DYNAMIC_READ");
    VertexBufferObjectUsage.put(GL_DYNAMIC_COPY, "GL_DYNAMIC_COPY");
    VertexBufferObjectUsage.put(GL_STATIC_READ, "GL_STATIC_READ");
    VertexBufferObjectUsage.put(GL_STREAM_DRAW, "GL_STREAM_DRAW");
    VertexBufferObjectUsage.put(GL_STREAM_COPY, "GL_STREAM_COPY");
  }
  public static Map<Integer, String> VertexBufferObjectUsage() {
    if (VertexBufferObjectUsage != null)
      return VertexBufferObjectUsage;
    VertexBufferObjectUsage = new HashMap<Integer, String>(9);
    VertexBufferObjectUsage0();
    return VertexBufferObjectUsage;
  }
  private static Map<Integer, String> ProgramInterfacePName;
  private static void ProgramInterfacePName0() {
    ProgramInterfacePName.put(GL_MAX_NUM_ACTIVE_VARIABLES, "GL_MAX_NUM_ACTIVE_VARIABLES");
    ProgramInterfacePName.put(GL_MAX_NUM_COMPATIBLE_SUBROUTINES, "GL_MAX_NUM_COMPATIBLE_SUBROUTINES");
    ProgramInterfacePName.put(GL_MAX_NAME_LENGTH, "GL_MAX_NAME_LENGTH");
    ProgramInterfacePName.put(GL_ACTIVE_RESOURCES, "GL_ACTIVE_RESOURCES");
  }
  public static Map<Integer, String> ProgramInterfacePName() {
    if (ProgramInterfacePName != null)
      return ProgramInterfacePName;
    ProgramInterfacePName = new HashMap<Integer, String>(4);
    ProgramInterfacePName0();
    return ProgramInterfacePName;
  }
  private static Map<Integer, String> MatrixMode;
  private static void MatrixMode0() {
    MatrixMode.put(GL_PROJECTION, "GL_PROJECTION");
    MatrixMode.put(GL_TEXTURE, "GL_TEXTURE");
    MatrixMode.put(GL_MODELVIEW, "GL_MODELVIEW");
  }
  public static Map<Integer, String> MatrixMode() {
    if (MatrixMode != null)
      return MatrixMode;
    MatrixMode = new HashMap<Integer, String>(3);
    MatrixMode0();
    return MatrixMode;
  }
  private static Map<Integer, String> HintTarget;
  private static void HintTarget0() {
    HintTarget.put(GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI");
    HintTarget.put(GL_NATIVE_GRAPHICS_END_HINT_PGI, "GL_NATIVE_GRAPHICS_END_HINT_PGI");
    HintTarget.put(GL_LINE_QUALITY_HINT_SGIX, "GL_LINE_QUALITY_HINT_SGIX");
    HintTarget.put(GL_PHONG_HINT_WIN, "GL_PHONG_HINT_WIN");
    HintTarget.put(GL_CONSERVE_MEMORY_HINT_PGI, "GL_CONSERVE_MEMORY_HINT_PGI");
    HintTarget.put(GL_ALLOW_DRAW_FRG_HINT_PGI, "GL_ALLOW_DRAW_FRG_HINT_PGI");
    HintTarget.put(GL_MATERIAL_SIDE_HINT_PGI, "GL_MATERIAL_SIDE_HINT_PGI");
    HintTarget.put(GL_POINT_SMOOTH_HINT, "GL_POINT_SMOOTH_HINT");
    HintTarget.put(GL_VERTEX_PRECLIP_SGIX, "GL_VERTEX_PRECLIP_SGIX");
    HintTarget.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
    HintTarget.put(GL_STRICT_DEPTHFUNC_HINT_PGI, "GL_STRICT_DEPTHFUNC_HINT_PGI");
    HintTarget.put(GL_LINE_SMOOTH_HINT, "GL_LINE_SMOOTH_HINT");
    HintTarget.put(GL_CONVOLUTION_HINT_SGIX, "GL_CONVOLUTION_HINT_SGIX");
    HintTarget.put(GL_TEXTURE_MULTI_BUFFER_HINT_SGIX, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX");
    HintTarget.put(GL_MAX_VERTEX_HINT_PGI, "GL_MAX_VERTEX_HINT_PGI");
    HintTarget.put(GL_WIDE_LINE_HINT_PGI, "GL_WIDE_LINE_HINT_PGI");
    HintTarget.put(GL_ALWAYS_SOFT_HINT_PGI, "GL_ALWAYS_SOFT_HINT_PGI");
    HintTarget.put(GL_ALLOW_DRAW_MEM_HINT_PGI, "GL_ALLOW_DRAW_MEM_HINT_PGI");
    HintTarget.put(GL_FRAGMENT_SHADER_DERIVATIVE_HINT, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT");
    HintTarget.put(GL_TRANSFORM_HINT_APPLE, "GL_TRANSFORM_HINT_APPLE");
    HintTarget.put(GL_BINNING_CONTROL_HINT_QCOM, "GL_BINNING_CONTROL_HINT_QCOM");
    HintTarget.put(GL_STRICT_LIGHTING_HINT_PGI, "GL_STRICT_LIGHTING_HINT_PGI");
    HintTarget.put(GL_CLIP_FAR_HINT_PGI, "GL_CLIP_FAR_HINT_PGI");
    HintTarget.put(GL_ALLOW_DRAW_OBJ_HINT_PGI, "GL_ALLOW_DRAW_OBJ_HINT_PGI");
    HintTarget.put(GL_GENERATE_MIPMAP_HINT_SGIS, "GL_GENERATE_MIPMAP_HINT_SGIS");
    HintTarget.put(GL_VERTEX_DATA_HINT_PGI, "GL_VERTEX_DATA_HINT_PGI");
    HintTarget.put(GL_GENERATE_MIPMAP_HINT, "GL_GENERATE_MIPMAP_HINT");
    HintTarget.put(GL_PERSPECTIVE_CORRECTION_HINT, "GL_PERSPECTIVE_CORRECTION_HINT");
    HintTarget.put(GL_STRICT_SCISSOR_HINT_PGI, "GL_STRICT_SCISSOR_HINT_PGI");
    HintTarget.put(GL_VERTEX_PRECLIP_HINT_SGIX, "GL_VERTEX_PRECLIP_HINT_SGIX");
    HintTarget.put(GL_POLYGON_SMOOTH_HINT, "GL_POLYGON_SMOOTH_HINT");
    HintTarget.put(GL_TEXTURE_COMPRESSION_HINT, "GL_TEXTURE_COMPRESSION_HINT");
    HintTarget.put(GL_VERTEX_CONSISTENT_HINT_PGI, "GL_VERTEX_CONSISTENT_HINT_PGI");
    HintTarget.put(GL_ALWAYS_FAST_HINT_PGI, "GL_ALWAYS_FAST_HINT_PGI");
    HintTarget.put(GL_BACK_NORMALS_HINT_PGI, "GL_BACK_NORMALS_HINT_PGI");
    HintTarget.put(GL_PREFER_DOUBLEBUFFER_HINT_PGI, "GL_PREFER_DOUBLEBUFFER_HINT_PGI");
    HintTarget.put(GL_TEXTURE_STORAGE_HINT_APPLE, "GL_TEXTURE_STORAGE_HINT_APPLE");
    HintTarget.put(GL_FOG_HINT, "GL_FOG_HINT");
    HintTarget.put(GL_ALLOW_DRAW_WIN_HINT_PGI, "GL_ALLOW_DRAW_WIN_HINT_PGI");
    HintTarget.put(GL_SCALEBIAS_HINT_SGIX, "GL_SCALEBIAS_HINT_SGIX");
    HintTarget.put(GL_CLIP_NEAR_HINT_PGI, "GL_CLIP_NEAR_HINT_PGI");
    HintTarget.put(GL_RECLAIM_MEMORY_HINT_PGI, "GL_RECLAIM_MEMORY_HINT_PGI");
    HintTarget.put(GL_VERTEX_ARRAY_STORAGE_HINT_APPLE, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE");
    HintTarget.put(GL_FULL_STIPPLE_HINT_PGI, "GL_FULL_STIPPLE_HINT_PGI");
  }
  public static Map<Integer, String> HintTarget() {
    if (HintTarget != null)
      return HintTarget;
    HintTarget = new HashMap<Integer, String>(44);
    HintTarget0();
    return HintTarget;
  }
  private static Map<Integer, String> InternalFormat;
  private static void InternalFormat0() {
    InternalFormat.put(GL_DUAL_LUMINANCE8_SGIS, "GL_DUAL_LUMINANCE8_SGIS");
    InternalFormat.put(GL_RG8UI, "GL_RG8UI");
    InternalFormat.put(GL_RG16I, "GL_RG16I");
    InternalFormat.put(GL_LUMINANCE12_ALPHA12, "GL_LUMINANCE12_ALPHA12");
    InternalFormat.put(GL_R16, "GL_R16");
    InternalFormat.put(GL_RG16F, "GL_RG16F");
    InternalFormat.put(GL_RGBA16UI, "GL_RGBA16UI");
    InternalFormat.put(GL_R11F_G11F_B10F_APPLE, "GL_R11F_G11F_B10F_APPLE");
    InternalFormat.put(GL_RGB8I, "GL_RGB8I");
    InternalFormat.put(GL_DEPTH_COMPONENT16_SGIX, "GL_DEPTH_COMPONENT16_SGIX");
    InternalFormat.put(GL_R32UI, "GL_R32UI");
    InternalFormat.put(GL_QUAD_INTENSITY8_SGIS, "GL_QUAD_INTENSITY8_SGIS");
    InternalFormat.put(GL_DUAL_ALPHA4_SGIS, "GL_DUAL_ALPHA4_SGIS");
    InternalFormat.put(GL_R3_G3_B2, "GL_R3_G3_B2");
    InternalFormat.put(GL_QUAD_ALPHA4_SGIS, "GL_QUAD_ALPHA4_SGIS");
    InternalFormat.put(GL_COMPRESSED_SIGNED_R11_EAC, "GL_COMPRESSED_SIGNED_R11_EAC");
    InternalFormat.put(GL_COMPRESSED_RG, "GL_COMPRESSED_RG");
    InternalFormat.put(GL_RGBA16I, "GL_RGBA16I");
    InternalFormat.put(GL_RGBA16F, "GL_RGBA16F");
    InternalFormat.put(GL_LUMINANCE8, "GL_LUMINANCE8");
    InternalFormat.put(GL_RGBA8UI, "GL_RGBA8UI");
    InternalFormat.put(GL_DUAL_LUMINANCE4_SGIS, "GL_DUAL_LUMINANCE4_SGIS");
    InternalFormat.put(GL_LUMINANCE4, "GL_LUMINANCE4");
    InternalFormat.put(GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT");
    InternalFormat.put(GL_COMPRESSED_RG11_EAC, "GL_COMPRESSED_RG11_EAC");
    InternalFormat.put(GL_RGB16_SNORM, "GL_RGB16_SNORM");
    InternalFormat.put(GL_COMPRESSED_RGBA, "GL_COMPRESSED_RGBA");
    InternalFormat.put(GL_DUAL_LUMINANCE12_SGIS, "GL_DUAL_LUMINANCE12_SGIS");
    InternalFormat.put(GL_RGBA32UI, "GL_RGBA32UI");
    InternalFormat.put(GL_DEPTH_COMPONENT, "GL_DEPTH_COMPONENT");
    InternalFormat.put(GL_DUAL_LUMINANCE_ALPHA4_SGIS, "GL_DUAL_LUMINANCE_ALPHA4_SGIS");
    InternalFormat.put(GL_R16UI, "GL_R16UI");
    InternalFormat.put(GL_COMPRESSED_RGBA8_ETC2_EAC, "GL_COMPRESSED_RGBA8_ETC2_EAC");
    InternalFormat.put(GL_SRGB, "GL_SRGB");
    InternalFormat.put(GL_INTENSITY, "GL_INTENSITY");
    InternalFormat.put(GL_SRGB8, "GL_SRGB8");
    InternalFormat.put(GL_LUMINANCE4_ALPHA4, "GL_LUMINANCE4_ALPHA4");
    InternalFormat.put(GL_R8_SNORM, "GL_R8_SNORM");
    InternalFormat.put(GL_RGB8UI, "GL_RGB8UI");
    InternalFormat.put(GL_R16F, "GL_R16F");
    InternalFormat.put(GL_QUAD_ALPHA8_SGIS, "GL_QUAD_ALPHA8_SGIS");
    InternalFormat.put(GL_DUAL_LUMINANCE_ALPHA8_SGIS, "GL_DUAL_LUMINANCE_ALPHA8_SGIS");
    InternalFormat.put(GL_RGBA, "GL_RGBA");
    InternalFormat.put(GL_R16I, "GL_R16I");
    InternalFormat.put(GL_DEPTH32F_STENCIL8, "GL_DEPTH32F_STENCIL8");
    InternalFormat.put(GL_RGB5, "GL_RGB5");
    InternalFormat.put(GL_RGB16I, "GL_RGB16I");
    InternalFormat.put(GL_RGB4, "GL_RGB4");
    InternalFormat.put(GL_COMPRESSED_R11_EAC, "GL_COMPRESSED_R11_EAC");
    InternalFormat.put(GL_RGB9_E5_APPLE, "GL_RGB9_E5_APPLE");
    InternalFormat.put(GL_RGB8, "GL_RGB8");
    InternalFormat.put(GL_DEPTH_COMPONENT24_SGIX, "GL_DEPTH_COMPONENT24_SGIX");
    InternalFormat.put(GL_COMPRESSED_SRGB8_ETC2, "GL_COMPRESSED_SRGB8_ETC2");
    InternalFormat.put(GL_RG32UI, "GL_RG32UI");
    InternalFormat.put(GL_RGB16F, "GL_RGB16F");
    InternalFormat.put(GL_DUAL_INTENSITY16_SGIS, "GL_DUAL_INTENSITY16_SGIS");
    InternalFormat.put(GL_R8UI, "GL_R8UI");
    InternalFormat.put(GL_DEPTH_STENCIL, "GL_DEPTH_STENCIL");
    InternalFormat.put(GL_QUAD_INTENSITY4_SGIS, "GL_QUAD_INTENSITY4_SGIS");
    InternalFormat.put(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    InternalFormat.put(GL_COMPRESSED_SRGB_ALPHA, "GL_COMPRESSED_SRGB_ALPHA");
    InternalFormat.put(GL_DUAL_LUMINANCE16_SGIS, "GL_DUAL_LUMINANCE16_SGIS");
    InternalFormat.put(GL_RGB9_E5, "GL_RGB9_E5");
    InternalFormat.put(GL_RGB5_A1, "GL_RGB5_A1");
    InternalFormat.put(GL_RG16, "GL_RG16");
    InternalFormat.put(GL_RG8_SNORM, "GL_RG8_SNORM");
    InternalFormat.put(GL_DEPTH_STENCIL_MESA, "GL_DEPTH_STENCIL_MESA");
    InternalFormat.put(GL_RGBA8I, "GL_RGBA8I");
    InternalFormat.put(GL_RG16UI, "GL_RG16UI");
    InternalFormat.put(GL_RGB10_A2UI, "GL_RGB10_A2UI");
    InternalFormat.put(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC, "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC");
  }
  private static void InternalFormat1() {
    InternalFormat.put(GL_COMPRESSED_RGB, "GL_COMPRESSED_RGB");
    InternalFormat.put(GL_DUAL_INTENSITY8_SGIS, "GL_DUAL_INTENSITY8_SGIS");
    InternalFormat.put(GL_R8I, "GL_R8I");
    InternalFormat.put(GL_RG32F, "GL_RG32F");
    InternalFormat.put(GL_RG32I, "GL_RG32I");
    InternalFormat.put(GL_INTENSITY16, "GL_INTENSITY16");
    InternalFormat.put(GL_INTENSITY12, "GL_INTENSITY12");
    InternalFormat.put(GL_COMPRESSED_RED_RGTC1, "GL_COMPRESSED_RED_RGTC1");
    InternalFormat.put(GL_QUAD_LUMINANCE8_SGIS, "GL_QUAD_LUMINANCE8_SGIS");
    InternalFormat.put(GL_RGBA8, "GL_RGBA8");
    InternalFormat.put(GL_RGBA4, "GL_RGBA4");
    InternalFormat.put(GL_DEPTH_COMPONENT32_SGIX, "GL_DEPTH_COMPONENT32_SGIX");
    InternalFormat.put(GL_SRGB8_ALPHA8, "GL_SRGB8_ALPHA8");
    InternalFormat.put(GL_COMPRESSED_RG_RGTC2, "GL_COMPRESSED_RG_RGTC2");
    InternalFormat.put(GL_DUAL_ALPHA16_SGIS, "GL_DUAL_ALPHA16_SGIS");
    InternalFormat.put(GL_RG16_SNORM, "GL_RG16_SNORM");
    InternalFormat.put(GL_RGB16, "GL_RGB16");
    InternalFormat.put(GL_RGB12, "GL_RGB12");
    InternalFormat.put(GL_RGB10, "GL_RGB10");
    InternalFormat.put(GL_LUMINANCE16, "GL_LUMINANCE16");
    InternalFormat.put(GL_R11F_G11F_B10F, "GL_R11F_G11F_B10F");
    InternalFormat.put(GL_COMPRESSED_RGB8_ETC2, "GL_COMPRESSED_RGB8_ETC2");
    InternalFormat.put(GL_RGBA8_SNORM, "GL_RGBA8_SNORM");
    InternalFormat.put(GL_RGBA32I, "GL_RGBA32I");
    InternalFormat.put(GL_RGBA32F, "GL_RGBA32F");
    InternalFormat.put(GL_DEPTH24_STENCIL8, "GL_DEPTH24_STENCIL8");
    InternalFormat.put(GL_INTENSITY8, "GL_INTENSITY8");
    InternalFormat.put(GL_ALPHA16, "GL_ALPHA16");
    InternalFormat.put(GL_INTENSITY4, "GL_INTENSITY4");
    InternalFormat.put(GL_ALPHA12, "GL_ALPHA12");
    InternalFormat.put(GL_LUMINANCE12_ALPHA4, "GL_LUMINANCE12_ALPHA4");
    InternalFormat.put(GL_LUMINANCE12, "GL_LUMINANCE12");
    InternalFormat.put(GL_LUMINANCE16_ALPHA16, "GL_LUMINANCE16_ALPHA16");
    InternalFormat.put(GL_SRGB_ALPHA, "GL_SRGB_ALPHA");
    InternalFormat.put(GL_COMPRESSED_RGBA_BPTC_UNORM, "GL_COMPRESSED_RGBA_BPTC_UNORM");
    InternalFormat.put(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2");
    InternalFormat.put(GL_RGB16UI, "GL_RGB16UI");
    InternalFormat.put(GL_RED, "GL_RED");
    InternalFormat.put(GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM");
    InternalFormat.put(GL_LUMINANCE6_ALPHA2, "GL_LUMINANCE6_ALPHA2");
    InternalFormat.put(GL_COMPRESSED_SRGB, "GL_COMPRESSED_SRGB");
    InternalFormat.put(GL_LUMINANCE8_ALPHA8, "GL_LUMINANCE8_ALPHA8");
    InternalFormat.put(GL_DUAL_ALPHA12_SGIS, "GL_DUAL_ALPHA12_SGIS");
    InternalFormat.put(GL_COMPRESSED_SIGNED_RED_RGTC1, "GL_COMPRESSED_SIGNED_RED_RGTC1");
    InternalFormat.put(GL_DUAL_INTENSITY4_SGIS, "GL_DUAL_INTENSITY4_SGIS");
    InternalFormat.put(GL_R32F, "GL_R32F");
    InternalFormat.put(GL_RGB8_SNORM, "GL_RGB8_SNORM");
    InternalFormat.put(GL_DEPTH_COMPONENT32F, "GL_DEPTH_COMPONENT32F");
    InternalFormat.put(GL_RGB32I, "GL_RGB32I");
    InternalFormat.put(GL_R32I, "GL_R32I");
    InternalFormat.put(GL_RGB10_A2, "GL_RGB10_A2");
    InternalFormat.put(GL_R16_SNORM, "GL_R16_SNORM");
    InternalFormat.put(GL_RG, "GL_RG");
    InternalFormat.put(GL_QUAD_LUMINANCE4_SGIS, "GL_QUAD_LUMINANCE4_SGIS");
    InternalFormat.put(GL_RG8, "GL_RG8");
    InternalFormat.put(GL_RG8I, "GL_RG8I");
    InternalFormat.put(GL_RGBA16, "GL_RGBA16");
    InternalFormat.put(GL_R8, "GL_R8");
    InternalFormat.put(GL_COMPRESSED_RED, "GL_COMPRESSED_RED");
    InternalFormat.put(GL_RGB, "GL_RGB");
    InternalFormat.put(GL_ALPHA4, "GL_ALPHA4");
    InternalFormat.put(GL_ALPHA8, "GL_ALPHA8");
    InternalFormat.put(GL_RGBA12, "GL_RGBA12");
    InternalFormat.put(GL_COMPRESSED_SIGNED_RG11_EAC, "GL_COMPRESSED_SIGNED_RG11_EAC");
    InternalFormat.put(GL_RGB32UI, "GL_RGB32UI");
    InternalFormat.put(GL_COMPRESSED_SIGNED_RG_RGTC2, "GL_COMPRESSED_SIGNED_RG_RGTC2");
  }
  private static void InternalFormat2() {
    InternalFormat.put(GL_DUAL_ALPHA8_SGIS, "GL_DUAL_ALPHA8_SGIS");
    InternalFormat.put(GL_DUAL_INTENSITY12_SGIS, "GL_DUAL_INTENSITY12_SGIS");
    InternalFormat.put(GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT");
    InternalFormat.put(GL_DEPTH_COMPONENT16, "GL_DEPTH_COMPONENT16");
  }
  public static Map<Integer, String> InternalFormat() {
    if (InternalFormat != null)
      return InternalFormat;
    InternalFormat = new HashMap<Integer, String>(141);
    InternalFormat0();
    InternalFormat1();
    InternalFormat2();
    return InternalFormat;
  }
  private static Map<Integer, String> TextureWrapMode;
  private static void TextureWrapMode0() {
    TextureWrapMode.put(GL_CLAMP_TO_BORDER, "GL_CLAMP_TO_BORDER");
    TextureWrapMode.put(GL_CLAMP_TO_EDGE_SGIS, "GL_CLAMP_TO_EDGE_SGIS");
    TextureWrapMode.put(GL_REPEAT, "GL_REPEAT");
    TextureWrapMode.put(GL_CLAMP, "GL_CLAMP");
    TextureWrapMode.put(GL_CLAMP_TO_BORDER_SGIS, "GL_CLAMP_TO_BORDER_SGIS");
    TextureWrapMode.put(GL_CLAMP_TO_EDGE, "GL_CLAMP_TO_EDGE");
  }
  public static Map<Integer, String> TextureWrapMode() {
    if (TextureWrapMode != null)
      return TextureWrapMode;
    TextureWrapMode = new HashMap<Integer, String>(6);
    TextureWrapMode0();
    return TextureWrapMode;
  }
  private static Map<Integer, String> DebugType;
  private static void DebugType0() {
    DebugType.put(GL_DEBUG_TYPE_PUSH_GROUP, "GL_DEBUG_TYPE_PUSH_GROUP");
    DebugType.put(GL_DEBUG_TYPE_MARKER, "GL_DEBUG_TYPE_MARKER");
    DebugType.put(GL_DEBUG_TYPE_ERROR, "GL_DEBUG_TYPE_ERROR");
    DebugType.put(GL_DEBUG_TYPE_PERFORMANCE, "GL_DEBUG_TYPE_PERFORMANCE");
    DebugType.put(GL_DEBUG_TYPE_PORTABILITY, "GL_DEBUG_TYPE_PORTABILITY");
    DebugType.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR");
    DebugType.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR");
    DebugType.put(GL_DONT_CARE, "GL_DONT_CARE");
    DebugType.put(GL_DEBUG_TYPE_OTHER, "GL_DEBUG_TYPE_OTHER");
    DebugType.put(GL_DEBUG_TYPE_POP_GROUP, "GL_DEBUG_TYPE_POP_GROUP");
  }
  public static Map<Integer, String> DebugType() {
    if (DebugType != null)
      return DebugType;
    DebugType = new HashMap<Integer, String>(10);
    DebugType0();
    return DebugType;
  }
  private static Map<Integer, String> StencilFaceDirection;
  private static void StencilFaceDirection0() {
    StencilFaceDirection.put(GL_FRONT, "GL_FRONT");
    StencilFaceDirection.put(GL_BACK, "GL_BACK");
    StencilFaceDirection.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static Map<Integer, String> StencilFaceDirection() {
    if (StencilFaceDirection != null)
      return StencilFaceDirection;
    StencilFaceDirection = new HashMap<Integer, String>(3);
    StencilFaceDirection0();
    return StencilFaceDirection;
  }
  private static Map<Integer, String> TextureTarget;
  private static void TextureTarget0() {
    TextureTarget.put(GL_PROXY_TEXTURE_2D, "GL_PROXY_TEXTURE_2D");
    TextureTarget.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE, "GL_PROXY_TEXTURE_2D_MULTISAMPLE");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_ARRAY, "GL_TEXTURE_CUBE_MAP_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_2D_ARRAY, "GL_PROXY_TEXTURE_2D_ARRAY");
    TextureTarget.put(GL_DETAIL_TEXTURE_2D_SGIS, "GL_DETAIL_TEXTURE_2D_SGIS");
    TextureTarget.put(GL_PROXY_TEXTURE_1D_ARRAY, "GL_PROXY_TEXTURE_1D_ARRAY");
    TextureTarget.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    TextureTarget.put(GL_TEXTURE_1D_ARRAY, "GL_TEXTURE_1D_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_CUBE_MAP, "GL_PROXY_TEXTURE_CUBE_MAP");
    TextureTarget.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    TextureTarget.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X, "GL_TEXTURE_CUBE_MAP_POSITIVE_X");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z");
    TextureTarget.put(GL_PROXY_TEXTURE_3D, "GL_PROXY_TEXTURE_3D");
    TextureTarget.put(GL_PROXY_TEXTURE_1D, "GL_PROXY_TEXTURE_1D");
    TextureTarget.put(GL_TEXTURE_RECTANGLE, "GL_TEXTURE_RECTANGLE");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y");
    TextureTarget.put(GL_PROXY_TEXTURE_4D_SGIS, "GL_PROXY_TEXTURE_4D_SGIS");
    TextureTarget.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    TextureTarget.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    TextureTarget.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    TextureTarget.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    TextureTarget.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_RECTANGLE, "GL_PROXY_TEXTURE_RECTANGLE");
    TextureTarget.put(GL_PROXY_TEXTURE_CUBE_MAP_ARRAY, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY");
    TextureTarget.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");
  }
  public static Map<Integer, String> TextureTarget() {
    if (TextureTarget != null)
      return TextureTarget;
    TextureTarget = new HashMap<Integer, String>(29);
    TextureTarget0();
    return TextureTarget;
  }
  private static Map<Integer, String> PipelineParameterName;
  private static void PipelineParameterName0() {
    PipelineParameterName.put(GL_VERTEX_SHADER, "GL_VERTEX_SHADER");
    PipelineParameterName.put(GL_GEOMETRY_SHADER, "GL_GEOMETRY_SHADER");
    PipelineParameterName.put(GL_TESS_CONTROL_SHADER, "GL_TESS_CONTROL_SHADER");
    PipelineParameterName.put(GL_INFO_LOG_LENGTH, "GL_INFO_LOG_LENGTH");
    PipelineParameterName.put(GL_FRAGMENT_SHADER, "GL_FRAGMENT_SHADER");
    PipelineParameterName.put(GL_TESS_EVALUATION_SHADER, "GL_TESS_EVALUATION_SHADER");
    PipelineParameterName.put(GL_ACTIVE_PROGRAM, "GL_ACTIVE_PROGRAM");
  }
  public static Map<Integer, String> PipelineParameterName() {
    if (PipelineParameterName != null)
      return PipelineParameterName;
    PipelineParameterName = new HashMap<Integer, String>(7);
    PipelineParameterName0();
    return PipelineParameterName;
  }
  private static Map<Integer, String> ColorMaterialParameter;
  private static void ColorMaterialParameter0() {
    ColorMaterialParameter.put(GL_AMBIENT_AND_DIFFUSE, "GL_AMBIENT_AND_DIFFUSE");
    ColorMaterialParameter.put(GL_AMBIENT, "GL_AMBIENT");
    ColorMaterialParameter.put(GL_SPECULAR, "GL_SPECULAR");
    ColorMaterialParameter.put(GL_EMISSION, "GL_EMISSION");
    ColorMaterialParameter.put(GL_DIFFUSE, "GL_DIFFUSE");
  }
  public static Map<Integer, String> ColorMaterialParameter() {
    if (ColorMaterialParameter != null)
      return ColorMaterialParameter;
    ColorMaterialParameter = new HashMap<Integer, String>(5);
    ColorMaterialParameter0();
    return ColorMaterialParameter;
  }
  private static Map<Integer, String> BufferStorageTarget;
  private static void BufferStorageTarget0() {
    BufferStorageTarget.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    BufferStorageTarget.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    BufferStorageTarget.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    BufferStorageTarget.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    BufferStorageTarget.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    BufferStorageTarget.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    BufferStorageTarget.put(GL_PIXEL_UNPACK_BUFFER, "GL_PIXEL_UNPACK_BUFFER");
    BufferStorageTarget.put(GL_ELEMENT_ARRAY_BUFFER, "GL_ELEMENT_ARRAY_BUFFER");
    BufferStorageTarget.put(GL_PIXEL_PACK_BUFFER, "GL_PIXEL_PACK_BUFFER");
    BufferStorageTarget.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    BufferStorageTarget.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    BufferStorageTarget.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    BufferStorageTarget.put(GL_ARRAY_BUFFER, "GL_ARRAY_BUFFER");
    BufferStorageTarget.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
  }
  public static Map<Integer, String> BufferStorageTarget() {
    if (BufferStorageTarget != null)
      return BufferStorageTarget;
    BufferStorageTarget = new HashMap<Integer, String>(14);
    BufferStorageTarget0();
    return BufferStorageTarget;
  }
  private static Map<Integer, String> TextureMinFilter;
  private static void TextureMinFilter0() {
    TextureMinFilter.put(GL_LINEAR_MIPMAP_LINEAR, "GL_LINEAR_MIPMAP_LINEAR");
    TextureMinFilter.put(GL_NEAREST_CLIPMAP_LINEAR_SGIX, "GL_NEAREST_CLIPMAP_LINEAR_SGIX");
    TextureMinFilter.put(GL_LINEAR, "GL_LINEAR");
    TextureMinFilter.put(GL_LINEAR_CLIPMAP_LINEAR_SGIX, "GL_LINEAR_CLIPMAP_LINEAR_SGIX");
    TextureMinFilter.put(GL_LINEAR_CLIPMAP_NEAREST_SGIX, "GL_LINEAR_CLIPMAP_NEAREST_SGIX");
    TextureMinFilter.put(GL_NEAREST_MIPMAP_LINEAR, "GL_NEAREST_MIPMAP_LINEAR");
    TextureMinFilter.put(GL_NEAREST_CLIPMAP_NEAREST_SGIX, "GL_NEAREST_CLIPMAP_NEAREST_SGIX");
    TextureMinFilter.put(GL_PIXEL_TEX_GEN_Q_CEILING_SGIX, "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX");
    TextureMinFilter.put(GL_NEAREST_MIPMAP_NEAREST, "GL_NEAREST_MIPMAP_NEAREST");
    TextureMinFilter.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    TextureMinFilter.put(GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX, "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX");
    TextureMinFilter.put(GL_LINEAR_MIPMAP_NEAREST, "GL_LINEAR_MIPMAP_NEAREST");
    TextureMinFilter.put(GL_NEAREST, "GL_NEAREST");
    TextureMinFilter.put(GL_PIXEL_TEX_GEN_Q_ROUND_SGIX, "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX");
  }
  public static Map<Integer, String> TextureMinFilter() {
    if (TextureMinFilter != null)
      return TextureMinFilter;
    TextureMinFilter = new HashMap<Integer, String>(14);
    TextureMinFilter0();
    return TextureMinFilter;
  }
  private static Map<Integer, String> TextureStorageMaskAMD;
  private static void TextureStorageMaskAMD0() {
    TextureStorageMaskAMD.put(GL_TEXTURE_STORAGE_SPARSE_BIT_AMD, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD");
  }
  public static Map<Integer, String> TextureStorageMaskAMD() {
    if (TextureStorageMaskAMD != null)
      return TextureStorageMaskAMD;
    TextureStorageMaskAMD = new HashMap<Integer, String>(1);
    TextureStorageMaskAMD0();
    return TextureStorageMaskAMD;
  }
  private static Map<Integer, String> SyncParameterName;
  private static void SyncParameterName0() {
    SyncParameterName.put(GL_SYNC_STATUS, "GL_SYNC_STATUS");
    SyncParameterName.put(GL_SYNC_FLAGS, "GL_SYNC_FLAGS");
    SyncParameterName.put(GL_OBJECT_TYPE, "GL_OBJECT_TYPE");
    SyncParameterName.put(GL_SYNC_CONDITION, "GL_SYNC_CONDITION");
  }
  public static Map<Integer, String> SyncParameterName() {
    if (SyncParameterName != null)
      return SyncParameterName;
    SyncParameterName = new HashMap<Integer, String>(4);
    SyncParameterName0();
    return SyncParameterName;
  }
  private static Map<Integer, String> BufferBitQCOM;
  private static void BufferBitQCOM0() {
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT0_QCOM, "GL_MULTISAMPLE_BUFFER_BIT0_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT6_QCOM, "GL_MULTISAMPLE_BUFFER_BIT6_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT3_QCOM, "GL_STENCIL_BUFFER_BIT3_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT6_QCOM, "GL_COLOR_BUFFER_BIT6_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT6_QCOM, "GL_STENCIL_BUFFER_BIT6_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT5_QCOM, "GL_DEPTH_BUFFER_BIT5_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT0_QCOM, "GL_STENCIL_BUFFER_BIT0_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT3_QCOM, "GL_DEPTH_BUFFER_BIT3_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT1_QCOM, "GL_COLOR_BUFFER_BIT1_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT1_QCOM, "GL_STENCIL_BUFFER_BIT1_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT0_QCOM, "GL_DEPTH_BUFFER_BIT0_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT1_QCOM, "GL_MULTISAMPLE_BUFFER_BIT1_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT7_QCOM, "GL_STENCIL_BUFFER_BIT7_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT5_QCOM, "GL_MULTISAMPLE_BUFFER_BIT5_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT5_QCOM, "GL_COLOR_BUFFER_BIT5_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT4_QCOM, "GL_DEPTH_BUFFER_BIT4_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT4_QCOM, "GL_STENCIL_BUFFER_BIT4_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT7_QCOM, "GL_DEPTH_BUFFER_BIT7_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT2_QCOM, "GL_COLOR_BUFFER_BIT2_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT2_QCOM, "GL_STENCIL_BUFFER_BIT2_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT1_QCOM, "GL_DEPTH_BUFFER_BIT1_QCOM");
    BufferBitQCOM.put(GL_STENCIL_BUFFER_BIT5_QCOM, "GL_STENCIL_BUFFER_BIT5_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT4_QCOM, "GL_MULTISAMPLE_BUFFER_BIT4_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT2_QCOM, "GL_MULTISAMPLE_BUFFER_BIT2_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT7_QCOM, "GL_MULTISAMPLE_BUFFER_BIT7_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT6_QCOM, "GL_DEPTH_BUFFER_BIT6_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT4_QCOM, "GL_COLOR_BUFFER_BIT4_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT7_QCOM, "GL_COLOR_BUFFER_BIT7_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT3_QCOM, "GL_COLOR_BUFFER_BIT3_QCOM");
    BufferBitQCOM.put(GL_DEPTH_BUFFER_BIT2_QCOM, "GL_DEPTH_BUFFER_BIT2_QCOM");
    BufferBitQCOM.put(GL_MULTISAMPLE_BUFFER_BIT3_QCOM, "GL_MULTISAMPLE_BUFFER_BIT3_QCOM");
    BufferBitQCOM.put(GL_COLOR_BUFFER_BIT0_QCOM, "GL_COLOR_BUFFER_BIT0_QCOM");
  }
  public static Map<Integer, String> BufferBitQCOM() {
    if (BufferBitQCOM != null)
      return BufferBitQCOM;
    BufferBitQCOM = new HashMap<Integer, String>(32);
    BufferBitQCOM0();
    return BufferBitQCOM;
  }
  private static Map<Integer, String> PixelStoreSubsampleRate;
  private static void PixelStoreSubsampleRate0() {
    PixelStoreSubsampleRate.put(GL_PIXEL_SUBSAMPLE_4242_SGIX, "GL_PIXEL_SUBSAMPLE_4242_SGIX");
    PixelStoreSubsampleRate.put(GL_PIXEL_SUBSAMPLE_4444_SGIX, "GL_PIXEL_SUBSAMPLE_4444_SGIX");
    PixelStoreSubsampleRate.put(GL_PIXEL_SUBSAMPLE_2424_SGIX, "GL_PIXEL_SUBSAMPLE_2424_SGIX");
  }
  public static Map<Integer, String> PixelStoreSubsampleRate() {
    if (PixelStoreSubsampleRate != null)
      return PixelStoreSubsampleRate;
    PixelStoreSubsampleRate = new HashMap<Integer, String>(3);
    PixelStoreSubsampleRate0();
    return PixelStoreSubsampleRate;
  }
  private static Map<Integer, String> BufferAccessMask;
  private static void BufferAccessMask0() {
    BufferAccessMask.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    BufferAccessMask.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    BufferAccessMask.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    BufferAccessMask.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    BufferAccessMask.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    BufferAccessMask.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
    BufferAccessMask.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    BufferAccessMask.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
  }
  public static Map<Integer, String> BufferAccessMask() {
    if (BufferAccessMask != null)
      return BufferAccessMask;
    BufferAccessMask = new HashMap<Integer, String>(8);
    BufferAccessMask0();
    return BufferAccessMask;
  }
  private static Map<Integer, String> FfdMaskSGIX;
  private static void FfdMaskSGIX0() {
  }
  public static Map<Integer, String> FfdMaskSGIX() {
    if (FfdMaskSGIX != null)
      return FfdMaskSGIX;
    FfdMaskSGIX = new HashMap<Integer, String>(0);
    FfdMaskSGIX0();
    return FfdMaskSGIX;
  }
  private static Map<Integer, String> LightModelColorControl;
  private static void LightModelColorControl0() {
    LightModelColorControl.put(GL_SINGLE_COLOR, "GL_SINGLE_COLOR");
    LightModelColorControl.put(GL_SEPARATE_SPECULAR_COLOR, "GL_SEPARATE_SPECULAR_COLOR");
  }
  public static Map<Integer, String> LightModelColorControl() {
    if (LightModelColorControl != null)
      return LightModelColorControl;
    LightModelColorControl = new HashMap<Integer, String>(2);
    LightModelColorControl0();
    return LightModelColorControl;
  }
  private static Map<Integer, String> ConvolutionBorderModeEXT;
  private static void ConvolutionBorderModeEXT0() {
    ConvolutionBorderModeEXT.put(GL_REDUCE, "GL_REDUCE");
  }
  public static Map<Integer, String> ConvolutionBorderModeEXT() {
    if (ConvolutionBorderModeEXT != null)
      return ConvolutionBorderModeEXT;
    ConvolutionBorderModeEXT = new HashMap<Integer, String>(1);
    ConvolutionBorderModeEXT0();
    return ConvolutionBorderModeEXT;
  }
  private static Map<Integer, String> StencilFunction;
  private static void StencilFunction0() {
    StencilFunction.put(GL_EQUAL, "GL_EQUAL");
    StencilFunction.put(GL_GREATER, "GL_GREATER");
    StencilFunction.put(GL_LEQUAL, "GL_LEQUAL");
    StencilFunction.put(GL_NEVER, "GL_NEVER");
    StencilFunction.put(GL_GEQUAL, "GL_GEQUAL");
    StencilFunction.put(GL_LESS, "GL_LESS");
    StencilFunction.put(GL_NOTEQUAL, "GL_NOTEQUAL");
    StencilFunction.put(GL_ALWAYS, "GL_ALWAYS");
  }
  public static Map<Integer, String> StencilFunction() {
    if (StencilFunction != null)
      return StencilFunction;
    StencilFunction = new HashMap<Integer, String>(8);
    StencilFunction0();
    return StencilFunction;
  }
  private static Map<Integer, String> PathStringFormat;
  private static void PathStringFormat0() {
  }
  public static Map<Integer, String> PathStringFormat() {
    if (PathStringFormat != null)
      return PathStringFormat;
    PathStringFormat = new HashMap<Integer, String>(0);
    PathStringFormat0();
    return PathStringFormat;
  }
  private static Map<Integer, String> TextureEnvTarget;
  private static void TextureEnvTarget0() {
    TextureEnvTarget.put(GL_TEXTURE_ENV, "GL_TEXTURE_ENV");
  }
  public static Map<Integer, String> TextureEnvTarget() {
    if (TextureEnvTarget != null)
      return TextureEnvTarget;
    TextureEnvTarget = new HashMap<Integer, String>(1);
    TextureEnvTarget0();
    return TextureEnvTarget;
  }
  private static Map<Integer, String> PixelType;
  private static void PixelType0() {
    PixelType.put(GL_UNSIGNED_INT_8_8_8_8, "GL_UNSIGNED_INT_8_8_8_8");
    PixelType.put(GL_FLOAT, "GL_FLOAT");
    PixelType.put(GL_BITMAP, "GL_BITMAP");
    PixelType.put(GL_BYTE, "GL_BYTE");
    PixelType.put(GL_UNSIGNED_SHORT_4_4_4_4, "GL_UNSIGNED_SHORT_4_4_4_4");
    PixelType.put(GL_UNSIGNED_INT_10_10_10_2, "GL_UNSIGNED_INT_10_10_10_2");
    PixelType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    PixelType.put(GL_INT, "GL_INT");
    PixelType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    PixelType.put(GL_SHORT, "GL_SHORT");
    PixelType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    PixelType.put(GL_UNSIGNED_BYTE_3_3_2, "GL_UNSIGNED_BYTE_3_3_2");
    PixelType.put(GL_UNSIGNED_SHORT_5_5_5_1, "GL_UNSIGNED_SHORT_5_5_5_1");
  }
  public static Map<Integer, String> PixelType() {
    if (PixelType != null)
      return PixelType;
    PixelType = new HashMap<Integer, String>(13);
    PixelType0();
    return PixelType;
  }
  private static Map<Integer, String> ColorPointerType;
  private static void ColorPointerType0() {
    ColorPointerType.put(GL_DOUBLE, "GL_DOUBLE");
    ColorPointerType.put(GL_FLOAT, "GL_FLOAT");
    ColorPointerType.put(GL_BYTE, "GL_BYTE");
    ColorPointerType.put(GL_INT, "GL_INT");
    ColorPointerType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    ColorPointerType.put(GL_SHORT, "GL_SHORT");
    ColorPointerType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
    ColorPointerType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
  }
  public static Map<Integer, String> ColorPointerType() {
    if (ColorPointerType != null)
      return ColorPointerType;
    ColorPointerType = new HashMap<Integer, String>(8);
    ColorPointerType0();
    return ColorPointerType;
  }
  private static Map<Integer, String> ShaderParameterName;
  private static void ShaderParameterName0() {
    ShaderParameterName.put(GL_DELETE_STATUS, "GL_DELETE_STATUS");
    ShaderParameterName.put(GL_SHADER_SOURCE_LENGTH, "GL_SHADER_SOURCE_LENGTH");
    ShaderParameterName.put(GL_COMPILE_STATUS, "GL_COMPILE_STATUS");
    ShaderParameterName.put(GL_INFO_LOG_LENGTH, "GL_INFO_LOG_LENGTH");
    ShaderParameterName.put(GL_SHADER_TYPE, "GL_SHADER_TYPE");
  }
  public static Map<Integer, String> ShaderParameterName() {
    if (ShaderParameterName != null)
      return ShaderParameterName;
    ShaderParameterName = new HashMap<Integer, String>(5);
    ShaderParameterName0();
    return ShaderParameterName;
  }
  private static Map<Integer, String> ListParameterName;
  private static void ListParameterName0() {
    ListParameterName.put(GL_LIST_PRIORITY_SGIX, "GL_LIST_PRIORITY_SGIX");
  }
  public static Map<Integer, String> ListParameterName() {
    if (ListParameterName != null)
      return ListParameterName;
    ListParameterName = new HashMap<Integer, String>(1);
    ListParameterName0();
    return ListParameterName;
  }
  private static Map<Integer, String> VertexAttribType;
  private static void VertexAttribType0() {
    VertexAttribType.put(GL_INT_2_10_10_10_REV, "GL_INT_2_10_10_10_REV");
    VertexAttribType.put(GL_FLOAT, "GL_FLOAT");
    VertexAttribType.put(GL_DOUBLE, "GL_DOUBLE");
    VertexAttribType.put(GL_BYTE, "GL_BYTE");
    VertexAttribType.put(GL_HALF_FLOAT, "GL_HALF_FLOAT");
    VertexAttribType.put(GL_UNSIGNED_INT, "GL_UNSIGNED_INT");
    VertexAttribType.put(GL_UNSIGNED_INT_2_10_10_10_REV, "GL_UNSIGNED_INT_2_10_10_10_REV");
    VertexAttribType.put(GL_INT, "GL_INT");
    VertexAttribType.put(GL_UNSIGNED_INT_10F_11F_11F_REV, "GL_UNSIGNED_INT_10F_11F_11F_REV");
    VertexAttribType.put(GL_UNSIGNED_SHORT, "GL_UNSIGNED_SHORT");
    VertexAttribType.put(GL_FIXED, "GL_FIXED");
    VertexAttribType.put(GL_SHORT, "GL_SHORT");
    VertexAttribType.put(GL_UNSIGNED_BYTE, "GL_UNSIGNED_BYTE");
  }
  public static Map<Integer, String> VertexAttribType() {
    if (VertexAttribType != null)
      return VertexAttribType;
    VertexAttribType = new HashMap<Integer, String>(13);
    VertexAttribType0();
    return VertexAttribType;
  }
  private static Map<Integer, String> SyncObjectMask;
  private static void SyncObjectMask0() {
    SyncObjectMask.put(GL_SYNC_FLUSH_COMMANDS_BIT, "GL_SYNC_FLUSH_COMMANDS_BIT");
    SyncObjectMask.put(GL_SYNC_FLUSH_COMMANDS_BIT_APPLE, "GL_SYNC_FLUSH_COMMANDS_BIT_APPLE");
  }
  public static Map<Integer, String> SyncObjectMask() {
    if (SyncObjectMask != null)
      return SyncObjectMask;
    SyncObjectMask = new HashMap<Integer, String>(2);
    SyncObjectMask0();
    return SyncObjectMask;
  }
  private static Map<Integer, String> CopyBufferSubDataTarget;
  private static void CopyBufferSubDataTarget0() {
    CopyBufferSubDataTarget.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    CopyBufferSubDataTarget.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    CopyBufferSubDataTarget.put(GL_QUERY_BUFFER, "GL_QUERY_BUFFER");
    CopyBufferSubDataTarget.put(GL_DISPATCH_INDIRECT_BUFFER, "GL_DISPATCH_INDIRECT_BUFFER");
    CopyBufferSubDataTarget.put(GL_TRANSFORM_FEEDBACK_BUFFER, "GL_TRANSFORM_FEEDBACK_BUFFER");
    CopyBufferSubDataTarget.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    CopyBufferSubDataTarget.put(GL_PIXEL_UNPACK_BUFFER, "GL_PIXEL_UNPACK_BUFFER");
    CopyBufferSubDataTarget.put(GL_ELEMENT_ARRAY_BUFFER, "GL_ELEMENT_ARRAY_BUFFER");
    CopyBufferSubDataTarget.put(GL_PIXEL_PACK_BUFFER, "GL_PIXEL_PACK_BUFFER");
    CopyBufferSubDataTarget.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    CopyBufferSubDataTarget.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    CopyBufferSubDataTarget.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    CopyBufferSubDataTarget.put(GL_ARRAY_BUFFER, "GL_ARRAY_BUFFER");
    CopyBufferSubDataTarget.put(GL_SHADER_STORAGE_BUFFER, "GL_SHADER_STORAGE_BUFFER");
  }
  public static Map<Integer, String> CopyBufferSubDataTarget() {
    if (CopyBufferSubDataTarget != null)
      return CopyBufferSubDataTarget;
    CopyBufferSubDataTarget = new HashMap<Integer, String>(14);
    CopyBufferSubDataTarget0();
    return CopyBufferSubDataTarget;
  }
  private static Map<Integer, String> RenderbufferTarget;
  private static void RenderbufferTarget0() {
    RenderbufferTarget.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
  }
  public static Map<Integer, String> RenderbufferTarget() {
    if (RenderbufferTarget != null)
      return RenderbufferTarget;
    RenderbufferTarget = new HashMap<Integer, String>(1);
    RenderbufferTarget0();
    return RenderbufferTarget;
  }
  private static Map<Integer, String> MaterialFace;
  private static void MaterialFace0() {
    MaterialFace.put(GL_BACK, "GL_BACK");
    MaterialFace.put(GL_FRONT, "GL_FRONT");
    MaterialFace.put(GL_FRONT_AND_BACK, "GL_FRONT_AND_BACK");
  }
  public static Map<Integer, String> MaterialFace() {
    if (MaterialFace != null)
      return MaterialFace;
    MaterialFace = new HashMap<Integer, String>(3);
    MaterialFace0();
    return MaterialFace;
  }
  private static Map<Integer, String> FragmentOpATI;
  private static void FragmentOpATI0() {
  }
  public static Map<Integer, String> FragmentOpATI() {
    if (FragmentOpATI != null)
      return FragmentOpATI;
    FragmentOpATI = new HashMap<Integer, String>(0);
    FragmentOpATI0();
    return FragmentOpATI;
  }
  private static Map<Integer, String> BufferAccessARB;
  private static void BufferAccessARB0() {
    BufferAccessARB.put(GL_WRITE_ONLY, "GL_WRITE_ONLY");
    BufferAccessARB.put(GL_READ_WRITE, "GL_READ_WRITE");
    BufferAccessARB.put(GL_READ_ONLY, "GL_READ_ONLY");
  }
  public static Map<Integer, String> BufferAccessARB() {
    if (BufferAccessARB != null)
      return BufferAccessARB;
    BufferAccessARB = new HashMap<Integer, String>(3);
    BufferAccessARB0();
    return BufferAccessARB;
  }
  private static Map<Integer, String> FfdTargetSGIX;
  private static void FfdTargetSGIX0() {
    FfdTargetSGIX.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    FfdTargetSGIX.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
  }
  public static Map<Integer, String> FfdTargetSGIX() {
    if (FfdTargetSGIX != null)
      return FfdTargetSGIX;
    FfdTargetSGIX = new HashMap<Integer, String>(2);
    FfdTargetSGIX0();
    return FfdTargetSGIX;
  }
  private static Map<Integer, String> GL_EXT_discard_framebuffer;
  private static Map<Integer, String> GL_EXT_discard_framebuffer() {
    if (GL_EXT_discard_framebuffer != null)
      return GL_EXT_discard_framebuffer;
    GL_EXT_discard_framebuffer = new HashMap<Integer, String>(3);
    GL_EXT_discard_framebuffer.put(GL_COLOR_EXT, "GL_COLOR_EXT");
    GL_EXT_discard_framebuffer.put(GL_STENCIL_EXT, "GL_STENCIL_EXT");
    GL_EXT_discard_framebuffer.put(GL_DEPTH_EXT, "GL_DEPTH_EXT");
    return GL_EXT_discard_framebuffer;
  }
  private static Map<Integer, String> GL_QCOM_tiled_rendering;
  private static Map<Integer, String> GL_QCOM_tiled_rendering() {
    if (GL_QCOM_tiled_rendering != null)
      return GL_QCOM_tiled_rendering;
    GL_QCOM_tiled_rendering = new HashMap<Integer, String>(32);
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT0_QCOM, "GL_MULTISAMPLE_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT6_QCOM, "GL_MULTISAMPLE_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT6_QCOM, "GL_COLOR_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT3_QCOM, "GL_STENCIL_BUFFER_BIT3_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT5_QCOM, "GL_DEPTH_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT6_QCOM, "GL_STENCIL_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT3_QCOM, "GL_DEPTH_BUFFER_BIT3_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT0_QCOM, "GL_STENCIL_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT1_QCOM, "GL_COLOR_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT0_QCOM, "GL_DEPTH_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT1_QCOM, "GL_STENCIL_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT7_QCOM, "GL_STENCIL_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT1_QCOM, "GL_MULTISAMPLE_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT5_QCOM, "GL_MULTISAMPLE_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT5_QCOM, "GL_COLOR_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT4_QCOM, "GL_DEPTH_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT7_QCOM, "GL_DEPTH_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT4_QCOM, "GL_STENCIL_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT2_QCOM, "GL_COLOR_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT1_QCOM, "GL_DEPTH_BUFFER_BIT1_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT2_QCOM, "GL_STENCIL_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_STENCIL_BUFFER_BIT5_QCOM, "GL_STENCIL_BUFFER_BIT5_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT2_QCOM, "GL_MULTISAMPLE_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT4_QCOM, "GL_MULTISAMPLE_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT7_QCOM, "GL_MULTISAMPLE_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT4_QCOM, "GL_COLOR_BUFFER_BIT4_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT6_QCOM, "GL_DEPTH_BUFFER_BIT6_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT7_QCOM, "GL_COLOR_BUFFER_BIT7_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT3_QCOM, "GL_COLOR_BUFFER_BIT3_QCOM");
    GL_QCOM_tiled_rendering.put(GL_DEPTH_BUFFER_BIT2_QCOM, "GL_DEPTH_BUFFER_BIT2_QCOM");
    GL_QCOM_tiled_rendering.put(GL_COLOR_BUFFER_BIT0_QCOM, "GL_COLOR_BUFFER_BIT0_QCOM");
    GL_QCOM_tiled_rendering.put(GL_MULTISAMPLE_BUFFER_BIT3_QCOM, "GL_MULTISAMPLE_BUFFER_BIT3_QCOM");
    return GL_QCOM_tiled_rendering;
  }
  private static Map<Integer, String> GL_NV_parameter_buffer_object;
  private static Map<Integer, String> GL_NV_parameter_buffer_object() {
    if (GL_NV_parameter_buffer_object != null)
      return GL_NV_parameter_buffer_object;
    GL_NV_parameter_buffer_object = new HashMap<Integer, String>(5);
    GL_NV_parameter_buffer_object.put(GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV, "GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV");
    GL_NV_parameter_buffer_object.put(GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV, "GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV");
    GL_NV_parameter_buffer_object.put(GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV, "GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_parameter_buffer_object.put(GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV, "GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV");
    GL_NV_parameter_buffer_object.put(GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV, "GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV");
    return GL_NV_parameter_buffer_object;
  }
  private static Map<Integer, String> GL_KHR_robustness;
  private static Map<Integer, String> GL_KHR_robustness() {
    if (GL_KHR_robustness != null)
      return GL_KHR_robustness;
    GL_KHR_robustness = new HashMap<Integer, String>(17);
    GL_KHR_robustness.put(GL_GUILTY_CONTEXT_RESET, "GL_GUILTY_CONTEXT_RESET");
    GL_KHR_robustness.put(GL_RESET_NOTIFICATION_STRATEGY, "GL_RESET_NOTIFICATION_STRATEGY");
    GL_KHR_robustness.put(GL_NO_RESET_NOTIFICATION, "GL_NO_RESET_NOTIFICATION");
    GL_KHR_robustness.put(GL_UNKNOWN_CONTEXT_RESET_KHR, "GL_UNKNOWN_CONTEXT_RESET_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_ROBUST_ACCESS, "GL_CONTEXT_ROBUST_ACCESS");
    GL_KHR_robustness.put(GL_INNOCENT_CONTEXT_RESET, "GL_INNOCENT_CONTEXT_RESET");
    GL_KHR_robustness.put(GL_GUILTY_CONTEXT_RESET_KHR, "GL_GUILTY_CONTEXT_RESET_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_LOST, "GL_CONTEXT_LOST");
    GL_KHR_robustness.put(GL_RESET_NOTIFICATION_STRATEGY_KHR, "GL_RESET_NOTIFICATION_STRATEGY_KHR");
    GL_KHR_robustness.put(GL_LOSE_CONTEXT_ON_RESET_KHR, "GL_LOSE_CONTEXT_ON_RESET_KHR");
    GL_KHR_robustness.put(GL_NO_ERROR, "GL_NO_ERROR");
    GL_KHR_robustness.put(GL_INNOCENT_CONTEXT_RESET_KHR, "GL_INNOCENT_CONTEXT_RESET_KHR");
    GL_KHR_robustness.put(GL_NO_RESET_NOTIFICATION_KHR, "GL_NO_RESET_NOTIFICATION_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_ROBUST_ACCESS_KHR, "GL_CONTEXT_ROBUST_ACCESS_KHR");
    GL_KHR_robustness.put(GL_CONTEXT_LOST_KHR, "GL_CONTEXT_LOST_KHR");
    GL_KHR_robustness.put(GL_UNKNOWN_CONTEXT_RESET, "GL_UNKNOWN_CONTEXT_RESET");
    GL_KHR_robustness.put(GL_LOSE_CONTEXT_ON_RESET, "GL_LOSE_CONTEXT_ON_RESET");
    return GL_KHR_robustness;
  }
  private static Map<Integer, String> GL_SGIX_fragment_lighting;
  private static Map<Integer, String> GL_SGIX_fragment_lighting() {
    if (GL_SGIX_fragment_lighting != null)
      return GL_SGIX_fragment_lighting;
    GL_SGIX_fragment_lighting = new HashMap<Integer, String>(20);
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT6_SGIX, "GL_FRAGMENT_LIGHT6_SGIX");
    GL_SGIX_fragment_lighting.put(GL_MAX_FRAGMENT_LIGHTS_SGIX, "GL_MAX_FRAGMENT_LIGHTS_SGIX");
    GL_SGIX_fragment_lighting.put(GL_LIGHT_ENV_MODE_SGIX, "GL_LIGHT_ENV_MODE_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT2_SGIX, "GL_FRAGMENT_LIGHT2_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT4_SGIX, "GL_FRAGMENT_LIGHT4_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT7_SGIX, "GL_FRAGMENT_LIGHT7_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_COLOR_MATERIAL_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHTING_SGIX, "GL_FRAGMENT_LIGHTING_SGIX");
    GL_SGIX_fragment_lighting.put(GL_MAX_ACTIVE_LIGHTS_SGIX, "GL_MAX_ACTIVE_LIGHTS_SGIX");
    GL_SGIX_fragment_lighting.put(GL_CURRENT_RASTER_NORMAL_SGIX, "GL_CURRENT_RASTER_NORMAL_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT1_SGIX, "GL_FRAGMENT_LIGHT1_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT5_SGIX, "GL_FRAGMENT_LIGHT5_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT0_SGIX, "GL_FRAGMENT_LIGHT0_SGIX");
    GL_SGIX_fragment_lighting.put(GL_FRAGMENT_LIGHT3_SGIX, "GL_FRAGMENT_LIGHT3_SGIX");
    return GL_SGIX_fragment_lighting;
  }
  private static Map<Integer, String> GL_ARB_draw_indirect;
  private static Map<Integer, String> GL_ARB_draw_indirect() {
    if (GL_ARB_draw_indirect != null)
      return GL_ARB_draw_indirect;
    GL_ARB_draw_indirect = new HashMap<Integer, String>(2);
    GL_ARB_draw_indirect.put(GL_DRAW_INDIRECT_BUFFER, "GL_DRAW_INDIRECT_BUFFER");
    GL_ARB_draw_indirect.put(GL_DRAW_INDIRECT_BUFFER_BINDING, "GL_DRAW_INDIRECT_BUFFER_BINDING");
    return GL_ARB_draw_indirect;
  }
  private static Map<Integer, String> GL_NV_sample_locations;
  private static Map<Integer, String> GL_NV_sample_locations() {
    if (GL_NV_sample_locations != null)
      return GL_NV_sample_locations;
    GL_NV_sample_locations = new HashMap<Integer, String>(8);
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_NV, "GL_SAMPLE_LOCATION_NV");
    GL_NV_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_NV, "GL_PROGRAMMABLE_SAMPLE_LOCATION_NV");
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV");
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV");
    GL_NV_sample_locations.put(GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV");
    GL_NV_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV");
    GL_NV_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV");
    GL_NV_sample_locations.put(GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV");
    return GL_NV_sample_locations;
  }
  private static Map<Integer, String> GL_ARB_clear_texture;
  private static Map<Integer, String> GL_ARB_clear_texture() {
    if (GL_ARB_clear_texture != null)
      return GL_ARB_clear_texture;
    GL_ARB_clear_texture = new HashMap<Integer, String>(1);
    GL_ARB_clear_texture.put(GL_CLEAR_TEXTURE, "GL_CLEAR_TEXTURE");
    return GL_ARB_clear_texture;
  }
  private static Map<Integer, String> GL_OES_point_size_array;
  private static Map<Integer, String> GL_OES_point_size_array() {
    if (GL_OES_point_size_array != null)
      return GL_OES_point_size_array;
    GL_OES_point_size_array = new HashMap<Integer, String>(5);
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_STRIDE_OES, "GL_POINT_SIZE_ARRAY_STRIDE_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_TYPE_OES, "GL_POINT_SIZE_ARRAY_TYPE_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES, "GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_OES, "GL_POINT_SIZE_ARRAY_OES");
    GL_OES_point_size_array.put(GL_POINT_SIZE_ARRAY_POINTER_OES, "GL_POINT_SIZE_ARRAY_POINTER_OES");
    return GL_OES_point_size_array;
  }
  private static Map<Integer, String> GL_EXT_draw_buffers_indexed;
  private static Map<Integer, String> GL_EXT_draw_buffers_indexed() {
    if (GL_EXT_draw_buffers_indexed != null)
      return GL_EXT_draw_buffers_indexed;
    GL_EXT_draw_buffers_indexed = new HashMap<Integer, String>(28);
    GL_EXT_draw_buffers_indexed.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    GL_EXT_draw_buffers_indexed.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_EQUATION_ALPHA, "GL_BLEND_EQUATION_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_SRC_RGB, "GL_BLEND_SRC_RGB");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_DST_ALPHA, "GL_BLEND_DST_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_DST_COLOR, "GL_DST_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_MIN, "GL_MIN");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_SRC_ALPHA, "GL_BLEND_SRC_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_EQUATION_RGB, "GL_BLEND_EQUATION_RGB");
    GL_EXT_draw_buffers_indexed.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND_DST_RGB, "GL_BLEND_DST_RGB");
    GL_EXT_draw_buffers_indexed.put(GL_MAX, "GL_MAX");
    GL_EXT_draw_buffers_indexed.put(GL_ZERO, "GL_ZERO");
    GL_EXT_draw_buffers_indexed.put(GL_ONE, "GL_ONE");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    GL_EXT_draw_buffers_indexed.put(GL_BLEND, "GL_BLEND");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    GL_EXT_draw_buffers_indexed.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    GL_EXT_draw_buffers_indexed.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
    return GL_EXT_draw_buffers_indexed;
  }
  private static Map<Integer, String> GL_NV_conditional_render;
  private static Map<Integer, String> GL_NV_conditional_render() {
    if (GL_NV_conditional_render != null)
      return GL_NV_conditional_render;
    GL_NV_conditional_render = new HashMap<Integer, String>(4);
    GL_NV_conditional_render.put(GL_QUERY_WAIT_NV, "GL_QUERY_WAIT_NV");
    GL_NV_conditional_render.put(GL_QUERY_BY_REGION_WAIT_NV, "GL_QUERY_BY_REGION_WAIT_NV");
    GL_NV_conditional_render.put(GL_QUERY_NO_WAIT_NV, "GL_QUERY_NO_WAIT_NV");
    GL_NV_conditional_render.put(GL_QUERY_BY_REGION_NO_WAIT_NV, "GL_QUERY_BY_REGION_NO_WAIT_NV");
    return GL_NV_conditional_render;
  }
  private static Map<Integer, String> GL_NV_point_sprite;
  private static Map<Integer, String> GL_NV_point_sprite() {
    if (GL_NV_point_sprite != null)
      return GL_NV_point_sprite;
    GL_NV_point_sprite = new HashMap<Integer, String>(3);
    GL_NV_point_sprite.put(GL_POINT_SPRITE_R_MODE_NV, "GL_POINT_SPRITE_R_MODE_NV");
    GL_NV_point_sprite.put(GL_POINT_SPRITE_NV, "GL_POINT_SPRITE_NV");
    GL_NV_point_sprite.put(GL_COORD_REPLACE_NV, "GL_COORD_REPLACE_NV");
    return GL_NV_point_sprite;
  }
  private static Map<Integer, String> GL_ATI_fragment_shader;
  private static Map<Integer, String> GL_ATI_fragment_shader() {
    if (GL_ATI_fragment_shader != null)
      return GL_ATI_fragment_shader;
    GL_ATI_fragment_shader = new HashMap<Integer, String>(104);
    GL_ATI_fragment_shader.put(GL_SATURATE_BIT_ATI, "GL_SATURATE_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_25_ATI, "GL_REG_25_ATI");
    GL_ATI_fragment_shader.put(GL_CON_21_ATI, "GL_CON_21_ATI");
    GL_ATI_fragment_shader.put(GL_EIGHTH_BIT_ATI, "GL_EIGHTH_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_5_ATI, "GL_REG_5_ATI");
    GL_ATI_fragment_shader.put(GL_REG_27_ATI, "GL_REG_27_ATI");
    GL_ATI_fragment_shader.put(GL_CON_0_ATI, "GL_CON_0_ATI");
    GL_ATI_fragment_shader.put(GL_HALF_BIT_ATI, "GL_HALF_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_31_ATI, "GL_CON_31_ATI");
    GL_ATI_fragment_shader.put(GL_CON_9_ATI, "GL_CON_9_ATI");
    GL_ATI_fragment_shader.put(GL_CON_13_ATI, "GL_CON_13_ATI");
    GL_ATI_fragment_shader.put(GL_REG_19_ATI, "GL_REG_19_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STQ_DQ_ATI, "GL_SWIZZLE_STQ_DQ_ATI");
    GL_ATI_fragment_shader.put(GL_REG_10_ATI, "GL_REG_10_ATI");
    GL_ATI_fragment_shader.put(GL_REG_15_ATI, "GL_REG_15_ATI");
    GL_ATI_fragment_shader.put(GL_COLOR_ALPHA_PAIRING_ATI, "GL_COLOR_ALPHA_PAIRING_ATI");
    GL_ATI_fragment_shader.put(GL_RED_BIT_ATI, "GL_RED_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_23_ATI, "GL_REG_23_ATI");
    GL_ATI_fragment_shader.put(GL_COMP_BIT_ATI, "GL_COMP_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_REG_29_ATI, "GL_REG_29_ATI");
    GL_ATI_fragment_shader.put(GL_CON_23_ATI, "GL_CON_23_ATI");
    GL_ATI_fragment_shader.put(GL_CON_25_ATI, "GL_CON_25_ATI");
    GL_ATI_fragment_shader.put(GL_FRAGMENT_SHADER_ATI, "GL_FRAGMENT_SHADER_ATI");
    GL_ATI_fragment_shader.put(GL_CON_7_ATI, "GL_CON_7_ATI");
    GL_ATI_fragment_shader.put(GL_DOT3_ATI, "GL_DOT3_ATI");
    GL_ATI_fragment_shader.put(GL_REG_7_ATI, "GL_REG_7_ATI");
    GL_ATI_fragment_shader.put(GL_DOT2_ADD_ATI, "GL_DOT2_ADD_ATI");
    GL_ATI_fragment_shader.put(GL_REG_17_ATI, "GL_REG_17_ATI");
    GL_ATI_fragment_shader.put(GL_CON_11_ATI, "GL_CON_11_ATI");
    GL_ATI_fragment_shader.put(GL_SECONDARY_INTERPOLATOR_ATI, "GL_SECONDARY_INTERPOLATOR_ATI");
    GL_ATI_fragment_shader.put(GL_REG_12_ATI, "GL_REG_12_ATI");
    GL_ATI_fragment_shader.put(GL_REG_9_ATI, "GL_REG_9_ATI");
    GL_ATI_fragment_shader.put(GL_CON_18_ATI, "GL_CON_18_ATI");
    GL_ATI_fragment_shader.put(GL_CON_27_ATI, "GL_CON_27_ATI");
    GL_ATI_fragment_shader.put(GL_REG_20_ATI, "GL_REG_20_ATI");
    GL_ATI_fragment_shader.put(GL_REG_0_ATI, "GL_REG_0_ATI");
    GL_ATI_fragment_shader.put(GL_8X_BIT_ATI, "GL_8X_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_GREEN_BIT_ATI, "GL_GREEN_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_QUARTER_BIT_ATI, "GL_QUARTER_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_5_ATI, "GL_CON_5_ATI");
    GL_ATI_fragment_shader.put(GL_CON_29_ATI, "GL_CON_29_ATI");
    GL_ATI_fragment_shader.put(GL_CON_16_ATI, "GL_CON_16_ATI");
    GL_ATI_fragment_shader.put(GL_MOV_ATI, "GL_MOV_ATI");
    GL_ATI_fragment_shader.put(GL_NEGATE_BIT_ATI, "GL_NEGATE_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_PASSES_ATI, "GL_NUM_PASSES_ATI");
    GL_ATI_fragment_shader.put(GL_REG_31_ATI, "GL_REG_31_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_FRAGMENT_REGISTERS_ATI, "GL_NUM_FRAGMENT_REGISTERS_ATI");
    GL_ATI_fragment_shader.put(GL_REG_14_ATI, "GL_REG_14_ATI");
    GL_ATI_fragment_shader.put(GL_REG_2_ATI, "GL_REG_2_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STR_ATI, "GL_SWIZZLE_STR_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_FRAGMENT_CONSTANTS_ATI, "GL_NUM_FRAGMENT_CONSTANTS_ATI");
    GL_ATI_fragment_shader.put(GL_BLUE_BIT_ATI, "GL_BLUE_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_20_ATI, "GL_CON_20_ATI");
    GL_ATI_fragment_shader.put(GL_CON_3_ATI, "GL_CON_3_ATI");
    GL_ATI_fragment_shader.put(GL_CON_1_ATI, "GL_CON_1_ATI");
    GL_ATI_fragment_shader.put(GL_REG_4_ATI, "GL_REG_4_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_LOOPBACK_COMPONENTS_ATI, "GL_NUM_LOOPBACK_COMPONENTS_ATI");
    GL_ATI_fragment_shader.put(GL_REG_26_ATI, "GL_REG_26_ATI");
    GL_ATI_fragment_shader.put(GL_CON_30_ATI, "GL_CON_30_ATI");
    GL_ATI_fragment_shader.put(GL_4X_BIT_ATI, "GL_4X_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_14_ATI, "GL_CON_14_ATI");
    GL_ATI_fragment_shader.put(GL_REG_18_ATI, "GL_REG_18_ATI");
    GL_ATI_fragment_shader.put(GL_CND_ATI, "GL_CND_ATI");
    GL_ATI_fragment_shader.put(GL_REG_24_ATI, "GL_REG_24_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_INSTRUCTIONS_TOTAL_ATI, "GL_NUM_INSTRUCTIONS_TOTAL_ATI");
    GL_ATI_fragment_shader.put(GL_CON_22_ATI, "GL_CON_22_ATI");
    GL_ATI_fragment_shader.put(GL_CON_24_ATI, "GL_CON_24_ATI");
    GL_ATI_fragment_shader.put(GL_DOT4_ATI, "GL_DOT4_ATI");
    GL_ATI_fragment_shader.put(GL_REG_28_ATI, "GL_REG_28_ATI");
    GL_ATI_fragment_shader.put(GL_REG_6_ATI, "GL_REG_6_ATI");
    GL_ATI_fragment_shader.put(GL_CON_8_ATI, "GL_CON_8_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STR_DR_ATI, "GL_SWIZZLE_STR_DR_ATI");
    GL_ATI_fragment_shader.put(GL_CON_10_ATI, "GL_CON_10_ATI");
    GL_ATI_fragment_shader.put(GL_REG_22_ATI, "GL_REG_22_ATI");
    GL_ATI_fragment_shader.put(GL_REG_16_ATI, "GL_REG_16_ATI");
    GL_ATI_fragment_shader.put(GL_CON_12_ATI, "GL_CON_12_ATI");
    GL_ATI_fragment_shader.put(GL_REG_8_ATI, "GL_REG_8_ATI");
    GL_ATI_fragment_shader.put(GL_CON_19_ATI, "GL_CON_19_ATI");
    GL_ATI_fragment_shader.put(GL_LERP_ATI, "GL_LERP_ATI");
    GL_ATI_fragment_shader.put(GL_SUB_ATI, "GL_SUB_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI, "GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI");
    GL_ATI_fragment_shader.put(GL_REG_21_ATI, "GL_REG_21_ATI");
    GL_ATI_fragment_shader.put(GL_BIAS_BIT_ATI, "GL_BIAS_BIT_ATI");
    GL_ATI_fragment_shader.put(GL_CON_6_ATI, "GL_CON_6_ATI");
    GL_ATI_fragment_shader.put(GL_CON_17_ATI, "GL_CON_17_ATI");
    GL_ATI_fragment_shader.put(GL_REG_11_ATI, "GL_REG_11_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STRQ_ATI, "GL_SWIZZLE_STRQ_ATI");
    GL_ATI_fragment_shader.put(GL_MAD_ATI, "GL_MAD_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STRQ_DQ_ATI, "GL_SWIZZLE_STRQ_DQ_ATI");
    GL_ATI_fragment_shader.put(GL_REG_1_ATI, "GL_REG_1_ATI");
    GL_ATI_fragment_shader.put(GL_CON_26_ATI, "GL_CON_26_ATI");
    GL_ATI_fragment_shader.put(GL_SWIZZLE_STQ_ATI, "GL_SWIZZLE_STQ_ATI");
    GL_ATI_fragment_shader.put(GL_MUL_ATI, "GL_MUL_ATI");
    GL_ATI_fragment_shader.put(GL_CND0_ATI, "GL_CND0_ATI");
    GL_ATI_fragment_shader.put(GL_CON_4_ATI, "GL_CON_4_ATI");
    GL_ATI_fragment_shader.put(GL_NUM_INSTRUCTIONS_PER_PASS_ATI, "GL_NUM_INSTRUCTIONS_PER_PASS_ATI");
    GL_ATI_fragment_shader.put(GL_CON_2_ATI, "GL_CON_2_ATI");
    GL_ATI_fragment_shader.put(GL_REG_13_ATI, "GL_REG_13_ATI");
    GL_ATI_fragment_shader.put(GL_ADD_ATI, "GL_ADD_ATI");
    GL_ATI_fragment_shader.put(GL_CON_15_ATI, "GL_CON_15_ATI");
    GL_ATI_fragment_shader.put(GL_REG_3_ATI, "GL_REG_3_ATI");
    GL_ATI_fragment_shader.put(GL_REG_30_ATI, "GL_REG_30_ATI");
    GL_ATI_fragment_shader.put(GL_CON_28_ATI, "GL_CON_28_ATI");
    GL_ATI_fragment_shader.put(GL_2X_BIT_ATI, "GL_2X_BIT_ATI");
    return GL_ATI_fragment_shader;
  }
  private static Map<Integer, String> GL_APPLE_flush_buffer_range;
  private static Map<Integer, String> GL_APPLE_flush_buffer_range() {
    if (GL_APPLE_flush_buffer_range != null)
      return GL_APPLE_flush_buffer_range;
    GL_APPLE_flush_buffer_range = new HashMap<Integer, String>(2);
    GL_APPLE_flush_buffer_range.put(GL_BUFFER_FLUSHING_UNMAP_APPLE, "GL_BUFFER_FLUSHING_UNMAP_APPLE");
    GL_APPLE_flush_buffer_range.put(GL_BUFFER_SERIALIZED_MODIFY_APPLE, "GL_BUFFER_SERIALIZED_MODIFY_APPLE");
    return GL_APPLE_flush_buffer_range;
  }
  private static Map<Integer, String> GL_OES_byte_coordinates;
  private static Map<Integer, String> GL_OES_byte_coordinates() {
    if (GL_OES_byte_coordinates != null)
      return GL_OES_byte_coordinates;
    GL_OES_byte_coordinates = new HashMap<Integer, String>(1);
    GL_OES_byte_coordinates.put(GL_BYTE, "GL_BYTE");
    return GL_OES_byte_coordinates;
  }
  private static Map<Integer, String> GL_ARB_sync;
  private static Map<Integer, String> GL_ARB_sync() {
    if (GL_ARB_sync != null)
      return GL_ARB_sync;
    GL_ARB_sync = new HashMap<Integer, String>(15);
    GL_ARB_sync.put(GL_SYNC_STATUS, "GL_SYNC_STATUS");
    GL_ARB_sync.put(GL_MAX_SERVER_WAIT_TIMEOUT, "GL_MAX_SERVER_WAIT_TIMEOUT");
    GL_ARB_sync.put(GL_TIMEOUT_EXPIRED, "GL_TIMEOUT_EXPIRED");
    GL_ARB_sync.put(GL_SYNC_FENCE, "GL_SYNC_FENCE");
    GL_ARB_sync.put(GL_OBJECT_TYPE, "GL_OBJECT_TYPE");
    GL_ARB_sync.put(GL_ALREADY_SIGNALED, "GL_ALREADY_SIGNALED");
    GL_ARB_sync.put(GL_UNSIGNALED, "GL_UNSIGNALED");
    GL_ARB_sync.put(GL_SYNC_GPU_COMMANDS_COMPLETE, "GL_SYNC_GPU_COMMANDS_COMPLETE");
    GL_ARB_sync.put(GL_SYNC_FLUSH_COMMANDS_BIT, "GL_SYNC_FLUSH_COMMANDS_BIT");
    GL_ARB_sync.put(GL_SYNC_FLAGS, "GL_SYNC_FLAGS");
    GL_ARB_sync.put(GL_CONDITION_SATISFIED, "GL_CONDITION_SATISFIED");
    GL_ARB_sync.put(GL_SYNC_CONDITION, "GL_SYNC_CONDITION");
    GL_ARB_sync.put(GL_SIGNALED, "GL_SIGNALED");
    GL_ARB_sync.put(GL_WAIT_FAILED, "GL_WAIT_FAILED");
    GL_ARB_sync.put(GL_TIMEOUT_IGNORED, "GL_TIMEOUT_IGNORED");
    return GL_ARB_sync;
  }
  private static Map<Integer, String> GL_NV_evaluators;
  private static Map<Integer, String> GL_NV_evaluators() {
    if (GL_NV_evaluators != null)
      return GL_NV_evaluators;
    GL_NV_evaluators = new HashMap<Integer, String>(24);
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB11_NV, "GL_EVAL_VERTEX_ATTRIB11_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB14_NV, "GL_EVAL_VERTEX_ATTRIB14_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB12_NV, "GL_EVAL_VERTEX_ATTRIB12_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB13_NV, "GL_EVAL_VERTEX_ATTRIB13_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB0_NV, "GL_EVAL_VERTEX_ATTRIB0_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB10_NV, "GL_EVAL_VERTEX_ATTRIB10_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB1_NV, "GL_EVAL_VERTEX_ATTRIB1_NV");
    GL_NV_evaluators.put(GL_MAP_ATTRIB_V_ORDER_NV, "GL_MAP_ATTRIB_V_ORDER_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB3_NV, "GL_EVAL_VERTEX_ATTRIB3_NV");
    GL_NV_evaluators.put(GL_MAP_ATTRIB_U_ORDER_NV, "GL_MAP_ATTRIB_U_ORDER_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB2_NV, "GL_EVAL_VERTEX_ATTRIB2_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB15_NV, "GL_EVAL_VERTEX_ATTRIB15_NV");
    GL_NV_evaluators.put(GL_EVAL_FRACTIONAL_TESSELLATION_NV, "GL_EVAL_FRACTIONAL_TESSELLATION_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB8_NV, "GL_EVAL_VERTEX_ATTRIB8_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB9_NV, "GL_EVAL_VERTEX_ATTRIB9_NV");
    GL_NV_evaluators.put(GL_EVAL_2D_NV, "GL_EVAL_2D_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB6_NV, "GL_EVAL_VERTEX_ATTRIB6_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB4_NV, "GL_EVAL_VERTEX_ATTRIB4_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB7_NV, "GL_EVAL_VERTEX_ATTRIB7_NV");
    GL_NV_evaluators.put(GL_MAX_MAP_TESSELLATION_NV, "GL_MAX_MAP_TESSELLATION_NV");
    GL_NV_evaluators.put(GL_MAX_RATIONAL_EVAL_ORDER_NV, "GL_MAX_RATIONAL_EVAL_ORDER_NV");
    GL_NV_evaluators.put(GL_EVAL_VERTEX_ATTRIB5_NV, "GL_EVAL_VERTEX_ATTRIB5_NV");
    GL_NV_evaluators.put(GL_EVAL_TRIANGULAR_2D_NV, "GL_EVAL_TRIANGULAR_2D_NV");
    GL_NV_evaluators.put(GL_MAP_TESSELLATION_NV, "GL_MAP_TESSELLATION_NV");
    return GL_NV_evaluators;
  }
  private static Map<Integer, String> GL_EXT_semaphore;
  private static Map<Integer, String> GL_EXT_semaphore() {
    if (GL_EXT_semaphore != null)
      return GL_EXT_semaphore;
    GL_EXT_semaphore = new HashMap<Integer, String>(13);
    GL_EXT_semaphore.put(GL_LAYOUT_SHADER_READ_ONLY_EXT, "GL_LAYOUT_SHADER_READ_ONLY_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_TRANSFER_SRC_EXT, "GL_LAYOUT_TRANSFER_SRC_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT, "GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_GENERAL_EXT, "GL_LAYOUT_GENERAL_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT, "GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_COLOR_ATTACHMENT_EXT, "GL_LAYOUT_COLOR_ATTACHMENT_EXT");
    GL_EXT_semaphore.put(GL_DEVICE_UUID_EXT, "GL_DEVICE_UUID_EXT");
    GL_EXT_semaphore.put(GL_NUM_DEVICE_UUIDS_EXT, "GL_NUM_DEVICE_UUIDS_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_TRANSFER_DST_EXT, "GL_LAYOUT_TRANSFER_DST_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT, "GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT");
    GL_EXT_semaphore.put(GL_DRIVER_UUID_EXT, "GL_DRIVER_UUID_EXT");
    GL_EXT_semaphore.put(GL_UUID_SIZE_EXT, "GL_UUID_SIZE_EXT");
    GL_EXT_semaphore.put(GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT, "GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT");
    return GL_EXT_semaphore;
  }
  private static Map<Integer, String> GL_EXT_vertex_shader;
  private static Map<Integer, String> GL_EXT_vertex_shader() {
    if (GL_EXT_vertex_shader != null)
      return GL_EXT_vertex_shader;
    GL_EXT_vertex_shader = new HashMap<Integer, String>(110);
    GL_EXT_vertex_shader.put(GL_SCALAR_EXT, "GL_SCALAR_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD10_EXT, "GL_OUTPUT_TEXTURE_COORD10_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD5_EXT, "GL_OUTPUT_TEXTURE_COORD5_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD29_EXT, "GL_OUTPUT_TEXTURE_COORD29_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_POINTER_EXT, "GL_VARIANT_ARRAY_POINTER_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_INSTRUCTIONS_EXT, "GL_VERTEX_SHADER_INSTRUCTIONS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_CROSS_PRODUCT_EXT, "GL_OP_CROSS_PRODUCT_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD19_EXT, "GL_OUTPUT_TEXTURE_COORD19_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD20_EXT, "GL_OUTPUT_TEXTURE_COORD20_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_VARIANTS_EXT, "GL_MAX_VERTEX_SHADER_VARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MUL_EXT, "GL_OP_MUL_EXT");
    GL_EXT_vertex_shader.put(GL_NORMALIZED_RANGE_EXT, "GL_NORMALIZED_RANGE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_LOG_BASE_2_EXT, "GL_OP_LOG_BASE_2_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD3_EXT, "GL_OUTPUT_TEXTURE_COORD3_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD30_EXT, "GL_OUTPUT_TEXTURE_COORD30_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD27_EXT, "GL_OUTPUT_TEXTURE_COORD27_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_X_EXT, "GL_NEGATIVE_X_EXT");
    GL_EXT_vertex_shader.put(GL_OP_FRAC_EXT, "GL_OP_FRAC_EXT");
    GL_EXT_vertex_shader.put(GL_X_EXT, "GL_X_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD14_EXT, "GL_OUTPUT_TEXTURE_COORD14_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD12_EXT, "GL_OUTPUT_TEXTURE_COORD12_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD25_EXT, "GL_OUTPUT_TEXTURE_COORD25_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_Z_EXT, "GL_NEGATIVE_Z_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_LOCALS_EXT, "GL_VERTEX_SHADER_LOCALS_EXT");
    GL_EXT_vertex_shader.put(GL_MVP_MATRIX_EXT, "GL_MVP_MATRIX_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_CONSTANT_VALUE_EXT, "GL_LOCAL_CONSTANT_VALUE_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD24_EXT, "GL_OUTPUT_TEXTURE_COORD24_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_LOCALS_EXT, "GL_MAX_VERTEX_SHADER_LOCALS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_NEGATE_EXT, "GL_OP_NEGATE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_RECIP_SQRT_EXT, "GL_OP_RECIP_SQRT_EXT");
    GL_EXT_vertex_shader.put(GL_OP_DOT4_EXT, "GL_OP_DOT4_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD16_EXT, "GL_OUTPUT_TEXTURE_COORD16_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_INVARIANTS_EXT, "GL_VERTEX_SHADER_INVARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_ZERO_EXT, "GL_ZERO_EXT");
    GL_EXT_vertex_shader.put(GL_INVARIANT_EXT, "GL_INVARIANT_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_CONSTANT_EXT, "GL_LOCAL_CONSTANT_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_EXT, "GL_VERTEX_SHADER_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_COLOR0_EXT, "GL_OUTPUT_COLOR0_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_TYPE_EXT, "GL_VARIANT_ARRAY_TYPE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_ROUND_EXT, "GL_OP_ROUND_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_W_EXT, "GL_NEGATIVE_W_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD2_EXT, "GL_OUTPUT_TEXTURE_COORD2_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD18_EXT, "GL_OUTPUT_TEXTURE_COORD18_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MIN_EXT, "GL_OP_MIN_EXT");
    GL_EXT_vertex_shader.put(GL_OP_SET_GE_EXT, "GL_OP_SET_GE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_SET_LT_EXT, "GL_OP_SET_LT_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD7_EXT, "GL_OUTPUT_TEXTURE_COORD7_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD9_EXT, "GL_OUTPUT_TEXTURE_COORD9_EXT");
    GL_EXT_vertex_shader.put(GL_ONE_EXT, "GL_ONE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_RECIP_EXT, "GL_OP_RECIP_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD0_EXT, "GL_OUTPUT_TEXTURE_COORD0_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD22_EXT, "GL_OUTPUT_TEXTURE_COORD22_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MAX_EXT, "GL_OP_MAX_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_VARIANTS_EXT, "GL_VERTEX_SHADER_VARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_EXT, "GL_VARIANT_EXT");
    GL_EXT_vertex_shader.put(GL_OP_ADD_EXT, "GL_OP_ADD_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_OPTIMIZED_EXT, "GL_VERTEX_SHADER_OPTIMIZED_EXT");
    GL_EXT_vertex_shader.put(GL_OP_POWER_EXT, "GL_OP_POWER_EXT");
    GL_EXT_vertex_shader.put(GL_OP_SUB_EXT, "GL_OP_SUB_EXT");
    GL_EXT_vertex_shader.put(GL_OP_CLAMP_EXT, "GL_OP_CLAMP_EXT");
    GL_EXT_vertex_shader.put(GL_CURRENT_VERTEX_EXT, "GL_CURRENT_VERTEX_EXT");
    GL_EXT_vertex_shader.put(GL_VECTOR_EXT, "GL_VECTOR_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_CONSTANT_DATATYPE_EXT, "GL_LOCAL_CONSTANT_DATATYPE_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD6_EXT, "GL_OUTPUT_TEXTURE_COORD6_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD11_EXT, "GL_OUTPUT_TEXTURE_COORD11_EXT");
    GL_EXT_vertex_shader.put(GL_OP_FLOOR_EXT, "GL_OP_FLOOR_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD28_EXT, "GL_OUTPUT_TEXTURE_COORD28_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_STRIDE_EXT, "GL_VARIANT_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_Y_EXT, "GL_NEGATIVE_Y_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_INVARIANTS_EXT, "GL_MAX_VERTEX_SHADER_INVARIANTS_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_DATATYPE_EXT, "GL_VARIANT_DATATYPE_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_VALUE_EXT, "GL_VARIANT_VALUE_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD31_EXT, "GL_OUTPUT_TEXTURE_COORD31_EXT");
    GL_EXT_vertex_shader.put(GL_INVARIANT_VALUE_EXT, "GL_INVARIANT_VALUE_EXT");
    GL_EXT_vertex_shader.put(GL_Y_EXT, "GL_Y_EXT");
    GL_EXT_vertex_shader.put(GL_MATRIX_EXT, "GL_MATRIX_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD26_EXT, "GL_OUTPUT_TEXTURE_COORD26_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD13_EXT, "GL_OUTPUT_TEXTURE_COORD13_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD4_EXT, "GL_OUTPUT_TEXTURE_COORD4_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_COLOR1_EXT, "GL_OUTPUT_COLOR1_EXT");
    GL_EXT_vertex_shader.put(GL_INVARIANT_DATATYPE_EXT, "GL_INVARIANT_DATATYPE_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_BINDING_EXT, "GL_VERTEX_SHADER_BINDING_EXT");
    GL_EXT_vertex_shader.put(GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT, "GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MULTIPLY_MATRIX_EXT, "GL_OP_MULTIPLY_MATRIX_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT, "GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT");
    GL_EXT_vertex_shader.put(GL_Z_EXT, "GL_Z_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD1_EXT, "GL_OUTPUT_TEXTURE_COORD1_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD23_EXT, "GL_OUTPUT_TEXTURE_COORD23_EXT");
    GL_EXT_vertex_shader.put(GL_OP_INDEX_EXT, "GL_OP_INDEX_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD15_EXT, "GL_OUTPUT_TEXTURE_COORD15_EXT");
    GL_EXT_vertex_shader.put(GL_NEGATIVE_ONE_EXT, "GL_NEGATIVE_ONE_EXT");
    GL_EXT_vertex_shader.put(GL_OP_DOT3_EXT, "GL_OP_DOT3_EXT");
    GL_EXT_vertex_shader.put(GL_W_EXT, "GL_W_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD8_EXT, "GL_OUTPUT_TEXTURE_COORD8_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD21_EXT, "GL_OUTPUT_TEXTURE_COORD21_EXT");
    GL_EXT_vertex_shader.put(GL_OP_EXP_BASE_2_EXT, "GL_OP_EXP_BASE_2_EXT");
    GL_EXT_vertex_shader.put(GL_VARIANT_ARRAY_EXT, "GL_VARIANT_ARRAY_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_VERTEX_EXT, "GL_OUTPUT_VERTEX_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_TEXTURE_COORD17_EXT, "GL_OUTPUT_TEXTURE_COORD17_EXT");
    GL_EXT_vertex_shader.put(GL_LOCAL_EXT, "GL_LOCAL_EXT");
    GL_EXT_vertex_shader.put(GL_OUTPUT_FOG_EXT, "GL_OUTPUT_FOG_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MOV_EXT, "GL_OP_MOV_EXT");
    GL_EXT_vertex_shader.put(GL_FULL_RANGE_EXT, "GL_FULL_RANGE_EXT");
    GL_EXT_vertex_shader.put(GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT, "GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT");
    GL_EXT_vertex_shader.put(GL_OP_MADD_EXT, "GL_OP_MADD_EXT");
    return GL_EXT_vertex_shader;
  }
  private static Map<Integer, String> GL_NV_transform_feedback;
  private static Map<Integer, String> GL_NV_transform_feedback() {
    if (GL_NV_transform_feedback != null)
      return GL_NV_transform_feedback;
    GL_NV_transform_feedback = new HashMap<Integer, String>(31);
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV");
    GL_NV_transform_feedback.put(GL_PRIMITIVES_GENERATED_NV, "GL_PRIMITIVES_GENERATED_NV");
    GL_NV_transform_feedback.put(GL_RASTERIZER_DISCARD_NV, "GL_RASTERIZER_DISCARD_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS2_NV, "GL_SKIP_COMPONENTS2_NV");
    GL_NV_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_START_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_START_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS4_NV, "GL_SKIP_COMPONENTS4_NV");
    GL_NV_transform_feedback.put(GL_CLIP_DISTANCE_NV, "GL_CLIP_DISTANCE_NV");
    GL_NV_transform_feedback.put(GL_BACK_PRIMARY_COLOR_NV, "GL_BACK_PRIMARY_COLOR_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_RECORD_NV, "GL_TRANSFORM_FEEDBACK_RECORD_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_ATTRIBS_NV, "GL_TRANSFORM_FEEDBACK_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_VERTEX_ID_NV, "GL_VERTEX_ID_NV");
    GL_NV_transform_feedback.put(GL_INTERLEAVED_ATTRIBS_NV, "GL_INTERLEAVED_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_TEXTURE_COORD_NV, "GL_TEXTURE_COORD_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV");
    GL_NV_transform_feedback.put(GL_BACK_SECONDARY_COLOR_NV, "GL_BACK_SECONDARY_COLOR_NV");
    GL_NV_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS1_NV, "GL_SKIP_COMPONENTS1_NV");
    GL_NV_transform_feedback.put(GL_ACTIVE_VARYING_MAX_LENGTH_NV, "GL_ACTIVE_VARYING_MAX_LENGTH_NV");
    GL_NV_transform_feedback.put(GL_SKIP_COMPONENTS3_NV, "GL_SKIP_COMPONENTS3_NV");
    GL_NV_transform_feedback.put(GL_SEPARATE_ATTRIBS_NV, "GL_SEPARATE_ATTRIBS_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_VARYINGS_NV, "GL_TRANSFORM_FEEDBACK_VARYINGS_NV");
    GL_NV_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV");
    GL_NV_transform_feedback.put(GL_PRIMITIVE_ID_NV, "GL_PRIMITIVE_ID_NV");
    GL_NV_transform_feedback.put(GL_NEXT_BUFFER_NV, "GL_NEXT_BUFFER_NV");
    GL_NV_transform_feedback.put(GL_LAYER_NV, "GL_LAYER_NV");
    GL_NV_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_NV");
    GL_NV_transform_feedback.put(GL_ACTIVE_VARYINGS_NV, "GL_ACTIVE_VARYINGS_NV");
    GL_NV_transform_feedback.put(GL_GENERIC_ATTRIB_NV, "GL_GENERIC_ATTRIB_NV");
    return GL_NV_transform_feedback;
  }
  private static Map<Integer, String> GL_EXT_transform_feedback;
  private static Map<Integer, String> GL_EXT_transform_feedback() {
    if (GL_EXT_transform_feedback != null)
      return GL_EXT_transform_feedback;
    GL_EXT_transform_feedback = new HashMap<Integer, String>(15);
    GL_EXT_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT");
    GL_EXT_transform_feedback.put(GL_SEPARATE_ATTRIBS_EXT, "GL_SEPARATE_ATTRIBS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT");
    GL_EXT_transform_feedback.put(GL_INTERLEAVED_ATTRIBS_EXT, "GL_INTERLEAVED_ATTRIBS_EXT");
    GL_EXT_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_VARYINGS_EXT, "GL_TRANSFORM_FEEDBACK_VARYINGS_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT");
    GL_EXT_transform_feedback.put(GL_PRIMITIVES_GENERATED_EXT, "GL_PRIMITIVES_GENERATED_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_EXT");
    GL_EXT_transform_feedback.put(GL_RASTERIZER_DISCARD_EXT, "GL_RASTERIZER_DISCARD_EXT");
    GL_EXT_transform_feedback.put(GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT, "GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT");
    GL_EXT_transform_feedback.put(GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT");
    return GL_EXT_transform_feedback;
  }
  private static Map<Integer, String> GL_EXT_debug_label;
  private static Map<Integer, String> GL_EXT_debug_label() {
    if (GL_EXT_debug_label != null)
      return GL_EXT_debug_label;
    GL_EXT_debug_label = new HashMap<Integer, String>(8);
    GL_EXT_debug_label.put(GL_PROGRAM_PIPELINE_OBJECT_EXT, "GL_PROGRAM_PIPELINE_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_BUFFER_OBJECT_EXT, "GL_BUFFER_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_PROGRAM_OBJECT_EXT, "GL_PROGRAM_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    GL_EXT_debug_label.put(GL_VERTEX_ARRAY_OBJECT_EXT, "GL_VERTEX_ARRAY_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_SHADER_OBJECT_EXT, "GL_SHADER_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_QUERY_OBJECT_EXT, "GL_QUERY_OBJECT_EXT");
    GL_EXT_debug_label.put(GL_SAMPLER, "GL_SAMPLER");
    return GL_EXT_debug_label;
  }
  private static Map<Integer, String> GL_ARB_vertex_type_2_10_10_10_rev;
  private static Map<Integer, String> GL_ARB_vertex_type_2_10_10_10_rev() {
    if (GL_ARB_vertex_type_2_10_10_10_rev != null)
      return GL_ARB_vertex_type_2_10_10_10_rev;
    GL_ARB_vertex_type_2_10_10_10_rev = new HashMap<Integer, String>(2);
    GL_ARB_vertex_type_2_10_10_10_rev.put(GL_INT_2_10_10_10_REV, "GL_INT_2_10_10_10_REV");
    GL_ARB_vertex_type_2_10_10_10_rev.put(GL_UNSIGNED_INT_2_10_10_10_REV, "GL_UNSIGNED_INT_2_10_10_10_REV");
    return GL_ARB_vertex_type_2_10_10_10_rev;
  }
  private static Map<Integer, String> GL_NV_draw_buffers;
  private static Map<Integer, String> GL_NV_draw_buffers() {
    if (GL_NV_draw_buffers != null)
      return GL_NV_draw_buffers;
    GL_NV_draw_buffers = new HashMap<Integer, String>(33);
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT9_NV, "GL_COLOR_ATTACHMENT9_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT12_NV, "GL_COLOR_ATTACHMENT12_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT10_NV, "GL_COLOR_ATTACHMENT10_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT14_NV, "GL_COLOR_ATTACHMENT14_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT3_NV, "GL_COLOR_ATTACHMENT3_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT1_NV, "GL_COLOR_ATTACHMENT1_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT7_NV, "GL_COLOR_ATTACHMENT7_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER10_NV, "GL_DRAW_BUFFER10_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER12_NV, "GL_DRAW_BUFFER12_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER14_NV, "GL_DRAW_BUFFER14_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT5_NV, "GL_COLOR_ATTACHMENT5_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER2_NV, "GL_DRAW_BUFFER2_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER8_NV, "GL_DRAW_BUFFER8_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER6_NV, "GL_DRAW_BUFFER6_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER4_NV, "GL_DRAW_BUFFER4_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER0_NV, "GL_DRAW_BUFFER0_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT13_NV, "GL_COLOR_ATTACHMENT13_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT11_NV, "GL_COLOR_ATTACHMENT11_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT15_NV, "GL_COLOR_ATTACHMENT15_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER13_NV, "GL_DRAW_BUFFER13_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT4_NV, "GL_COLOR_ATTACHMENT4_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER9_NV, "GL_DRAW_BUFFER9_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER11_NV, "GL_DRAW_BUFFER11_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT2_NV, "GL_COLOR_ATTACHMENT2_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT8_NV, "GL_COLOR_ATTACHMENT8_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER15_NV, "GL_DRAW_BUFFER15_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT6_NV, "GL_COLOR_ATTACHMENT6_NV");
    GL_NV_draw_buffers.put(GL_MAX_DRAW_BUFFERS_NV, "GL_MAX_DRAW_BUFFERS_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER5_NV, "GL_DRAW_BUFFER5_NV");
    GL_NV_draw_buffers.put(GL_COLOR_ATTACHMENT0_NV, "GL_COLOR_ATTACHMENT0_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER1_NV, "GL_DRAW_BUFFER1_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER7_NV, "GL_DRAW_BUFFER7_NV");
    GL_NV_draw_buffers.put(GL_DRAW_BUFFER3_NV, "GL_DRAW_BUFFER3_NV");
    return GL_NV_draw_buffers;
  }
  private static Map<Integer, String> GL_EXT_draw_buffers;
  private static Map<Integer, String> GL_EXT_draw_buffers() {
    if (GL_EXT_draw_buffers != null)
      return GL_EXT_draw_buffers;
    GL_EXT_draw_buffers = new HashMap<Integer, String>(34);
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER0_EXT, "GL_DRAW_BUFFER0_EXT");
    GL_EXT_draw_buffers.put(GL_MAX_COLOR_ATTACHMENTS_EXT, "GL_MAX_COLOR_ATTACHMENTS_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT5_EXT, "GL_COLOR_ATTACHMENT5_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT10_EXT, "GL_COLOR_ATTACHMENT10_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER9_EXT, "GL_DRAW_BUFFER9_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT14_EXT, "GL_COLOR_ATTACHMENT14_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT0_EXT, "GL_COLOR_ATTACHMENT0_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER12_EXT, "GL_DRAW_BUFFER12_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER1_EXT, "GL_DRAW_BUFFER1_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER5_EXT, "GL_DRAW_BUFFER5_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER13_EXT, "GL_DRAW_BUFFER13_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT7_EXT, "GL_COLOR_ATTACHMENT7_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT4_EXT, "GL_COLOR_ATTACHMENT4_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER8_EXT, "GL_DRAW_BUFFER8_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT13_EXT, "GL_COLOR_ATTACHMENT13_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER4_EXT, "GL_DRAW_BUFFER4_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT3_EXT, "GL_COLOR_ATTACHMENT3_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER14_EXT, "GL_DRAW_BUFFER14_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT8_EXT, "GL_COLOR_ATTACHMENT8_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT12_EXT, "GL_COLOR_ATTACHMENT12_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER7_EXT, "GL_DRAW_BUFFER7_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER10_EXT, "GL_DRAW_BUFFER10_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER3_EXT, "GL_DRAW_BUFFER3_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER6_EXT, "GL_DRAW_BUFFER6_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT11_EXT, "GL_COLOR_ATTACHMENT11_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT9_EXT, "GL_COLOR_ATTACHMENT9_EXT");
    GL_EXT_draw_buffers.put(GL_MAX_DRAW_BUFFERS_EXT, "GL_MAX_DRAW_BUFFERS_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER15_EXT, "GL_DRAW_BUFFER15_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT2_EXT, "GL_COLOR_ATTACHMENT2_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER11_EXT, "GL_DRAW_BUFFER11_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT6_EXT, "GL_COLOR_ATTACHMENT6_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT1_EXT, "GL_COLOR_ATTACHMENT1_EXT");
    GL_EXT_draw_buffers.put(GL_COLOR_ATTACHMENT15_EXT, "GL_COLOR_ATTACHMENT15_EXT");
    GL_EXT_draw_buffers.put(GL_DRAW_BUFFER2_EXT, "GL_DRAW_BUFFER2_EXT");
    return GL_EXT_draw_buffers;
  }
  private static Map<Integer, String> GL_INTEL_map_texture;
  private static Map<Integer, String> GL_INTEL_map_texture() {
    if (GL_INTEL_map_texture != null)
      return GL_INTEL_map_texture;
    GL_INTEL_map_texture = new HashMap<Integer, String>(4);
    GL_INTEL_map_texture.put(GL_LAYOUT_LINEAR_CPU_CACHED_INTEL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL");
    GL_INTEL_map_texture.put(GL_LAYOUT_LINEAR_INTEL, "GL_LAYOUT_LINEAR_INTEL");
    GL_INTEL_map_texture.put(GL_TEXTURE_MEMORY_LAYOUT_INTEL, "GL_TEXTURE_MEMORY_LAYOUT_INTEL");
    GL_INTEL_map_texture.put(GL_LAYOUT_DEFAULT_INTEL, "GL_LAYOUT_DEFAULT_INTEL");
    return GL_INTEL_map_texture;
  }
  private static Map<Integer, String> GL_ARB_provoking_vertex;
  private static Map<Integer, String> GL_ARB_provoking_vertex() {
    if (GL_ARB_provoking_vertex != null)
      return GL_ARB_provoking_vertex;
    GL_ARB_provoking_vertex = new HashMap<Integer, String>(4);
    GL_ARB_provoking_vertex.put(GL_PROVOKING_VERTEX, "GL_PROVOKING_VERTEX");
    GL_ARB_provoking_vertex.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    GL_ARB_provoking_vertex.put(GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION");
    GL_ARB_provoking_vertex.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
    return GL_ARB_provoking_vertex;
  }
  private static Map<Integer, String> GL_ARB_texture_storage;
  private static Map<Integer, String> GL_ARB_texture_storage() {
    if (GL_ARB_texture_storage != null)
      return GL_ARB_texture_storage;
    GL_ARB_texture_storage = new HashMap<Integer, String>(1);
    GL_ARB_texture_storage.put(GL_TEXTURE_IMMUTABLE_FORMAT, "GL_TEXTURE_IMMUTABLE_FORMAT");
    return GL_ARB_texture_storage;
  }
  private static Map<Integer, String> GL_EXT_map_buffer_range;
  private static Map<Integer, String> GL_EXT_map_buffer_range() {
    if (GL_EXT_map_buffer_range != null)
      return GL_EXT_map_buffer_range;
    GL_EXT_map_buffer_range = new HashMap<Integer, String>(6);
    GL_EXT_map_buffer_range.put(GL_MAP_WRITE_BIT_EXT, "GL_MAP_WRITE_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_INVALIDATE_BUFFER_BIT_EXT, "GL_MAP_INVALIDATE_BUFFER_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_INVALIDATE_RANGE_BIT_EXT, "GL_MAP_INVALIDATE_RANGE_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_FLUSH_EXPLICIT_BIT_EXT, "GL_MAP_FLUSH_EXPLICIT_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_UNSYNCHRONIZED_BIT_EXT, "GL_MAP_UNSYNCHRONIZED_BIT_EXT");
    GL_EXT_map_buffer_range.put(GL_MAP_READ_BIT_EXT, "GL_MAP_READ_BIT_EXT");
    return GL_EXT_map_buffer_range;
  }
  private static Map<Integer, String> GL_ARB_framebuffer_no_attachments;
  private static Map<Integer, String> GL_ARB_framebuffer_no_attachments() {
    if (GL_ARB_framebuffer_no_attachments != null)
      return GL_ARB_framebuffer_no_attachments;
    GL_ARB_framebuffer_no_attachments = new HashMap<Integer, String>(9);
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_WIDTH, "GL_FRAMEBUFFER_DEFAULT_WIDTH");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_HEIGHT, "GL_FRAMEBUFFER_DEFAULT_HEIGHT");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_WIDTH, "GL_MAX_FRAMEBUFFER_WIDTH");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_HEIGHT, "GL_MAX_FRAMEBUFFER_HEIGHT");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_LAYERS, "GL_MAX_FRAMEBUFFER_LAYERS");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_LAYERS, "GL_FRAMEBUFFER_DEFAULT_LAYERS");
    GL_ARB_framebuffer_no_attachments.put(GL_FRAMEBUFFER_DEFAULT_SAMPLES, "GL_FRAMEBUFFER_DEFAULT_SAMPLES");
    GL_ARB_framebuffer_no_attachments.put(GL_MAX_FRAMEBUFFER_SAMPLES, "GL_MAX_FRAMEBUFFER_SAMPLES");
    return GL_ARB_framebuffer_no_attachments;
  }
  private static Map<Integer, String> GL_EXT_fog_coord;
  private static Map<Integer, String> GL_EXT_fog_coord() {
    if (GL_EXT_fog_coord != null)
      return GL_EXT_fog_coord;
    GL_EXT_fog_coord = new HashMap<Integer, String>(8);
    GL_EXT_fog_coord.put(GL_FRAGMENT_DEPTH_EXT, "GL_FRAGMENT_DEPTH_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_TYPE_EXT, "GL_FOG_COORDINATE_ARRAY_TYPE_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_STRIDE_EXT, "GL_FOG_COORDINATE_ARRAY_STRIDE_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_EXT, "GL_FOG_COORDINATE_EXT");
    GL_EXT_fog_coord.put(GL_CURRENT_FOG_COORDINATE_EXT, "GL_CURRENT_FOG_COORDINATE_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_POINTER_EXT, "GL_FOG_COORDINATE_ARRAY_POINTER_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_ARRAY_EXT, "GL_FOG_COORDINATE_ARRAY_EXT");
    GL_EXT_fog_coord.put(GL_FOG_COORDINATE_SOURCE_EXT, "GL_FOG_COORDINATE_SOURCE_EXT");
    return GL_EXT_fog_coord;
  }
  private static Map<Integer, String> GL_OES_get_program_binary;
  private static Map<Integer, String> GL_OES_get_program_binary() {
    if (GL_OES_get_program_binary != null)
      return GL_OES_get_program_binary;
    GL_OES_get_program_binary = new HashMap<Integer, String>(3);
    GL_OES_get_program_binary.put(GL_PROGRAM_BINARY_LENGTH_OES, "GL_PROGRAM_BINARY_LENGTH_OES");
    GL_OES_get_program_binary.put(GL_NUM_PROGRAM_BINARY_FORMATS_OES, "GL_NUM_PROGRAM_BINARY_FORMATS_OES");
    GL_OES_get_program_binary.put(GL_PROGRAM_BINARY_FORMATS_OES, "GL_PROGRAM_BINARY_FORMATS_OES");
    return GL_OES_get_program_binary;
  }
  private static Map<Integer, String> GL_QCOM_alpha_test;
  private static Map<Integer, String> GL_QCOM_alpha_test() {
    if (GL_QCOM_alpha_test != null)
      return GL_QCOM_alpha_test;
    GL_QCOM_alpha_test = new HashMap<Integer, String>(3);
    GL_QCOM_alpha_test.put(GL_ALPHA_TEST_FUNC_QCOM, "GL_ALPHA_TEST_FUNC_QCOM");
    GL_QCOM_alpha_test.put(GL_ALPHA_TEST_QCOM, "GL_ALPHA_TEST_QCOM");
    GL_QCOM_alpha_test.put(GL_ALPHA_TEST_REF_QCOM, "GL_ALPHA_TEST_REF_QCOM");
    return GL_QCOM_alpha_test;
  }
  private static Map<Integer, String> GL_NV_alpha_to_coverage_dither_control;
  private static Map<Integer, String> GL_NV_alpha_to_coverage_dither_control() {
    if (GL_NV_alpha_to_coverage_dither_control != null)
      return GL_NV_alpha_to_coverage_dither_control;
    GL_NV_alpha_to_coverage_dither_control = new HashMap<Integer, String>(4);
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV, "GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV");
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV, "GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV");
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV, "GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV");
    GL_NV_alpha_to_coverage_dither_control.put(GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV, "GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV");
    return GL_NV_alpha_to_coverage_dither_control;
  }
  private static Map<Integer, String> GL_NV_present_video;
  private static Map<Integer, String> GL_NV_present_video() {
    if (GL_NV_present_video != null)
      return GL_NV_present_video;
    GL_NV_present_video = new HashMap<Integer, String>(6);
    GL_NV_present_video.put(GL_PRESENT_TIME_NV, "GL_PRESENT_TIME_NV");
    GL_NV_present_video.put(GL_CURRENT_TIME_NV, "GL_CURRENT_TIME_NV");
    GL_NV_present_video.put(GL_PRESENT_DURATION_NV, "GL_PRESENT_DURATION_NV");
    GL_NV_present_video.put(GL_NUM_FILL_STREAMS_NV, "GL_NUM_FILL_STREAMS_NV");
    GL_NV_present_video.put(GL_FRAME_NV, "GL_FRAME_NV");
    GL_NV_present_video.put(GL_FIELDS_NV, "GL_FIELDS_NV");
    return GL_NV_present_video;
  }
  private static Map<Integer, String> GL_SGIS_detail_texture;
  private static Map<Integer, String> GL_SGIS_detail_texture() {
    if (GL_SGIS_detail_texture != null)
      return GL_SGIS_detail_texture;
    GL_SGIS_detail_texture = new HashMap<Integer, String>(8);
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_MODE_SGIS, "GL_DETAIL_TEXTURE_MODE_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS");
    GL_SGIS_detail_texture.put(GL_LINEAR_DETAIL_SGIS, "GL_LINEAR_DETAIL_SGIS");
    GL_SGIS_detail_texture.put(GL_LINEAR_DETAIL_COLOR_SGIS, "GL_LINEAR_DETAIL_COLOR_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_LEVEL_SGIS, "GL_DETAIL_TEXTURE_LEVEL_SGIS");
    GL_SGIS_detail_texture.put(GL_LINEAR_DETAIL_ALPHA_SGIS, "GL_LINEAR_DETAIL_ALPHA_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_2D_BINDING_SGIS, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS");
    GL_SGIS_detail_texture.put(GL_DETAIL_TEXTURE_2D_SGIS, "GL_DETAIL_TEXTURE_2D_SGIS");
    return GL_SGIS_detail_texture;
  }
  private static Map<Integer, String> GL_EXT_framebuffer_multisample;
  private static Map<Integer, String> GL_EXT_framebuffer_multisample() {
    if (GL_EXT_framebuffer_multisample != null)
      return GL_EXT_framebuffer_multisample;
    GL_EXT_framebuffer_multisample = new HashMap<Integer, String>(4);
    GL_EXT_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT");
    GL_EXT_framebuffer_multisample.put(GL_MAX_SAMPLES_EXT, "GL_MAX_SAMPLES_EXT");
    GL_EXT_framebuffer_multisample.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT");
    GL_EXT_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_EXT, "GL_RENDERBUFFER_SAMPLES_EXT");
    return GL_EXT_framebuffer_multisample;
  }
  private static Map<Integer, String> GL_NV_framebuffer_blit;
  private static Map<Integer, String> GL_NV_framebuffer_blit() {
    if (GL_NV_framebuffer_blit != null)
      return GL_NV_framebuffer_blit;
    GL_NV_framebuffer_blit = new HashMap<Integer, String>(4);
    GL_NV_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_NV, "GL_DRAW_FRAMEBUFFER_NV");
    GL_NV_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_BINDING_NV, "GL_DRAW_FRAMEBUFFER_BINDING_NV");
    GL_NV_framebuffer_blit.put(GL_READ_FRAMEBUFFER_NV, "GL_READ_FRAMEBUFFER_NV");
    GL_NV_framebuffer_blit.put(GL_READ_FRAMEBUFFER_BINDING_NV, "GL_READ_FRAMEBUFFER_BINDING_NV");
    return GL_NV_framebuffer_blit;
  }
  private static Map<Integer, String> GL_NV_framebuffer_multisample;
  private static Map<Integer, String> GL_NV_framebuffer_multisample() {
    if (GL_NV_framebuffer_multisample != null)
      return GL_NV_framebuffer_multisample;
    GL_NV_framebuffer_multisample = new HashMap<Integer, String>(3);
    GL_NV_framebuffer_multisample.put(GL_MAX_SAMPLES_NV, "GL_MAX_SAMPLES_NV");
    GL_NV_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV");
    GL_NV_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_NV, "GL_RENDERBUFFER_SAMPLES_NV");
    return GL_NV_framebuffer_multisample;
  }
  private static Map<Integer, String> GL_NV_query_resource;
  private static Map<Integer, String> GL_NV_query_resource() {
    if (GL_NV_query_resource != null)
      return GL_NV_query_resource;
    GL_NV_query_resource = new HashMap<Integer, String>(6);
    GL_NV_query_resource.put(GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV, "GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV");
    GL_NV_query_resource.put(GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV, "GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV");
    GL_NV_query_resource.put(GL_QUERY_RESOURCE_TEXTURE_NV, "GL_QUERY_RESOURCE_TEXTURE_NV");
    GL_NV_query_resource.put(GL_QUERY_RESOURCE_RENDERBUFFER_NV, "GL_QUERY_RESOURCE_RENDERBUFFER_NV");
    GL_NV_query_resource.put(GL_QUERY_RESOURCE_SYS_RESERVED_NV, "GL_QUERY_RESOURCE_SYS_RESERVED_NV");
    GL_NV_query_resource.put(GL_QUERY_RESOURCE_BUFFEROBJECT_NV, "GL_QUERY_RESOURCE_BUFFEROBJECT_NV");
    return GL_NV_query_resource;
  }
  private static Map<Integer, String> GL_APPLE_texture_range;
  private static Map<Integer, String> GL_APPLE_texture_range() {
    if (GL_APPLE_texture_range != null)
      return GL_APPLE_texture_range;
    GL_APPLE_texture_range = new HashMap<Integer, String>(6);
    GL_APPLE_texture_range.put(GL_TEXTURE_RANGE_POINTER_APPLE, "GL_TEXTURE_RANGE_POINTER_APPLE");
    GL_APPLE_texture_range.put(GL_TEXTURE_RANGE_LENGTH_APPLE, "GL_TEXTURE_RANGE_LENGTH_APPLE");
    GL_APPLE_texture_range.put(GL_STORAGE_PRIVATE_APPLE, "GL_STORAGE_PRIVATE_APPLE");
    GL_APPLE_texture_range.put(GL_TEXTURE_STORAGE_HINT_APPLE, "GL_TEXTURE_STORAGE_HINT_APPLE");
    GL_APPLE_texture_range.put(GL_STORAGE_SHARED_APPLE, "GL_STORAGE_SHARED_APPLE");
    GL_APPLE_texture_range.put(GL_STORAGE_CACHED_APPLE, "GL_STORAGE_CACHED_APPLE");
    return GL_APPLE_texture_range;
  }
  private static Map<Integer, String> GL_NV_explicit_multisample;
  private static Map<Integer, String> GL_NV_explicit_multisample() {
    if (GL_NV_explicit_multisample != null)
      return GL_NV_explicit_multisample;
    GL_NV_explicit_multisample = new HashMap<Integer, String>(10);
    GL_NV_explicit_multisample.put(GL_MAX_SAMPLE_MASK_WORDS_NV, "GL_MAX_SAMPLE_MASK_WORDS_NV");
    GL_NV_explicit_multisample.put(GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV, "GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV");
    GL_NV_explicit_multisample.put(GL_TEXTURE_RENDERBUFFER_NV, "GL_TEXTURE_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV, "GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_TEXTURE_BINDING_RENDERBUFFER_NV, "GL_TEXTURE_BINDING_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_INT_SAMPLER_RENDERBUFFER_NV, "GL_INT_SAMPLER_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLER_RENDERBUFFER_NV, "GL_SAMPLER_RENDERBUFFER_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLE_MASK_NV, "GL_SAMPLE_MASK_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLE_POSITION_NV, "GL_SAMPLE_POSITION_NV");
    GL_NV_explicit_multisample.put(GL_SAMPLE_MASK_VALUE_NV, "GL_SAMPLE_MASK_VALUE_NV");
    return GL_NV_explicit_multisample;
  }
  private static Map<Integer, String> GL_OES_framebuffer_object;
  private static Map<Integer, String> GL_OES_framebuffer_object() {
    if (GL_OES_framebuffer_object != null)
      return GL_OES_framebuffer_object;
    GL_OES_framebuffer_object = new HashMap<Integer, String>(33);
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_BINDING_OES, "GL_RENDERBUFFER_BINDING_OES");
    GL_OES_framebuffer_object.put(GL_MAX_RENDERBUFFER_SIZE_OES, "GL_MAX_RENDERBUFFER_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_COLOR_ATTACHMENT0_OES, "GL_COLOR_ATTACHMENT0_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES");
    GL_OES_framebuffer_object.put(GL_NONE_OES, "GL_NONE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_STENCIL_SIZE_OES, "GL_RENDERBUFFER_STENCIL_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_UNSUPPORTED_OES, "GL_FRAMEBUFFER_UNSUPPORTED_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_RED_SIZE_OES, "GL_RENDERBUFFER_RED_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_INVALID_FRAMEBUFFER_OPERATION_OES, "GL_INVALID_FRAMEBUFFER_OPERATION_OES");
    GL_OES_framebuffer_object.put(GL_RGB565_OES, "GL_RGB565_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_GREEN_SIZE_OES, "GL_RENDERBUFFER_GREEN_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_COMPLETE_OES, "GL_FRAMEBUFFER_COMPLETE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES");
    GL_OES_framebuffer_object.put(GL_RGB5_A1_OES, "GL_RGB5_A1_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_INTERNAL_FORMAT_OES, "GL_RENDERBUFFER_INTERNAL_FORMAT_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_WIDTH_OES, "GL_RENDERBUFFER_WIDTH_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_ALPHA_SIZE_OES, "GL_RENDERBUFFER_ALPHA_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_DEPTH_SIZE_OES, "GL_RENDERBUFFER_DEPTH_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_BINDING_OES, "GL_FRAMEBUFFER_BINDING_OES");
    GL_OES_framebuffer_object.put(GL_DEPTH_COMPONENT16_OES, "GL_DEPTH_COMPONENT16_OES");
    GL_OES_framebuffer_object.put(GL_DEPTH_ATTACHMENT_OES, "GL_DEPTH_ATTACHMENT_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_HEIGHT_OES, "GL_RENDERBUFFER_HEIGHT_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_OES, "GL_FRAMEBUFFER_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_BLUE_SIZE_OES, "GL_RENDERBUFFER_BLUE_SIZE_OES");
    GL_OES_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES");
    GL_OES_framebuffer_object.put(GL_RENDERBUFFER_OES, "GL_RENDERBUFFER_OES");
    GL_OES_framebuffer_object.put(GL_RGBA4_OES, "GL_RGBA4_OES");
    GL_OES_framebuffer_object.put(GL_STENCIL_ATTACHMENT_OES, "GL_STENCIL_ATTACHMENT_OES");
    return GL_OES_framebuffer_object;
  }
  private static Map<Integer, String> GL_ARB_get_program_binary;
  private static Map<Integer, String> GL_ARB_get_program_binary() {
    if (GL_ARB_get_program_binary != null)
      return GL_ARB_get_program_binary;
    GL_ARB_get_program_binary = new HashMap<Integer, String>(13);
    GL_ARB_get_program_binary.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    GL_ARB_get_program_binary.put(GL_PROGRAM_PIPELINE_BINDING, "GL_PROGRAM_PIPELINE_BINDING");
    GL_ARB_get_program_binary.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    GL_ARB_get_program_binary.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    GL_ARB_get_program_binary.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
    GL_ARB_get_program_binary.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    GL_ARB_get_program_binary.put(GL_PROGRAM_BINARY_LENGTH, "GL_PROGRAM_BINARY_LENGTH");
    GL_ARB_get_program_binary.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    GL_ARB_get_program_binary.put(GL_PROGRAM_SEPARABLE, "GL_PROGRAM_SEPARABLE");
    GL_ARB_get_program_binary.put(GL_PROGRAM_BINARY_RETRIEVABLE_HINT, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT");
    GL_ARB_get_program_binary.put(GL_NUM_PROGRAM_BINARY_FORMATS, "GL_NUM_PROGRAM_BINARY_FORMATS");
    GL_ARB_get_program_binary.put(GL_PROGRAM_BINARY_FORMATS, "GL_PROGRAM_BINARY_FORMATS");
    GL_ARB_get_program_binary.put(GL_ACTIVE_PROGRAM, "GL_ACTIVE_PROGRAM");
    return GL_ARB_get_program_binary;
  }
  private static Map<Integer, String> GL_EXT_shader_image_load_store;
  private static Map<Integer, String> GL_EXT_shader_image_load_store() {
    if (GL_EXT_shader_image_load_store != null)
      return GL_EXT_shader_image_load_store;
    GL_EXT_shader_image_load_store = new HashMap<Integer, String>(55);
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE_EXT, "GL_INT_IMAGE_2D_MULTISAMPLE_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_BUFFER_EXT, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_3D_EXT, "GL_UNSIGNED_INT_IMAGE_3D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_FORMAT_EXT, "GL_IMAGE_BINDING_FORMAT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT, "GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BUFFER_EXT, "GL_IMAGE_BUFFER_EXT");
    GL_EXT_shader_image_load_store.put(GL_COMMAND_BARRIER_BIT_EXT, "GL_COMMAND_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_ALL_BARRIER_BITS_EXT, "GL_ALL_BARRIER_BITS_EXT");
    GL_EXT_shader_image_load_store.put(GL_MAX_IMAGE_UNITS_EXT, "GL_MAX_IMAGE_UNITS_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_LAYER_EXT, "GL_IMAGE_BINDING_LAYER_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_EXT, "GL_UNSIGNED_INT_IMAGE_2D_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_ARRAY_EXT, "GL_INT_IMAGE_2D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_1D_EXT, "GL_IMAGE_1D_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT, "GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT");
    GL_EXT_shader_image_load_store.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_CUBE_EXT, "GL_IMAGE_CUBE_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_3D_EXT, "GL_IMAGE_3D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE_EXT, "GL_IMAGE_2D_MULTISAMPLE_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_CUBE_EXT, "GL_INT_IMAGE_CUBE_EXT");
    GL_EXT_shader_image_load_store.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_1D_EXT, "GL_INT_IMAGE_1D_EXT");
    GL_EXT_shader_image_load_store.put(GL_ELEMENT_ARRAY_BARRIER_BIT_EXT, "GL_ELEMENT_ARRAY_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_NAME_EXT, "GL_IMAGE_BINDING_NAME_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT");
    GL_EXT_shader_image_load_store.put(GL_TEXTURE_UPDATE_BARRIER_BIT_EXT, "GL_TEXTURE_UPDATE_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_EXT, "GL_INT_IMAGE_2D_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_RECT_EXT, "GL_INT_IMAGE_2D_RECT_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE_EXT, "GL_UNSIGNED_INT_IMAGE_CUBE_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNIFORM_BARRIER_BIT_EXT, "GL_UNIFORM_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_FRAMEBUFFER_BARRIER_BIT_EXT, "GL_FRAMEBUFFER_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_CUBE_MAP_ARRAY_EXT, "GL_IMAGE_CUBE_MAP_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_RECT_EXT, "GL_IMAGE_2D_RECT_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_3D_EXT, "GL_INT_IMAGE_3D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_LAYERED_EXT, "GL_IMAGE_BINDING_LAYERED_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_BUFFER_EXT, "GL_INT_IMAGE_BUFFER_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_ACCESS_EXT, "GL_IMAGE_BINDING_ACCESS_EXT");
    GL_EXT_shader_image_load_store.put(GL_BUFFER_UPDATE_BARRIER_BIT_EXT, "GL_BUFFER_UPDATE_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_MAX_IMAGE_SAMPLES_EXT, "GL_MAX_IMAGE_SAMPLES_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_1D_ARRAY_EXT, "GL_IMAGE_1D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_ATOMIC_COUNTER_BARRIER_BIT_EXT, "GL_ATOMIC_COUNTER_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_EXT, "GL_IMAGE_2D_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_2D_ARRAY_EXT, "GL_IMAGE_2D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_1D_ARRAY_EXT, "GL_INT_IMAGE_1D_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_IMAGE_BINDING_LEVEL_EXT, "GL_IMAGE_BINDING_LEVEL_EXT");
    GL_EXT_shader_image_load_store.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_PIXEL_BUFFER_BARRIER_BIT_EXT, "GL_PIXEL_BUFFER_BARRIER_BIT_EXT");
    GL_EXT_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D_EXT, "GL_UNSIGNED_INT_IMAGE_1D_EXT");
    GL_EXT_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT");
    GL_EXT_shader_image_load_store.put(GL_TEXTURE_FETCH_BARRIER_BIT_EXT, "GL_TEXTURE_FETCH_BARRIER_BIT_EXT");
    return GL_EXT_shader_image_load_store;
  }
  private static Map<Integer, String> GL_EXT_draw_instanced;
  private static Map<Integer, String> GL_EXT_draw_instanced() {
    if (GL_EXT_draw_instanced != null)
      return GL_EXT_draw_instanced;
    GL_EXT_draw_instanced = new HashMap<Integer, String>(1);
    GL_EXT_draw_instanced.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT");
    return GL_EXT_draw_instanced;
  }
  private static Map<Integer, String> GL_SGIS_texture4D;
  private static Map<Integer, String> GL_SGIS_texture4D() {
    if (GL_SGIS_texture4D != null)
      return GL_SGIS_texture4D;
    GL_SGIS_texture4D = new HashMap<Integer, String>(10);
    GL_SGIS_texture4D.put(GL_TEXTURE_4D_BINDING_SGIS, "GL_TEXTURE_4D_BINDING_SGIS");
    GL_SGIS_texture4D.put(GL_TEXTURE_WRAP_Q_SGIS, "GL_TEXTURE_WRAP_Q_SGIS");
    GL_SGIS_texture4D.put(GL_UNPACK_IMAGE_DEPTH_SGIS, "GL_UNPACK_IMAGE_DEPTH_SGIS");
    GL_SGIS_texture4D.put(GL_TEXTURE_4DSIZE_SGIS, "GL_TEXTURE_4DSIZE_SGIS");
    GL_SGIS_texture4D.put(GL_PACK_SKIP_VOLUMES_SGIS, "GL_PACK_SKIP_VOLUMES_SGIS");
    GL_SGIS_texture4D.put(GL_UNPACK_SKIP_VOLUMES_SGIS, "GL_UNPACK_SKIP_VOLUMES_SGIS");
    GL_SGIS_texture4D.put(GL_PROXY_TEXTURE_4D_SGIS, "GL_PROXY_TEXTURE_4D_SGIS");
    GL_SGIS_texture4D.put(GL_TEXTURE_4D_SGIS, "GL_TEXTURE_4D_SGIS");
    GL_SGIS_texture4D.put(GL_PACK_IMAGE_DEPTH_SGIS, "GL_PACK_IMAGE_DEPTH_SGIS");
    GL_SGIS_texture4D.put(GL_MAX_4D_TEXTURE_SIZE_SGIS, "GL_MAX_4D_TEXTURE_SIZE_SGIS");
    return GL_SGIS_texture4D;
  }
  private static Map<Integer, String> GL_OES_vertex_array_object;
  private static Map<Integer, String> GL_OES_vertex_array_object() {
    if (GL_OES_vertex_array_object != null)
      return GL_OES_vertex_array_object;
    GL_OES_vertex_array_object = new HashMap<Integer, String>(1);
    GL_OES_vertex_array_object.put(GL_VERTEX_ARRAY_BINDING_OES, "GL_VERTEX_ARRAY_BINDING_OES");
    return GL_OES_vertex_array_object;
  }
  private static Map<Integer, String> GL_ARB_multitexture;
  private static Map<Integer, String> GL_ARB_multitexture() {
    if (GL_ARB_multitexture != null)
      return GL_ARB_multitexture;
    GL_ARB_multitexture = new HashMap<Integer, String>(35);
    GL_ARB_multitexture.put(GL_TEXTURE2_ARB, "GL_TEXTURE2_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE21_ARB, "GL_TEXTURE21_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE3_ARB, "GL_TEXTURE3_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE30_ARB, "GL_TEXTURE30_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE17_ARB, "GL_TEXTURE17_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE26_ARB, "GL_TEXTURE26_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE13_ARB, "GL_TEXTURE13_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE7_ARB, "GL_TEXTURE7_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE20_ARB, "GL_TEXTURE20_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE4_ARB, "GL_TEXTURE4_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE12_ARB, "GL_TEXTURE12_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE25_ARB, "GL_TEXTURE25_ARB");
    GL_ARB_multitexture.put(GL_MAX_TEXTURE_UNITS_ARB, "GL_MAX_TEXTURE_UNITS_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE16_ARB, "GL_TEXTURE16_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE8_ARB, "GL_TEXTURE8_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE29_ARB, "GL_TEXTURE29_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE15_ARB, "GL_TEXTURE15_ARB");
    GL_ARB_multitexture.put(GL_CLIENT_ACTIVE_TEXTURE_ARB, "GL_CLIENT_ACTIVE_TEXTURE_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE10_ARB, "GL_TEXTURE10_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE0_ARB, "GL_TEXTURE0_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE23_ARB, "GL_TEXTURE23_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE19_ARB, "GL_TEXTURE19_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE24_ARB, "GL_TEXTURE24_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE11_ARB, "GL_TEXTURE11_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE5_ARB, "GL_TEXTURE5_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE9_ARB, "GL_TEXTURE9_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE28_ARB, "GL_TEXTURE28_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE27_ARB, "GL_TEXTURE27_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE1_ARB, "GL_TEXTURE1_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE22_ARB, "GL_TEXTURE22_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE18_ARB, "GL_TEXTURE18_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE31_ARB, "GL_TEXTURE31_ARB");
    GL_ARB_multitexture.put(GL_ACTIVE_TEXTURE_ARB, "GL_ACTIVE_TEXTURE_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE6_ARB, "GL_TEXTURE6_ARB");
    GL_ARB_multitexture.put(GL_TEXTURE14_ARB, "GL_TEXTURE14_ARB");
    return GL_ARB_multitexture;
  }
  private static Map<Integer, String> GL_EXT_multisampled_render_to_texture;
  private static Map<Integer, String> GL_EXT_multisampled_render_to_texture() {
    if (GL_EXT_multisampled_render_to_texture != null)
      return GL_EXT_multisampled_render_to_texture;
    GL_EXT_multisampled_render_to_texture = new HashMap<Integer, String>(4);
    GL_EXT_multisampled_render_to_texture.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT");
    GL_EXT_multisampled_render_to_texture.put(GL_MAX_SAMPLES_EXT, "GL_MAX_SAMPLES_EXT");
    GL_EXT_multisampled_render_to_texture.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT");
    GL_EXT_multisampled_render_to_texture.put(GL_RENDERBUFFER_SAMPLES_EXT, "GL_RENDERBUFFER_SAMPLES_EXT");
    return GL_EXT_multisampled_render_to_texture;
  }
  private static Map<Integer, String> GL_NVX_linked_gpu_multicast;
  private static Map<Integer, String> GL_NVX_linked_gpu_multicast() {
    if (GL_NVX_linked_gpu_multicast != null)
      return GL_NVX_linked_gpu_multicast;
    GL_NVX_linked_gpu_multicast = new HashMap<Integer, String>(2);
    GL_NVX_linked_gpu_multicast.put(GL_MAX_LGPU_GPUS_NVX, "GL_MAX_LGPU_GPUS_NVX");
    GL_NVX_linked_gpu_multicast.put(GL_LGPU_SEPARATE_STORAGE_BIT_NVX, "GL_LGPU_SEPARATE_STORAGE_BIT_NVX");
    return GL_NVX_linked_gpu_multicast;
  }
  private static Map<Integer, String> GL_ARB_robustness;
  private static Map<Integer, String> GL_ARB_robustness() {
    if (GL_ARB_robustness != null)
      return GL_ARB_robustness;
    GL_ARB_robustness = new HashMap<Integer, String>(8);
    GL_ARB_robustness.put(GL_INNOCENT_CONTEXT_RESET_ARB, "GL_INNOCENT_CONTEXT_RESET_ARB");
    GL_ARB_robustness.put(GL_NO_RESET_NOTIFICATION_ARB, "GL_NO_RESET_NOTIFICATION_ARB");
    GL_ARB_robustness.put(GL_NO_ERROR, "GL_NO_ERROR");
    GL_ARB_robustness.put(GL_LOSE_CONTEXT_ON_RESET_ARB, "GL_LOSE_CONTEXT_ON_RESET_ARB");
    GL_ARB_robustness.put(GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB");
    GL_ARB_robustness.put(GL_GUILTY_CONTEXT_RESET_ARB, "GL_GUILTY_CONTEXT_RESET_ARB");
    GL_ARB_robustness.put(GL_RESET_NOTIFICATION_STRATEGY_ARB, "GL_RESET_NOTIFICATION_STRATEGY_ARB");
    GL_ARB_robustness.put(GL_UNKNOWN_CONTEXT_RESET_ARB, "GL_UNKNOWN_CONTEXT_RESET_ARB");
    return GL_ARB_robustness;
  }
  private static Map<Integer, String> GL_SGIX_async;
  private static Map<Integer, String> GL_SGIX_async() {
    if (GL_SGIX_async != null)
      return GL_SGIX_async;
    GL_SGIX_async = new HashMap<Integer, String>(1);
    GL_SGIX_async.put(GL_ASYNC_MARKER_SGIX, "GL_ASYNC_MARKER_SGIX");
    return GL_SGIX_async;
  }
  private static Map<Integer, String> GL_EXT_coordinate_frame;
  private static Map<Integer, String> GL_EXT_coordinate_frame() {
    if (GL_EXT_coordinate_frame != null)
      return GL_EXT_coordinate_frame;
    GL_EXT_coordinate_frame = new HashMap<Integer, String>(14);
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_STRIDE_EXT, "GL_TANGENT_ARRAY_STRIDE_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP1_TANGENT_EXT, "GL_MAP1_TANGENT_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP1_BINORMAL_EXT, "GL_MAP1_BINORMAL_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_TYPE_EXT, "GL_BINORMAL_ARRAY_TYPE_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP2_TANGENT_EXT, "GL_MAP2_TANGENT_EXT");
    GL_EXT_coordinate_frame.put(GL_CURRENT_TANGENT_EXT, "GL_CURRENT_TANGENT_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_POINTER_EXT, "GL_BINORMAL_ARRAY_POINTER_EXT");
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_EXT, "GL_TANGENT_ARRAY_EXT");
    GL_EXT_coordinate_frame.put(GL_CURRENT_BINORMAL_EXT, "GL_CURRENT_BINORMAL_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_EXT, "GL_BINORMAL_ARRAY_EXT");
    GL_EXT_coordinate_frame.put(GL_BINORMAL_ARRAY_STRIDE_EXT, "GL_BINORMAL_ARRAY_STRIDE_EXT");
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_TYPE_EXT, "GL_TANGENT_ARRAY_TYPE_EXT");
    GL_EXT_coordinate_frame.put(GL_TANGENT_ARRAY_POINTER_EXT, "GL_TANGENT_ARRAY_POINTER_EXT");
    GL_EXT_coordinate_frame.put(GL_MAP2_BINORMAL_EXT, "GL_MAP2_BINORMAL_EXT");
    return GL_EXT_coordinate_frame;
  }
  private static Map<Integer, String> GL_NV_path_rendering;
  private static Map<Integer, String> GL_NV_path_rendering() {
    if (GL_NV_path_rendering != null)
      return GL_NV_path_rendering;
    GL_NV_path_rendering = new HashMap<Integer, String>(164);
    GL_NV_path_rendering.put(GL_PATH_MITER_LIMIT_NV, "GL_PATH_MITER_LIMIT_NV");
    GL_NV_path_rendering.put(GL_TRANSPOSE_AFFINE_2D_NV, "GL_TRANSPOSE_AFFINE_2D_NV");
    GL_NV_path_rendering.put(GL_MOVE_TO_NV, "GL_MOVE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_COEFF_NV, "GL_PATH_GEN_COEFF_NV");
    GL_NV_path_rendering.put(GL_FONT_TARGET_UNAVAILABLE_NV, "GL_FONT_TARGET_UNAVAILABLE_NV");
    GL_NV_path_rendering.put(GL_FILE_NAME_NV, "GL_FILE_NAME_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT_NV, "GL_ROUNDED_RECT_NV");
    GL_NV_path_rendering.put(GL_FONT_NUM_GLYPH_INDICES_BIT_NV, "GL_FONT_NUM_GLYPH_INDICES_BIT_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT8_NV, "GL_ROUNDED_RECT8_NV");
    GL_NV_path_rendering.put(GL_CLOSE_PATH_NV, "GL_CLOSE_PATH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT_NV, "GL_RELATIVE_ROUNDED_RECT_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV, "GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMALL_CCW_ARC_TO_NV, "GL_RELATIVE_SMALL_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_ROUND_NV, "GL_ROUND_NV");
    GL_NV_path_rendering.put(GL_USE_MISSING_GLYPH_NV, "GL_USE_MISSING_GLYPH_NV");
    GL_NV_path_rendering.put(GL_FONT_Y_MAX_BOUNDS_BIT_NV, "GL_FONT_Y_MAX_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_LARGE_CCW_ARC_TO_NV, "GL_LARGE_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_OFFSET_NV, "GL_PATH_DASH_OFFSET_NV");
    GL_NV_path_rendering.put(GL_PATH_JOIN_STYLE_NV, "GL_PATH_JOIN_STYLE_NV");
    GL_NV_path_rendering.put(GL_PATH_MODELVIEW_NV, "GL_PATH_MODELVIEW_NV");
    GL_NV_path_rendering.put(GL_UTF8_NV, "GL_UTF8_NV");
    GL_NV_path_rendering.put(GL_HORIZONTAL_LINE_TO_NV, "GL_HORIZONTAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_Y_NV, "GL_TRANSLATE_Y_NV");
    GL_NV_path_rendering.put(GL_4_BYTES_NV, "GL_4_BYTES_NV");
    GL_NV_path_rendering.put(GL_SYSTEM_FONT_NAME_NV, "GL_SYSTEM_FONT_NAME_NV");
    GL_NV_path_rendering.put(GL_FONT_UNINTELLIGIBLE_NV, "GL_FONT_UNINTELLIGIBLE_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_MASK_NV, "GL_PATH_FILL_MASK_NV");
    GL_NV_path_rendering.put(GL_ADJACENT_PAIRS_NV, "GL_ADJACENT_PAIRS_NV");
    GL_NV_path_rendering.put(GL_DUP_LAST_CUBIC_CURVE_TO_NV, "GL_DUP_LAST_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_LINE_TO_NV, "GL_RELATIVE_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV, "GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ARC_TO_NV, "GL_RELATIVE_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_PROJECTION_MATRIX_NV, "GL_PATH_PROJECTION_MATRIX_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_MODE_NV, "GL_PATH_FILL_MODE_NV");
    GL_NV_path_rendering.put(GL_SMALL_CCW_ARC_TO_NV, "GL_SMALL_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_DUP_FIRST_CUBIC_CURVE_TO_NV, "GL_DUP_FIRST_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_HAS_KERNING_BIT_NV, "GL_FONT_HAS_KERNING_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_MASK_NV, "GL_PATH_STROKE_MASK_NV");
    GL_NV_path_rendering.put(GL_3_BYTES_NV, "GL_3_BYTES_NV");
    GL_NV_path_rendering.put(GL_AFFINE_2D_NV, "GL_AFFINE_2D_NV");
    GL_NV_path_rendering.put(GL_UTF16_NV, "GL_UTF16_NV");
    GL_NV_path_rendering.put(GL_PATH_COMPUTED_LENGTH_NV, "GL_PATH_COMPUTED_LENGTH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_LARGE_CCW_ARC_TO_NV, "GL_RELATIVE_LARGE_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_RECT_NV, "GL_RECT_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV, "GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMALL_CW_ARC_TO_NV, "GL_RELATIVE_SMALL_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_CIRCULAR_CCW_ARC_TO_NV, "GL_CIRCULAR_CCW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_X_NV, "GL_TRANSLATE_X_NV");
    GL_NV_path_rendering.put(GL_BOUNDING_BOX_NV, "GL_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_MOVE_TO_RESETS_NV, "GL_MOVE_TO_RESETS_NV");
    GL_NV_path_rendering.put(GL_PRIMARY_COLOR, "GL_PRIMARY_COLOR");
    GL_NV_path_rendering.put(GL_STANDARD_FONT_FORMAT_NV, "GL_STANDARD_FONT_FORMAT_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_REF_NV, "GL_PATH_STENCIL_REF_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_COVER_MODE_NV, "GL_PATH_FILL_COVER_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_CLIENT_LENGTH_NV, "GL_PATH_CLIENT_LENGTH_NV");
    GL_NV_path_rendering.put(GL_PATH_INITIAL_DASH_CAP_NV, "GL_PATH_INITIAL_DASH_CAP_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HEIGHT_BIT_NV, "GL_GLYPH_HEIGHT_BIT_NV");
    GL_NV_path_rendering.put(GL_2_BYTES_NV, "GL_2_BYTES_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_QUADRATIC_CURVE_TO_NV, "GL_RELATIVE_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_LINE_TO_NV, "GL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_PROJECTION_NV, "GL_PATH_PROJECTION_NV");
    GL_NV_path_rendering.put(GL_PATH_MODELVIEW_STACK_DEPTH_NV, "GL_PATH_MODELVIEW_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_STANDARD_FONT_NAME_NV, "GL_STANDARD_FONT_NAME_NV");
    GL_NV_path_rendering.put(GL_FONT_X_MIN_BOUNDS_BIT_NV, "GL_FONT_X_MIN_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV, "GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_FORMAT_PS_NV, "GL_PATH_FORMAT_PS_NV");
    GL_NV_path_rendering.put(GL_COUNT_DOWN_NV, "GL_COUNT_DOWN_NV");
    GL_NV_path_rendering.put(GL_FONT_UNITS_PER_EM_BIT_NV, "GL_FONT_UNITS_PER_EM_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_PROJECTION_STACK_DEPTH_NV, "GL_PATH_PROJECTION_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT4_NV, "GL_RELATIVE_ROUNDED_RECT4_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_3D_NV, "GL_TRANSLATE_3D_NV");
    GL_NV_path_rendering.put(GL_SMOOTH_QUADRATIC_CURVE_TO_NV, "GL_SMOOTH_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_QUADRATIC_CURVE_TO_NV, "GL_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_CAPS_NV, "GL_PATH_DASH_CAPS_NV");
    GL_NV_path_rendering.put(GL_RESTART_PATH_NV, "GL_RESTART_PATH_NV");
    GL_NV_path_rendering.put(GL_PATH_TERMINAL_END_CAP_NV, "GL_PATH_TERMINAL_END_CAP_NV");
    GL_NV_path_rendering.put(GL_GLYPH_VERTICAL_BEARING_X_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_X_BIT_NV");
    GL_NV_path_rendering.put(GL_CUBIC_CURVE_TO_NV, "GL_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_UNDERLINE_POSITION_BIT_NV, "GL_FONT_UNDERLINE_POSITION_BIT_NV");
    GL_NV_path_rendering.put(GL_SMOOTH_CUBIC_CURVE_TO_NV, "GL_SMOOTH_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_HEIGHT_BIT_NV, "GL_FONT_HEIGHT_BIT_NV");
    GL_NV_path_rendering.put(GL_TRANSPOSE_AFFINE_3D_NV, "GL_TRANSPOSE_AFFINE_3D_NV");
    GL_NV_path_rendering.put(GL_SMALL_CW_ARC_TO_NV, "GL_SMALL_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_ITALIC_BIT_NV, "GL_ITALIC_BIT_NV");
    GL_NV_path_rendering.put(GL_CONSTANT_NV, "GL_CONSTANT_NV");
    GL_NV_path_rendering.put(GL_FONT_UNDERLINE_THICKNESS_BIT_NV, "GL_FONT_UNDERLINE_THICKNESS_BIT_NV");
    GL_NV_path_rendering.put(GL_CONVEX_HULL_NV, "GL_CONVEX_HULL_NV");
    GL_NV_path_rendering.put(GL_PATH_COMMAND_COUNT_NV, "GL_PATH_COMMAND_COUNT_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_CUBIC_CURVE_TO_NV, "GL_RELATIVE_CUBIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV, "GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV");
    GL_NV_path_rendering.put(GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV, "GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV");
    GL_NV_path_rendering.put(GL_TRIANGULAR_NV, "GL_TRIANGULAR_NV");
    GL_NV_path_rendering.put(GL_PATH_ERROR_POSITION_NV, "GL_PATH_ERROR_POSITION_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_VERTICAL_LINE_TO_NV, "GL_RELATIVE_VERTICAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_PRIMARY_COLOR_NV, "GL_PRIMARY_COLOR_NV");
    GL_NV_path_rendering.put(GL_SQUARE_NV, "GL_SQUARE_NV");
    GL_NV_path_rendering.put(GL_BEVEL_NV, "GL_BEVEL_NV");
    GL_NV_path_rendering.put(GL_PATH_END_CAPS_NV, "GL_PATH_END_CAPS_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_FORMAT_SVG_NV, "GL_PATH_FORMAT_SVG_NV");
    GL_NV_path_rendering.put(GL_CIRCULAR_TANGENT_ARC_TO_NV, "GL_CIRCULAR_TANGENT_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_CIRCULAR_CW_ARC_TO_NV, "GL_CIRCULAR_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_COLOR_FORMAT_NV, "GL_PATH_GEN_COLOR_FORMAT_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT8_NV, "GL_RELATIVE_ROUNDED_RECT8_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_WIDTH_NV, "GL_PATH_STROKE_WIDTH_NV");
    GL_NV_path_rendering.put(GL_FRAGMENT_INPUT_NV, "GL_FRAGMENT_INPUT_NV");
    GL_NV_path_rendering.put(GL_EYE_LINEAR_NV, "GL_EYE_LINEAR_NV");
    GL_NV_path_rendering.put(GL_TRANSLATE_2D_NV, "GL_TRANSLATE_2D_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_ROUNDED_RECT2_NV, "GL_RELATIVE_ROUNDED_RECT2_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_OFFSET_RESET_NV, "GL_PATH_DASH_OFFSET_RESET_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_MOVE_TO_NV, "GL_RELATIVE_MOVE_TO_NV");
    GL_NV_path_rendering.put(GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_FOG_GEN_MODE_NV, "GL_PATH_FOG_GEN_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV, "GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV");
    GL_NV_path_rendering.put(GL_PATH_FILL_BOUNDING_BOX_NV, "GL_PATH_FILL_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_BOLD_BIT_NV, "GL_BOLD_BIT_NV");
    GL_NV_path_rendering.put(GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV");
    GL_NV_path_rendering.put(GL_FONT_Y_MIN_BOUNDS_BIT_NV, "GL_FONT_Y_MIN_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_VERTICAL_LINE_TO_NV, "GL_VERTICAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_DESCENDER_BIT_NV, "GL_FONT_DESCENDER_BIT_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT4_NV, "GL_ROUNDED_RECT4_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_CONIC_CURVE_TO_NV, "GL_RELATIVE_CONIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_GLYPHS_AVAILABLE_NV, "GL_FONT_GLYPHS_AVAILABLE_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_COORD_COUNT_NV, "GL_PATH_COORD_COUNT_NV");
    GL_NV_path_rendering.put(GL_OBJECT_LINEAR_NV, "GL_OBJECT_LINEAR_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_HORIZONTAL_LINE_TO_NV, "GL_RELATIVE_HORIZONTAL_LINE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV, "GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_RECT_NV, "GL_RELATIVE_RECT_NV");
    GL_NV_path_rendering.put(GL_SKIP_MISSING_GLYPH_NV, "GL_SKIP_MISSING_GLYPH_NV");
    GL_NV_path_rendering.put(GL_FIRST_TO_REST_NV, "GL_FIRST_TO_REST_NV");
    GL_NV_path_rendering.put(GL_PATH_MODELVIEW_MATRIX_NV, "GL_PATH_MODELVIEW_MATRIX_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_FUNC_NV, "GL_PATH_STENCIL_FUNC_NV");
    GL_NV_path_rendering.put(GL_GLYPH_HAS_KERNING_BIT_NV, "GL_GLYPH_HAS_KERNING_BIT_NV");
    GL_NV_path_rendering.put(GL_MITER_TRUNCATE_NV, "GL_MITER_TRUNCATE_NV");
    GL_NV_path_rendering.put(GL_LARGE_CW_ARC_TO_NV, "GL_LARGE_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_MITER_REVERT_NV, "GL_MITER_REVERT_NV");
    GL_NV_path_rendering.put(GL_PATH_STENCIL_VALUE_MASK_NV, "GL_PATH_STENCIL_VALUE_MASK_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_LARGE_CW_ARC_TO_NV, "GL_RELATIVE_LARGE_CW_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV, "GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV");
    GL_NV_path_rendering.put(GL_AFFINE_3D_NV, "GL_AFFINE_3D_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_MODE_NV, "GL_PATH_GEN_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_TERMINAL_DASH_CAP_NV, "GL_PATH_TERMINAL_DASH_CAP_NV");
    GL_NV_path_rendering.put(GL_FONT_UNAVAILABLE_NV, "GL_FONT_UNAVAILABLE_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_COVER_MODE_NV, "GL_PATH_STROKE_COVER_MODE_NV");
    GL_NV_path_rendering.put(GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV, "GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV");
    GL_NV_path_rendering.put(GL_PATH_DASH_ARRAY_COUNT_NV, "GL_PATH_DASH_ARRAY_COUNT_NV");
    GL_NV_path_rendering.put(GL_PATH_COVER_DEPTH_FUNC_NV, "GL_PATH_COVER_DEPTH_FUNC_NV");
    GL_NV_path_rendering.put(GL_PATH_OBJECT_BOUNDING_BOX_NV, "GL_PATH_OBJECT_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV, "GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_CONIC_CURVE_TO_NV, "GL_CONIC_CURVE_TO_NV");
    GL_NV_path_rendering.put(GL_PATH_STROKE_BOUNDING_BOX_NV, "GL_PATH_STROKE_BOUNDING_BOX_NV");
    GL_NV_path_rendering.put(GL_FONT_X_MAX_BOUNDS_BIT_NV, "GL_FONT_X_MAX_BOUNDS_BIT_NV");
    GL_NV_path_rendering.put(GL_PATH_GEN_COMPONENTS_NV, "GL_PATH_GEN_COMPONENTS_NV");
    GL_NV_path_rendering.put(GL_SECONDARY_COLOR_NV, "GL_SECONDARY_COLOR_NV");
    GL_NV_path_rendering.put(GL_COUNT_UP_NV, "GL_COUNT_UP_NV");
    GL_NV_path_rendering.put(GL_ARC_TO_NV, "GL_ARC_TO_NV");
    GL_NV_path_rendering.put(GL_FONT_ASCENDER_BIT_NV, "GL_FONT_ASCENDER_BIT_NV");
    GL_NV_path_rendering.put(GL_ROUNDED_RECT2_NV, "GL_ROUNDED_RECT2_NV");
    GL_NV_path_rendering.put(GL_PATH_INITIAL_END_CAP_NV, "GL_PATH_INITIAL_END_CAP_NV");
    GL_NV_path_rendering.put(GL_GLYPH_WIDTH_BIT_NV, "GL_GLYPH_WIDTH_BIT_NV");
    GL_NV_path_rendering.put(GL_MOVE_TO_CONTINUES_NV, "GL_MOVE_TO_CONTINUES_NV");
    GL_NV_path_rendering.put(GL_ACCUM_ADJACENT_PAIRS_NV, "GL_ACCUM_ADJACENT_PAIRS_NV");
    return GL_NV_path_rendering;
  }
  private static Map<Integer, String> GL_APPLE_element_array;
  private static Map<Integer, String> GL_APPLE_element_array() {
    if (GL_APPLE_element_array != null)
      return GL_APPLE_element_array;
    GL_APPLE_element_array = new HashMap<Integer, String>(3);
    GL_APPLE_element_array.put(GL_ELEMENT_ARRAY_APPLE, "GL_ELEMENT_ARRAY_APPLE");
    GL_APPLE_element_array.put(GL_ELEMENT_ARRAY_POINTER_APPLE, "GL_ELEMENT_ARRAY_POINTER_APPLE");
    GL_APPLE_element_array.put(GL_ELEMENT_ARRAY_TYPE_APPLE, "GL_ELEMENT_ARRAY_TYPE_APPLE");
    return GL_APPLE_element_array;
  }
  private static Map<Integer, String> GL_ARB_separate_shader_objects;
  private static Map<Integer, String> GL_ARB_separate_shader_objects() {
    if (GL_ARB_separate_shader_objects != null)
      return GL_ARB_separate_shader_objects;
    GL_ARB_separate_shader_objects = new HashMap<Integer, String>(9);
    GL_ARB_separate_shader_objects.put(GL_ALL_SHADER_BITS, "GL_ALL_SHADER_BITS");
    GL_ARB_separate_shader_objects.put(GL_TESS_CONTROL_SHADER_BIT, "GL_TESS_CONTROL_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_PROGRAM_SEPARABLE, "GL_PROGRAM_SEPARABLE");
    GL_ARB_separate_shader_objects.put(GL_GEOMETRY_SHADER_BIT, "GL_GEOMETRY_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_PROGRAM_PIPELINE_BINDING, "GL_PROGRAM_PIPELINE_BINDING");
    GL_ARB_separate_shader_objects.put(GL_FRAGMENT_SHADER_BIT, "GL_FRAGMENT_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_TESS_EVALUATION_SHADER_BIT, "GL_TESS_EVALUATION_SHADER_BIT");
    GL_ARB_separate_shader_objects.put(GL_ACTIVE_PROGRAM, "GL_ACTIVE_PROGRAM");
    GL_ARB_separate_shader_objects.put(GL_VERTEX_SHADER_BIT, "GL_VERTEX_SHADER_BIT");
    return GL_ARB_separate_shader_objects;
  }
  private static Map<Integer, String> GL_ARB_cl_event;
  private static Map<Integer, String> GL_ARB_cl_event() {
    if (GL_ARB_cl_event != null)
      return GL_ARB_cl_event;
    GL_ARB_cl_event = new HashMap<Integer, String>(2);
    GL_ARB_cl_event.put(GL_SYNC_CL_EVENT_ARB, "GL_SYNC_CL_EVENT_ARB");
    GL_ARB_cl_event.put(GL_SYNC_CL_EVENT_COMPLETE_ARB, "GL_SYNC_CL_EVENT_COMPLETE_ARB");
    return GL_ARB_cl_event;
  }
  private static Map<Integer, String> GL_EXT_index_material;
  private static Map<Integer, String> GL_EXT_index_material() {
    if (GL_EXT_index_material != null)
      return GL_EXT_index_material;
    GL_EXT_index_material = new HashMap<Integer, String>(3);
    GL_EXT_index_material.put(GL_INDEX_MATERIAL_EXT, "GL_INDEX_MATERIAL_EXT");
    GL_EXT_index_material.put(GL_INDEX_MATERIAL_FACE_EXT, "GL_INDEX_MATERIAL_FACE_EXT");
    GL_EXT_index_material.put(GL_INDEX_MATERIAL_PARAMETER_EXT, "GL_INDEX_MATERIAL_PARAMETER_EXT");
    return GL_EXT_index_material;
  }
  private static Map<Integer, String> GL_ARB_color_buffer_float;
  private static Map<Integer, String> GL_ARB_color_buffer_float() {
    if (GL_ARB_color_buffer_float != null)
      return GL_ARB_color_buffer_float;
    GL_ARB_color_buffer_float = new HashMap<Integer, String>(5);
    GL_ARB_color_buffer_float.put(GL_RGBA_FLOAT_MODE_ARB, "GL_RGBA_FLOAT_MODE_ARB");
    GL_ARB_color_buffer_float.put(GL_CLAMP_VERTEX_COLOR_ARB, "GL_CLAMP_VERTEX_COLOR_ARB");
    GL_ARB_color_buffer_float.put(GL_CLAMP_FRAGMENT_COLOR_ARB, "GL_CLAMP_FRAGMENT_COLOR_ARB");
    GL_ARB_color_buffer_float.put(GL_FIXED_ONLY_ARB, "GL_FIXED_ONLY_ARB");
    GL_ARB_color_buffer_float.put(GL_CLAMP_READ_COLOR_ARB, "GL_CLAMP_READ_COLOR_ARB");
    return GL_ARB_color_buffer_float;
  }
  private static Map<Integer, String> GL_OES_tessellation_shader;
  private static Map<Integer, String> GL_OES_tessellation_shader() {
    if (GL_OES_tessellation_shader != null)
      return GL_OES_tessellation_shader;
    GL_OES_tessellation_shader = new HashMap<Integer, String>(47);
    GL_OES_tessellation_shader.put(GL_ISOLINES_OES, "GL_ISOLINES_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_QUADS_OES, "GL_QUADS_OES");
    GL_OES_tessellation_shader.put(GL_CW, "GL_CW");
    GL_OES_tessellation_shader.put(GL_TESS_CONTROL_SHADER_OES, "GL_TESS_CONTROL_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_TESS_CONTROL_OUTPUT_VERTICES_OES, "GL_TESS_CONTROL_OUTPUT_VERTICES_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_SPACING_OES, "GL_TESS_GEN_SPACING_OES");
    GL_OES_tessellation_shader.put(GL_FRACTIONAL_ODD_OES, "GL_FRACTIONAL_ODD_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_TRIANGLES, "GL_TRIANGLES");
    GL_OES_tessellation_shader.put(GL_MAX_PATCH_VERTICES_OES, "GL_MAX_PATCH_VERTICES_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_POINT_MODE_OES, "GL_TESS_GEN_POINT_MODE_OES");
    GL_OES_tessellation_shader.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES");
    GL_OES_tessellation_shader.put(GL_CCW, "GL_CCW");
    GL_OES_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_OES, "GL_TESS_EVALUATION_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_VERTEX_ORDER_OES, "GL_TESS_GEN_VERTEX_ORDER_OES");
    GL_OES_tessellation_shader.put(GL_EQUAL, "GL_EQUAL");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_IS_PER_PATCH_OES, "GL_IS_PER_PATCH_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_PATCHES_OES, "GL_PATCHES_OES");
    GL_OES_tessellation_shader.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES");
    GL_OES_tessellation_shader.put(GL_FRACTIONAL_EVEN_OES, "GL_FRACTIONAL_EVEN_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES");
    GL_OES_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_BIT_OES, "GL_TESS_EVALUATION_SHADER_BIT_OES");
    GL_OES_tessellation_shader.put(GL_TESS_GEN_MODE_OES, "GL_TESS_GEN_MODE_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_PATCH_COMPONENTS_OES, "GL_MAX_TESS_PATCH_COMPONENTS_OES");
    GL_OES_tessellation_shader.put(GL_TESS_CONTROL_SHADER_BIT_OES, "GL_TESS_CONTROL_SHADER_BIT_OES");
    GL_OES_tessellation_shader.put(GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_GEN_LEVEL_OES, "GL_MAX_TESS_GEN_LEVEL_OES");
    GL_OES_tessellation_shader.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES, "GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES");
    GL_OES_tessellation_shader.put(GL_PATCH_VERTICES_OES, "GL_PATCH_VERTICES_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES");
    GL_OES_tessellation_shader.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES");
    return GL_OES_tessellation_shader;
  }
  private static Map<Integer, String> GL_SUN_mesh_array;
  private static Map<Integer, String> GL_SUN_mesh_array() {
    if (GL_SUN_mesh_array != null)
      return GL_SUN_mesh_array;
    GL_SUN_mesh_array = new HashMap<Integer, String>(2);
    GL_SUN_mesh_array.put(GL_TRIANGLE_MESH_SUN, "GL_TRIANGLE_MESH_SUN");
    GL_SUN_mesh_array.put(GL_QUAD_MESH_SUN, "GL_QUAD_MESH_SUN");
    return GL_SUN_mesh_array;
  }
  private static Map<Integer, String> GL_APPLE_vertex_array_object;
  private static Map<Integer, String> GL_APPLE_vertex_array_object() {
    if (GL_APPLE_vertex_array_object != null)
      return GL_APPLE_vertex_array_object;
    GL_APPLE_vertex_array_object = new HashMap<Integer, String>(1);
    GL_APPLE_vertex_array_object.put(GL_VERTEX_ARRAY_BINDING_APPLE, "GL_VERTEX_ARRAY_BINDING_APPLE");
    return GL_APPLE_vertex_array_object;
  }
  private static Map<Integer, String> GL_EXT_semaphore_fd;
  private static Map<Integer, String> GL_EXT_semaphore_fd() {
    if (GL_EXT_semaphore_fd != null)
      return GL_EXT_semaphore_fd;
    GL_EXT_semaphore_fd = new HashMap<Integer, String>(1);
    GL_EXT_semaphore_fd.put(GL_HANDLE_TYPE_OPAQUE_FD_EXT, "GL_HANDLE_TYPE_OPAQUE_FD_EXT");
    return GL_EXT_semaphore_fd;
  }
  private static Map<Integer, String> GL_NV_framebuffer_mixed_samples;
  private static Map<Integer, String> GL_NV_framebuffer_mixed_samples() {
    if (GL_NV_framebuffer_mixed_samples != null)
      return GL_NV_framebuffer_mixed_samples;
    GL_NV_framebuffer_mixed_samples = new HashMap<Integer, String>(14);
    GL_NV_framebuffer_mixed_samples.put(GL_RASTER_MULTISAMPLE_EXT, "GL_RASTER_MULTISAMPLE_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_COVERAGE_MODULATION_TABLE_NV, "GL_COVERAGE_MODULATION_TABLE_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_EFFECTIVE_RASTER_SAMPLES_EXT, "GL_EFFECTIVE_RASTER_SAMPLES_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_DEPTH_SAMPLES_NV, "GL_DEPTH_SAMPLES_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_MAX_RASTER_SAMPLES_EXT, "GL_MAX_RASTER_SAMPLES_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT, "GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV, "GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV, "GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_STENCIL_SAMPLES_NV, "GL_STENCIL_SAMPLES_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_COVERAGE_MODULATION_NV, "GL_COVERAGE_MODULATION_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT, "GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_RASTER_SAMPLES_EXT, "GL_RASTER_SAMPLES_EXT");
    GL_NV_framebuffer_mixed_samples.put(GL_COLOR_SAMPLES_NV, "GL_COLOR_SAMPLES_NV");
    GL_NV_framebuffer_mixed_samples.put(GL_COVERAGE_MODULATION_TABLE_SIZE_NV, "GL_COVERAGE_MODULATION_TABLE_SIZE_NV");
    return GL_NV_framebuffer_mixed_samples;
  }
  private static Map<Integer, String> GL_NV_blend_equation_advanced;
  private static Map<Integer, String> GL_NV_blend_equation_advanced() {
    if (GL_NV_blend_equation_advanced != null)
      return GL_NV_blend_equation_advanced;
    GL_NV_blend_equation_advanced = new HashMap<Integer, String>(51);
    GL_NV_blend_equation_advanced.put(GL_SRC_OVER_NV, "GL_SRC_OVER_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_NV, "GL_PLUS_NV");
    GL_NV_blend_equation_advanced.put(GL_XOR_NV, "GL_XOR_NV");
    GL_NV_blend_equation_advanced.put(GL_DISJOINT_NV, "GL_DISJOINT_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_SATURATION_NV, "GL_HSL_SATURATION_NV");
    GL_NV_blend_equation_advanced.put(GL_PINLIGHT_NV, "GL_PINLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_CONJOINT_NV, "GL_CONJOINT_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_LUMINOSITY_NV, "GL_HSL_LUMINOSITY_NV");
    GL_NV_blend_equation_advanced.put(GL_HARDMIX_NV, "GL_HARDMIX_NV");
    GL_NV_blend_equation_advanced.put(GL_OVERLAY_NV, "GL_OVERLAY_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_ATOP_NV, "GL_DST_ATOP_NV");
    GL_NV_blend_equation_advanced.put(GL_ZERO, "GL_ZERO");
    GL_NV_blend_equation_advanced.put(GL_CONTRAST_NV, "GL_CONTRAST_NV");
    GL_NV_blend_equation_advanced.put(GL_DIFFERENCE_NV, "GL_DIFFERENCE_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_NV, "GL_SRC_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_OVER_NV, "GL_DST_OVER_NV");
    GL_NV_blend_equation_advanced.put(GL_SOFTLIGHT_NV, "GL_SOFTLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_HUE_NV, "GL_HSL_HUE_NV");
    GL_NV_blend_equation_advanced.put(GL_INVERT, "GL_INVERT");
    GL_NV_blend_equation_advanced.put(GL_DST_NV, "GL_DST_NV");
    GL_NV_blend_equation_advanced.put(GL_INVERT_OVG_NV, "GL_INVERT_OVG_NV");
    GL_NV_blend_equation_advanced.put(GL_GREEN_NV, "GL_GREEN_NV");
    GL_NV_blend_equation_advanced.put(GL_LIGHTEN_NV, "GL_LIGHTEN_NV");
    GL_NV_blend_equation_advanced.put(GL_EXCLUSION_NV, "GL_EXCLUSION_NV");
    GL_NV_blend_equation_advanced.put(GL_MINUS_NV, "GL_MINUS_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_IN_NV, "GL_DST_IN_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_IN_NV, "GL_SRC_IN_NV");
    GL_NV_blend_equation_advanced.put(GL_COLORBURN_NV, "GL_COLORBURN_NV");
    GL_NV_blend_equation_advanced.put(GL_MULTIPLY_NV, "GL_MULTIPLY_NV");
    GL_NV_blend_equation_advanced.put(GL_BLEND_OVERLAP_NV, "GL_BLEND_OVERLAP_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_CLAMPED_NV, "GL_PLUS_CLAMPED_NV");
    GL_NV_blend_equation_advanced.put(GL_COLORDODGE_NV, "GL_COLORDODGE_NV");
    GL_NV_blend_equation_advanced.put(GL_UNCORRELATED_NV, "GL_UNCORRELATED_NV");
    GL_NV_blend_equation_advanced.put(GL_LINEARLIGHT_NV, "GL_LINEARLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_SCREEN_NV, "GL_SCREEN_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_OUT_NV, "GL_SRC_OUT_NV");
    GL_NV_blend_equation_advanced.put(GL_LINEARDODGE_NV, "GL_LINEARDODGE_NV");
    GL_NV_blend_equation_advanced.put(GL_BLEND_PREMULTIPLIED_SRC_NV, "GL_BLEND_PREMULTIPLIED_SRC_NV");
    GL_NV_blend_equation_advanced.put(GL_HARDLIGHT_NV, "GL_HARDLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_LINEARBURN_NV, "GL_LINEARBURN_NV");
    GL_NV_blend_equation_advanced.put(GL_BLUE_NV, "GL_BLUE_NV");
    GL_NV_blend_equation_advanced.put(GL_MINUS_CLAMPED_NV, "GL_MINUS_CLAMPED_NV");
    GL_NV_blend_equation_advanced.put(GL_RED_NV, "GL_RED_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_DARKER_NV, "GL_PLUS_DARKER_NV");
    GL_NV_blend_equation_advanced.put(GL_HSL_COLOR_NV, "GL_HSL_COLOR_NV");
    GL_NV_blend_equation_advanced.put(GL_DST_OUT_NV, "GL_DST_OUT_NV");
    GL_NV_blend_equation_advanced.put(GL_PLUS_CLAMPED_ALPHA_NV, "GL_PLUS_CLAMPED_ALPHA_NV");
    GL_NV_blend_equation_advanced.put(GL_SRC_ATOP_NV, "GL_SRC_ATOP_NV");
    GL_NV_blend_equation_advanced.put(GL_DARKEN_NV, "GL_DARKEN_NV");
    GL_NV_blend_equation_advanced.put(GL_VIVIDLIGHT_NV, "GL_VIVIDLIGHT_NV");
    GL_NV_blend_equation_advanced.put(GL_INVERT_RGB_NV, "GL_INVERT_RGB_NV");
    return GL_NV_blend_equation_advanced;
  }
  private static Map<Integer, String> GL_SGIX_pixel_texture;
  private static Map<Integer, String> GL_SGIX_pixel_texture() {
    if (GL_SGIX_pixel_texture != null)
      return GL_SGIX_pixel_texture;
    GL_SGIX_pixel_texture = new HashMap<Integer, String>(2);
    GL_SGIX_pixel_texture.put(GL_PIXEL_TEX_GEN_MODE_SGIX, "GL_PIXEL_TEX_GEN_MODE_SGIX");
    GL_SGIX_pixel_texture.put(GL_PIXEL_TEX_GEN_SGIX, "GL_PIXEL_TEX_GEN_SGIX");
    return GL_SGIX_pixel_texture;
  }
  private static Map<Integer, String> GL_EXT_index_func;
  private static Map<Integer, String> GL_EXT_index_func() {
    if (GL_EXT_index_func != null)
      return GL_EXT_index_func;
    GL_EXT_index_func = new HashMap<Integer, String>(3);
    GL_EXT_index_func.put(GL_INDEX_TEST_EXT, "GL_INDEX_TEST_EXT");
    GL_EXT_index_func.put(GL_INDEX_TEST_FUNC_EXT, "GL_INDEX_TEST_FUNC_EXT");
    GL_EXT_index_func.put(GL_INDEX_TEST_REF_EXT, "GL_INDEX_TEST_REF_EXT");
    return GL_EXT_index_func;
  }
  private static Map<Integer, String> GL_APPLE_sync;
  private static Map<Integer, String> GL_APPLE_sync() {
    if (GL_APPLE_sync != null)
      return GL_APPLE_sync;
    GL_APPLE_sync = new HashMap<Integer, String>(16);
    GL_APPLE_sync.put(GL_CONDITION_SATISFIED_APPLE, "GL_CONDITION_SATISFIED_APPLE");
    GL_APPLE_sync.put(GL_WAIT_FAILED_APPLE, "GL_WAIT_FAILED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_FLAGS_APPLE, "GL_SYNC_FLAGS_APPLE");
    GL_APPLE_sync.put(GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE, "GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE");
    GL_APPLE_sync.put(GL_SIGNALED_APPLE, "GL_SIGNALED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_OBJECT_APPLE, "GL_SYNC_OBJECT_APPLE");
    GL_APPLE_sync.put(GL_MAX_SERVER_WAIT_TIMEOUT_APPLE, "GL_MAX_SERVER_WAIT_TIMEOUT_APPLE");
    GL_APPLE_sync.put(GL_ALREADY_SIGNALED_APPLE, "GL_ALREADY_SIGNALED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_CONDITION_APPLE, "GL_SYNC_CONDITION_APPLE");
    GL_APPLE_sync.put(GL_SYNC_STATUS_APPLE, "GL_SYNC_STATUS_APPLE");
    GL_APPLE_sync.put(GL_TIMEOUT_EXPIRED_APPLE, "GL_TIMEOUT_EXPIRED_APPLE");
    GL_APPLE_sync.put(GL_OBJECT_TYPE_APPLE, "GL_OBJECT_TYPE_APPLE");
    GL_APPLE_sync.put(GL_SYNC_FENCE_APPLE, "GL_SYNC_FENCE_APPLE");
    GL_APPLE_sync.put(GL_UNSIGNALED_APPLE, "GL_UNSIGNALED_APPLE");
    GL_APPLE_sync.put(GL_SYNC_FLUSH_COMMANDS_BIT_APPLE, "GL_SYNC_FLUSH_COMMANDS_BIT_APPLE");
    GL_APPLE_sync.put(GL_TIMEOUT_IGNORED_APPLE, "GL_TIMEOUT_IGNORED_APPLE");
    return GL_APPLE_sync;
  }
  private static Map<Integer, String> GL_ATI_draw_buffers;
  private static Map<Integer, String> GL_ATI_draw_buffers() {
    if (GL_ATI_draw_buffers != null)
      return GL_ATI_draw_buffers;
    GL_ATI_draw_buffers = new HashMap<Integer, String>(17);
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER11_ATI, "GL_DRAW_BUFFER11_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER4_ATI, "GL_DRAW_BUFFER4_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER2_ATI, "GL_DRAW_BUFFER2_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER6_ATI, "GL_DRAW_BUFFER6_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER8_ATI, "GL_DRAW_BUFFER8_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER13_ATI, "GL_DRAW_BUFFER13_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER15_ATI, "GL_DRAW_BUFFER15_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER12_ATI, "GL_DRAW_BUFFER12_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER3_ATI, "GL_DRAW_BUFFER3_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER5_ATI, "GL_DRAW_BUFFER5_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER0_ATI, "GL_DRAW_BUFFER0_ATI");
    GL_ATI_draw_buffers.put(GL_MAX_DRAW_BUFFERS_ATI, "GL_MAX_DRAW_BUFFERS_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER1_ATI, "GL_DRAW_BUFFER1_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER7_ATI, "GL_DRAW_BUFFER7_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER10_ATI, "GL_DRAW_BUFFER10_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER14_ATI, "GL_DRAW_BUFFER14_ATI");
    GL_ATI_draw_buffers.put(GL_DRAW_BUFFER9_ATI, "GL_DRAW_BUFFER9_ATI");
    return GL_ATI_draw_buffers;
  }
  private static Map<Integer, String> GL_EXT_buffer_storage;
  private static Map<Integer, String> GL_EXT_buffer_storage() {
    if (GL_EXT_buffer_storage != null)
      return GL_EXT_buffer_storage;
    GL_EXT_buffer_storage = new HashMap<Integer, String>(9);
    GL_EXT_buffer_storage.put(GL_MAP_PERSISTENT_BIT_EXT, "GL_MAP_PERSISTENT_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_DYNAMIC_STORAGE_BIT_EXT, "GL_DYNAMIC_STORAGE_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_CLIENT_STORAGE_BIT_EXT, "GL_CLIENT_STORAGE_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_BUFFER_IMMUTABLE_STORAGE_EXT, "GL_BUFFER_IMMUTABLE_STORAGE_EXT");
    GL_EXT_buffer_storage.put(GL_MAP_COHERENT_BIT_EXT, "GL_MAP_COHERENT_BIT_EXT");
    GL_EXT_buffer_storage.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    GL_EXT_buffer_storage.put(GL_BUFFER_STORAGE_FLAGS_EXT, "GL_BUFFER_STORAGE_FLAGS_EXT");
    GL_EXT_buffer_storage.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    return GL_EXT_buffer_storage;
  }
  private static Map<Integer, String> GL_AMD_stencil_operation_extended;
  private static Map<Integer, String> GL_AMD_stencil_operation_extended() {
    if (GL_AMD_stencil_operation_extended != null)
      return GL_AMD_stencil_operation_extended;
    GL_AMD_stencil_operation_extended = new HashMap<Integer, String>(4);
    GL_AMD_stencil_operation_extended.put(GL_REPLACE_VALUE_AMD, "GL_REPLACE_VALUE_AMD");
    GL_AMD_stencil_operation_extended.put(GL_STENCIL_BACK_OP_VALUE_AMD, "GL_STENCIL_BACK_OP_VALUE_AMD");
    GL_AMD_stencil_operation_extended.put(GL_STENCIL_OP_VALUE_AMD, "GL_STENCIL_OP_VALUE_AMD");
    GL_AMD_stencil_operation_extended.put(GL_SET_AMD, "GL_SET_AMD");
    return GL_AMD_stencil_operation_extended;
  }
  private static Map<Integer, String> GL_OES_draw_buffers_indexed;
  private static Map<Integer, String> GL_OES_draw_buffers_indexed() {
    if (GL_OES_draw_buffers_indexed != null)
      return GL_OES_draw_buffers_indexed;
    GL_OES_draw_buffers_indexed = new HashMap<Integer, String>(36);
    GL_OES_draw_buffers_indexed.put(GL_SRC_COLOR, "GL_SRC_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_COLOR, "GL_ONE_MINUS_SRC_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_VIEWPORT_BOUNDS_RANGE_OES, "GL_VIEWPORT_BOUNDS_RANGE_OES");
    GL_OES_draw_buffers_indexed.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    GL_OES_draw_buffers_indexed.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GL_OES_draw_buffers_indexed.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_DST_COLOR, "GL_ONE_MINUS_DST_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_EQUATION_ALPHA, "GL_BLEND_EQUATION_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_SRC_RGB, "GL_BLEND_SRC_RGB");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_DST_ALPHA, "GL_BLEND_DST_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_OES_draw_buffers_indexed.put(GL_DST_COLOR, "GL_DST_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_OES_draw_buffers_indexed.put(GL_MIN, "GL_MIN");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_SRC_ALPHA, "GL_BLEND_SRC_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_EQUATION_RGB, "GL_BLEND_EQUATION_RGB");
    GL_OES_draw_buffers_indexed.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    GL_OES_draw_buffers_indexed.put(GL_BLEND_DST_RGB, "GL_BLEND_DST_RGB");
    GL_OES_draw_buffers_indexed.put(GL_MAX, "GL_MAX");
    GL_OES_draw_buffers_indexed.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES");
    GL_OES_draw_buffers_indexed.put(GL_ZERO, "GL_ZERO");
    GL_OES_draw_buffers_indexed.put(GL_ONE, "GL_ONE");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_SRC_ALPHA, "GL_ONE_MINUS_SRC_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_DST_ALPHA, "GL_DST_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_VIEWPORT_SUBPIXEL_BITS_OES, "GL_VIEWPORT_SUBPIXEL_BITS_OES");
    GL_OES_draw_buffers_indexed.put(GL_COLOR_WRITEMASK, "GL_COLOR_WRITEMASK");
    GL_OES_draw_buffers_indexed.put(GL_BLEND, "GL_BLEND");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_DST_ALPHA, "GL_ONE_MINUS_DST_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_SRC_ALPHA, "GL_SRC_ALPHA");
    GL_OES_draw_buffers_indexed.put(GL_MAX_VIEWPORTS_OES, "GL_MAX_VIEWPORTS_OES");
    GL_OES_draw_buffers_indexed.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    GL_OES_draw_buffers_indexed.put(GL_SRC_ALPHA_SATURATE, "GL_SRC_ALPHA_SATURATE");
    return GL_OES_draw_buffers_indexed;
  }
  private static Map<Integer, String> GL_NV_texture_multisample;
  private static Map<Integer, String> GL_NV_texture_multisample() {
    if (GL_NV_texture_multisample != null)
      return GL_NV_texture_multisample;
    GL_NV_texture_multisample = new HashMap<Integer, String>(2);
    GL_NV_texture_multisample.put(GL_TEXTURE_COLOR_SAMPLES_NV, "GL_TEXTURE_COLOR_SAMPLES_NV");
    GL_NV_texture_multisample.put(GL_TEXTURE_COVERAGE_SAMPLES_NV, "GL_TEXTURE_COVERAGE_SAMPLES_NV");
    return GL_NV_texture_multisample;
  }
  private static Map<Integer, String> GL_ANGLE_framebuffer_multisample;
  private static Map<Integer, String> GL_ANGLE_framebuffer_multisample() {
    if (GL_ANGLE_framebuffer_multisample != null)
      return GL_ANGLE_framebuffer_multisample;
    GL_ANGLE_framebuffer_multisample = new HashMap<Integer, String>(3);
    GL_ANGLE_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE");
    GL_ANGLE_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_ANGLE, "GL_RENDERBUFFER_SAMPLES_ANGLE");
    GL_ANGLE_framebuffer_multisample.put(GL_MAX_SAMPLES_ANGLE, "GL_MAX_SAMPLES_ANGLE");
    return GL_ANGLE_framebuffer_multisample;
  }
  private static Map<Integer, String> GL_PGI_misc_hints;
  private static Map<Integer, String> GL_PGI_misc_hints() {
    if (GL_PGI_misc_hints != null)
      return GL_PGI_misc_hints;
    GL_PGI_misc_hints = new HashMap<Integer, String>(20);
    GL_PGI_misc_hints.put(GL_NATIVE_GRAPHICS_HANDLE_PGI, "GL_NATIVE_GRAPHICS_HANDLE_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_WIN_HINT_PGI, "GL_ALLOW_DRAW_WIN_HINT_PGI");
    GL_PGI_misc_hints.put(GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI");
    GL_PGI_misc_hints.put(GL_NATIVE_GRAPHICS_END_HINT_PGI, "GL_NATIVE_GRAPHICS_END_HINT_PGI");
    GL_PGI_misc_hints.put(GL_WIDE_LINE_HINT_PGI, "GL_WIDE_LINE_HINT_PGI");
    GL_PGI_misc_hints.put(GL_CONSERVE_MEMORY_HINT_PGI, "GL_CONSERVE_MEMORY_HINT_PGI");
    GL_PGI_misc_hints.put(GL_STRICT_SCISSOR_HINT_PGI, "GL_STRICT_SCISSOR_HINT_PGI");
    GL_PGI_misc_hints.put(GL_CLIP_NEAR_HINT_PGI, "GL_CLIP_NEAR_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALWAYS_SOFT_HINT_PGI, "GL_ALWAYS_SOFT_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_FRG_HINT_PGI, "GL_ALLOW_DRAW_FRG_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_MEM_HINT_PGI, "GL_ALLOW_DRAW_MEM_HINT_PGI");
    GL_PGI_misc_hints.put(GL_RECLAIM_MEMORY_HINT_PGI, "GL_RECLAIM_MEMORY_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALWAYS_FAST_HINT_PGI, "GL_ALWAYS_FAST_HINT_PGI");
    GL_PGI_misc_hints.put(GL_FULL_STIPPLE_HINT_PGI, "GL_FULL_STIPPLE_HINT_PGI");
    GL_PGI_misc_hints.put(GL_PREFER_DOUBLEBUFFER_HINT_PGI, "GL_PREFER_DOUBLEBUFFER_HINT_PGI");
    GL_PGI_misc_hints.put(GL_BACK_NORMALS_HINT_PGI, "GL_BACK_NORMALS_HINT_PGI");
    GL_PGI_misc_hints.put(GL_STRICT_DEPTHFUNC_HINT_PGI, "GL_STRICT_DEPTHFUNC_HINT_PGI");
    GL_PGI_misc_hints.put(GL_STRICT_LIGHTING_HINT_PGI, "GL_STRICT_LIGHTING_HINT_PGI");
    GL_PGI_misc_hints.put(GL_CLIP_FAR_HINT_PGI, "GL_CLIP_FAR_HINT_PGI");
    GL_PGI_misc_hints.put(GL_ALLOW_DRAW_OBJ_HINT_PGI, "GL_ALLOW_DRAW_OBJ_HINT_PGI");
    return GL_PGI_misc_hints;
  }
  private static Map<Integer, String> GL_NV_geometry_program4;
  private static Map<Integer, String> GL_NV_geometry_program4() {
    if (GL_NV_geometry_program4 != null)
      return GL_NV_geometry_program4;
    GL_NV_geometry_program4 = new HashMap<Integer, String>(16);
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_NV_geometry_program4.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_NV_geometry_program4.put(GL_GEOMETRY_OUTPUT_TYPE_EXT, "GL_GEOMETRY_OUTPUT_TYPE_EXT");
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_NV_geometry_program4.put(GL_PROGRAM_POINT_SIZE_EXT, "GL_PROGRAM_POINT_SIZE_EXT");
    GL_NV_geometry_program4.put(GL_MAX_PROGRAM_OUTPUT_VERTICES_NV, "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV");
    GL_NV_geometry_program4.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_GEOMETRY_VERTICES_OUT_EXT, "GL_GEOMETRY_VERTICES_OUT_EXT");
    GL_NV_geometry_program4.put(GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV, "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV");
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_NV_geometry_program4.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
    GL_NV_geometry_program4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT");
    GL_NV_geometry_program4.put(GL_GEOMETRY_PROGRAM_NV, "GL_GEOMETRY_PROGRAM_NV");
    GL_NV_geometry_program4.put(GL_GEOMETRY_INPUT_TYPE_EXT, "GL_GEOMETRY_INPUT_TYPE_EXT");
    return GL_NV_geometry_program4;
  }
  private static Map<Integer, String> GL_NV_conservative_raster_dilate;
  private static Map<Integer, String> GL_NV_conservative_raster_dilate() {
    if (GL_NV_conservative_raster_dilate != null)
      return GL_NV_conservative_raster_dilate;
    GL_NV_conservative_raster_dilate = new HashMap<Integer, String>(3);
    GL_NV_conservative_raster_dilate.put(GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV, "GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV");
    GL_NV_conservative_raster_dilate.put(GL_CONSERVATIVE_RASTER_DILATE_NV, "GL_CONSERVATIVE_RASTER_DILATE_NV");
    GL_NV_conservative_raster_dilate.put(GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV, "GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV");
    return GL_NV_conservative_raster_dilate;
  }
  private static Map<Integer, String> GL_ARB_draw_buffers;
  private static Map<Integer, String> GL_ARB_draw_buffers() {
    if (GL_ARB_draw_buffers != null)
      return GL_ARB_draw_buffers;
    GL_ARB_draw_buffers = new HashMap<Integer, String>(17);
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER6_ARB, "GL_DRAW_BUFFER6_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER13_ARB, "GL_DRAW_BUFFER13_ARB");
    GL_ARB_draw_buffers.put(GL_MAX_DRAW_BUFFERS_ARB, "GL_MAX_DRAW_BUFFERS_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER15_ARB, "GL_DRAW_BUFFER15_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER11_ARB, "GL_DRAW_BUFFER11_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER8_ARB, "GL_DRAW_BUFFER8_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER4_ARB, "GL_DRAW_BUFFER4_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER2_ARB, "GL_DRAW_BUFFER2_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER0_ARB, "GL_DRAW_BUFFER0_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER14_ARB, "GL_DRAW_BUFFER14_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER9_ARB, "GL_DRAW_BUFFER9_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER7_ARB, "GL_DRAW_BUFFER7_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER12_ARB, "GL_DRAW_BUFFER12_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER1_ARB, "GL_DRAW_BUFFER1_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER5_ARB, "GL_DRAW_BUFFER5_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER10_ARB, "GL_DRAW_BUFFER10_ARB");
    GL_ARB_draw_buffers.put(GL_DRAW_BUFFER3_ARB, "GL_DRAW_BUFFER3_ARB");
    return GL_ARB_draw_buffers;
  }
  private static Map<Integer, String> GL_OES_matrix_palette;
  private static Map<Integer, String> GL_OES_matrix_palette() {
    if (GL_OES_matrix_palette != null)
      return GL_OES_matrix_palette;
    GL_OES_matrix_palette = new HashMap<Integer, String>(16);
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_OES, "GL_MATRIX_INDEX_ARRAY_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_BUFFER_BINDING_OES, "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_OES, "GL_WEIGHT_ARRAY_OES");
    GL_OES_matrix_palette.put(GL_MAX_PALETTE_MATRICES_OES, "GL_MAX_PALETTE_MATRICES_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_STRIDE_OES, "GL_MATRIX_INDEX_ARRAY_STRIDE_OES");
    GL_OES_matrix_palette.put(GL_MAX_VERTEX_UNITS_OES, "GL_MAX_VERTEX_UNITS_OES");
    GL_OES_matrix_palette.put(GL_CURRENT_PALETTE_MATRIX_OES, "GL_CURRENT_PALETTE_MATRIX_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_POINTER_OES, "GL_MATRIX_INDEX_ARRAY_POINTER_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_SIZE_OES, "GL_WEIGHT_ARRAY_SIZE_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_STRIDE_OES, "GL_WEIGHT_ARRAY_STRIDE_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_SIZE_OES, "GL_MATRIX_INDEX_ARRAY_SIZE_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES, "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_TYPE_OES, "GL_MATRIX_INDEX_ARRAY_TYPE_OES");
    GL_OES_matrix_palette.put(GL_MATRIX_PALETTE_OES, "GL_MATRIX_PALETTE_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_TYPE_OES, "GL_WEIGHT_ARRAY_TYPE_OES");
    GL_OES_matrix_palette.put(GL_WEIGHT_ARRAY_POINTER_OES, "GL_WEIGHT_ARRAY_POINTER_OES");
    return GL_OES_matrix_palette;
  }
  private static Map<Integer, String> GL_ARB_buffer_storage;
  private static Map<Integer, String> GL_ARB_buffer_storage() {
    if (GL_ARB_buffer_storage != null)
      return GL_ARB_buffer_storage;
    GL_ARB_buffer_storage = new HashMap<Integer, String>(9);
    GL_ARB_buffer_storage.put(GL_MAP_COHERENT_BIT, "GL_MAP_COHERENT_BIT");
    GL_ARB_buffer_storage.put(GL_CLIENT_STORAGE_BIT, "GL_CLIENT_STORAGE_BIT");
    GL_ARB_buffer_storage.put(GL_DYNAMIC_STORAGE_BIT, "GL_DYNAMIC_STORAGE_BIT");
    GL_ARB_buffer_storage.put(GL_BUFFER_STORAGE_FLAGS, "GL_BUFFER_STORAGE_FLAGS");
    GL_ARB_buffer_storage.put(GL_MAP_PERSISTENT_BIT, "GL_MAP_PERSISTENT_BIT");
    GL_ARB_buffer_storage.put(GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT");
    GL_ARB_buffer_storage.put(GL_BUFFER_IMMUTABLE_STORAGE, "GL_BUFFER_IMMUTABLE_STORAGE");
    GL_ARB_buffer_storage.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    GL_ARB_buffer_storage.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    return GL_ARB_buffer_storage;
  }
  private static Map<Integer, String> GL_ARB_sample_locations;
  private static Map<Integer, String> GL_ARB_sample_locations() {
    if (GL_ARB_sample_locations != null)
      return GL_ARB_sample_locations;
    GL_ARB_sample_locations = new HashMap<Integer, String>(8);
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_ARB, "GL_SAMPLE_LOCATION_ARB");
    GL_ARB_sample_locations.put(GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB");
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB");
    GL_ARB_sample_locations.put(GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB");
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB");
    GL_ARB_sample_locations.put(GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB");
    GL_ARB_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB, "GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB");
    GL_ARB_sample_locations.put(GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB");
    return GL_ARB_sample_locations;
  }
  private static Map<Integer, String> GL_SGIX_sprite;
  private static Map<Integer, String> GL_SGIX_sprite() {
    if (GL_SGIX_sprite != null)
      return GL_SGIX_sprite;
    GL_SGIX_sprite = new HashMap<Integer, String>(7);
    GL_SGIX_sprite.put(GL_SPRITE_EYE_ALIGNED_SGIX, "GL_SPRITE_EYE_ALIGNED_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_SGIX, "GL_SPRITE_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_OBJECT_ALIGNED_SGIX, "GL_SPRITE_OBJECT_ALIGNED_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_MODE_SGIX, "GL_SPRITE_MODE_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_AXIAL_SGIX, "GL_SPRITE_AXIAL_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_AXIS_SGIX, "GL_SPRITE_AXIS_SGIX");
    GL_SGIX_sprite.put(GL_SPRITE_TRANSLATION_SGIX, "GL_SPRITE_TRANSLATION_SGIX");
    return GL_SGIX_sprite;
  }
  private static Map<Integer, String> GL_NV_half_float;
  private static Map<Integer, String> GL_NV_half_float() {
    if (GL_NV_half_float != null)
      return GL_NV_half_float;
    GL_NV_half_float = new HashMap<Integer, String>(1);
    GL_NV_half_float.put(GL_HALF_FLOAT_NV, "GL_HALF_FLOAT_NV");
    return GL_NV_half_float;
  }
  private static Map<Integer, String> GL_ARB_vertex_attrib_binding;
  private static Map<Integer, String> GL_ARB_vertex_attrib_binding() {
    if (GL_ARB_vertex_attrib_binding != null)
      return GL_ARB_vertex_attrib_binding;
    GL_ARB_vertex_attrib_binding = new HashMap<Integer, String>(7);
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_BINDING_STRIDE, "GL_VERTEX_BINDING_STRIDE");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_BINDING_DIVISOR, "GL_VERTEX_BINDING_DIVISOR");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_BINDING_OFFSET, "GL_VERTEX_BINDING_OFFSET");
    GL_ARB_vertex_attrib_binding.put(GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_ATTRIB_RELATIVE_OFFSET, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET");
    GL_ARB_vertex_attrib_binding.put(GL_MAX_VERTEX_ATTRIB_BINDINGS, "GL_MAX_VERTEX_ATTRIB_BINDINGS");
    GL_ARB_vertex_attrib_binding.put(GL_VERTEX_ATTRIB_BINDING, "GL_VERTEX_ATTRIB_BINDING");
    return GL_ARB_vertex_attrib_binding;
  }
  private static Map<Integer, String> GL_SGIS_pixel_texture;
  private static Map<Integer, String> GL_SGIS_pixel_texture() {
    if (GL_SGIS_pixel_texture != null)
      return GL_SGIS_pixel_texture;
    GL_SGIS_pixel_texture = new HashMap<Integer, String>(4);
    GL_SGIS_pixel_texture.put(GL_PIXEL_GROUP_COLOR_SGIS, "GL_PIXEL_GROUP_COLOR_SGIS");
    GL_SGIS_pixel_texture.put(GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS");
    GL_SGIS_pixel_texture.put(GL_PIXEL_TEXTURE_SGIS, "GL_PIXEL_TEXTURE_SGIS");
    GL_SGIS_pixel_texture.put(GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS");
    return GL_SGIS_pixel_texture;
  }
  private static Map<Integer, String> GL_EXT_raster_multisample;
  private static Map<Integer, String> GL_EXT_raster_multisample() {
    if (GL_EXT_raster_multisample != null)
      return GL_EXT_raster_multisample;
    GL_EXT_raster_multisample = new HashMap<Integer, String>(14);
    GL_EXT_raster_multisample.put(GL_RASTER_MULTISAMPLE_EXT, "GL_RASTER_MULTISAMPLE_EXT");
    GL_EXT_raster_multisample.put(GL_COVERAGE_MODULATION_TABLE_NV, "GL_COVERAGE_MODULATION_TABLE_NV");
    GL_EXT_raster_multisample.put(GL_EFFECTIVE_RASTER_SAMPLES_EXT, "GL_EFFECTIVE_RASTER_SAMPLES_EXT");
    GL_EXT_raster_multisample.put(GL_DEPTH_SAMPLES_NV, "GL_DEPTH_SAMPLES_NV");
    GL_EXT_raster_multisample.put(GL_MAX_RASTER_SAMPLES_EXT, "GL_MAX_RASTER_SAMPLES_EXT");
    GL_EXT_raster_multisample.put(GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT, "GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT");
    GL_EXT_raster_multisample.put(GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV, "GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV");
    GL_EXT_raster_multisample.put(GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV, "GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV");
    GL_EXT_raster_multisample.put(GL_STENCIL_SAMPLES_NV, "GL_STENCIL_SAMPLES_NV");
    GL_EXT_raster_multisample.put(GL_COVERAGE_MODULATION_NV, "GL_COVERAGE_MODULATION_NV");
    GL_EXT_raster_multisample.put(GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT, "GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT");
    GL_EXT_raster_multisample.put(GL_RASTER_SAMPLES_EXT, "GL_RASTER_SAMPLES_EXT");
    GL_EXT_raster_multisample.put(GL_COLOR_SAMPLES_NV, "GL_COLOR_SAMPLES_NV");
    GL_EXT_raster_multisample.put(GL_COVERAGE_MODULATION_TABLE_SIZE_NV, "GL_COVERAGE_MODULATION_TABLE_SIZE_NV");
    return GL_EXT_raster_multisample;
  }
  private static Map<Integer, String> GL_NV_pixel_data_range;
  private static Map<Integer, String> GL_NV_pixel_data_range() {
    if (GL_NV_pixel_data_range != null)
      return GL_NV_pixel_data_range;
    GL_NV_pixel_data_range = new HashMap<Integer, String>(6);
    GL_NV_pixel_data_range.put(GL_WRITE_PIXEL_DATA_RANGE_NV, "GL_WRITE_PIXEL_DATA_RANGE_NV");
    GL_NV_pixel_data_range.put(GL_READ_PIXEL_DATA_RANGE_LENGTH_NV, "GL_READ_PIXEL_DATA_RANGE_LENGTH_NV");
    GL_NV_pixel_data_range.put(GL_READ_PIXEL_DATA_RANGE_NV, "GL_READ_PIXEL_DATA_RANGE_NV");
    GL_NV_pixel_data_range.put(GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV, "GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV");
    GL_NV_pixel_data_range.put(GL_READ_PIXEL_DATA_RANGE_POINTER_NV, "GL_READ_PIXEL_DATA_RANGE_POINTER_NV");
    GL_NV_pixel_data_range.put(GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV, "GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV");
    return GL_NV_pixel_data_range;
  }
  private static Map<Integer, String> GL_ARB_ES2_compatibility;
  private static Map<Integer, String> GL_ARB_ES2_compatibility() {
    if (GL_ARB_ES2_compatibility != null)
      return GL_ARB_ES2_compatibility;
    GL_ARB_ES2_compatibility = new HashMap<Integer, String>(16);
    GL_ARB_ES2_compatibility.put(GL_MAX_VARYING_VECTORS, "GL_MAX_VARYING_VECTORS");
    GL_ARB_ES2_compatibility.put(GL_SHADER_BINARY_FORMATS, "GL_SHADER_BINARY_FORMATS");
    GL_ARB_ES2_compatibility.put(GL_MEDIUM_FLOAT, "GL_MEDIUM_FLOAT");
    GL_ARB_ES2_compatibility.put(GL_LOW_FLOAT, "GL_LOW_FLOAT");
    GL_ARB_ES2_compatibility.put(GL_SHADER_COMPILER, "GL_SHADER_COMPILER");
    GL_ARB_ES2_compatibility.put(GL_IMPLEMENTATION_COLOR_READ_FORMAT, "GL_IMPLEMENTATION_COLOR_READ_FORMAT");
    GL_ARB_ES2_compatibility.put(GL_HIGH_INT, "GL_HIGH_INT");
    GL_ARB_ES2_compatibility.put(GL_IMPLEMENTATION_COLOR_READ_TYPE, "GL_IMPLEMENTATION_COLOR_READ_TYPE");
    GL_ARB_ES2_compatibility.put(GL_NUM_SHADER_BINARY_FORMATS, "GL_NUM_SHADER_BINARY_FORMATS");
    GL_ARB_ES2_compatibility.put(GL_HIGH_FLOAT, "GL_HIGH_FLOAT");
    GL_ARB_ES2_compatibility.put(GL_LOW_INT, "GL_LOW_INT");
    GL_ARB_ES2_compatibility.put(GL_MEDIUM_INT, "GL_MEDIUM_INT");
    GL_ARB_ES2_compatibility.put(GL_MAX_FRAGMENT_UNIFORM_VECTORS, "GL_MAX_FRAGMENT_UNIFORM_VECTORS");
    GL_ARB_ES2_compatibility.put(GL_RGB565, "GL_RGB565");
    GL_ARB_ES2_compatibility.put(GL_MAX_VERTEX_UNIFORM_VECTORS, "GL_MAX_VERTEX_UNIFORM_VECTORS");
    GL_ARB_ES2_compatibility.put(GL_FIXED, "GL_FIXED");
    return GL_ARB_ES2_compatibility;
  }
  private static Map<Integer, String> GL_NV_viewport_array;
  private static Map<Integer, String> GL_NV_viewport_array() {
    if (GL_NV_viewport_array != null)
      return GL_NV_viewport_array;
    GL_NV_viewport_array = new HashMap<Integer, String>(8);
    GL_NV_viewport_array.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_NV_viewport_array.put(GL_MAX_VIEWPORTS_NV, "GL_MAX_VIEWPORTS_NV");
    GL_NV_viewport_array.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_NV_viewport_array.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV");
    GL_NV_viewport_array.put(GL_VIEWPORT_SUBPIXEL_BITS_NV, "GL_VIEWPORT_SUBPIXEL_BITS_NV");
    GL_NV_viewport_array.put(GL_VIEWPORT_BOUNDS_RANGE_NV, "GL_VIEWPORT_BOUNDS_RANGE_NV");
    GL_NV_viewport_array.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_NV_viewport_array.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    return GL_NV_viewport_array;
  }
  private static Map<Integer, String> GL_EXT_paletted_texture;
  private static Map<Integer, String> GL_EXT_paletted_texture() {
    if (GL_EXT_paletted_texture != null)
      return GL_EXT_paletted_texture;
    GL_EXT_paletted_texture = new HashMap<Integer, String>(7);
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX2_EXT, "GL_COLOR_INDEX2_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX8_EXT, "GL_COLOR_INDEX8_EXT");
    GL_EXT_paletted_texture.put(GL_TEXTURE_INDEX_SIZE_EXT, "GL_TEXTURE_INDEX_SIZE_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX16_EXT, "GL_COLOR_INDEX16_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX1_EXT, "GL_COLOR_INDEX1_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX4_EXT, "GL_COLOR_INDEX4_EXT");
    GL_EXT_paletted_texture.put(GL_COLOR_INDEX12_EXT, "GL_COLOR_INDEX12_EXT");
    return GL_EXT_paletted_texture;
  }
  private static Map<Integer, String> GL_EXT_direct_state_access;
  private static Map<Integer, String> GL_EXT_direct_state_access() {
    if (GL_EXT_direct_state_access != null)
      return GL_EXT_direct_state_access;
    GL_EXT_direct_state_access = new HashMap<Integer, String>(196);
    GL_EXT_direct_state_access.put(GL_PROGRAM_MATRIX_EXT, "GL_PROGRAM_MATRIX_EXT");
    GL_EXT_direct_state_access.put(GL_MOVE_TO_NV, "GL_MOVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_GEN_COEFF_NV, "GL_PATH_GEN_COEFF_NV");
    GL_EXT_direct_state_access.put(GL_FONT_TARGET_UNAVAILABLE_NV, "GL_FONT_TARGET_UNAVAILABLE_NV");
    GL_EXT_direct_state_access.put(GL_FONT_NUM_GLYPH_INDICES_BIT_NV, "GL_FONT_NUM_GLYPH_INDICES_BIT_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_ROUNDED_RECT_NV, "GL_RELATIVE_ROUNDED_RECT_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV, "GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_SMALL_CCW_ARC_TO_NV, "GL_RELATIVE_SMALL_CCW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_TRANSLATE_Y_NV, "GL_TRANSLATE_Y_NV");
    GL_EXT_direct_state_access.put(GL_4_BYTES_NV, "GL_4_BYTES_NV");
    GL_EXT_direct_state_access.put(GL_SYSTEM_FONT_NAME_NV, "GL_SYSTEM_FONT_NAME_NV");
    GL_EXT_direct_state_access.put(GL_RGB10_A2_EXT, "GL_RGB10_A2_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_FILL_MASK_NV, "GL_PATH_FILL_MASK_NV");
    GL_EXT_direct_state_access.put(GL_DUP_LAST_CUBIC_CURVE_TO_NV, "GL_DUP_LAST_CUBIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_LINE_TO_NV, "GL_RELATIVE_LINE_TO_NV");
    GL_EXT_direct_state_access.put(GL_SMALL_CCW_ARC_TO_NV, "GL_SMALL_CCW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_DUP_FIRST_CUBIC_CURVE_TO_NV, "GL_DUP_FIRST_CUBIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STROKE_MASK_NV, "GL_PATH_STROKE_MASK_NV");
    GL_EXT_direct_state_access.put(GL_PATH_COMPUTED_LENGTH_NV, "GL_PATH_COMPUTED_LENGTH_NV");
    GL_EXT_direct_state_access.put(GL_RECT_NV, "GL_RECT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV, "GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV");
    GL_EXT_direct_state_access.put(GL_ALPHA32F_EXT, "GL_ALPHA32F_EXT");
    GL_EXT_direct_state_access.put(GL_CIRCULAR_CCW_ARC_TO_NV, "GL_CIRCULAR_CCW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_TRANSLATE_X_NV, "GL_TRANSLATE_X_NV");
    GL_EXT_direct_state_access.put(GL_BOUNDING_BOX_NV, "GL_BOUNDING_BOX_NV");
    GL_EXT_direct_state_access.put(GL_PRIMARY_COLOR, "GL_PRIMARY_COLOR");
    GL_EXT_direct_state_access.put(GL_VERTEX_SHADER_BIT_EXT, "GL_VERTEX_SHADER_BIT_EXT");
    GL_EXT_direct_state_access.put(GL_STANDARD_FONT_FORMAT_NV, "GL_STANDARD_FONT_FORMAT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STENCIL_REF_NV, "GL_PATH_STENCIL_REF_NV");
    GL_EXT_direct_state_access.put(GL_PATH_FILL_COVER_MODE_NV, "GL_PATH_FILL_COVER_MODE_NV");
    GL_EXT_direct_state_access.put(GL_PATH_CLIENT_LENGTH_NV, "GL_PATH_CLIENT_LENGTH_NV");
    GL_EXT_direct_state_access.put(GL_2_BYTES_NV, "GL_2_BYTES_NV");
    GL_EXT_direct_state_access.put(GL_PATH_PROJECTION_NV, "GL_PATH_PROJECTION_NV");
    GL_EXT_direct_state_access.put(GL_LUMINANCE_ALPHA32F_EXT, "GL_LUMINANCE_ALPHA32F_EXT");
    GL_EXT_direct_state_access.put(GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV, "GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_FORMAT_PS_NV, "GL_PATH_FORMAT_PS_NV");
    GL_EXT_direct_state_access.put(GL_RGB32F_EXT, "GL_RGB32F_EXT");
    GL_EXT_direct_state_access.put(GL_TRANSLATE_3D_NV, "GL_TRANSLATE_3D_NV");
    GL_EXT_direct_state_access.put(GL_SMOOTH_QUADRATIC_CURVE_TO_NV, "GL_SMOOTH_QUADRATIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_QUADRATIC_CURVE_TO_NV, "GL_QUADRATIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_DASH_CAPS_NV, "GL_PATH_DASH_CAPS_NV");
    GL_EXT_direct_state_access.put(GL_RG8_EXT, "GL_RG8_EXT");
    GL_EXT_direct_state_access.put(GL_RESTART_PATH_NV, "GL_RESTART_PATH_NV");
    GL_EXT_direct_state_access.put(GL_TRANSPOSE_AFFINE_3D_NV, "GL_TRANSPOSE_AFFINE_3D_NV");
    GL_EXT_direct_state_access.put(GL_SMALL_CW_ARC_TO_NV, "GL_SMALL_CW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_ITALIC_BIT_NV, "GL_ITALIC_BIT_NV");
    GL_EXT_direct_state_access.put(GL_FONT_UNDERLINE_THICKNESS_BIT_NV, "GL_FONT_UNDERLINE_THICKNESS_BIT_NV");
    GL_EXT_direct_state_access.put(GL_CONVEX_HULL_NV, "GL_CONVEX_HULL_NV");
    GL_EXT_direct_state_access.put(GL_PATH_COMMAND_COUNT_NV, "GL_PATH_COMMAND_COUNT_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_CUBIC_CURVE_TO_NV, "GL_RELATIVE_CUBIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV, "GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV");
    GL_EXT_direct_state_access.put(GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV, "GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV");
    GL_EXT_direct_state_access.put(GL_ACTIVE_PROGRAM_EXT, "GL_ACTIVE_PROGRAM_EXT");
    GL_EXT_direct_state_access.put(GL_TRIANGULAR_NV, "GL_TRIANGULAR_NV");
    GL_EXT_direct_state_access.put(GL_PATH_ERROR_POSITION_NV, "GL_PATH_ERROR_POSITION_NV");
    GL_EXT_direct_state_access.put(GL_SQUARE_NV, "GL_SQUARE_NV");
    GL_EXT_direct_state_access.put(GL_BEVEL_NV, "GL_BEVEL_NV");
    GL_EXT_direct_state_access.put(GL_PATH_END_CAPS_NV, "GL_PATH_END_CAPS_NV");
    GL_EXT_direct_state_access.put(GL_CIRCULAR_CW_ARC_TO_NV, "GL_CIRCULAR_CW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_ROUNDED_RECT8_NV, "GL_RELATIVE_ROUNDED_RECT8_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STROKE_WIDTH_NV, "GL_PATH_STROKE_WIDTH_NV");
    GL_EXT_direct_state_access.put(GL_TEXTURE_IMMUTABLE_FORMAT_EXT, "GL_TEXTURE_IMMUTABLE_FORMAT_EXT");
    GL_EXT_direct_state_access.put(GL_EYE_LINEAR_NV, "GL_EYE_LINEAR_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_ROUNDED_RECT2_NV, "GL_RELATIVE_ROUNDED_RECT2_NV");
    GL_EXT_direct_state_access.put(GL_PATH_DASH_OFFSET_RESET_NV, "GL_PATH_DASH_OFFSET_RESET_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_MOVE_TO_NV, "GL_RELATIVE_MOVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV");
    GL_EXT_direct_state_access.put(GL_ALPHA8_EXT, "GL_ALPHA8_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV, "GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV");
    GL_EXT_direct_state_access.put(GL_PATH_FILL_BOUNDING_BOX_NV, "GL_PATH_FILL_BOUNDING_BOX_NV");
    GL_EXT_direct_state_access.put(GL_BOLD_BIT_NV, "GL_BOLD_BIT_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV");
    GL_EXT_direct_state_access.put(GL_VERTICAL_LINE_TO_NV, "GL_VERTICAL_LINE_TO_NV");
    GL_EXT_direct_state_access.put(GL_ROUNDED_RECT4_NV, "GL_ROUNDED_RECT4_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_COORD_COUNT_NV, "GL_PATH_COORD_COUNT_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_HORIZONTAL_LINE_TO_NV, "GL_RELATIVE_HORIZONTAL_LINE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV, "GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_RECT_NV, "GL_RELATIVE_RECT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_MODELVIEW_MATRIX_NV, "GL_PATH_MODELVIEW_MATRIX_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STENCIL_FUNC_NV, "GL_PATH_STENCIL_FUNC_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_HAS_KERNING_BIT_NV, "GL_GLYPH_HAS_KERNING_BIT_NV");
    GL_EXT_direct_state_access.put(GL_MITER_REVERT_NV, "GL_MITER_REVERT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STENCIL_VALUE_MASK_NV, "GL_PATH_STENCIL_VALUE_MASK_NV");
    GL_EXT_direct_state_access.put(GL_AFFINE_3D_NV, "GL_AFFINE_3D_NV");
    GL_EXT_direct_state_access.put(GL_PATH_GEN_MODE_NV, "GL_PATH_GEN_MODE_NV");
    GL_EXT_direct_state_access.put(GL_PATH_TERMINAL_DASH_CAP_NV, "GL_PATH_TERMINAL_DASH_CAP_NV");
    GL_EXT_direct_state_access.put(GL_FONT_UNAVAILABLE_NV, "GL_FONT_UNAVAILABLE_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STROKE_COVER_MODE_NV, "GL_PATH_STROKE_COVER_MODE_NV");
    GL_EXT_direct_state_access.put(GL_RG32F_EXT, "GL_RG32F_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV, "GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV");
    GL_EXT_direct_state_access.put(GL_PATH_DASH_ARRAY_COUNT_NV, "GL_PATH_DASH_ARRAY_COUNT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_OBJECT_BOUNDING_BOX_NV, "GL_PATH_OBJECT_BOUNDING_BOX_NV");
    GL_EXT_direct_state_access.put(GL_PROGRAM_SEPARABLE_EXT, "GL_PROGRAM_SEPARABLE_EXT");
    GL_EXT_direct_state_access.put(GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV, "GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_STROKE_BOUNDING_BOX_NV, "GL_PATH_STROKE_BOUNDING_BOX_NV");
    GL_EXT_direct_state_access.put(GL_R32F_EXT, "GL_R32F_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_GEN_COMPONENTS_NV, "GL_PATH_GEN_COMPONENTS_NV");
    GL_EXT_direct_state_access.put(GL_COUNT_UP_NV, "GL_COUNT_UP_NV");
    GL_EXT_direct_state_access.put(GL_ARC_TO_NV, "GL_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_INITIAL_END_CAP_NV, "GL_PATH_INITIAL_END_CAP_NV");
    GL_EXT_direct_state_access.put(GL_TRANSPOSE_PROGRAM_MATRIX_EXT, "GL_TRANSPOSE_PROGRAM_MATRIX_EXT");
    GL_EXT_direct_state_access.put(GL_LUMINANCE16F_EXT, "GL_LUMINANCE16F_EXT");
    GL_EXT_direct_state_access.put(GL_MOVE_TO_CONTINUES_NV, "GL_MOVE_TO_CONTINUES_NV");
    GL_EXT_direct_state_access.put(GL_PATH_MITER_LIMIT_NV, "GL_PATH_MITER_LIMIT_NV");
    GL_EXT_direct_state_access.put(GL_TRANSPOSE_AFFINE_2D_NV, "GL_TRANSPOSE_AFFINE_2D_NV");
    GL_EXT_direct_state_access.put(GL_FILE_NAME_NV, "GL_FILE_NAME_NV");
    GL_EXT_direct_state_access.put(GL_ROUNDED_RECT_NV, "GL_ROUNDED_RECT_NV");
    GL_EXT_direct_state_access.put(GL_ROUNDED_RECT8_NV, "GL_ROUNDED_RECT8_NV");
    GL_EXT_direct_state_access.put(GL_CLOSE_PATH_NV, "GL_CLOSE_PATH_NV");
    GL_EXT_direct_state_access.put(GL_ROUND_NV, "GL_ROUND_NV");
    GL_EXT_direct_state_access.put(GL_USE_MISSING_GLYPH_NV, "GL_USE_MISSING_GLYPH_NV");
    GL_EXT_direct_state_access.put(GL_FONT_Y_MAX_BOUNDS_BIT_NV, "GL_FONT_Y_MAX_BOUNDS_BIT_NV");
    GL_EXT_direct_state_access.put(GL_LARGE_CCW_ARC_TO_NV, "GL_LARGE_CCW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_DASH_OFFSET_NV, "GL_PATH_DASH_OFFSET_NV");
    GL_EXT_direct_state_access.put(GL_PATH_JOIN_STYLE_NV, "GL_PATH_JOIN_STYLE_NV");
    GL_EXT_direct_state_access.put(GL_PATH_MODELVIEW_NV, "GL_PATH_MODELVIEW_NV");
    GL_EXT_direct_state_access.put(GL_UTF8_NV, "GL_UTF8_NV");
    GL_EXT_direct_state_access.put(GL_HORIZONTAL_LINE_TO_NV, "GL_HORIZONTAL_LINE_TO_NV");
    GL_EXT_direct_state_access.put(GL_FONT_UNINTELLIGIBLE_NV, "GL_FONT_UNINTELLIGIBLE_NV");
    GL_EXT_direct_state_access.put(GL_ADJACENT_PAIRS_NV, "GL_ADJACENT_PAIRS_NV");
    GL_EXT_direct_state_access.put(GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV, "GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_ARC_TO_NV, "GL_RELATIVE_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_PROJECTION_MATRIX_NV, "GL_PATH_PROJECTION_MATRIX_NV");
    GL_EXT_direct_state_access.put(GL_PATH_FILL_MODE_NV, "GL_PATH_FILL_MODE_NV");
    GL_EXT_direct_state_access.put(GL_FONT_HAS_KERNING_BIT_NV, "GL_FONT_HAS_KERNING_BIT_NV");
    GL_EXT_direct_state_access.put(GL_3_BYTES_NV, "GL_3_BYTES_NV");
    GL_EXT_direct_state_access.put(GL_AFFINE_2D_NV, "GL_AFFINE_2D_NV");
    GL_EXT_direct_state_access.put(GL_UTF16_NV, "GL_UTF16_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_LARGE_CCW_ARC_TO_NV, "GL_RELATIVE_LARGE_CCW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_SMALL_CW_ARC_TO_NV, "GL_RELATIVE_SMALL_CW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_MOVE_TO_RESETS_NV, "GL_MOVE_TO_RESETS_NV");
    GL_EXT_direct_state_access.put(GL_ALL_SHADER_BITS_EXT, "GL_ALL_SHADER_BITS_EXT");
    GL_EXT_direct_state_access.put(GL_PROGRAM_MATRIX_STACK_DEPTH_EXT, "GL_PROGRAM_MATRIX_STACK_DEPTH_EXT");
    GL_EXT_direct_state_access.put(GL_FRAGMENT_SHADER_BIT_EXT, "GL_FRAGMENT_SHADER_BIT_EXT");
    GL_EXT_direct_state_access.put(GL_LUMINANCE8_EXT, "GL_LUMINANCE8_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_INITIAL_DASH_CAP_NV, "GL_PATH_INITIAL_DASH_CAP_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_HEIGHT_BIT_NV, "GL_GLYPH_HEIGHT_BIT_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_QUADRATIC_CURVE_TO_NV, "GL_RELATIVE_QUADRATIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_LINE_TO_NV, "GL_LINE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_MODELVIEW_STACK_DEPTH_NV, "GL_PATH_MODELVIEW_STACK_DEPTH_NV");
    GL_EXT_direct_state_access.put(GL_STANDARD_FONT_NAME_NV, "GL_STANDARD_FONT_NAME_NV");
    GL_EXT_direct_state_access.put(GL_LUMINANCE_ALPHA16F_EXT, "GL_LUMINANCE_ALPHA16F_EXT");
    GL_EXT_direct_state_access.put(GL_FONT_X_MIN_BOUNDS_BIT_NV, "GL_FONT_X_MIN_BOUNDS_BIT_NV");
    GL_EXT_direct_state_access.put(GL_COUNT_DOWN_NV, "GL_COUNT_DOWN_NV");
    GL_EXT_direct_state_access.put(GL_FONT_UNITS_PER_EM_BIT_NV, "GL_FONT_UNITS_PER_EM_BIT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_PROJECTION_STACK_DEPTH_NV, "GL_PATH_PROJECTION_STACK_DEPTH_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_ROUNDED_RECT4_NV, "GL_RELATIVE_ROUNDED_RECT4_NV");
    GL_EXT_direct_state_access.put(GL_RGB10_EXT, "GL_RGB10_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_TERMINAL_END_CAP_NV, "GL_PATH_TERMINAL_END_CAP_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_VERTICAL_BEARING_X_BIT_NV, "GL_GLYPH_VERTICAL_BEARING_X_BIT_NV");
    GL_EXT_direct_state_access.put(GL_RGB16F_EXT, "GL_RGB16F_EXT");
    GL_EXT_direct_state_access.put(GL_CUBIC_CURVE_TO_NV, "GL_CUBIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_FONT_UNDERLINE_POSITION_BIT_NV, "GL_FONT_UNDERLINE_POSITION_BIT_NV");
    GL_EXT_direct_state_access.put(GL_R8_EXT, "GL_R8_EXT");
    GL_EXT_direct_state_access.put(GL_ALPHA16F_EXT, "GL_ALPHA16F_EXT");
    GL_EXT_direct_state_access.put(GL_SMOOTH_CUBIC_CURVE_TO_NV, "GL_SMOOTH_CUBIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_FONT_HEIGHT_BIT_NV, "GL_FONT_HEIGHT_BIT_NV");
    GL_EXT_direct_state_access.put(GL_RGBA16F_EXT, "GL_RGBA16F_EXT");
    GL_EXT_direct_state_access.put(GL_CONSTANT_NV, "GL_CONSTANT_NV");
    GL_EXT_direct_state_access.put(GL_BGRA8_EXT, "GL_BGRA8_EXT");
    GL_EXT_direct_state_access.put(GL_RGBA32F_EXT, "GL_RGBA32F_EXT");
    GL_EXT_direct_state_access.put(GL_RELATIVE_VERTICAL_LINE_TO_NV, "GL_RELATIVE_VERTICAL_LINE_TO_NV");
    GL_EXT_direct_state_access.put(GL_PRIMARY_COLOR_NV, "GL_PRIMARY_COLOR_NV");
    GL_EXT_direct_state_access.put(GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV, "GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV");
    GL_EXT_direct_state_access.put(GL_PATH_FORMAT_SVG_NV, "GL_PATH_FORMAT_SVG_NV");
    GL_EXT_direct_state_access.put(GL_CIRCULAR_TANGENT_ARC_TO_NV, "GL_CIRCULAR_TANGENT_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_GEN_COLOR_FORMAT_NV, "GL_PATH_GEN_COLOR_FORMAT_NV");
    GL_EXT_direct_state_access.put(GL_FRAGMENT_INPUT_NV, "GL_FRAGMENT_INPUT_NV");
    GL_EXT_direct_state_access.put(GL_TRANSLATE_2D_NV, "GL_TRANSLATE_2D_NV");
    GL_EXT_direct_state_access.put(GL_PATH_FOG_GEN_MODE_NV, "GL_PATH_FOG_GEN_MODE_NV");
    GL_EXT_direct_state_access.put(GL_LUMINANCE8_ALPHA8_EXT, "GL_LUMINANCE8_ALPHA8_EXT");
    GL_EXT_direct_state_access.put(GL_FONT_Y_MIN_BOUNDS_BIT_NV, "GL_FONT_Y_MIN_BOUNDS_BIT_NV");
    GL_EXT_direct_state_access.put(GL_FONT_DESCENDER_BIT_NV, "GL_FONT_DESCENDER_BIT_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_CONIC_CURVE_TO_NV, "GL_RELATIVE_CONIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_FONT_GLYPHS_AVAILABLE_NV, "GL_FONT_GLYPHS_AVAILABLE_NV");
    GL_EXT_direct_state_access.put(GL_OBJECT_LINEAR_NV, "GL_OBJECT_LINEAR_NV");
    GL_EXT_direct_state_access.put(GL_SKIP_MISSING_GLYPH_NV, "GL_SKIP_MISSING_GLYPH_NV");
    GL_EXT_direct_state_access.put(GL_FIRST_TO_REST_NV, "GL_FIRST_TO_REST_NV");
    GL_EXT_direct_state_access.put(GL_MITER_TRUNCATE_NV, "GL_MITER_TRUNCATE_NV");
    GL_EXT_direct_state_access.put(GL_LARGE_CW_ARC_TO_NV, "GL_LARGE_CW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_RELATIVE_LARGE_CW_ARC_TO_NV, "GL_RELATIVE_LARGE_CW_ARC_TO_NV");
    GL_EXT_direct_state_access.put(GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV, "GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV");
    GL_EXT_direct_state_access.put(GL_RG16F_EXT, "GL_RG16F_EXT");
    GL_EXT_direct_state_access.put(GL_PATH_COVER_DEPTH_FUNC_NV, "GL_PATH_COVER_DEPTH_FUNC_NV");
    GL_EXT_direct_state_access.put(GL_CONIC_CURVE_TO_NV, "GL_CONIC_CURVE_TO_NV");
    GL_EXT_direct_state_access.put(GL_FONT_X_MAX_BOUNDS_BIT_NV, "GL_FONT_X_MAX_BOUNDS_BIT_NV");
    GL_EXT_direct_state_access.put(GL_SECONDARY_COLOR_NV, "GL_SECONDARY_COLOR_NV");
    GL_EXT_direct_state_access.put(GL_FONT_ASCENDER_BIT_NV, "GL_FONT_ASCENDER_BIT_NV");
    GL_EXT_direct_state_access.put(GL_ROUNDED_RECT2_NV, "GL_ROUNDED_RECT2_NV");
    GL_EXT_direct_state_access.put(GL_PROGRAM_PIPELINE_BINDING_EXT, "GL_PROGRAM_PIPELINE_BINDING_EXT");
    GL_EXT_direct_state_access.put(GL_R16F_EXT, "GL_R16F_EXT");
    GL_EXT_direct_state_access.put(GL_GLYPH_WIDTH_BIT_NV, "GL_GLYPH_WIDTH_BIT_NV");
    GL_EXT_direct_state_access.put(GL_LUMINANCE32F_EXT, "GL_LUMINANCE32F_EXT");
    GL_EXT_direct_state_access.put(GL_ACCUM_ADJACENT_PAIRS_NV, "GL_ACCUM_ADJACENT_PAIRS_NV");
    return GL_EXT_direct_state_access;
  }
  private static Map<Integer, String> GL_SGIS_sharpen_texture;
  private static Map<Integer, String> GL_SGIS_sharpen_texture() {
    if (GL_SGIS_sharpen_texture != null)
      return GL_SGIS_sharpen_texture;
    GL_SGIS_sharpen_texture = new HashMap<Integer, String>(4);
    GL_SGIS_sharpen_texture.put(GL_LINEAR_SHARPEN_COLOR_SGIS, "GL_LINEAR_SHARPEN_COLOR_SGIS");
    GL_SGIS_sharpen_texture.put(GL_LINEAR_SHARPEN_ALPHA_SGIS, "GL_LINEAR_SHARPEN_ALPHA_SGIS");
    GL_SGIS_sharpen_texture.put(GL_LINEAR_SHARPEN_SGIS, "GL_LINEAR_SHARPEN_SGIS");
    GL_SGIS_sharpen_texture.put(GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS");
    return GL_SGIS_sharpen_texture;
  }
  private static Map<Integer, String> GL_EXT_blend_minmax;
  private static Map<Integer, String> GL_EXT_blend_minmax() {
    if (GL_EXT_blend_minmax != null)
      return GL_EXT_blend_minmax;
    GL_EXT_blend_minmax = new HashMap<Integer, String>(4);
    GL_EXT_blend_minmax.put(GL_MAX_EXT, "GL_MAX_EXT");
    GL_EXT_blend_minmax.put(GL_FUNC_ADD_EXT, "GL_FUNC_ADD_EXT");
    GL_EXT_blend_minmax.put(GL_BLEND_EQUATION_EXT, "GL_BLEND_EQUATION_EXT");
    GL_EXT_blend_minmax.put(GL_MIN_EXT, "GL_MIN_EXT");
    return GL_EXT_blend_minmax;
  }
  private static Map<Integer, String> GL_ARB_imaging;
  private static Map<Integer, String> GL_ARB_imaging() {
    if (GL_ARB_imaging != null)
      return GL_ARB_imaging;
    GL_ARB_imaging = new HashMap<Integer, String>(75);
    GL_ARB_imaging.put(GL_TABLE_TOO_LARGE, "GL_TABLE_TOO_LARGE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_RED_BIAS, "GL_POST_COLOR_MATRIX_RED_BIAS");
    GL_ARB_imaging.put(GL_HISTOGRAM_WIDTH, "GL_HISTOGRAM_WIDTH");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_BLUE_BIAS, "GL_POST_COLOR_MATRIX_BLUE_BIAS");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_BLUE_SCALE, "GL_POST_CONVOLUTION_BLUE_SCALE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_ALPHA_BIAS, "GL_POST_COLOR_MATRIX_ALPHA_BIAS");
    GL_ARB_imaging.put(GL_BLEND_EQUATION, "GL_BLEND_EQUATION");
    GL_ARB_imaging.put(GL_HISTOGRAM_GREEN_SIZE, "GL_HISTOGRAM_GREEN_SIZE");
    GL_ARB_imaging.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_ALPHA_SIZE, "GL_COLOR_TABLE_ALPHA_SIZE");
    GL_ARB_imaging.put(GL_FUNC_REVERSE_SUBTRACT, "GL_FUNC_REVERSE_SUBTRACT");
    GL_ARB_imaging.put(GL_HISTOGRAM_RED_SIZE, "GL_HISTOGRAM_RED_SIZE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_GREEN_BIAS, "GL_POST_CONVOLUTION_GREEN_BIAS");
    GL_ARB_imaging.put(GL_FUNC_SUBTRACT, "GL_FUNC_SUBTRACT");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_COLOR_TABLE, "GL_POST_COLOR_MATRIX_COLOR_TABLE");
    GL_ARB_imaging.put(GL_CONVOLUTION_FILTER_BIAS, "GL_CONVOLUTION_FILTER_BIAS");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_GREEN_SCALE, "GL_POST_COLOR_MATRIX_GREEN_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_BORDER_MODE, "GL_CONVOLUTION_BORDER_MODE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_BLUE_SCALE, "GL_POST_COLOR_MATRIX_BLUE_SCALE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_SCALE, "GL_COLOR_TABLE_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_WIDTH, "GL_CONVOLUTION_WIDTH");
    GL_ARB_imaging.put(GL_COLOR_TABLE_FORMAT, "GL_COLOR_TABLE_FORMAT");
    GL_ARB_imaging.put(GL_COLOR_TABLE_RED_SIZE, "GL_COLOR_TABLE_RED_SIZE");
    GL_ARB_imaging.put(GL_COLOR_TABLE, "GL_COLOR_TABLE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_LUMINANCE_SIZE, "GL_COLOR_TABLE_LUMINANCE_SIZE");
    GL_ARB_imaging.put(GL_REDUCE, "GL_REDUCE");
    GL_ARB_imaging.put(GL_CONVOLUTION_BORDER_COLOR, "GL_CONVOLUTION_BORDER_COLOR");
    GL_ARB_imaging.put(GL_MINMAX_SINK, "GL_MINMAX_SINK");
    GL_ARB_imaging.put(GL_PROXY_COLOR_TABLE, "GL_PROXY_COLOR_TABLE");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_GREEN_BIAS, "GL_POST_COLOR_MATRIX_GREEN_BIAS");
    GL_ARB_imaging.put(GL_CONSTANT_COLOR, "GL_CONSTANT_COLOR");
    GL_ARB_imaging.put(GL_COLOR_MATRIX, "GL_COLOR_MATRIX");
    GL_ARB_imaging.put(GL_MAX_COLOR_MATRIX_STACK_DEPTH, "GL_MAX_COLOR_MATRIX_STACK_DEPTH");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_ALPHA_BIAS, "GL_POST_CONVOLUTION_ALPHA_BIAS");
    GL_ARB_imaging.put(GL_COLOR_TABLE_WIDTH, "GL_COLOR_TABLE_WIDTH");
    GL_ARB_imaging.put(GL_CONSTANT_BORDER, "GL_CONSTANT_BORDER");
    GL_ARB_imaging.put(GL_COLOR_TABLE_BLUE_SIZE, "GL_COLOR_TABLE_BLUE_SIZE");
    GL_ARB_imaging.put(GL_CONVOLUTION_2D, "GL_CONVOLUTION_2D");
    GL_ARB_imaging.put(GL_REPLICATE_BORDER, "GL_REPLICATE_BORDER");
    GL_ARB_imaging.put(GL_COLOR_TABLE_INTENSITY_SIZE, "GL_COLOR_TABLE_INTENSITY_SIZE");
    GL_ARB_imaging.put(GL_HISTOGRAM_FORMAT, "GL_HISTOGRAM_FORMAT");
    GL_ARB_imaging.put(GL_FUNC_ADD, "GL_FUNC_ADD");
    GL_ARB_imaging.put(GL_HISTOGRAM, "GL_HISTOGRAM");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_ALPHA_SCALE, "GL_POST_COLOR_MATRIX_ALPHA_SCALE");
    GL_ARB_imaging.put(GL_MINMAX, "GL_MINMAX");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_COLOR_TABLE, "GL_POST_CONVOLUTION_COLOR_TABLE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_BIAS, "GL_COLOR_TABLE_BIAS");
    GL_ARB_imaging.put(GL_MAX_CONVOLUTION_WIDTH, "GL_MAX_CONVOLUTION_WIDTH");
    GL_ARB_imaging.put(GL_SEPARABLE_2D, "GL_SEPARABLE_2D");
    GL_ARB_imaging.put(GL_MINMAX_FORMAT, "GL_MINMAX_FORMAT");
    GL_ARB_imaging.put(GL_ONE_MINUS_CONSTANT_COLOR, "GL_ONE_MINUS_CONSTANT_COLOR");
    GL_ARB_imaging.put(GL_COLOR_MATRIX_STACK_DEPTH, "GL_COLOR_MATRIX_STACK_DEPTH");
    GL_ARB_imaging.put(GL_CONVOLUTION_1D, "GL_CONVOLUTION_1D");
    GL_ARB_imaging.put(GL_POST_COLOR_MATRIX_RED_SCALE, "GL_POST_COLOR_MATRIX_RED_SCALE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_BLUE_BIAS, "GL_POST_CONVOLUTION_BLUE_BIAS");
    GL_ARB_imaging.put(GL_HISTOGRAM_BLUE_SIZE, "GL_HISTOGRAM_BLUE_SIZE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_ALPHA_SCALE, "GL_POST_CONVOLUTION_ALPHA_SCALE");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_RED_BIAS, "GL_POST_CONVOLUTION_RED_BIAS");
    GL_ARB_imaging.put(GL_HISTOGRAM_LUMINANCE_SIZE, "GL_HISTOGRAM_LUMINANCE_SIZE");
    GL_ARB_imaging.put(GL_MIN, "GL_MIN");
    GL_ARB_imaging.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE");
    GL_ARB_imaging.put(GL_CONVOLUTION_HEIGHT, "GL_CONVOLUTION_HEIGHT");
    GL_ARB_imaging.put(GL_HISTOGRAM_ALPHA_SIZE, "GL_HISTOGRAM_ALPHA_SIZE");
    GL_ARB_imaging.put(GL_COLOR_TABLE_GREEN_SIZE, "GL_COLOR_TABLE_GREEN_SIZE");
    GL_ARB_imaging.put(GL_BLEND_COLOR, "GL_BLEND_COLOR");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_RED_SCALE, "GL_POST_CONVOLUTION_RED_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_FILTER_SCALE, "GL_CONVOLUTION_FILTER_SCALE");
    GL_ARB_imaging.put(GL_CONVOLUTION_FORMAT, "GL_CONVOLUTION_FORMAT");
    GL_ARB_imaging.put(GL_MAX, "GL_MAX");
    GL_ARB_imaging.put(GL_HISTOGRAM_SINK, "GL_HISTOGRAM_SINK");
    GL_ARB_imaging.put(GL_CONSTANT_ALPHA, "GL_CONSTANT_ALPHA");
    GL_ARB_imaging.put(GL_POST_CONVOLUTION_GREEN_SCALE, "GL_POST_CONVOLUTION_GREEN_SCALE");
    GL_ARB_imaging.put(GL_PROXY_HISTOGRAM, "GL_PROXY_HISTOGRAM");
    GL_ARB_imaging.put(GL_MAX_CONVOLUTION_HEIGHT, "GL_MAX_CONVOLUTION_HEIGHT");
    GL_ARB_imaging.put(GL_ONE_MINUS_CONSTANT_ALPHA, "GL_ONE_MINUS_CONSTANT_ALPHA");
    return GL_ARB_imaging;
  }
  private static Map<Integer, String> GL_ARB_clip_control;
  private static Map<Integer, String> GL_ARB_clip_control() {
    if (GL_ARB_clip_control != null)
      return GL_ARB_clip_control;
    GL_ARB_clip_control = new HashMap<Integer, String>(6);
    GL_ARB_clip_control.put(GL_UPPER_LEFT, "GL_UPPER_LEFT");
    GL_ARB_clip_control.put(GL_LOWER_LEFT, "GL_LOWER_LEFT");
    GL_ARB_clip_control.put(GL_ZERO_TO_ONE, "GL_ZERO_TO_ONE");
    GL_ARB_clip_control.put(GL_CLIP_DEPTH_MODE, "GL_CLIP_DEPTH_MODE");
    GL_ARB_clip_control.put(GL_CLIP_ORIGIN, "GL_CLIP_ORIGIN");
    GL_ARB_clip_control.put(GL_NEGATIVE_ONE_TO_ONE, "GL_NEGATIVE_ONE_TO_ONE");
    return GL_ARB_clip_control;
  }
  private static Map<Integer, String> GL_NV_non_square_matrices;
  private static Map<Integer, String> GL_NV_non_square_matrices() {
    if (GL_NV_non_square_matrices != null)
      return GL_NV_non_square_matrices;
    GL_NV_non_square_matrices = new HashMap<Integer, String>(6);
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT4x2_NV, "GL_FLOAT_MAT4x2_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT3x4_NV, "GL_FLOAT_MAT3x4_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT3x2_NV, "GL_FLOAT_MAT3x2_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT4x3_NV, "GL_FLOAT_MAT4x3_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT2x3_NV, "GL_FLOAT_MAT2x3_NV");
    GL_NV_non_square_matrices.put(GL_FLOAT_MAT2x4_NV, "GL_FLOAT_MAT2x4_NV");
    return GL_NV_non_square_matrices;
  }
  private static Map<Integer, String> GL_AMD_sample_positions;
  private static Map<Integer, String> GL_AMD_sample_positions() {
    if (GL_AMD_sample_positions != null)
      return GL_AMD_sample_positions;
    GL_AMD_sample_positions = new HashMap<Integer, String>(1);
    GL_AMD_sample_positions.put(GL_SUBSAMPLE_DISTANCE_AMD, "GL_SUBSAMPLE_DISTANCE_AMD");
    return GL_AMD_sample_positions;
  }
  private static Map<Integer, String> GL_OES_blend_subtract;
  private static Map<Integer, String> GL_OES_blend_subtract() {
    if (GL_OES_blend_subtract != null)
      return GL_OES_blend_subtract;
    GL_OES_blend_subtract = new HashMap<Integer, String>(4);
    GL_OES_blend_subtract.put(GL_FUNC_SUBTRACT_OES, "GL_FUNC_SUBTRACT_OES");
    GL_OES_blend_subtract.put(GL_BLEND_EQUATION_OES, "GL_BLEND_EQUATION_OES");
    GL_OES_blend_subtract.put(GL_FUNC_ADD_OES, "GL_FUNC_ADD_OES");
    GL_OES_blend_subtract.put(GL_FUNC_REVERSE_SUBTRACT_OES, "GL_FUNC_REVERSE_SUBTRACT_OES");
    return GL_OES_blend_subtract;
  }
  private static Map<Integer, String> GL_ARB_point_parameters;
  private static Map<Integer, String> GL_ARB_point_parameters() {
    if (GL_ARB_point_parameters != null)
      return GL_ARB_point_parameters;
    GL_ARB_point_parameters = new HashMap<Integer, String>(4);
    GL_ARB_point_parameters.put(GL_POINT_FADE_THRESHOLD_SIZE_ARB, "GL_POINT_FADE_THRESHOLD_SIZE_ARB");
    GL_ARB_point_parameters.put(GL_POINT_SIZE_MIN_ARB, "GL_POINT_SIZE_MIN_ARB");
    GL_ARB_point_parameters.put(GL_POINT_DISTANCE_ATTENUATION_ARB, "GL_POINT_DISTANCE_ATTENUATION_ARB");
    GL_ARB_point_parameters.put(GL_POINT_SIZE_MAX_ARB, "GL_POINT_SIZE_MAX_ARB");
    return GL_ARB_point_parameters;
  }
  private static Map<Integer, String> GL_APPLE_fence;
  private static Map<Integer, String> GL_APPLE_fence() {
    if (GL_APPLE_fence != null)
      return GL_APPLE_fence;
    GL_APPLE_fence = new HashMap<Integer, String>(2);
    GL_APPLE_fence.put(GL_FENCE_APPLE, "GL_FENCE_APPLE");
    GL_APPLE_fence.put(GL_DRAW_PIXELS_APPLE, "GL_DRAW_PIXELS_APPLE");
    return GL_APPLE_fence;
  }
  private static Map<Integer, String> GL_OVR_multiview;
  private static Map<Integer, String> GL_OVR_multiview() {
    if (GL_OVR_multiview != null)
      return GL_OVR_multiview;
    GL_OVR_multiview = new HashMap<Integer, String>(4);
    GL_OVR_multiview.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR");
    GL_OVR_multiview.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR");
    GL_OVR_multiview.put(GL_MAX_VIEWS_OVR, "GL_MAX_VIEWS_OVR");
    GL_OVR_multiview.put(GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR, "GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR");
    return GL_OVR_multiview;
  }
  private static Map<Integer, String> GL_ATI_separate_stencil;
  private static Map<Integer, String> GL_ATI_separate_stencil() {
    if (GL_ATI_separate_stencil != null)
      return GL_ATI_separate_stencil;
    GL_ATI_separate_stencil = new HashMap<Integer, String>(4);
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_FAIL_ATI, "GL_STENCIL_BACK_FAIL_ATI");
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI, "GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI");
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI, "GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI");
    GL_ATI_separate_stencil.put(GL_STENCIL_BACK_FUNC_ATI, "GL_STENCIL_BACK_FUNC_ATI");
    return GL_ATI_separate_stencil;
  }
  private static Map<Integer, String> GL_EXT_disjoint_timer_query;
  private static Map<Integer, String> GL_EXT_disjoint_timer_query() {
    if (GL_EXT_disjoint_timer_query != null)
      return GL_EXT_disjoint_timer_query;
    GL_EXT_disjoint_timer_query = new HashMap<Integer, String>(9);
    GL_EXT_disjoint_timer_query.put(GL_GPU_DISJOINT_EXT, "GL_GPU_DISJOINT_EXT");
    GL_EXT_disjoint_timer_query.put(GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT");
    GL_EXT_disjoint_timer_query.put(GL_QUERY_RESULT_EXT, "GL_QUERY_RESULT_EXT");
    GL_EXT_disjoint_timer_query.put(GL_ANY_SAMPLES_PASSED_EXT, "GL_ANY_SAMPLES_PASSED_EXT");
    GL_EXT_disjoint_timer_query.put(GL_QUERY_RESULT_AVAILABLE_EXT, "GL_QUERY_RESULT_AVAILABLE_EXT");
    GL_EXT_disjoint_timer_query.put(GL_QUERY_COUNTER_BITS_EXT, "GL_QUERY_COUNTER_BITS_EXT");
    GL_EXT_disjoint_timer_query.put(GL_CURRENT_QUERY_EXT, "GL_CURRENT_QUERY_EXT");
    GL_EXT_disjoint_timer_query.put(GL_TIME_ELAPSED_EXT, "GL_TIME_ELAPSED_EXT");
    GL_EXT_disjoint_timer_query.put(GL_TIMESTAMP_EXT, "GL_TIMESTAMP_EXT");
    return GL_EXT_disjoint_timer_query;
  }
  private static Map<Integer, String> GL_ATI_vertex_streams;
  private static Map<Integer, String> GL_ATI_vertex_streams() {
    if (GL_ATI_vertex_streams != null)
      return GL_ATI_vertex_streams;
    GL_ATI_vertex_streams = new HashMap<Integer, String>(10);
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM1_ATI, "GL_VERTEX_STREAM1_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM6_ATI, "GL_VERTEX_STREAM6_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM5_ATI, "GL_VERTEX_STREAM5_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_SOURCE_ATI, "GL_VERTEX_SOURCE_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM7_ATI, "GL_VERTEX_STREAM7_ATI");
    GL_ATI_vertex_streams.put(GL_MAX_VERTEX_STREAMS_ATI, "GL_MAX_VERTEX_STREAMS_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM3_ATI, "GL_VERTEX_STREAM3_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM4_ATI, "GL_VERTEX_STREAM4_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM2_ATI, "GL_VERTEX_STREAM2_ATI");
    GL_ATI_vertex_streams.put(GL_VERTEX_STREAM0_ATI, "GL_VERTEX_STREAM0_ATI");
    return GL_ATI_vertex_streams;
  }
  private static Map<Integer, String> GL_ARB_bindless_texture;
  private static Map<Integer, String> GL_ARB_bindless_texture() {
    if (GL_ARB_bindless_texture != null)
      return GL_ARB_bindless_texture;
    GL_ARB_bindless_texture = new HashMap<Integer, String>(1);
    GL_ARB_bindless_texture.put(GL_UNSIGNED_INT64_ARB, "GL_UNSIGNED_INT64_ARB");
    return GL_ARB_bindless_texture;
  }
  private static Map<Integer, String> GL_HP_image_transform;
  private static Map<Integer, String> GL_HP_image_transform() {
    if (GL_HP_image_transform != null)
      return GL_HP_image_transform;
    GL_HP_image_transform = new HashMap<Integer, String>(15);
    GL_HP_image_transform.put(GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    GL_HP_image_transform.put(GL_IMAGE_MAG_FILTER_HP, "GL_IMAGE_MAG_FILTER_HP");
    GL_HP_image_transform.put(GL_IMAGE_CUBIC_WEIGHT_HP, "GL_IMAGE_CUBIC_WEIGHT_HP");
    GL_HP_image_transform.put(GL_CUBIC_HP, "GL_CUBIC_HP");
    GL_HP_image_transform.put(GL_IMAGE_ROTATE_ANGLE_HP, "GL_IMAGE_ROTATE_ANGLE_HP");
    GL_HP_image_transform.put(GL_IMAGE_ROTATE_ORIGIN_Y_HP, "GL_IMAGE_ROTATE_ORIGIN_Y_HP");
    GL_HP_image_transform.put(GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP, "GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP");
    GL_HP_image_transform.put(GL_IMAGE_ROTATE_ORIGIN_X_HP, "GL_IMAGE_ROTATE_ORIGIN_X_HP");
    GL_HP_image_transform.put(GL_IMAGE_SCALE_Y_HP, "GL_IMAGE_SCALE_Y_HP");
    GL_HP_image_transform.put(GL_IMAGE_MIN_FILTER_HP, "GL_IMAGE_MIN_FILTER_HP");
    GL_HP_image_transform.put(GL_IMAGE_TRANSLATE_Y_HP, "GL_IMAGE_TRANSLATE_Y_HP");
    GL_HP_image_transform.put(GL_IMAGE_TRANSLATE_X_HP, "GL_IMAGE_TRANSLATE_X_HP");
    GL_HP_image_transform.put(GL_IMAGE_SCALE_X_HP, "GL_IMAGE_SCALE_X_HP");
    GL_HP_image_transform.put(GL_AVERAGE_HP, "GL_AVERAGE_HP");
    GL_HP_image_transform.put(GL_IMAGE_TRANSFORM_2D_HP, "GL_IMAGE_TRANSFORM_2D_HP");
    return GL_HP_image_transform;
  }
  private static Map<Integer, String> GL_NV_fence;
  private static Map<Integer, String> GL_NV_fence() {
    if (GL_NV_fence != null)
      return GL_NV_fence;
    GL_NV_fence = new HashMap<Integer, String>(3);
    GL_NV_fence.put(GL_FENCE_CONDITION_NV, "GL_FENCE_CONDITION_NV");
    GL_NV_fence.put(GL_FENCE_STATUS_NV, "GL_FENCE_STATUS_NV");
    GL_NV_fence.put(GL_ALL_COMPLETED_NV, "GL_ALL_COMPLETED_NV");
    return GL_NV_fence;
  }
  private static Map<Integer, String> GL_EXT_texture_storage;
  private static Map<Integer, String> GL_EXT_texture_storage() {
    if (GL_EXT_texture_storage != null)
      return GL_EXT_texture_storage;
    GL_EXT_texture_storage = new HashMap<Integer, String>(23);
    GL_EXT_texture_storage.put(GL_RGB32F_EXT, "GL_RGB32F_EXT");
    GL_EXT_texture_storage.put(GL_ALPHA32F_EXT, "GL_ALPHA32F_EXT");
    GL_EXT_texture_storage.put(GL_BGRA8_EXT, "GL_BGRA8_EXT");
    GL_EXT_texture_storage.put(GL_ALPHA8_EXT, "GL_ALPHA8_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE8_ALPHA8_EXT, "GL_LUMINANCE8_ALPHA8_EXT");
    GL_EXT_texture_storage.put(GL_R32F_EXT, "GL_R32F_EXT");
    GL_EXT_texture_storage.put(GL_RGBA32F_EXT, "GL_RGBA32F_EXT");
    GL_EXT_texture_storage.put(GL_RGB10_EXT, "GL_RGB10_EXT");
    GL_EXT_texture_storage.put(GL_RG8_EXT, "GL_RG8_EXT");
    GL_EXT_texture_storage.put(GL_RGB16F_EXT, "GL_RGB16F_EXT");
    GL_EXT_texture_storage.put(GL_RGB10_A2_EXT, "GL_RGB10_A2_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE8_EXT, "GL_LUMINANCE8_EXT");
    GL_EXT_texture_storage.put(GL_R8_EXT, "GL_R8_EXT");
    GL_EXT_texture_storage.put(GL_ALPHA16F_EXT, "GL_ALPHA16F_EXT");
    GL_EXT_texture_storage.put(GL_RG16F_EXT, "GL_RG16F_EXT");
    GL_EXT_texture_storage.put(GL_R16F_EXT, "GL_R16F_EXT");
    GL_EXT_texture_storage.put(GL_RGBA16F_EXT, "GL_RGBA16F_EXT");
    GL_EXT_texture_storage.put(GL_RG32F_EXT, "GL_RG32F_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE16F_EXT, "GL_LUMINANCE16F_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE32F_EXT, "GL_LUMINANCE32F_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE_ALPHA16F_EXT, "GL_LUMINANCE_ALPHA16F_EXT");
    GL_EXT_texture_storage.put(GL_TEXTURE_IMMUTABLE_FORMAT_EXT, "GL_TEXTURE_IMMUTABLE_FORMAT_EXT");
    GL_EXT_texture_storage.put(GL_LUMINANCE_ALPHA32F_EXT, "GL_LUMINANCE_ALPHA32F_EXT");
    return GL_EXT_texture_storage;
  }
  private static Map<Integer, String> GL_ARB_texture_buffer_object;
  private static Map<Integer, String> GL_ARB_texture_buffer_object() {
    if (GL_ARB_texture_buffer_object != null)
      return GL_ARB_texture_buffer_object;
    GL_ARB_texture_buffer_object = new HashMap<Integer, String>(5);
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB");
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BUFFER_ARB, "GL_TEXTURE_BUFFER_ARB");
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BINDING_BUFFER_ARB, "GL_TEXTURE_BINDING_BUFFER_ARB");
    GL_ARB_texture_buffer_object.put(GL_TEXTURE_BUFFER_FORMAT_ARB, "GL_TEXTURE_BUFFER_FORMAT_ARB");
    GL_ARB_texture_buffer_object.put(GL_MAX_TEXTURE_BUFFER_SIZE_ARB, "GL_MAX_TEXTURE_BUFFER_SIZE_ARB");
    return GL_ARB_texture_buffer_object;
  }
  private static Map<Integer, String> GL_NV_register_combiners2;
  private static Map<Integer, String> GL_NV_register_combiners2() {
    if (GL_NV_register_combiners2 != null)
      return GL_NV_register_combiners2;
    GL_NV_register_combiners2 = new HashMap<Integer, String>(1);
    GL_NV_register_combiners2.put(GL_PER_STAGE_CONSTANTS_NV, "GL_PER_STAGE_CONSTANTS_NV");
    return GL_NV_register_combiners2;
  }
  private static Map<Integer, String> GL_ARB_map_buffer_range;
  private static Map<Integer, String> GL_ARB_map_buffer_range() {
    if (GL_ARB_map_buffer_range != null)
      return GL_ARB_map_buffer_range;
    GL_ARB_map_buffer_range = new HashMap<Integer, String>(6);
    GL_ARB_map_buffer_range.put(GL_MAP_FLUSH_EXPLICIT_BIT, "GL_MAP_FLUSH_EXPLICIT_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_UNSYNCHRONIZED_BIT, "GL_MAP_UNSYNCHRONIZED_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_WRITE_BIT, "GL_MAP_WRITE_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_INVALIDATE_RANGE_BIT, "GL_MAP_INVALIDATE_RANGE_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_READ_BIT, "GL_MAP_READ_BIT");
    GL_ARB_map_buffer_range.put(GL_MAP_INVALIDATE_BUFFER_BIT, "GL_MAP_INVALIDATE_BUFFER_BIT");
    return GL_ARB_map_buffer_range;
  }
  private static Map<Integer, String> GL_SGIS_multisample;
  private static Map<Integer, String> GL_SGIS_multisample() {
    if (GL_SGIS_multisample != null)
      return GL_SGIS_multisample;
    GL_SGIS_multisample = new HashMap<Integer, String>(16);
    GL_SGIS_multisample.put(GL_2PASS_1_SGIS, "GL_2PASS_1_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_MASK_VALUE_SGIS, "GL_SAMPLE_MASK_VALUE_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_ALPHA_TO_MASK_SGIS, "GL_SAMPLE_ALPHA_TO_MASK_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_1_SGIS, "GL_4PASS_1_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_2_SGIS, "GL_4PASS_2_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_MASK_INVERT_SGIS, "GL_SAMPLE_MASK_INVERT_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_ALPHA_TO_ONE_SGIS, "GL_SAMPLE_ALPHA_TO_ONE_SGIS");
    GL_SGIS_multisample.put(GL_1PASS_SGIS, "GL_1PASS_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_BUFFERS_SGIS, "GL_SAMPLE_BUFFERS_SGIS");
    GL_SGIS_multisample.put(GL_2PASS_0_SGIS, "GL_2PASS_0_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLES_SGIS, "GL_SAMPLES_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_0_SGIS, "GL_4PASS_0_SGIS");
    GL_SGIS_multisample.put(GL_4PASS_3_SGIS, "GL_4PASS_3_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_PATTERN_SGIS, "GL_SAMPLE_PATTERN_SGIS");
    GL_SGIS_multisample.put(GL_MULTISAMPLE_SGIS, "GL_MULTISAMPLE_SGIS");
    GL_SGIS_multisample.put(GL_SAMPLE_MASK_SGIS, "GL_SAMPLE_MASK_SGIS");
    return GL_SGIS_multisample;
  }
  private static Map<Integer, String> GL_ARB_framebuffer_object;
  private static Map<Integer, String> GL_ARB_framebuffer_object() {
    if (GL_ARB_framebuffer_object != null)
      return GL_ARB_framebuffer_object;
    GL_ARB_framebuffer_object = new HashMap<Integer, String>(73);
    GL_ARB_framebuffer_object.put(GL_UNSIGNED_NORMALIZED, "GL_UNSIGNED_NORMALIZED");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT15, "GL_COLOR_ATTACHMENT15");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT14, "GL_COLOR_ATTACHMENT14");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT11, "GL_COLOR_ATTACHMENT11");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_STENCIL_SIZE, "GL_RENDERBUFFER_STENCIL_SIZE");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT10, "GL_COLOR_ATTACHMENT10");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT13, "GL_COLOR_ATTACHMENT13");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT12, "GL_COLOR_ATTACHMENT12");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_HEIGHT, "GL_RENDERBUFFER_HEIGHT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER, "GL_FRAMEBUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE");
    GL_ARB_framebuffer_object.put(GL_DRAW_FRAMEBUFFER_BINDING, "GL_DRAW_FRAMEBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_STENCIL_ATTACHMENT, "GL_STENCIL_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_UNDEFINED, "GL_FRAMEBUFFER_UNDEFINED");
    GL_ARB_framebuffer_object.put(GL_TEXTURE_STENCIL_SIZE, "GL_TEXTURE_STENCIL_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX4, "GL_STENCIL_INDEX4");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_COMPLETE, "GL_FRAMEBUFFER_COMPLETE");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX1, "GL_STENCIL_INDEX1");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE");
    GL_ARB_framebuffer_object.put(GL_READ_FRAMEBUFFER, "GL_READ_FRAMEBUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_UNSUPPORTED, "GL_FRAMEBUFFER_UNSUPPORTED");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_BINDING, "GL_RENDERBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_DEFAULT, "GL_FRAMEBUFFER_DEFAULT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_DEPTH_SIZE, "GL_RENDERBUFFER_DEPTH_SIZE");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_ALPHA_SIZE, "GL_RENDERBUFFER_ALPHA_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
    GL_ARB_framebuffer_object.put(GL_DEPTH_ATTACHMENT, "GL_DEPTH_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_RED_SIZE, "GL_RENDERBUFFER_RED_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_READ_FRAMEBUFFER_BINDING, "GL_READ_FRAMEBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX8, "GL_STENCIL_INDEX8");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_SAMPLES, "GL_RENDERBUFFER_SAMPLES");
    GL_ARB_framebuffer_object.put(GL_MAX_COLOR_ATTACHMENTS, "GL_MAX_COLOR_ATTACHMENTS");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_INTERNAL_FORMAT, "GL_RENDERBUFFER_INTERNAL_FORMAT");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_BLUE_SIZE, "GL_RENDERBUFFER_BLUE_SIZE");
    GL_ARB_framebuffer_object.put(GL_INVALID_FRAMEBUFFER_OPERATION, "GL_INVALID_FRAMEBUFFER_OPERATION");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_WIDTH, "GL_RENDERBUFFER_WIDTH");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
    GL_ARB_framebuffer_object.put(GL_DEPTH_STENCIL, "GL_DEPTH_STENCIL");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT0, "GL_COLOR_ATTACHMENT0");
    GL_ARB_framebuffer_object.put(GL_UNSIGNED_INT_24_8, "GL_UNSIGNED_INT_24_8");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT4, "GL_COLOR_ATTACHMENT4");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT3, "GL_COLOR_ATTACHMENT3");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT2, "GL_COLOR_ATTACHMENT2");
    GL_ARB_framebuffer_object.put(GL_INDEX, "GL_INDEX");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT1, "GL_COLOR_ATTACHMENT1");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT8, "GL_COLOR_ATTACHMENT8");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT7, "GL_COLOR_ATTACHMENT7");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT6, "GL_COLOR_ATTACHMENT6");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT5, "GL_COLOR_ATTACHMENT5");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE");
    GL_ARB_framebuffer_object.put(GL_DEPTH_STENCIL_ATTACHMENT, "GL_DEPTH_STENCIL_ATTACHMENT");
    GL_ARB_framebuffer_object.put(GL_MAX_SAMPLES, "GL_MAX_SAMPLES");
    GL_ARB_framebuffer_object.put(GL_RENDERBUFFER_GREEN_SIZE, "GL_RENDERBUFFER_GREEN_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE");
    GL_ARB_framebuffer_object.put(GL_DEPTH24_STENCIL8, "GL_DEPTH24_STENCIL8");
    GL_ARB_framebuffer_object.put(GL_DRAW_FRAMEBUFFER, "GL_DRAW_FRAMEBUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    GL_ARB_framebuffer_object.put(GL_COLOR_ATTACHMENT9, "GL_COLOR_ATTACHMENT9");
    GL_ARB_framebuffer_object.put(GL_STENCIL_INDEX16, "GL_STENCIL_INDEX16");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_BINDING, "GL_FRAMEBUFFER_BINDING");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING");
    GL_ARB_framebuffer_object.put(GL_MAX_RENDERBUFFER_SIZE, "GL_MAX_RENDERBUFFER_SIZE");
    GL_ARB_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
    return GL_ARB_framebuffer_object;
  }
  private static Map<Integer, String> GL_EXT_vertex_weighting;
  private static Map<Integer, String> GL_EXT_vertex_weighting() {
    if (GL_EXT_vertex_weighting != null)
      return GL_EXT_vertex_weighting;
    GL_EXT_vertex_weighting = new HashMap<Integer, String>(13);
    GL_EXT_vertex_weighting.put(GL_CURRENT_VERTEX_WEIGHT_EXT, "GL_CURRENT_VERTEX_WEIGHT_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT, "GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW0_STACK_DEPTH_EXT, "GL_MODELVIEW0_STACK_DEPTH_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT, "GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW1_EXT, "GL_MODELVIEW1_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT, "GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW1_MATRIX_EXT, "GL_MODELVIEW1_MATRIX_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHTING_EXT, "GL_VERTEX_WEIGHTING_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_EXT, "GL_VERTEX_WEIGHT_ARRAY_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW0_EXT, "GL_MODELVIEW0_EXT");
    GL_EXT_vertex_weighting.put(GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT, "GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW1_STACK_DEPTH_EXT, "GL_MODELVIEW1_STACK_DEPTH_EXT");
    GL_EXT_vertex_weighting.put(GL_MODELVIEW0_MATRIX_EXT, "GL_MODELVIEW0_MATRIX_EXT");
    return GL_EXT_vertex_weighting;
  }
  private static Map<Integer, String> GL_EXT_texture3D;
  private static Map<Integer, String> GL_EXT_texture3D() {
    if (GL_EXT_texture3D != null)
      return GL_EXT_texture3D;
    GL_EXT_texture3D = new HashMap<Integer, String>(9);
    GL_EXT_texture3D.put(GL_PACK_IMAGE_HEIGHT_EXT, "GL_PACK_IMAGE_HEIGHT_EXT");
    GL_EXT_texture3D.put(GL_UNPACK_SKIP_IMAGES_EXT, "GL_UNPACK_SKIP_IMAGES_EXT");
    GL_EXT_texture3D.put(GL_TEXTURE_DEPTH_EXT, "GL_TEXTURE_DEPTH_EXT");
    GL_EXT_texture3D.put(GL_PACK_SKIP_IMAGES_EXT, "GL_PACK_SKIP_IMAGES_EXT");
    GL_EXT_texture3D.put(GL_TEXTURE_WRAP_R_EXT, "GL_TEXTURE_WRAP_R_EXT");
    GL_EXT_texture3D.put(GL_UNPACK_IMAGE_HEIGHT_EXT, "GL_UNPACK_IMAGE_HEIGHT_EXT");
    GL_EXT_texture3D.put(GL_TEXTURE_3D_EXT, "GL_TEXTURE_3D_EXT");
    GL_EXT_texture3D.put(GL_MAX_3D_TEXTURE_SIZE_EXT, "GL_MAX_3D_TEXTURE_SIZE_EXT");
    GL_EXT_texture3D.put(GL_PROXY_TEXTURE_3D_EXT, "GL_PROXY_TEXTURE_3D_EXT");
    return GL_EXT_texture3D;
  }
  private static Map<Integer, String> GL_EXT_semaphore_win32;
  private static Map<Integer, String> GL_EXT_semaphore_win32() {
    if (GL_EXT_semaphore_win32 != null)
      return GL_EXT_semaphore_win32;
    GL_EXT_semaphore_win32 = new HashMap<Integer, String>(7);
    GL_EXT_semaphore_win32.put(GL_DEVICE_NODE_MASK_EXT, "GL_DEVICE_NODE_MASK_EXT");
    GL_EXT_semaphore_win32.put(GL_D3D12_FENCE_VALUE_EXT, "GL_D3D12_FENCE_VALUE_EXT");
    GL_EXT_semaphore_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_EXT");
    GL_EXT_semaphore_win32.put(GL_DEVICE_LUID_EXT, "GL_DEVICE_LUID_EXT");
    GL_EXT_semaphore_win32.put(GL_HANDLE_TYPE_D3D12_FENCE_EXT, "GL_HANDLE_TYPE_D3D12_FENCE_EXT");
    GL_EXT_semaphore_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT");
    GL_EXT_semaphore_win32.put(GL_LUID_SIZE_EXT, "GL_LUID_SIZE_EXT");
    return GL_EXT_semaphore_win32;
  }
  private static Map<Integer, String> GL_OES_fixed_point;
  private static Map<Integer, String> GL_OES_fixed_point() {
    if (GL_OES_fixed_point != null)
      return GL_OES_fixed_point;
    GL_OES_fixed_point = new HashMap<Integer, String>(14);
    GL_OES_fixed_point.put(GL_REFLECTION_MAP_OES, "GL_REFLECTION_MAP_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES");
    GL_OES_fixed_point.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES");
    GL_OES_fixed_point.put(GL_NORMAL_MAP_OES, "GL_NORMAL_MAP_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_OES, "GL_TEXTURE_CUBE_MAP_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_BINDING_CUBE_MAP_OES, "GL_TEXTURE_BINDING_CUBE_MAP_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_GEN_MODE_OES, "GL_TEXTURE_GEN_MODE_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_GEN_STR_OES, "GL_TEXTURE_GEN_STR_OES");
    GL_OES_fixed_point.put(GL_FIXED_OES, "GL_FIXED_OES");
    GL_OES_fixed_point.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES");
    return GL_OES_fixed_point;
  }
  private static Map<Integer, String> GL_ARB_texture_multisample;
  private static Map<Integer, String> GL_ARB_texture_multisample() {
    if (GL_ARB_texture_multisample != null)
      return GL_ARB_texture_multisample;
    GL_ARB_texture_multisample = new HashMap<Integer, String>(21);
    GL_ARB_texture_multisample.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE, "GL_PROXY_TEXTURE_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_TEXTURE_SAMPLES, "GL_TEXTURE_SAMPLES");
    GL_ARB_texture_multisample.put(GL_TEXTURE_FIXED_SAMPLE_LOCATIONS, "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS");
    GL_ARB_texture_multisample.put(GL_MAX_DEPTH_TEXTURE_SAMPLES, "GL_MAX_DEPTH_TEXTURE_SAMPLES");
    GL_ARB_texture_multisample.put(GL_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_MAX_SAMPLE_MASK_WORDS, "GL_MAX_SAMPLE_MASK_WORDS");
    GL_ARB_texture_multisample.put(GL_SAMPLE_MASK, "GL_SAMPLE_MASK");
    GL_ARB_texture_multisample.put(GL_SAMPLER_2D_MULTISAMPLE, "GL_SAMPLER_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_SAMPLE_MASK_VALUE, "GL_SAMPLE_MASK_VALUE");
    GL_ARB_texture_multisample.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_SAMPLE_POSITION, "GL_SAMPLE_POSITION");
    GL_ARB_texture_multisample.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE, "GL_TEXTURE_BINDING_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_INT_SAMPLER_2D_MULTISAMPLE, "GL_INT_SAMPLER_2D_MULTISAMPLE");
    GL_ARB_texture_multisample.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_MAX_INTEGER_SAMPLES, "GL_MAX_INTEGER_SAMPLES");
    GL_ARB_texture_multisample.put(GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_texture_multisample.put(GL_MAX_COLOR_TEXTURE_SAMPLES, "GL_MAX_COLOR_TEXTURE_SAMPLES");
    return GL_ARB_texture_multisample;
  }
  private static Map<Integer, String> GL_ARB_ES3_1_compatibility;
  private static Map<Integer, String> GL_ARB_ES3_1_compatibility() {
    if (GL_ARB_ES3_1_compatibility != null)
      return GL_ARB_ES3_1_compatibility;
    GL_ARB_ES3_1_compatibility = new HashMap<Integer, String>(1);
    GL_ARB_ES3_1_compatibility.put(GL_BACK, "GL_BACK");
    return GL_ARB_ES3_1_compatibility;
  }
  private static Map<Integer, String> GL_EXT_draw_range_elements;
  private static Map<Integer, String> GL_EXT_draw_range_elements() {
    if (GL_EXT_draw_range_elements != null)
      return GL_EXT_draw_range_elements;
    GL_EXT_draw_range_elements = new HashMap<Integer, String>(2);
    GL_EXT_draw_range_elements.put(GL_MAX_ELEMENTS_INDICES_EXT, "GL_MAX_ELEMENTS_INDICES_EXT");
    GL_EXT_draw_range_elements.put(GL_MAX_ELEMENTS_VERTICES_EXT, "GL_MAX_ELEMENTS_VERTICES_EXT");
    return GL_EXT_draw_range_elements;
  }
  private static Map<Integer, String> GL_IBM_vertex_array_lists;
  private static Map<Integer, String> GL_IBM_vertex_array_lists() {
    if (GL_IBM_vertex_array_lists != null)
      return GL_IBM_vertex_array_lists;
    GL_IBM_vertex_array_lists = new HashMap<Integer, String>(16);
    GL_IBM_vertex_array_lists.put(GL_FOG_COORDINATE_ARRAY_LIST_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_VERTEX_ARRAY_LIST_IBM, "GL_VERTEX_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_COLOR_ARRAY_LIST_IBM, "GL_COLOR_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_COLOR_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_EDGE_FLAG_ARRAY_LIST_IBM, "GL_EDGE_FLAG_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_VERTEX_ARRAY_LIST_STRIDE_IBM, "GL_VERTEX_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_TEXTURE_COORD_ARRAY_LIST_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_SECONDARY_COLOR_ARRAY_LIST_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM, "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_NORMAL_ARRAY_LIST_STRIDE_IBM, "GL_NORMAL_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_NORMAL_ARRAY_LIST_IBM, "GL_NORMAL_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM, "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM, "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM, "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM");
    GL_IBM_vertex_array_lists.put(GL_INDEX_ARRAY_LIST_IBM, "GL_INDEX_ARRAY_LIST_IBM");
    GL_IBM_vertex_array_lists.put(GL_INDEX_ARRAY_LIST_STRIDE_IBM, "GL_INDEX_ARRAY_LIST_STRIDE_IBM");
    return GL_IBM_vertex_array_lists;
  }
  private static Map<Integer, String> GL_NV_register_combiners;
  private static Map<Integer, String> GL_NV_register_combiners() {
    if (GL_NV_register_combiners != null)
      return GL_NV_register_combiners;
    GL_NV_register_combiners = new HashMap<Integer, String>(56);
    GL_NV_register_combiners.put(GL_COMBINER_SCALE_NV, "GL_COMBINER_SCALE_NV");
    GL_NV_register_combiners.put(GL_COLOR_SUM_CLAMP_NV, "GL_COLOR_SUM_CLAMP_NV");
    GL_NV_register_combiners.put(GL_REGISTER_COMBINERS_NV, "GL_REGISTER_COMBINERS_NV");
    GL_NV_register_combiners.put(GL_PRIMARY_COLOR_NV, "GL_PRIMARY_COLOR_NV");
    GL_NV_register_combiners.put(GL_DISCARD_NV, "GL_DISCARD_NV");
    GL_NV_register_combiners.put(GL_SIGNED_NEGATE_NV, "GL_SIGNED_NEGATE_NV");
    GL_NV_register_combiners.put(GL_SIGNED_IDENTITY_NV, "GL_SIGNED_IDENTITY_NV");
    GL_NV_register_combiners.put(GL_HALF_BIAS_NEGATE_NV, "GL_HALF_BIAS_NEGATE_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_E_NV, "GL_VARIABLE_E_NV");
    GL_NV_register_combiners.put(GL_COMBINER_MAPPING_NV, "GL_COMBINER_MAPPING_NV");
    GL_NV_register_combiners.put(GL_COMBINER1_NV, "GL_COMBINER1_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_A_NV, "GL_VARIABLE_A_NV");
    GL_NV_register_combiners.put(GL_CONSTANT_COLOR1_NV, "GL_CONSTANT_COLOR1_NV");
    GL_NV_register_combiners.put(GL_COMBINER_AB_OUTPUT_NV, "GL_COMBINER_AB_OUTPUT_NV");
    GL_NV_register_combiners.put(GL_UNSIGNED_IDENTITY_NV, "GL_UNSIGNED_IDENTITY_NV");
    GL_NV_register_combiners.put(GL_COMBINER_AB_DOT_PRODUCT_NV, "GL_COMBINER_AB_DOT_PRODUCT_NV");
    GL_NV_register_combiners.put(GL_TEXTURE0_ARB, "GL_TEXTURE0_ARB");
    GL_NV_register_combiners.put(GL_COMBINER_CD_OUTPUT_NV, "GL_COMBINER_CD_OUTPUT_NV");
    GL_NV_register_combiners.put(GL_COMBINER_MUX_SUM_NV, "GL_COMBINER_MUX_SUM_NV");
    GL_NV_register_combiners.put(GL_MAX_GENERAL_COMBINERS_NV, "GL_MAX_GENERAL_COMBINERS_NV");
    GL_NV_register_combiners.put(GL_SPARE0_NV, "GL_SPARE0_NV");
    GL_NV_register_combiners.put(GL_COMBINER7_NV, "GL_COMBINER7_NV");
    GL_NV_register_combiners.put(GL_BIAS_BY_NEGATIVE_ONE_HALF_NV, "GL_BIAS_BY_NEGATIVE_ONE_HALF_NV");
    GL_NV_register_combiners.put(GL_ZERO, "GL_ZERO");
    GL_NV_register_combiners.put(GL_TEXTURE1_ARB, "GL_TEXTURE1_ARB");
    GL_NV_register_combiners.put(GL_VARIABLE_D_NV, "GL_VARIABLE_D_NV");
    GL_NV_register_combiners.put(GL_COMBINER4_NV, "GL_COMBINER4_NV");
    GL_NV_register_combiners.put(GL_COMBINER0_NV, "GL_COMBINER0_NV");
    GL_NV_register_combiners.put(GL_NONE, "GL_NONE");
    GL_NV_register_combiners.put(GL_CONSTANT_COLOR0_NV, "GL_CONSTANT_COLOR0_NV");
    GL_NV_register_combiners.put(GL_COMBINER_SUM_OUTPUT_NV, "GL_COMBINER_SUM_OUTPUT_NV");
    GL_NV_register_combiners.put(GL_SCALE_BY_FOUR_NV, "GL_SCALE_BY_FOUR_NV");
    GL_NV_register_combiners.put(GL_COMBINER_BIAS_NV, "GL_COMBINER_BIAS_NV");
    GL_NV_register_combiners.put(GL_EXPAND_NEGATE_NV, "GL_EXPAND_NEGATE_NV");
    GL_NV_register_combiners.put(GL_FOG, "GL_FOG");
    GL_NV_register_combiners.put(GL_COMBINER6_NV, "GL_COMBINER6_NV");
    GL_NV_register_combiners.put(GL_SCALE_BY_TWO_NV, "GL_SCALE_BY_TWO_NV");
    GL_NV_register_combiners.put(GL_SPARE1_NV, "GL_SPARE1_NV");
    GL_NV_register_combiners.put(GL_HALF_BIAS_NORMAL_NV, "GL_HALF_BIAS_NORMAL_NV");
    GL_NV_register_combiners.put(GL_COMBINER_INPUT_NV, "GL_COMBINER_INPUT_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_G_NV, "GL_VARIABLE_G_NV");
    GL_NV_register_combiners.put(GL_UNSIGNED_INVERT_NV, "GL_UNSIGNED_INVERT_NV");
    GL_NV_register_combiners.put(GL_SCALE_BY_ONE_HALF_NV, "GL_SCALE_BY_ONE_HALF_NV");
    GL_NV_register_combiners.put(GL_COMBINER3_NV, "GL_COMBINER3_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_C_NV, "GL_VARIABLE_C_NV");
    GL_NV_register_combiners.put(GL_E_TIMES_F_NV, "GL_E_TIMES_F_NV");
    GL_NV_register_combiners.put(GL_COMBINER_COMPONENT_USAGE_NV, "GL_COMBINER_COMPONENT_USAGE_NV");
    GL_NV_register_combiners.put(GL_SECONDARY_COLOR_NV, "GL_SECONDARY_COLOR_NV");
    GL_NV_register_combiners.put(GL_COMBINER5_NV, "GL_COMBINER5_NV");
    GL_NV_register_combiners.put(GL_COMBINER_CD_DOT_PRODUCT_NV, "GL_COMBINER_CD_DOT_PRODUCT_NV");
    GL_NV_register_combiners.put(GL_EXPAND_NORMAL_NV, "GL_EXPAND_NORMAL_NV");
    GL_NV_register_combiners.put(GL_NUM_GENERAL_COMBINERS_NV, "GL_NUM_GENERAL_COMBINERS_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_F_NV, "GL_VARIABLE_F_NV");
    GL_NV_register_combiners.put(GL_SPARE0_PLUS_SECONDARY_COLOR_NV, "GL_SPARE0_PLUS_SECONDARY_COLOR_NV");
    GL_NV_register_combiners.put(GL_COMBINER2_NV, "GL_COMBINER2_NV");
    GL_NV_register_combiners.put(GL_VARIABLE_B_NV, "GL_VARIABLE_B_NV");
    return GL_NV_register_combiners;
  }
  private static Map<Integer, String> GL_EXT_geometry_shader;
  private static Map<Integer, String> GL_EXT_geometry_shader() {
    if (GL_EXT_geometry_shader != null)
      return GL_EXT_geometry_shader;
    GL_EXT_geometry_shader = new HashMap<Integer, String>(42);
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_FIRST_VERTEX_CONVENTION_EXT, "GL_FIRST_VERTEX_CONVENTION_EXT");
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_EXT_geometry_shader.put(GL_LAYER_PROVOKING_VERTEX_EXT, "GL_LAYER_PROVOKING_VERTEX_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT");
    GL_EXT_geometry_shader.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_PRIMITIVES_GENERATED_EXT, "GL_PRIMITIVES_GENERATED_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_FRAMEBUFFER_LAYERS_EXT, "GL_MAX_FRAMEBUFFER_LAYERS_EXT");
    GL_EXT_geometry_shader.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_PROGRAM_NV, "GL_GEOMETRY_PROGRAM_NV");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT, "GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT");
    GL_EXT_geometry_shader.put(GL_REFERENCED_BY_GEOMETRY_SHADER_EXT, "GL_REFERENCED_BY_GEOMETRY_SHADER_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_OUTPUT_TYPE_EXT, "GL_GEOMETRY_OUTPUT_TYPE_EXT");
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT, "GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_SHADER_INVOCATIONS_EXT, "GL_GEOMETRY_SHADER_INVOCATIONS_EXT");
    GL_EXT_geometry_shader.put(GL_PROGRAM_POINT_SIZE_EXT, "GL_PROGRAM_POINT_SIZE_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_PROGRAM_OUTPUT_VERTICES_NV, "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_VERTICES_OUT_EXT, "GL_GEOMETRY_VERTICES_OUT_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV, "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_LINKED_INPUT_TYPE_EXT, "GL_GEOMETRY_LINKED_INPUT_TYPE_EXT");
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT");
    GL_EXT_geometry_shader.put(GL_LAST_VERTEX_CONVENTION_EXT, "GL_LAST_VERTEX_CONVENTION_EXT");
    GL_EXT_geometry_shader.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_LINKED_VERTICES_OUT_EXT, "GL_GEOMETRY_LINKED_VERTICES_OUT_EXT");
    GL_EXT_geometry_shader.put(GL_UNDEFINED_VERTEX_EXT, "GL_UNDEFINED_VERTEX_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_SHADER_BIT_EXT, "GL_GEOMETRY_SHADER_BIT_EXT");
    GL_EXT_geometry_shader.put(GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_SHADER_EXT, "GL_GEOMETRY_SHADER_EXT");
    GL_EXT_geometry_shader.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT");
    GL_EXT_geometry_shader.put(GL_GEOMETRY_INPUT_TYPE_EXT, "GL_GEOMETRY_INPUT_TYPE_EXT");
    return GL_EXT_geometry_shader;
  }
  private static Map<Integer, String> GL_INTEL_parallel_arrays;
  private static Map<Integer, String> GL_INTEL_parallel_arrays() {
    if (GL_INTEL_parallel_arrays != null)
      return GL_INTEL_parallel_arrays;
    GL_INTEL_parallel_arrays = new HashMap<Integer, String>(5);
    GL_INTEL_parallel_arrays.put(GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL, "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL, "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL, "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_PARALLEL_ARRAYS_INTEL, "GL_PARALLEL_ARRAYS_INTEL");
    GL_INTEL_parallel_arrays.put(GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL, "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL");
    return GL_INTEL_parallel_arrays;
  }
  private static Map<Integer, String> GL_APPLE_vertex_array_range;
  private static Map<Integer, String> GL_APPLE_vertex_array_range() {
    if (GL_APPLE_vertex_array_range != null)
      return GL_APPLE_vertex_array_range;
    GL_APPLE_vertex_array_range = new HashMap<Integer, String>(7);
    GL_APPLE_vertex_array_range.put(GL_STORAGE_CLIENT_APPLE, "GL_STORAGE_CLIENT_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_STORAGE_HINT_APPLE, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE, "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE");
    GL_APPLE_vertex_array_range.put(GL_STORAGE_SHARED_APPLE, "GL_STORAGE_SHARED_APPLE");
    GL_APPLE_vertex_array_range.put(GL_STORAGE_CACHED_APPLE, "GL_STORAGE_CACHED_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_APPLE, "GL_VERTEX_ARRAY_RANGE_APPLE");
    GL_APPLE_vertex_array_range.put(GL_VERTEX_ARRAY_RANGE_POINTER_APPLE, "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE");
    return GL_APPLE_vertex_array_range;
  }
  private static Map<Integer, String> GL_ARB_shader_subroutine;
  private static Map<Integer, String> GL_ARB_shader_subroutine() {
    if (GL_ARB_shader_subroutine != null)
      return GL_ARB_shader_subroutine;
    GL_ARB_shader_subroutine = new HashMap<Integer, String>(11);
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS");
    GL_ARB_shader_subroutine.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINES, "GL_ACTIVE_SUBROUTINES");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_MAX_LENGTH, "GL_ACTIVE_SUBROUTINE_MAX_LENGTH");
    GL_ARB_shader_subroutine.put(GL_MAX_SUBROUTINES, "GL_MAX_SUBROUTINES");
    GL_ARB_shader_subroutine.put(GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS, "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS");
    GL_ARB_shader_subroutine.put(GL_ACTIVE_SUBROUTINE_UNIFORMS, "GL_ACTIVE_SUBROUTINE_UNIFORMS");
    GL_ARB_shader_subroutine.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    GL_ARB_shader_subroutine.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    GL_ARB_shader_subroutine.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
    return GL_ARB_shader_subroutine;
  }
  private static Map<Integer, String> GL_EXT_pixel_transform;
  private static Map<Integer, String> GL_EXT_pixel_transform() {
    if (GL_EXT_pixel_transform != null)
      return GL_EXT_pixel_transform;
    GL_EXT_pixel_transform = new HashMap<Integer, String>(9);
    GL_EXT_pixel_transform.put(GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT, "GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_TRANSFORM_2D_MATRIX_EXT, "GL_PIXEL_TRANSFORM_2D_MATRIX_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_CUBIC_WEIGHT_EXT, "GL_PIXEL_CUBIC_WEIGHT_EXT");
    GL_EXT_pixel_transform.put(GL_CUBIC_EXT, "GL_CUBIC_EXT");
    GL_EXT_pixel_transform.put(GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT, "GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_TRANSFORM_2D_EXT, "GL_PIXEL_TRANSFORM_2D_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_MAG_FILTER_EXT, "GL_PIXEL_MAG_FILTER_EXT");
    GL_EXT_pixel_transform.put(GL_PIXEL_MIN_FILTER_EXT, "GL_PIXEL_MIN_FILTER_EXT");
    GL_EXT_pixel_transform.put(GL_AVERAGE_EXT, "GL_AVERAGE_EXT");
    return GL_EXT_pixel_transform;
  }
  private static Map<Integer, String> GL_SGI_color_table;
  private static Map<Integer, String> GL_SGI_color_table() {
    if (GL_SGI_color_table != null)
      return GL_SGI_color_table;
    GL_SGI_color_table = new HashMap<Integer, String>(16);
    GL_SGI_color_table.put(GL_COLOR_TABLE_SCALE_SGI, "GL_COLOR_TABLE_SCALE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_BIAS_SGI, "GL_COLOR_TABLE_BIAS_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_RED_SIZE_SGI, "GL_COLOR_TABLE_RED_SIZE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_BLUE_SIZE_SGI, "GL_COLOR_TABLE_BLUE_SIZE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_GREEN_SIZE_SGI, "GL_COLOR_TABLE_GREEN_SIZE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_SGI, "GL_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_WIDTH_SGI, "GL_COLOR_TABLE_WIDTH_SGI");
    GL_SGI_color_table.put(GL_PROXY_COLOR_TABLE_SGI, "GL_PROXY_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_LUMINANCE_SIZE_SGI, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI");
    GL_SGI_color_table.put(GL_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_ALPHA_SIZE_SGI, "GL_COLOR_TABLE_ALPHA_SIZE_SGI");
    GL_SGI_color_table.put(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_FORMAT_SGI, "GL_COLOR_TABLE_FORMAT_SGI");
    GL_SGI_color_table.put(GL_COLOR_TABLE_INTENSITY_SIZE_SGI, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI");
    return GL_SGI_color_table;
  }
  private static Map<Integer, String> GL_EXT_secondary_color;
  private static Map<Integer, String> GL_EXT_secondary_color() {
    if (GL_EXT_secondary_color != null)
      return GL_EXT_secondary_color;
    GL_EXT_secondary_color = new HashMap<Integer, String>(7);
    GL_EXT_secondary_color.put(GL_COLOR_SUM_EXT, "GL_COLOR_SUM_EXT");
    GL_EXT_secondary_color.put(GL_CURRENT_SECONDARY_COLOR_EXT, "GL_CURRENT_SECONDARY_COLOR_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_POINTER_EXT, "GL_SECONDARY_COLOR_ARRAY_POINTER_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_SIZE_EXT, "GL_SECONDARY_COLOR_ARRAY_SIZE_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_TYPE_EXT, "GL_SECONDARY_COLOR_ARRAY_TYPE_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_EXT, "GL_SECONDARY_COLOR_ARRAY_EXT");
    GL_EXT_secondary_color.put(GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT, "GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT");
    return GL_EXT_secondary_color;
  }
  private static Map<Integer, String> GL_IMG_framebuffer_downsample;
  private static Map<Integer, String> GL_IMG_framebuffer_downsample() {
    if (GL_IMG_framebuffer_downsample != null)
      return GL_IMG_framebuffer_downsample;
    GL_IMG_framebuffer_downsample = new HashMap<Integer, String>(4);
    GL_IMG_framebuffer_downsample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG");
    GL_IMG_framebuffer_downsample.put(GL_NUM_DOWNSAMPLE_SCALES_IMG, "GL_NUM_DOWNSAMPLE_SCALES_IMG");
    GL_IMG_framebuffer_downsample.put(GL_DOWNSAMPLE_SCALES_IMG, "GL_DOWNSAMPLE_SCALES_IMG");
    GL_IMG_framebuffer_downsample.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG");
    return GL_IMG_framebuffer_downsample;
  }
  private static Map<Integer, String> GL_ARB_tessellation_shader;
  private static Map<Integer, String> GL_ARB_tessellation_shader() {
    if (GL_ARB_tessellation_shader != null)
      return GL_ARB_tessellation_shader;
    GL_ARB_tessellation_shader = new HashMap<Integer, String>(37);
    GL_ARB_tessellation_shader.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER");
    GL_ARB_tessellation_shader.put(GL_CW, "GL_CW");
    GL_ARB_tessellation_shader.put(GL_TESS_CONTROL_OUTPUT_VERTICES, "GL_TESS_CONTROL_OUTPUT_VERTICES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_GEN_LEVEL, "GL_MAX_TESS_GEN_LEVEL");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_PATCH_DEFAULT_OUTER_LEVEL, "GL_PATCH_DEFAULT_OUTER_LEVEL");
    GL_ARB_tessellation_shader.put(GL_MAX_PATCH_VERTICES, "GL_MAX_PATCH_VERTICES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS");
    GL_ARB_tessellation_shader.put(GL_PATCH_DEFAULT_INNER_LEVEL, "GL_PATCH_DEFAULT_INNER_LEVEL");
    GL_ARB_tessellation_shader.put(GL_TRIANGLES, "GL_TRIANGLES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_QUADS, "GL_QUADS");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_FRACTIONAL_EVEN, "GL_FRACTIONAL_EVEN");
    GL_ARB_tessellation_shader.put(GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_POINT_MODE, "GL_TESS_GEN_POINT_MODE");
    GL_ARB_tessellation_shader.put(GL_CCW, "GL_CCW");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_EQUAL, "GL_EQUAL");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_VERTEX_ORDER, "GL_TESS_GEN_VERTEX_ORDER");
    GL_ARB_tessellation_shader.put(GL_TESS_CONTROL_SHADER, "GL_TESS_CONTROL_SHADER");
    GL_ARB_tessellation_shader.put(GL_PATCHES, "GL_PATCHES");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_SPACING, "GL_TESS_GEN_SPACING");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_ISOLINES, "GL_ISOLINES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS");
    GL_ARB_tessellation_shader.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_PATCH_VERTICES, "GL_PATCH_VERTICES");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS");
    GL_ARB_tessellation_shader.put(GL_FRACTIONAL_ODD, "GL_FRACTIONAL_ODD");
    GL_ARB_tessellation_shader.put(GL_TESS_GEN_MODE, "GL_TESS_GEN_MODE");
    GL_ARB_tessellation_shader.put(GL_TESS_EVALUATION_SHADER, "GL_TESS_EVALUATION_SHADER");
    GL_ARB_tessellation_shader.put(GL_MAX_TESS_PATCH_COMPONENTS, "GL_MAX_TESS_PATCH_COMPONENTS");
    return GL_ARB_tessellation_shader;
  }
  private static Map<Integer, String> GL_ARB_fragment_program;
  private static Map<Integer, String> GL_ARB_fragment_program() {
    if (GL_ARB_fragment_program != null)
      return GL_ARB_fragment_program;
    GL_ARB_fragment_program = new HashMap<Integer, String>(94);
    GL_ARB_fragment_program.put(GL_MATRIX11_ARB, "GL_MATRIX11_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_PROGRAM_TWO_SIDE_ARB, "GL_VERTEX_PROGRAM_TWO_SIDE_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB, "GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX29_ARB, "GL_MATRIX29_ARB");
    GL_ARB_fragment_program.put(GL_CURRENT_VERTEX_ATTRIB_ARB, "GL_CURRENT_VERTEX_ATTRIB_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB, "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB, "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX3_ARB, "GL_MATRIX3_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX12_ARB, "GL_MATRIX12_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX28_ARB, "GL_MATRIX28_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX4_ARB, "GL_MATRIX4_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX20_ARB, "GL_MATRIX20_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_BINDING_ARB, "GL_PROGRAM_BINDING_ARB");
    GL_ARB_fragment_program.put(GL_TRANSPOSE_CURRENT_MATRIX_ARB, "GL_TRANSPOSE_CURRENT_MATRIX_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_TEX_INSTRUCTIONS_ARB, "GL_PROGRAM_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ATTRIBS_ARB, "GL_PROGRAM_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_CURRENT_MATRIX_ARB, "GL_CURRENT_MATRIX_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX1_ARB, "GL_MATRIX1_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX22_ARB, "GL_MATRIX22_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB, "GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB, "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_PARAMETERS_ARB, "GL_PROGRAM_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_VERTEX_ATTRIBS_ARB, "GL_MAX_VERTEX_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX19_ARB, "GL_MATRIX19_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_FORMAT_ASCII_ARB, "GL_PROGRAM_FORMAT_ASCII_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ENV_PARAMETERS_ARB, "GL_MAX_PROGRAM_ENV_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ALU_INSTRUCTIONS_ARB, "GL_PROGRAM_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX21_ARB, "GL_MATRIX21_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_TEMPORARIES_ARB, "GL_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX10_ARB, "GL_MATRIX10_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX17_ARB, "GL_MATRIX17_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX23_ARB, "GL_MATRIX23_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ATTRIBS_ARB, "GL_MAX_PROGRAM_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_CURRENT_MATRIX_STACK_DEPTH_ARB, "GL_CURRENT_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX18_ARB, "GL_MATRIX18_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_PARAMETERS_ARB, "GL_MAX_PROGRAM_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_STRING_ARB, "GL_PROGRAM_STRING_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX2_ARB, "GL_MATRIX2_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_MATRICES_ARB, "GL_MAX_PROGRAM_MATRICES_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_PROGRAM_ARB, "GL_VERTEX_PROGRAM_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX16_ARB, "GL_MATRIX16_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX8_ARB, "GL_MATRIX8_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB, "GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX24_ARB, "GL_MATRIX24_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_FORMAT_ARB, "GL_PROGRAM_FORMAT_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX9_ARB, "GL_MATRIX9_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX25_ARB, "GL_MATRIX25_ARB");
    GL_ARB_fragment_program.put(GL_MAX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_TEMPORARIES_ARB, "GL_MAX_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX15_ARB, "GL_MATRIX15_ARB");
    GL_ARB_fragment_program.put(GL_FRAGMENT_PROGRAM_ARB, "GL_FRAGMENT_PROGRAM_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_PROGRAM_POINT_SIZE_ARB, "GL_VERTEX_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_INSTRUCTIONS_ARB, "GL_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_PROGRAM_NATIVE_TEMPORARIES_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB, "GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX0_ARB, "GL_MATRIX0_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ERROR_STRING_ARB, "GL_PROGRAM_ERROR_STRING_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB, "GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_COLOR_SUM_ARB, "GL_COLOR_SUM_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX6_ARB, "GL_MATRIX6_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX30_ARB, "GL_MATRIX30_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB, "GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX27_ARB, "GL_MATRIX27_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_TEXTURE_COORDS_ARB, "GL_MAX_TEXTURE_COORDS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX13_ARB, "GL_MATRIX13_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB, "GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX14_ARB, "GL_MATRIX14_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ERROR_POSITION_ARB, "GL_PROGRAM_ERROR_POSITION_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_ADDRESS_REGISTERS_ARB, "GL_PROGRAM_ADDRESS_REGISTERS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX5_ARB, "GL_MATRIX5_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX7_ARB, "GL_MATRIX7_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_TEX_INDIRECTIONS_ARB, "GL_PROGRAM_TEX_INDIRECTIONS_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB");
    GL_ARB_fragment_program.put(GL_PROGRAM_LENGTH_ARB, "GL_PROGRAM_LENGTH_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB, "GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX26_ARB, "GL_MATRIX26_ARB");
    GL_ARB_fragment_program.put(GL_MATRIX31_ARB, "GL_MATRIX31_ARB");
    GL_ARB_fragment_program.put(GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB, "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB");
    GL_ARB_fragment_program.put(GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB");
    return GL_ARB_fragment_program;
  }
  private static Map<Integer, String> GL_OES_blend_equation_separate;
  private static Map<Integer, String> GL_OES_blend_equation_separate() {
    if (GL_OES_blend_equation_separate != null)
      return GL_OES_blend_equation_separate;
    GL_OES_blend_equation_separate = new HashMap<Integer, String>(2);
    GL_OES_blend_equation_separate.put(GL_BLEND_EQUATION_RGB_OES, "GL_BLEND_EQUATION_RGB_OES");
    GL_OES_blend_equation_separate.put(GL_BLEND_EQUATION_ALPHA_OES, "GL_BLEND_EQUATION_ALPHA_OES");
    return GL_OES_blend_equation_separate;
  }
  private static Map<Integer, String> GL_ARB_shading_language_include;
  private static Map<Integer, String> GL_ARB_shading_language_include() {
    if (GL_ARB_shading_language_include != null)
      return GL_ARB_shading_language_include;
    GL_ARB_shading_language_include = new HashMap<Integer, String>(3);
    GL_ARB_shading_language_include.put(GL_SHADER_INCLUDE_ARB, "GL_SHADER_INCLUDE_ARB");
    GL_ARB_shading_language_include.put(GL_NAMED_STRING_LENGTH_ARB, "GL_NAMED_STRING_LENGTH_ARB");
    GL_ARB_shading_language_include.put(GL_NAMED_STRING_TYPE_ARB, "GL_NAMED_STRING_TYPE_ARB");
    return GL_ARB_shading_language_include;
  }
  private static Map<Integer, String> GL_ARB_uniform_buffer_object;
  private static Map<Integer, String> GL_ARB_uniform_buffer_object() {
    if (GL_ARB_uniform_buffer_object != null)
      return GL_ARB_uniform_buffer_object;
    GL_ARB_uniform_buffer_object = new HashMap<Integer, String>(33);
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_SIZE, "GL_UNIFORM_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_DATA_SIZE, "GL_UNIFORM_BLOCK_DATA_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_MAX_UNIFORM_BUFFER_BINDINGS, "GL_MAX_UNIFORM_BUFFER_BINDINGS");
    GL_ARB_uniform_buffer_object.put(GL_MAX_FRAGMENT_UNIFORM_BLOCKS, "GL_MAX_FRAGMENT_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER, "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES");
    GL_ARB_uniform_buffer_object.put(GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH");
    GL_ARB_uniform_buffer_object.put(GL_MAX_UNIFORM_BLOCK_SIZE, "GL_MAX_UNIFORM_BLOCK_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_OFFSET, "GL_UNIFORM_OFFSET");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_IS_ROW_MAJOR, "GL_UNIFORM_IS_ROW_MAJOR");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_INDEX, "GL_UNIFORM_BLOCK_INDEX");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_BINDING, "GL_UNIFORM_BLOCK_BINDING");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT");
    GL_ARB_uniform_buffer_object.put(GL_INVALID_INDEX, "GL_INVALID_INDEX");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_SIZE, "GL_UNIFORM_BUFFER_SIZE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER, "GL_UNIFORM_BUFFER");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BLOCK_NAME_LENGTH, "GL_UNIFORM_BLOCK_NAME_LENGTH");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_ARRAY_STRIDE, "GL_UNIFORM_ARRAY_STRIDE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_BINDING, "GL_UNIFORM_BUFFER_BINDING");
    GL_ARB_uniform_buffer_object.put(GL_ACTIVE_UNIFORM_BLOCKS, "GL_ACTIVE_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_MAX_COMBINED_UNIFORM_BLOCKS, "GL_MAX_COMBINED_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_MATRIX_STRIDE, "GL_UNIFORM_MATRIX_STRIDE");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_TYPE, "GL_UNIFORM_TYPE");
    GL_ARB_uniform_buffer_object.put(GL_MAX_VERTEX_UNIFORM_BLOCKS, "GL_MAX_VERTEX_UNIFORM_BLOCKS");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_NAME_LENGTH, "GL_UNIFORM_NAME_LENGTH");
    GL_ARB_uniform_buffer_object.put(GL_UNIFORM_BUFFER_START, "GL_UNIFORM_BUFFER_START");
    return GL_ARB_uniform_buffer_object;
  }
  private static Map<Integer, String> GL_SGIX_list_priority;
  private static Map<Integer, String> GL_SGIX_list_priority() {
    if (GL_SGIX_list_priority != null)
      return GL_SGIX_list_priority;
    GL_SGIX_list_priority = new HashMap<Integer, String>(1);
    GL_SGIX_list_priority.put(GL_LIST_PRIORITY_SGIX, "GL_LIST_PRIORITY_SGIX");
    return GL_SGIX_list_priority;
  }
  private static Map<Integer, String> GL_ARB_occlusion_query;
  private static Map<Integer, String> GL_ARB_occlusion_query() {
    if (GL_ARB_occlusion_query != null)
      return GL_ARB_occlusion_query;
    GL_ARB_occlusion_query = new HashMap<Integer, String>(5);
    GL_ARB_occlusion_query.put(GL_SAMPLES_PASSED_ARB, "GL_SAMPLES_PASSED_ARB");
    GL_ARB_occlusion_query.put(GL_QUERY_RESULT_ARB, "GL_QUERY_RESULT_ARB");
    GL_ARB_occlusion_query.put(GL_QUERY_RESULT_AVAILABLE_ARB, "GL_QUERY_RESULT_AVAILABLE_ARB");
    GL_ARB_occlusion_query.put(GL_QUERY_COUNTER_BITS_ARB, "GL_QUERY_COUNTER_BITS_ARB");
    GL_ARB_occlusion_query.put(GL_CURRENT_QUERY_ARB, "GL_CURRENT_QUERY_ARB");
    return GL_ARB_occlusion_query;
  }
  private static Map<Integer, String> GL_AMD_debug_output;
  private static Map<Integer, String> GL_AMD_debug_output() {
    if (GL_AMD_debug_output != null)
      return GL_AMD_debug_output;
    GL_AMD_debug_output = new HashMap<Integer, String>(14);
    GL_AMD_debug_output.put(GL_MAX_DEBUG_LOGGED_MESSAGES_AMD, "GL_MAX_DEBUG_LOGGED_MESSAGES_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD, "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD, "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_SEVERITY_MEDIUM_AMD, "GL_DEBUG_SEVERITY_MEDIUM_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_SEVERITY_LOW_AMD, "GL_DEBUG_SEVERITY_LOW_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_PERFORMANCE_AMD, "GL_DEBUG_CATEGORY_PERFORMANCE_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_SEVERITY_HIGH_AMD, "GL_DEBUG_SEVERITY_HIGH_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_APPLICATION_AMD, "GL_DEBUG_CATEGORY_APPLICATION_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_DEPRECATION_AMD, "GL_DEBUG_CATEGORY_DEPRECATION_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_LOGGED_MESSAGES_AMD, "GL_DEBUG_LOGGED_MESSAGES_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD, "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD");
    GL_AMD_debug_output.put(GL_MAX_DEBUG_MESSAGE_LENGTH_AMD, "GL_MAX_DEBUG_MESSAGE_LENGTH_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_API_ERROR_AMD, "GL_DEBUG_CATEGORY_API_ERROR_AMD");
    GL_AMD_debug_output.put(GL_DEBUG_CATEGORY_OTHER_AMD, "GL_DEBUG_CATEGORY_OTHER_AMD");
    return GL_AMD_debug_output;
  }
  private static Map<Integer, String> GL_EXT_x11_sync_object;
  private static Map<Integer, String> GL_EXT_x11_sync_object() {
    if (GL_EXT_x11_sync_object != null)
      return GL_EXT_x11_sync_object;
    GL_EXT_x11_sync_object = new HashMap<Integer, String>(1);
    GL_EXT_x11_sync_object.put(GL_SYNC_X11_FENCE_EXT, "GL_SYNC_X11_FENCE_EXT");
    return GL_EXT_x11_sync_object;
  }
  private static Map<Integer, String> GL_NV_copy_buffer;
  private static Map<Integer, String> GL_NV_copy_buffer() {
    if (GL_NV_copy_buffer != null)
      return GL_NV_copy_buffer;
    GL_NV_copy_buffer = new HashMap<Integer, String>(2);
    GL_NV_copy_buffer.put(GL_COPY_READ_BUFFER_NV, "GL_COPY_READ_BUFFER_NV");
    GL_NV_copy_buffer.put(GL_COPY_WRITE_BUFFER_NV, "GL_COPY_WRITE_BUFFER_NV");
    return GL_NV_copy_buffer;
  }
  private static Map<Integer, String> GL_NV_video_capture;
  private static Map<Integer, String> GL_NV_video_capture() {
    if (GL_NV_video_capture != null)
      return GL_NV_video_capture;
    GL_NV_video_capture = new HashMap<Integer, String>(29);
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_MIN_NV, "GL_VIDEO_COLOR_CONVERSION_MIN_NV");
    GL_NV_video_capture.put(GL_YCBAYCR8A_4224_NV, "GL_YCBAYCR8A_4224_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV, "GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV");
    GL_NV_video_capture.put(GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV, "GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV");
    GL_NV_video_capture.put(GL_FIELD_LOWER_NV, "GL_FIELD_LOWER_NV");
    GL_NV_video_capture.put(GL_NUM_VIDEO_CAPTURE_STREAMS_NV, "GL_NUM_VIDEO_CAPTURE_STREAMS_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_NV, "GL_VIDEO_BUFFER_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV, "GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV");
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_MATRIX_NV, "GL_VIDEO_COLOR_CONVERSION_MATRIX_NV");
    GL_NV_video_capture.put(GL_Z4Y12Z4CB12Z4CR12_444_NV, "GL_Z4Y12Z4CB12Z4CR12_444_NV");
    GL_NV_video_capture.put(GL_SUCCESS_NV, "GL_SUCCESS_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_BINDING_NV, "GL_VIDEO_BUFFER_BINDING_NV");
    GL_NV_video_capture.put(GL_VIDEO_BUFFER_PITCH_NV, "GL_VIDEO_BUFFER_PITCH_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV, "GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV");
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_OFFSET_NV, "GL_VIDEO_COLOR_CONVERSION_OFFSET_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV, "GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV");
    GL_NV_video_capture.put(GL_VIDEO_COLOR_CONVERSION_MAX_NV, "GL_VIDEO_COLOR_CONVERSION_MAX_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FRAME_WIDTH_NV, "GL_VIDEO_CAPTURE_FRAME_WIDTH_NV");
    GL_NV_video_capture.put(GL_PARTIAL_SUCCESS_NV, "GL_PARTIAL_SUCCESS_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV, "GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV");
    GL_NV_video_capture.put(GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV, "GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV");
    GL_NV_video_capture.put(GL_LAST_VIDEO_CAPTURE_STATUS_NV, "GL_LAST_VIDEO_CAPTURE_STATUS_NV");
    GL_NV_video_capture.put(GL_FAILURE_NV, "GL_FAILURE_NV");
    GL_NV_video_capture.put(GL_YCBYCR8_422_NV, "GL_YCBYCR8_422_NV");
    GL_NV_video_capture.put(GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV, "GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV");
    GL_NV_video_capture.put(GL_FIELD_UPPER_NV, "GL_FIELD_UPPER_NV");
    GL_NV_video_capture.put(GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV, "GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV");
    GL_NV_video_capture.put(GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV, "GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV");
    GL_NV_video_capture.put(GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV, "GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV");
    return GL_NV_video_capture;
  }
  private static Map<Integer, String> GL_EXT_cull_vertex;
  private static Map<Integer, String> GL_EXT_cull_vertex() {
    if (GL_EXT_cull_vertex != null)
      return GL_EXT_cull_vertex;
    GL_EXT_cull_vertex = new HashMap<Integer, String>(3);
    GL_EXT_cull_vertex.put(GL_CULL_VERTEX_OBJECT_POSITION_EXT, "GL_CULL_VERTEX_OBJECT_POSITION_EXT");
    GL_EXT_cull_vertex.put(GL_CULL_VERTEX_EXT, "GL_CULL_VERTEX_EXT");
    GL_EXT_cull_vertex.put(GL_CULL_VERTEX_EYE_POSITION_EXT, "GL_CULL_VERTEX_EYE_POSITION_EXT");
    return GL_EXT_cull_vertex;
  }
  private static Map<Integer, String> GL_ARB_shader_objects;
  private static Map<Integer, String> GL_ARB_shader_objects() {
    if (GL_ARB_shader_objects != null)
      return GL_ARB_shader_objects;
    GL_ARB_shader_objects = new HashMap<Integer, String>(34);
    GL_ARB_shader_objects.put(GL_SAMPLER_1D_SHADOW_ARB, "GL_SAMPLER_1D_SHADOW_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_SHADOW_ARB, "GL_SAMPLER_2D_SHADOW_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_RECT_ARB, "GL_SAMPLER_2D_RECT_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_VEC3_ARB, "GL_BOOL_VEC3_ARB");
    GL_ARB_shader_objects.put(GL_PROGRAM_OBJECT_ARB, "GL_PROGRAM_OBJECT_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_COMPILE_STATUS_ARB, "GL_OBJECT_COMPILE_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_DELETE_STATUS_ARB, "GL_OBJECT_DELETE_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_INT_VEC4_ARB, "GL_INT_VEC4_ARB");
    GL_ARB_shader_objects.put(GL_SHADER_OBJECT_ARB, "GL_SHADER_OBJECT_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_VALIDATE_STATUS_ARB, "GL_OBJECT_VALIDATE_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_ACTIVE_UNIFORMS_ARB, "GL_OBJECT_ACTIVE_UNIFORMS_ARB");
    GL_ARB_shader_objects.put(GL_INT_VEC3_ARB, "GL_INT_VEC3_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_ARB, "GL_BOOL_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_VEC2_ARB, "GL_FLOAT_VEC2_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_RECT_SHADOW_ARB, "GL_SAMPLER_2D_RECT_SHADOW_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_MAT2_ARB, "GL_FLOAT_MAT2_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_LINK_STATUS_ARB, "GL_OBJECT_LINK_STATUS_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_VEC4_ARB, "GL_BOOL_VEC4_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_SHADER_SOURCE_LENGTH_ARB, "GL_OBJECT_SHADER_SOURCE_LENGTH_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_ATTACHED_OBJECTS_ARB, "GL_OBJECT_ATTACHED_OBJECTS_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_3D_ARB, "GL_SAMPLER_3D_ARB");
    GL_ARB_shader_objects.put(GL_INT_VEC2_ARB, "GL_INT_VEC2_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_2D_ARB, "GL_SAMPLER_2D_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_MAT3_ARB, "GL_FLOAT_MAT3_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_VEC3_ARB, "GL_FLOAT_VEC3_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_MAT4_ARB, "GL_FLOAT_MAT4_ARB");
    GL_ARB_shader_objects.put(GL_BOOL_VEC2_ARB, "GL_BOOL_VEC2_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_1D_ARB, "GL_SAMPLER_1D_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_SUBTYPE_ARB, "GL_OBJECT_SUBTYPE_ARB");
    GL_ARB_shader_objects.put(GL_FLOAT_VEC4_ARB, "GL_FLOAT_VEC4_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_INFO_LOG_LENGTH_ARB, "GL_OBJECT_INFO_LOG_LENGTH_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_TYPE_ARB, "GL_OBJECT_TYPE_ARB");
    GL_ARB_shader_objects.put(GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB, "GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB");
    GL_ARB_shader_objects.put(GL_SAMPLER_CUBE_ARB, "GL_SAMPLER_CUBE_ARB");
    return GL_ARB_shader_objects;
  }
  private static Map<Integer, String> GL_EXT_multiview_draw_buffers;
  private static Map<Integer, String> GL_EXT_multiview_draw_buffers() {
    if (GL_EXT_multiview_draw_buffers != null)
      return GL_EXT_multiview_draw_buffers;
    GL_EXT_multiview_draw_buffers = new HashMap<Integer, String>(5);
    GL_EXT_multiview_draw_buffers.put(GL_READ_BUFFER_EXT, "GL_READ_BUFFER_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_DRAW_BUFFER_EXT, "GL_DRAW_BUFFER_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_MULTIVIEW_EXT, "GL_MULTIVIEW_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_COLOR_ATTACHMENT_EXT, "GL_COLOR_ATTACHMENT_EXT");
    GL_EXT_multiview_draw_buffers.put(GL_MAX_MULTIVIEW_BUFFERS_EXT, "GL_MAX_MULTIVIEW_BUFFERS_EXT");
    return GL_EXT_multiview_draw_buffers;
  }
  private static Map<Integer, String> GL_ANGLE_framebuffer_blit;
  private static Map<Integer, String> GL_ANGLE_framebuffer_blit() {
    if (GL_ANGLE_framebuffer_blit != null)
      return GL_ANGLE_framebuffer_blit;
    GL_ANGLE_framebuffer_blit = new HashMap<Integer, String>(4);
    GL_ANGLE_framebuffer_blit.put(GL_READ_FRAMEBUFFER_BINDING_ANGLE, "GL_READ_FRAMEBUFFER_BINDING_ANGLE");
    GL_ANGLE_framebuffer_blit.put(GL_READ_FRAMEBUFFER_ANGLE, "GL_READ_FRAMEBUFFER_ANGLE");
    GL_ANGLE_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_BINDING_ANGLE, "GL_DRAW_FRAMEBUFFER_BINDING_ANGLE");
    GL_ANGLE_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_ANGLE, "GL_DRAW_FRAMEBUFFER_ANGLE");
    return GL_ANGLE_framebuffer_blit;
  }
  private static Map<Integer, String> GL_AMD_interleaved_elements;
  private static Map<Integer, String> GL_AMD_interleaved_elements() {
    if (GL_AMD_interleaved_elements != null)
      return GL_AMD_interleaved_elements;
    GL_AMD_interleaved_elements = new HashMap<Integer, String>(9);
    GL_AMD_interleaved_elements.put(GL_BLUE, "GL_BLUE");
    GL_AMD_interleaved_elements.put(GL_GREEN, "GL_GREEN");
    GL_AMD_interleaved_elements.put(GL_RG8UI, "GL_RG8UI");
    GL_AMD_interleaved_elements.put(GL_RED, "GL_RED");
    GL_AMD_interleaved_elements.put(GL_ALPHA, "GL_ALPHA");
    GL_AMD_interleaved_elements.put(GL_RGBA8UI, "GL_RGBA8UI");
    GL_AMD_interleaved_elements.put(GL_RG16UI, "GL_RG16UI");
    GL_AMD_interleaved_elements.put(GL_VERTEX_ID_SWIZZLE_AMD, "GL_VERTEX_ID_SWIZZLE_AMD");
    GL_AMD_interleaved_elements.put(GL_VERTEX_ELEMENT_SWIZZLE_AMD, "GL_VERTEX_ELEMENT_SWIZZLE_AMD");
    return GL_AMD_interleaved_elements;
  }
  private static Map<Integer, String> GL_ARB_vertex_array_object;
  private static Map<Integer, String> GL_ARB_vertex_array_object() {
    if (GL_ARB_vertex_array_object != null)
      return GL_ARB_vertex_array_object;
    GL_ARB_vertex_array_object = new HashMap<Integer, String>(1);
    GL_ARB_vertex_array_object.put(GL_VERTEX_ARRAY_BINDING, "GL_VERTEX_ARRAY_BINDING");
    return GL_ARB_vertex_array_object;
  }
  private static Map<Integer, String> GL_EXT_memory_object_win32;
  private static Map<Integer, String> GL_EXT_memory_object_win32() {
    if (GL_EXT_memory_object_win32 != null)
      return GL_EXT_memory_object_win32;
    GL_EXT_memory_object_win32 = new HashMap<Integer, String>(9);
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT, "GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D12_RESOURCE_EXT, "GL_HANDLE_TYPE_D3D12_RESOURCE_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D11_IMAGE_EXT, "GL_HANDLE_TYPE_D3D11_IMAGE_EXT");
    GL_EXT_memory_object_win32.put(GL_DEVICE_NODE_MASK_EXT, "GL_DEVICE_NODE_MASK_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_EXT");
    GL_EXT_memory_object_win32.put(GL_DEVICE_LUID_EXT, "GL_DEVICE_LUID_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT, "GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT");
    GL_EXT_memory_object_win32.put(GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT, "GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT");
    GL_EXT_memory_object_win32.put(GL_LUID_SIZE_EXT, "GL_LUID_SIZE_EXT");
    return GL_EXT_memory_object_win32;
  }
  private static Map<Integer, String> GL_EXT_geometry_shader4;
  private static Map<Integer, String> GL_EXT_geometry_shader4() {
    if (GL_EXT_geometry_shader4 != null)
      return GL_EXT_geometry_shader4;
    GL_EXT_geometry_shader4 = new HashMap<Integer, String>(26);
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_EXT_geometry_shader4.put(GL_ACTIVE_PROGRAM_EXT, "GL_ACTIVE_PROGRAM_EXT");
    GL_EXT_geometry_shader4.put(GL_VERTEX_SHADER_BIT_EXT, "GL_VERTEX_SHADER_BIT_EXT");
    GL_EXT_geometry_shader4.put(GL_ALL_SHADER_BITS_EXT, "GL_ALL_SHADER_BITS_EXT");
    GL_EXT_geometry_shader4.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAGMENT_SHADER_BIT_EXT, "GL_FRAGMENT_SHADER_BIT_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_VARYING_COMPONENTS_EXT, "GL_MAX_VARYING_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_PROGRAM_SEPARABLE_EXT, "GL_PROGRAM_SEPARABLE_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_OUTPUT_TYPE_EXT, "GL_GEOMETRY_OUTPUT_TYPE_EXT");
    GL_EXT_geometry_shader4.put(GL_PROGRAM_POINT_SIZE_EXT, "GL_PROGRAM_POINT_SIZE_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_VERTICES_OUT_EXT, "GL_GEOMETRY_VERTICES_OUT_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_EXT_geometry_shader4.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_PROGRAM_PIPELINE_BINDING_EXT, "GL_PROGRAM_PIPELINE_BINDING_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_MAX_VERTEX_VARYING_COMPONENTS_EXT, "GL_MAX_VERTEX_VARYING_COMPONENTS_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_SHADER_EXT, "GL_GEOMETRY_SHADER_EXT");
    GL_EXT_geometry_shader4.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
    GL_EXT_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT");
    GL_EXT_geometry_shader4.put(GL_GEOMETRY_INPUT_TYPE_EXT, "GL_GEOMETRY_INPUT_TYPE_EXT");
    return GL_EXT_geometry_shader4;
  }
  private static Map<Integer, String> GL_EXT_stencil_two_side;
  private static Map<Integer, String> GL_EXT_stencil_two_side() {
    if (GL_EXT_stencil_two_side != null)
      return GL_EXT_stencil_two_side;
    GL_EXT_stencil_two_side = new HashMap<Integer, String>(2);
    GL_EXT_stencil_two_side.put(GL_ACTIVE_STENCIL_FACE_EXT, "GL_ACTIVE_STENCIL_FACE_EXT");
    GL_EXT_stencil_two_side.put(GL_STENCIL_TEST_TWO_SIDE_EXT, "GL_STENCIL_TEST_TWO_SIDE_EXT");
    return GL_EXT_stencil_two_side;
  }
  private static Map<Integer, String> GL_NV_shader_buffer_load;
  private static Map<Integer, String> GL_NV_shader_buffer_load() {
    if (GL_NV_shader_buffer_load != null)
      return GL_NV_shader_buffer_load;
    GL_NV_shader_buffer_load = new HashMap<Integer, String>(3);
    GL_NV_shader_buffer_load.put(GL_MAX_SHADER_BUFFER_ADDRESS_NV, "GL_MAX_SHADER_BUFFER_ADDRESS_NV");
    GL_NV_shader_buffer_load.put(GL_BUFFER_GPU_ADDRESS_NV, "GL_BUFFER_GPU_ADDRESS_NV");
    GL_NV_shader_buffer_load.put(GL_GPU_ADDRESS_NV, "GL_GPU_ADDRESS_NV");
    return GL_NV_shader_buffer_load;
  }
  private static Map<Integer, String> GL_NV_coverage_sample;
  private static Map<Integer, String> GL_NV_coverage_sample() {
    if (GL_NV_coverage_sample != null)
      return GL_NV_coverage_sample;
    GL_NV_coverage_sample = new HashMap<Integer, String>(9);
    GL_NV_coverage_sample.put(GL_COVERAGE_SAMPLES_NV, "GL_COVERAGE_SAMPLES_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_BUFFERS_NV, "GL_COVERAGE_BUFFERS_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_COMPONENT_NV, "GL_COVERAGE_COMPONENT_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_COMPONENT4_NV, "GL_COVERAGE_COMPONENT4_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_EDGE_FRAGMENTS_NV, "GL_COVERAGE_EDGE_FRAGMENTS_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_ATTACHMENT_NV, "GL_COVERAGE_ATTACHMENT_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_ALL_FRAGMENTS_NV, "GL_COVERAGE_ALL_FRAGMENTS_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_AUTOMATIC_NV, "GL_COVERAGE_AUTOMATIC_NV");
    GL_NV_coverage_sample.put(GL_COVERAGE_BUFFER_BIT_NV, "GL_COVERAGE_BUFFER_BIT_NV");
    return GL_NV_coverage_sample;
  }
  private static Map<Integer, String> GL_ATI_envmap_bumpmap;
  private static Map<Integer, String> GL_ATI_envmap_bumpmap() {
    if (GL_ATI_envmap_bumpmap != null)
      return GL_ATI_envmap_bumpmap;
    GL_ATI_envmap_bumpmap = new HashMap<Integer, String>(8);
    GL_ATI_envmap_bumpmap.put(GL_BUMP_TARGET_ATI, "GL_BUMP_TARGET_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_ROT_MATRIX_SIZE_ATI, "GL_BUMP_ROT_MATRIX_SIZE_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_NUM_TEX_UNITS_ATI, "GL_BUMP_NUM_TEX_UNITS_ATI");
    GL_ATI_envmap_bumpmap.put(GL_DUDV_ATI, "GL_DUDV_ATI");
    GL_ATI_envmap_bumpmap.put(GL_DU8DV8_ATI, "GL_DU8DV8_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_ENVMAP_ATI, "GL_BUMP_ENVMAP_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_ROT_MATRIX_ATI, "GL_BUMP_ROT_MATRIX_ATI");
    GL_ATI_envmap_bumpmap.put(GL_BUMP_TEX_UNITS_ATI, "GL_BUMP_TEX_UNITS_ATI");
    return GL_ATI_envmap_bumpmap;
  }
  private static Map<Integer, String> GL_AMD_framebuffer_sample_positions;
  private static Map<Integer, String> GL_AMD_framebuffer_sample_positions() {
    if (GL_AMD_framebuffer_sample_positions != null)
      return GL_AMD_framebuffer_sample_positions;
    GL_AMD_framebuffer_sample_positions = new HashMap<Integer, String>(4);
    GL_AMD_framebuffer_sample_positions.put(GL_SUBSAMPLE_DISTANCE_AMD, "GL_SUBSAMPLE_DISTANCE_AMD");
    GL_AMD_framebuffer_sample_positions.put(GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD");
    GL_AMD_framebuffer_sample_positions.put(GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD, "GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD");
    GL_AMD_framebuffer_sample_positions.put(GL_ALL_PIXELS_AMD, "GL_ALL_PIXELS_AMD");
    return GL_AMD_framebuffer_sample_positions;
  }
  private static Map<Integer, String> GL_NV_occlusion_query;
  private static Map<Integer, String> GL_NV_occlusion_query() {
    if (GL_NV_occlusion_query != null)
      return GL_NV_occlusion_query;
    GL_NV_occlusion_query = new HashMap<Integer, String>(4);
    GL_NV_occlusion_query.put(GL_PIXEL_COUNT_AVAILABLE_NV, "GL_PIXEL_COUNT_AVAILABLE_NV");
    GL_NV_occlusion_query.put(GL_PIXEL_COUNTER_BITS_NV, "GL_PIXEL_COUNTER_BITS_NV");
    GL_NV_occlusion_query.put(GL_CURRENT_OCCLUSION_QUERY_ID_NV, "GL_CURRENT_OCCLUSION_QUERY_ID_NV");
    GL_NV_occlusion_query.put(GL_PIXEL_COUNT_NV, "GL_PIXEL_COUNT_NV");
    return GL_NV_occlusion_query;
  }
  private static Map<Integer, String> GL_AMD_sparse_texture;
  private static Map<Integer, String> GL_AMD_sparse_texture() {
    if (GL_AMD_sparse_texture != null)
      return GL_AMD_sparse_texture;
    GL_AMD_sparse_texture = new HashMap<Integer, String>(9);
    GL_AMD_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_X_AMD, "GL_VIRTUAL_PAGE_SIZE_X_AMD");
    GL_AMD_sparse_texture.put(GL_TEXTURE_STORAGE_SPARSE_BIT_AMD, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD");
    GL_AMD_sparse_texture.put(GL_MIN_LOD_WARNING_AMD, "GL_MIN_LOD_WARNING_AMD");
    GL_AMD_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Y_AMD, "GL_VIRTUAL_PAGE_SIZE_Y_AMD");
    GL_AMD_sparse_texture.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD");
    GL_AMD_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Z_AMD, "GL_VIRTUAL_PAGE_SIZE_Z_AMD");
    GL_AMD_sparse_texture.put(GL_MAX_SPARSE_TEXTURE_SIZE_AMD, "GL_MAX_SPARSE_TEXTURE_SIZE_AMD");
    GL_AMD_sparse_texture.put(GL_MIN_SPARSE_LEVEL_AMD, "GL_MIN_SPARSE_LEVEL_AMD");
    GL_AMD_sparse_texture.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS");
    return GL_AMD_sparse_texture;
  }
  private static Map<Integer, String> GL_EXT_robustness;
  private static Map<Integer, String> GL_EXT_robustness() {
    if (GL_EXT_robustness != null)
      return GL_EXT_robustness;
    GL_EXT_robustness = new HashMap<Integer, String>(8);
    GL_EXT_robustness.put(GL_INNOCENT_CONTEXT_RESET_EXT, "GL_INNOCENT_CONTEXT_RESET_EXT");
    GL_EXT_robustness.put(GL_NO_RESET_NOTIFICATION_EXT, "GL_NO_RESET_NOTIFICATION_EXT");
    GL_EXT_robustness.put(GL_NO_ERROR, "GL_NO_ERROR");
    GL_EXT_robustness.put(GL_LOSE_CONTEXT_ON_RESET_EXT, "GL_LOSE_CONTEXT_ON_RESET_EXT");
    GL_EXT_robustness.put(GL_GUILTY_CONTEXT_RESET_EXT, "GL_GUILTY_CONTEXT_RESET_EXT");
    GL_EXT_robustness.put(GL_RESET_NOTIFICATION_STRATEGY_EXT, "GL_RESET_NOTIFICATION_STRATEGY_EXT");
    GL_EXT_robustness.put(GL_UNKNOWN_CONTEXT_RESET_EXT, "GL_UNKNOWN_CONTEXT_RESET_EXT");
    GL_EXT_robustness.put(GL_CONTEXT_ROBUST_ACCESS_EXT, "GL_CONTEXT_ROBUST_ACCESS_EXT");
    return GL_EXT_robustness;
  }
  private static Map<Integer, String> GL_IMG_multisampled_render_to_texture;
  private static Map<Integer, String> GL_IMG_multisampled_render_to_texture() {
    if (GL_IMG_multisampled_render_to_texture != null)
      return GL_IMG_multisampled_render_to_texture;
    GL_IMG_multisampled_render_to_texture = new HashMap<Integer, String>(4);
    GL_IMG_multisampled_render_to_texture.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG");
    GL_IMG_multisampled_render_to_texture.put(GL_MAX_SAMPLES_IMG, "GL_MAX_SAMPLES_IMG");
    GL_IMG_multisampled_render_to_texture.put(GL_RENDERBUFFER_SAMPLES_IMG, "GL_RENDERBUFFER_SAMPLES_IMG");
    GL_IMG_multisampled_render_to_texture.put(GL_TEXTURE_SAMPLES_IMG, "GL_TEXTURE_SAMPLES_IMG");
    return GL_IMG_multisampled_render_to_texture;
  }
  private static Map<Integer, String> GL_EXT_vertex_array;
  private static Map<Integer, String> GL_EXT_vertex_array() {
    if (GL_EXT_vertex_array != null)
      return GL_EXT_vertex_array;
    GL_EXT_vertex_array = new HashMap<Integer, String>(32);
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_SIZE_EXT, "GL_TEXTURE_COORD_ARRAY_SIZE_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_TYPE_EXT, "GL_TEXTURE_COORD_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_TYPE_EXT, "GL_COLOR_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_POINTER_EXT, "GL_VERTEX_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_EXT, "GL_NORMAL_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_TYPE_EXT, "GL_VERTEX_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_STRIDE_EXT, "GL_INDEX_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_SIZE_EXT, "GL_VERTEX_ARRAY_SIZE_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_COUNT_EXT, "GL_TEXTURE_COORD_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_COUNT_EXT, "GL_NORMAL_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_POINTER_EXT, "GL_NORMAL_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_STRIDE_EXT, "GL_TEXTURE_COORD_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_POINTER_EXT, "GL_INDEX_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_STRIDE_EXT, "GL_COLOR_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_EXT, "GL_INDEX_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_COUNT_EXT, "GL_EDGE_FLAG_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_POINTER_EXT, "GL_TEXTURE_COORD_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_POINTER_EXT, "GL_COLOR_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_COUNT_EXT, "GL_INDEX_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_TEXTURE_COORD_ARRAY_EXT, "GL_TEXTURE_COORD_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_STRIDE_EXT, "GL_VERTEX_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_COUNT_EXT, "GL_COLOR_ARRAY_COUNT_EXT");
    GL_EXT_vertex_array.put(GL_INDEX_ARRAY_TYPE_EXT, "GL_INDEX_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_EXT, "GL_EDGE_FLAG_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_SIZE_EXT, "GL_COLOR_ARRAY_SIZE_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_STRIDE_EXT, "GL_NORMAL_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_EXT, "GL_VERTEX_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_POINTER_EXT, "GL_EDGE_FLAG_ARRAY_POINTER_EXT");
    GL_EXT_vertex_array.put(GL_NORMAL_ARRAY_TYPE_EXT, "GL_NORMAL_ARRAY_TYPE_EXT");
    GL_EXT_vertex_array.put(GL_EDGE_FLAG_ARRAY_STRIDE_EXT, "GL_EDGE_FLAG_ARRAY_STRIDE_EXT");
    GL_EXT_vertex_array.put(GL_COLOR_ARRAY_EXT, "GL_COLOR_ARRAY_EXT");
    GL_EXT_vertex_array.put(GL_VERTEX_ARRAY_COUNT_EXT, "GL_VERTEX_ARRAY_COUNT_EXT");
    return GL_EXT_vertex_array;
  }
  private static Map<Integer, String> GL_OES_texture_border_clamp;
  private static Map<Integer, String> GL_OES_texture_border_clamp() {
    if (GL_OES_texture_border_clamp != null)
      return GL_OES_texture_border_clamp;
    GL_OES_texture_border_clamp = new HashMap<Integer, String>(2);
    GL_OES_texture_border_clamp.put(GL_TEXTURE_BORDER_COLOR_OES, "GL_TEXTURE_BORDER_COLOR_OES");
    GL_OES_texture_border_clamp.put(GL_CLAMP_TO_BORDER_OES, "GL_CLAMP_TO_BORDER_OES");
    return GL_OES_texture_border_clamp;
  }
  private static Map<Integer, String> GL_ARB_vertex_buffer_object;
  private static Map<Integer, String> GL_ARB_vertex_buffer_object() {
    if (GL_ARB_vertex_buffer_object != null)
      return GL_ARB_vertex_buffer_object;
    GL_ARB_vertex_buffer_object = new HashMap<Integer, String>(31);
    GL_ARB_vertex_buffer_object.put(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB, "GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_NORMAL_ARRAY_BUFFER_BINDING_ARB, "GL_NORMAL_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_READ_WRITE_ARB, "GL_READ_WRITE_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_MAP_POINTER_ARB, "GL_BUFFER_MAP_POINTER_ARB");
    GL_ARB_vertex_buffer_object.put(GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STATIC_READ_ARB, "GL_STATIC_READ_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STREAM_COPY_ARB, "GL_STREAM_COPY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_WRITE_ONLY_ARB, "GL_WRITE_ONLY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STATIC_DRAW_ARB, "GL_STATIC_DRAW_ARB");
    GL_ARB_vertex_buffer_object.put(GL_READ_ONLY_ARB, "GL_READ_ONLY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_COLOR_ARRAY_BUFFER_BINDING_ARB, "GL_COLOR_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STREAM_READ_ARB, "GL_STREAM_READ_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_MAPPED_ARB, "GL_BUFFER_MAPPED_ARB");
    GL_ARB_vertex_buffer_object.put(GL_DYNAMIC_DRAW_ARB, "GL_DYNAMIC_DRAW_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STATIC_COPY_ARB, "GL_STATIC_COPY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_SIZE_ARB, "GL_BUFFER_SIZE_ARB");
    GL_ARB_vertex_buffer_object.put(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_ACCESS_ARB, "GL_BUFFER_ACCESS_ARB");
    GL_ARB_vertex_buffer_object.put(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ARRAY_BUFFER_ARB, "GL_ARRAY_BUFFER_ARB");
    GL_ARB_vertex_buffer_object.put(GL_INDEX_ARRAY_BUFFER_BINDING_ARB, "GL_INDEX_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_DYNAMIC_COPY_ARB, "GL_DYNAMIC_COPY_ARB");
    GL_ARB_vertex_buffer_object.put(GL_VERTEX_ARRAY_BUFFER_BINDING_ARB, "GL_VERTEX_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ARRAY_BUFFER_BINDING_ARB, "GL_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_BUFFER_USAGE_ARB, "GL_BUFFER_USAGE_ARB");
    GL_ARB_vertex_buffer_object.put(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB, "GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB");
    GL_ARB_vertex_buffer_object.put(GL_ELEMENT_ARRAY_BUFFER_ARB, "GL_ELEMENT_ARRAY_BUFFER_ARB");
    GL_ARB_vertex_buffer_object.put(GL_DYNAMIC_READ_ARB, "GL_DYNAMIC_READ_ARB");
    GL_ARB_vertex_buffer_object.put(GL_STREAM_DRAW_ARB, "GL_STREAM_DRAW_ARB");
    return GL_ARB_vertex_buffer_object;
  }
  private static Map<Integer, String> GL_ARB_viewport_array;
  private static Map<Integer, String> GL_ARB_viewport_array() {
    if (GL_ARB_viewport_array != null)
      return GL_ARB_viewport_array;
    GL_ARB_viewport_array = new HashMap<Integer, String>(13);
    GL_ARB_viewport_array.put(GL_UNDEFINED_VERTEX, "GL_UNDEFINED_VERTEX");
    GL_ARB_viewport_array.put(GL_PROVOKING_VERTEX, "GL_PROVOKING_VERTEX");
    GL_ARB_viewport_array.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_ARB_viewport_array.put(GL_LAYER_PROVOKING_VERTEX, "GL_LAYER_PROVOKING_VERTEX");
    GL_ARB_viewport_array.put(GL_LAST_VERTEX_CONVENTION, "GL_LAST_VERTEX_CONVENTION");
    GL_ARB_viewport_array.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GL_ARB_viewport_array.put(GL_FIRST_VERTEX_CONVENTION, "GL_FIRST_VERTEX_CONVENTION");
    GL_ARB_viewport_array.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_ARB_viewport_array.put(GL_MAX_VIEWPORTS, "GL_MAX_VIEWPORTS");
    GL_ARB_viewport_array.put(GL_VIEWPORT_BOUNDS_RANGE, "GL_VIEWPORT_BOUNDS_RANGE");
    GL_ARB_viewport_array.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX");
    GL_ARB_viewport_array.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_ARB_viewport_array.put(GL_VIEWPORT_SUBPIXEL_BITS, "GL_VIEWPORT_SUBPIXEL_BITS");
    return GL_ARB_viewport_array;
  }
  private static Map<Integer, String> GL_APPLE_vertex_program_evaluators;
  private static Map<Integer, String> GL_APPLE_vertex_program_evaluators() {
    if (GL_APPLE_vertex_program_evaluators != null)
      return GL_APPLE_vertex_program_evaluators;
    GL_APPLE_vertex_program_evaluators = new HashMap<Integer, String>(10);
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE, "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_APPLE, "GL_VERTEX_ATTRIB_MAP1_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE, "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE, "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_APPLE, "GL_VERTEX_ATTRIB_MAP2_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE");
    GL_APPLE_vertex_program_evaluators.put(GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE, "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE");
    return GL_APPLE_vertex_program_evaluators;
  }
  private static Map<Integer, String> GL_EXT_memory_object_fd;
  private static Map<Integer, String> GL_EXT_memory_object_fd() {
    if (GL_EXT_memory_object_fd != null)
      return GL_EXT_memory_object_fd;
    GL_EXT_memory_object_fd = new HashMap<Integer, String>(1);
    GL_EXT_memory_object_fd.put(GL_HANDLE_TYPE_OPAQUE_FD_EXT, "GL_HANDLE_TYPE_OPAQUE_FD_EXT");
    return GL_EXT_memory_object_fd;
  }
  private static Map<Integer, String> GL_SUN_triangle_list;
  private static Map<Integer, String> GL_SUN_triangle_list() {
    if (GL_SUN_triangle_list != null)
      return GL_SUN_triangle_list;
    GL_SUN_triangle_list = new HashMap<Integer, String>(17);
    GL_SUN_triangle_list.put(GL_R1UI_T2F_V3F_SUN, "GL_R1UI_T2F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_RESTART_SUN, "GL_RESTART_SUN");
    GL_SUN_triangle_list.put(GL_REPLACE_OLDEST_SUN, "GL_REPLACE_OLDEST_SUN");
    GL_SUN_triangle_list.put(GL_REPLACE_MIDDLE_SUN, "GL_REPLACE_MIDDLE_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_T2F_C4F_N3F_V3F_SUN, "GL_R1UI_T2F_C4F_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_TRIANGLE_LIST_SUN, "GL_TRIANGLE_LIST_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN, "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_SUN, "GL_REPLACEMENT_CODE_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_C4UB_V3F_SUN, "GL_R1UI_C4UB_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_T2F_N3F_V3F_SUN, "GL_R1UI_T2F_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN, "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_SUN, "GL_REPLACEMENT_CODE_ARRAY_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_C3F_V3F_SUN, "GL_R1UI_C3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_N3F_V3F_SUN, "GL_R1UI_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_V3F_SUN, "GL_R1UI_V3F_SUN");
    GL_SUN_triangle_list.put(GL_R1UI_C4F_N3F_V3F_SUN, "GL_R1UI_C4F_N3F_V3F_SUN");
    GL_SUN_triangle_list.put(GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN, "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN");
    return GL_SUN_triangle_list;
  }
  private static Map<Integer, String> GL_EXT_texture_buffer;
  private static Map<Integer, String> GL_EXT_texture_buffer() {
    if (GL_EXT_texture_buffer != null)
      return GL_EXT_texture_buffer;
    GL_EXT_texture_buffer = new HashMap<Integer, String>(15);
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_BINDING_EXT, "GL_TEXTURE_BUFFER_BINDING_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BINDING_BUFFER_EXT, "GL_TEXTURE_BINDING_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_UNSIGNED_INT_IMAGE_BUFFER_EXT, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_SAMPLER_BUFFER_EXT, "GL_SAMPLER_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_FORMAT_EXT, "GL_TEXTURE_BUFFER_FORMAT_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT");
    GL_EXT_texture_buffer.put(GL_MAX_TEXTURE_BUFFER_SIZE_EXT, "GL_MAX_TEXTURE_BUFFER_SIZE_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_SIZE_EXT, "GL_TEXTURE_BUFFER_SIZE_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_EXT, "GL_TEXTURE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_IMAGE_BUFFER_EXT, "GL_IMAGE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_INT_IMAGE_BUFFER_EXT, "GL_INT_IMAGE_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_INT_SAMPLER_BUFFER_EXT, "GL_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_EXT, "GL_TEXTURE_BUFFER_OFFSET_EXT");
    return GL_EXT_texture_buffer;
  }
  private static Map<Integer, String> GL_ATI_pn_triangles;
  private static Map<Integer, String> GL_ATI_pn_triangles() {
    if (GL_ATI_pn_triangles != null)
      return GL_ATI_pn_triangles;
    GL_ATI_pn_triangles = new HashMap<Integer, String>(9);
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_ATI, "GL_PN_TRIANGLES_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_POINT_MODE_ATI, "GL_PN_TRIANGLES_POINT_MODE_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI, "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI, "GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_NORMAL_MODE_ATI, "GL_PN_TRIANGLES_NORMAL_MODE_ATI");
    GL_ATI_pn_triangles.put(GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI, "GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI");
    GL_ATI_pn_triangles.put(GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI, "GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI");
    return GL_ATI_pn_triangles;
  }
  private static Map<Integer, String> GL_EXT_separate_shader_objects;
  private static Map<Integer, String> GL_EXT_separate_shader_objects() {
    if (GL_EXT_separate_shader_objects != null)
      return GL_EXT_separate_shader_objects;
    GL_EXT_separate_shader_objects = new HashMap<Integer, String>(6);
    GL_EXT_separate_shader_objects.put(GL_PROGRAM_PIPELINE_BINDING_EXT, "GL_PROGRAM_PIPELINE_BINDING_EXT");
    GL_EXT_separate_shader_objects.put(GL_ACTIVE_PROGRAM_EXT, "GL_ACTIVE_PROGRAM_EXT");
    GL_EXT_separate_shader_objects.put(GL_VERTEX_SHADER_BIT_EXT, "GL_VERTEX_SHADER_BIT_EXT");
    GL_EXT_separate_shader_objects.put(GL_ALL_SHADER_BITS_EXT, "GL_ALL_SHADER_BITS_EXT");
    GL_EXT_separate_shader_objects.put(GL_FRAGMENT_SHADER_BIT_EXT, "GL_FRAGMENT_SHADER_BIT_EXT");
    GL_EXT_separate_shader_objects.put(GL_PROGRAM_SEPARABLE_EXT, "GL_PROGRAM_SEPARABLE_EXT");
    return GL_EXT_separate_shader_objects;
  }
  private static Map<Integer, String> GL_OES_texture_3D;
  private static Map<Integer, String> GL_OES_texture_3D() {
    if (GL_OES_texture_3D != null)
      return GL_OES_texture_3D;
    GL_OES_texture_3D = new HashMap<Integer, String>(6);
    GL_OES_texture_3D.put(GL_MAX_3D_TEXTURE_SIZE_OES, "GL_MAX_3D_TEXTURE_SIZE_OES");
    GL_OES_texture_3D.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES");
    GL_OES_texture_3D.put(GL_TEXTURE_3D_OES, "GL_TEXTURE_3D_OES");
    GL_OES_texture_3D.put(GL_SAMPLER_3D_OES, "GL_SAMPLER_3D_OES");
    GL_OES_texture_3D.put(GL_TEXTURE_WRAP_R_OES, "GL_TEXTURE_WRAP_R_OES");
    GL_OES_texture_3D.put(GL_TEXTURE_BINDING_3D_OES, "GL_TEXTURE_BINDING_3D_OES");
    return GL_OES_texture_3D;
  }
  private static Map<Integer, String> GL_ARB_texture_view;
  private static Map<Integer, String> GL_ARB_texture_view() {
    if (GL_ARB_texture_view != null)
      return GL_ARB_texture_view;
    GL_ARB_texture_view = new HashMap<Integer, String>(5);
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_NUM_LEVELS, "GL_TEXTURE_VIEW_NUM_LEVELS");
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_NUM_LAYERS, "GL_TEXTURE_VIEW_NUM_LAYERS");
    GL_ARB_texture_view.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_MIN_LAYER, "GL_TEXTURE_VIEW_MIN_LAYER");
    GL_ARB_texture_view.put(GL_TEXTURE_VIEW_MIN_LEVEL, "GL_TEXTURE_VIEW_MIN_LEVEL");
    return GL_ARB_texture_view;
  }
  private static Map<Integer, String> GL_EXT_texture_perturb_normal;
  private static Map<Integer, String> GL_EXT_texture_perturb_normal() {
    if (GL_EXT_texture_perturb_normal != null)
      return GL_EXT_texture_perturb_normal;
    GL_EXT_texture_perturb_normal = new HashMap<Integer, String>(2);
    GL_EXT_texture_perturb_normal.put(GL_PERTURB_EXT, "GL_PERTURB_EXT");
    GL_EXT_texture_perturb_normal.put(GL_TEXTURE_NORMAL_EXT, "GL_TEXTURE_NORMAL_EXT");
    return GL_EXT_texture_perturb_normal;
  }
  private static Map<Integer, String> GL_NV_viewport_swizzle;
  private static Map<Integer, String> GL_NV_viewport_swizzle() {
    if (GL_NV_viewport_swizzle != null)
      return GL_NV_viewport_swizzle;
    GL_NV_viewport_swizzle = new HashMap<Integer, String>(12);
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_X_NV, "GL_VIEWPORT_SWIZZLE_X_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_Y_NV, "GL_VIEWPORT_SWIZZLE_Y_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV, "GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV, "GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_Z_NV, "GL_VIEWPORT_SWIZZLE_Z_NV");
    GL_NV_viewport_swizzle.put(GL_VIEWPORT_SWIZZLE_W_NV, "GL_VIEWPORT_SWIZZLE_W_NV");
    return GL_NV_viewport_swizzle;
  }
  private static Map<Integer, String> GL_ARB_shader_image_load_store;
  private static Map<Integer, String> GL_ARB_shader_image_load_store() {
    if (GL_ARB_shader_image_load_store != null)
      return GL_ARB_shader_image_load_store;
    GL_ARB_shader_image_load_store = new HashMap<Integer, String>(64);
    GL_ARB_shader_image_load_store.put(GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_1D_ARRAY, "GL_IMAGE_1D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_3D, "GL_IMAGE_3D");
    GL_ARB_shader_image_load_store.put(GL_PIXEL_BUFFER_BARRIER_BIT, "GL_PIXEL_BUFFER_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_RECT, "GL_INT_IMAGE_2D_RECT");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_CUBE, "GL_INT_IMAGE_CUBE");
    GL_ARB_shader_image_load_store.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_BUFFER_UPDATE_BARRIER_BIT, "GL_BUFFER_UPDATE_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_ARRAY, "GL_IMAGE_2D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_IMAGE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE, "GL_UNSIGNED_INT_IMAGE_CUBE");
    GL_ARB_shader_image_load_store.put(GL_MAX_IMAGE_UNITS, "GL_MAX_IMAGE_UNITS");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_FORMAT, "GL_IMAGE_BINDING_FORMAT");
    GL_ARB_shader_image_load_store.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_TRANSFORM_FEEDBACK_BARRIER_BIT, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_ATOMIC_COUNTER_BARRIER_BIT, "GL_ATOMIC_COUNTER_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_3D, "GL_UNSIGNED_INT_IMAGE_3D");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D_ARRAY, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_ARRAY, "GL_INT_IMAGE_2D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS");
    GL_ARB_shader_image_load_store.put(GL_FRAMEBUFFER_BARRIER_BIT, "GL_FRAMEBUFFER_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BUFFER, "GL_IMAGE_BUFFER");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_BUFFER, "GL_UNSIGNED_INT_IMAGE_BUFFER");
    GL_ARB_shader_image_load_store.put(GL_COMMAND_BARRIER_BIT, "GL_COMMAND_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    GL_ARB_shader_image_load_store.put(GL_ELEMENT_ARRAY_BARRIER_BIT, "GL_ELEMENT_ARRAY_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_LEVEL, "GL_IMAGE_BINDING_LEVEL");
    GL_ARB_shader_image_load_store.put(GL_MAX_FRAGMENT_IMAGE_UNIFORMS, "GL_MAX_FRAGMENT_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_CUBE_MAP_ARRAY, "GL_IMAGE_CUBE_MAP_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D, "GL_UNSIGNED_INT_IMAGE_2D");
    GL_ARB_shader_image_load_store.put(GL_TEXTURE_UPDATE_BARRIER_BIT, "GL_TEXTURE_UPDATE_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_ACCESS, "GL_IMAGE_BINDING_ACCESS");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_CUBE_MAP_ARRAY, "GL_INT_IMAGE_CUBE_MAP_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_CUBE, "GL_IMAGE_CUBE");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_1D, "GL_INT_IMAGE_1D");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_LAYERED, "GL_IMAGE_BINDING_LAYERED");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_RECT, "GL_IMAGE_2D_RECT");
    GL_ARB_shader_image_load_store.put(GL_MAX_COMBINED_IMAGE_UNIFORMS, "GL_MAX_COMBINED_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_MAX_VERTEX_IMAGE_UNIFORMS, "GL_MAX_VERTEX_IMAGE_UNIFORMS");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_RECT, "GL_UNSIGNED_INT_IMAGE_2D_RECT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D_MULTISAMPLE, "GL_IMAGE_2D_MULTISAMPLE");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_1D, "GL_IMAGE_1D");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_BUFFER, "GL_INT_IMAGE_BUFFER");
    GL_ARB_shader_image_load_store.put(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_ALL_BARRIER_BITS, "GL_ALL_BARRIER_BITS");
    GL_ARB_shader_image_load_store.put(GL_TEXTURE_FETCH_BARRIER_BIT, "GL_TEXTURE_FETCH_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_NAME, "GL_IMAGE_BINDING_NAME");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_1D, "GL_UNSIGNED_INT_IMAGE_1D");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_BINDING_LAYER, "GL_IMAGE_BINDING_LAYER");
    GL_ARB_shader_image_load_store.put(GL_UNSIGNED_INT_IMAGE_2D_ARRAY, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_3D, "GL_INT_IMAGE_3D");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D, "GL_INT_IMAGE_2D");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_2D_MULTISAMPLE, "GL_INT_IMAGE_2D_MULTISAMPLE");
    GL_ARB_shader_image_load_store.put(GL_INT_IMAGE_1D_ARRAY, "GL_INT_IMAGE_1D_ARRAY");
    GL_ARB_shader_image_load_store.put(GL_MAX_IMAGE_SAMPLES, "GL_MAX_IMAGE_SAMPLES");
    GL_ARB_shader_image_load_store.put(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_UNIFORM_BARRIER_BIT, "GL_UNIFORM_BARRIER_BIT");
    GL_ARB_shader_image_load_store.put(GL_IMAGE_2D, "GL_IMAGE_2D");
    return GL_ARB_shader_image_load_store;
  }
  private static Map<Integer, String> GL_ARB_internalformat_query2;
  private static Map<Integer, String> GL_ARB_internalformat_query2() {
    if (GL_ARB_internalformat_query2 != null)
      return GL_ARB_internalformat_query2;
    GL_ARB_internalformat_query2 = new HashMap<Integer, String>(115);
    GL_ARB_internalformat_query2.put(GL_READ_PIXELS_TYPE, "GL_READ_PIXELS_TYPE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_GATHER, "GL_TEXTURE_GATHER");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_CUBE_MAP_ARRAY, "GL_TEXTURE_CUBE_MAP_ARRAY");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_BLUE_SIZE, "GL_INTERNALFORMAT_BLUE_SIZE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_4_X_16, "GL_IMAGE_CLASS_4_X_16");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_BPTC_UNORM, "GL_VIEW_CLASS_BPTC_UNORM");
    GL_ARB_internalformat_query2.put(GL_FRAGMENT_TEXTURE, "GL_FRAGMENT_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_STENCIL_RENDERABLE, "GL_STENCIL_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_SHADER_IMAGE_ATOMIC, "GL_SHADER_IMAGE_ATOMIC");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_8_BITS, "GL_VIEW_CLASS_8_BITS");
    GL_ARB_internalformat_query2.put(GL_MAX_HEIGHT, "GL_MAX_HEIGHT");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT3_RGBA, "GL_VIEW_CLASS_S3TC_DXT3_RGBA");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_VIEW, "GL_TEXTURE_VIEW");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_10_10_10_2, "GL_IMAGE_CLASS_10_10_10_2");
    GL_ARB_internalformat_query2.put(GL_STENCIL_COMPONENTS, "GL_STENCIL_COMPONENTS");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_128_BITS, "GL_VIEW_CLASS_128_BITS");
    GL_ARB_internalformat_query2.put(GL_COLOR_RENDERABLE, "GL_COLOR_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_64_BITS, "GL_VIEW_CLASS_64_BITS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_RECTANGLE, "GL_TEXTURE_RECTANGLE");
    GL_ARB_internalformat_query2.put(GL_VIEW_COMPATIBILITY_CLASS, "GL_VIEW_COMPATIBILITY_CLASS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    GL_ARB_internalformat_query2.put(GL_TESS_EVALUATION_TEXTURE, "GL_TESS_EVALUATION_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_2_X_16, "GL_IMAGE_CLASS_2_X_16");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_SUPPORTED, "GL_INTERNALFORMAT_SUPPORTED");
    GL_ARB_internalformat_query2.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_4_X_8, "GL_IMAGE_CLASS_4_X_8");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_STENCIL_TYPE, "GL_INTERNALFORMAT_STENCIL_TYPE");
    GL_ARB_internalformat_query2.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    GL_ARB_internalformat_query2.put(GL_SHADER_IMAGE_LOAD, "GL_SHADER_IMAGE_LOAD");
    GL_ARB_internalformat_query2.put(GL_SHADER_IMAGE_STORE, "GL_SHADER_IMAGE_STORE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_IMAGE_FORMAT, "GL_TEXTURE_IMAGE_FORMAT");
    GL_ARB_internalformat_query2.put(GL_FRAMEBUFFER_BLEND, "GL_FRAMEBUFFER_BLEND");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_96_BITS, "GL_VIEW_CLASS_96_BITS");
    GL_ARB_internalformat_query2.put(GL_VERTEX_TEXTURE, "GL_VERTEX_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_MAX_DEPTH, "GL_MAX_DEPTH");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT1_RGBA, "GL_VIEW_CLASS_S3TC_DXT1_RGBA");
    GL_ARB_internalformat_query2.put(GL_MAX_WIDTH, "GL_MAX_WIDTH");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST");
    GL_ARB_internalformat_query2.put(GL_GET_TEXTURE_IMAGE_FORMAT, "GL_GET_TEXTURE_IMAGE_FORMAT");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_1D_ARRAY, "GL_TEXTURE_1D_ARRAY");
    GL_ARB_internalformat_query2.put(GL_MAX_COMBINED_DIMENSIONS, "GL_MAX_COMBINED_DIMENSIONS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_SHADOW, "GL_TEXTURE_SHADOW");
    GL_ARB_internalformat_query2.put(GL_COMPUTE_TEXTURE, "GL_COMPUTE_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_COLOR_ENCODING, "GL_COLOR_ENCODING");
    GL_ARB_internalformat_query2.put(GL_IMAGE_PIXEL_FORMAT, "GL_IMAGE_PIXEL_FORMAT");
    GL_ARB_internalformat_query2.put(GL_FRAMEBUFFER_RENDERABLE_LAYERED, "GL_FRAMEBUFFER_RENDERABLE_LAYERED");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED, "GL_TEXTURE_COMPRESSED");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_SHARED_SIZE, "GL_INTERNALFORMAT_SHARED_SIZE");
    GL_ARB_internalformat_query2.put(GL_GEOMETRY_TEXTURE, "GL_GEOMETRY_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_COLOR_COMPONENTS, "GL_COLOR_COMPONENTS");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_DEPTH_SIZE, "GL_INTERNALFORMAT_DEPTH_SIZE");
    GL_ARB_internalformat_query2.put(GL_CLEAR_BUFFER, "GL_CLEAR_BUFFER");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_1_X_8, "GL_IMAGE_CLASS_1_X_8");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_24_BITS, "GL_VIEW_CLASS_24_BITS");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_2_X_32, "GL_IMAGE_CLASS_2_X_32");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED_BLOCK_WIDTH, "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH");
    GL_ARB_internalformat_query2.put(GL_GET_TEXTURE_IMAGE_TYPE, "GL_GET_TEXTURE_IMAGE_TYPE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_BUFFER, "GL_TEXTURE_BUFFER");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_BPTC_FLOAT, "GL_VIEW_CLASS_BPTC_FLOAT");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT, "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_RED_TYPE, "GL_INTERNALFORMAT_RED_TYPE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_1_X_32, "GL_IMAGE_CLASS_1_X_32");
    GL_ARB_internalformat_query2.put(GL_IMAGE_PIXEL_TYPE, "GL_IMAGE_PIXEL_TYPE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_ALPHA_TYPE, "GL_INTERNALFORMAT_ALPHA_TYPE");
    GL_ARB_internalformat_query2.put(GL_TESS_CONTROL_TEXTURE, "GL_TESS_CONTROL_TEXTURE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    GL_ARB_internalformat_query2.put(GL_DEPTH_COMPONENTS, "GL_DEPTH_COMPONENTS");
    GL_ARB_internalformat_query2.put(GL_MAX_LAYERS, "GL_MAX_LAYERS");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_IMAGE_TYPE, "GL_TEXTURE_IMAGE_TYPE");
    GL_ARB_internalformat_query2.put(GL_DEPTH_RENDERABLE, "GL_DEPTH_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_11_11_10, "GL_IMAGE_CLASS_11_11_10");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_GREEN_SIZE, "GL_INTERNALFORMAT_GREEN_SIZE");
    GL_ARB_internalformat_query2.put(GL_READ_PIXELS, "GL_READ_PIXELS");
    GL_ARB_internalformat_query2.put(GL_FRAMEBUFFER_RENDERABLE, "GL_FRAMEBUFFER_RENDERABLE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_GATHER_SHADOW, "GL_TEXTURE_GATHER_SHADOW");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_1D, "GL_TEXTURE_1D");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_DEPTH_TYPE, "GL_INTERNALFORMAT_DEPTH_TYPE");
    GL_ARB_internalformat_query2.put(GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE");
    GL_ARB_internalformat_query2.put(GL_SAMPLES, "GL_SAMPLES");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_1_X_16, "GL_IMAGE_CLASS_1_X_16");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_PREFERRED, "GL_INTERNALFORMAT_PREFERRED");
    GL_ARB_internalformat_query2.put(GL_FILTER, "GL_FILTER");
    GL_ARB_internalformat_query2.put(GL_SRGB_DECODE_ARB, "GL_SRGB_DECODE_ARB");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_4_X_32, "GL_IMAGE_CLASS_4_X_32");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_ALPHA_SIZE, "GL_INTERNALFORMAT_ALPHA_SIZE");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_COMPRESSED_BLOCK_SIZE, "GL_TEXTURE_COMPRESSED_BLOCK_SIZE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_48_BITS, "GL_VIEW_CLASS_48_BITS");
    GL_ARB_internalformat_query2.put(GL_AUTO_GENERATE_MIPMAP, "GL_AUTO_GENERATE_MIPMAP");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_RGTC1_RED, "GL_VIEW_CLASS_RGTC1_RED");
    GL_ARB_internalformat_query2.put(GL_FULL_SUPPORT, "GL_FULL_SUPPORT");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_BLUE_TYPE, "GL_INTERNALFORMAT_BLUE_TYPE");
    GL_ARB_internalformat_query2.put(GL_SRGB_WRITE, "GL_SRGB_WRITE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_GREEN_TYPE, "GL_INTERNALFORMAT_GREEN_TYPE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_RGTC2_RG, "GL_VIEW_CLASS_RGTC2_RG");
    GL_ARB_internalformat_query2.put(GL_IMAGE_CLASS_2_X_8, "GL_IMAGE_CLASS_2_X_8");
    GL_ARB_internalformat_query2.put(GL_CAVEAT_SUPPORT, "GL_CAVEAT_SUPPORT");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT1_RGB, "GL_VIEW_CLASS_S3TC_DXT1_RGB");
    GL_ARB_internalformat_query2.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_STENCIL_SIZE, "GL_INTERNALFORMAT_STENCIL_SIZE");
    GL_ARB_internalformat_query2.put(GL_MIPMAP, "GL_MIPMAP");
    GL_ARB_internalformat_query2.put(GL_IMAGE_COMPATIBILITY_CLASS, "GL_IMAGE_COMPATIBILITY_CLASS");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_16_BITS, "GL_VIEW_CLASS_16_BITS");
    GL_ARB_internalformat_query2.put(GL_READ_PIXELS_FORMAT, "GL_READ_PIXELS_FORMAT");
    GL_ARB_internalformat_query2.put(GL_SRGB_READ, "GL_SRGB_READ");
    GL_ARB_internalformat_query2.put(GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE");
    GL_ARB_internalformat_query2.put(GL_INTERNALFORMAT_RED_SIZE, "GL_INTERNALFORMAT_RED_SIZE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_32_BITS, "GL_VIEW_CLASS_32_BITS");
    GL_ARB_internalformat_query2.put(GL_MANUAL_GENERATE_MIPMAP, "GL_MANUAL_GENERATE_MIPMAP");
    GL_ARB_internalformat_query2.put(GL_IMAGE_TEXEL_SIZE, "GL_IMAGE_TEXEL_SIZE");
    GL_ARB_internalformat_query2.put(GL_VIEW_CLASS_S3TC_DXT5_RGBA, "GL_VIEW_CLASS_S3TC_DXT5_RGBA");
    return GL_ARB_internalformat_query2;
  }
  private static Map<Integer, String> GL_IBM_static_data;
  private static Map<Integer, String> GL_IBM_static_data() {
    if (GL_IBM_static_data != null)
      return GL_IBM_static_data;
    GL_IBM_static_data = new HashMap<Integer, String>(2);
    GL_IBM_static_data.put(GL_ALL_STATIC_DATA_IBM, "GL_ALL_STATIC_DATA_IBM");
    GL_IBM_static_data.put(GL_STATIC_VERTEX_ARRAY_IBM, "GL_STATIC_VERTEX_ARRAY_IBM");
    return GL_IBM_static_data;
  }
  private static Map<Integer, String> GL_AMD_vertex_shader_tessellator;
  private static Map<Integer, String> GL_AMD_vertex_shader_tessellator() {
    if (GL_AMD_vertex_shader_tessellator != null)
      return GL_AMD_vertex_shader_tessellator;
    GL_AMD_vertex_shader_tessellator = new HashMap<Integer, String>(7);
    GL_AMD_vertex_shader_tessellator.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD, "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_SAMPLER_BUFFER_AMD, "GL_SAMPLER_BUFFER_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_TESSELLATION_FACTOR_AMD, "GL_TESSELLATION_FACTOR_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_DISCRETE_AMD, "GL_DISCRETE_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_CONTINUOUS_AMD, "GL_CONTINUOUS_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_INT_SAMPLER_BUFFER_AMD, "GL_INT_SAMPLER_BUFFER_AMD");
    GL_AMD_vertex_shader_tessellator.put(GL_TESSELLATION_MODE_AMD, "GL_TESSELLATION_MODE_AMD");
    return GL_AMD_vertex_shader_tessellator;
  }
  private static Map<Integer, String> GL_ARB_matrix_palette;
  private static Map<Integer, String> GL_ARB_matrix_palette() {
    if (GL_ARB_matrix_palette != null)
      return GL_ARB_matrix_palette;
    GL_ARB_matrix_palette = new HashMap<Integer, String>(10);
    GL_ARB_matrix_palette.put(GL_MATRIX_PALETTE_ARB, "GL_MATRIX_PALETTE_ARB");
    GL_ARB_matrix_palette.put(GL_CURRENT_MATRIX_INDEX_ARB, "GL_CURRENT_MATRIX_INDEX_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_TYPE_ARB, "GL_MATRIX_INDEX_ARRAY_TYPE_ARB");
    GL_ARB_matrix_palette.put(GL_MAX_PALETTE_MATRICES_ARB, "GL_MAX_PALETTE_MATRICES_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_ARB, "GL_MATRIX_INDEX_ARRAY_ARB");
    GL_ARB_matrix_palette.put(GL_CURRENT_PALETTE_MATRIX_ARB, "GL_CURRENT_PALETTE_MATRIX_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_SIZE_ARB, "GL_MATRIX_INDEX_ARRAY_SIZE_ARB");
    GL_ARB_matrix_palette.put(GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB, "GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_STRIDE_ARB, "GL_MATRIX_INDEX_ARRAY_STRIDE_ARB");
    GL_ARB_matrix_palette.put(GL_MATRIX_INDEX_ARRAY_POINTER_ARB, "GL_MATRIX_INDEX_ARRAY_POINTER_ARB");
    return GL_ARB_matrix_palette;
  }
  private static Map<Integer, String> GL_EXT_memory_object;
  private static Map<Integer, String> GL_EXT_memory_object() {
    if (GL_EXT_memory_object != null)
      return GL_EXT_memory_object;
    GL_EXT_memory_object = new HashMap<Integer, String>(20);
    GL_EXT_memory_object.put(GL_LAYOUT_SHADER_READ_ONLY_EXT, "GL_LAYOUT_SHADER_READ_ONLY_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_TRANSFER_SRC_EXT, "GL_LAYOUT_TRANSFER_SRC_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT, "GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT");
    GL_EXT_memory_object.put(GL_TEXTURE_TILING_EXT, "GL_TEXTURE_TILING_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_GENERAL_EXT, "GL_LAYOUT_GENERAL_EXT");
    GL_EXT_memory_object.put(GL_DEDICATED_MEMORY_OBJECT_EXT, "GL_DEDICATED_MEMORY_OBJECT_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT, "GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_COLOR_ATTACHMENT_EXT, "GL_LAYOUT_COLOR_ATTACHMENT_EXT");
    GL_EXT_memory_object.put(GL_DEVICE_UUID_EXT, "GL_DEVICE_UUID_EXT");
    GL_EXT_memory_object.put(GL_PROTECTED_MEMORY_OBJECT_EXT, "GL_PROTECTED_MEMORY_OBJECT_EXT");
    GL_EXT_memory_object.put(GL_TILING_TYPES_EXT, "GL_TILING_TYPES_EXT");
    GL_EXT_memory_object.put(GL_NUM_DEVICE_UUIDS_EXT, "GL_NUM_DEVICE_UUIDS_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_TRANSFER_DST_EXT, "GL_LAYOUT_TRANSFER_DST_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT, "GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT");
    GL_EXT_memory_object.put(GL_DRIVER_UUID_EXT, "GL_DRIVER_UUID_EXT");
    GL_EXT_memory_object.put(GL_LINEAR_TILING_EXT, "GL_LINEAR_TILING_EXT");
    GL_EXT_memory_object.put(GL_NUM_TILING_TYPES_EXT, "GL_NUM_TILING_TYPES_EXT");
    GL_EXT_memory_object.put(GL_UUID_SIZE_EXT, "GL_UUID_SIZE_EXT");
    GL_EXT_memory_object.put(GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT, "GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT");
    GL_EXT_memory_object.put(GL_OPTIMAL_TILING_EXT, "GL_OPTIMAL_TILING_EXT");
    return GL_EXT_memory_object;
  }
  private static Map<Integer, String> GL_AMD_occlusion_query_event;
  private static Map<Integer, String> GL_AMD_occlusion_query_event() {
    if (GL_AMD_occlusion_query_event != null)
      return GL_AMD_occlusion_query_event;
    GL_AMD_occlusion_query_event = new HashMap<Integer, String>(6);
    GL_AMD_occlusion_query_event.put(GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD");
    GL_AMD_occlusion_query_event.put(GL_QUERY_ALL_EVENT_BITS_AMD, "GL_QUERY_ALL_EVENT_BITS_AMD");
    GL_AMD_occlusion_query_event.put(GL_OCCLUSION_QUERY_EVENT_MASK_AMD, "GL_OCCLUSION_QUERY_EVENT_MASK_AMD");
    return GL_AMD_occlusion_query_event;
  }
  private static Map<Integer, String> GL_NV_gpu_program4;
  private static Map<Integer, String> GL_NV_gpu_program4() {
    if (GL_NV_gpu_program4 != null)
      return GL_NV_gpu_program4;
    GL_NV_gpu_program4 = new HashMap<Integer, String>(8);
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_RESULT_COMPONENTS_NV, "GL_MAX_PROGRAM_RESULT_COMPONENTS_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV, "GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_TEXEL_OFFSET_NV, "GL_MAX_PROGRAM_TEXEL_OFFSET_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV, "GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV");
    GL_NV_gpu_program4.put(GL_MIN_PROGRAM_TEXEL_OFFSET_NV, "GL_MIN_PROGRAM_TEXEL_OFFSET_NV");
    GL_NV_gpu_program4.put(GL_MAX_PROGRAM_GENERIC_RESULTS_NV, "GL_MAX_PROGRAM_GENERIC_RESULTS_NV");
    GL_NV_gpu_program4.put(GL_PROGRAM_RESULT_COMPONENTS_NV, "GL_PROGRAM_RESULT_COMPONENTS_NV");
    GL_NV_gpu_program4.put(GL_PROGRAM_ATTRIB_COMPONENTS_NV, "GL_PROGRAM_ATTRIB_COMPONENTS_NV");
    return GL_NV_gpu_program4;
  }
  private static Map<Integer, String> GL_NV_gpu_program5;
  private static Map<Integer, String> GL_NV_gpu_program5() {
    if (GL_NV_gpu_program5 != null)
      return GL_NV_gpu_program5;
    GL_NV_gpu_program5 = new HashMap<Integer, String>(8);
    GL_NV_gpu_program5.put(GL_MAX_PROGRAM_SUBROUTINE_NUM_NV, "GL_MAX_PROGRAM_SUBROUTINE_NUM_NV");
    GL_NV_gpu_program5.put(GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV");
    GL_NV_gpu_program5.put(GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV, "GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV");
    GL_NV_gpu_program5.put(GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV, "GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV");
    GL_NV_gpu_program5.put(GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV, "GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV");
    GL_NV_gpu_program5.put(GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV");
    GL_NV_gpu_program5.put(GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV");
    GL_NV_gpu_program5.put(GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV");
    return GL_NV_gpu_program5;
  }
  private static Map<Integer, String> GL_ARB_geometry_shader4;
  private static Map<Integer, String> GL_ARB_geometry_shader4() {
    if (GL_ARB_geometry_shader4 != null)
      return GL_ARB_geometry_shader4;
    GL_ARB_geometry_shader4 = new HashMap<Integer, String>(20);
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB");
    GL_ARB_geometry_shader4.put(GL_TRIANGLES_ADJACENCY_ARB, "GL_TRIANGLES_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_TRIANGLE_STRIP_ADJACENCY_ARB, "GL_TRIANGLE_STRIP_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_VARYING_COMPONENTS, "GL_MAX_VARYING_COMPONENTS");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_VERTEX_VARYING_COMPONENTS_ARB, "GL_MAX_VERTEX_VARYING_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_SHADER_ARB, "GL_GEOMETRY_SHADER_ARB");
    GL_ARB_geometry_shader4.put(GL_LINE_STRIP_ADJACENCY_ARB, "GL_LINE_STRIP_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_INPUT_TYPE_ARB, "GL_GEOMETRY_INPUT_TYPE_ARB");
    GL_ARB_geometry_shader4.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_geometry_shader4.put(GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_OUTPUT_TYPE_ARB, "GL_GEOMETRY_OUTPUT_TYPE_ARB");
    GL_ARB_geometry_shader4.put(GL_PROGRAM_POINT_SIZE_ARB, "GL_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_geometry_shader4.put(GL_LINES_ADJACENCY_ARB, "GL_LINES_ADJACENCY_ARB");
    GL_ARB_geometry_shader4.put(GL_GEOMETRY_VERTICES_OUT_ARB, "GL_GEOMETRY_VERTICES_OUT_ARB");
    return GL_ARB_geometry_shader4;
  }
  private static Map<Integer, String> GL_IMG_user_clip_plane;
  private static Map<Integer, String> GL_IMG_user_clip_plane() {
    if (GL_IMG_user_clip_plane != null)
      return GL_IMG_user_clip_plane;
    GL_IMG_user_clip_plane = new HashMap<Integer, String>(7);
    GL_IMG_user_clip_plane.put(GL_MAX_CLIP_PLANES_IMG, "GL_MAX_CLIP_PLANES_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE1_IMG, "GL_CLIP_PLANE1_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE0_IMG, "GL_CLIP_PLANE0_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE2_IMG, "GL_CLIP_PLANE2_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE5_IMG, "GL_CLIP_PLANE5_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE4_IMG, "GL_CLIP_PLANE4_IMG");
    GL_IMG_user_clip_plane.put(GL_CLIP_PLANE3_IMG, "GL_CLIP_PLANE3_IMG");
    return GL_IMG_user_clip_plane;
  }
  private static Map<Integer, String> GL_ATI_vertex_array_object;
  private static Map<Integer, String> GL_ATI_vertex_array_object() {
    if (GL_ATI_vertex_array_object != null)
      return GL_ATI_vertex_array_object;
    GL_ATI_vertex_array_object = new HashMap<Integer, String>(8);
    GL_ATI_vertex_array_object.put(GL_STATIC_ATI, "GL_STATIC_ATI");
    GL_ATI_vertex_array_object.put(GL_PRESERVE_ATI, "GL_PRESERVE_ATI");
    GL_ATI_vertex_array_object.put(GL_OBJECT_BUFFER_SIZE_ATI, "GL_OBJECT_BUFFER_SIZE_ATI");
    GL_ATI_vertex_array_object.put(GL_ARRAY_OBJECT_BUFFER_ATI, "GL_ARRAY_OBJECT_BUFFER_ATI");
    GL_ATI_vertex_array_object.put(GL_ARRAY_OBJECT_OFFSET_ATI, "GL_ARRAY_OBJECT_OFFSET_ATI");
    GL_ATI_vertex_array_object.put(GL_DISCARD_ATI, "GL_DISCARD_ATI");
    GL_ATI_vertex_array_object.put(GL_DYNAMIC_ATI, "GL_DYNAMIC_ATI");
    GL_ATI_vertex_array_object.put(GL_OBJECT_BUFFER_USAGE_ATI, "GL_OBJECT_BUFFER_USAGE_ATI");
    return GL_ATI_vertex_array_object;
  }
  private static Map<Integer, String> GL_OES_geometry_shader;
  private static Map<Integer, String> GL_OES_geometry_shader() {
    if (GL_OES_geometry_shader != null)
      return GL_OES_geometry_shader;
    GL_OES_geometry_shader = new HashMap<Integer, String>(33);
    GL_OES_geometry_shader.put(GL_FIRST_VERTEX_CONVENTION_OES, "GL_FIRST_VERTEX_CONVENTION_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES");
    GL_OES_geometry_shader.put(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES");
    GL_OES_geometry_shader.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES");
    GL_OES_geometry_shader.put(GL_LINES_ADJACENCY_OES, "GL_LINES_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_TRIANGLES_ADJACENCY_OES, "GL_TRIANGLES_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_LAYER_PROVOKING_VERTEX_OES, "GL_LAYER_PROVOKING_VERTEX_OES");
    GL_OES_geometry_shader.put(GL_PRIMITIVES_GENERATED_OES, "GL_PRIMITIVES_GENERATED_OES");
    GL_OES_geometry_shader.put(GL_MAX_FRAMEBUFFER_LAYERS_OES, "GL_MAX_FRAMEBUFFER_LAYERS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES");
    GL_OES_geometry_shader.put(GL_FRAMEBUFFER_DEFAULT_LAYERS_OES, "GL_FRAMEBUFFER_DEFAULT_LAYERS_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES, "GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES");
    GL_OES_geometry_shader.put(GL_LINE_STRIP_ADJACENCY_OES, "GL_LINE_STRIP_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_REFERENCED_BY_GEOMETRY_SHADER_OES, "GL_REFERENCED_BY_GEOMETRY_SHADER_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_SHADER_INVOCATIONS_OES, "GL_GEOMETRY_SHADER_INVOCATIONS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_TRIANGLE_STRIP_ADJACENCY_OES, "GL_TRIANGLE_STRIP_ADJACENCY_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_LINKED_VERTICES_OUT_OES, "GL_GEOMETRY_LINKED_VERTICES_OUT_OES");
    GL_OES_geometry_shader.put(GL_UNDEFINED_VERTEX_OES, "GL_UNDEFINED_VERTEX_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_LINKED_INPUT_TYPE_OES, "GL_GEOMETRY_LINKED_INPUT_TYPE_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_SHADER_BIT_OES, "GL_GEOMETRY_SHADER_BIT_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES");
    GL_OES_geometry_shader.put(GL_GEOMETRY_SHADER_OES, "GL_GEOMETRY_SHADER_OES");
    GL_OES_geometry_shader.put(GL_LAST_VERTEX_CONVENTION_OES, "GL_LAST_VERTEX_CONVENTION_OES");
    GL_OES_geometry_shader.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES");
    GL_OES_geometry_shader.put(GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES, "GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES");
    return GL_OES_geometry_shader;
  }
  private static Map<Integer, String> GL_NV_conservative_raster_pre_snap_triangles;
  private static Map<Integer, String> GL_NV_conservative_raster_pre_snap_triangles() {
    if (GL_NV_conservative_raster_pre_snap_triangles != null)
      return GL_NV_conservative_raster_pre_snap_triangles;
    GL_NV_conservative_raster_pre_snap_triangles = new HashMap<Integer, String>(3);
    GL_NV_conservative_raster_pre_snap_triangles.put(GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV, "GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV");
    GL_NV_conservative_raster_pre_snap_triangles.put(GL_CONSERVATIVE_RASTER_MODE_NV, "GL_CONSERVATIVE_RASTER_MODE_NV");
    GL_NV_conservative_raster_pre_snap_triangles.put(GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV, "GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV");
    return GL_NV_conservative_raster_pre_snap_triangles;
  }
  private static Map<Integer, String> GL_ATI_element_array;
  private static Map<Integer, String> GL_ATI_element_array() {
    if (GL_ATI_element_array != null)
      return GL_ATI_element_array;
    GL_ATI_element_array = new HashMap<Integer, String>(3);
    GL_ATI_element_array.put(GL_ELEMENT_ARRAY_ATI, "GL_ELEMENT_ARRAY_ATI");
    GL_ATI_element_array.put(GL_ELEMENT_ARRAY_POINTER_ATI, "GL_ELEMENT_ARRAY_POINTER_ATI");
    GL_ATI_element_array.put(GL_ELEMENT_ARRAY_TYPE_ATI, "GL_ELEMENT_ARRAY_TYPE_ATI");
    return GL_ATI_element_array;
  }
  private static Map<Integer, String> GL_ARB_transform_feedback3;
  private static Map<Integer, String> GL_ARB_transform_feedback3() {
    if (GL_ARB_transform_feedback3 != null)
      return GL_ARB_transform_feedback3;
    GL_ARB_transform_feedback3 = new HashMap<Integer, String>(2);
    GL_ARB_transform_feedback3.put(GL_MAX_VERTEX_STREAMS, "GL_MAX_VERTEX_STREAMS");
    GL_ARB_transform_feedback3.put(GL_MAX_TRANSFORM_FEEDBACK_BUFFERS, "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS");
    return GL_ARB_transform_feedback3;
  }
  private static Map<Integer, String> GL_ARB_transform_feedback2;
  private static Map<Integer, String> GL_ARB_transform_feedback2() {
    if (GL_ARB_transform_feedback2 != null)
      return GL_ARB_transform_feedback2;
    GL_ARB_transform_feedback2 = new HashMap<Integer, String>(4);
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BINDING, "GL_TRANSFORM_FEEDBACK_BINDING");
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE");
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK, "GL_TRANSFORM_FEEDBACK");
    GL_ARB_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED");
    return GL_ARB_transform_feedback2;
  }
  private static Map<Integer, String> GL_APPLE_framebuffer_multisample;
  private static Map<Integer, String> GL_APPLE_framebuffer_multisample() {
    if (GL_APPLE_framebuffer_multisample != null)
      return GL_APPLE_framebuffer_multisample;
    GL_APPLE_framebuffer_multisample = new HashMap<Integer, String>(7);
    GL_APPLE_framebuffer_multisample.put(GL_DRAW_FRAMEBUFFER_BINDING_APPLE, "GL_DRAW_FRAMEBUFFER_BINDING_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_RENDERBUFFER_SAMPLES_APPLE, "GL_RENDERBUFFER_SAMPLES_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_READ_FRAMEBUFFER_BINDING_APPLE, "GL_READ_FRAMEBUFFER_BINDING_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_MAX_SAMPLES_APPLE, "GL_MAX_SAMPLES_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_DRAW_FRAMEBUFFER_APPLE, "GL_DRAW_FRAMEBUFFER_APPLE");
    GL_APPLE_framebuffer_multisample.put(GL_READ_FRAMEBUFFER_APPLE, "GL_READ_FRAMEBUFFER_APPLE");
    return GL_APPLE_framebuffer_multisample;
  }
  private static Map<Integer, String> GL_OES_texture_storage_multisample_2d_array;
  private static Map<Integer, String> GL_OES_texture_storage_multisample_2d_array() {
    if (GL_OES_texture_storage_multisample_2d_array != null)
      return GL_OES_texture_storage_multisample_2d_array;
    GL_OES_texture_storage_multisample_2d_array = new HashMap<Integer, String>(5);
    GL_OES_texture_storage_multisample_2d_array.put(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES");
    GL_OES_texture_storage_multisample_2d_array.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES");
    return GL_OES_texture_storage_multisample_2d_array;
  }
  private static Map<Integer, String> GL_EXT_clip_control;
  private static Map<Integer, String> GL_EXT_clip_control() {
    if (GL_EXT_clip_control != null)
      return GL_EXT_clip_control;
    GL_EXT_clip_control = new HashMap<Integer, String>(6);
    GL_EXT_clip_control.put(GL_LOWER_LEFT_EXT, "GL_LOWER_LEFT_EXT");
    GL_EXT_clip_control.put(GL_NEGATIVE_ONE_TO_ONE_EXT, "GL_NEGATIVE_ONE_TO_ONE_EXT");
    GL_EXT_clip_control.put(GL_CLIP_DEPTH_MODE_EXT, "GL_CLIP_DEPTH_MODE_EXT");
    GL_EXT_clip_control.put(GL_UPPER_LEFT_EXT, "GL_UPPER_LEFT_EXT");
    GL_EXT_clip_control.put(GL_CLIP_ORIGIN_EXT, "GL_CLIP_ORIGIN_EXT");
    GL_EXT_clip_control.put(GL_ZERO_TO_ONE_EXT, "GL_ZERO_TO_ONE_EXT");
    return GL_EXT_clip_control;
  }
  private static Map<Integer, String> GL_EXT_provoking_vertex;
  private static Map<Integer, String> GL_EXT_provoking_vertex() {
    if (GL_EXT_provoking_vertex != null)
      return GL_EXT_provoking_vertex;
    GL_EXT_provoking_vertex = new HashMap<Integer, String>(4);
    GL_EXT_provoking_vertex.put(GL_LAST_VERTEX_CONVENTION_EXT, "GL_LAST_VERTEX_CONVENTION_EXT");
    GL_EXT_provoking_vertex.put(GL_FIRST_VERTEX_CONVENTION_EXT, "GL_FIRST_VERTEX_CONVENTION_EXT");
    GL_EXT_provoking_vertex.put(GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT");
    GL_EXT_provoking_vertex.put(GL_PROVOKING_VERTEX_EXT, "GL_PROVOKING_VERTEX_EXT");
    return GL_EXT_provoking_vertex;
  }
  private static Map<Integer, String> GL_ARB_sampler_objects;
  private static Map<Integer, String> GL_ARB_sampler_objects() {
    if (GL_ARB_sampler_objects != null)
      return GL_ARB_sampler_objects;
    GL_ARB_sampler_objects = new HashMap<Integer, String>(1);
    GL_ARB_sampler_objects.put(GL_SAMPLER_BINDING, "GL_SAMPLER_BINDING");
    return GL_ARB_sampler_objects;
  }
  private static Map<Integer, String> GL_ARB_vertex_program;
  private static Map<Integer, String> GL_ARB_vertex_program() {
    if (GL_ARB_vertex_program != null)
      return GL_ARB_vertex_program;
    GL_ARB_vertex_program = new HashMap<Integer, String>(95);
    GL_ARB_vertex_program.put(GL_VERTEX_PROGRAM_TWO_SIDE_ARB, "GL_VERTEX_PROGRAM_TWO_SIDE_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX11_ARB, "GL_MATRIX11_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB, "GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT, "GL_FLOAT");
    GL_ARB_vertex_program.put(GL_CURRENT_VERTEX_ATTRIB_ARB, "GL_CURRENT_VERTEX_ATTRIB_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX29_ARB, "GL_MATRIX29_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB, "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB, "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX3_ARB, "GL_MATRIX3_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX12_ARB, "GL_MATRIX12_ARB");
    GL_ARB_vertex_program.put(GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB, "GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT_MAT2_ARB, "GL_FLOAT_MAT2_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX28_ARB, "GL_MATRIX28_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX4_ARB, "GL_MATRIX4_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX20_ARB, "GL_MATRIX20_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_BINDING_ARB, "GL_PROGRAM_BINDING_ARB");
    GL_ARB_vertex_program.put(GL_TRANSPOSE_CURRENT_MATRIX_ARB, "GL_TRANSPOSE_CURRENT_MATRIX_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ATTRIBS_ARB, "GL_PROGRAM_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_CURRENT_MATRIX_ARB, "GL_CURRENT_MATRIX_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX1_ARB, "GL_MATRIX1_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX22_ARB, "GL_MATRIX22_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB, "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB");
    GL_ARB_vertex_program.put(GL_MAX_VERTEX_ATTRIBS_ARB, "GL_MAX_VERTEX_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_PARAMETERS_ARB, "GL_PROGRAM_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX19_ARB, "GL_MATRIX19_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT_VEC3_ARB, "GL_FLOAT_VEC3_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_FORMAT_ASCII_ARB, "GL_PROGRAM_FORMAT_ASCII_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_ENV_PARAMETERS_ARB, "GL_MAX_PROGRAM_ENV_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX21_ARB, "GL_MATRIX21_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_TEMPORARIES_ARB, "GL_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_vertex_program.put(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX10_ARB, "GL_MATRIX10_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX17_ARB, "GL_MATRIX17_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX23_ARB, "GL_MATRIX23_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_ATTRIBS_ARB, "GL_MAX_PROGRAM_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_CURRENT_MATRIX_STACK_DEPTH_ARB, "GL_CURRENT_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX18_ARB, "GL_MATRIX18_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT_VEC4_ARB, "GL_FLOAT_VEC4_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_STRING_ARB, "GL_PROGRAM_STRING_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_PARAMETERS_ARB, "GL_MAX_PROGRAM_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX2_ARB, "GL_MATRIX2_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_PROGRAM_ARB, "GL_VERTEX_PROGRAM_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_MATRICES_ARB, "GL_MAX_PROGRAM_MATRICES_ARB");
    GL_ARB_vertex_program.put(GL_MAX_VARYING_FLOATS_ARB, "GL_MAX_VARYING_FLOATS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX16_ARB, "GL_MATRIX16_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX8_ARB, "GL_MATRIX8_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB, "GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX24_ARB, "GL_MATRIX24_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_FORMAT_ARB, "GL_PROGRAM_FORMAT_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX9_ARB, "GL_MATRIX9_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX25_ARB, "GL_MATRIX25_ARB");
    GL_ARB_vertex_program.put(GL_MAX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_TEMPORARIES_ARB, "GL_MAX_PROGRAM_TEMPORARIES_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX15_ARB, "GL_MATRIX15_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT_VEC2_ARB, "GL_FLOAT_VEC2_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_PROGRAM_POINT_SIZE_ARB, "GL_VERTEX_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB, "GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_INSTRUCTIONS_ARB, "GL_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_PROGRAM_NATIVE_TEMPORARIES_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX0_ARB, "GL_MATRIX0_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ERROR_STRING_ARB, "GL_PROGRAM_ERROR_STRING_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_COLOR_SUM_ARB, "GL_COLOR_SUM_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB, "GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX6_ARB, "GL_MATRIX6_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX30_ARB, "GL_MATRIX30_ARB");
    GL_ARB_vertex_program.put(GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB, "GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_SHADER_ARB, "GL_VERTEX_SHADER_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX27_ARB, "GL_MATRIX27_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB, "GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX13_ARB, "GL_MATRIX13_ARB");
    GL_ARB_vertex_program.put(GL_MAX_TEXTURE_COORDS_ARB, "GL_MAX_TEXTURE_COORDS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB, "GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX14_ARB, "GL_MATRIX14_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT_MAT3_ARB, "GL_FLOAT_MAT3_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ERROR_POSITION_ARB, "GL_PROGRAM_ERROR_POSITION_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_ATTRIBS_ARB, "GL_PROGRAM_NATIVE_ATTRIBS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_ADDRESS_REGISTERS_ARB, "GL_PROGRAM_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB, "GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX5_ARB, "GL_MATRIX5_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX7_ARB, "GL_MATRIX7_ARB");
    GL_ARB_vertex_program.put(GL_FLOAT_MAT4_ARB, "GL_FLOAT_MAT4_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB");
    GL_ARB_vertex_program.put(GL_PROGRAM_LENGTH_ARB, "GL_PROGRAM_LENGTH_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB, "GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX26_ARB, "GL_MATRIX26_ARB");
    GL_ARB_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB, "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB");
    GL_ARB_vertex_program.put(GL_MATRIX31_ARB, "GL_MATRIX31_ARB");
    GL_ARB_vertex_program.put(GL_OBJECT_ACTIVE_ATTRIBUTES_ARB, "GL_OBJECT_ACTIVE_ATTRIBUTES_ARB");
    GL_ARB_vertex_program.put(GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB, "GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB");
    return GL_ARB_vertex_program;
  }
  private static Map<Integer, String> GL_NV_gpu_multicast;
  private static Map<Integer, String> GL_NV_gpu_multicast() {
    if (GL_NV_gpu_multicast != null)
      return GL_NV_gpu_multicast;
    GL_NV_gpu_multicast = new HashMap<Integer, String>(5);
    GL_NV_gpu_multicast.put(GL_PER_GPU_STORAGE_NV, "GL_PER_GPU_STORAGE_NV");
    GL_NV_gpu_multicast.put(GL_MULTICAST_GPUS_NV, "GL_MULTICAST_GPUS_NV");
    GL_NV_gpu_multicast.put(GL_PER_GPU_STORAGE_BIT_NV, "GL_PER_GPU_STORAGE_BIT_NV");
    GL_NV_gpu_multicast.put(GL_RENDER_GPU_MASK_NV, "GL_RENDER_GPU_MASK_NV");
    GL_NV_gpu_multicast.put(GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV, "GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV");
    return GL_NV_gpu_multicast;
  }
  private static Map<Integer, String> GL_ARB_vertex_attrib_64bit;
  private static Map<Integer, String> GL_ARB_vertex_attrib_64bit() {
    if (GL_ARB_vertex_attrib_64bit != null)
      return GL_ARB_vertex_attrib_64bit;
    GL_ARB_vertex_attrib_64bit = new HashMap<Integer, String>(13);
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_VEC4, "GL_DOUBLE_VEC4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_VEC3, "GL_DOUBLE_VEC3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_VEC2, "GL_DOUBLE_VEC2");
    GL_ARB_vertex_attrib_64bit.put(GL_RGB32I, "GL_RGB32I");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT4, "GL_DOUBLE_MAT4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x4, "GL_DOUBLE_MAT2x4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x2, "GL_DOUBLE_MAT4x2");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x4, "GL_DOUBLE_MAT3x4");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x3, "GL_DOUBLE_MAT4x3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x3, "GL_DOUBLE_MAT2x3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x2, "GL_DOUBLE_MAT3x2");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT3, "GL_DOUBLE_MAT3");
    GL_ARB_vertex_attrib_64bit.put(GL_DOUBLE_MAT2, "GL_DOUBLE_MAT2");
    return GL_ARB_vertex_attrib_64bit;
  }
  private static Map<Integer, String> GL_NV_command_list;
  private static Map<Integer, String> GL_NV_command_list() {
    if (GL_NV_command_list != null)
      return GL_NV_command_list;
    GL_NV_command_list = new HashMap<Integer, String>(19);
    GL_NV_command_list.put(GL_STENCIL_REF_COMMAND_NV, "GL_STENCIL_REF_COMMAND_NV");
    GL_NV_command_list.put(GL_LINE_WIDTH_COMMAND_NV, "GL_LINE_WIDTH_COMMAND_NV");
    GL_NV_command_list.put(GL_NOP_COMMAND_NV, "GL_NOP_COMMAND_NV");
    GL_NV_command_list.put(GL_UNIFORM_ADDRESS_COMMAND_NV, "GL_UNIFORM_ADDRESS_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ARRAYS_COMMAND_NV, "GL_DRAW_ARRAYS_COMMAND_NV");
    GL_NV_command_list.put(GL_ALPHA_REF_COMMAND_NV, "GL_ALPHA_REF_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV, "GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV");
    GL_NV_command_list.put(GL_SCISSOR_COMMAND_NV, "GL_SCISSOR_COMMAND_NV");
    GL_NV_command_list.put(GL_ATTRIBUTE_ADDRESS_COMMAND_NV, "GL_ATTRIBUTE_ADDRESS_COMMAND_NV");
    GL_NV_command_list.put(GL_BLEND_COLOR_COMMAND_NV, "GL_BLEND_COLOR_COMMAND_NV");
    GL_NV_command_list.put(GL_VIEWPORT_COMMAND_NV, "GL_VIEWPORT_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ELEMENTS_COMMAND_NV, "GL_DRAW_ELEMENTS_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ELEMENTS_STRIP_COMMAND_NV, "GL_DRAW_ELEMENTS_STRIP_COMMAND_NV");
    GL_NV_command_list.put(GL_POLYGON_OFFSET_COMMAND_NV, "GL_POLYGON_OFFSET_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ARRAYS_STRIP_COMMAND_NV, "GL_DRAW_ARRAYS_STRIP_COMMAND_NV");
    GL_NV_command_list.put(GL_FRONT_FACE_COMMAND_NV, "GL_FRONT_FACE_COMMAND_NV");
    GL_NV_command_list.put(GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV, "GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV");
    GL_NV_command_list.put(GL_ELEMENT_ADDRESS_COMMAND_NV, "GL_ELEMENT_ADDRESS_COMMAND_NV");
    GL_NV_command_list.put(GL_TERMINATE_SEQUENCE_COMMAND_NV, "GL_TERMINATE_SEQUENCE_COMMAND_NV");
    return GL_NV_command_list;
  }
  private static Map<Integer, String> GL_ARB_texture_buffer_range;
  private static Map<Integer, String> GL_ARB_texture_buffer_range() {
    if (GL_ARB_texture_buffer_range != null)
      return GL_ARB_texture_buffer_range;
    GL_ARB_texture_buffer_range = new HashMap<Integer, String>(3);
    GL_ARB_texture_buffer_range.put(GL_TEXTURE_BUFFER_OFFSET, "GL_TEXTURE_BUFFER_OFFSET");
    GL_ARB_texture_buffer_range.put(GL_TEXTURE_BUFFER_SIZE, "GL_TEXTURE_BUFFER_SIZE");
    GL_ARB_texture_buffer_range.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT");
    return GL_ARB_texture_buffer_range;
  }
  private static Map<Integer, String> GL_ARB_direct_state_access;
  private static Map<Integer, String> GL_ARB_direct_state_access() {
    if (GL_ARB_direct_state_access != null)
      return GL_ARB_direct_state_access;
    GL_ARB_direct_state_access = new HashMap<Integer, String>(13);
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_1D_ARRAY, "GL_TEXTURE_BINDING_1D_ARRAY");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_3D, "GL_TEXTURE_BINDING_3D");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_RECTANGLE, "GL_TEXTURE_BINDING_RECTANGLE");
    GL_ARB_direct_state_access.put(GL_TEXTURE_TARGET, "GL_TEXTURE_TARGET");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D, "GL_TEXTURE_BINDING_2D");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D_ARRAY, "GL_TEXTURE_BINDING_2D_ARRAY");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_1D, "GL_TEXTURE_BINDING_1D");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_CUBE_MAP, "GL_TEXTURE_BINDING_CUBE_MAP");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");
    GL_ARB_direct_state_access.put(GL_QUERY_TARGET, "GL_QUERY_TARGET");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_CUBE_MAP_ARRAY, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_2D_MULTISAMPLE, "GL_TEXTURE_BINDING_2D_MULTISAMPLE");
    GL_ARB_direct_state_access.put(GL_TEXTURE_BINDING_BUFFER, "GL_TEXTURE_BINDING_BUFFER");
    return GL_ARB_direct_state_access;
  }
  private static Map<Integer, String> GL_EXT_texture_object;
  private static Map<Integer, String> GL_EXT_texture_object() {
    if (GL_EXT_texture_object != null)
      return GL_EXT_texture_object;
    GL_EXT_texture_object = new HashMap<Integer, String>(5);
    GL_EXT_texture_object.put(GL_TEXTURE_RESIDENT_EXT, "GL_TEXTURE_RESIDENT_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_PRIORITY_EXT, "GL_TEXTURE_PRIORITY_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_3D_BINDING_EXT, "GL_TEXTURE_3D_BINDING_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_2D_BINDING_EXT, "GL_TEXTURE_2D_BINDING_EXT");
    GL_EXT_texture_object.put(GL_TEXTURE_1D_BINDING_EXT, "GL_TEXTURE_1D_BINDING_EXT");
    return GL_EXT_texture_object;
  }
  private static Map<Integer, String> GL_EXT_blend_func_extended;
  private static Map<Integer, String> GL_EXT_blend_func_extended() {
    if (GL_EXT_blend_func_extended != null)
      return GL_EXT_blend_func_extended;
    GL_EXT_blend_func_extended = new HashMap<Integer, String>(35);
    GL_EXT_blend_func_extended.put(GL_SRC_ALPHA_SATURATE_EXT, "GL_SRC_ALPHA_SATURATE_EXT");
    GL_EXT_blend_func_extended.put(GL_SAMPLER_1D_ARRAY_EXT, "GL_SAMPLER_1D_ARRAY_EXT");
    GL_EXT_blend_func_extended.put(GL_SAMPLER_BUFFER_EXT, "GL_SAMPLER_BUFFER_EXT");
    GL_EXT_blend_func_extended.put(GL_SAMPLER_1D_ARRAY_SHADOW_EXT, "GL_SAMPLER_1D_ARRAY_SHADOW_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_2D_EXT, "GL_UNSIGNED_INT_SAMPLER_2D_EXT");
    GL_EXT_blend_func_extended.put(GL_SRC1_ALPHA_EXT, "GL_SRC1_ALPHA_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_2D_ARRAY_EXT, "GL_INT_SAMPLER_2D_ARRAY_EXT");
    GL_EXT_blend_func_extended.put(GL_MAX_PROGRAM_TEXEL_OFFSET_EXT, "GL_MAX_PROGRAM_TEXEL_OFFSET_EXT");
    GL_EXT_blend_func_extended.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_1D_ARRAY_EXT, "GL_INT_SAMPLER_1D_ARRAY_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_VEC2_EXT, "GL_UNSIGNED_INT_VEC2_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_3D_EXT, "GL_UNSIGNED_INT_SAMPLER_3D_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_3D_EXT, "GL_INT_SAMPLER_3D_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_2D_EXT, "GL_INT_SAMPLER_2D_EXT");
    GL_EXT_blend_func_extended.put(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT, "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_CUBE_EXT, "GL_INT_SAMPLER_CUBE_EXT");
    GL_EXT_blend_func_extended.put(GL_ONE_MINUS_SRC1_ALPHA_EXT, "GL_ONE_MINUS_SRC1_ALPHA_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_1D_EXT, "GL_UNSIGNED_INT_SAMPLER_1D_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_blend_func_extended.put(GL_SAMPLER_2D_ARRAY_EXT, "GL_SAMPLER_2D_ARRAY_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_VEC3_EXT, "GL_UNSIGNED_INT_VEC3_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_2D_RECT_EXT, "GL_INT_SAMPLER_2D_RECT_EXT");
    GL_EXT_blend_func_extended.put(GL_MIN_PROGRAM_TEXEL_OFFSET_EXT, "GL_MIN_PROGRAM_TEXEL_OFFSET_EXT");
    GL_EXT_blend_func_extended.put(GL_SRC1_COLOR_EXT, "GL_SRC1_COLOR_EXT");
    GL_EXT_blend_func_extended.put(GL_SAMPLER_2D_ARRAY_SHADOW_EXT, "GL_SAMPLER_2D_ARRAY_SHADOW_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_1D_EXT, "GL_INT_SAMPLER_1D_EXT");
    GL_EXT_blend_func_extended.put(GL_LOCATION_INDEX_EXT, "GL_LOCATION_INDEX_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_VEC4_EXT, "GL_UNSIGNED_INT_VEC4_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_CUBE_EXT, "GL_UNSIGNED_INT_SAMPLER_CUBE_EXT");
    GL_EXT_blend_func_extended.put(GL_SAMPLER_CUBE_SHADOW_EXT, "GL_SAMPLER_CUBE_SHADOW_EXT");
    GL_EXT_blend_func_extended.put(GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT, "GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT");
    GL_EXT_blend_func_extended.put(GL_INT_SAMPLER_BUFFER_EXT, "GL_INT_SAMPLER_BUFFER_EXT");
    GL_EXT_blend_func_extended.put(GL_ONE_MINUS_SRC1_COLOR_EXT, "GL_ONE_MINUS_SRC1_COLOR_EXT");
    return GL_EXT_blend_func_extended;
  }
  private static Map<Integer, String> GL_EXT_blend_func_separate;
  private static Map<Integer, String> GL_EXT_blend_func_separate() {
    if (GL_EXT_blend_func_separate != null)
      return GL_EXT_blend_func_separate;
    GL_EXT_blend_func_separate = new HashMap<Integer, String>(4);
    GL_EXT_blend_func_separate.put(GL_BLEND_DST_RGB_EXT, "GL_BLEND_DST_RGB_EXT");
    GL_EXT_blend_func_separate.put(GL_BLEND_SRC_RGB_EXT, "GL_BLEND_SRC_RGB_EXT");
    GL_EXT_blend_func_separate.put(GL_BLEND_DST_ALPHA_EXT, "GL_BLEND_DST_ALPHA_EXT");
    GL_EXT_blend_func_separate.put(GL_BLEND_SRC_ALPHA_EXT, "GL_BLEND_SRC_ALPHA_EXT");
    return GL_EXT_blend_func_separate;
  }
  private static Map<Integer, String> GL_ARB_gpu_shader_fp64;
  private static Map<Integer, String> GL_ARB_gpu_shader_fp64() {
    if (GL_ARB_gpu_shader_fp64 != null)
      return GL_ARB_gpu_shader_fp64;
    GL_ARB_gpu_shader_fp64 = new HashMap<Integer, String>(13);
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE, "GL_DOUBLE");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_VEC4, "GL_DOUBLE_VEC4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_VEC3, "GL_DOUBLE_VEC3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_VEC2, "GL_DOUBLE_VEC2");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT4, "GL_DOUBLE_MAT4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT2x4, "GL_DOUBLE_MAT2x4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT4x2, "GL_DOUBLE_MAT4x2");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT3x4, "GL_DOUBLE_MAT3x4");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT4x3, "GL_DOUBLE_MAT4x3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT2x3, "GL_DOUBLE_MAT2x3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT3x2, "GL_DOUBLE_MAT3x2");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT3, "GL_DOUBLE_MAT3");
    GL_ARB_gpu_shader_fp64.put(GL_DOUBLE_MAT2, "GL_DOUBLE_MAT2");
    return GL_ARB_gpu_shader_fp64;
  }
  private static Map<Integer, String> GL_EXT_window_rectangles;
  private static Map<Integer, String> GL_EXT_window_rectangles() {
    if (GL_EXT_window_rectangles != null)
      return GL_EXT_window_rectangles;
    GL_EXT_window_rectangles = new HashMap<Integer, String>(6);
    GL_EXT_window_rectangles.put(GL_WINDOW_RECTANGLE_MODE_EXT, "GL_WINDOW_RECTANGLE_MODE_EXT");
    GL_EXT_window_rectangles.put(GL_INCLUSIVE_EXT, "GL_INCLUSIVE_EXT");
    GL_EXT_window_rectangles.put(GL_WINDOW_RECTANGLE_EXT, "GL_WINDOW_RECTANGLE_EXT");
    GL_EXT_window_rectangles.put(GL_NUM_WINDOW_RECTANGLES_EXT, "GL_NUM_WINDOW_RECTANGLES_EXT");
    GL_EXT_window_rectangles.put(GL_EXCLUSIVE_EXT, "GL_EXCLUSIVE_EXT");
    GL_EXT_window_rectangles.put(GL_MAX_WINDOW_RECTANGLES_EXT, "GL_MAX_WINDOW_RECTANGLES_EXT");
    return GL_EXT_window_rectangles;
  }
  private static Map<Integer, String> GL_SGIS_texture_filter4;
  private static Map<Integer, String> GL_SGIS_texture_filter4() {
    if (GL_SGIS_texture_filter4 != null)
      return GL_SGIS_texture_filter4;
    GL_SGIS_texture_filter4 = new HashMap<Integer, String>(2);
    GL_SGIS_texture_filter4.put(GL_FILTER4_SGIS, "GL_FILTER4_SGIS");
    GL_SGIS_texture_filter4.put(GL_TEXTURE_FILTER4_SIZE_SGIS, "GL_TEXTURE_FILTER4_SIZE_SGIS");
    return GL_SGIS_texture_filter4;
  }
  private static Map<Integer, String> GL_AMD_name_gen_delete;
  private static Map<Integer, String> GL_AMD_name_gen_delete() {
    if (GL_AMD_name_gen_delete != null)
      return GL_AMD_name_gen_delete;
    GL_AMD_name_gen_delete = new HashMap<Integer, String>(5);
    GL_AMD_name_gen_delete.put(GL_VERTEX_ARRAY_OBJECT_AMD, "GL_VERTEX_ARRAY_OBJECT_AMD");
    GL_AMD_name_gen_delete.put(GL_PERFORMANCE_MONITOR_AMD, "GL_PERFORMANCE_MONITOR_AMD");
    GL_AMD_name_gen_delete.put(GL_DATA_BUFFER_AMD, "GL_DATA_BUFFER_AMD");
    GL_AMD_name_gen_delete.put(GL_QUERY_OBJECT_AMD, "GL_QUERY_OBJECT_AMD");
    GL_AMD_name_gen_delete.put(GL_SAMPLER_OBJECT_AMD, "GL_SAMPLER_OBJECT_AMD");
    return GL_AMD_name_gen_delete;
  }
  private static Map<Integer, String> GL_ARB_internalformat_query;
  private static Map<Integer, String> GL_ARB_internalformat_query() {
    if (GL_ARB_internalformat_query != null)
      return GL_ARB_internalformat_query;
    GL_ARB_internalformat_query = new HashMap<Integer, String>(1);
    GL_ARB_internalformat_query.put(GL_NUM_SAMPLE_COUNTS, "GL_NUM_SAMPLE_COUNTS");
    return GL_ARB_internalformat_query;
  }
  private static Map<Integer, String> GL_ARB_copy_buffer;
  private static Map<Integer, String> GL_ARB_copy_buffer() {
    if (GL_ARB_copy_buffer != null)
      return GL_ARB_copy_buffer;
    GL_ARB_copy_buffer = new HashMap<Integer, String>(2);
    GL_ARB_copy_buffer.put(GL_COPY_WRITE_BUFFER, "GL_COPY_WRITE_BUFFER");
    GL_ARB_copy_buffer.put(GL_COPY_READ_BUFFER, "GL_COPY_READ_BUFFER");
    return GL_ARB_copy_buffer;
  }
  private static Map<Integer, String> GL_NV_transform_feedback2;
  private static Map<Integer, String> GL_NV_transform_feedback2() {
    if (GL_NV_transform_feedback2 != null)
      return GL_NV_transform_feedback2;
    GL_NV_transform_feedback2 = new HashMap<Integer, String>(4);
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV");
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BINDING_NV, "GL_TRANSFORM_FEEDBACK_BINDING_NV");
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_NV, "GL_TRANSFORM_FEEDBACK_NV");
    GL_NV_transform_feedback2.put(GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV");
    return GL_NV_transform_feedback2;
  }
  private static Map<Integer, String> GL_EXT_tessellation_shader;
  private static Map<Integer, String> GL_EXT_tessellation_shader() {
    if (GL_EXT_tessellation_shader != null)
      return GL_EXT_tessellation_shader;
    GL_EXT_tessellation_shader = new HashMap<Integer, String>(47);
    GL_EXT_tessellation_shader.put(GL_TESS_CONTROL_SHADER_EXT, "GL_TESS_CONTROL_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_CW, "GL_CW");
    GL_EXT_tessellation_shader.put(GL_ISOLINES_EXT, "GL_ISOLINES_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_QUADS_EXT, "GL_QUADS_EXT");
    GL_EXT_tessellation_shader.put(GL_FRACTIONAL_ODD_EXT, "GL_FRACTIONAL_ODD_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT");
    GL_EXT_tessellation_shader.put(GL_TRIANGLES, "GL_TRIANGLES");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_POINT_MODE_EXT, "GL_TESS_GEN_POINT_MODE_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_PATCH_VERTICES_EXT, "GL_MAX_PATCH_VERTICES_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT");
    GL_EXT_tessellation_shader.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_EXT, "GL_TESS_EVALUATION_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_CCW, "GL_CCW");
    GL_EXT_tessellation_shader.put(GL_EQUAL, "GL_EQUAL");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_MODE_EXT, "GL_TESS_GEN_MODE_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_IS_PER_PATCH_EXT, "GL_IS_PER_PATCH_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_FRACTIONAL_EVEN_EXT, "GL_FRACTIONAL_EVEN_EXT");
    GL_EXT_tessellation_shader.put(GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED");
    GL_EXT_tessellation_shader.put(GL_TESS_EVALUATION_SHADER_BIT_EXT, "GL_TESS_EVALUATION_SHADER_BIT_EXT");
    GL_EXT_tessellation_shader.put(GL_PATCHES_EXT, "GL_PATCHES_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_VERTEX_ORDER_EXT, "GL_TESS_GEN_VERTEX_ORDER_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_GEN_LEVEL_EXT, "GL_MAX_TESS_GEN_LEVEL_EXT");
    GL_EXT_tessellation_shader.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT, "GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_GEN_SPACING_EXT, "GL_TESS_GEN_SPACING_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_CONTROL_SHADER_BIT_EXT, "GL_TESS_CONTROL_SHADER_BIT_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_tessellation_shader.put(GL_TESS_CONTROL_OUTPUT_VERTICES_EXT, "GL_TESS_CONTROL_OUTPUT_VERTICES_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_PATCH_COMPONENTS_EXT, "GL_MAX_TESS_PATCH_COMPONENTS_EXT");
    GL_EXT_tessellation_shader.put(GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_tessellation_shader.put(GL_PATCH_VERTICES_EXT, "GL_PATCH_VERTICES_EXT");
    return GL_EXT_tessellation_shader;
  }
  private static Map<Integer, String> GL_ARB_timer_query;
  private static Map<Integer, String> GL_ARB_timer_query() {
    if (GL_ARB_timer_query != null)
      return GL_ARB_timer_query;
    GL_ARB_timer_query = new HashMap<Integer, String>(2);
    GL_ARB_timer_query.put(GL_TIMESTAMP, "GL_TIMESTAMP");
    GL_ARB_timer_query.put(GL_TIME_ELAPSED, "GL_TIME_ELAPSED");
    return GL_ARB_timer_query;
  }
  private static Map<Integer, String> GL_NV_internalformat_sample_query;
  private static Map<Integer, String> GL_NV_internalformat_sample_query() {
    if (GL_NV_internalformat_sample_query != null)
      return GL_NV_internalformat_sample_query;
    GL_NV_internalformat_sample_query = new HashMap<Integer, String>(7);
    GL_NV_internalformat_sample_query.put(GL_MULTISAMPLES_NV, "GL_MULTISAMPLES_NV");
    GL_NV_internalformat_sample_query.put(GL_SUPERSAMPLE_SCALE_Y_NV, "GL_SUPERSAMPLE_SCALE_Y_NV");
    GL_NV_internalformat_sample_query.put(GL_TEXTURE_2D_MULTISAMPLE_ARRAY, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY");
    GL_NV_internalformat_sample_query.put(GL_TEXTURE_2D_MULTISAMPLE, "GL_TEXTURE_2D_MULTISAMPLE");
    GL_NV_internalformat_sample_query.put(GL_RENDERBUFFER, "GL_RENDERBUFFER");
    GL_NV_internalformat_sample_query.put(GL_SUPERSAMPLE_SCALE_X_NV, "GL_SUPERSAMPLE_SCALE_X_NV");
    GL_NV_internalformat_sample_query.put(GL_CONFORMANT_NV, "GL_CONFORMANT_NV");
    return GL_NV_internalformat_sample_query;
  }
  private static Map<Integer, String> GL_EXT_point_parameters;
  private static Map<Integer, String> GL_EXT_point_parameters() {
    if (GL_EXT_point_parameters != null)
      return GL_EXT_point_parameters;
    GL_EXT_point_parameters = new HashMap<Integer, String>(4);
    GL_EXT_point_parameters.put(GL_POINT_FADE_THRESHOLD_SIZE_EXT, "GL_POINT_FADE_THRESHOLD_SIZE_EXT");
    GL_EXT_point_parameters.put(GL_DISTANCE_ATTENUATION_EXT, "GL_DISTANCE_ATTENUATION_EXT");
    GL_EXT_point_parameters.put(GL_POINT_SIZE_MIN_EXT, "GL_POINT_SIZE_MIN_EXT");
    GL_EXT_point_parameters.put(GL_POINT_SIZE_MAX_EXT, "GL_POINT_SIZE_MAX_EXT");
    return GL_EXT_point_parameters;
  }
  private static Map<Integer, String> GL_AMD_performance_monitor;
  private static Map<Integer, String> GL_AMD_performance_monitor() {
    if (GL_AMD_performance_monitor != null)
      return GL_AMD_performance_monitor;
    GL_AMD_performance_monitor = new HashMap<Integer, String>(7);
    GL_AMD_performance_monitor.put(GL_PERFMON_RESULT_AVAILABLE_AMD, "GL_PERFMON_RESULT_AVAILABLE_AMD");
    GL_AMD_performance_monitor.put(GL_PERFMON_RESULT_SIZE_AMD, "GL_PERFMON_RESULT_SIZE_AMD");
    GL_AMD_performance_monitor.put(GL_COUNTER_RANGE_AMD, "GL_COUNTER_RANGE_AMD");
    GL_AMD_performance_monitor.put(GL_PERFMON_RESULT_AMD, "GL_PERFMON_RESULT_AMD");
    GL_AMD_performance_monitor.put(GL_PERCENTAGE_AMD, "GL_PERCENTAGE_AMD");
    GL_AMD_performance_monitor.put(GL_UNSIGNED_INT64_AMD, "GL_UNSIGNED_INT64_AMD");
    GL_AMD_performance_monitor.put(GL_COUNTER_TYPE_AMD, "GL_COUNTER_TYPE_AMD");
    return GL_AMD_performance_monitor;
  }
  private static Map<Integer, String> GL_OES_texture_buffer;
  private static Map<Integer, String> GL_OES_texture_buffer() {
    if (GL_OES_texture_buffer != null)
      return GL_OES_texture_buffer;
    GL_OES_texture_buffer = new HashMap<Integer, String>(14);
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES");
    GL_OES_texture_buffer.put(GL_MAX_TEXTURE_BUFFER_SIZE_OES, "GL_MAX_TEXTURE_BUFFER_SIZE_OES");
    GL_OES_texture_buffer.put(GL_INT_SAMPLER_BUFFER_OES, "GL_INT_SAMPLER_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_UNSIGNED_INT_IMAGE_BUFFER_OES, "GL_UNSIGNED_INT_IMAGE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_UNSIGNED_INT_SAMPLER_BUFFER_OES, "GL_UNSIGNED_INT_SAMPLER_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_INT_IMAGE_BUFFER_OES, "GL_INT_IMAGE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_BINDING_OES, "GL_TEXTURE_BUFFER_BINDING_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_OES, "GL_TEXTURE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BINDING_BUFFER_OES, "GL_TEXTURE_BINDING_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_IMAGE_BUFFER_OES, "GL_IMAGE_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_SIZE_OES, "GL_TEXTURE_BUFFER_SIZE_OES");
    GL_OES_texture_buffer.put(GL_SAMPLER_BUFFER_OES, "GL_SAMPLER_BUFFER_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES");
    GL_OES_texture_buffer.put(GL_TEXTURE_BUFFER_OFFSET_OES, "GL_TEXTURE_BUFFER_OFFSET_OES");
    return GL_OES_texture_buffer;
  }
  private static Map<Integer, String> GL_OES_blend_func_separate;
  private static Map<Integer, String> GL_OES_blend_func_separate() {
    if (GL_OES_blend_func_separate != null)
      return GL_OES_blend_func_separate;
    GL_OES_blend_func_separate = new HashMap<Integer, String>(4);
    GL_OES_blend_func_separate.put(GL_BLEND_DST_RGB_OES, "GL_BLEND_DST_RGB_OES");
    GL_OES_blend_func_separate.put(GL_BLEND_SRC_RGB_OES, "GL_BLEND_SRC_RGB_OES");
    GL_OES_blend_func_separate.put(GL_BLEND_SRC_ALPHA_OES, "GL_BLEND_SRC_ALPHA_OES");
    GL_OES_blend_func_separate.put(GL_BLEND_DST_ALPHA_OES, "GL_BLEND_DST_ALPHA_OES");
    return GL_OES_blend_func_separate;
  }
  private static Map<Integer, String> GL_EXT_texture_view;
  private static Map<Integer, String> GL_EXT_texture_view() {
    if (GL_EXT_texture_view != null)
      return GL_EXT_texture_view;
    GL_EXT_texture_view = new HashMap<Integer, String>(5);
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_NUM_LAYERS_EXT, "GL_TEXTURE_VIEW_NUM_LAYERS_EXT");
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_NUM_LEVELS_EXT, "GL_TEXTURE_VIEW_NUM_LEVELS_EXT");
    GL_EXT_texture_view.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_MIN_LAYER_EXT, "GL_TEXTURE_VIEW_MIN_LAYER_EXT");
    GL_EXT_texture_view.put(GL_TEXTURE_VIEW_MIN_LEVEL_EXT, "GL_TEXTURE_VIEW_MIN_LEVEL_EXT");
    return GL_EXT_texture_view;
  }
  private static Map<Integer, String> GL_OES_texture_cube_map;
  private static Map<Integer, String> GL_OES_texture_cube_map() {
    if (GL_OES_texture_cube_map != null)
      return GL_OES_texture_cube_map;
    GL_OES_texture_cube_map = new HashMap<Integer, String>(13);
    GL_OES_texture_cube_map.put(GL_REFLECTION_MAP_OES, "GL_REFLECTION_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES");
    GL_OES_texture_cube_map.put(GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES");
    GL_OES_texture_cube_map.put(GL_NORMAL_MAP_OES, "GL_NORMAL_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_OES, "GL_TEXTURE_CUBE_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_BINDING_CUBE_MAP_OES, "GL_TEXTURE_BINDING_CUBE_MAP_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_GEN_MODE_OES, "GL_TEXTURE_GEN_MODE_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_GEN_STR_OES, "GL_TEXTURE_GEN_STR_OES");
    GL_OES_texture_cube_map.put(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES");
    return GL_OES_texture_cube_map;
  }
  private static Map<Integer, String> GL_EXT_framebuffer_object;
  private static Map<Integer, String> GL_EXT_framebuffer_object() {
    if (GL_EXT_framebuffer_object != null)
      return GL_EXT_framebuffer_object;
    GL_EXT_framebuffer_object = new HashMap<Integer, String>(51);
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX1_EXT, "GL_STENCIL_INDEX1_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_ATTACHMENT_EXT, "GL_STENCIL_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_MAX_RENDERBUFFER_SIZE_EXT, "GL_MAX_RENDERBUFFER_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT5_EXT, "GL_COLOR_ATTACHMENT5_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT10_EXT, "GL_COLOR_ATTACHMENT10_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_STENCIL_SIZE_EXT, "GL_RENDERBUFFER_STENCIL_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_BINDING_EXT, "GL_RENDERBUFFER_BINDING_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT7_EXT, "GL_COLOR_ATTACHMENT7_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT4_EXT, "GL_COLOR_ATTACHMENT4_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_INTERNAL_FORMAT_EXT, "GL_RENDERBUFFER_INTERNAL_FORMAT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_DEPTH_SIZE_EXT, "GL_RENDERBUFFER_DEPTH_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX16_EXT, "GL_STENCIL_INDEX16_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT12_EXT, "GL_COLOR_ATTACHMENT12_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_EXT, "GL_RENDERBUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_BINDING_EXT, "GL_FRAMEBUFFER_BINDING_EXT");
    GL_EXT_framebuffer_object.put(GL_DEPTH_ATTACHMENT_EXT, "GL_DEPTH_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_RED_SIZE_EXT, "GL_RENDERBUFFER_RED_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT11_EXT, "GL_COLOR_ATTACHMENT11_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_EXT, "GL_FRAMEBUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT6_EXT, "GL_COLOR_ATTACHMENT6_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_HEIGHT_EXT, "GL_RENDERBUFFER_HEIGHT_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_ALPHA_SIZE_EXT, "GL_RENDERBUFFER_ALPHA_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT");
    GL_EXT_framebuffer_object.put(GL_MAX_COLOR_ATTACHMENTS_EXT, "GL_MAX_COLOR_ATTACHMENTS_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_UNSUPPORTED_EXT, "GL_FRAMEBUFFER_UNSUPPORTED_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT14_EXT, "GL_COLOR_ATTACHMENT14_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT0_EXT, "GL_COLOR_ATTACHMENT0_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT");
    GL_EXT_framebuffer_object.put(GL_INVALID_FRAMEBUFFER_OPERATION_EXT, "GL_INVALID_FRAMEBUFFER_OPERATION_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_WIDTH_EXT, "GL_RENDERBUFFER_WIDTH_EXT");
    GL_EXT_framebuffer_object.put(GL_FRAMEBUFFER_COMPLETE_EXT, "GL_FRAMEBUFFER_COMPLETE_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_GREEN_SIZE_EXT, "GL_RENDERBUFFER_GREEN_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX8_EXT, "GL_STENCIL_INDEX8_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT13_EXT, "GL_COLOR_ATTACHMENT13_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT3_EXT, "GL_COLOR_ATTACHMENT3_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT8_EXT, "GL_COLOR_ATTACHMENT8_EXT");
    GL_EXT_framebuffer_object.put(GL_STENCIL_INDEX4_EXT, "GL_STENCIL_INDEX4_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT9_EXT, "GL_COLOR_ATTACHMENT9_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT2_EXT, "GL_COLOR_ATTACHMENT2_EXT");
    GL_EXT_framebuffer_object.put(GL_RENDERBUFFER_BLUE_SIZE_EXT, "GL_RENDERBUFFER_BLUE_SIZE_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT1_EXT, "GL_COLOR_ATTACHMENT1_EXT");
    GL_EXT_framebuffer_object.put(GL_COLOR_ATTACHMENT15_EXT, "GL_COLOR_ATTACHMENT15_EXT");
    return GL_EXT_framebuffer_object;
  }
  private static Map<Integer, String> GL_SGIX_polynomial_ffd;
  private static Map<Integer, String> GL_SGIX_polynomial_ffd() {
    if (GL_SGIX_polynomial_ffd != null)
      return GL_SGIX_polynomial_ffd;
    GL_SGIX_polynomial_ffd = new HashMap<Integer, String>(6);
    GL_SGIX_polynomial_ffd.put(GL_TEXTURE_DEFORMATION_SGIX, "GL_TEXTURE_DEFORMATION_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_MAX_DEFORMATION_ORDER_SGIX, "GL_MAX_DEFORMATION_ORDER_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_GEOMETRY_DEFORMATION_SGIX, "GL_GEOMETRY_DEFORMATION_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_TEXTURE_DEFORMATION_BIT_SGIX, "GL_TEXTURE_DEFORMATION_BIT_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_GEOMETRY_DEFORMATION_BIT_SGIX, "GL_GEOMETRY_DEFORMATION_BIT_SGIX");
    GL_SGIX_polynomial_ffd.put(GL_DEFORMATIONS_MASK_SGIX, "GL_DEFORMATIONS_MASK_SGIX");
    return GL_SGIX_polynomial_ffd;
  }
  private static Map<Integer, String> GL_SGIS_point_parameters;
  private static Map<Integer, String> GL_SGIS_point_parameters() {
    if (GL_SGIS_point_parameters != null)
      return GL_SGIS_point_parameters;
    GL_SGIS_point_parameters = new HashMap<Integer, String>(4);
    GL_SGIS_point_parameters.put(GL_POINT_SIZE_MIN_SGIS, "GL_POINT_SIZE_MIN_SGIS");
    GL_SGIS_point_parameters.put(GL_POINT_SIZE_MAX_SGIS, "GL_POINT_SIZE_MAX_SGIS");
    GL_SGIS_point_parameters.put(GL_DISTANCE_ATTENUATION_SGIS, "GL_DISTANCE_ATTENUATION_SGIS");
    GL_SGIS_point_parameters.put(GL_POINT_FADE_THRESHOLD_SIZE_SGIS, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS");
    return GL_SGIS_point_parameters;
  }
  private static Map<Integer, String> GL_EXT_vertex_attrib_64bit;
  private static Map<Integer, String> GL_EXT_vertex_attrib_64bit() {
    if (GL_EXT_vertex_attrib_64bit != null)
      return GL_EXT_vertex_attrib_64bit;
    GL_EXT_vertex_attrib_64bit = new HashMap<Integer, String>(13);
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_VEC2_EXT, "GL_DOUBLE_VEC2_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_VEC4_EXT, "GL_DOUBLE_VEC4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE, "GL_DOUBLE");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT3_EXT, "GL_DOUBLE_MAT3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x3_EXT, "GL_DOUBLE_MAT4x3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x4_EXT, "GL_DOUBLE_MAT2x4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_VEC3_EXT, "GL_DOUBLE_VEC3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x4_EXT, "GL_DOUBLE_MAT3x4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT3x2_EXT, "GL_DOUBLE_MAT3x2_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT4_EXT, "GL_DOUBLE_MAT4_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT2_EXT, "GL_DOUBLE_MAT2_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT2x3_EXT, "GL_DOUBLE_MAT2x3_EXT");
    GL_EXT_vertex_attrib_64bit.put(GL_DOUBLE_MAT4x2_EXT, "GL_DOUBLE_MAT4x2_EXT");
    return GL_EXT_vertex_attrib_64bit;
  }
  private static Map<Integer, String> GL_OES_mapbuffer;
  private static Map<Integer, String> GL_OES_mapbuffer() {
    if (GL_OES_mapbuffer != null)
      return GL_OES_mapbuffer;
    GL_OES_mapbuffer = new HashMap<Integer, String>(4);
    GL_OES_mapbuffer.put(GL_BUFFER_MAP_POINTER_OES, "GL_BUFFER_MAP_POINTER_OES");
    GL_OES_mapbuffer.put(GL_WRITE_ONLY_OES, "GL_WRITE_ONLY_OES");
    GL_OES_mapbuffer.put(GL_BUFFER_MAPPED_OES, "GL_BUFFER_MAPPED_OES");
    GL_OES_mapbuffer.put(GL_BUFFER_ACCESS_OES, "GL_BUFFER_ACCESS_OES");
    return GL_OES_mapbuffer;
  }
  private static Map<Integer, String> GL_SGIS_texture_color_mask;
  private static Map<Integer, String> GL_SGIS_texture_color_mask() {
    if (GL_SGIS_texture_color_mask != null)
      return GL_SGIS_texture_color_mask;
    GL_SGIS_texture_color_mask = new HashMap<Integer, String>(1);
    GL_SGIS_texture_color_mask.put(GL_TEXTURE_COLOR_WRITEMASK_SGIS, "GL_TEXTURE_COLOR_WRITEMASK_SGIS");
    return GL_SGIS_texture_color_mask;
  }
  private static Map<Integer, String> GL_ARB_program_interface_query;
  private static Map<Integer, String> GL_ARB_program_interface_query() {
    if (GL_ARB_program_interface_query != null)
      return GL_ARB_program_interface_query;
    GL_ARB_program_interface_query = new HashMap<Integer, String>(50);
    GL_ARB_program_interface_query.put(GL_COMPUTE_SUBROUTINE_UNIFORM, "GL_COMPUTE_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_MATRIX_STRIDE, "GL_MATRIX_STRIDE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_GEOMETRY_SHADER, "GL_REFERENCED_BY_GEOMETRY_SHADER");
    GL_ARB_program_interface_query.put(GL_SHADER_STORAGE_BLOCK, "GL_SHADER_STORAGE_BLOCK");
    GL_ARB_program_interface_query.put(GL_ACTIVE_VARIABLES, "GL_ACTIVE_VARIABLES");
    GL_ARB_program_interface_query.put(GL_ACTIVE_RESOURCES, "GL_ACTIVE_RESOURCES");
    GL_ARB_program_interface_query.put(GL_ARRAY_STRIDE, "GL_ARRAY_STRIDE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_REFERENCED_BY_TESS_CONTROL_SHADER");
    GL_ARB_program_interface_query.put(GL_MAX_NUM_ACTIVE_VARIABLES, "GL_MAX_NUM_ACTIVE_VARIABLES");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_COMPUTE_SHADER, "GL_REFERENCED_BY_COMPUTE_SHADER");
    GL_ARB_program_interface_query.put(GL_GEOMETRY_SUBROUTINE_UNIFORM, "GL_GEOMETRY_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_BUFFER_VARIABLE, "GL_BUFFER_VARIABLE");
    GL_ARB_program_interface_query.put(GL_UNIFORM_BLOCK, "GL_UNIFORM_BLOCK");
    GL_ARB_program_interface_query.put(GL_OFFSET, "GL_OFFSET");
    GL_ARB_program_interface_query.put(GL_TESS_EVALUATION_SUBROUTINE_UNIFORM, "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_TOP_LEVEL_ARRAY_SIZE, "GL_TOP_LEVEL_ARRAY_SIZE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER");
    GL_ARB_program_interface_query.put(GL_FRAGMENT_SUBROUTINE, "GL_FRAGMENT_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_TRANSFORM_FEEDBACK_VARYING, "GL_TRANSFORM_FEEDBACK_VARYING");
    GL_ARB_program_interface_query.put(GL_MAX_NAME_LENGTH, "GL_MAX_NAME_LENGTH");
    GL_ARB_program_interface_query.put(GL_VERTEX_SUBROUTINE_UNIFORM, "GL_VERTEX_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_TYPE, "GL_TYPE");
    GL_ARB_program_interface_query.put(GL_ARRAY_SIZE, "GL_ARRAY_SIZE");
    GL_ARB_program_interface_query.put(GL_TESS_CONTROL_SUBROUTINE, "GL_TESS_CONTROL_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_VERTEX_SHADER, "GL_REFERENCED_BY_VERTEX_SHADER");
    GL_ARB_program_interface_query.put(GL_NAME_LENGTH, "GL_NAME_LENGTH");
    GL_ARB_program_interface_query.put(GL_BUFFER_BINDING, "GL_BUFFER_BINDING");
    GL_ARB_program_interface_query.put(GL_TOP_LEVEL_ARRAY_STRIDE, "GL_TOP_LEVEL_ARRAY_STRIDE");
    GL_ARB_program_interface_query.put(GL_PROGRAM_OUTPUT, "GL_PROGRAM_OUTPUT");
    GL_ARB_program_interface_query.put(GL_TESS_EVALUATION_SUBROUTINE, "GL_TESS_EVALUATION_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_UNIFORM, "GL_UNIFORM");
    GL_ARB_program_interface_query.put(GL_TESS_CONTROL_SUBROUTINE_UNIFORM, "GL_TESS_CONTROL_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_BUFFER_DATA_SIZE, "GL_BUFFER_DATA_SIZE");
    GL_ARB_program_interface_query.put(GL_NUM_COMPATIBLE_SUBROUTINES, "GL_NUM_COMPATIBLE_SUBROUTINES");
    GL_ARB_program_interface_query.put(GL_COMPUTE_SUBROUTINE, "GL_COMPUTE_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_ATOMIC_COUNTER_BUFFER_INDEX, "GL_ATOMIC_COUNTER_BUFFER_INDEX");
    GL_ARB_program_interface_query.put(GL_BLOCK_INDEX, "GL_BLOCK_INDEX");
    GL_ARB_program_interface_query.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    GL_ARB_program_interface_query.put(GL_LOCATION, "GL_LOCATION");
    GL_ARB_program_interface_query.put(GL_IS_ROW_MAJOR, "GL_IS_ROW_MAJOR");
    GL_ARB_program_interface_query.put(GL_VERTEX_SUBROUTINE, "GL_VERTEX_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_FRAGMENT_SUBROUTINE_UNIFORM, "GL_FRAGMENT_SUBROUTINE_UNIFORM");
    GL_ARB_program_interface_query.put(GL_NUM_ACTIVE_VARIABLES, "GL_NUM_ACTIVE_VARIABLES");
    GL_ARB_program_interface_query.put(GL_COMPATIBLE_SUBROUTINES, "GL_COMPATIBLE_SUBROUTINES");
    GL_ARB_program_interface_query.put(GL_LOCATION_INDEX, "GL_LOCATION_INDEX");
    GL_ARB_program_interface_query.put(GL_MAX_NUM_COMPATIBLE_SUBROUTINES, "GL_MAX_NUM_COMPATIBLE_SUBROUTINES");
    GL_ARB_program_interface_query.put(GL_PROGRAM_INPUT, "GL_PROGRAM_INPUT");
    GL_ARB_program_interface_query.put(GL_IS_PER_PATCH, "GL_IS_PER_PATCH");
    GL_ARB_program_interface_query.put(GL_GEOMETRY_SUBROUTINE, "GL_GEOMETRY_SUBROUTINE");
    GL_ARB_program_interface_query.put(GL_REFERENCED_BY_FRAGMENT_SHADER, "GL_REFERENCED_BY_FRAGMENT_SHADER");
    return GL_ARB_program_interface_query;
  }
  private static Map<Integer, String> GL_ARB_sparse_buffer;
  private static Map<Integer, String> GL_ARB_sparse_buffer() {
    if (GL_ARB_sparse_buffer != null)
      return GL_ARB_sparse_buffer;
    GL_ARB_sparse_buffer = new HashMap<Integer, String>(2);
    GL_ARB_sparse_buffer.put(GL_SPARSE_STORAGE_BIT_ARB, "GL_SPARSE_STORAGE_BIT_ARB");
    GL_ARB_sparse_buffer.put(GL_SPARSE_BUFFER_PAGE_SIZE_ARB, "GL_SPARSE_BUFFER_PAGE_SIZE_ARB");
    return GL_ARB_sparse_buffer;
  }
  private static Map<Integer, String> GL_NV_read_buffer;
  private static Map<Integer, String> GL_NV_read_buffer() {
    if (GL_NV_read_buffer != null)
      return GL_NV_read_buffer;
    GL_NV_read_buffer = new HashMap<Integer, String>(1);
    GL_NV_read_buffer.put(GL_READ_BUFFER_NV, "GL_READ_BUFFER_NV");
    return GL_NV_read_buffer;
  }
  private static Map<Integer, String> GL_NV_vertex_program;
  private static Map<Integer, String> GL_NV_vertex_program() {
    if (GL_NV_vertex_program != null)
      return GL_NV_vertex_program;
    GL_NV_vertex_program = new HashMap<Integer, String>(83);
    GL_NV_vertex_program.put(GL_MATRIX4_NV, "GL_MATRIX4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_NV, "GL_VERTEX_PROGRAM_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_PARAMETER_NV, "GL_PROGRAM_PARAMETER_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY11_NV, "GL_VERTEX_ATTRIB_ARRAY11_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB15_4_NV, "GL_MAP2_VERTEX_ATTRIB15_4_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_SIZE_NV, "GL_ATTRIB_ARRAY_SIZE_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB9_4_NV, "GL_MAP1_VERTEX_ATTRIB9_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB14_4_NV, "GL_MAP1_VERTEX_ATTRIB14_4_NV");
    GL_NV_vertex_program.put(GL_IDENTITY_NV, "GL_IDENTITY_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_POINTER_NV, "GL_ATTRIB_ARRAY_POINTER_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB4_4_NV, "GL_MAP1_VERTEX_ATTRIB4_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_TWO_SIDE_NV, "GL_VERTEX_PROGRAM_TWO_SIDE_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB9_4_NV, "GL_MAP2_VERTEX_ATTRIB9_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY1_NV, "GL_VERTEX_ATTRIB_ARRAY1_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY14_NV, "GL_VERTEX_ATTRIB_ARRAY14_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY9_NV, "GL_VERTEX_ATTRIB_ARRAY9_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB13_4_NV, "GL_MAP1_VERTEX_ATTRIB13_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB8_4_NV, "GL_MAP2_VERTEX_ATTRIB8_4_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_TYPE_NV, "GL_ATTRIB_ARRAY_TYPE_NV");
    GL_NV_vertex_program.put(GL_TRANSPOSE_NV, "GL_TRANSPOSE_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB2_4_NV, "GL_MAP2_VERTEX_ATTRIB2_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB3_4_NV, "GL_MAP1_VERTEX_ATTRIB3_4_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_LENGTH_NV, "GL_PROGRAM_LENGTH_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY5_NV, "GL_VERTEX_ATTRIB_ARRAY5_NV");
    GL_NV_vertex_program.put(GL_MATRIX0_NV, "GL_MATRIX0_NV");
    GL_NV_vertex_program.put(GL_MATRIX3_NV, "GL_MATRIX3_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB11_4_NV, "GL_MAP2_VERTEX_ATTRIB11_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB5_4_NV, "GL_MAP1_VERTEX_ATTRIB5_4_NV");
    GL_NV_vertex_program.put(GL_MATRIX7_NV, "GL_MATRIX7_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB14_4_NV, "GL_MAP2_VERTEX_ATTRIB14_4_NV");
    GL_NV_vertex_program.put(GL_CURRENT_MATRIX_STACK_DEPTH_NV, "GL_CURRENT_MATRIX_STACK_DEPTH_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB2_4_NV, "GL_MAP1_VERTEX_ATTRIB2_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY10_NV, "GL_VERTEX_ATTRIB_ARRAY10_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_POINT_SIZE_NV, "GL_VERTEX_PROGRAM_POINT_SIZE_NV");
    GL_NV_vertex_program.put(GL_CURRENT_MATRIX_NV, "GL_CURRENT_MATRIX_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY2_NV, "GL_VERTEX_ATTRIB_ARRAY2_NV");
    GL_NV_vertex_program.put(GL_MAX_TRACK_MATRICES_NV, "GL_MAX_TRACK_MATRICES_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_ERROR_POSITION_NV, "GL_PROGRAM_ERROR_POSITION_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB3_4_NV, "GL_MAP2_VERTEX_ATTRIB3_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB0_4_NV, "GL_MAP2_VERTEX_ATTRIB0_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_STATE_PROGRAM_NV, "GL_VERTEX_STATE_PROGRAM_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY6_NV, "GL_VERTEX_ATTRIB_ARRAY6_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB8_4_NV, "GL_MAP1_VERTEX_ATTRIB8_4_NV");
    GL_NV_vertex_program.put(GL_INVERSE_TRANSPOSE_NV, "GL_INVERSE_TRANSPOSE_NV");
    GL_NV_vertex_program.put(GL_MATRIX6_NV, "GL_MATRIX6_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_RESIDENT_NV, "GL_PROGRAM_RESIDENT_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB11_4_NV, "GL_MAP1_VERTEX_ATTRIB11_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB1_4_NV, "GL_MAP1_VERTEX_ATTRIB1_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB12_4_NV, "GL_MAP2_VERTEX_ATTRIB12_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY13_NV, "GL_VERTEX_ATTRIB_ARRAY13_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB7_4_NV, "GL_MAP1_VERTEX_ATTRIB7_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB6_4_NV, "GL_MAP2_VERTEX_ATTRIB6_4_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_STRING_NV, "GL_PROGRAM_STRING_NV");
    GL_NV_vertex_program.put(GL_TRACK_MATRIX_TRANSFORM_NV, "GL_TRACK_MATRIX_TRANSFORM_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY3_NV, "GL_VERTEX_ATTRIB_ARRAY3_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB6_4_NV, "GL_MAP1_VERTEX_ATTRIB6_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB5_4_NV, "GL_MAP2_VERTEX_ATTRIB5_4_NV");
    GL_NV_vertex_program.put(GL_MATRIX2_NV, "GL_MATRIX2_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB10_4_NV, "GL_MAP1_VERTEX_ATTRIB10_4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB0_4_NV, "GL_MAP1_VERTEX_ATTRIB0_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY7_NV, "GL_VERTEX_ATTRIB_ARRAY7_NV");
    GL_NV_vertex_program.put(GL_VERTEX_PROGRAM_BINDING_NV, "GL_VERTEX_PROGRAM_BINDING_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB1_4_NV, "GL_MAP2_VERTEX_ATTRIB1_4_NV");
    GL_NV_vertex_program.put(GL_INVERSE_NV, "GL_INVERSE_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB4_4_NV, "GL_MAP2_VERTEX_ATTRIB4_4_NV");
    GL_NV_vertex_program.put(GL_MATRIX5_NV, "GL_MATRIX5_NV");
    GL_NV_vertex_program.put(GL_TRACK_MATRIX_NV, "GL_TRACK_MATRIX_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB7_4_NV, "GL_MAP2_VERTEX_ATTRIB7_4_NV");
    GL_NV_vertex_program.put(GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV, "GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY12_NV, "GL_VERTEX_ATTRIB_ARRAY12_NV");
    GL_NV_vertex_program.put(GL_CURRENT_ATTRIB_NV, "GL_CURRENT_ATTRIB_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY4_NV, "GL_VERTEX_ATTRIB_ARRAY4_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB12_4_NV, "GL_MAP1_VERTEX_ATTRIB12_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY15_NV, "GL_VERTEX_ATTRIB_ARRAY15_NV");
    GL_NV_vertex_program.put(GL_MAP1_VERTEX_ATTRIB15_4_NV, "GL_MAP1_VERTEX_ATTRIB15_4_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB10_4_NV, "GL_MAP2_VERTEX_ATTRIB10_4_NV");
    GL_NV_vertex_program.put(GL_MODELVIEW_PROJECTION_NV, "GL_MODELVIEW_PROJECTION_NV");
    GL_NV_vertex_program.put(GL_ATTRIB_ARRAY_STRIDE_NV, "GL_ATTRIB_ARRAY_STRIDE_NV");
    GL_NV_vertex_program.put(GL_PROGRAM_TARGET_NV, "GL_PROGRAM_TARGET_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY0_NV, "GL_VERTEX_ATTRIB_ARRAY0_NV");
    GL_NV_vertex_program.put(GL_MATRIX1_NV, "GL_MATRIX1_NV");
    GL_NV_vertex_program.put(GL_MAP2_VERTEX_ATTRIB13_4_NV, "GL_MAP2_VERTEX_ATTRIB13_4_NV");
    GL_NV_vertex_program.put(GL_VERTEX_ATTRIB_ARRAY8_NV, "GL_VERTEX_ATTRIB_ARRAY8_NV");
    return GL_NV_vertex_program;
  }
  private static Map<Integer, String> GL_ARB_debug_output;
  private static Map<Integer, String> GL_ARB_debug_output() {
    if (GL_ARB_debug_output != null)
      return GL_ARB_debug_output;
    GL_ARB_debug_output = new HashMap<Integer, String>(22);
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_SHADER_COMPILER_ARB, "GL_DEBUG_SOURCE_SHADER_COMPILER_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_CALLBACK_FUNCTION_ARB, "GL_DEBUG_CALLBACK_FUNCTION_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SEVERITY_MEDIUM_ARB, "GL_DEBUG_SEVERITY_MEDIUM_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB, "GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SEVERITY_HIGH_ARB, "GL_DEBUG_SEVERITY_HIGH_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_ERROR_ARB, "GL_DEBUG_TYPE_ERROR_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_APPLICATION_ARB, "GL_DEBUG_SOURCE_APPLICATION_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_PERFORMANCE_ARB, "GL_DEBUG_TYPE_PERFORMANCE_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_PORTABILITY_ARB, "GL_DEBUG_TYPE_PORTABILITY_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_OTHER_ARB, "GL_DEBUG_TYPE_OTHER_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_API_ARB, "GL_DEBUG_SOURCE_API_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_THIRD_PARTY_ARB, "GL_DEBUG_SOURCE_THIRD_PARTY_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB");
    GL_ARB_debug_output.put(GL_MAX_DEBUG_MESSAGE_LENGTH_ARB, "GL_MAX_DEBUG_MESSAGE_LENGTH_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SEVERITY_LOW_ARB, "GL_DEBUG_SEVERITY_LOW_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_CALLBACK_USER_PARAM_ARB, "GL_DEBUG_CALLBACK_USER_PARAM_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_SOURCE_OTHER_ARB, "GL_DEBUG_SOURCE_OTHER_ARB");
    GL_ARB_debug_output.put(GL_MAX_DEBUG_LOGGED_MESSAGES_ARB, "GL_MAX_DEBUG_LOGGED_MESSAGES_ARB");
    GL_ARB_debug_output.put(GL_DEBUG_LOGGED_MESSAGES_ARB, "GL_DEBUG_LOGGED_MESSAGES_ARB");
    return GL_ARB_debug_output;
  }
  private static Map<Integer, String> GL_EXT_texture_border_clamp;
  private static Map<Integer, String> GL_EXT_texture_border_clamp() {
    if (GL_EXT_texture_border_clamp != null)
      return GL_EXT_texture_border_clamp;
    GL_EXT_texture_border_clamp = new HashMap<Integer, String>(49);
    GL_EXT_texture_border_clamp.put(GL_RGB8I_EXT, "GL_RGB8I_EXT");
    GL_EXT_texture_border_clamp.put(GL_INTENSITY8UI_EXT, "GL_INTENSITY8UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA16I_EXT, "GL_LUMINANCE_ALPHA16I_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGB16UI_EXT, "GL_RGB16UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_GREEN_INTEGER_EXT, "GL_GREEN_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA8I_EXT, "GL_RGBA8I_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA8I_EXT, "GL_ALPHA8I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE8I_EXT, "GL_LUMINANCE8I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE16I_EXT, "GL_LUMINANCE16I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_INTEGER_EXT, "GL_LUMINANCE_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_BLUE_INTEGER_EXT, "GL_BLUE_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA32UI_EXT, "GL_ALPHA32UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE32I_EXT, "GL_LUMINANCE32I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA32I_EXT, "GL_LUMINANCE_ALPHA32I_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA_INTEGER_EXT, "GL_ALPHA_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGB32I_EXT, "GL_RGB32I_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA32I_EXT, "GL_ALPHA32I_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA16I_EXT, "GL_ALPHA16I_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGB16I_EXT, "GL_RGB16I_EXT");
    GL_EXT_texture_border_clamp.put(GL_INTENSITY16UI_EXT, "GL_INTENSITY16UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_BGRA_INTEGER_EXT, "GL_BGRA_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGB8UI_EXT, "GL_RGB8UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE16UI_EXT, "GL_LUMINANCE16UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA32UI_EXT, "GL_RGBA32UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE8UI_EXT, "GL_LUMINANCE8UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_INTENSITY32I_EXT, "GL_INTENSITY32I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA16UI_EXT, "GL_LUMINANCE_ALPHA16UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA8I_EXT, "GL_LUMINANCE_ALPHA8I_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA16UI_EXT, "GL_ALPHA16UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_INTENSITY16I_EXT, "GL_INTENSITY16I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA_INTEGER_EXT, "GL_LUMINANCE_ALPHA_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA16UI_EXT, "GL_RGBA16UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA16I_EXT, "GL_RGBA16I_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE32UI_EXT, "GL_LUMINANCE32UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA32I_EXT, "GL_RGBA32I_EXT");
    GL_EXT_texture_border_clamp.put(GL_INTENSITY32UI_EXT, "GL_INTENSITY32UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA8UI_EXT, "GL_RGBA8UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_ALPHA8UI_EXT, "GL_ALPHA8UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGB32UI_EXT, "GL_RGB32UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA_INTEGER_MODE_EXT, "GL_RGBA_INTEGER_MODE_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA8UI_EXT, "GL_LUMINANCE_ALPHA8UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_RED_INTEGER_EXT, "GL_RED_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_LUMINANCE_ALPHA32UI_EXT, "GL_LUMINANCE_ALPHA32UI_EXT");
    GL_EXT_texture_border_clamp.put(GL_CLAMP_TO_BORDER_EXT, "GL_CLAMP_TO_BORDER_EXT");
    GL_EXT_texture_border_clamp.put(GL_INTENSITY8I_EXT, "GL_INTENSITY8I_EXT");
    GL_EXT_texture_border_clamp.put(GL_BGR_INTEGER_EXT, "GL_BGR_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_TEXTURE_BORDER_COLOR_EXT, "GL_TEXTURE_BORDER_COLOR_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGB_INTEGER_EXT, "GL_RGB_INTEGER_EXT");
    GL_EXT_texture_border_clamp.put(GL_RGBA_INTEGER_EXT, "GL_RGBA_INTEGER_EXT");
    return GL_EXT_texture_border_clamp;
  }
  private static Map<Integer, String> GL_KHR_debug;
  private static Map<Integer, String> GL_KHR_debug() {
    if (GL_KHR_debug != null)
      return GL_KHR_debug;
    GL_KHR_debug = new HashMap<Integer, String>(81);
    GL_KHR_debug.put(GL_DEBUG_SOURCE_APPLICATION_KHR, "GL_DEBUG_SOURCE_APPLICATION_KHR");
    GL_KHR_debug.put(GL_SHADER, "GL_SHADER");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_NOTIFICATION_KHR, "GL_DEBUG_SEVERITY_NOTIFICATION_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM, "GL_DEBUG_SOURCE_WINDOW_SYSTEM");
    GL_KHR_debug.put(GL_DEBUG_TYPE_POP_GROUP, "GL_DEBUG_TYPE_POP_GROUP");
    GL_KHR_debug.put(GL_VERTEX_ARRAY_KHR, "GL_VERTEX_ARRAY_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_ERROR_KHR, "GL_DEBUG_TYPE_ERROR_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_SHADER_COMPILER, "GL_DEBUG_SOURCE_SHADER_COMPILER");
    GL_KHR_debug.put(GL_PROGRAM, "GL_PROGRAM");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_OTHER, "GL_DEBUG_SOURCE_OTHER");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR");
    GL_KHR_debug.put(GL_SHADER_KHR, "GL_SHADER_KHR");
    GL_KHR_debug.put(GL_PROGRAM_KHR, "GL_PROGRAM_KHR");
    GL_KHR_debug.put(GL_MAX_LABEL_LENGTH_KHR, "GL_MAX_LABEL_LENGTH_KHR");
    GL_KHR_debug.put(GL_MAX_DEBUG_LOGGED_MESSAGES_KHR, "GL_MAX_DEBUG_LOGGED_MESSAGES_KHR");
    GL_KHR_debug.put(GL_PROGRAM_PIPELINE, "GL_PROGRAM_PIPELINE");
    GL_KHR_debug.put(GL_STACK_UNDERFLOW_KHR, "GL_STACK_UNDERFLOW_KHR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_FUNCTION_KHR, "GL_DEBUG_CALLBACK_FUNCTION_KHR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_FUNCTION, "GL_DEBUG_CALLBACK_FUNCTION");
    GL_KHR_debug.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT_KHR, "GL_DEBUG_OUTPUT_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PERFORMANCE, "GL_DEBUG_TYPE_PERFORMANCE");
    GL_KHR_debug.put(GL_STACK_UNDERFLOW, "GL_STACK_UNDERFLOW");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PORTABILITY, "GL_DEBUG_TYPE_PORTABILITY");
    GL_KHR_debug.put(GL_DEBUG_TYPE_MARKER_KHR, "GL_DEBUG_TYPE_MARKER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_HIGH_KHR, "GL_DEBUG_SEVERITY_HIGH_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PORTABILITY_KHR, "GL_DEBUG_TYPE_PORTABILITY_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_API_KHR, "GL_DEBUG_SOURCE_API_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PUSH_GROUP, "GL_DEBUG_TYPE_PUSH_GROUP");
    GL_KHR_debug.put(GL_MAX_DEBUG_MESSAGE_LENGTH_KHR, "GL_MAX_DEBUG_MESSAGE_LENGTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT_SYNCHRONOUS, "GL_DEBUG_OUTPUT_SYNCHRONOUS");
    GL_KHR_debug.put(GL_STACK_OVERFLOW_KHR, "GL_STACK_OVERFLOW_KHR");
    GL_KHR_debug.put(GL_VERTEX_ARRAY, "GL_VERTEX_ARRAY");
    GL_KHR_debug.put(GL_MAX_DEBUG_LOGGED_MESSAGES, "GL_MAX_DEBUG_LOGGED_MESSAGES");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_MEDIUM, "GL_DEBUG_SEVERITY_MEDIUM");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_OTHER_KHR, "GL_DEBUG_SOURCE_OTHER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, "GL_DEBUG_SOURCE_THIRD_PARTY_KHR");
    GL_KHR_debug.put(GL_SAMPLER_KHR, "GL_SAMPLER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_NOTIFICATION, "GL_DEBUG_SEVERITY_NOTIFICATION");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_THIRD_PARTY, "GL_DEBUG_SOURCE_THIRD_PARTY");
    GL_KHR_debug.put(GL_BUFFER_KHR, "GL_BUFFER_KHR");
    GL_KHR_debug.put(GL_SAMPLER, "GL_SAMPLER");
    GL_KHR_debug.put(GL_MAX_LABEL_LENGTH, "GL_MAX_LABEL_LENGTH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_MARKER, "GL_DEBUG_TYPE_MARKER");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_MEDIUM_KHR, "GL_DEBUG_SEVERITY_MEDIUM_KHR");
    GL_KHR_debug.put(GL_DISPLAY_LIST, "GL_DISPLAY_LIST");
    GL_KHR_debug.put(GL_DEBUG_GROUP_STACK_DEPTH, "GL_DEBUG_GROUP_STACK_DEPTH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_POP_GROUP_KHR, "GL_DEBUG_TYPE_POP_GROUP_KHR");
    GL_KHR_debug.put(GL_CONTEXT_FLAG_DEBUG_BIT, "GL_CONTEXT_FLAG_DEBUG_BIT");
    GL_KHR_debug.put(GL_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_DEBUG_GROUP_STACK_DEPTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_LOW, "GL_DEBUG_SEVERITY_LOW");
    GL_KHR_debug.put(GL_STACK_OVERFLOW, "GL_STACK_OVERFLOW");
    GL_KHR_debug.put(GL_QUERY_KHR, "GL_QUERY_KHR");
    GL_KHR_debug.put(GL_QUERY, "GL_QUERY");
    GL_KHR_debug.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PERFORMANCE_KHR, "GL_DEBUG_TYPE_PERFORMANCE_KHR");
    GL_KHR_debug.put(GL_DEBUG_LOGGED_MESSAGES_KHR, "GL_DEBUG_LOGGED_MESSAGES_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_LOW_KHR, "GL_DEBUG_SEVERITY_LOW_KHR");
    GL_KHR_debug.put(GL_MAX_DEBUG_MESSAGE_LENGTH, "GL_MAX_DEBUG_MESSAGE_LENGTH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_OTHER_KHR, "GL_DEBUG_TYPE_OTHER_KHR");
    GL_KHR_debug.put(GL_DEBUG_SEVERITY_HIGH, "GL_DEBUG_SEVERITY_HIGH");
    GL_KHR_debug.put(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR, "GL_DEBUG_SOURCE_SHADER_COMPILER_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_PUSH_GROUP_KHR, "GL_DEBUG_TYPE_PUSH_GROUP_KHR");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR, "GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR");
    GL_KHR_debug.put(GL_DEBUG_TYPE_ERROR, "GL_DEBUG_TYPE_ERROR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_USER_PARAM_KHR, "GL_DEBUG_CALLBACK_USER_PARAM_KHR");
    GL_KHR_debug.put(GL_BUFFER, "GL_BUFFER");
    GL_KHR_debug.put(GL_DEBUG_TYPE_OTHER, "GL_DEBUG_TYPE_OTHER");
    GL_KHR_debug.put(GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_API, "GL_DEBUG_SOURCE_API");
    GL_KHR_debug.put(GL_DEBUG_OUTPUT, "GL_DEBUG_OUTPUT");
    GL_KHR_debug.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR, "GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR");
    GL_KHR_debug.put(GL_DEBUG_SOURCE_APPLICATION, "GL_DEBUG_SOURCE_APPLICATION");
    GL_KHR_debug.put(GL_MAX_DEBUG_GROUP_STACK_DEPTH, "GL_MAX_DEBUG_GROUP_STACK_DEPTH");
    GL_KHR_debug.put(GL_DEBUG_LOGGED_MESSAGES, "GL_DEBUG_LOGGED_MESSAGES");
    GL_KHR_debug.put(GL_CONTEXT_FLAG_DEBUG_BIT_KHR, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR");
    GL_KHR_debug.put(GL_PROGRAM_PIPELINE_KHR, "GL_PROGRAM_PIPELINE_KHR");
    GL_KHR_debug.put(GL_DEBUG_CALLBACK_USER_PARAM, "GL_DEBUG_CALLBACK_USER_PARAM");
    return GL_KHR_debug;
  }
  private static Map<Integer, String> GL_NV_vertex_buffer_unified_memory;
  private static Map<Integer, String> GL_NV_vertex_buffer_unified_memory() {
    if (GL_NV_vertex_buffer_unified_memory != null)
      return GL_NV_vertex_buffer_unified_memory;
    GL_NV_vertex_buffer_unified_memory = new HashMap<Integer, String>(25);
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV, "GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_FOG_COORD_ARRAY_ADDRESS_NV, "GL_FOG_COORD_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ARRAY_ADDRESS_NV, "GL_VERTEX_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_INDEX_ARRAY_ADDRESS_NV, "GL_INDEX_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ARRAY_LENGTH_NV, "GL_VERTEX_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV, "GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_DRAW_INDIRECT_ADDRESS_NV, "GL_DRAW_INDIRECT_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_COLOR_ARRAY_ADDRESS_NV, "GL_COLOR_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV, "GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_ELEMENT_ARRAY_ADDRESS_NV, "GL_ELEMENT_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_TEXTURE_COORD_ARRAY_ADDRESS_NV, "GL_TEXTURE_COORD_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_NORMAL_ARRAY_ADDRESS_NV, "GL_NORMAL_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV, "GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_FOG_COORD_ARRAY_LENGTH_NV, "GL_FOG_COORD_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_EDGE_FLAG_ARRAY_LENGTH_NV, "GL_EDGE_FLAG_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_COLOR_ARRAY_LENGTH_NV, "GL_COLOR_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_INDEX_ARRAY_LENGTH_NV, "GL_INDEX_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_ELEMENT_ARRAY_UNIFIED_NV, "GL_ELEMENT_ARRAY_UNIFIED_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_ELEMENT_ARRAY_LENGTH_NV, "GL_ELEMENT_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_NORMAL_ARRAY_LENGTH_NV, "GL_NORMAL_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_TEXTURE_COORD_ARRAY_LENGTH_NV, "GL_TEXTURE_COORD_ARRAY_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_DRAW_INDIRECT_LENGTH_NV, "GL_DRAW_INDIRECT_LENGTH_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_EDGE_FLAG_ARRAY_ADDRESS_NV, "GL_EDGE_FLAG_ARRAY_ADDRESS_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_DRAW_INDIRECT_UNIFIED_NV, "GL_DRAW_INDIRECT_UNIFIED_NV");
    GL_NV_vertex_buffer_unified_memory.put(GL_SECONDARY_COLOR_ARRAY_LENGTH_NV, "GL_SECONDARY_COLOR_ARRAY_LENGTH_NV");
    return GL_NV_vertex_buffer_unified_memory;
  }
  private static Map<Integer, String> GL_NV_framebuffer_multisample_coverage;
  private static Map<Integer, String> GL_NV_framebuffer_multisample_coverage() {
    if (GL_NV_framebuffer_multisample_coverage != null)
      return GL_NV_framebuffer_multisample_coverage;
    GL_NV_framebuffer_multisample_coverage = new HashMap<Integer, String>(4);
    GL_NV_framebuffer_multisample_coverage.put(GL_MULTISAMPLE_COVERAGE_MODES_NV, "GL_MULTISAMPLE_COVERAGE_MODES_NV");
    GL_NV_framebuffer_multisample_coverage.put(GL_RENDERBUFFER_COVERAGE_SAMPLES_NV, "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV");
    GL_NV_framebuffer_multisample_coverage.put(GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV, "GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV");
    GL_NV_framebuffer_multisample_coverage.put(GL_RENDERBUFFER_COLOR_SAMPLES_NV, "GL_RENDERBUFFER_COLOR_SAMPLES_NV");
    return GL_NV_framebuffer_multisample_coverage;
  }
  private static Map<Integer, String> GL_ARB_shader_atomic_counters;
  private static Map<Integer, String> GL_ARB_shader_atomic_counters() {
    if (GL_ARB_shader_atomic_counters != null)
      return GL_ARB_shader_atomic_counters;
    GL_ARB_shader_atomic_counters = new HashMap<Integer, String>(29);
    GL_ARB_shader_atomic_counters.put(GL_MAX_FRAGMENT_ATOMIC_COUNTERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX, "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX");
    GL_ARB_shader_atomic_counters.put(GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS, "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_GEOMETRY_ATOMIC_COUNTERS, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE, "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE");
    GL_ARB_shader_atomic_counters.put(GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS, "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_SIZE, "GL_ATOMIC_COUNTER_BUFFER_SIZE");
    GL_ARB_shader_atomic_counters.put(GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS, "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER, "GL_ATOMIC_COUNTER_BUFFER");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_BINDING, "GL_ATOMIC_COUNTER_BUFFER_BINDING");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS, "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_UNSIGNED_INT_ATOMIC_COUNTER, "GL_UNSIGNED_INT_ATOMIC_COUNTER");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_VERTEX_ATOMIC_COUNTERS, "GL_MAX_VERTEX_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE, "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_START, "GL_ATOMIC_COUNTER_BUFFER_START");
    GL_ARB_shader_atomic_counters.put(GL_MAX_COMBINED_ATOMIC_COUNTERS, "GL_MAX_COMBINED_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS");
    GL_ARB_shader_atomic_counters.put(GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS");
    GL_ARB_shader_atomic_counters.put(GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS");
    return GL_ARB_shader_atomic_counters;
  }
  private static Map<Integer, String> GL_ARB_sparse_texture;
  private static Map<Integer, String> GL_ARB_sparse_texture() {
    if (GL_ARB_sparse_texture != null)
      return GL_ARB_sparse_texture;
    GL_ARB_sparse_texture = new HashMap<Integer, String>(11);
    GL_ARB_sparse_texture.put(GL_TEXTURE_SPARSE_ARB, "GL_TEXTURE_SPARSE_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Z_ARB, "GL_VIRTUAL_PAGE_SIZE_Z_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_INDEX_ARB, "GL_VIRTUAL_PAGE_SIZE_INDEX_ARB");
    GL_ARB_sparse_texture.put(GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB, "GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB");
    GL_ARB_sparse_texture.put(GL_NUM_VIRTUAL_PAGE_SIZES_ARB, "GL_NUM_VIRTUAL_PAGE_SIZES_ARB");
    GL_ARB_sparse_texture.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB");
    GL_ARB_sparse_texture.put(GL_NUM_SPARSE_LEVELS_ARB, "GL_NUM_SPARSE_LEVELS_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_X_ARB, "GL_VIRTUAL_PAGE_SIZE_X_ARB");
    GL_ARB_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Y_ARB, "GL_VIRTUAL_PAGE_SIZE_Y_ARB");
    GL_ARB_sparse_texture.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB");
    GL_ARB_sparse_texture.put(GL_MAX_SPARSE_TEXTURE_SIZE_ARB, "GL_MAX_SPARSE_TEXTURE_SIZE_ARB");
    return GL_ARB_sparse_texture;
  }
  private static Map<Integer, String> GL_ARB_multisample;
  private static Map<Integer, String> GL_ARB_multisample() {
    if (GL_ARB_multisample != null)
      return GL_ARB_multisample;
    GL_ARB_multisample = new HashMap<Integer, String>(9);
    GL_ARB_multisample.put(GL_SAMPLE_COVERAGE_VALUE_ARB, "GL_SAMPLE_COVERAGE_VALUE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_ALPHA_TO_ONE_ARB, "GL_SAMPLE_ALPHA_TO_ONE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_COVERAGE_ARB, "GL_SAMPLE_COVERAGE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_COVERAGE_INVERT_ARB, "GL_SAMPLE_COVERAGE_INVERT_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_BUFFERS_ARB, "GL_SAMPLE_BUFFERS_ARB");
    GL_ARB_multisample.put(GL_SAMPLES_ARB, "GL_SAMPLES_ARB");
    GL_ARB_multisample.put(GL_MULTISAMPLE_BIT_ARB, "GL_MULTISAMPLE_BIT_ARB");
    GL_ARB_multisample.put(GL_MULTISAMPLE_ARB, "GL_MULTISAMPLE_ARB");
    GL_ARB_multisample.put(GL_SAMPLE_ALPHA_TO_COVERAGE_ARB, "GL_SAMPLE_ALPHA_TO_COVERAGE_ARB");
    return GL_ARB_multisample;
  }
  private static Map<Integer, String> GL_QCOM_extended_get;
  private static Map<Integer, String> GL_QCOM_extended_get() {
    if (GL_QCOM_extended_get != null)
      return GL_QCOM_extended_get;
    GL_QCOM_extended_get = new HashMap<Integer, String>(11);
    GL_QCOM_extended_get.put(GL_TEXTURE_TARGET_QCOM, "GL_TEXTURE_TARGET_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_TYPE_QCOM, "GL_TEXTURE_TYPE_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_HEIGHT_QCOM, "GL_TEXTURE_HEIGHT_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_IMAGE_VALID_QCOM, "GL_TEXTURE_IMAGE_VALID_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_OBJECT_VALID_QCOM, "GL_TEXTURE_OBJECT_VALID_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_DEPTH_QCOM, "GL_TEXTURE_DEPTH_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_INTERNAL_FORMAT_QCOM, "GL_TEXTURE_INTERNAL_FORMAT_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_FORMAT_QCOM, "GL_TEXTURE_FORMAT_QCOM");
    GL_QCOM_extended_get.put(GL_STATE_RESTORE, "GL_STATE_RESTORE");
    GL_QCOM_extended_get.put(GL_TEXTURE_WIDTH_QCOM, "GL_TEXTURE_WIDTH_QCOM");
    GL_QCOM_extended_get.put(GL_TEXTURE_NUM_LEVELS_QCOM, "GL_TEXTURE_NUM_LEVELS_QCOM");
    return GL_QCOM_extended_get;
  }
  private static Map<Integer, String> GL_ARB_texture_compression;
  private static Map<Integer, String> GL_ARB_texture_compression() {
    if (GL_ARB_texture_compression != null)
      return GL_ARB_texture_compression;
    GL_ARB_texture_compression = new HashMap<Integer, String>(11);
    GL_ARB_texture_compression.put(GL_COMPRESSED_INTENSITY_ARB, "GL_COMPRESSED_INTENSITY_ARB");
    GL_ARB_texture_compression.put(GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_ALPHA_ARB, "GL_COMPRESSED_ALPHA_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_LUMINANCE_ALPHA_ARB, "GL_COMPRESSED_LUMINANCE_ALPHA_ARB");
    GL_ARB_texture_compression.put(GL_TEXTURE_COMPRESSION_HINT_ARB, "GL_TEXTURE_COMPRESSION_HINT_ARB");
    GL_ARB_texture_compression.put(GL_TEXTURE_COMPRESSED_ARB, "GL_TEXTURE_COMPRESSED_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_RGBA_ARB, "GL_COMPRESSED_RGBA_ARB");
    GL_ARB_texture_compression.put(GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB, "GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_LUMINANCE_ARB, "GL_COMPRESSED_LUMINANCE_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_RGB_ARB, "GL_COMPRESSED_RGB_ARB");
    GL_ARB_texture_compression.put(GL_COMPRESSED_TEXTURE_FORMATS_ARB, "GL_COMPRESSED_TEXTURE_FORMATS_ARB");
    return GL_ARB_texture_compression;
  }
  private static Map<Integer, String> GL_APPLE_object_purgeable;
  private static Map<Integer, String> GL_APPLE_object_purgeable() {
    if (GL_APPLE_object_purgeable != null)
      return GL_APPLE_object_purgeable;
    GL_APPLE_object_purgeable = new HashMap<Integer, String>(6);
    GL_APPLE_object_purgeable.put(GL_VOLATILE_APPLE, "GL_VOLATILE_APPLE");
    GL_APPLE_object_purgeable.put(GL_PURGEABLE_APPLE, "GL_PURGEABLE_APPLE");
    GL_APPLE_object_purgeable.put(GL_RELEASED_APPLE, "GL_RELEASED_APPLE");
    GL_APPLE_object_purgeable.put(GL_UNDEFINED_APPLE, "GL_UNDEFINED_APPLE");
    GL_APPLE_object_purgeable.put(GL_BUFFER_OBJECT_APPLE, "GL_BUFFER_OBJECT_APPLE");
    GL_APPLE_object_purgeable.put(GL_RETAINED_APPLE, "GL_RETAINED_APPLE");
    return GL_APPLE_object_purgeable;
  }
  private static Map<Integer, String> GL_EXT_sparse_texture;
  private static Map<Integer, String> GL_EXT_sparse_texture() {
    if (GL_EXT_sparse_texture != null)
      return GL_EXT_sparse_texture;
    GL_EXT_sparse_texture = new HashMap<Integer, String>(16);
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Z_EXT, "GL_VIRTUAL_PAGE_SIZE_Z_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_CUBE_MAP_ARRAY_OES, "GL_TEXTURE_CUBE_MAP_ARRAY_OES");
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_Y_EXT, "GL_VIRTUAL_PAGE_SIZE_Y_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_CUBE_MAP, "GL_TEXTURE_CUBE_MAP");
    GL_EXT_sparse_texture.put(GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_3D, "GL_TEXTURE_3D");
    GL_EXT_sparse_texture.put(GL_TEXTURE_SPARSE_EXT, "GL_TEXTURE_SPARSE_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_2D, "GL_TEXTURE_2D");
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_INDEX_EXT, "GL_VIRTUAL_PAGE_SIZE_INDEX_EXT");
    GL_EXT_sparse_texture.put(GL_TEXTURE_2D_ARRAY, "GL_TEXTURE_2D_ARRAY");
    GL_EXT_sparse_texture.put(GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT, "GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT");
    GL_EXT_sparse_texture.put(GL_NUM_VIRTUAL_PAGE_SIZES_EXT, "GL_NUM_VIRTUAL_PAGE_SIZES_EXT");
    GL_EXT_sparse_texture.put(GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT");
    GL_EXT_sparse_texture.put(GL_NUM_SPARSE_LEVELS_EXT, "GL_NUM_SPARSE_LEVELS_EXT");
    GL_EXT_sparse_texture.put(GL_VIRTUAL_PAGE_SIZE_X_EXT, "GL_VIRTUAL_PAGE_SIZE_X_EXT");
    GL_EXT_sparse_texture.put(GL_MAX_SPARSE_TEXTURE_SIZE_EXT, "GL_MAX_SPARSE_TEXTURE_SIZE_EXT");
    return GL_EXT_sparse_texture;
  }
  private static Map<Integer, String> GL_EXT_texture_array;
  private static Map<Integer, String> GL_EXT_texture_array() {
    if (GL_EXT_texture_array != null)
      return GL_EXT_texture_array;
    GL_EXT_texture_array = new HashMap<Integer, String>(24);
    GL_EXT_texture_array.put(GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_2D_ARRAY_EXT, "GL_TEXTURE_2D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT");
    GL_EXT_texture_array.put(GL_GEOMETRY_OUTPUT_TYPE_EXT, "GL_GEOMETRY_OUTPUT_TYPE_EXT");
    GL_EXT_texture_array.put(GL_PROXY_TEXTURE_1D_ARRAY_EXT, "GL_PROXY_TEXTURE_1D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_BINDING_1D_ARRAY_EXT, "GL_TEXTURE_BINDING_1D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_PROGRAM_POINT_SIZE_EXT, "GL_PROGRAM_POINT_SIZE_EXT");
    GL_EXT_texture_array.put(GL_MAX_PROGRAM_OUTPUT_VERTICES_NV, "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV");
    GL_EXT_texture_array.put(GL_LINES_ADJACENCY_EXT, "GL_LINES_ADJACENCY_EXT");
    GL_EXT_texture_array.put(GL_GEOMETRY_VERTICES_OUT_EXT, "GL_GEOMETRY_VERTICES_OUT_EXT");
    GL_EXT_texture_array.put(GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT, "GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT");
    GL_EXT_texture_array.put(GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV, "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV");
    GL_EXT_texture_array.put(GL_PROXY_TEXTURE_2D_ARRAY_EXT, "GL_PROXY_TEXTURE_2D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_1D_ARRAY_EXT, "GL_TEXTURE_1D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_TRIANGLES_ADJACENCY_EXT, "GL_TRIANGLES_ADJACENCY_EXT");
    GL_EXT_texture_array.put(GL_TRIANGLE_STRIP_ADJACENCY_EXT, "GL_TRIANGLE_STRIP_ADJACENCY_EXT");
    GL_EXT_texture_array.put(GL_MAX_ARRAY_TEXTURE_LAYERS_EXT, "GL_MAX_ARRAY_TEXTURE_LAYERS_EXT");
    GL_EXT_texture_array.put(GL_TEXTURE_BINDING_2D_ARRAY_EXT, "GL_TEXTURE_BINDING_2D_ARRAY_EXT");
    GL_EXT_texture_array.put(GL_LINE_STRIP_ADJACENCY_EXT, "GL_LINE_STRIP_ADJACENCY_EXT");
    GL_EXT_texture_array.put(GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT");
    GL_EXT_texture_array.put(GL_GEOMETRY_PROGRAM_NV, "GL_GEOMETRY_PROGRAM_NV");
    GL_EXT_texture_array.put(GL_GEOMETRY_INPUT_TYPE_EXT, "GL_GEOMETRY_INPUT_TYPE_EXT");
    return GL_EXT_texture_array;
  }
  private static Map<Integer, String> GL_ARB_vertex_blend;
  private static Map<Integer, String> GL_ARB_vertex_blend() {
    if (GL_ARB_vertex_blend != null)
      return GL_ARB_vertex_blend;
    GL_ARB_vertex_blend = new HashMap<Integer, String>(42);
    GL_ARB_vertex_blend.put(GL_MODELVIEW16_ARB, "GL_MODELVIEW16_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW11_ARB, "GL_MODELVIEW11_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW8_ARB, "GL_MODELVIEW8_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW29_ARB, "GL_MODELVIEW29_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_POINTER_ARB, "GL_WEIGHT_ARRAY_POINTER_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW24_ARB, "GL_MODELVIEW24_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW4_ARB, "GL_MODELVIEW4_ARB");
    GL_ARB_vertex_blend.put(GL_MAX_VERTEX_UNITS_ARB, "GL_MAX_VERTEX_UNITS_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW20_ARB, "GL_MODELVIEW20_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW2_ARB, "GL_MODELVIEW2_ARB");
    GL_ARB_vertex_blend.put(GL_ACTIVE_VERTEX_UNITS_ARB, "GL_ACTIVE_VERTEX_UNITS_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW7_ARB, "GL_MODELVIEW7_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_SUM_UNITY_ARB, "GL_WEIGHT_SUM_UNITY_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW12_ARB, "GL_MODELVIEW12_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW17_ARB, "GL_MODELVIEW17_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW26_ARB, "GL_MODELVIEW26_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW25_ARB, "GL_MODELVIEW25_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW21_ARB, "GL_MODELVIEW21_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_ARB, "GL_WEIGHT_ARRAY_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW3_ARB, "GL_MODELVIEW3_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW22_ARB, "GL_MODELVIEW22_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW30_ARB, "GL_MODELVIEW30_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW27_ARB, "GL_MODELVIEW27_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_STRIDE_ARB, "GL_WEIGHT_ARRAY_STRIDE_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_SIZE_ARB, "GL_WEIGHT_ARRAY_SIZE_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW14_ARB, "GL_MODELVIEW14_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW13_ARB, "GL_MODELVIEW13_ARB");
    GL_ARB_vertex_blend.put(GL_WEIGHT_ARRAY_TYPE_ARB, "GL_WEIGHT_ARRAY_TYPE_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW0_ARB, "GL_MODELVIEW0_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW18_ARB, "GL_MODELVIEW18_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW31_ARB, "GL_MODELVIEW31_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW6_ARB, "GL_MODELVIEW6_ARB");
    GL_ARB_vertex_blend.put(GL_CURRENT_WEIGHT_ARB, "GL_CURRENT_WEIGHT_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW28_ARB, "GL_MODELVIEW28_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW23_ARB, "GL_MODELVIEW23_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW10_ARB, "GL_MODELVIEW10_ARB");
    GL_ARB_vertex_blend.put(GL_VERTEX_BLEND_ARB, "GL_VERTEX_BLEND_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW9_ARB, "GL_MODELVIEW9_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW15_ARB, "GL_MODELVIEW15_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW5_ARB, "GL_MODELVIEW5_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW19_ARB, "GL_MODELVIEW19_ARB");
    GL_ARB_vertex_blend.put(GL_MODELVIEW1_ARB, "GL_MODELVIEW1_ARB");
    return GL_ARB_vertex_blend;
  }
  private static Map<Integer, String> GL_ARB_indirect_parameters;
  private static Map<Integer, String> GL_ARB_indirect_parameters() {
    if (GL_ARB_indirect_parameters != null)
      return GL_ARB_indirect_parameters;
    GL_ARB_indirect_parameters = new HashMap<Integer, String>(2);
    GL_ARB_indirect_parameters.put(GL_PARAMETER_BUFFER_BINDING_ARB, "GL_PARAMETER_BUFFER_BINDING_ARB");
    GL_ARB_indirect_parameters.put(GL_PARAMETER_BUFFER_ARB, "GL_PARAMETER_BUFFER_ARB");
    return GL_ARB_indirect_parameters;
  }
  private static Map<Integer, String> GL_EXT_blend_equation_separate;
  private static Map<Integer, String> GL_EXT_blend_equation_separate() {
    if (GL_EXT_blend_equation_separate != null)
      return GL_EXT_blend_equation_separate;
    GL_EXT_blend_equation_separate = new HashMap<Integer, String>(2);
    GL_EXT_blend_equation_separate.put(GL_BLEND_EQUATION_ALPHA_EXT, "GL_BLEND_EQUATION_ALPHA_EXT");
    GL_EXT_blend_equation_separate.put(GL_BLEND_EQUATION_RGB_EXT, "GL_BLEND_EQUATION_RGB_EXT");
    return GL_EXT_blend_equation_separate;
  }
  private static Map<Integer, String> GL_EXT_framebuffer_blit;
  private static Map<Integer, String> GL_EXT_framebuffer_blit() {
    if (GL_EXT_framebuffer_blit != null)
      return GL_EXT_framebuffer_blit;
    GL_EXT_framebuffer_blit = new HashMap<Integer, String>(4);
    GL_EXT_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_EXT, "GL_DRAW_FRAMEBUFFER_EXT");
    GL_EXT_framebuffer_blit.put(GL_READ_FRAMEBUFFER_EXT, "GL_READ_FRAMEBUFFER_EXT");
    GL_EXT_framebuffer_blit.put(GL_DRAW_FRAMEBUFFER_BINDING_EXT, "GL_DRAW_FRAMEBUFFER_BINDING_EXT");
    GL_EXT_framebuffer_blit.put(GL_READ_FRAMEBUFFER_BINDING_EXT, "GL_READ_FRAMEBUFFER_BINDING_EXT");
    return GL_EXT_framebuffer_blit;
  }
  private static Map<Integer, String> GL_ARB_vertex_shader;
  private static Map<Integer, String> GL_ARB_vertex_shader() {
    if (GL_ARB_vertex_shader != null)
      return GL_ARB_vertex_shader;
    GL_ARB_vertex_shader = new HashMap<Integer, String>(26);
    GL_ARB_vertex_shader.put(GL_MAX_VARYING_FLOATS_ARB, "GL_MAX_VARYING_FLOATS_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_PROGRAM_TWO_SIDE_ARB, "GL_VERTEX_PROGRAM_TWO_SIDE_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT, "GL_FLOAT");
    GL_ARB_vertex_shader.put(GL_CURRENT_VERTEX_ATTRIB_ARB, "GL_CURRENT_VERTEX_ATTRIB_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB, "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB, "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_shader.put(GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB, "GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_VEC2_ARB, "GL_FLOAT_VEC2_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_MAT2_ARB, "GL_FLOAT_MAT2_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_PROGRAM_POINT_SIZE_ARB, "GL_VERTEX_PROGRAM_POINT_SIZE_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB, "GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_SHADER_ARB, "GL_VERTEX_SHADER_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB, "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_VERTEX_ATTRIBS_ARB, "GL_MAX_VERTEX_ATTRIBS_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_TEXTURE_COORDS_ARB, "GL_MAX_TEXTURE_COORDS_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_MAT3_ARB, "GL_FLOAT_MAT3_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_VEC3_ARB, "GL_FLOAT_VEC3_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_shader.put(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_MAT4_ARB, "GL_FLOAT_MAT4_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB");
    GL_ARB_vertex_shader.put(GL_FLOAT_VEC4_ARB, "GL_FLOAT_VEC4_ARB");
    GL_ARB_vertex_shader.put(GL_OBJECT_ACTIVE_ATTRIBUTES_ARB, "GL_OBJECT_ACTIVE_ATTRIBUTES_ARB");
    GL_ARB_vertex_shader.put(GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB, "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB");
    return GL_ARB_vertex_shader;
  }
  private static Map<Integer, String> GL_NV_polygon_mode;
  private static Map<Integer, String> GL_NV_polygon_mode() {
    if (GL_NV_polygon_mode != null)
      return GL_NV_polygon_mode;
    GL_NV_polygon_mode = new HashMap<Integer, String>(6);
    GL_NV_polygon_mode.put(GL_POLYGON_OFFSET_POINT_NV, "GL_POLYGON_OFFSET_POINT_NV");
    GL_NV_polygon_mode.put(GL_POLYGON_MODE_NV, "GL_POLYGON_MODE_NV");
    GL_NV_polygon_mode.put(GL_POLYGON_OFFSET_LINE_NV, "GL_POLYGON_OFFSET_LINE_NV");
    GL_NV_polygon_mode.put(GL_FILL_NV, "GL_FILL_NV");
    GL_NV_polygon_mode.put(GL_POINT_NV, "GL_POINT_NV");
    GL_NV_polygon_mode.put(GL_LINE_NV, "GL_LINE_NV");
    return GL_NV_polygon_mode;
  }
  private static Map<Integer, String> GL_OES_texture_view;
  private static Map<Integer, String> GL_OES_texture_view() {
    if (GL_OES_texture_view != null)
      return GL_OES_texture_view;
    GL_OES_texture_view = new HashMap<Integer, String>(5);
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_MIN_LAYER_OES, "GL_TEXTURE_VIEW_MIN_LAYER_OES");
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_NUM_LAYERS_OES, "GL_TEXTURE_VIEW_NUM_LAYERS_OES");
    GL_OES_texture_view.put(GL_TEXTURE_IMMUTABLE_LEVELS, "GL_TEXTURE_IMMUTABLE_LEVELS");
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_NUM_LEVELS_OES, "GL_TEXTURE_VIEW_NUM_LEVELS_OES");
    GL_OES_texture_view.put(GL_TEXTURE_VIEW_MIN_LEVEL_OES, "GL_TEXTURE_VIEW_MIN_LEVEL_OES");
    return GL_OES_texture_view;
  }
  private static Map<Integer, String> GL_EXT_convolution;
  private static Map<Integer, String> GL_EXT_convolution() {
    if (GL_EXT_convolution != null)
      return GL_EXT_convolution;
    GL_EXT_convolution = new HashMap<Integer, String>(20);
    GL_EXT_convolution.put(GL_CONVOLUTION_FORMAT_EXT, "GL_CONVOLUTION_FORMAT_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_GREEN_BIAS_EXT, "GL_POST_CONVOLUTION_GREEN_BIAS_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_1D_EXT, "GL_CONVOLUTION_1D_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_RED_SCALE_EXT, "GL_POST_CONVOLUTION_RED_SCALE_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_HEIGHT_EXT, "GL_CONVOLUTION_HEIGHT_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_FILTER_SCALE_EXT, "GL_CONVOLUTION_FILTER_SCALE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_ALPHA_SCALE_EXT, "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_BORDER_MODE_EXT, "GL_CONVOLUTION_BORDER_MODE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_GREEN_SCALE_EXT, "GL_POST_CONVOLUTION_GREEN_SCALE_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_FILTER_BIAS_EXT, "GL_CONVOLUTION_FILTER_BIAS_EXT");
    GL_EXT_convolution.put(GL_MAX_CONVOLUTION_WIDTH_EXT, "GL_MAX_CONVOLUTION_WIDTH_EXT");
    GL_EXT_convolution.put(GL_SEPARABLE_2D_EXT, "GL_SEPARABLE_2D_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_BLUE_BIAS_EXT, "GL_POST_CONVOLUTION_BLUE_BIAS_EXT");
    GL_EXT_convolution.put(GL_MAX_CONVOLUTION_HEIGHT_EXT, "GL_MAX_CONVOLUTION_HEIGHT_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_WIDTH_EXT, "GL_CONVOLUTION_WIDTH_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_ALPHA_BIAS_EXT, "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT");
    GL_EXT_convolution.put(GL_REDUCE_EXT, "GL_REDUCE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_BLUE_SCALE_EXT, "GL_POST_CONVOLUTION_BLUE_SCALE_EXT");
    GL_EXT_convolution.put(GL_POST_CONVOLUTION_RED_BIAS_EXT, "GL_POST_CONVOLUTION_RED_BIAS_EXT");
    GL_EXT_convolution.put(GL_CONVOLUTION_2D_EXT, "GL_CONVOLUTION_2D_EXT");
    return GL_EXT_convolution;
  }
  private static Map<Integer, String> GL_ANGLE_instanced_arrays;
  private static Map<Integer, String> GL_ANGLE_instanced_arrays() {
    if (GL_ANGLE_instanced_arrays != null)
      return GL_ANGLE_instanced_arrays;
    GL_ANGLE_instanced_arrays = new HashMap<Integer, String>(1);
    GL_ANGLE_instanced_arrays.put(GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE");
    return GL_ANGLE_instanced_arrays;
  }
  private static Map<Integer, String> GL_EXT_histogram;
  private static Map<Integer, String> GL_EXT_histogram() {
    if (GL_EXT_histogram != null)
      return GL_EXT_histogram;
    GL_EXT_histogram = new HashMap<Integer, String>(14);
    GL_EXT_histogram.put(GL_HISTOGRAM_LUMINANCE_SIZE_EXT, "GL_HISTOGRAM_LUMINANCE_SIZE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_WIDTH_EXT, "GL_HISTOGRAM_WIDTH_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_EXT, "GL_HISTOGRAM_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_BLUE_SIZE_EXT, "GL_HISTOGRAM_BLUE_SIZE_EXT");
    GL_EXT_histogram.put(GL_PROXY_HISTOGRAM_EXT, "GL_PROXY_HISTOGRAM_EXT");
    GL_EXT_histogram.put(GL_MINMAX_SINK_EXT, "GL_MINMAX_SINK_EXT");
    GL_EXT_histogram.put(GL_TABLE_TOO_LARGE_EXT, "GL_TABLE_TOO_LARGE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_RED_SIZE_EXT, "GL_HISTOGRAM_RED_SIZE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_ALPHA_SIZE_EXT, "GL_HISTOGRAM_ALPHA_SIZE_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_FORMAT_EXT, "GL_HISTOGRAM_FORMAT_EXT");
    GL_EXT_histogram.put(GL_MINMAX_FORMAT_EXT, "GL_MINMAX_FORMAT_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_SINK_EXT, "GL_HISTOGRAM_SINK_EXT");
    GL_EXT_histogram.put(GL_HISTOGRAM_GREEN_SIZE_EXT, "GL_HISTOGRAM_GREEN_SIZE_EXT");
    GL_EXT_histogram.put(GL_MINMAX_EXT, "GL_MINMAX_EXT");
    return GL_EXT_histogram;
  }
  private static Map<Integer, String> GL_EXT_light_texture;
  private static Map<Integer, String> GL_EXT_light_texture() {
    if (GL_EXT_light_texture != null)
      return GL_EXT_light_texture;
    GL_EXT_light_texture = new HashMap<Integer, String>(10);
    GL_EXT_light_texture.put(GL_FRAGMENT_DEPTH_EXT, "GL_FRAGMENT_DEPTH_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_APPLICATION_MODE_EXT, "GL_TEXTURE_APPLICATION_MODE_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_MATERIAL_PARAMETER_EXT, "GL_TEXTURE_MATERIAL_PARAMETER_EXT");
    GL_EXT_light_texture.put(GL_FRAGMENT_COLOR_EXT, "GL_FRAGMENT_COLOR_EXT");
    GL_EXT_light_texture.put(GL_ATTENUATION_EXT, "GL_ATTENUATION_EXT");
    GL_EXT_light_texture.put(GL_FRAGMENT_MATERIAL_EXT, "GL_FRAGMENT_MATERIAL_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_LIGHT_EXT, "GL_TEXTURE_LIGHT_EXT");
    GL_EXT_light_texture.put(GL_FRAGMENT_NORMAL_EXT, "GL_FRAGMENT_NORMAL_EXT");
    GL_EXT_light_texture.put(GL_TEXTURE_MATERIAL_FACE_EXT, "GL_TEXTURE_MATERIAL_FACE_EXT");
    GL_EXT_light_texture.put(GL_SHADOW_ATTENUATION_EXT, "GL_SHADOW_ATTENUATION_EXT");
    return GL_EXT_light_texture;
  }
  private static Map<Integer, String> GL_NV_vertex_program4;
  private static Map<Integer, String> GL_NV_vertex_program4() {
    if (GL_NV_vertex_program4 != null)
      return GL_NV_vertex_program4;
    GL_NV_vertex_program4 = new HashMap<Integer, String>(1);
    GL_NV_vertex_program4.put(GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV");
    return GL_NV_vertex_program4;
  }
  private static Map<Integer, String> GL_NV_vdpau_interop;
  private static Map<Integer, String> GL_NV_vdpau_interop() {
    if (GL_NV_vdpau_interop != null)
      return GL_NV_vdpau_interop;
    GL_NV_vdpau_interop = new HashMap<Integer, String>(4);
    GL_NV_vdpau_interop.put(GL_WRITE_DISCARD_NV, "GL_WRITE_DISCARD_NV");
    GL_NV_vdpau_interop.put(GL_SURFACE_MAPPED_NV, "GL_SURFACE_MAPPED_NV");
    GL_NV_vdpau_interop.put(GL_SURFACE_STATE_NV, "GL_SURFACE_STATE_NV");
    GL_NV_vdpau_interop.put(GL_SURFACE_REGISTERED_NV, "GL_SURFACE_REGISTERED_NV");
    return GL_NV_vdpau_interop;
  }
  private static Map<Integer, String> GL_EXT_multisample;
  private static Map<Integer, String> GL_EXT_multisample() {
    if (GL_EXT_multisample != null)
      return GL_EXT_multisample;
    GL_EXT_multisample = new HashMap<Integer, String>(17);
    GL_EXT_multisample.put(GL_4PASS_1_EXT, "GL_4PASS_1_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_ALPHA_TO_MASK_EXT, "GL_SAMPLE_ALPHA_TO_MASK_EXT");
    GL_EXT_multisample.put(GL_2PASS_1_EXT, "GL_2PASS_1_EXT");
    GL_EXT_multisample.put(GL_MULTISAMPLE_BIT_EXT, "GL_MULTISAMPLE_BIT_EXT");
    GL_EXT_multisample.put(GL_4PASS_2_EXT, "GL_4PASS_2_EXT");
    GL_EXT_multisample.put(GL_4PASS_0_EXT, "GL_4PASS_0_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_MASK_VALUE_EXT, "GL_SAMPLE_MASK_VALUE_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_MASK_EXT, "GL_SAMPLE_MASK_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_ALPHA_TO_ONE_EXT, "GL_SAMPLE_ALPHA_TO_ONE_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_MASK_INVERT_EXT, "GL_SAMPLE_MASK_INVERT_EXT");
    GL_EXT_multisample.put(GL_4PASS_3_EXT, "GL_4PASS_3_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_BUFFERS_EXT, "GL_SAMPLE_BUFFERS_EXT");
    GL_EXT_multisample.put(GL_SAMPLE_PATTERN_EXT, "GL_SAMPLE_PATTERN_EXT");
    GL_EXT_multisample.put(GL_2PASS_0_EXT, "GL_2PASS_0_EXT");
    GL_EXT_multisample.put(GL_SAMPLES_EXT, "GL_SAMPLES_EXT");
    GL_EXT_multisample.put(GL_1PASS_EXT, "GL_1PASS_EXT");
    GL_EXT_multisample.put(GL_MULTISAMPLE_EXT, "GL_MULTISAMPLE_EXT");
    return GL_EXT_multisample;
  }
  private static Map<Integer, String> GL_OES_viewport_array;
  private static Map<Integer, String> GL_OES_viewport_array() {
    if (GL_OES_viewport_array != null)
      return GL_OES_viewport_array;
    GL_OES_viewport_array = new HashMap<Integer, String>(8);
    GL_OES_viewport_array.put(GL_SCISSOR_BOX, "GL_SCISSOR_BOX");
    GL_OES_viewport_array.put(GL_DEPTH_RANGE, "GL_DEPTH_RANGE");
    GL_OES_viewport_array.put(GL_VIEWPORT_SUBPIXEL_BITS_OES, "GL_VIEWPORT_SUBPIXEL_BITS_OES");
    GL_OES_viewport_array.put(GL_MAX_VIEWPORTS_OES, "GL_MAX_VIEWPORTS_OES");
    GL_OES_viewport_array.put(GL_VIEWPORT, "GL_VIEWPORT");
    GL_OES_viewport_array.put(GL_VIEWPORT_BOUNDS_RANGE_OES, "GL_VIEWPORT_BOUNDS_RANGE_OES");
    GL_OES_viewport_array.put(GL_SCISSOR_TEST, "GL_SCISSOR_TEST");
    GL_OES_viewport_array.put(GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES");
    return GL_OES_viewport_array;
  }
  private static Map<Integer, String> GL_NV_vertex_attrib_integer_64bit;
  private static Map<Integer, String> GL_NV_vertex_attrib_integer_64bit() {
    if (GL_NV_vertex_attrib_integer_64bit != null)
      return GL_NV_vertex_attrib_integer_64bit;
    GL_NV_vertex_attrib_integer_64bit = new HashMap<Integer, String>(2);
    GL_NV_vertex_attrib_integer_64bit.put(GL_INT64_NV, "GL_INT64_NV");
    GL_NV_vertex_attrib_integer_64bit.put(GL_UNSIGNED_INT64_NV, "GL_UNSIGNED_INT64_NV");
    return GL_NV_vertex_attrib_integer_64bit;
  }
  private static Command glMultiTexImage3DEXT;
  public static Command glMultiTexImage3DEXT() {
    if (glMultiTexImage3DEXT != null)
      return glMultiTexImage3DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexImage3DEXT = cmd;
    return cmd;
  }
  private static Command glCheckFramebufferStatusOES;
  public static Command glCheckFramebufferStatusOES() {
    if (glCheckFramebufferStatusOES != null)
      return glCheckFramebufferStatusOES;
    Command cmd = new Command(1);
    cmd.returnGroup = FramebufferStatus();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_OES_framebuffer_object();
    glCheckFramebufferStatusOES = cmd;
    return cmd;
  }
  private static Command glTextureMaterialEXT;
  public static Command glTextureMaterialEXT() {
    if (glTextureMaterialEXT != null)
      return glTextureMaterialEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("mode", MaterialParameter());
    cmd.extension = GL_EXT_light_texture();
    glTextureMaterialEXT = cmd;
    return cmd;
  }
  private static Command glBufferAddressRangeNV;
  public static Command glBufferAddressRangeNV() {
    if (glBufferAddressRangeNV != null)
      return glBufferAddressRangeNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glBufferAddressRangeNV = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferParameteri;
  public static Command glNamedFramebufferParameteri() {
    if (glNamedFramebufferParameteri != null)
      return glNamedFramebufferParameteri;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FramebufferParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferParameteri = cmd;
    return cmd;
  }
  private static Command glClipPlanex;
  public static Command glClipPlanex() {
    if (glClipPlanex != null)
      return glClipPlanex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glClipPlanex = cmd;
    return cmd;
  }
  private static Command glCopyColorSubTable;
  public static Command glCopyColorSubTable() {
    if (glCopyColorSubTable != null)
      return glCopyColorSubTable;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.extension = GL_ARB_imaging();
    glCopyColorSubTable = cmd;
    return cmd;
  }
  private static Command glNamedBufferData;
  public static Command glNamedBufferData() {
    if (glNamedBufferData != null)
      return glNamedBufferData;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("usage", VertexBufferObjectUsage());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedBufferData = cmd;
    return cmd;
  }
  private static Command glPixelTransformParameteriEXT;
  public static Command glPixelTransformParameteriEXT() {
    if (glPixelTransformParameteriEXT != null)
      return glPixelTransformParameteriEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_pixel_transform();
    glPixelTransformParameteriEXT = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameterI4ivNV;
  public static Command glProgramEnvParameterI4ivNV() {
    if (glProgramEnvParameterI4ivNV != null)
      return glProgramEnvParameterI4ivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramEnvParameterI4ivNV = cmd;
    return cmd;
  }
  private static Command glTexBufferRangeEXT;
  public static Command glTexBufferRangeEXT() {
    if (glTexBufferRangeEXT != null)
      return glTexBufferRangeEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_texture_buffer();
    glTexBufferRangeEXT = cmd;
    return cmd;
  }
  private static Command glGetTextureLevelParameterivEXT;
  public static Command glGetTextureLevelParameterivEXT() {
    if (glGetTextureLevelParameterivEXT != null)
      return glGetTextureLevelParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureLevelParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetQueryBufferObjectiv;
  public static Command glGetQueryBufferObjectiv() {
    if (glGetQueryBufferObjectiv != null)
      return glGetQueryBufferObjectiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetQueryBufferObjectiv = cmd;
    return cmd;
  }
  private static Command glGetImageTransformParameterivHP;
  public static Command glGetImageTransformParameterivHP() {
    if (glGetImageTransformParameterivHP != null)
      return glGetImageTransformParameterivHP;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_HP_image_transform();
    glGetImageTransformParameterivHP = cmd;
    return cmd;
  }
  private static Command glFragmentLightModeliSGIX;
  public static Command glFragmentLightModeliSGIX() {
    if (glFragmentLightModeliSGIX != null)
      return glFragmentLightModeliSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FragmentLightModelParameterSGIX());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightModeliSGIX = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2hNV;
  public static Command glMultiTexCoord2hNV() {
    if (glMultiTexCoord2hNV != null)
      return glMultiTexCoord2hNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord2hNV = cmd;
    return cmd;
  }
  private static Command glVertexStream1svATI;
  public static Command glVertexStream1svATI() {
    if (glVertexStream1svATI != null)
      return glVertexStream1svATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1svATI = cmd;
    return cmd;
  }
  private static Command glImportSemaphoreWin32NameEXT;
  public static Command glImportSemaphoreWin32NameEXT() {
    if (glImportSemaphoreWin32NameEXT != null)
      return glImportSemaphoreWin32NameEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("handleType", ExternalHandleType());
    cmd.extension = GL_EXT_semaphore_win32();
    glImportSemaphoreWin32NameEXT = cmd;
    return cmd;
  }
  private static Command glGetStringi;
  public static Command glGetStringi() {
    if (glGetStringi != null)
      return glGetStringi;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("name", StringName());
    glGetStringi = cmd;
    return cmd;
  }
  private static Command glGetPixelTexGenParameterfvSGIS;
  public static Command glGetPixelTexGenParameterfvSGIS() {
    if (glGetPixelTexGenParameterfvSGIS != null)
      return glGetPixelTexGenParameterfvSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTexGenParameterNameSGIS());
    cmd.extension = GL_SGIS_pixel_texture();
    glGetPixelTexGenParameterfvSGIS = cmd;
    return cmd;
  }
  private static Command glClipControlEXT;
  public static Command glClipControlEXT() {
    if (glClipControlEXT != null)
      return glClipControlEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("origin", _null_());
    cmd.addParam("depth", _null_());
    cmd.extension = GL_EXT_clip_control();
    glClipControlEXT = cmd;
    return cmd;
  }
  private static Command glClipPlanef;
  public static Command glClipPlanef() {
    if (glClipPlanef != null)
      return glClipPlanef;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("p", ClipPlaneName());
    glClipPlanef = cmd;
    return cmd;
  }
  private static Command glGetPathSpacingNV;
  public static Command glGetPathSpacingNV() {
    if (glGetPathSpacingNV != null)
      return glGetPathSpacingNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("pathListMode", PathListMode());
    cmd.addParam("pathNameType", PathElementType());
    cmd.addParam("transformType", PathTransformType());
    cmd.extension = GL_NV_path_rendering();
    glGetPathSpacingNV = cmd;
    return cmd;
  }
  private static Command glClearNamedBufferDataEXT;
  public static Command glClearNamedBufferDataEXT() {
    if (glClearNamedBufferDataEXT != null)
      return glClearNamedBufferDataEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glClearNamedBufferDataEXT = cmd;
    return cmd;
  }
  private static Command glGetnMapfv;
  public static Command glGetnMapfv() {
    if (glGetnMapfv != null)
      return glGetnMapfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", MapQuery());
    glGetnMapfv = cmd;
    return cmd;
  }
  private static Command glMultiTexGenfEXT;
  public static Command glMultiTexGenfEXT() {
    if (glMultiTexGenfEXT != null)
      return glMultiTexGenfEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexGenfEXT = cmd;
    return cmd;
  }
  private static Command glClearTexImageEXT;
  public static Command glClearTexImageEXT() {
    if (glClearTexImageEXT != null)
      return glClearTexImageEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glClearTexImageEXT = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterIivEXT;
  public static Command glGetTextureParameterIivEXT() {
    if (glGetTextureParameterIivEXT != null)
      return glGetTextureParameterIivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glGetMapParameterivNV;
  public static Command glGetMapParameterivNV() {
    if (glGetMapParameterivNV != null)
      return glGetMapParameterivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_evaluators();
    glGetMapParameterivNV = cmd;
    return cmd;
  }
  private static Command glImportMemoryWin32HandleEXT;
  public static Command glImportMemoryWin32HandleEXT() {
    if (glImportMemoryWin32HandleEXT != null)
      return glImportMemoryWin32HandleEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("handleType", ExternalHandleType());
    cmd.extension = GL_EXT_memory_object_win32();
    glImportMemoryWin32HandleEXT = cmd;
    return cmd;
  }
  private static Command glCoverFillPathNV;
  public static Command glCoverFillPathNV() {
    if (glCoverFillPathNV != null)
      return glCoverFillPathNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coverMode", PathCoverMode());
    cmd.extension = GL_NV_path_rendering();
    glCoverFillPathNV = cmd;
    return cmd;
  }
  private static Command glDrawCommandsAddressNV;
  public static Command glDrawCommandsAddressNV() {
    if (glDrawCommandsAddressNV != null)
      return glDrawCommandsAddressNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("primitiveMode", _null_());
    cmd.extension = GL_NV_command_list();
    glDrawCommandsAddressNV = cmd;
    return cmd;
  }
  private static Command glMapBufferARB;
  public static Command glMapBufferARB() {
    if (glMapBufferARB != null)
      return glMapBufferARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("access", BufferAccessARB());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glMapBufferARB = cmd;
    return cmd;
  }
  private static Command glInterleavedArrays;
  public static Command glInterleavedArrays() {
    if (glInterleavedArrays != null)
      return glInterleavedArrays;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("format", InterleavedArrayFormat());
    glInterleavedArrays = cmd;
    return cmd;
  }
  private static Command glGetProgramResourceiv;
  public static Command glGetProgramResourceiv() {
    if (glGetProgramResourceiv != null)
      return glGetProgramResourceiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.addParam("props", _null_());
    cmd.extension = GL_ARB_program_interface_query();
    glGetProgramResourceiv = cmd;
    return cmd;
  }
  private static Command glMemoryObjectParameterivEXT;
  public static Command glMemoryObjectParameterivEXT() {
    if (glMemoryObjectParameterivEXT != null)
      return glMemoryObjectParameterivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", MemoryObjectParameterName());
    cmd.extension = GL_EXT_memory_object();
    glMemoryObjectParameterivEXT = cmd;
    return cmd;
  }
  private static Command glMatrixMode;
  public static Command glMatrixMode() {
    if (glMatrixMode != null)
      return glMatrixMode;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    glMatrixMode = cmd;
    return cmd;
  }
  private static Command glGetColorTableSGI;
  public static Command glGetColorTableSGI() {
    if (glGetColorTableSGI != null)
      return glGetColorTableSGI;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_SGI_color_table();
    glGetColorTableSGI = cmd;
    return cmd;
  }
  private static Command glGetObjectBufferivATI;
  public static Command glGetObjectBufferivATI() {
    if (glGetObjectBufferivATI != null)
      return glGetObjectBufferivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glGetObjectBufferivATI = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTexture3DEXT;
  public static Command glNamedFramebufferTexture3DEXT() {
    if (glNamedFramebufferTexture3DEXT != null)
      return glNamedFramebufferTexture3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferTexture3DEXT = cmd;
    return cmd;
  }
  private static Command glGetnMapdv;
  public static Command glGetnMapdv() {
    if (glGetnMapdv != null)
      return glGetnMapdv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", MapQuery());
    glGetnMapdv = cmd;
    return cmd;
  }
  private static Command glConvolutionFilter1DEXT;
  public static Command glConvolutionFilter1DEXT() {
    if (glConvolutionFilter1DEXT != null)
      return glConvolutionFilter1DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_convolution();
    glConvolutionFilter1DEXT = cmd;
    return cmd;
  }
  private static Command glCopyImageSubDataEXT;
  public static Command glCopyImageSubDataEXT() {
    if (glCopyImageSubDataEXT != null)
      return glCopyImageSubDataEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("srcTarget", CopyBufferSubDataTarget());
    cmd.addParam("dstTarget", CopyBufferSubDataTarget());
    glCopyImageSubDataEXT = cmd;
    return cmd;
  }
  private static Command glGetUniformSubroutineuiv;
  public static Command glGetUniformSubroutineuiv() {
    if (glGetUniformSubroutineuiv != null)
      return glGetUniformSubroutineuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetUniformSubroutineuiv = cmd;
    return cmd;
  }
  private static Command glCompressedTextureImage3DEXT;
  public static Command glCompressedTextureImage3DEXT() {
    if (glCompressedTextureImage3DEXT != null)
      return glCompressedTextureImage3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedTextureImage3DEXT = cmd;
    return cmd;
  }
  private static Command glIsStateNV;
  public static Command glIsStateNV() {
    if (glIsStateNV != null)
      return glIsStateNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_command_list();
    glIsStateNV = cmd;
    return cmd;
  }
  private static Command glSamplerParameterIiv;
  public static Command glSamplerParameterIiv() {
    if (glSamplerParameterIiv != null)
      return glSamplerParameterIiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glSamplerParameterIiv = cmd;
    return cmd;
  }
  private static Command glGetShaderiv;
  public static Command glGetShaderiv() {
    if (glGetShaderiv != null)
      return glGetShaderiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ShaderParameterName());
    glGetShaderiv = cmd;
    return cmd;
  }
  private static Command glVariantPointerEXT;
  public static Command glVariantPointerEXT() {
    if (glVariantPointerEXT != null)
      return glVariantPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glVariantPointerEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x2fvEXT;
  public static Command glProgramUniformMatrix3x2fvEXT() {
    if (glProgramUniformMatrix3x2fvEXT != null)
      return glProgramUniformMatrix3x2fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix3x2fvEXT = cmd;
    return cmd;
  }
  private static Command glGetIntegerui64vNV;
  public static Command glGetIntegerui64vNV() {
    if (glGetIntegerui64vNV != null)
      return glGetIntegerui64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_NV_shader_buffer_load();
    glGetIntegerui64vNV = cmd;
    return cmd;
  }
  private static Command glColorMask;
  public static Command glColorMask() {
    if (glColorMask != null)
      return glColorMask;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("red", Boolean());
    cmd.addParam("green", Boolean());
    cmd.addParam("blue", Boolean());
    cmd.addParam("alpha", Boolean());
    glColorMask = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirect;
  public static Command glMultiDrawElementsIndirect() {
    if (glMultiDrawElementsIndirect != null)
      return glMultiDrawElementsIndirect;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsIndirect = cmd;
    return cmd;
  }
  private static Command glBufferStorageEXT;
  public static Command glBufferStorageEXT() {
    if (glBufferStorageEXT != null)
      return glBufferStorageEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferStorageTarget());
    cmd.addParam("flags", MapBufferUsageMask());
    cmd.extension = GL_EXT_buffer_storage();
    glBufferStorageEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP3ui;
  public static Command glMultiTexCoordP3ui() {
    if (glMultiTexCoordP3ui != null)
      return glMultiTexCoordP3ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP3ui = cmd;
    return cmd;
  }
  private static Command glTexEnviv;
  public static Command glTexEnviv() {
    if (glTexEnviv != null)
      return glTexEnviv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glTexEnviv = cmd;
    return cmd;
  }
  private static Command glGetCompressedTexImage;
  public static Command glGetCompressedTexImage() {
    if (glGetCompressedTexImage != null)
      return glGetCompressedTexImage;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glGetCompressedTexImage = cmd;
    return cmd;
  }
  private static Command glPathGlyphIndexRangeNV;
  public static Command glPathGlyphIndexRangeNV() {
    if (glPathGlyphIndexRangeNV != null)
      return glPathGlyphIndexRangeNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("fontTarget", _null_());
    cmd.addParam("fontStyle", PathFontStyle());
    cmd.extension = GL_NV_path_rendering();
    glPathGlyphIndexRangeNV = cmd;
    return cmd;
  }
  private static Command glProgramParameter4fvNV;
  public static Command glProgramParameter4fvNV() {
    if (glProgramParameter4fvNV != null)
      return glProgramParameter4fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glProgramParameter4fvNV = cmd;
    return cmd;
  }
  private static Command glResetMinmaxEXT;
  public static Command glResetMinmaxEXT() {
    if (glResetMinmaxEXT != null)
      return glResetMinmaxEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.extension = GL_EXT_histogram();
    glResetMinmaxEXT = cmd;
    return cmd;
  }
  private static Command glBindTransformFeedbackNV;
  public static Command glBindTransformFeedbackNV() {
    if (glBindTransformFeedbackNV != null)
      return glBindTransformFeedbackNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_NV_transform_feedback2();
    glBindTransformFeedbackNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3sv;
  public static Command glMultiTexCoord3sv() {
    if (glMultiTexCoord3sv != null)
      return glMultiTexCoord3sv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3sv = cmd;
    return cmd;
  }
  private static Command glPixelTexGenParameteriSGIS;
  public static Command glPixelTexGenParameteriSGIS() {
    if (glPixelTexGenParameteriSGIS != null)
      return glPixelTexGenParameteriSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTexGenParameterNameSGIS());
    cmd.extension = GL_SGIS_pixel_texture();
    glPixelTexGenParameteriSGIS = cmd;
    return cmd;
  }
  private static Command glBeginQuery;
  public static Command glBeginQuery() {
    if (glBeginQuery != null)
      return glBeginQuery;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    glBeginQuery = cmd;
    return cmd;
  }
  private static Command glGetFloati_v;
  public static Command glGetFloati_v() {
    if (glGetFloati_v != null)
      return glGetFloati_v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_ARB_viewport_array();
    glGetFloati_v = cmd;
    return cmd;
  }
  private static Command glBindTexture;
  public static Command glBindTexture() {
    if (glBindTexture != null)
      return glBindTexture;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glBindTexture = cmd;
    return cmd;
  }
  private static Command glIsEnabledi;
  public static Command glIsEnabledi() {
    if (glIsEnabledi != null)
      return glIsEnabledi;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", EnableCap());
    glIsEnabledi = cmd;
    return cmd;
  }
  private static Command glGetDebugMessageLog;
  public static Command glGetDebugMessageLog() {
    if (glGetDebugMessageLog != null)
      return glGetDebugMessageLog;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("sources", DebugSource());
    cmd.addParam("types", DebugType());
    cmd.addParam("severities", DebugSeverity());
    cmd.extension = GL_KHR_debug();
    glGetDebugMessageLog = cmd;
    return cmd;
  }
  private static Command glPointParameterxvOES;
  public static Command glPointParameterxvOES() {
    if (glPointParameterxvOES != null)
      return glPointParameterxvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_OES_fixed_point();
    glPointParameterxvOES = cmd;
    return cmd;
  }
  private static Command glPixelTexGenParameterfvSGIS;
  public static Command glPixelTexGenParameterfvSGIS() {
    if (glPixelTexGenParameterfvSGIS != null)
      return glPixelTexGenParameterfvSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTexGenParameterNameSGIS());
    cmd.extension = GL_SGIS_pixel_texture();
    glPixelTexGenParameterfvSGIS = cmd;
    return cmd;
  }
  private static Command glPathCoordsNV;
  public static Command glPathCoordsNV() {
    if (glPathCoordsNV != null)
      return glPathCoordsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coordType", _null_());
    cmd.extension = GL_NV_path_rendering();
    glPathCoordsNV = cmd;
    return cmd;
  }
  private static Command glGetIntegerIndexedvEXT;
  public static Command glGetIntegerIndexedvEXT() {
    if (glGetIntegerIndexedvEXT != null)
      return glGetIntegerIndexedvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glGetIntegerIndexedvEXT = cmd;
    return cmd;
  }
  private static Command glCheckNamedFramebufferStatus;
  public static Command glCheckNamedFramebufferStatus() {
    if (glCheckNamedFramebufferStatus != null)
      return glCheckNamedFramebufferStatus;
    Command cmd = new Command(1);
    cmd.returnGroup = FramebufferStatus();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_ARB_direct_state_access();
    glCheckNamedFramebufferStatus = cmd;
    return cmd;
  }
  private static Command glMultiTexEnvivEXT;
  public static Command glMultiTexEnvivEXT() {
    if (glMultiTexEnvivEXT != null)
      return glMultiTexEnvivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexEnvivEXT = cmd;
    return cmd;
  }
  private static Command glTestFenceNV;
  public static Command glTestFenceNV() {
    if (glTestFenceNV != null)
      return glTestFenceNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_fence();
    glTestFenceNV = cmd;
    return cmd;
  }
  private static Command glTextureBuffer;
  public static Command glTextureBuffer() {
    if (glTextureBuffer != null)
      return glTextureBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureBuffer = cmd;
    return cmd;
  }
  private static Command glObjectUnpurgeableAPPLE;
  public static Command glObjectUnpurgeableAPPLE() {
    if (glObjectUnpurgeableAPPLE != null)
      return glObjectUnpurgeableAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("objectType", _null_());
    cmd.addParam("option", _null_());
    cmd.extension = GL_APPLE_object_purgeable();
    glObjectUnpurgeableAPPLE = cmd;
    return cmd;
  }
  private static Command glBindVideoCaptureStreamTextureNV;
  public static Command glBindVideoCaptureStreamTextureNV() {
    if (glBindVideoCaptureStreamTextureNV != null)
      return glBindVideoCaptureStreamTextureNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("frame_region", _null_());
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_video_capture();
    glBindVideoCaptureStreamTextureNV = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateINGR;
  public static Command glBlendFuncSeparateINGR() {
    if (glBlendFuncSeparateINGR != null)
      return glBlendFuncSeparateINGR;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("sfactorRGB", BlendingFactor());
    cmd.addParam("dfactorRGB", BlendingFactor());
    cmd.addParam("sfactorAlpha", BlendingFactor());
    cmd.addParam("dfactorAlpha", BlendingFactor());
    glBlendFuncSeparateINGR = cmd;
    return cmd;
  }
  private static Command glIsPathNV;
  public static Command glIsPathNV() {
    if (glIsPathNV != null)
      return glIsPathNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_path_rendering();
    glIsPathNV = cmd;
    return cmd;
  }
  private static Command glGetMemoryObjectParameterivEXT;
  public static Command glGetMemoryObjectParameterivEXT() {
    if (glGetMemoryObjectParameterivEXT != null)
      return glGetMemoryObjectParameterivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", MemoryObjectParameterName());
    cmd.extension = GL_EXT_memory_object();
    glGetMemoryObjectParameterivEXT = cmd;
    return cmd;
  }
  private static Command glMatrixOrthoEXT;
  public static Command glMatrixOrthoEXT() {
    if (glMatrixOrthoEXT != null)
      return glMatrixOrthoEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixOrthoEXT = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsBaseVertexEXT;
  public static Command glMultiDrawElementsBaseVertexEXT() {
    if (glMultiDrawElementsBaseVertexEXT != null)
      return glMultiDrawElementsBaseVertexEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsBaseVertexEXT = cmd;
    return cmd;
  }
  private static Command glGetnMapiv;
  public static Command glGetnMapiv() {
    if (glGetnMapiv != null)
      return glGetnMapiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", MapQuery());
    glGetnMapiv = cmd;
    return cmd;
  }
  private static Command glTexEnvfv;
  public static Command glTexEnvfv() {
    if (glTexEnvfv != null)
      return glTexEnvfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glTexEnvfv = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3dv;
  public static Command glUniformMatrix3dv() {
    if (glUniformMatrix3dv != null)
      return glUniformMatrix3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix3dv = cmd;
    return cmd;
  }
  private static Command glCoverStrokePathNV;
  public static Command glCoverStrokePathNV() {
    if (glCoverStrokePathNV != null)
      return glCoverStrokePathNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coverMode", PathCoverMode());
    cmd.extension = GL_NV_path_rendering();
    glCoverStrokePathNV = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferRenderbuffer;
  public static Command glNamedFramebufferRenderbuffer() {
    if (glNamedFramebufferRenderbuffer != null)
      return glNamedFramebufferRenderbuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("renderbuffertarget", RenderbufferTarget());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferRenderbuffer = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTextureLayerEXT;
  public static Command glNamedFramebufferTextureLayerEXT() {
    if (glNamedFramebufferTextureLayerEXT != null)
      return glNamedFramebufferTextureLayerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferTextureLayerEXT = cmd;
    return cmd;
  }
  private static Command glSecondaryColorP3uiv;
  public static Command glSecondaryColorP3uiv() {
    if (glSecondaryColorP3uiv != null)
      return glSecondaryColorP3uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glSecondaryColorP3uiv = cmd;
    return cmd;
  }
  private static Command glTexStorage1D;
  public static Command glTexStorage1D() {
    if (glTexStorage1D != null)
      return glTexStorage1D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_storage();
    glTexStorage1D = cmd;
    return cmd;
  }
  private static Command glTextureStorageMem3DMultisampleEXT;
  public static Command glTextureStorageMem3DMultisampleEXT() {
    if (glTextureStorageMem3DMultisampleEXT != null)
      return glTextureStorageMem3DMultisampleEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("internalFormat", _null_());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_EXT_memory_object();
    glTextureStorageMem3DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glGetPointerv;
  public static Command glGetPointerv() {
    if (glGetPointerv != null)
      return glGetPointerv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPointervPName());
    cmd.extension = GL_KHR_debug();
    glGetPointerv = cmd;
    return cmd;
  }
  private static Command glCompressedMultiTexSubImage3DEXT;
  public static Command glCompressedMultiTexSubImage3DEXT() {
    if (glCompressedMultiTexSubImage3DEXT != null)
      return glCompressedMultiTexSubImage3DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedMultiTexSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glTexGenxOES;
  public static Command glTexGenxOES() {
    if (glTexGenxOES != null)
      return glTexGenxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_fixed_point();
    glTexGenxOES = cmd;
    return cmd;
  }
  private static Command glMultiTexSubImage1DEXT;
  public static Command glMultiTexSubImage1DEXT() {
    if (glMultiTexSubImage1DEXT != null)
      return glMultiTexSubImage1DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3fv;
  public static Command glUniformMatrix3fv() {
    if (glUniformMatrix3fv != null)
      return glUniformMatrix3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix3fv = cmd;
    return cmd;
  }
  private static Command glTexStorage2D;
  public static Command glTexStorage2D() {
    if (glTexStorage2D != null)
      return glTexStorage2D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_storage();
    glTexStorage2D = cmd;
    return cmd;
  }
  private static Command glEnableClientStateiEXT;
  public static Command glEnableClientStateiEXT() {
    if (glEnableClientStateiEXT != null)
      return glEnableClientStateiEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glEnableClientStateiEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1bvOES;
  public static Command glMultiTexCoord1bvOES() {
    if (glMultiTexCoord1bvOES != null)
      return glMultiTexCoord1bvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord1bvOES = cmd;
    return cmd;
  }
  private static Command glTexStorage3D;
  public static Command glTexStorage3D() {
    if (glTexStorage3D != null)
      return glTexStorage3D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_storage();
    glTexStorage3D = cmd;
    return cmd;
  }
  private static Command glVDPAUSurfaceAccessNV;
  public static Command glVDPAUSurfaceAccessNV() {
    if (glVDPAUSurfaceAccessNV != null)
      return glVDPAUSurfaceAccessNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", _null_());
    cmd.extension = GL_NV_vdpau_interop();
    glVDPAUSurfaceAccessNV = cmd;
    return cmd;
  }
  private static Command glIsMemoryObjectEXT;
  public static Command glIsMemoryObjectEXT() {
    if (glIsMemoryObjectEXT != null)
      return glIsMemoryObjectEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_memory_object();
    glIsMemoryObjectEXT = cmd;
    return cmd;
  }
  private static Command glGetProgramResourceLocationIndexEXT;
  public static Command glGetProgramResourceLocationIndexEXT() {
    if (glGetProgramResourceLocationIndexEXT != null)
      return glGetProgramResourceLocationIndexEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.extension = GL_EXT_blend_func_extended();
    glGetProgramResourceLocationIndexEXT = cmd;
    return cmd;
  }
  private static Command glGetActiveSubroutineUniformiv;
  public static Command glGetActiveSubroutineUniformiv() {
    if (glGetActiveSubroutineUniformiv != null)
      return glGetActiveSubroutineUniformiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.addParam("pname", SubroutineParameterName());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetActiveSubroutineUniformiv = cmd;
    return cmd;
  }
  private static Command glEnableVertexArrayEXT;
  public static Command glEnableVertexArrayEXT() {
    if (glEnableVertexArrayEXT != null)
      return glEnableVertexArrayEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glEnableVertexArrayEXT = cmd;
    return cmd;
  }
  private static Command glFlushPixelDataRangeNV;
  public static Command glFlushPixelDataRangeNV() {
    if (glFlushPixelDataRangeNV != null)
      return glFlushPixelDataRangeNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_pixel_data_range();
    glFlushPixelDataRangeNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3iARB;
  public static Command glMultiTexCoord3iARB() {
    if (glMultiTexCoord3iARB != null)
      return glMultiTexCoord3iARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3iARB = cmd;
    return cmd;
  }
  private static Command glResetMinmax;
  public static Command glResetMinmax() {
    if (glResetMinmax != null)
      return glResetMinmax;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.extension = GL_ARB_imaging();
    glResetMinmax = cmd;
    return cmd;
  }
  private static Command glGetTransformFeedbacki64_v;
  public static Command glGetTransformFeedbacki64_v() {
    if (glGetTransformFeedbacki64_v != null)
      return glGetTransformFeedbacki64_v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TransformFeedbackPName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTransformFeedbacki64_v = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsBaseVertex;
  public static Command glMultiDrawElementsBaseVertex() {
    if (glMultiDrawElementsBaseVertex != null)
      return glMultiDrawElementsBaseVertex;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsBaseVertex = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3x2fv;
  public static Command glUniformMatrix3x2fv() {
    if (glUniformMatrix3x2fv != null)
      return glUniformMatrix3x2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix3x2fv = cmd;
    return cmd;
  }
  private static Command glUseShaderProgramEXT;
  public static Command glUseShaderProgramEXT() {
    if (glUseShaderProgramEXT != null)
      return glUseShaderProgramEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_separate_shader_objects();
    glUseShaderProgramEXT = cmd;
    return cmd;
  }
  private static Command glLightxv;
  public static Command glLightxv() {
    if (glLightxv != null)
      return glLightxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glLightxv = cmd;
    return cmd;
  }
  private static Command glGetColorTableParameteriv;
  public static Command glGetColorTableParameteriv() {
    if (glGetColorTableParameteriv != null)
      return glGetColorTableParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("pname", GetColorTableParameterPNameSGI());
    cmd.extension = GL_ARB_imaging();
    glGetColorTableParameteriv = cmd;
    return cmd;
  }
  private static Command glTexCoordP4ui;
  public static Command glTexCoordP4ui() {
    if (glTexCoordP4ui != null)
      return glTexCoordP4ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP4ui = cmd;
    return cmd;
  }
  private static Command glGetMaterialfv;
  public static Command glGetMaterialfv() {
    if (glGetMaterialfv != null)
      return glGetMaterialfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glGetMaterialfv = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferRenderbufferEXT;
  public static Command glNamedFramebufferRenderbufferEXT() {
    if (glNamedFramebufferRenderbufferEXT != null)
      return glNamedFramebufferRenderbufferEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("renderbuffertarget", RenderbufferTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferRenderbufferEXT = cmd;
    return cmd;
  }
  private static Command glGetActiveUniformBlockiv;
  public static Command glGetActiveUniformBlockiv() {
    if (glGetActiveUniformBlockiv != null)
      return glGetActiveUniformBlockiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", UniformBlockPName());
    cmd.extension = GL_ARB_uniform_buffer_object();
    glGetActiveUniformBlockiv = cmd;
    return cmd;
  }
  private static Command glGetStageIndexNV;
  public static Command glGetStageIndexNV() {
    if (glGetStageIndexNV != null)
      return glGetStageIndexNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_NV_command_list();
    glGetStageIndexNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2fv;
  public static Command glProgramUniformMatrix2fv() {
    if (glProgramUniformMatrix2fv != null)
      return glProgramUniformMatrix2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix2fv = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture1DEXT;
  public static Command glFramebufferTexture1DEXT() {
    if (glFramebufferTexture1DEXT != null)
      return glFramebufferTexture1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glFramebufferTexture1DEXT = cmd;
    return cmd;
  }
  private static Command glUseProgramStagesEXT;
  public static Command glUseProgramStagesEXT() {
    if (glUseProgramStagesEXT != null)
      return glUseProgramStagesEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stages", UseProgramStageMask());
    cmd.extension = GL_EXT_separate_shader_objects();
    glUseProgramStagesEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4svARB;
  public static Command glMultiTexCoord4svARB() {
    if (glMultiTexCoord4svARB != null)
      return glMultiTexCoord4svARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4svARB = cmd;
    return cmd;
  }
  private static Command glGetMapdv;
  public static Command glGetMapdv() {
    if (glGetMapdv != null)
      return glGetMapdv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", GetMapQuery());
    glGetMapdv = cmd;
    return cmd;
  }
  private static Command glTexStorageSparseAMD;
  public static Command glTexStorageSparseAMD() {
    if (glTexStorageSparseAMD != null)
      return glTexStorageSparseAMD;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalFormat", InternalFormat());
    cmd.addParam("flags", TextureStorageMaskAMD());
    cmd.extension = GL_AMD_sparse_texture();
    glTexStorageSparseAMD = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstancedNV;
  public static Command glDrawArraysInstancedNV() {
    if (glDrawArraysInstancedNV != null)
      return glDrawArraysInstancedNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawArraysInstancedNV = cmd;
    return cmd;
  }
  private static Command glTexParameterf;
  public static Command glTexParameterf() {
    if (glTexParameterf != null)
      return glTexParameterf;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    glTexParameterf = cmd;
    return cmd;
  }
  private static Command glGetInteger64vAPPLE;
  public static Command glGetInteger64vAPPLE() {
    if (glGetInteger64vAPPLE != null)
      return glGetInteger64vAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    cmd.extension = GL_APPLE_sync();
    glGetInteger64vAPPLE = cmd;
    return cmd;
  }
  private static Command glMultiTexParameterivEXT;
  public static Command glMultiTexParameterivEXT() {
    if (glMultiTexParameterivEXT != null)
      return glMultiTexParameterivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexParameterivEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x3dvEXT;
  public static Command glProgramUniformMatrix2x3dvEXT() {
    if (glProgramUniformMatrix2x3dvEXT != null)
      return glProgramUniformMatrix2x3dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix2x3dvEXT = cmd;
    return cmd;
  }
  private static Command glGetCombinerOutputParameterfvNV;
  public static Command glGetCombinerOutputParameterfvNV() {
    if (glGetCombinerOutputParameterfvNV != null)
      return glGetCombinerOutputParameterfvNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("portion", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glGetCombinerOutputParameterfvNV = cmd;
    return cmd;
  }
  private static Command glStencilOpSeparateATI;
  public static Command glStencilOpSeparateATI() {
    if (glStencilOpSeparateATI != null)
      return glStencilOpSeparateATI;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("face", StencilFaceDirection());
    cmd.addParam("sfail", StencilOp());
    cmd.addParam("dpfail", StencilOp());
    cmd.addParam("dppass", StencilOp());
    cmd.extension = GL_ATI_separate_stencil();
    glStencilOpSeparateATI = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2dv;
  public static Command glProgramUniformMatrix2dv() {
    if (glProgramUniformMatrix2dv != null)
      return glProgramUniformMatrix2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix2dv = cmd;
    return cmd;
  }
  private static Command glGetMapfv;
  public static Command glGetMapfv() {
    if (glGetMapfv != null)
      return glGetMapfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", GetMapQuery());
    glGetMapfv = cmd;
    return cmd;
  }
  private static Command glVertexStream3sATI;
  public static Command glVertexStream3sATI() {
    if (glVertexStream3sATI != null)
      return glVertexStream3sATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3sATI = cmd;
    return cmd;
  }
  private static Command glTextureStorageMem3DEXT;
  public static Command glTextureStorageMem3DEXT() {
    if (glTextureStorageMem3DEXT != null)
      return glTextureStorageMem3DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalFormat", _null_());
    cmd.extension = GL_EXT_memory_object();
    glTextureStorageMem3DEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x4dvEXT;
  public static Command glProgramUniformMatrix3x4dvEXT() {
    if (glProgramUniformMatrix3x4dvEXT != null)
      return glProgramUniformMatrix3x4dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix3x4dvEXT = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTextureLayer;
  public static Command glNamedFramebufferTextureLayer() {
    if (glNamedFramebufferTextureLayer != null)
      return glNamedFramebufferTextureLayer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferTextureLayer = cmd;
    return cmd;
  }
  private static Command glGetTexFilterFuncSGIS;
  public static Command glGetTexFilterFuncSGIS() {
    if (glGetTexFilterFuncSGIS != null)
      return glGetTexFilterFuncSGIS;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("filter", _null_());
    cmd.extension = GL_SGIS_texture_filter4();
    glGetTexFilterFuncSGIS = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameter4fvARB;
  public static Command glProgramLocalParameter4fvARB() {
    if (glProgramLocalParameter4fvARB != null)
      return glProgramLocalParameter4fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramLocalParameter4fvARB = cmd;
    return cmd;
  }
  private static Command glGetLocalConstantBooleanvEXT;
  public static Command glGetLocalConstantBooleanvEXT() {
    if (glGetLocalConstantBooleanvEXT != null)
      return glGetLocalConstantBooleanvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.addParam("data", Boolean());
    cmd.extension = GL_EXT_vertex_shader();
    glGetLocalConstantBooleanvEXT = cmd;
    return cmd;
  }
  private static Command glTestObjectAPPLE;
  public static Command glTestObjectAPPLE() {
    if (glTestObjectAPPLE != null)
      return glTestObjectAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("object", _null_());
    cmd.extension = GL_APPLE_fence();
    glTestObjectAPPLE = cmd;
    return cmd;
  }
  private static Command glCopyTexImage2DEXT;
  public static Command glCopyTexImage2DEXT() {
    if (glCopyTexImage2DEXT != null)
      return glCopyTexImage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCopyTexImage2DEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream2fATI;
  public static Command glVertexStream2fATI() {
    if (glVertexStream2fATI != null)
      return glVertexStream2fATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2fATI = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseVertexBaseInstanceEXT;
  public static Command glDrawElementsInstancedBaseVertexBaseInstanceEXT() {
    if (glDrawElementsInstancedBaseVertexBaseInstanceEXT != null)
      return glDrawElementsInstancedBaseVertexBaseInstanceEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", PrimitiveType());
    glDrawElementsInstancedBaseVertexBaseInstanceEXT = cmd;
    return cmd;
  }
  private static Command glGetArrayObjectfvATI;
  public static Command glGetArrayObjectfvATI() {
    if (glGetArrayObjectfvATI != null)
      return glGetArrayObjectfvATI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glGetArrayObjectfvATI = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirectEXT;
  public static Command glMultiDrawElementsIndirectEXT() {
    if (glMultiDrawElementsIndirectEXT != null)
      return glMultiDrawElementsIndirectEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsIndirectEXT = cmd;
    return cmd;
  }
  private static Command glProgramParameters4fvNV;
  public static Command glProgramParameters4fvNV() {
    if (glProgramParameters4fvNV != null)
      return glProgramParameters4fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glProgramParameters4fvNV = cmd;
    return cmd;
  }
  private static Command glVertexStream1dATI;
  public static Command glVertexStream1dATI() {
    if (glVertexStream1dATI != null)
      return glVertexStream1dATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1dATI = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1svARB;
  public static Command glMultiTexCoord1svARB() {
    if (glMultiTexCoord1svARB != null)
      return glMultiTexCoord1svARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1svARB = cmd;
    return cmd;
  }
  private static Command glProgramParameteri;
  public static Command glProgramParameteri() {
    if (glProgramParameteri != null)
      return glProgramParameteri;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ProgramParameterPName());
    cmd.extension = GL_ARB_get_program_binary();
    glProgramParameteri = cmd;
    return cmd;
  }
  private static Command glBindFramebufferEXT;
  public static Command glBindFramebufferEXT() {
    if (glBindFramebufferEXT != null)
      return glBindFramebufferEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glBindFramebufferEXT = cmd;
    return cmd;
  }
  private static Command glGetTexParameterIivOES;
  public static Command glGetTexParameterIivOES() {
    if (glGetTexParameterIivOES != null)
      return glGetTexParameterIivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_OES_texture_border_clamp();
    glGetTexParameterIivOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP3uiv;
  public static Command glMultiTexCoordP3uiv() {
    if (glMultiTexCoordP3uiv != null)
      return glMultiTexCoordP3uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP3uiv = cmd;
    return cmd;
  }
  private static Command glClearBufferuiv;
  public static Command glClearBufferuiv() {
    if (glClearBufferuiv != null)
      return glClearBufferuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    glClearBufferuiv = cmd;
    return cmd;
  }
  private static Command glGetBufferPointervARB;
  public static Command glGetBufferPointervARB() {
    if (glGetBufferPointervARB != null)
      return glGetBufferPointervARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glGetBufferPointervARB = cmd;
    return cmd;
  }
  private static Command glSampleMaskSGIS;
  public static Command glSampleMaskSGIS() {
    if (glSampleMaskSGIS != null)
      return glSampleMaskSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("invert", Boolean());
    cmd.extension = GL_SGIS_multisample();
    glSampleMaskSGIS = cmd;
    return cmd;
  }
  private static Command glTexEnvxOES;
  public static Command glTexEnvxOES() {
    if (glTexEnvxOES != null)
      return glTexEnvxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_OES_fixed_point();
    glTexEnvxOES = cmd;
    return cmd;
  }
  private static Command glDebugMessageInsertARB;
  public static Command glDebugMessageInsertARB() {
    if (glDebugMessageInsertARB != null)
      return glDebugMessageInsertARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.addParam("type", DebugType());
    cmd.addParam("severity", DebugSeverity());
    cmd.extension = GL_ARB_debug_output();
    glDebugMessageInsertARB = cmd;
    return cmd;
  }
  private static Command glGetTexBumpParameterivATI;
  public static Command glGetTexBumpParameterivATI() {
    if (glGetTexBumpParameterivATI != null)
      return glGetTexBumpParameterivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_envmap_bumpmap();
    glGetTexBumpParameterivATI = cmd;
    return cmd;
  }
  private static Command glFragmentColorMaterialSGIX;
  public static Command glFragmentColorMaterialSGIX() {
    if (glFragmentColorMaterialSGIX != null)
      return glFragmentColorMaterialSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("mode", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentColorMaterialSGIX = cmd;
    return cmd;
  }
  private static Command glTexParameteri;
  public static Command glTexParameteri() {
    if (glTexParameteri != null)
      return glTexParameteri;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    glTexParameteri = cmd;
    return cmd;
  }
  private static Command glGetDetailTexFuncSGIS;
  public static Command glGetDetailTexFuncSGIS() {
    if (glGetDetailTexFuncSGIS != null)
      return glGetDetailTexFuncSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_SGIS_detail_texture();
    glGetDetailTexFuncSGIS = cmd;
    return cmd;
  }
  private static Command glGetMapiv;
  public static Command glGetMapiv() {
    if (glGetMapiv != null)
      return glGetMapiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", GetMapQuery());
    glGetMapiv = cmd;
    return cmd;
  }
  private static Command glQueryCounterEXT;
  public static Command glQueryCounterEXT() {
    if (glQueryCounterEXT != null)
      return glQueryCounterEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glQueryCounterEXT = cmd;
    return cmd;
  }
  private static Command glMulticastCopyBufferSubDataNV;
  public static Command glMulticastCopyBufferSubDataNV() {
    if (glMulticastCopyBufferSubDataNV != null)
      return glMulticastCopyBufferSubDataNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("writeGpuMask", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastCopyBufferSubDataNV = cmd;
    return cmd;
  }
  private static Command glGetPointervEXT;
  public static Command glGetPointervEXT() {
    if (glGetPointervEXT != null)
      return glGetPointervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPointervPName());
    cmd.extension = GL_EXT_vertex_array();
    glGetPointervEXT = cmd;
    return cmd;
  }
  private static Command glGetDoublev;
  public static Command glGetDoublev() {
    if (glGetDoublev != null)
      return glGetDoublev;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    glGetDoublev = cmd;
    return cmd;
  }
  private static Command glTexParameterx;
  public static Command glTexParameterx() {
    if (glTexParameterx != null)
      return glTexParameterx;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glTexParameterx = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4sv;
  public static Command glMultiTexCoord4sv() {
    if (glMultiTexCoord4sv != null)
      return glMultiTexCoord4sv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4sv = cmd;
    return cmd;
  }
  private static Command glGetMaterialiv;
  public static Command glGetMaterialiv() {
    if (glGetMaterialiv != null)
      return glGetMaterialiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glGetMaterialiv = cmd;
    return cmd;
  }
  private static Command glVideoCaptureStreamParameterdvNV;
  public static Command glVideoCaptureStreamParameterdvNV() {
    if (glVideoCaptureStreamParameterdvNV != null)
      return glVideoCaptureStreamParameterdvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glVideoCaptureStreamParameterdvNV = cmd;
    return cmd;
  }
  private static Command glGetSharpenTexFuncSGIS;
  public static Command glGetSharpenTexFuncSGIS() {
    if (glGetSharpenTexFuncSGIS != null)
      return glGetSharpenTexFuncSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_SGIS_sharpen_texture();
    glGetSharpenTexFuncSGIS = cmd;
    return cmd;
  }
  private static Command glTextureViewOES;
  public static Command glTextureViewOES() {
    if (glTextureViewOES != null)
      return glTextureViewOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_OES_texture_view();
    glTextureViewOES = cmd;
    return cmd;
  }
  private static Command glPixelTransformParameterivEXT;
  public static Command glPixelTransformParameterivEXT() {
    if (glPixelTransformParameterivEXT != null)
      return glPixelTransformParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_pixel_transform();
    glPixelTransformParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetColorTableParameterfv;
  public static Command glGetColorTableParameterfv() {
    if (glGetColorTableParameterfv != null)
      return glGetColorTableParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("pname", GetColorTableParameterPNameSGI());
    cmd.extension = GL_ARB_imaging();
    glGetColorTableParameterfv = cmd;
    return cmd;
  }
  private static Command glGetBufferPointerv;
  public static Command glGetBufferPointerv() {
    if (glGetBufferPointerv != null)
      return glGetBufferPointerv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    glGetBufferPointerv = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameter4dARB;
  public static Command glProgramLocalParameter4dARB() {
    if (glProgramLocalParameter4dARB != null)
      return glProgramLocalParameter4dARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramLocalParameter4dARB = cmd;
    return cmd;
  }
  private static Command glSignalSemaphoreEXT;
  public static Command glSignalSemaphoreEXT() {
    if (glSignalSemaphoreEXT != null)
      return glSignalSemaphoreEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("dstLayouts", TextureLayout());
    cmd.extension = GL_EXT_semaphore();
    glSignalSemaphoreEXT = cmd;
    return cmd;
  }
  private static Command glGetTexGenivOES;
  public static Command glGetTexGenivOES() {
    if (glGetTexGenivOES != null)
      return glGetTexGenivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_texture_cube_map();
    glGetTexGenivOES = cmd;
    return cmd;
  }
  private static Command glTextureParameterfvEXT;
  public static Command glTextureParameterfvEXT() {
    if (glTextureParameterfvEXT != null)
      return glTextureParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glLightx;
  public static Command glLightx() {
    if (glLightx != null)
      return glLightx;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glLightx = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4dv;
  public static Command glMultiTexCoord4dv() {
    if (glMultiTexCoord4dv != null)
      return glMultiTexCoord4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4dv = cmd;
    return cmd;
  }
  private static Command glPresentFrameDualFillNV;
  public static Command glPresentFrameDualFillNV() {
    if (glPresentFrameDualFillNV != null)
      return glPresentFrameDualFillNV;
    Command cmd = new Command(5);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.addParam("target0", _null_());
    cmd.addParam("target1", _null_());
    cmd.addParam("target2", _null_());
    cmd.addParam("target3", _null_());
    cmd.extension = GL_NV_present_video();
    glPresentFrameDualFillNV = cmd;
    return cmd;
  }
  private static Command glGetMinmaxParameterivEXT;
  public static Command glGetMinmaxParameterivEXT() {
    if (glGetMinmaxParameterivEXT != null)
      return glGetMinmaxParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("pname", GetMinmaxParameterPNameEXT());
    cmd.extension = GL_EXT_histogram();
    glGetMinmaxParameterivEXT = cmd;
    return cmd;
  }
  private static Command glBindBufferRange;
  public static Command glBindBufferRange() {
    if (glBindBufferRange != null)
      return glBindBufferRange;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_uniform_buffer_object();
    glBindBufferRange = cmd;
    return cmd;
  }
  private static Command glCombinerParameterfvNV;
  public static Command glCombinerParameterfvNV() {
    if (glCombinerParameterfvNV != null)
      return glCombinerParameterfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glCombinerParameterfvNV = cmd;
    return cmd;
  }
  private static Command glPathSubCoordsNV;
  public static Command glPathSubCoordsNV() {
    if (glPathSubCoordsNV != null)
      return glPathSubCoordsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coordType", _null_());
    cmd.extension = GL_NV_path_rendering();
    glPathSubCoordsNV = cmd;
    return cmd;
  }
  private static Command glVertexStream3fvATI;
  public static Command glVertexStream3fvATI() {
    if (glVertexStream3fvATI != null)
      return glVertexStream3fvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3fvATI = cmd;
    return cmd;
  }
  private static Command glLightf;
  public static Command glLightf() {
    if (glLightf != null)
      return glLightf;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glLightf = cmd;
    return cmd;
  }
  private static Command glGetPixelTransformParameterivEXT;
  public static Command glGetPixelTransformParameterivEXT() {
    if (glGetPixelTransformParameterivEXT != null)
      return glGetPixelTransformParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_pixel_transform();
    glGetPixelTransformParameterivEXT = cmd;
    return cmd;
  }
  private static Command glLighti;
  public static Command glLighti() {
    if (glLighti != null)
      return glLighti;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glLighti = cmd;
    return cmd;
  }
  private static Command glQueryObjectParameteruiAMD;
  public static Command glQueryObjectParameteruiAMD() {
    if (glQueryObjectParameteruiAMD != null)
      return glQueryObjectParameteruiAMD;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_AMD_occlusion_query_event();
    glQueryObjectParameteruiAMD = cmd;
    return cmd;
  }
  private static Command glBlendEquationiEXT;
  public static Command glBlendEquationiEXT() {
    if (glBlendEquationiEXT != null)
      return glBlendEquationiEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glBlendEquationiEXT = cmd;
    return cmd;
  }
  private static Command glDebugMessageControlKHR;
  public static Command glDebugMessageControlKHR() {
    if (glDebugMessageControlKHR != null)
      return glDebugMessageControlKHR;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.addParam("type", DebugType());
    cmd.addParam("severity", DebugSeverity());
    cmd.addParam("enabled", Boolean());
    cmd.extension = GL_KHR_debug();
    glDebugMessageControlKHR = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexAttribIFormatEXT;
  public static Command glVertexArrayVertexAttribIFormatEXT() {
    if (glVertexArrayVertexAttribIFormatEXT != null)
      return glVertexArrayVertexAttribIFormatEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexAttribIFormatEXT = cmd;
    return cmd;
  }
  private static Command glTextureImage3DMultisampleCoverageNV;
  public static Command glTextureImage3DMultisampleCoverageNV() {
    if (glTextureImage3DMultisampleCoverageNV != null)
      return glTextureImage3DMultisampleCoverageNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_NV_texture_multisample();
    glTextureImage3DMultisampleCoverageNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3ivARB;
  public static Command glMultiTexCoord3ivARB() {
    if (glMultiTexCoord3ivARB != null)
      return glMultiTexCoord3ivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3ivARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4fv;
  public static Command glMultiTexCoord4fv() {
    if (glMultiTexCoord4fv != null)
      return glMultiTexCoord4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4fv = cmd;
    return cmd;
  }
  private static Command glGetBufferParameteri64v;
  public static Command glGetBufferParameteri64v() {
    if (glGetBufferParameteri64v != null)
      return glGetBufferParameteri64v;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    glGetBufferParameteri64v = cmd;
    return cmd;
  }
  private static Command glTextureColorMaskSGIS;
  public static Command glTextureColorMaskSGIS() {
    if (glTextureColorMaskSGIS != null)
      return glTextureColorMaskSGIS;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("red", Boolean());
    cmd.addParam("green", Boolean());
    cmd.addParam("blue", Boolean());
    cmd.addParam("alpha", Boolean());
    cmd.extension = GL_SGIS_texture_color_mask();
    glTextureColorMaskSGIS = cmd;
    return cmd;
  }
  private static Command glGetListParameterivSGIX;
  public static Command glGetListParameterivSGIX() {
    if (glGetListParameterivSGIX != null)
      return glGetListParameterivSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ListParameterName());
    cmd.extension = GL_SGIX_list_priority();
    glGetListParameterivSGIX = cmd;
    return cmd;
  }
  private static Command glVertexArrayColorOffsetEXT;
  public static Command glVertexArrayColorOffsetEXT() {
    if (glVertexArrayColorOffsetEXT != null)
      return glVertexArrayColorOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayColorOffsetEXT = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateEXT;
  public static Command glBlendFuncSeparateEXT() {
    if (glBlendFuncSeparateEXT != null)
      return glBlendFuncSeparateEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("sfactorRGB", BlendingFactor());
    cmd.addParam("dfactorRGB", BlendingFactor());
    cmd.addParam("sfactorAlpha", BlendingFactor());
    cmd.addParam("dfactorAlpha", BlendingFactor());
    cmd.extension = GL_EXT_blend_func_separate();
    glBlendFuncSeparateEXT = cmd;
    return cmd;
  }
  private static Command glDebugMessageInsertAMD;
  public static Command glDebugMessageInsertAMD() {
    if (glDebugMessageInsertAMD != null)
      return glDebugMessageInsertAMD;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("category", _null_());
    cmd.addParam("severity", DebugSeverity());
    cmd.extension = GL_AMD_debug_output();
    glDebugMessageInsertAMD = cmd;
    return cmd;
  }
  private static Command glBeginConditionalRenderNV;
  public static Command glBeginConditionalRenderNV() {
    if (glBeginConditionalRenderNV != null)
      return glBeginConditionalRenderNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", TypeEnum());
    cmd.extension = GL_NV_conditional_render();
    glBeginConditionalRenderNV = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirectCount;
  public static Command glMultiDrawArraysIndirectCount() {
    if (glMultiDrawArraysIndirectCount != null)
      return glMultiDrawArraysIndirectCount;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysIndirectCount = cmd;
    return cmd;
  }
  private static Command glPushClientAttrib;
  public static Command glPushClientAttrib() {
    if (glPushClientAttrib != null)
      return glPushClientAttrib;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClientAttribMask());
    glPushClientAttrib = cmd;
    return cmd;
  }
  private static Command glStencilOpValueAMD;
  public static Command glStencilOpValueAMD() {
    if (glStencilOpValueAMD != null)
      return glStencilOpValueAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("face", StencilFaceDirection());
    cmd.extension = GL_AMD_stencil_operation_extended();
    glStencilOpValueAMD = cmd;
    return cmd;
  }
  private static Command glNamedBufferPageCommitmentARB;
  public static Command glNamedBufferPageCommitmentARB() {
    if (glNamedBufferPageCommitmentARB != null)
      return glNamedBufferPageCommitmentARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("commit", Boolean());
    cmd.extension = GL_ARB_sparse_buffer();
    glNamedBufferPageCommitmentARB = cmd;
    return cmd;
  }
  private static Command glMultiTexGeniEXT;
  public static Command glMultiTexGeniEXT() {
    if (glMultiTexGeniEXT != null)
      return glMultiTexGeniEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexGeniEXT = cmd;
    return cmd;
  }
  private static Command glTexBufferOES;
  public static Command glTexBufferOES() {
    if (glTexBufferOES != null)
      return glTexBufferOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_OES_texture_buffer();
    glTexBufferOES = cmd;
    return cmd;
  }
  private static Command glEvalMapsNV;
  public static Command glEvalMapsNV() {
    if (glEvalMapsNV != null)
      return glEvalMapsNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("mode", _null_());
    cmd.extension = GL_NV_evaluators();
    glEvalMapsNV = cmd;
    return cmd;
  }
  private static Command glMulticastBufferSubDataNV;
  public static Command glMulticastBufferSubDataNV() {
    if (glMulticastBufferSubDataNV != null)
      return glMulticastBufferSubDataNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("gpuMask", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastBufferSubDataNV = cmd;
    return cmd;
  }
  private static Command glMatrixScalefEXT;
  public static Command glMatrixScalefEXT() {
    if (glMatrixScalefEXT != null)
      return glMatrixScalefEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixScalefEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4iv;
  public static Command glMultiTexCoord4iv() {
    if (glMultiTexCoord4iv != null)
      return glMultiTexCoord4iv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4iv = cmd;
    return cmd;
  }
  private static Command glGetProgramStageiv;
  public static Command glGetProgramStageiv() {
    if (glGetProgramStageiv != null)
      return glGetProgramStageiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.addParam("pname", ProgramStagePName());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetProgramStageiv = cmd;
    return cmd;
  }
  private static Command glGetnCompressedTexImageARB;
  public static Command glGetnCompressedTexImageARB() {
    if (glGetnCompressedTexImageARB != null)
      return glGetnCompressedTexImageARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_ARB_robustness();
    glGetnCompressedTexImageARB = cmd;
    return cmd;
  }
  private static Command glLGPUNamedBufferSubDataNVX;
  public static Command glLGPUNamedBufferSubDataNVX() {
    if (glLGPUNamedBufferSubDataNVX != null)
      return glLGPUNamedBufferSubDataNVX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("gpuMask", _null_());
    cmd.extension = GL_NVX_linked_gpu_multicast();
    glLGPUNamedBufferSubDataNVX = cmd;
    return cmd;
  }
  private static Command glGetLocalConstantIntegervEXT;
  public static Command glGetLocalConstantIntegervEXT() {
    if (glGetLocalConstantIntegervEXT != null)
      return glGetLocalConstantIntegervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetLocalConstantIntegervEXT = cmd;
    return cmd;
  }
  private static Command glTextureSubImage3D;
  public static Command glTextureSubImage3D() {
    if (glTextureSubImage3D != null)
      return glTextureSubImage3D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureSubImage3D = cmd;
    return cmd;
  }
  private static Command glClearTexImage;
  public static Command glClearTexImage() {
    if (glClearTexImage != null)
      return glClearTexImage;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_clear_texture();
    glClearTexImage = cmd;
    return cmd;
  }
  private static Command glEdgeFlag;
  public static Command glEdgeFlag() {
    if (glEdgeFlag != null)
      return glEdgeFlag;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flag", Boolean());
    glEdgeFlag = cmd;
    return cmd;
  }
  private static Command glGetMultiTexParameterivEXT;
  public static Command glGetMultiTexParameterivEXT() {
    if (glGetMultiTexParameterivEXT != null)
      return glGetMultiTexParameterivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexParameterivEXT = cmd;
    return cmd;
  }
  private static Command glMaterialxOES;
  public static Command glMaterialxOES() {
    if (glMaterialxOES != null)
      return glMaterialxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_OES_fixed_point();
    glMaterialxOES = cmd;
    return cmd;
  }
  private static Command glTextureSubImage2D;
  public static Command glTextureSubImage2D() {
    if (glTextureSubImage2D != null)
      return glTextureSubImage2D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureSubImage2D = cmd;
    return cmd;
  }
  private static Command glDebugMessageControl;
  public static Command glDebugMessageControl() {
    if (glDebugMessageControl != null)
      return glDebugMessageControl;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.addParam("type", DebugType());
    cmd.addParam("severity", DebugSeverity());
    cmd.addParam("enabled", Boolean());
    cmd.extension = GL_KHR_debug();
    glDebugMessageControl = cmd;
    return cmd;
  }
  private static Command glArrayObjectATI;
  public static Command glArrayObjectATI() {
    if (glArrayObjectATI != null)
      return glArrayObjectATI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.addParam("type", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glArrayObjectATI = cmd;
    return cmd;
  }
  private static Command glGetColorTable;
  public static Command glGetColorTable() {
    if (glGetColorTable != null)
      return glGetColorTable;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glGetColorTable = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisampleAPPLE;
  public static Command glRenderbufferStorageMultisampleAPPLE() {
    if (glRenderbufferStorageMultisampleAPPLE != null)
      return glRenderbufferStorageMultisampleAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_APPLE_framebuffer_multisample();
    glRenderbufferStorageMultisampleAPPLE = cmd;
    return cmd;
  }
  private static Command glIsProgramARB;
  public static Command glIsProgramARB() {
    if (glIsProgramARB != null)
      return glIsProgramARB;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_fragment_program();
    glIsProgramARB = cmd;
    return cmd;
  }
  private static Command glBlitFramebufferEXT;
  public static Command glBlitFramebufferEXT() {
    if (glBlitFramebufferEXT != null)
      return glBlitFramebufferEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    cmd.addParam("filter", BlitFramebufferFilter());
    cmd.extension = GL_EXT_framebuffer_blit();
    glBlitFramebufferEXT = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameterI4iNV;
  public static Command glProgramEnvParameterI4iNV() {
    if (glProgramEnvParameterI4iNV != null)
      return glProgramEnvParameterI4iNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramEnvParameterI4iNV = cmd;
    return cmd;
  }
  private static Command glTexSubImage4DSGIS;
  public static Command glTexSubImage4DSGIS() {
    if (glTexSubImage4DSGIS != null)
      return glTexSubImage4DSGIS;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_SGIS_texture4D();
    glTexSubImage4DSGIS = cmd;
    return cmd;
  }
  private static Command glGetProgramivNV;
  public static Command glGetProgramivNV() {
    if (glGetProgramivNV != null)
      return glGetProgramivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetProgramivNV = cmd;
    return cmd;
  }
  private static Command glTextureSubImage1D;
  public static Command glTextureSubImage1D() {
    if (glTextureSubImage1D != null)
      return glTextureSubImage1D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureSubImage1D = cmd;
    return cmd;
  }
  private static Command glLightiv;
  public static Command glLightiv() {
    if (glLightiv != null)
      return glLightiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glLightiv = cmd;
    return cmd;
  }
  private static Command glGetMultiTexGenfvEXT;
  public static Command glGetMultiTexGenfvEXT() {
    if (glGetMultiTexGenfvEXT != null)
      return glGetMultiTexGenfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexGenfvEXT = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage2DARB;
  public static Command glCompressedTexImage2DARB() {
    if (glCompressedTexImage2DARB != null)
      return glCompressedTexImage2DARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_compression();
    glCompressedTexImage2DARB = cmd;
    return cmd;
  }
  private static Command glPathStringNV;
  public static Command glPathStringNV() {
    if (glPathStringNV != null)
      return glPathStringNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PathStringFormat());
    cmd.extension = GL_NV_path_rendering();
    glPathStringNV = cmd;
    return cmd;
  }
  private static Command glGetMapControlPointsNV;
  public static Command glGetMapControlPointsNV() {
    if (glGetMapControlPointsNV != null)
      return glGetMapControlPointsNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("type", _null_());
    cmd.addParam("packed", Boolean());
    cmd.extension = GL_NV_evaluators();
    glGetMapControlPointsNV = cmd;
    return cmd;
  }
  private static Command glDeformationMap3dSGIX;
  public static Command glDeformationMap3dSGIX() {
    if (glDeformationMap3dSGIX != null)
      return glDeformationMap3dSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FfdTargetSGIX());
    cmd.extension = GL_SGIX_polynomial_ffd();
    glDeformationMap3dSGIX = cmd;
    return cmd;
  }
  private static Command glGetPointerIndexedvEXT;
  public static Command glGetPointerIndexedvEXT() {
    if (glGetPointerIndexedvEXT != null)
      return glGetPointerIndexedvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glGetPointerIndexedvEXT = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribivNV;
  public static Command glGetVertexAttribivNV() {
    if (glGetVertexAttribivNV != null)
      return glGetVertexAttribivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetVertexAttribivNV = cmd;
    return cmd;
  }
  private static Command glSetLocalConstantEXT;
  public static Command glSetLocalConstantEXT() {
    if (glSetLocalConstantEXT != null)
      return glSetLocalConstantEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glSetLocalConstantEXT = cmd;
    return cmd;
  }
  private static Command glIsVertexArray;
  public static Command glIsVertexArray() {
    if (glIsVertexArray != null)
      return glIsVertexArray;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_vertex_array_object();
    glIsVertexArray = cmd;
    return cmd;
  }
  private static Command glTexEnvf;
  public static Command glTexEnvf() {
    if (glTexEnvf != null)
      return glTexEnvf;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glTexEnvf = cmd;
    return cmd;
  }
  private static Command glTexEnvi;
  public static Command glTexEnvi() {
    if (glTexEnvi != null)
      return glTexEnvi;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glTexEnvi = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture2DMultisampleEXT;
  public static Command glFramebufferTexture2DMultisampleEXT() {
    if (glFramebufferTexture2DMultisampleEXT != null)
      return glFramebufferTexture2DMultisampleEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_multisampled_render_to_texture();
    glFramebufferTexture2DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1sARB;
  public static Command glMultiTexCoord1sARB() {
    if (glMultiTexCoord1sARB != null)
      return glMultiTexCoord1sARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1sARB = cmd;
    return cmd;
  }
  private static Command glVideoCaptureNV;
  public static Command glVideoCaptureNV() {
    if (glVideoCaptureNV != null)
      return glVideoCaptureNV;
    Command cmd = new Command(0);
    cmd.returnGroup = _null_();
    cmd.extension = GL_NV_video_capture();
    glVideoCaptureNV = cmd;
    return cmd;
  }
  private static Command glFogi;
  public static Command glFogi() {
    if (glFogi != null)
      return glFogi;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogParameter());
    glFogi = cmd;
    return cmd;
  }
  private static Command glGetnMinmax;
  public static Command glGetnMinmax() {
    if (glGetnMinmax != null)
      return glGetnMinmax;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetnMinmax = cmd;
    return cmd;
  }
  private static Command glFenceSync;
  public static Command glFenceSync() {
    if (glFenceSync != null)
      return glFenceSync;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("condition", SyncCondition());
    cmd.addParam("flags", _null_());
    cmd.extension = GL_ARB_sync();
    glFenceSync = cmd;
    return cmd;
  }
  private static Command glFramebufferDrawBufferEXT;
  public static Command glFramebufferDrawBufferEXT() {
    if (glFramebufferDrawBufferEXT != null)
      return glFramebufferDrawBufferEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", DrawBufferMode());
    cmd.extension = GL_EXT_direct_state_access();
    glFramebufferDrawBufferEXT = cmd;
    return cmd;
  }
  private static Command glFogx;
  public static Command glFogx() {
    if (glFogx != null)
      return glFogx;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogPName());
    glFogx = cmd;
    return cmd;
  }
  private static Command glLightfv;
  public static Command glLightfv() {
    if (glLightfv != null)
      return glLightfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glLightfv = cmd;
    return cmd;
  }
  private static Command glGetProgramPipelineivEXT;
  public static Command glGetProgramPipelineivEXT() {
    if (glGetProgramPipelineivEXT != null)
      return glGetProgramPipelineivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PipelineParameterName());
    cmd.extension = GL_EXT_separate_shader_objects();
    glGetProgramPipelineivEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3fvEXT;
  public static Command glProgramUniformMatrix3fvEXT() {
    if (glProgramUniformMatrix3fvEXT != null)
      return glProgramUniformMatrix3fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix3fvEXT = cmd;
    return cmd;
  }
  private static Command glGetMaterialxv;
  public static Command glGetMaterialxv() {
    if (glGetMaterialxv != null)
      return glGetMaterialxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glGetMaterialxv = cmd;
    return cmd;
  }
  private static Command glFogf;
  public static Command glFogf() {
    if (glFogf != null)
      return glFogf;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogParameter());
    glFogf = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x2fvEXT;
  public static Command glProgramUniformMatrix4x2fvEXT() {
    if (glProgramUniformMatrix4x2fvEXT != null)
      return glProgramUniformMatrix4x2fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix4x2fvEXT = cmd;
    return cmd;
  }
  private static Command glDeformSGIX;
  public static Command glDeformSGIX() {
    if (glDeformSGIX != null)
      return glDeformSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", FfdMaskSGIX());
    cmd.extension = GL_SGIX_polynomial_ffd();
    glDeformSGIX = cmd;
    return cmd;
  }
  private static Command glStartTilingQCOM;
  public static Command glStartTilingQCOM() {
    if (glStartTilingQCOM != null)
      return glStartTilingQCOM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("preserveMask", BufferBitQCOM());
    cmd.extension = GL_QCOM_tiled_rendering();
    glStartTilingQCOM = cmd;
    return cmd;
  }
  private static Command glTexCoordPointerListIBM;
  public static Command glTexCoordPointerListIBM() {
    if (glTexCoordPointerListIBM != null)
      return glTexCoordPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_IBM_vertex_array_lists();
    glTexCoordPointerListIBM = cmd;
    return cmd;
  }
  private static Command glLightxvOES;
  public static Command glLightxvOES() {
    if (glLightxvOES != null)
      return glLightxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    cmd.extension = GL_OES_fixed_point();
    glLightxvOES = cmd;
    return cmd;
  }
  private static Command glGetHistogramEXT;
  public static Command glGetHistogramEXT() {
    if (glGetHistogramEXT != null)
      return glGetHistogramEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_histogram();
    glGetHistogramEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferSampleLocationsfvNV;
  public static Command glFramebufferSampleLocationsfvNV() {
    if (glFramebufferSampleLocationsfvNV != null)
      return glFramebufferSampleLocationsfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_NV_sample_locations();
    glFramebufferSampleLocationsfvNV = cmd;
    return cmd;
  }
  private static Command glPolygonMode;
  public static Command glPolygonMode() {
    if (glPolygonMode != null)
      return glPolygonMode;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("mode", PolygonMode());
    glPolygonMode = cmd;
    return cmd;
  }
  private static Command glNamedBufferStorageExternalEXT;
  public static Command glNamedBufferStorageExternalEXT() {
    if (glNamedBufferStorageExternalEXT != null)
      return glNamedBufferStorageExternalEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flags", MapBufferUsageMask());
    glNamedBufferStorageExternalEXT = cmd;
    return cmd;
  }
  private static Command glTexEnvx;
  public static Command glTexEnvx() {
    if (glTexEnvx != null)
      return glTexEnvx;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glTexEnvx = cmd;
    return cmd;
  }
  private static Command glVertexAttribP4uiv;
  public static Command glVertexAttribP4uiv() {
    if (glVertexAttribP4uiv != null)
      return glVertexAttribP4uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP4uiv = cmd;
    return cmd;
  }
  private static Command glGetQueryivARB;
  public static Command glGetQueryivARB() {
    if (glGetQueryivARB != null)
      return glGetQueryivARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.addParam("pname", QueryParameterName());
    cmd.extension = GL_ARB_occlusion_query();
    glGetQueryivARB = cmd;
    return cmd;
  }
  private static Command glInvalidateSubFramebuffer;
  public static Command glInvalidateSubFramebuffer() {
    if (glInvalidateSubFramebuffer != null)
      return glInvalidateSubFramebuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("attachments", FramebufferAttachment());
    glInvalidateSubFramebuffer = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2fvARB;
  public static Command glMultiTexCoord2fvARB() {
    if (glMultiTexCoord2fvARB != null)
      return glMultiTexCoord2fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2fvARB = cmd;
    return cmd;
  }
  private static Command glDrawArraysEXT;
  public static Command glDrawArraysEXT() {
    if (glDrawArraysEXT != null)
      return glDrawArraysEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_EXT_vertex_array();
    glDrawArraysEXT = cmd;
    return cmd;
  }
  private static Command glPointParameteriNV;
  public static Command glPointParameteriNV() {
    if (glPointParameteriNV != null)
      return glPointParameteriNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_point_sprite();
    glPointParameteriNV = cmd;
    return cmd;
  }
  private static Command glEGLImageTargetTexture2DOES;
  public static Command glEGLImageTargetTexture2DOES() {
    if (glEGLImageTargetTexture2DOES != null)
      return glEGLImageTargetTexture2DOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    glEGLImageTargetTexture2DOES = cmd;
    return cmd;
  }
  private static Command glFeedbackBufferxOES;
  public static Command glFeedbackBufferxOES() {
    if (glFeedbackBufferxOES != null)
      return glFeedbackBufferxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_OES_fixed_point();
    glFeedbackBufferxOES = cmd;
    return cmd;
  }
  private static Command glBufferParameteriAPPLE;
  public static Command glBufferParameteriAPPLE() {
    if (glBufferParameteriAPPLE != null)
      return glBufferParameteriAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_flush_buffer_range();
    glBufferParameteriAPPLE = cmd;
    return cmd;
  }
  private static Command glPatchParameteriOES;
  public static Command glPatchParameteriOES() {
    if (glPatchParameteriOES != null)
      return glPatchParameteriOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PatchParameterName());
    cmd.extension = GL_OES_tessellation_shader();
    glPatchParameteriOES = cmd;
    return cmd;
  }
  private static Command glBufferDataARB;
  public static Command glBufferDataARB() {
    if (glBufferDataARB != null)
      return glBufferDataARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("usage", BufferUsageARB());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glBufferDataARB = cmd;
    return cmd;
  }
  private static Command glGetLocalConstantFloatvEXT;
  public static Command glGetLocalConstantFloatvEXT() {
    if (glGetLocalConstantFloatvEXT != null)
      return glGetLocalConstantFloatvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetLocalConstantFloatvEXT = cmd;
    return cmd;
  }
  private static Command glClear;
  public static Command glClear() {
    if (glClear != null)
      return glClear;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    glClear = cmd;
    return cmd;
  }
  private static Command glEndTilingQCOM;
  public static Command glEndTilingQCOM() {
    if (glEndTilingQCOM != null)
      return glEndTilingQCOM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("preserveMask", BufferBitQCOM());
    cmd.extension = GL_QCOM_tiled_rendering();
    glEndTilingQCOM = cmd;
    return cmd;
  }
  private static Command glWriteMaskEXT;
  public static Command glWriteMaskEXT() {
    if (glWriteMaskEXT != null)
      return glWriteMaskEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("outX", _null_());
    cmd.addParam("outY", _null_());
    cmd.addParam("outZ", _null_());
    cmd.addParam("outW", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glWriteMaskEXT = cmd;
    return cmd;
  }
  private static Command glGetFramebufferAttachmentParameteriv;
  public static Command glGetFramebufferAttachmentParameteriv() {
    if (glGetFramebufferAttachmentParameteriv != null)
      return glGetFramebufferAttachmentParameteriv;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_ARB_framebuffer_object();
    glGetFramebufferAttachmentParameteriv = cmd;
    return cmd;
  }
  private static Command glReadBuffer;
  public static Command glReadBuffer() {
    if (glReadBuffer != null)
      return glReadBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("src", ReadBufferMode());
    glReadBuffer = cmd;
    return cmd;
  }
  private static Command glTextureImage3DEXT;
  public static Command glTextureImage3DEXT() {
    if (glTextureImage3DEXT != null)
      return glTextureImage3DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureImage3DEXT = cmd;
    return cmd;
  }
  private static Command glPixelTransferxOES;
  public static Command glPixelTransferxOES() {
    if (glPixelTransferxOES != null)
      return glPixelTransferxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTransferParameter());
    cmd.extension = GL_OES_fixed_point();
    glPixelTransferxOES = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstanced;
  public static Command glDrawArraysInstanced() {
    if (glDrawArraysInstanced != null)
      return glDrawArraysInstanced;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawArraysInstanced = cmd;
    return cmd;
  }
  private static Command glTextureParameterIivEXT;
  public static Command glTextureParameterIivEXT() {
    if (glTextureParameterIivEXT != null)
      return glTextureParameterIivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glDrawBuffer;
  public static Command glDrawBuffer() {
    if (glDrawBuffer != null)
      return glDrawBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buf", DrawBufferMode());
    glDrawBuffer = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameterI4uiNV;
  public static Command glProgramEnvParameterI4uiNV() {
    if (glProgramEnvParameterI4uiNV != null)
      return glProgramEnvParameterI4uiNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramEnvParameterI4uiNV = cmd;
    return cmd;
  }
  private static Command glMultiTexRenderbufferEXT;
  public static Command glMultiTexRenderbufferEXT() {
    if (glMultiTexRenderbufferEXT != null)
      return glMultiTexRenderbufferEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexRenderbufferEXT = cmd;
    return cmd;
  }
  private static Command glSamplerParameterIuivEXT;
  public static Command glSamplerParameterIuivEXT() {
    if (glSamplerParameterIuivEXT != null)
      return glSamplerParameterIuivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_EXT_texture_border_clamp();
    glSamplerParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisampleEXT;
  public static Command glRenderbufferStorageMultisampleEXT() {
    if (glRenderbufferStorageMultisampleEXT != null)
      return glRenderbufferStorageMultisampleEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_framebuffer_multisample();
    glRenderbufferStorageMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glShaderOp3EXT;
  public static Command glShaderOp3EXT() {
    if (glShaderOp3EXT != null)
      return glShaderOp3EXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glShaderOp3EXT = cmd;
    return cmd;
  }
  private static Command glIsRenderbuffer;
  public static Command glIsRenderbuffer() {
    if (glIsRenderbuffer != null)
      return glIsRenderbuffer;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_framebuffer_object();
    glIsRenderbuffer = cmd;
    return cmd;
  }
  private static Command glMatrixMult3x3fNV;
  public static Command glMatrixMult3x3fNV() {
    if (glMatrixMult3x3fNV != null)
      return glMatrixMult3x3fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("matrixMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glMatrixMult3x3fNV = cmd;
    return cmd;
  }
  private static Command glGetProgramResourceName;
  public static Command glGetProgramResourceName() {
    if (glGetProgramResourceName != null)
      return glGetProgramResourceName;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.extension = GL_ARB_program_interface_query();
    glGetProgramResourceName = cmd;
    return cmd;
  }
  private static Command glMultiTexGendvEXT;
  public static Command glMultiTexGendvEXT() {
    if (glMultiTexGendvEXT != null)
      return glMultiTexGendvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexGendvEXT = cmd;
    return cmd;
  }
  private static Command glNamedRenderbufferStorageMultisampleEXT;
  public static Command glNamedRenderbufferStorageMultisampleEXT() {
    if (glNamedRenderbufferStorageMultisampleEXT != null)
      return glNamedRenderbufferStorageMultisampleEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedRenderbufferStorageMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glColorMaskIndexedEXT;
  public static Command glColorMaskIndexedEXT() {
    if (glColorMaskIndexedEXT != null)
      return glColorMaskIndexedEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("r", Boolean());
    cmd.addParam("g", Boolean());
    cmd.addParam("b", Boolean());
    cmd.addParam("a", Boolean());
    glColorMaskIndexedEXT = cmd;
    return cmd;
  }
  private static Command glCopyTextureImage1DEXT;
  public static Command glCopyTextureImage1DEXT() {
    if (glCopyTextureImage1DEXT != null)
      return glCopyTextureImage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyTextureImage1DEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4dv;
  public static Command glUniformMatrix4dv() {
    if (glUniformMatrix4dv != null)
      return glUniformMatrix4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix4dv = cmd;
    return cmd;
  }
  private static Command glGetCombinerOutputParameterivNV;
  public static Command glGetCombinerOutputParameterivNV() {
    if (glGetCombinerOutputParameterivNV != null)
      return glGetCombinerOutputParameterivNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("portion", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glGetCombinerOutputParameterivNV = cmd;
    return cmd;
  }
  private static Command glMatrixTranslatedEXT;
  public static Command glMatrixTranslatedEXT() {
    if (glMatrixTranslatedEXT != null)
      return glMatrixTranslatedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixTranslatedEXT = cmd;
    return cmd;
  }
  private static Command glGetSemaphoreParameterui64vEXT;
  public static Command glGetSemaphoreParameterui64vEXT() {
    if (glGetSemaphoreParameterui64vEXT != null)
      return glGetSemaphoreParameterui64vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SemaphoreParameterName());
    cmd.extension = GL_EXT_semaphore();
    glGetSemaphoreParameterui64vEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream3ivATI;
  public static Command glVertexStream3ivATI() {
    if (glVertexStream3ivATI != null)
      return glVertexStream3ivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3ivATI = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2x3fvNV;
  public static Command glUniformMatrix2x3fvNV() {
    if (glUniformMatrix2x3fvNV != null)
      return glUniformMatrix2x3fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_NV_non_square_matrices();
    glUniformMatrix2x3fvNV = cmd;
    return cmd;
  }
  private static Command glVertexAttribP4ui;
  public static Command glVertexAttribP4ui() {
    if (glVertexAttribP4ui != null)
      return glVertexAttribP4ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP4ui = cmd;
    return cmd;
  }
  private static Command glGetVideoi64vNV;
  public static Command glGetVideoi64vNV() {
    if (glGetVideoi64vNV != null)
      return glGetVideoi64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_present_video();
    glGetVideoi64vNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP2ui;
  public static Command glMultiTexCoordP2ui() {
    if (glMultiTexCoordP2ui != null)
      return glMultiTexCoordP2ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP2ui = cmd;
    return cmd;
  }
  private static Command glTextureImage3DMultisampleNV;
  public static Command glTextureImage3DMultisampleNV() {
    if (glTextureImage3DMultisampleNV != null)
      return glTextureImage3DMultisampleNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_NV_texture_multisample();
    glTextureImage3DMultisampleNV = cmd;
    return cmd;
  }
  private static Command glGetTexGenxvOES;
  public static Command glGetTexGenxvOES() {
    if (glGetTexGenxvOES != null)
      return glGetTexGenxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetTexGenxvOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2sv;
  public static Command glMultiTexCoord2sv() {
    if (glMultiTexCoord2sv != null)
      return glMultiTexCoord2sv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2sv = cmd;
    return cmd;
  }
  private static Command glWaitSyncAPPLE;
  public static Command glWaitSyncAPPLE() {
    if (glWaitSyncAPPLE != null)
      return glWaitSyncAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flags", _null_());
    cmd.extension = GL_APPLE_sync();
    glWaitSyncAPPLE = cmd;
    return cmd;
  }
  private static Command glCopyMultiTexImage2DEXT;
  public static Command glCopyMultiTexImage2DEXT() {
    if (glCopyMultiTexImage2DEXT != null)
      return glCopyMultiTexImage2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyMultiTexImage2DEXT = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparateiARB;
  public static Command glBlendEquationSeparateiARB() {
    if (glBlendEquationSeparateiARB != null)
      return glBlendEquationSeparateiARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    glBlendEquationSeparateiARB = cmd;
    return cmd;
  }
  private static Command glGetProgramInterfaceiv;
  public static Command glGetProgramInterfaceiv() {
    if (glGetProgramInterfaceiv != null)
      return glGetProgramInterfaceiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.addParam("pname", ProgramInterfacePName());
    cmd.extension = GL_ARB_program_interface_query();
    glGetProgramInterfaceiv = cmd;
    return cmd;
  }
  private static Command glVariantArrayObjectATI;
  public static Command glVariantArrayObjectATI() {
    if (glVariantArrayObjectATI != null)
      return glVariantArrayObjectATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glVariantArrayObjectATI = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4fv;
  public static Command glUniformMatrix4fv() {
    if (glUniformMatrix4fv != null)
      return glUniformMatrix4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix4fv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2xvOES;
  public static Command glMultiTexCoord2xvOES() {
    if (glMultiTexCoord2xvOES != null)
      return glMultiTexCoord2xvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord2xvOES = cmd;
    return cmd;
  }
  private static Command glGetPixelTexGenParameterivSGIS;
  public static Command glGetPixelTexGenParameterivSGIS() {
    if (glGetPixelTexGenParameterivSGIS != null)
      return glGetPixelTexGenParameterivSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTexGenParameterNameSGIS());
    cmd.extension = GL_SGIS_pixel_texture();
    glGetPixelTexGenParameterivSGIS = cmd;
    return cmd;
  }
  private static Command glSemaphoreParameterui64vEXT;
  public static Command glSemaphoreParameterui64vEXT() {
    if (glSemaphoreParameterui64vEXT != null)
      return glSemaphoreParameterui64vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SemaphoreParameterName());
    cmd.extension = GL_EXT_semaphore();
    glSemaphoreParameterui64vEXT = cmd;
    return cmd;
  }
  private static Command glImportMemoryWin32NameEXT;
  public static Command glImportMemoryWin32NameEXT() {
    if (glImportMemoryWin32NameEXT != null)
      return glImportMemoryWin32NameEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("handleType", ExternalHandleType());
    cmd.extension = GL_EXT_memory_object_win32();
    glImportMemoryWin32NameEXT = cmd;
    return cmd;
  }
  private static Command glGenSymbolsEXT;
  public static Command glGenSymbolsEXT() {
    if (glGenSymbolsEXT != null)
      return glGenSymbolsEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("datatype", _null_());
    cmd.addParam("storagetype", _null_());
    cmd.addParam("range", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGenSymbolsEXT = cmd;
    return cmd;
  }
  private static Command glTexCoordP4uiv;
  public static Command glTexCoordP4uiv() {
    if (glTexCoordP4uiv != null)
      return glTexCoordP4uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP4uiv = cmd;
    return cmd;
  }
  private static Command glGetFragmentMaterialfvSGIX;
  public static Command glGetFragmentMaterialfvSGIX() {
    if (glGetFragmentMaterialfvSGIX != null)
      return glGetFragmentMaterialfvSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glGetFragmentMaterialfvSGIX = cmd;
    return cmd;
  }
  private static Command glGetTexBumpParameterfvATI;
  public static Command glGetTexBumpParameterfvATI() {
    if (glGetTexBumpParameterfvATI != null)
      return glGetTexBumpParameterfvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_envmap_bumpmap();
    glGetTexBumpParameterfvATI = cmd;
    return cmd;
  }
  private static Command glSampleCoverage;
  public static Command glSampleCoverage() {
    if (glSampleCoverage != null)
      return glSampleCoverage;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("invert", Boolean());
    glSampleCoverage = cmd;
    return cmd;
  }
  private static Command glGetTexParameterxvOES;
  public static Command glGetTexParameterxvOES() {
    if (glGetTexParameterxvOES != null)
      return glGetTexParameterxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetTexParameterxvOES = cmd;
    return cmd;
  }
  private static Command glGetBooleanIndexedvEXT;
  public static Command glGetBooleanIndexedvEXT() {
    if (glGetBooleanIndexedvEXT != null)
      return glGetBooleanIndexedvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("data", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glGetBooleanIndexedvEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3fvARB;
  public static Command glMultiTexCoord3fvARB() {
    if (glMultiTexCoord3fvARB != null)
      return glMultiTexCoord3fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3fvARB = cmd;
    return cmd;
  }
  private static Command glVertexStream2iATI;
  public static Command glVertexStream2iATI() {
    if (glVertexStream2iATI != null)
      return glVertexStream2iATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2iATI = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4xOES;
  public static Command glMultiTexCoord4xOES() {
    if (glMultiTexCoord4xOES != null)
      return glMultiTexCoord4xOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord4xOES = cmd;
    return cmd;
  }
  private static Command glDrawArrays;
  public static Command glDrawArrays() {
    if (glDrawArrays != null)
      return glDrawArrays;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawArrays = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferParameteriEXT;
  public static Command glNamedFramebufferParameteriEXT() {
    if (glNamedFramebufferParameteriEXT != null)
      return glNamedFramebufferParameteriEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FramebufferParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferParameteriEXT = cmd;
    return cmd;
  }
  private static Command glMatrixLoadIdentityEXT;
  public static Command glMatrixLoadIdentityEXT() {
    if (glMatrixLoadIdentityEXT != null)
      return glMatrixLoadIdentityEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixLoadIdentityEXT = cmd;
    return cmd;
  }
  private static Command glSamplerParameteri;
  public static Command glSamplerParameteri() {
    if (glSamplerParameteri != null)
      return glSamplerParameteri;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glSamplerParameteri = cmd;
    return cmd;
  }
  private static Command glSamplerParameterf;
  public static Command glSamplerParameterf() {
    if (glSamplerParameterf != null)
      return glSamplerParameterf;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glSamplerParameterf = cmd;
    return cmd;
  }
  private static Command glSampleCoverageARB;
  public static Command glSampleCoverageARB() {
    if (glSampleCoverageARB != null)
      return glSampleCoverageARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("invert", Boolean());
    cmd.extension = GL_ARB_multisample();
    glSampleCoverageARB = cmd;
    return cmd;
  }
  private static Command glWeightPointerARB;
  public static Command glWeightPointerARB() {
    if (glWeightPointerARB != null)
      return glWeightPointerARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_ARB_vertex_blend();
    glWeightPointerARB = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedbackStream;
  public static Command glDrawTransformFeedbackStream() {
    if (glDrawTransformFeedbackStream != null)
      return glDrawTransformFeedbackStream;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ARB_transform_feedback3();
    glDrawTransformFeedbackStream = cmd;
    return cmd;
  }
  private static Command glRenderMode;
  public static Command glRenderMode() {
    if (glRenderMode != null)
      return glRenderMode;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", RenderingMode());
    glRenderMode = cmd;
    return cmd;
  }
  private static Command glTextureRangeAPPLE;
  public static Command glTextureRangeAPPLE() {
    if (glTextureRangeAPPLE != null)
      return glTextureRangeAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_APPLE_texture_range();
    glTextureRangeAPPLE = cmd;
    return cmd;
  }
  private static Command glNormalStream3fvATI;
  public static Command glNormalStream3fvATI() {
    if (glNormalStream3fvATI != null)
      return glNormalStream3fvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3fvATI = cmd;
    return cmd;
  }
  private static Command glEndQueryIndexed;
  public static Command glEndQueryIndexed() {
    if (glEndQueryIndexed != null)
      return glEndQueryIndexed;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_ARB_transform_feedback3();
    glEndQueryIndexed = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4bOES;
  public static Command glMultiTexCoord4bOES() {
    if (glMultiTexCoord4bOES != null)
      return glMultiTexCoord4bOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord4bOES = cmd;
    return cmd;
  }
  private static Command glNewList;
  public static Command glNewList() {
    if (glNewList != null)
      return glNewList;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", ListMode());
    glNewList = cmd;
    return cmd;
  }
  private static Command glVertexStream2fvATI;
  public static Command glVertexStream2fvATI() {
    if (glVertexStream2fvATI != null)
      return glVertexStream2fvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2fvATI = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameterI4uivNV;
  public static Command glProgramLocalParameterI4uivNV() {
    if (glProgramLocalParameterI4uivNV != null)
      return glProgramLocalParameterI4uivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramLocalParameterI4uivNV = cmd;
    return cmd;
  }
  private static Command glBufferSubDataARB;
  public static Command glBufferSubDataARB() {
    if (glBufferSubDataARB != null)
      return glBufferSubDataARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glBufferSubDataARB = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x4dv;
  public static Command glProgramUniformMatrix2x4dv() {
    if (glProgramUniformMatrix2x4dv != null)
      return glProgramUniformMatrix2x4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix2x4dv = cmd;
    return cmd;
  }
  private static Command glBlitFramebufferNV;
  public static Command glBlitFramebufferNV() {
    if (glBlitFramebufferNV != null)
      return glBlitFramebufferNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    cmd.addParam("filter", BlitFramebufferFilter());
    cmd.extension = GL_NV_framebuffer_blit();
    glBlitFramebufferNV = cmd;
    return cmd;
  }
  private static Command glFlushMappedBufferRangeAPPLE;
  public static Command glFlushMappedBufferRangeAPPLE() {
    if (glFlushMappedBufferRangeAPPLE != null)
      return glFlushMappedBufferRangeAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_APPLE_flush_buffer_range();
    glFlushMappedBufferRangeAPPLE = cmd;
    return cmd;
  }
  private static Command glPixelMapfv;
  public static Command glPixelMapfv() {
    if (glPixelMapfv != null)
      return glPixelMapfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glPixelMapfv = cmd;
    return cmd;
  }
  private static Command glGetObjectLabelKHR;
  public static Command glGetObjectLabelKHR() {
    if (glGetObjectLabelKHR != null)
      return glGetObjectLabelKHR;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("identifier", _null_());
    cmd.extension = GL_KHR_debug();
    glGetObjectLabelKHR = cmd;
    return cmd;
  }
  private static Command glPushClientAttribDefaultEXT;
  public static Command glPushClientAttribDefaultEXT() {
    if (glPushClientAttribDefaultEXT != null)
      return glPushClientAttribDefaultEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClientAttribMask());
    cmd.extension = GL_EXT_direct_state_access();
    glPushClientAttribDefaultEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2hvNV;
  public static Command glMultiTexCoord2hvNV() {
    if (glMultiTexCoord2hvNV != null)
      return glMultiTexCoord2hvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord2hvNV = cmd;
    return cmd;
  }
  private static Command glVDPAURegisterVideoSurfaceNV;
  public static Command glVDPAURegisterVideoSurfaceNV() {
    if (glVDPAURegisterVideoSurfaceNV != null)
      return glVDPAURegisterVideoSurfaceNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vdpau_interop();
    glVDPAURegisterVideoSurfaceNV = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribdvARB;
  public static Command glGetVertexAttribdvARB() {
    if (glGetVertexAttribdvARB != null)
      return glGetVertexAttribdvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_vertex_program();
    glGetVertexAttribdvARB = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3x2dv;
  public static Command glUniformMatrix3x2dv() {
    if (glUniformMatrix3x2dv != null)
      return glUniformMatrix3x2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix3x2dv = cmd;
    return cmd;
  }
  private static Command glStencilOp;
  public static Command glStencilOp() {
    if (glStencilOp != null)
      return glStencilOp;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("fail", StencilOp());
    cmd.addParam("zfail", StencilOp());
    cmd.addParam("zpass", StencilOp());
    glStencilOp = cmd;
    return cmd;
  }
  private static Command glGetnMapivARB;
  public static Command glGetnMapivARB() {
    if (glGetnMapivARB != null)
      return glGetnMapivARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", MapQuery());
    cmd.extension = GL_ARB_robustness();
    glGetnMapivARB = cmd;
    return cmd;
  }
  private static Command glBindBuffer;
  public static Command glBindBuffer() {
    if (glBindBuffer != null)
      return glBindBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    glBindBuffer = cmd;
    return cmd;
  }
  private static Command glTexCoordP3ui;
  public static Command glTexCoordP3ui() {
    if (glTexCoordP3ui != null)
      return glTexCoordP3ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP3ui = cmd;
    return cmd;
  }
  private static Command glVertexAttribIPointerEXT;
  public static Command glVertexAttribIPointerEXT() {
    if (glVertexAttribIPointerEXT != null)
      return glVertexAttribIPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.extension = GL_NV_vertex_program4();
    glVertexAttribIPointerEXT = cmd;
    return cmd;
  }
  private static Command glVertexArrayParameteriAPPLE;
  public static Command glVertexArrayParameteriAPPLE() {
    if (glVertexArrayParameteriAPPLE != null)
      return glVertexArrayParameteriAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_vertex_array_range();
    glVertexArrayParameteriAPPLE = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3fv;
  public static Command glProgramUniformMatrix3fv() {
    if (glProgramUniformMatrix3fv != null)
      return glProgramUniformMatrix3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix3fv = cmd;
    return cmd;
  }
  private static Command glNormalPointer;
  public static Command glNormalPointer() {
    if (glNormalPointer != null)
      return glNormalPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    glNormalPointer = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage2DARB;
  public static Command glCompressedTexSubImage2DARB() {
    if (glCompressedTexSubImage2DARB != null)
      return glCompressedTexSubImage2DARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_texture_compression();
    glCompressedTexSubImage2DARB = cmd;
    return cmd;
  }
  private static Command glGetNamedBufferParameteri64v;
  public static Command glGetNamedBufferParameteri64v() {
    if (glGetNamedBufferParameteri64v != null)
      return glGetNamedBufferParameteri64v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexBufferObjectParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetNamedBufferParameteri64v = cmd;
    return cmd;
  }
  private static Command glGetActiveUniformARB;
  public static Command glGetActiveUniformARB() {
    if (glGetActiveUniformARB != null)
      return glGetActiveUniformARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", AttributeType());
    cmd.extension = GL_ARB_shader_objects();
    glGetActiveUniformARB = cmd;
    return cmd;
  }
  private static Command glBegin;
  public static Command glBegin() {
    if (glBegin != null)
      return glBegin;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glBegin = cmd;
    return cmd;
  }
  private static Command glEnable;
  public static Command glEnable() {
    if (glEnable != null)
      return glEnable;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("cap", EnableCap());
    glEnable = cmd;
    return cmd;
  }
  private static Command glApplyTextureEXT;
  public static Command glApplyTextureEXT() {
    if (glApplyTextureEXT != null)
      return glApplyTextureEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_EXT_light_texture();
    glApplyTextureEXT = cmd;
    return cmd;
  }
  private static Command glMulticastGetQueryObjecti64vNV;
  public static Command glMulticastGetQueryObjecti64vNV() {
    if (glMulticastGetQueryObjecti64vNV != null)
      return glMulticastGetQueryObjecti64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastGetQueryObjecti64vNV = cmd;
    return cmd;
  }
  private static Command glTexParameterIuivEXT;
  public static Command glTexParameterIuivEXT() {
    if (glTexParameterIuivEXT != null)
      return glTexParameterIuivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_texture_border_clamp();
    glTexParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glTexturePageCommitmentEXT;
  public static Command glTexturePageCommitmentEXT() {
    if (glTexturePageCommitmentEXT != null)
      return glTexturePageCommitmentEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("commit", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glTexturePageCommitmentEXT = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstancedBaseInstanceEXT;
  public static Command glDrawArraysInstancedBaseInstanceEXT() {
    if (glDrawArraysInstancedBaseInstanceEXT != null)
      return glDrawArraysInstancedBaseInstanceEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawArraysInstancedBaseInstanceEXT = cmd;
    return cmd;
  }
  private static Command glIsProgramNV;
  public static Command glIsProgramNV() {
    if (glIsProgramNV != null)
      return glIsProgramNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_vertex_program();
    glIsProgramNV = cmd;
    return cmd;
  }
  private static Command glTextureBufferRange;
  public static Command glTextureBufferRange() {
    if (glTextureBufferRange != null)
      return glTextureBufferRange;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureBufferRange = cmd;
    return cmd;
  }
  private static Command glBeginQueryEXT;
  public static Command glBeginQueryEXT() {
    if (glBeginQueryEXT != null)
      return glBeginQueryEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glBeginQueryEXT = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectivEXT;
  public static Command glGetQueryObjectivEXT() {
    if (glGetQueryObjectivEXT != null)
      return glGetQueryObjectivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glGetQueryObjectivEXT = cmd;
    return cmd;
  }
  private static Command glPixelTexGenParameterivSGIS;
  public static Command glPixelTexGenParameterivSGIS() {
    if (glPixelTexGenParameterivSGIS != null)
      return glPixelTexGenParameterivSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTexGenParameterNameSGIS());
    cmd.extension = GL_SGIS_pixel_texture();
    glPixelTexGenParameterivSGIS = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribLui64vARB;
  public static Command glGetVertexAttribLui64vARB() {
    if (glGetVertexAttribLui64vARB != null)
      return glGetVertexAttribLui64vARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_ARB_bindless_texture();
    glGetVertexAttribLui64vARB = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3dv;
  public static Command glProgramUniformMatrix3dv() {
    if (glProgramUniformMatrix3dv != null)
      return glProgramUniformMatrix3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix3dv = cmd;
    return cmd;
  }
  private static Command glGetLightxv;
  public static Command glGetLightxv() {
    if (glGetLightxv != null)
      return glGetLightxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glGetLightxv = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribIuivEXT;
  public static Command glGetVertexAttribIuivEXT() {
    if (glGetVertexAttribIuivEXT != null)
      return glGetVertexAttribIuivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_NV_vertex_program4();
    glGetVertexAttribIuivEXT = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateiARB;
  public static Command glBlendFuncSeparateiARB() {
    if (glBlendFuncSeparateiARB != null)
      return glBlendFuncSeparateiARB;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("srcRGB", BlendingFactor());
    cmd.addParam("dstRGB", BlendingFactor());
    cmd.addParam("srcAlpha", BlendingFactor());
    cmd.addParam("dstAlpha", BlendingFactor());
    glBlendFuncSeparateiARB = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParametersI4ivEXT;
  public static Command glNamedProgramLocalParametersI4ivEXT() {
    if (glNamedProgramLocalParametersI4ivEXT != null)
      return glNamedProgramLocalParametersI4ivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParametersI4ivEXT = cmd;
    return cmd;
  }
  private static Command glTextureSubImage1DEXT;
  public static Command glTextureSubImage1DEXT() {
    if (glTextureSubImage1DEXT != null)
      return glTextureSubImage1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glCompressedTextureSubImage3DEXT;
  public static Command glCompressedTextureSubImage3DEXT() {
    if (glCompressedTextureSubImage3DEXT != null)
      return glCompressedTextureSubImage3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedTextureSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseInstance;
  public static Command glDrawElementsInstancedBaseInstance() {
    if (glDrawElementsInstancedBaseInstance != null)
      return glDrawElementsInstancedBaseInstance;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", PrimitiveType());
    glDrawElementsInstancedBaseInstance = cmd;
    return cmd;
  }
  private static Command glMatrixPopEXT;
  public static Command glMatrixPopEXT() {
    if (glMatrixPopEXT != null)
      return glMatrixPopEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixPopEXT = cmd;
    return cmd;
  }
  private static Command glFrontFace;
  public static Command glFrontFace() {
    if (glFrontFace != null)
      return glFrontFace;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", FrontFaceDirection());
    glFrontFace = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x4fv;
  public static Command glProgramUniformMatrix2x4fv() {
    if (glProgramUniformMatrix2x4fv != null)
      return glProgramUniformMatrix2x4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix2x4fv = cmd;
    return cmd;
  }
  private static Command glUpdateObjectBufferATI;
  public static Command glUpdateObjectBufferATI() {
    if (glUpdateObjectBufferATI != null)
      return glUpdateObjectBufferATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("preserve", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glUpdateObjectBufferATI = cmd;
    return cmd;
  }
  private static Command glAlphaFunc;
  public static Command glAlphaFunc() {
    if (glAlphaFunc != null)
      return glAlphaFunc;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", AlphaFunction());
    glAlphaFunc = cmd;
    return cmd;
  }
  private static Command glTextureBufferEXT;
  public static Command glTextureBufferEXT() {
    if (glTextureBufferEXT != null)
      return glTextureBufferEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureBufferEXT = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedARB;
  public static Command glDrawElementsInstancedARB() {
    if (glDrawElementsInstancedARB != null)
      return glDrawElementsInstancedARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsInstancedARB = cmd;
    return cmd;
  }
  private static Command glMulticastBlitFramebufferNV;
  public static Command glMulticastBlitFramebufferNV() {
    if (glMulticastBlitFramebufferNV != null)
      return glMulticastBlitFramebufferNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    cmd.addParam("filter", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastBlitFramebufferNV = cmd;
    return cmd;
  }
  private static Command glClearNamedBufferSubData;
  public static Command glClearNamedBufferSubData() {
    if (glClearNamedBufferSubData != null)
      return glClearNamedBufferSubData;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_direct_state_access();
    glClearNamedBufferSubData = cmd;
    return cmd;
  }
  private static Command glMinmaxEXT;
  public static Command glMinmaxEXT() {
    if (glMinmaxEXT != null)
      return glMinmaxEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("sink", Boolean());
    cmd.extension = GL_EXT_histogram();
    glMinmaxEXT = cmd;
    return cmd;
  }
  private static Command glNormalStream3bATI;
  public static Command glNormalStream3bATI() {
    if (glNormalStream3bATI != null)
      return glNormalStream3bATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3bATI = cmd;
    return cmd;
  }
  private static Command glTessellationModeAMD;
  public static Command glTessellationModeAMD() {
    if (glTessellationModeAMD != null)
      return glTessellationModeAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_AMD_vertex_shader_tessellator();
    glTessellationModeAMD = cmd;
    return cmd;
  }
  private static Command glGetTexParameterIuiv;
  public static Command glGetTexParameterIuiv() {
    if (glGetTexParameterIuiv != null)
      return glGetTexParameterIuiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexParameterIuiv = cmd;
    return cmd;
  }
  private static Command glSamplerParameterfv;
  public static Command glSamplerParameterfv() {
    if (glSamplerParameterfv != null)
      return glSamplerParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glSamplerParameterfv = cmd;
    return cmd;
  }
  private static Command glTexCoordP1uiv;
  public static Command glTexCoordP1uiv() {
    if (glTexCoordP1uiv != null)
      return glTexCoordP1uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP1uiv = cmd;
    return cmd;
  }
  private static Command glNamedBufferStorageEXT;
  public static Command glNamedBufferStorageEXT() {
    if (glNamedBufferStorageEXT != null)
      return glNamedBufferStorageEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flags", MapBufferUsageMask());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedBufferStorageEXT = cmd;
    return cmd;
  }
  private static Command glVertexAttribP1uiv;
  public static Command glVertexAttribP1uiv() {
    if (glVertexAttribP1uiv != null)
      return glVertexAttribP1uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP1uiv = cmd;
    return cmd;
  }
  private static Command glTexParameterIiv;
  public static Command glTexParameterIiv() {
    if (glTexParameterIiv != null)
      return glTexParameterIiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    glTexParameterIiv = cmd;
    return cmd;
  }
  private static Command glMatrixLoadTransposedEXT;
  public static Command glMatrixLoadTransposedEXT() {
    if (glMatrixLoadTransposedEXT != null)
      return glMatrixLoadTransposedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixLoadTransposedEXT = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribLdvEXT;
  public static Command glGetVertexAttribLdvEXT() {
    if (glGetVertexAttribLdvEXT != null)
      return glGetVertexAttribLdvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_EXT_vertex_attrib_64bit();
    glGetVertexAttribLdvEXT = cmd;
    return cmd;
  }
  private static Command glSamplerParameteriv;
  public static Command glSamplerParameteriv() {
    if (glSamplerParameteriv != null)
      return glSamplerParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glSamplerParameteriv = cmd;
    return cmd;
  }
  private static Command glTexEnvxv;
  public static Command glTexEnvxv() {
    if (glTexEnvxv != null)
      return glTexEnvxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glTexEnvxv = cmd;
    return cmd;
  }
  private static Command glGetVariantArrayObjectivATI;
  public static Command glGetVariantArrayObjectivATI() {
    if (glGetVariantArrayObjectivATI != null)
      return glGetVariantArrayObjectivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glGetVariantArrayObjectivATI = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureLayerDownsampleIMG;
  public static Command glFramebufferTextureLayerDownsampleIMG() {
    if (glFramebufferTextureLayerDownsampleIMG != null)
      return glFramebufferTextureLayerDownsampleIMG;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_IMG_framebuffer_downsample();
    glFramebufferTextureLayerDownsampleIMG = cmd;
    return cmd;
  }
  private static Command glGetConvolutionParameterivEXT;
  public static Command glGetConvolutionParameterivEXT() {
    if (glGetConvolutionParameterivEXT != null)
      return glGetConvolutionParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_EXT_convolution();
    glGetConvolutionParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetActiveUniformsiv;
  public static Command glGetActiveUniformsiv() {
    if (glGetActiveUniformsiv != null)
      return glGetActiveUniformsiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", UniformPName());
    cmd.extension = GL_ARB_uniform_buffer_object();
    glGetActiveUniformsiv = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTexture;
  public static Command glNamedFramebufferTexture() {
    if (glNamedFramebufferTexture != null)
      return glNamedFramebufferTexture;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferTexture = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3fvARB;
  public static Command glUniformMatrix3fvARB() {
    if (glUniformMatrix3fvARB != null)
      return glUniformMatrix3fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_shader_objects();
    glUniformMatrix3fvARB = cmd;
    return cmd;
  }
  private static Command glTransformPathNV;
  public static Command glTransformPathNV() {
    if (glTransformPathNV != null)
      return glTransformPathNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transformType", PathTransformType());
    cmd.extension = GL_NV_path_rendering();
    glTransformPathNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3dv;
  public static Command glMultiTexCoord3dv() {
    if (glMultiTexCoord3dv != null)
      return glMultiTexCoord3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3dv = cmd;
    return cmd;
  }
  private static Command glMap2xOES;
  public static Command glMap2xOES() {
    if (glMap2xOES != null)
      return glMap2xOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.extension = GL_OES_fixed_point();
    glMap2xOES = cmd;
    return cmd;
  }
  private static Command glIsVariantEnabledEXT;
  public static Command glIsVariantEnabledEXT() {
    if (glIsVariantEnabledEXT != null)
      return glIsVariantEnabledEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("cap", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glIsVariantEnabledEXT = cmd;
    return cmd;
  }
  private static Command glGetFramebufferParameterfvAMD;
  public static Command glGetFramebufferParameterfvAMD() {
    if (glGetFramebufferParameterfvAMD != null)
      return glGetFramebufferParameterfvAMD;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_AMD_framebuffer_sample_positions();
    glGetFramebufferParameterfvAMD = cmd;
    return cmd;
  }
  private static Command glExecuteProgramNV;
  public static Command glExecuteProgramNV() {
    if (glExecuteProgramNV != null)
      return glExecuteProgramNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glExecuteProgramNV = cmd;
    return cmd;
  }
  private static Command glFragmentMaterialfSGIX;
  public static Command glFragmentMaterialfSGIX() {
    if (glFragmentMaterialfSGIX != null)
      return glFragmentMaterialfSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentMaterialfSGIX = cmd;
    return cmd;
  }
  private static Command glEnablei;
  public static Command glEnablei() {
    if (glEnablei != null)
      return glEnablei;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    glEnablei = cmd;
    return cmd;
  }
  private static Command glReplacementCodePointerSUN;
  public static Command glReplacementCodePointerSUN() {
    if (glReplacementCodePointerSUN != null)
      return glReplacementCodePointerSUN;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_SUN_triangle_list();
    glReplacementCodePointerSUN = cmd;
    return cmd;
  }
  private static Command glCallLists;
  public static Command glCallLists() {
    if (glCallLists != null)
      return glCallLists;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ListNameType());
    glCallLists = cmd;
    return cmd;
  }
  private static Command glColorMaski;
  public static Command glColorMaski() {
    if (glColorMaski != null)
      return glColorMaski;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("r", Boolean());
    cmd.addParam("g", Boolean());
    cmd.addParam("b", Boolean());
    cmd.addParam("a", Boolean());
    glColorMaski = cmd;
    return cmd;
  }
  private static Command glCopyConvolutionFilter1D;
  public static Command glCopyConvolutionFilter1D() {
    if (glCopyConvolutionFilter1D != null)
      return glCopyConvolutionFilter1D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_imaging();
    glCopyConvolutionFilter1D = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3fv;
  public static Command glMultiTexCoord3fv() {
    if (glMultiTexCoord3fv != null)
      return glMultiTexCoord3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3fv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4fARB;
  public static Command glMultiTexCoord4fARB() {
    if (glMultiTexCoord4fARB != null)
      return glMultiTexCoord4fARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4fARB = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParametersI4uivEXT;
  public static Command glNamedProgramLocalParametersI4uivEXT() {
    if (glNamedProgramLocalParametersI4uivEXT != null)
      return glNamedProgramLocalParametersI4uivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParametersI4uivEXT = cmd;
    return cmd;
  }
  private static Command glGenNamesAMD;
  public static Command glGenNamesAMD() {
    if (glGenNamesAMD != null)
      return glGenNamesAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("identifier", _null_());
    cmd.extension = GL_AMD_name_gen_delete();
    glGenNamesAMD = cmd;
    return cmd;
  }
  private static Command glGetIntegeri_v;
  public static Command glGetIntegeri_v() {
    if (glGetIntegeri_v != null)
      return glGetIntegeri_v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_ARB_uniform_buffer_object();
    glGetIntegeri_v = cmd;
    return cmd;
  }
  private static Command glGetMultiTexParameterIivEXT;
  public static Command glGetMultiTexParameterIivEXT() {
    if (glGetMultiTexParameterIivEXT != null)
      return glGetMultiTexParameterIivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glImportSyncEXT;
  public static Command glImportSyncEXT() {
    if (glImportSyncEXT != null)
      return glImportSyncEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("external_sync_type", _null_());
    cmd.addParam("flags", _null_());
    cmd.extension = GL_EXT_x11_sync_object();
    glImportSyncEXT = cmd;
    return cmd;
  }
  private static Command glCopyConvolutionFilter2D;
  public static Command glCopyConvolutionFilter2D() {
    if (glCopyConvolutionFilter2D != null)
      return glCopyConvolutionFilter2D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_imaging();
    glCopyConvolutionFilter2D = cmd;
    return cmd;
  }
  private static Command glDisableVertexAttribAPPLE;
  public static Command glDisableVertexAttribAPPLE() {
    if (glDisableVertexAttribAPPLE != null)
      return glDisableVertexAttribAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_vertex_program_evaluators();
    glDisableVertexAttribAPPLE = cmd;
    return cmd;
  }
  private static Command glMatrixMultTransposedEXT;
  public static Command glMatrixMultTransposedEXT() {
    if (glMatrixMultTransposedEXT != null)
      return glMatrixMultTransposedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixMultTransposedEXT = cmd;
    return cmd;
  }
  private static Command glGetBufferParameteriv;
  public static Command glGetBufferParameteriv() {
    if (glGetBufferParameteriv != null)
      return glGetBufferParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    glGetBufferParameteriv = cmd;
    return cmd;
  }
  private static Command glDrawBuffers;
  public static Command glDrawBuffers() {
    if (glDrawBuffers != null)
      return glDrawBuffers;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", _null_());
    glDrawBuffers = cmd;
    return cmd;
  }
  private static Command glSharpenTexFuncSGIS;
  public static Command glSharpenTexFuncSGIS() {
    if (glSharpenTexFuncSGIS != null)
      return glSharpenTexFuncSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_SGIS_sharpen_texture();
    glSharpenTexFuncSGIS = cmd;
    return cmd;
  }
  private static Command glSamplePatternSGIS;
  public static Command glSamplePatternSGIS() {
    if (glSamplePatternSGIS != null)
      return glSamplePatternSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pattern", SamplePatternSGIS());
    cmd.extension = GL_SGIS_multisample();
    glSamplePatternSGIS = cmd;
    return cmd;
  }
  private static Command glGetInternalformatSampleivNV;
  public static Command glGetInternalformatSampleivNV() {
    if (glGetInternalformatSampleivNV != null)
      return glGetInternalformatSampleivNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("pname", InternalFormatPName());
    cmd.extension = GL_NV_internalformat_sample_query();
    glGetInternalformatSampleivNV = cmd;
    return cmd;
  }
  private static Command glDebugMessageControlARB;
  public static Command glDebugMessageControlARB() {
    if (glDebugMessageControlARB != null)
      return glDebugMessageControlARB;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.addParam("type", DebugType());
    cmd.addParam("severity", DebugSeverity());
    cmd.addParam("enabled", Boolean());
    cmd.extension = GL_ARB_debug_output();
    glDebugMessageControlARB = cmd;
    return cmd;
  }
  private static Command glGetNamedProgramLocalParameterfvEXT;
  public static Command glGetNamedProgramLocalParameterfvEXT() {
    if (glGetNamedProgramLocalParameterfvEXT != null)
      return glGetNamedProgramLocalParameterfvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedProgramLocalParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glStencilMaskSeparate;
  public static Command glStencilMaskSeparate() {
    if (glStencilMaskSeparate != null)
      return glStencilMaskSeparate;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("face", StencilFaceDirection());
    glStencilMaskSeparate = cmd;
    return cmd;
  }
  private static Command glGetVideoui64vNV;
  public static Command glGetVideoui64vNV() {
    if (glGetVideoui64vNV != null)
      return glGetVideoui64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_present_video();
    glGetVideoui64vNV = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseVertexEXT;
  public static Command glDrawElementsInstancedBaseVertexEXT() {
    if (glDrawElementsInstancedBaseVertexEXT != null)
      return glDrawElementsInstancedBaseVertexEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsInstancedBaseVertexEXT = cmd;
    return cmd;
  }
  private static Command glGetDoublei_v;
  public static Command glGetDoublei_v() {
    if (glGetDoublei_v != null)
      return glGetDoublei_v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_ARB_viewport_array();
    glGetDoublei_v = cmd;
    return cmd;
  }
  private static Command glBlendFuncIndexedAMD;
  public static Command glBlendFuncIndexedAMD() {
    if (glBlendFuncIndexedAMD != null)
      return glBlendFuncIndexedAMD;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("src", _null_());
    cmd.addParam("dst", _null_());
    glBlendFuncIndexedAMD = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3iv;
  public static Command glMultiTexCoord3iv() {
    if (glMultiTexCoord3iv != null)
      return glMultiTexCoord3iv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3iv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3dARB;
  public static Command glMultiTexCoord3dARB() {
    if (glMultiTexCoord3dARB != null)
      return glMultiTexCoord3dARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3dARB = cmd;
    return cmd;
  }
  private static Command glGetColorTableParameterivEXT;
  public static Command glGetColorTableParameterivEXT() {
    if (glGetColorTableParameterivEXT != null)
      return glGetColorTableParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("pname", GetColorTableParameterPNameSGI());
    cmd.extension = GL_EXT_paletted_texture();
    glGetColorTableParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribfvNV;
  public static Command glGetVertexAttribfvNV() {
    if (glGetVertexAttribfvNV != null)
      return glGetVertexAttribfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetVertexAttribfvNV = cmd;
    return cmd;
  }
  private static Command glDisableVertexArrayEXT;
  public static Command glDisableVertexArrayEXT() {
    if (glDisableVertexArrayEXT != null)
      return glDisableVertexArrayEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glDisableVertexArrayEXT = cmd;
    return cmd;
  }
  private static Command glGetNamedProgramStringEXT;
  public static Command glGetNamedProgramStringEXT() {
    if (glGetNamedProgramStringEXT != null)
      return glGetNamedProgramStringEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedProgramStringEXT = cmd;
    return cmd;
  }
  private static Command glTexGendv;
  public static Command glTexGendv() {
    if (glTexGendv != null)
      return glTexGendv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glTexGendv = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameter4dEXT;
  public static Command glNamedProgramLocalParameter4dEXT() {
    if (glNamedProgramLocalParameter4dEXT != null)
      return glNamedProgramLocalParameter4dEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameter4dEXT = cmd;
    return cmd;
  }
  private static Command glAcquireKeyedMutexWin32EXT;
  public static Command glAcquireKeyedMutexWin32EXT() {
    if (glAcquireKeyedMutexWin32EXT != null)
      return glAcquireKeyedMutexWin32EXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glAcquireKeyedMutexWin32EXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexParameterfvEXT;
  public static Command glGetMultiTexParameterfvEXT() {
    if (glGetMultiTexParameterfvEXT != null)
      return glGetMultiTexParameterfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x4fvEXT;
  public static Command glProgramUniformMatrix2x4fvEXT() {
    if (glProgramUniformMatrix2x4fvEXT != null)
      return glProgramUniformMatrix2x4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix2x4fvEXT = cmd;
    return cmd;
  }
  private static Command glIsRenderbufferOES;
  public static Command glIsRenderbufferOES() {
    if (glIsRenderbufferOES != null)
      return glIsRenderbufferOES;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_OES_framebuffer_object();
    glIsRenderbufferOES = cmd;
    return cmd;
  }
  private static Command glGetClipPlanexOES;
  public static Command glGetClipPlanexOES() {
    if (glGetClipPlanexOES != null)
      return glGetClipPlanexOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    cmd.extension = GL_OES_fixed_point();
    glGetClipPlanexOES = cmd;
    return cmd;
  }
  private static Command glTextureParameterivEXT;
  public static Command glTextureParameterivEXT() {
    if (glTextureParameterivEXT != null)
      return glTextureParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureParameterivEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4x3fvNV;
  public static Command glUniformMatrix4x3fvNV() {
    if (glUniformMatrix4x3fvNV != null)
      return glUniformMatrix4x3fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_NV_non_square_matrices();
    glUniformMatrix4x3fvNV = cmd;
    return cmd;
  }
  private static Command glColorSubTable;
  public static Command glColorSubTable() {
    if (glColorSubTable != null)
      return glColorSubTable;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glColorSubTable = cmd;
    return cmd;
  }
  private static Command glAreTexturesResidentEXT;
  public static Command glAreTexturesResidentEXT() {
    if (glAreTexturesResidentEXT != null)
      return glAreTexturesResidentEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("residences", Boolean());
    cmd.extension = GL_EXT_texture_object();
    glAreTexturesResidentEXT = cmd;
    return cmd;
  }
  private static Command glGetConvolutionParameteriv;
  public static Command glGetConvolutionParameteriv() {
    if (glGetConvolutionParameteriv != null)
      return glGetConvolutionParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_ARB_imaging();
    glGetConvolutionParameteriv = cmd;
    return cmd;
  }
  private static Command glTestFenceAPPLE;
  public static Command glTestFenceAPPLE() {
    if (glTestFenceAPPLE != null)
      return glTestFenceAPPLE;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_APPLE_fence();
    glTestFenceAPPLE = cmd;
    return cmd;
  }
  private static Command glMultiTexSubImage2DEXT;
  public static Command glMultiTexSubImage2DEXT() {
    if (glMultiTexSubImage2DEXT != null)
      return glMultiTexSubImage2DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glTexGenfv;
  public static Command glTexGenfv() {
    if (glTexGenfv != null)
      return glTexGenfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glTexGenfv = cmd;
    return cmd;
  }
  private static Command glGetConvolutionParameterfv;
  public static Command glGetConvolutionParameterfv() {
    if (glGetConvolutionParameterfv != null)
      return glGetConvolutionParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_ARB_imaging();
    glGetConvolutionParameterfv = cmd;
    return cmd;
  }
  private static Command glClampColor;
  public static Command glClampColor() {
    if (glClampColor != null)
      return glClampColor;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("clamp", _null_());
    glClampColor = cmd;
    return cmd;
  }
  private static Command glCompressedTextureImage2DEXT;
  public static Command glCompressedTextureImage2DEXT() {
    if (glCompressedTextureImage2DEXT != null)
      return glCompressedTextureImage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedTextureImage2DEXT = cmd;
    return cmd;
  }
  private static Command glGetProgramStringARB;
  public static Command glGetProgramStringARB() {
    if (glGetProgramStringARB != null)
      return glGetProgramStringARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glGetProgramStringARB = cmd;
    return cmd;
  }
  private static Command glVertexPointerListIBM;
  public static Command glVertexPointerListIBM() {
    if (glVertexPointerListIBM != null)
      return glVertexPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_IBM_vertex_array_lists();
    glVertexPointerListIBM = cmd;
    return cmd;
  }
  private static Command glImageTransformParameteriHP;
  public static Command glImageTransformParameteriHP() {
    if (glImageTransformParameteriHP != null)
      return glImageTransformParameteriHP;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_HP_image_transform();
    glImageTransformParameteriHP = cmd;
    return cmd;
  }
  private static Command glDrawElements;
  public static Command glDrawElements() {
    if (glDrawElements != null)
      return glDrawElements;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElements = cmd;
    return cmd;
  }
  private static Command glSamplerParameterIuivOES;
  public static Command glSamplerParameterIuivOES() {
    if (glSamplerParameterIuivOES != null)
      return glSamplerParameterIuivOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_OES_texture_border_clamp();
    glSamplerParameterIuivOES = cmd;
    return cmd;
  }
  private static Command glMulticastCopyImageSubDataNV;
  public static Command glMulticastCopyImageSubDataNV() {
    if (glMulticastCopyImageSubDataNV != null)
      return glMulticastCopyImageSubDataNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("dstGpuMask", _null_());
    cmd.addParam("srcTarget", _null_());
    cmd.addParam("dstTarget", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastCopyImageSubDataNV = cmd;
    return cmd;
  }
  private static Command glBlendFunciEXT;
  public static Command glBlendFunciEXT() {
    if (glBlendFunciEXT != null)
      return glBlendFunciEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("src", BlendingFactor());
    cmd.addParam("dst", BlendingFactor());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glBlendFunciEXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexEnvfvEXT;
  public static Command glGetMultiTexEnvfvEXT() {
    if (glGetMultiTexEnvfvEXT != null)
      return glGetMultiTexEnvfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexEnvfvEXT = cmd;
    return cmd;
  }
  private static Command glDisableiEXT;
  public static Command glDisableiEXT() {
    if (glDisableiEXT != null)
      return glDisableiEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glDisableiEXT = cmd;
    return cmd;
  }
  private static Command glFogiv;
  public static Command glFogiv() {
    if (glFogiv != null)
      return glFogiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogParameter());
    glFogiv = cmd;
    return cmd;
  }
  private static Command glBlendFunc;
  public static Command glBlendFunc() {
    if (glBlendFunc != null)
      return glBlendFunc;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("sfactor", BlendingFactor());
    cmd.addParam("dfactor", BlendingFactor());
    glBlendFunc = cmd;
    return cmd;
  }
  private static Command glGetFixedv;
  public static Command glGetFixedv() {
    if (glGetFixedv != null)
      return glGetFixedv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    glGetFixedv = cmd;
    return cmd;
  }
  private static Command glTexGeniv;
  public static Command glTexGeniv() {
    if (glTexGeniv != null)
      return glTexGeniv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glTexGeniv = cmd;
    return cmd;
  }
  private static Command glMulticastGetQueryObjectivNV;
  public static Command glMulticastGetQueryObjectivNV() {
    if (glMulticastGetQueryObjectivNV != null)
      return glMulticastGetQueryObjectivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastGetQueryObjectivNV = cmd;
    return cmd;
  }
  private static Command glGetImageHandleNV;
  public static Command glGetImageHandleNV() {
    if (glGetImageHandleNV != null)
      return glGetImageHandleNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("layered", Boolean());
    cmd.addParam("format", PixelFormat());
    glGetImageHandleNV = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTexture2DEXT;
  public static Command glNamedFramebufferTexture2DEXT() {
    if (glNamedFramebufferTexture2DEXT != null)
      return glNamedFramebufferTexture2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferTexture2DEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4ivARB;
  public static Command glMultiTexCoord4ivARB() {
    if (glMultiTexCoord4ivARB != null)
      return glMultiTexCoord4ivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4ivARB = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureLayerARB;
  public static Command glFramebufferTextureLayerARB() {
    if (glFramebufferTextureLayerARB != null)
      return glFramebufferTextureLayerARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_ARB_geometry_shader4();
    glFramebufferTextureLayerARB = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterIiv;
  public static Command glGetTextureParameterIiv() {
    if (glGetTextureParameterIiv != null)
      return glGetTextureParameterIiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureParameterIiv = cmd;
    return cmd;
  }
  private static Command glVertexAttribP3uiv;
  public static Command glVertexAttribP3uiv() {
    if (glVertexAttribP3uiv != null)
      return glVertexAttribP3uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP3uiv = cmd;
    return cmd;
  }
  private static Command glTransformFeedbackVaryingsEXT;
  public static Command glTransformFeedbackVaryingsEXT() {
    if (glTransformFeedbackVaryingsEXT != null)
      return glTransformFeedbackVaryingsEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufferMode", _null_());
    cmd.extension = GL_EXT_transform_feedback();
    glTransformFeedbackVaryingsEXT = cmd;
    return cmd;
  }
  private static Command glFogfv;
  public static Command glFogfv() {
    if (glFogfv != null)
      return glFogfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogParameter());
    glFogfv = cmd;
    return cmd;
  }
  private static Command glMultiTexGenivEXT;
  public static Command glMultiTexGenivEXT() {
    if (glMultiTexGenivEXT != null)
      return glMultiTexGenivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexGenivEXT = cmd;
    return cmd;
  }
  private static Command glEnableiNV;
  public static Command glEnableiNV() {
    if (glEnableiNV != null)
      return glEnableiNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_NV_viewport_array();
    glEnableiNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4hNV;
  public static Command glMultiTexCoord4hNV() {
    if (glMultiTexCoord4hNV != null)
      return glMultiTexCoord4hNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord4hNV = cmd;
    return cmd;
  }
  private static Command glGetCommandHeaderNV;
  public static Command glGetCommandHeaderNV() {
    if (glGetCommandHeaderNV != null)
      return glGetCommandHeaderNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("tokenID", _null_());
    cmd.extension = GL_NV_command_list();
    glGetCommandHeaderNV = cmd;
    return cmd;
  }
  private static Command glUnmapBufferARB;
  public static Command glUnmapBufferARB() {
    if (glUnmapBufferARB != null)
      return glUnmapBufferARB;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glUnmapBufferARB = cmd;
    return cmd;
  }
  private static Command glUnmapNamedBufferEXT;
  public static Command glUnmapNamedBufferEXT() {
    if (glUnmapNamedBufferEXT != null)
      return glUnmapNamedBufferEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_direct_state_access();
    glUnmapNamedBufferEXT = cmd;
    return cmd;
  }
  private static Command glGetNamedProgramLocalParameterdvEXT;
  public static Command glGetNamedProgramLocalParameterdvEXT() {
    if (glGetNamedProgramLocalParameterdvEXT != null)
      return glGetNamedProgramLocalParameterdvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedProgramLocalParameterdvEXT = cmd;
    return cmd;
  }
  private static Command glGetBufferParameterivARB;
  public static Command glGetBufferParameterivARB() {
    if (glGetBufferParameterivARB != null)
      return glGetBufferParameterivARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glGetBufferParameterivARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2f;
  public static Command glMultiTexCoord2f() {
    if (glMultiTexCoord2f != null)
      return glMultiTexCoord2f;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2f = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2d;
  public static Command glMultiTexCoord2d() {
    if (glMultiTexCoord2d != null)
      return glMultiTexCoord2d;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2d = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2i;
  public static Command glMultiTexCoord2i() {
    if (glMultiTexCoord2i != null)
      return glMultiTexCoord2i;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2i = cmd;
    return cmd;
  }
  private static Command glReadnPixelsKHR;
  public static Command glReadnPixelsKHR() {
    if (glReadnPixelsKHR != null)
      return glReadnPixelsKHR;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_KHR_robustness();
    glReadnPixelsKHR = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4x3dv;
  public static Command glUniformMatrix4x3dv() {
    if (glUniformMatrix4x3dv != null)
      return glUniformMatrix4x3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix4x3dv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1s;
  public static Command glMultiTexCoord1s() {
    if (glMultiTexCoord1s != null)
      return glMultiTexCoord1s;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1s = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedbackInstancedEXT;
  public static Command glDrawTransformFeedbackInstancedEXT() {
    if (glDrawTransformFeedbackInstancedEXT != null)
      return glDrawTransformFeedbackInstancedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawTransformFeedbackInstancedEXT = cmd;
    return cmd;
  }
  private static Command glNormalPointervINTEL;
  public static Command glNormalPointervINTEL() {
    if (glNormalPointervINTEL != null)
      return glNormalPointervINTEL;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    cmd.extension = GL_INTEL_parallel_arrays();
    glNormalPointervINTEL = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3x4fvNV;
  public static Command glUniformMatrix3x4fvNV() {
    if (glUniformMatrix3x4fvNV != null)
      return glUniformMatrix3x4fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_NV_non_square_matrices();
    glUniformMatrix3x4fvNV = cmd;
    return cmd;
  }
  private static Command glGetPathParameterfvNV;
  public static Command glGetPathParameterfvNV() {
    if (glGetPathParameterfvNV != null)
      return glGetPathParameterfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PathParameter());
    cmd.extension = GL_NV_path_rendering();
    glGetPathParameterfvNV = cmd;
    return cmd;
  }
  private static Command glFenceSyncAPPLE;
  public static Command glFenceSyncAPPLE() {
    if (glFenceSyncAPPLE != null)
      return glFenceSyncAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("condition", SyncCondition());
    cmd.addParam("flags", _null_());
    cmd.extension = GL_APPLE_sync();
    glFenceSyncAPPLE = cmd;
    return cmd;
  }
  private static Command glGetTexGenfv;
  public static Command glGetTexGenfv() {
    if (glGetTexGenfv != null)
      return glGetTexGenfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glGetTexGenfv = cmd;
    return cmd;
  }
  private static Command glIsShader;
  public static Command glIsShader() {
    if (glIsShader != null)
      return glIsShader;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsShader = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1f;
  public static Command glMultiTexCoord1f() {
    if (glMultiTexCoord1f != null)
      return glMultiTexCoord1f;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1f = cmd;
    return cmd;
  }
  private static Command glBlendFunci;
  public static Command glBlendFunci() {
    if (glBlendFunci != null)
      return glBlendFunci;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("src", BlendingFactor());
    cmd.addParam("dst", BlendingFactor());
    glBlendFunci = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1d;
  public static Command glMultiTexCoord1d() {
    if (glMultiTexCoord1d != null)
      return glMultiTexCoord1d;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1d = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1i;
  public static Command glMultiTexCoord1i() {
    if (glMultiTexCoord1i != null)
      return glMultiTexCoord1i;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1i = cmd;
    return cmd;
  }
  private static Command glClipPlanexIMG;
  public static Command glClipPlanexIMG() {
    if (glClipPlanexIMG != null)
      return glClipPlanexIMG;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("p", ClipPlaneName());
    cmd.extension = GL_IMG_user_clip_plane();
    glClipPlanexIMG = cmd;
    return cmd;
  }
  private static Command glGetProgramParameterdvNV;
  public static Command glGetProgramParameterdvNV() {
    if (glGetProgramParameterdvNV != null)
      return glGetProgramParameterdvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetProgramParameterdvNV = cmd;
    return cmd;
  }
  private static Command glGetInternalformati64v;
  public static Command glGetInternalformati64v() {
    if (glGetInternalformati64v != null)
      return glGetInternalformati64v;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("pname", InternalFormatPName());
    cmd.extension = GL_ARB_internalformat_query2();
    glGetInternalformati64v = cmd;
    return cmd;
  }
  private static Command glGetNamedBufferParameteriv;
  public static Command glGetNamedBufferParameteriv() {
    if (glGetNamedBufferParameteriv != null)
      return glGetNamedBufferParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexBufferObjectParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetNamedBufferParameteriv = cmd;
    return cmd;
  }
  private static Command glPathGlyphIndexArrayNV;
  public static Command glPathGlyphIndexArrayNV() {
    if (glPathGlyphIndexArrayNV != null)
      return glPathGlyphIndexArrayNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("fontTarget", _null_());
    cmd.addParam("fontStyle", PathFontStyle());
    cmd.extension = GL_NV_path_rendering();
    glPathGlyphIndexArrayNV = cmd;
    return cmd;
  }
  private static Command glGetVariantIntegervEXT;
  public static Command glGetVariantIntegervEXT() {
    if (glGetVariantIntegervEXT != null)
      return glGetVariantIntegervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetVariantIntegervEXT = cmd;
    return cmd;
  }
  private static Command glDepthFunc;
  public static Command glDepthFunc() {
    if (glDepthFunc != null)
      return glDepthFunc;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", DepthFunction());
    glDepthFunc = cmd;
    return cmd;
  }
  private static Command glGetTexGeniv;
  public static Command glGetTexGeniv() {
    if (glGetTexGeniv != null)
      return glGetTexGeniv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glGetTexGeniv = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4x3fv;
  public static Command glUniformMatrix4x3fv() {
    if (glUniformMatrix4x3fv != null)
      return glUniformMatrix4x3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix4x3fv = cmd;
    return cmd;
  }
  private static Command glConvolutionFilter2DEXT;
  public static Command glConvolutionFilter2DEXT() {
    if (glConvolutionFilter2DEXT != null)
      return glConvolutionFilter2DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_convolution();
    glConvolutionFilter2DEXT = cmd;
    return cmd;
  }
  private static Command glDrawBuffersARB;
  public static Command glDrawBuffersARB() {
    if (glDrawBuffersARB != null)
      return glDrawBuffersARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", _null_());
    cmd.extension = GL_ARB_draw_buffers();
    glDrawBuffersARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4iARB;
  public static Command glMultiTexCoord4iARB() {
    if (glMultiTexCoord4iARB != null)
      return glMultiTexCoord4iARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4iARB = cmd;
    return cmd;
  }
  private static Command glSecondaryColorFormatNV;
  public static Command glSecondaryColorFormatNV() {
    if (glSecondaryColorFormatNV != null)
      return glSecondaryColorFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glSecondaryColorFormatNV = cmd;
    return cmd;
  }
  private static Command glMakeBufferResidentNV;
  public static Command glMakeBufferResidentNV() {
    if (glMakeBufferResidentNV != null)
      return glMakeBufferResidentNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("access", _null_());
    cmd.extension = GL_NV_shader_buffer_load();
    glMakeBufferResidentNV = cmd;
    return cmd;
  }
  private static Command glCopyTexImage1D;
  public static Command glCopyTexImage1D() {
    if (glCopyTexImage1D != null)
      return glCopyTexImage1D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCopyTexImage1D = cmd;
    return cmd;
  }
  private static Command glGetPixelMapxv;
  public static Command glGetPixelMapxv() {
    if (glGetPixelMapxv != null)
      return glGetPixelMapxv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    cmd.extension = GL_OES_fixed_point();
    glGetPixelMapxv = cmd;
    return cmd;
  }
  private static Command glDisableiNV;
  public static Command glDisableiNV() {
    if (glDisableiNV != null)
      return glDisableiNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_NV_viewport_array();
    glDisableiNV = cmd;
    return cmd;
  }
  private static Command glVDPAUIsSurfaceNV;
  public static Command glVDPAUIsSurfaceNV() {
    if (glVDPAUIsSurfaceNV != null)
      return glVDPAUIsSurfaceNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_vdpau_interop();
    glVDPAUIsSurfaceNV = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparate;
  public static Command glBlendEquationSeparate() {
    if (glBlendEquationSeparate != null)
      return glBlendEquationSeparate;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    glBlendEquationSeparate = cmd;
    return cmd;
  }
  private static Command glGetTextureLevelParameterfvEXT;
  public static Command glGetTextureLevelParameterfvEXT() {
    if (glGetTextureLevelParameterfvEXT != null)
      return glGetTextureLevelParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureLevelParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glImageTransformParameterivHP;
  public static Command glImageTransformParameterivHP() {
    if (glImageTransformParameterivHP != null)
      return glImageTransformParameterivHP;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_HP_image_transform();
    glImageTransformParameterivHP = cmd;
    return cmd;
  }
  private static Command glColorFormatNV;
  public static Command glColorFormatNV() {
    if (glColorFormatNV != null)
      return glColorFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glColorFormatNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1sv;
  public static Command glMultiTexCoord1sv() {
    if (glMultiTexCoord1sv != null)
      return glMultiTexCoord1sv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1sv = cmd;
    return cmd;
  }
  private static Command glTransformFeedbackVaryingsNV;
  public static Command glTransformFeedbackVaryingsNV() {
    if (glTransformFeedbackVaryingsNV != null)
      return glTransformFeedbackVaryingsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufferMode", _null_());
    cmd.extension = GL_NV_transform_feedback();
    glTransformFeedbackVaryingsNV = cmd;
    return cmd;
  }
  private static Command glSeparableFilter2D;
  public static Command glSeparableFilter2D() {
    if (glSeparableFilter2D != null)
      return glSeparableFilter2D;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", SeparableTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glSeparableFilter2D = cmd;
    return cmd;
  }
  private static Command glCopyTexImage2D;
  public static Command glCopyTexImage2D() {
    if (glCopyTexImage2D != null)
      return glCopyTexImage2D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCopyTexImage2D = cmd;
    return cmd;
  }
  private static Command glGetPathMetricsNV;
  public static Command glGetPathMetricsNV() {
    if (glGetPathMetricsNV != null)
      return glGetPathMetricsNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("metricQueryMask", PathMetricMask());
    cmd.addParam("pathNameType", PathElementType());
    cmd.extension = GL_NV_path_rendering();
    glGetPathMetricsNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x3fv;
  public static Command glProgramUniformMatrix4x3fv() {
    if (glProgramUniformMatrix4x3fv != null)
      return glProgramUniformMatrix4x3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix4x3fv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4s;
  public static Command glMultiTexCoord4s() {
    if (glMultiTexCoord4s != null)
      return glMultiTexCoord4s;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4s = cmd;
    return cmd;
  }
  private static Command glDisableClientStateIndexedEXT;
  public static Command glDisableClientStateIndexedEXT() {
    if (glDisableClientStateIndexedEXT != null)
      return glDisableClientStateIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glDisableClientStateIndexedEXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexLevelParameterivEXT;
  public static Command glGetMultiTexLevelParameterivEXT() {
    if (glGetMultiTexLevelParameterivEXT != null)
      return glGetMultiTexLevelParameterivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexLevelParameterivEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4x;
  public static Command glMultiTexCoord4x() {
    if (glMultiTexCoord4x != null)
      return glMultiTexCoord4x;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    glMultiTexCoord4x = cmd;
    return cmd;
  }
  private static Command glPathGlyphsNV;
  public static Command glPathGlyphsNV() {
    if (glPathGlyphsNV != null)
      return glPathGlyphsNV;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("fontTarget", PathFontTarget());
    cmd.addParam("fontStyle", PathFontStyle());
    cmd.addParam("type", PathElementType());
    cmd.addParam("handleMissingGlyphs", PathHandleMissingGlyphs());
    cmd.extension = GL_NV_path_rendering();
    glPathGlyphsNV = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferDrawBuffers;
  public static Command glNamedFramebufferDrawBuffers() {
    if (glNamedFramebufferDrawBuffers != null)
      return glNamedFramebufferDrawBuffers;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", ColorBuffer());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferDrawBuffers = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirectBindlessCountNV;
  public static Command glMultiDrawElementsIndirectBindlessCountNV() {
    if (glMultiDrawElementsIndirectBindlessCountNV != null)
      return glMultiDrawElementsIndirectBindlessCountNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsIndirectBindlessCountNV = cmd;
    return cmd;
  }
  private static Command glBindBufferARB;
  public static Command glBindBufferARB() {
    if (glBindBufferARB != null)
      return glBindBufferARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glBindBufferARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4d;
  public static Command glMultiTexCoord4d() {
    if (glMultiTexCoord4d != null)
      return glMultiTexCoord4d;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4d = cmd;
    return cmd;
  }
  private static Command glTextureParameterfEXT;
  public static Command glTextureParameterfEXT() {
    if (glTextureParameterfEXT != null)
      return glTextureParameterfEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureParameterfEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4i;
  public static Command glMultiTexCoord4i() {
    if (glMultiTexCoord4i != null)
      return glMultiTexCoord4i;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4i = cmd;
    return cmd;
  }
  private static Command glDrawElementsBaseVertex;
  public static Command glDrawElementsBaseVertex() {
    if (glDrawElementsBaseVertex != null)
      return glDrawElementsBaseVertex;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsBaseVertex = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4f;
  public static Command glMultiTexCoord4f() {
    if (glMultiTexCoord4f != null)
      return glMultiTexCoord4f;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord4f = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3s;
  public static Command glMultiTexCoord3s() {
    if (glMultiTexCoord3s != null)
      return glMultiTexCoord3s;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3s = cmd;
    return cmd;
  }
  private static Command glFlushMappedBufferRangeEXT;
  public static Command glFlushMappedBufferRangeEXT() {
    if (glFlushMappedBufferRangeEXT != null)
      return glFlushMappedBufferRangeEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_EXT_map_buffer_range();
    glFlushMappedBufferRangeEXT = cmd;
    return cmd;
  }
  private static Command glGetnPixelMapfv;
  public static Command glGetnPixelMapfv() {
    if (glGetnPixelMapfv != null)
      return glGetnPixelMapfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glGetnPixelMapfv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3d;
  public static Command glMultiTexCoord3d() {
    if (glMultiTexCoord3d != null)
      return glMultiTexCoord3d;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3d = cmd;
    return cmd;
  }
  private static Command glDiscardFramebufferEXT;
  public static Command glDiscardFramebufferEXT() {
    if (glDiscardFramebufferEXT != null)
      return glDiscardFramebufferEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("attachments", _null_());
    cmd.extension = GL_EXT_discard_framebuffer();
    glDiscardFramebufferEXT = cmd;
    return cmd;
  }
  private static Command glGetTexGendv;
  public static Command glGetTexGendv() {
    if (glGetTexGendv != null)
      return glGetTexGendv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glGetTexGendv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3f;
  public static Command glMultiTexCoord3f() {
    if (glMultiTexCoord3f != null)
      return glMultiTexCoord3f;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3f = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x3dv;
  public static Command glProgramUniformMatrix4x3dv() {
    if (glProgramUniformMatrix4x3dv != null)
      return glProgramUniformMatrix4x3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix4x3dv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3i;
  public static Command glMultiTexCoord3i() {
    if (glMultiTexCoord3i != null)
      return glMultiTexCoord3i;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord3i = cmd;
    return cmd;
  }
  private static Command glCreateShaderObjectARB;
  public static Command glCreateShaderObjectARB() {
    if (glCreateShaderObjectARB != null)
      return glCreateShaderObjectARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shaderType", ShaderType());
    cmd.extension = GL_ARB_shader_objects();
    glCreateShaderObjectARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2s;
  public static Command glMultiTexCoord2s() {
    if (glMultiTexCoord2s != null)
      return glMultiTexCoord2s;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2s = cmd;
    return cmd;
  }
  private static Command glCullParameterdvEXT;
  public static Command glCullParameterdvEXT() {
    if (glCullParameterdvEXT != null)
      return glCullParameterdvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_cull_vertex();
    glCullParameterdvEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream2sATI;
  public static Command glVertexStream2sATI() {
    if (glVertexStream2sATI != null)
      return glVertexStream2sATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2sATI = cmd;
    return cmd;
  }
  private static Command glListParameterivSGIX;
  public static Command glListParameterivSGIX() {
    if (glListParameterivSGIX != null)
      return glListParameterivSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ListParameterName());
    cmd.extension = GL_SGIX_list_priority();
    glListParameterivSGIX = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorage;
  public static Command glRenderbufferStorage() {
    if (glRenderbufferStorage != null)
      return glRenderbufferStorage;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_framebuffer_object();
    glRenderbufferStorage = cmd;
    return cmd;
  }
  private static Command glGetHistogramParameteriv;
  public static Command glGetHistogramParameteriv() {
    if (glGetHistogramParameteriv != null)
      return glGetHistogramParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("pname", GetHistogramParameterPNameEXT());
    cmd.extension = GL_ARB_imaging();
    glGetHistogramParameteriv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2iv;
  public static Command glMultiTexCoord2iv() {
    if (glMultiTexCoord2iv != null)
      return glMultiTexCoord2iv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2iv = cmd;
    return cmd;
  }
  private static Command glTextureStorageMem2DEXT;
  public static Command glTextureStorageMem2DEXT() {
    if (glTextureStorageMem2DEXT != null)
      return glTextureStorageMem2DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalFormat", _null_());
    cmd.extension = GL_EXT_memory_object();
    glTextureStorageMem2DEXT = cmd;
    return cmd;
  }
  private static Command glGetListParameterfvSGIX;
  public static Command glGetListParameterfvSGIX() {
    if (glGetListParameterfvSGIX != null)
      return glGetListParameterfvSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ListParameterName());
    cmd.extension = GL_SGIX_list_priority();
    glGetListParameterfvSGIX = cmd;
    return cmd;
  }
  private static Command glPathStencilFuncNV;
  public static Command glPathStencilFuncNV() {
    if (glPathStencilFuncNV != null)
      return glPathStencilFuncNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", StencilFunction());
    cmd.extension = GL_NV_path_rendering();
    glPathStencilFuncNV = cmd;
    return cmd;
  }
  private static Command glAlphaFragmentOp3ATI;
  public static Command glAlphaFragmentOp3ATI() {
    if (glAlphaFragmentOp3ATI != null)
      return glAlphaFragmentOp3ATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", FragmentOpATI());
    cmd.extension = GL_ATI_fragment_shader();
    glAlphaFragmentOp3ATI = cmd;
    return cmd;
  }
  private static Command glSampleCoveragex;
  public static Command glSampleCoveragex() {
    if (glSampleCoveragex != null)
      return glSampleCoveragex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("invert", Boolean());
    glSampleCoveragex = cmd;
    return cmd;
  }
  private static Command glGetInvariantBooleanvEXT;
  public static Command glGetInvariantBooleanvEXT() {
    if (glGetInvariantBooleanvEXT != null)
      return glGetInvariantBooleanvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.addParam("data", Boolean());
    cmd.extension = GL_EXT_vertex_shader();
    glGetInvariantBooleanvEXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexParameterIuivEXT;
  public static Command glGetMultiTexParameterIuivEXT() {
    if (glGetMultiTexParameterIuivEXT != null)
      return glGetMultiTexParameterIuivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glGetInteger64v;
  public static Command glGetInteger64v() {
    if (glGetInteger64v != null)
      return glGetInteger64v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    cmd.extension = GL_ARB_sync();
    glGetInteger64v = cmd;
    return cmd;
  }
  private static Command glSamplerParameterIivOES;
  public static Command glSamplerParameterIivOES() {
    if (glSamplerParameterIivOES != null)
      return glSamplerParameterIivOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_OES_texture_border_clamp();
    glSamplerParameterIivOES = cmd;
    return cmd;
  }
  private static Command glGetPixelMapuiv;
  public static Command glGetPixelMapuiv() {
    if (glGetPixelMapuiv != null)
      return glGetPixelMapuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glGetPixelMapuiv = cmd;
    return cmd;
  }
  private static Command glGetTexParameterIuivEXT;
  public static Command glGetTexParameterIuivEXT() {
    if (glGetTexParameterIuivEXT != null)
      return glGetTexParameterIuivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_texture_border_clamp();
    glGetTexParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glAlphaFuncQCOM;
  public static Command glAlphaFuncQCOM() {
    if (glAlphaFuncQCOM != null)
      return glAlphaFuncQCOM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", _null_());
    cmd.extension = GL_QCOM_alpha_test();
    glAlphaFuncQCOM = cmd;
    return cmd;
  }
  private static Command glGetSynciv;
  public static Command glGetSynciv() {
    if (glGetSynciv != null)
      return glGetSynciv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SyncParameterName());
    cmd.extension = GL_ARB_sync();
    glGetSynciv = cmd;
    return cmd;
  }
  private static Command glVertexArraySecondaryColorOffsetEXT;
  public static Command glVertexArraySecondaryColorOffsetEXT() {
    if (glVertexArraySecondaryColorOffsetEXT != null)
      return glVertexArraySecondaryColorOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArraySecondaryColorOffsetEXT = cmd;
    return cmd;
  }
  private static Command glProgramParameter4dvNV;
  public static Command glProgramParameter4dvNV() {
    if (glProgramParameter4dvNV != null)
      return glProgramParameter4dvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glProgramParameter4dvNV = cmd;
    return cmd;
  }
  private static Command glMultiTexEnviEXT;
  public static Command glMultiTexEnviEXT() {
    if (glMultiTexEnviEXT != null)
      return glMultiTexEnviEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexEnviEXT = cmd;
    return cmd;
  }
  private static Command glConservativeRasterParameterfNV;
  public static Command glConservativeRasterParameterfNV() {
    if (glConservativeRasterParameterfNV != null)
      return glConservativeRasterParameterfNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_conservative_raster_dilate();
    glConservativeRasterParameterfNV = cmd;
    return cmd;
  }
  private static Command glBindImageTextureEXT;
  public static Command glBindImageTextureEXT() {
    if (glBindImageTextureEXT != null)
      return glBindImageTextureEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("layered", Boolean());
    cmd.addParam("access", BufferAccessARB());
    cmd.extension = GL_EXT_shader_image_load_store();
    glBindImageTextureEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream1fATI;
  public static Command glVertexStream1fATI() {
    if (glVertexStream1fATI != null)
      return glVertexStream1fATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1fATI = cmd;
    return cmd;
  }
  private static Command glExtGetProgramBinarySourceQCOM;
  public static Command glExtGetProgramBinarySourceQCOM() {
    if (glExtGetProgramBinarySourceQCOM != null)
      return glExtGetProgramBinarySourceQCOM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    glExtGetProgramBinarySourceQCOM = cmd;
    return cmd;
  }
  private static Command glImportSemaphoreFdEXT;
  public static Command glImportSemaphoreFdEXT() {
    if (glImportSemaphoreFdEXT != null)
      return glImportSemaphoreFdEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("handleType", ExternalHandleType());
    cmd.extension = GL_EXT_semaphore_fd();
    glImportSemaphoreFdEXT = cmd;
    return cmd;
  }
  private static Command glGetHistogramParameterfv;
  public static Command glGetHistogramParameterfv() {
    if (glGetHistogramParameterfv != null)
      return glGetHistogramParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("pname", GetHistogramParameterPNameEXT());
    cmd.extension = GL_ARB_imaging();
    glGetHistogramParameterfv = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirectBindlessNV;
  public static Command glMultiDrawArraysIndirectBindlessNV() {
    if (glMultiDrawArraysIndirectBindlessNV != null)
      return glMultiDrawArraysIndirectBindlessNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysIndirectBindlessNV = cmd;
    return cmd;
  }
  private static Command glMulticastGetQueryObjectuivNV;
  public static Command glMulticastGetQueryObjectuivNV() {
    if (glMulticastGetQueryObjectuivNV != null)
      return glMulticastGetQueryObjectuivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastGetQueryObjectuivNV = cmd;
    return cmd;
  }
  private static Command glNamedRenderbufferStorageEXT;
  public static Command glNamedRenderbufferStorageEXT() {
    if (glNamedRenderbufferStorageEXT != null)
      return glNamedRenderbufferStorageEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedRenderbufferStorageEXT = cmd;
    return cmd;
  }
  private static Command glVertexAttribIFormatNV;
  public static Command glVertexAttribIFormatNV() {
    if (glVertexAttribIFormatNV != null)
      return glVertexAttribIFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glVertexAttribIFormatNV = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureOES;
  public static Command glFramebufferTextureOES() {
    if (glFramebufferTextureOES != null)
      return glFramebufferTextureOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_OES_geometry_shader();
    glFramebufferTextureOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4xvOES;
  public static Command glMultiTexCoord4xvOES() {
    if (glMultiTexCoord4xvOES != null)
      return glMultiTexCoord4xvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord4xvOES = cmd;
    return cmd;
  }
  private static Command glCreateShaderProgramv;
  public static Command glCreateShaderProgramv() {
    if (glCreateShaderProgramv != null)
      return glCreateShaderProgramv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ShaderType());
    cmd.extension = GL_ARB_separate_shader_objects();
    glCreateShaderProgramv = cmd;
    return cmd;
  }
  private static Command glGetnSeparableFilterARB;
  public static Command glGetnSeparableFilterARB() {
    if (glGetnSeparableFilterARB != null)
      return glGetnSeparableFilterARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", SeparableTargetEXT());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glGetnSeparableFilterARB = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4fv;
  public static Command glProgramUniformMatrix4fv() {
    if (glProgramUniformMatrix4fv != null)
      return glProgramUniformMatrix4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix4fv = cmd;
    return cmd;
  }
  private static Command glGetTransformFeedbackVarying;
  public static Command glGetTransformFeedbackVarying() {
    if (glGetTransformFeedbackVarying != null)
      return glGetTransformFeedbackVarying;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    glGetTransformFeedbackVarying = cmd;
    return cmd;
  }
  private static Command glDrawBuffersATI;
  public static Command glDrawBuffersATI() {
    if (glDrawBuffersATI != null)
      return glDrawBuffersATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", _null_());
    cmd.extension = GL_ATI_draw_buffers();
    glDrawBuffersATI = cmd;
    return cmd;
  }
  private static Command glFogxv;
  public static Command glFogxv() {
    if (glFogxv != null)
      return glFogxv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogPName());
    glFogxv = cmd;
    return cmd;
  }
  private static Command glVertexAttribLFormat;
  public static Command glVertexAttribLFormat() {
    if (glVertexAttribLFormat != null)
      return glVertexAttribLFormat;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribType());
    cmd.extension = GL_ARB_vertex_attrib_binding();
    glVertexAttribLFormat = cmd;
    return cmd;
  }
  private static Command glColorPointer;
  public static Command glColorPointer() {
    if (glColorPointer != null)
      return glColorPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    glColorPointer = cmd;
    return cmd;
  }
  private static Command glDisableIndexedEXT;
  public static Command glDisableIndexedEXT() {
    if (glDisableIndexedEXT != null)
      return glDisableIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glDisableIndexedEXT = cmd;
    return cmd;
  }
  private static Command glGetDebugMessageLogKHR;
  public static Command glGetDebugMessageLogKHR() {
    if (glGetDebugMessageLogKHR != null)
      return glGetDebugMessageLogKHR;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("sources", DebugSource());
    cmd.addParam("types", DebugType());
    cmd.addParam("severities", DebugSeverity());
    cmd.extension = GL_KHR_debug();
    glGetDebugMessageLogKHR = cmd;
    return cmd;
  }
  private static Command glTexImage4DSGIS;
  public static Command glTexImage4DSGIS() {
    if (glTexImage4DSGIS != null)
      return glTexImage4DSGIS;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_SGIS_texture4D();
    glTexImage4DSGIS = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4dv;
  public static Command glProgramUniformMatrix4dv() {
    if (glProgramUniformMatrix4dv != null)
      return glProgramUniformMatrix4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix4dv = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferReadBuffer;
  public static Command glNamedFramebufferReadBuffer() {
    if (glNamedFramebufferReadBuffer != null)
      return glNamedFramebufferReadBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("src", ColorBuffer());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferReadBuffer = cmd;
    return cmd;
  }
  private static Command glGetVideoCaptureivNV;
  public static Command glGetVideoCaptureivNV() {
    if (glGetVideoCaptureivNV != null)
      return glGetVideoCaptureivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glGetVideoCaptureivNV = cmd;
    return cmd;
  }
  private static Command glNormalStream3dvATI;
  public static Command glNormalStream3dvATI() {
    if (glNormalStream3dvATI != null)
      return glNormalStream3dvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3dvATI = cmd;
    return cmd;
  }
  private static Command glVertexArrayAttribLFormat;
  public static Command glVertexArrayAttribLFormat() {
    if (glVertexArrayAttribLFormat != null)
      return glVertexArrayAttribLFormat;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribType());
    cmd.extension = GL_ARB_direct_state_access();
    glVertexArrayAttribLFormat = cmd;
    return cmd;
  }
  private static Command glTexSubImage1DEXT;
  public static Command glTexSubImage1DEXT() {
    if (glTexSubImage1DEXT != null)
      return glTexSubImage1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glGetProgramSubroutineParameteruivNV;
  public static Command glGetProgramSubroutineParameteruivNV() {
    if (glGetProgramSubroutineParameteruivNV != null)
      return glGetProgramSubroutineParameteruivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program5();
    glGetProgramSubroutineParameteruivNV = cmd;
    return cmd;
  }
  private static Command glGetMinmaxParameterfv;
  public static Command glGetMinmaxParameterfv() {
    if (glGetMinmaxParameterfv != null)
      return glGetMinmaxParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("pname", GetMinmaxParameterPNameEXT());
    cmd.extension = GL_ARB_imaging();
    glGetMinmaxParameterfv = cmd;
    return cmd;
  }
  private static Command glMulticastGetQueryObjectui64vNV;
  public static Command glMulticastGetQueryObjectui64vNV() {
    if (glMulticastGetQueryObjectui64vNV != null)
      return glMulticastGetQueryObjectui64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastGetQueryObjectui64vNV = cmd;
    return cmd;
  }
  private static Command glTextureBufferRangeEXT;
  public static Command glTextureBufferRangeEXT() {
    if (glTextureBufferRangeEXT != null)
      return glTextureBufferRangeEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureBufferRangeEXT = cmd;
    return cmd;
  }
  private static Command glProgramBinaryOES;
  public static Command glProgramBinaryOES() {
    if (glProgramBinaryOES != null)
      return glProgramBinaryOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("binaryFormat", _null_());
    cmd.extension = GL_OES_get_program_binary();
    glProgramBinaryOES = cmd;
    return cmd;
  }
  private static Command glGetLightxOES;
  public static Command glGetLightxOES() {
    if (glGetLightxOES != null)
      return glGetLightxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetLightxOES = cmd;
    return cmd;
  }
  private static Command glPatchParameteri;
  public static Command glPatchParameteri() {
    if (glPatchParameteri != null)
      return glPatchParameteri;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PatchParameterName());
    cmd.extension = GL_ARB_tessellation_shader();
    glPatchParameteri = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirectBindlessNV;
  public static Command glMultiDrawElementsIndirectBindlessNV() {
    if (glMultiDrawElementsIndirectBindlessNV != null)
      return glMultiDrawElementsIndirectBindlessNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsIndirectBindlessNV = cmd;
    return cmd;
  }
  private static Command glGetArrayObjectivATI;
  public static Command glGetArrayObjectivATI() {
    if (glGetArrayObjectivATI != null)
      return glGetArrayObjectivATI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glGetArrayObjectivATI = cmd;
    return cmd;
  }
  private static Command glNormalStream3svATI;
  public static Command glNormalStream3svATI() {
    if (glNormalStream3svATI != null)
      return glNormalStream3svATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3svATI = cmd;
    return cmd;
  }
  private static Command glGetMinmaxParameteriv;
  public static Command glGetMinmaxParameteriv() {
    if (glGetMinmaxParameteriv != null)
      return glGetMinmaxParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("pname", GetMinmaxParameterPNameEXT());
    cmd.extension = GL_ARB_imaging();
    glGetMinmaxParameteriv = cmd;
    return cmd;
  }
  private static Command glLightxOES;
  public static Command glLightxOES() {
    if (glLightxOES != null)
      return glLightxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    cmd.extension = GL_OES_fixed_point();
    glLightxOES = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayPointervEXT;
  public static Command glGetVertexArrayPointervEXT() {
    if (glGetVertexArrayPointervEXT != null)
      return glGetVertexArrayPointervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_EXT_direct_state_access();
    glGetVertexArrayPointervEXT = cmd;
    return cmd;
  }
  private static Command glTexPageCommitmentARB;
  public static Command glTexPageCommitmentARB() {
    if (glTexPageCommitmentARB != null)
      return glTexPageCommitmentARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("commit", Boolean());
    cmd.extension = GL_ARB_sparse_texture();
    glTexPageCommitmentARB = cmd;
    return cmd;
  }
  private static Command glCompressedMultiTexImage1DEXT;
  public static Command glCompressedMultiTexImage1DEXT() {
    if (glCompressedMultiTexImage1DEXT != null)
      return glCompressedMultiTexImage1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedMultiTexImage1DEXT = cmd;
    return cmd;
  }
  private static Command glClearNamedBufferSubDataEXT;
  public static Command glClearNamedBufferSubDataEXT() {
    if (glClearNamedBufferSubDataEXT != null)
      return glClearNamedBufferSubDataEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", _null_());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glClearNamedBufferSubDataEXT = cmd;
    return cmd;
  }
  private static Command glGetInvariantIntegervEXT;
  public static Command glGetInvariantIntegervEXT() {
    if (glGetInvariantIntegervEXT != null)
      return glGetInvariantIntegervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetInvariantIntegervEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1bOES;
  public static Command glMultiTexCoord1bOES() {
    if (glMultiTexCoord1bOES != null)
      return glMultiTexCoord1bOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord1bOES = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterxvOES;
  public static Command glConvolutionParameterxvOES() {
    if (glConvolutionParameterxvOES != null)
      return glConvolutionParameterxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_OES_fixed_point();
    glConvolutionParameterxvOES = cmd;
    return cmd;
  }
  private static Command glIsTransformFeedbackNV;
  public static Command glIsTransformFeedbackNV() {
    if (glIsTransformFeedbackNV != null)
      return glIsTransformFeedbackNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_transform_feedback2();
    glIsTransformFeedbackNV = cmd;
    return cmd;
  }
  private static Command glBindRenderbufferEXT;
  public static Command glBindRenderbufferEXT() {
    if (glBindRenderbufferEXT != null)
      return glBindRenderbufferEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glBindRenderbufferEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureFaceEXT;
  public static Command glFramebufferTextureFaceEXT() {
    if (glFramebufferTextureFaceEXT != null)
      return glFramebufferTextureFaceEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("face", TextureTarget());
    cmd.extension = GL_NV_geometry_program4();
    glFramebufferTextureFaceEXT = cmd;
    return cmd;
  }
  private static Command glGetMaterialxOES;
  public static Command glGetMaterialxOES() {
    if (glGetMaterialxOES != null)
      return glGetMaterialxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetMaterialxOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1xOES;
  public static Command glMultiTexCoord1xOES() {
    if (glMultiTexCoord1xOES != null)
      return glMultiTexCoord1xOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord1xOES = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstancedARB;
  public static Command glDrawArraysInstancedARB() {
    if (glDrawArraysInstancedARB != null)
      return glDrawArraysInstancedARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawArraysInstancedARB = cmd;
    return cmd;
  }
  private static Command glProgramParameters4dvNV;
  public static Command glProgramParameters4dvNV() {
    if (glProgramParameters4dvNV != null)
      return glProgramParameters4dvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glProgramParameters4dvNV = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparatei;
  public static Command glBlendEquationSeparatei() {
    if (glBlendEquationSeparatei != null)
      return glBlendEquationSeparatei;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    glBlendEquationSeparatei = cmd;
    return cmd;
  }
  private static Command glTransformFeedbackStreamAttribsNV;
  public static Command glTransformFeedbackStreamAttribsNV() {
    if (glTransformFeedbackStreamAttribsNV != null)
      return glTransformFeedbackStreamAttribsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufferMode", _null_());
    cmd.extension = GL_NV_transform_feedback();
    glTransformFeedbackStreamAttribsNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2fvEXT;
  public static Command glProgramUniformMatrix2fvEXT() {
    if (glProgramUniformMatrix2fvEXT != null)
      return glProgramUniformMatrix2fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix2fvEXT = cmd;
    return cmd;
  }
  private static Command glGetPixelMapusv;
  public static Command glGetPixelMapusv() {
    if (glGetPixelMapusv != null)
      return glGetPixelMapusv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glGetPixelMapusv = cmd;
    return cmd;
  }
  private static Command glPixelTexGenParameterfSGIS;
  public static Command glPixelTexGenParameterfSGIS() {
    if (glPixelTexGenParameterfSGIS != null)
      return glPixelTexGenParameterfSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTexGenParameterNameSGIS());
    cmd.extension = GL_SGIS_pixel_texture();
    glPixelTexGenParameterfSGIS = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameter4dvARB;
  public static Command glProgramEnvParameter4dvARB() {
    if (glProgramEnvParameter4dvARB != null)
      return glProgramEnvParameter4dvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramEnvParameter4dvARB = cmd;
    return cmd;
  }
  private static Command glGetnMapdvARB;
  public static Command glGetnMapdvARB() {
    if (glGetnMapdvARB != null)
      return glGetnMapdvARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", MapQuery());
    cmd.extension = GL_ARB_robustness();
    glGetnMapdvARB = cmd;
    return cmd;
  }
  private static Command glTangentPointerEXT;
  public static Command glTangentPointerEXT() {
    if (glTangentPointerEXT != null)
      return glTangentPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_coordinate_frame();
    glTangentPointerEXT = cmd;
    return cmd;
  }
  private static Command glMatrixMultdEXT;
  public static Command glMatrixMultdEXT() {
    if (glMatrixMultdEXT != null)
      return glMatrixMultdEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixMultdEXT = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstancedANGLE;
  public static Command glDrawArraysInstancedANGLE() {
    if (glDrawArraysInstancedANGLE != null)
      return glDrawArraysInstancedANGLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ANGLE_instanced_arrays();
    glDrawArraysInstancedANGLE = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameter4dvEXT;
  public static Command glNamedProgramLocalParameter4dvEXT() {
    if (glNamedProgramLocalParameter4dvEXT != null)
      return glNamedProgramLocalParameter4dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameter4dvEXT = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage3DARB;
  public static Command glCompressedTexImage3DARB() {
    if (glCompressedTexImage3DARB != null)
      return glCompressedTexImage3DARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_compression();
    glCompressedTexImage3DARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2dv;
  public static Command glMultiTexCoord2dv() {
    if (glMultiTexCoord2dv != null)
      return glMultiTexCoord2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2dv = cmd;
    return cmd;
  }
  private static Command glStencilStrokePathInstancedNV;
  public static Command glStencilStrokePathInstancedNV() {
    if (glStencilStrokePathInstancedNV != null)
      return glStencilStrokePathInstancedNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("pathNameType", PathElementType());
    cmd.addParam("transformType", PathTransformType());
    cmd.extension = GL_NV_path_rendering();
    glStencilStrokePathInstancedNV = cmd;
    return cmd;
  }
  private static Command glMap1d;
  public static Command glMap1d() {
    if (glMap1d != null)
      return glMap1d;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    glMap1d = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayPointeri_vEXT;
  public static Command glGetVertexArrayPointeri_vEXT() {
    if (glGetVertexArrayPointeri_vEXT != null)
      return glGetVertexArrayPointeri_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_EXT_direct_state_access();
    glGetVertexArrayPointeri_vEXT = cmd;
    return cmd;
  }
  private static Command glMap1f;
  public static Command glMap1f() {
    if (glMap1f != null)
      return glMap1f;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    glMap1f = cmd;
    return cmd;
  }
  private static Command glMap2d;
  public static Command glMap2d() {
    if (glMap2d != null)
      return glMap2d;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    glMap2d = cmd;
    return cmd;
  }
  private static Command glMap2f;
  public static Command glMap2f() {
    if (glMap2f != null)
      return glMap2f;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    glMap2f = cmd;
    return cmd;
  }
  private static Command glGetProgramResourceLocation;
  public static Command glGetProgramResourceLocation() {
    if (glGetProgramResourceLocation != null)
      return glGetProgramResourceLocation;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.extension = GL_ARB_program_interface_query();
    glGetProgramResourceLocation = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2dvARB;
  public static Command glMultiTexCoord2dvARB() {
    if (glMultiTexCoord2dvARB != null)
      return glMultiTexCoord2dvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2dvARB = cmd;
    return cmd;
  }
  private static Command glTexCoordPointer;
  public static Command glTexCoordPointer() {
    if (glTexCoordPointer != null)
      return glTexCoordPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    glTexCoordPointer = cmd;
    return cmd;
  }
  private static Command glGetHistogram;
  public static Command glGetHistogram() {
    if (glGetHistogram != null)
      return glGetHistogram;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glGetHistogram = cmd;
    return cmd;
  }
  private static Command glBlendFunciOES;
  public static Command glBlendFunciOES() {
    if (glBlendFunciOES != null)
      return glBlendFunciOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("src", BlendingFactor());
    cmd.addParam("dst", BlendingFactor());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glBlendFunciOES = cmd;
    return cmd;
  }
  private static Command glGetHistogramParameterxvOES;
  public static Command glGetHistogramParameterxvOES() {
    if (glGetHistogramParameterxvOES != null)
      return glGetHistogramParameterxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("pname", GetHistogramParameterPNameEXT());
    cmd.extension = GL_OES_fixed_point();
    glGetHistogramParameterxvOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2fv;
  public static Command glMultiTexCoord2fv() {
    if (glMultiTexCoord2fv != null)
      return glMultiTexCoord2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord2fv = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexAttribLFormatEXT;
  public static Command glVertexArrayVertexAttribLFormatEXT() {
    if (glVertexArrayVertexAttribLFormatEXT != null)
      return glVertexArrayVertexAttribLFormatEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexAttribLFormatEXT = cmd;
    return cmd;
  }
  private static Command glEdgeFlagPointerEXT;
  public static Command glEdgeFlagPointerEXT() {
    if (glEdgeFlagPointerEXT != null)
      return glEdgeFlagPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pointer", Boolean());
    cmd.extension = GL_EXT_vertex_array();
    glEdgeFlagPointerEXT = cmd;
    return cmd;
  }
  private static Command glEndQueryARB;
  public static Command glEndQueryARB() {
    if (glEndQueryARB != null)
      return glEndQueryARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_ARB_occlusion_query();
    glEndQueryARB = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTextureFaceEXT;
  public static Command glNamedFramebufferTextureFaceEXT() {
    if (glNamedFramebufferTextureFaceEXT != null)
      return glNamedFramebufferTextureFaceEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("face", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferTextureFaceEXT = cmd;
    return cmd;
  }
  private static Command glVertexAttribPointerARB;
  public static Command glVertexAttribPointerARB() {
    if (glVertexAttribPointerARB != null)
      return glVertexAttribPointerARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_program();
    glVertexAttribPointerARB = cmd;
    return cmd;
  }
  private static Command glFogxvOES;
  public static Command glFogxvOES() {
    if (glFogxvOES != null)
      return glFogxvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogPName());
    cmd.extension = GL_OES_fixed_point();
    glFogxvOES = cmd;
    return cmd;
  }
  private static Command glDrawRangeElementsBaseVertex;
  public static Command glDrawRangeElementsBaseVertex() {
    if (glDrawRangeElementsBaseVertex != null)
      return glDrawRangeElementsBaseVertex;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawRangeElementsBaseVertex = cmd;
    return cmd;
  }
  private static Command glGetGraphicsResetStatusEXT;
  public static Command glGetGraphicsResetStatusEXT() {
    if (glGetGraphicsResetStatusEXT != null)
      return glGetGraphicsResetStatusEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = GraphicsResetStatus();
    cmd.extension = GL_EXT_robustness();
    glGetGraphicsResetStatusEXT = cmd;
    return cmd;
  }
  private static Command glBeginTransformFeedback;
  public static Command glBeginTransformFeedback() {
    if (glBeginTransformFeedback != null)
      return glBeginTransformFeedback;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("primitiveMode", PrimitiveType());
    glBeginTransformFeedback = cmd;
    return cmd;
  }
  private static Command glGetFinalCombinerInputParameterfvNV;
  public static Command glGetFinalCombinerInputParameterfvNV() {
    if (glGetFinalCombinerInputParameterfvNV != null)
      return glGetFinalCombinerInputParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("variable", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glGetFinalCombinerInputParameterfvNV = cmd;
    return cmd;
  }
  private static Command glGetTexParameterIiv;
  public static Command glGetTexParameterIiv() {
    if (glGetTexParameterIiv != null)
      return glGetTexParameterIiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexParameterIiv = cmd;
    return cmd;
  }
  private static Command glVertexArrayMultiTexCoordOffsetEXT;
  public static Command glVertexArrayMultiTexCoordOffsetEXT() {
    if (glVertexArrayMultiTexCoordOffsetEXT != null)
      return glVertexArrayMultiTexCoordOffsetEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", _null_());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayMultiTexCoordOffsetEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1hNV;
  public static Command glMultiTexCoord1hNV() {
    if (glMultiTexCoord1hNV != null)
      return glMultiTexCoord1hNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord1hNV = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameterI4ivNV;
  public static Command glProgramLocalParameterI4ivNV() {
    if (glProgramLocalParameterI4ivNV != null)
      return glProgramLocalParameterI4ivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramLocalParameterI4ivNV = cmd;
    return cmd;
  }
  private static Command glSetInvariantEXT;
  public static Command glSetInvariantEXT() {
    if (glSetInvariantEXT != null)
      return glSetInvariantEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glSetInvariantEXT = cmd;
    return cmd;
  }
  private static Command glIsQuery;
  public static Command glIsQuery() {
    if (glIsQuery != null)
      return glIsQuery;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsQuery = cmd;
    return cmd;
  }
  private static Command glFogCoordPointerEXT;
  public static Command glFogCoordPointerEXT() {
    if (glFogCoordPointerEXT != null)
      return glFogCoordPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", FogPointerTypeEXT());
    cmd.extension = GL_EXT_fog_coord();
    glFogCoordPointerEXT = cmd;
    return cmd;
  }
  private static Command glProgramBufferParametersfvNV;
  public static Command glProgramBufferParametersfvNV() {
    if (glProgramBufferParametersfvNV != null)
      return glProgramBufferParametersfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_parameter_buffer_object();
    glProgramBufferParametersfvNV = cmd;
    return cmd;
  }
  private static Command glCombinerParameterivNV;
  public static Command glCombinerParameterivNV() {
    if (glCombinerParameterivNV != null)
      return glCombinerParameterivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glCombinerParameterivNV = cmd;
    return cmd;
  }
  private static Command glPathParameterfNV;
  public static Command glPathParameterfNV() {
    if (glPathParameterfNV != null)
      return glPathParameterfNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PathParameter());
    cmd.extension = GL_NV_path_rendering();
    glPathParameterfNV = cmd;
    return cmd;
  }
  private static Command glMakeNamedBufferResidentNV;
  public static Command glMakeNamedBufferResidentNV() {
    if (glMakeNamedBufferResidentNV != null)
      return glMakeNamedBufferResidentNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", _null_());
    cmd.extension = GL_NV_shader_buffer_load();
    glMakeNamedBufferResidentNV = cmd;
    return cmd;
  }
  private static Command glInvalidateNamedFramebufferSubData;
  public static Command glInvalidateNamedFramebufferSubData() {
    if (glInvalidateNamedFramebufferSubData != null)
      return glInvalidateNamedFramebufferSubData;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("attachments", FramebufferAttachment());
    cmd.extension = GL_ARB_direct_state_access();
    glInvalidateNamedFramebufferSubData = cmd;
    return cmd;
  }
  private static Command glColorPointerListIBM;
  public static Command glColorPointerListIBM() {
    if (glColorPointerListIBM != null)
      return glColorPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_IBM_vertex_array_lists();
    glColorPointerListIBM = cmd;
    return cmd;
  }
  private static Command glIsCommandListNV;
  public static Command glIsCommandListNV() {
    if (glIsCommandListNV != null)
      return glIsCommandListNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_command_list();
    glIsCommandListNV = cmd;
    return cmd;
  }
  private static Command glGetColorTableParameterfvSGI;
  public static Command glGetColorTableParameterfvSGI() {
    if (glGetColorTableParameterfvSGI != null)
      return glGetColorTableParameterfvSGI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("pname", GetColorTableParameterPNameSGI());
    cmd.extension = GL_SGI_color_table();
    glGetColorTableParameterfvSGI = cmd;
    return cmd;
  }
  private static Command glGetTransformFeedbacki_v;
  public static Command glGetTransformFeedbacki_v() {
    if (glGetTransformFeedbacki_v != null)
      return glGetTransformFeedbacki_v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TransformFeedbackPName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTransformFeedbacki_v = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2svARB;
  public static Command glMultiTexCoord2svARB() {
    if (glMultiTexCoord2svARB != null)
      return glMultiTexCoord2svARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2svARB = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirectCount;
  public static Command glMultiDrawElementsIndirectCount() {
    if (glMultiDrawElementsIndirectCount != null)
      return glMultiDrawElementsIndirectCount;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", _null_());
    glMultiDrawElementsIndirectCount = cmd;
    return cmd;
  }
  private static Command glNormalStream3sATI;
  public static Command glNormalStream3sATI() {
    if (glNormalStream3sATI != null)
      return glNormalStream3sATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3sATI = cmd;
    return cmd;
  }
  private static Command glGenerateTextureMipmapEXT;
  public static Command glGenerateTextureMipmapEXT() {
    if (glGenerateTextureMipmapEXT != null)
      return glGenerateTextureMipmapEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glGenerateTextureMipmapEXT = cmd;
    return cmd;
  }
  private static Command glDebugMessageEnableAMD;
  public static Command glDebugMessageEnableAMD() {
    if (glDebugMessageEnableAMD != null)
      return glDebugMessageEnableAMD;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("category", _null_());
    cmd.addParam("severity", DebugSeverity());
    cmd.addParam("enabled", Boolean());
    cmd.extension = GL_AMD_debug_output();
    glDebugMessageEnableAMD = cmd;
    return cmd;
  }
  private static Command glPointParameterfvSGIS;
  public static Command glPointParameterfvSGIS() {
    if (glPointParameterfvSGIS != null)
      return glPointParameterfvSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIS_point_parameters();
    glPointParameterfvSGIS = cmd;
    return cmd;
  }
  private static Command glLightModeliv;
  public static Command glLightModeliv() {
    if (glLightModeliv != null)
      return glLightModeliv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    glLightModeliv = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage1DEXT;
  public static Command glCopyTexSubImage1DEXT() {
    if (glCopyTexSubImage1DEXT != null)
      return glCopyTexSubImage1DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glCopyTexSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream4dATI;
  public static Command glVertexStream4dATI() {
    if (glVertexStream4dATI != null)
      return glVertexStream4dATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4dATI = cmd;
    return cmd;
  }
  private static Command glSpriteParameterfvSGIX;
  public static Command glSpriteParameterfvSGIX() {
    if (glSpriteParameterfvSGIX != null)
      return glSpriteParameterfvSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_sprite();
    glSpriteParameterfvSGIX = cmd;
    return cmd;
  }
  private static Command glLightModelfv;
  public static Command glLightModelfv() {
    if (glLightModelfv != null)
      return glLightModelfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    glLightModelfv = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterxOES;
  public static Command glConvolutionParameterxOES() {
    if (glConvolutionParameterxOES != null)
      return glConvolutionParameterxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_OES_fixed_point();
    glConvolutionParameterxOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3xvOES;
  public static Command glMultiTexCoord3xvOES() {
    if (glMultiTexCoord3xvOES != null)
      return glMultiTexCoord3xvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord3xvOES = cmd;
    return cmd;
  }
  private static Command glBlendParameteriNV;
  public static Command glBlendParameteriNV() {
    if (glBlendParameteriNV != null)
      return glBlendParameteriNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_blend_equation_advanced();
    glBlendParameteriNV = cmd;
    return cmd;
  }
  private static Command glGetMultisamplefv;
  public static Command glGetMultisamplefv() {
    if (glGetMultisamplefv != null)
      return glGetMultisamplefv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_texture_multisample();
    glGetMultisamplefv = cmd;
    return cmd;
  }
  private static Command glIsQueryARB;
  public static Command glIsQueryARB() {
    if (glIsQueryARB != null)
      return glIsQueryARB;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_occlusion_query();
    glIsQueryARB = cmd;
    return cmd;
  }
  private static Command glGetInternalformativ;
  public static Command glGetInternalformativ() {
    if (glGetInternalformativ != null)
      return glGetInternalformativ;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("pname", InternalFormatPName());
    cmd.extension = GL_ARB_internalformat_query();
    glGetInternalformativ = cmd;
    return cmd;
  }
  private static Command glBufferSubData;
  public static Command glBufferSubData() {
    if (glBufferSubData != null)
      return glBufferSubData;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    glBufferSubData = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisampleNV;
  public static Command glRenderbufferStorageMultisampleNV() {
    if (glRenderbufferStorageMultisampleNV != null)
      return glRenderbufferStorageMultisampleNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_NV_framebuffer_multisample();
    glRenderbufferStorageMultisampleNV = cmd;
    return cmd;
  }
  private static Command glGetSyncivAPPLE;
  public static Command glGetSyncivAPPLE() {
    if (glGetSyncivAPPLE != null)
      return glGetSyncivAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SyncParameterName());
    cmd.extension = GL_APPLE_sync();
    glGetSyncivAPPLE = cmd;
    return cmd;
  }
  private static Command glBindTextureUnitParameterEXT;
  public static Command glBindTextureUnitParameterEXT() {
    if (glBindTextureUnitParameterEXT != null)
      return glBindTextureUnitParameterEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("unit", TextureUnit());
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glBindTextureUnitParameterEXT = cmd;
    return cmd;
  }
  private static Command glTextureParameteriEXT;
  public static Command glTextureParameteriEXT() {
    if (glTextureParameteriEXT != null)
      return glTextureParameteriEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureParameteriEXT = cmd;
    return cmd;
  }
  private static Command glCreateShaderProgramEXT;
  public static Command glCreateShaderProgramEXT() {
    if (glCreateShaderProgramEXT != null)
      return glCreateShaderProgramEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ShaderType());
    cmd.extension = GL_EXT_separate_shader_objects();
    glCreateShaderProgramEXT = cmd;
    return cmd;
  }
  private static Command glTextureImage2DMultisampleNV;
  public static Command glTextureImage2DMultisampleNV() {
    if (glTextureImage2DMultisampleNV != null)
      return glTextureImage2DMultisampleNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_NV_texture_multisample();
    glTextureImage2DMultisampleNV = cmd;
    return cmd;
  }
  private static Command glGetDoubleIndexedvEXT;
  public static Command glGetDoubleIndexedvEXT() {
    if (glGetDoubleIndexedvEXT != null)
      return glGetDoubleIndexedvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glGetDoubleIndexedvEXT = cmd;
    return cmd;
  }
  private static Command glNamedStringARB;
  public static Command glNamedStringARB() {
    if (glNamedStringARB != null)
      return glNamedStringARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_ARB_shading_language_include();
    glNamedStringARB = cmd;
    return cmd;
  }
  private static Command glTexCoordPointervINTEL;
  public static Command glTexCoordPointervINTEL() {
    if (glTexCoordPointervINTEL != null)
      return glTexCoordPointervINTEL;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_INTEL_parallel_arrays();
    glTexCoordPointervINTEL = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexAttribFormatEXT;
  public static Command glVertexArrayVertexAttribFormatEXT() {
    if (glVertexArrayVertexAttribFormatEXT != null)
      return glVertexArrayVertexAttribFormatEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexAttribFormatEXT = cmd;
    return cmd;
  }
  private static Command glGetVariantArrayObjectfvATI;
  public static Command glGetVariantArrayObjectfvATI() {
    if (glGetVariantArrayObjectfvATI != null)
      return glGetVariantArrayObjectfvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glGetVariantArrayObjectfvATI = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP4ui;
  public static Command glMultiTexCoordP4ui() {
    if (glMultiTexCoordP4ui != null)
      return glMultiTexCoordP4ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP4ui = cmd;
    return cmd;
  }
  private static Command glIsRenderbufferEXT;
  public static Command glIsRenderbufferEXT() {
    if (glIsRenderbufferEXT != null)
      return glIsRenderbufferEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_framebuffer_object();
    glIsRenderbufferEXT = cmd;
    return cmd;
  }
  private static Command glGetBooleanv;
  public static Command glGetBooleanv() {
    if (glGetBooleanv != null)
      return glGetBooleanv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    cmd.addParam("data", Boolean());
    glGetBooleanv = cmd;
    return cmd;
  }
  private static Command glEndQuery;
  public static Command glEndQuery() {
    if (glEndQuery != null)
      return glEndQuery;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    glEndQuery = cmd;
    return cmd;
  }
  private static Command glBlitFramebuffer;
  public static Command glBlitFramebuffer() {
    if (glBlitFramebuffer != null)
      return glBlitFramebuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    cmd.addParam("filter", BlitFramebufferFilter());
    cmd.extension = GL_ARB_framebuffer_object();
    glBlitFramebuffer = cmd;
    return cmd;
  }
  private static Command glStencilThenCoverFillPathInstancedNV;
  public static Command glStencilThenCoverFillPathInstancedNV() {
    if (glStencilThenCoverFillPathInstancedNV != null)
      return glStencilThenCoverFillPathInstancedNV;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("pathNameType", _null_());
    cmd.addParam("fillMode", _null_());
    cmd.addParam("coverMode", _null_());
    cmd.addParam("transformType", _null_());
    cmd.extension = GL_NV_path_rendering();
    glStencilThenCoverFillPathInstancedNV = cmd;
    return cmd;
  }
  private static Command glUniformSubroutinesuiv;
  public static Command glUniformSubroutinesuiv() {
    if (glUniformSubroutinesuiv != null)
      return glUniformSubroutinesuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_ARB_shader_subroutine();
    glUniformSubroutinesuiv = cmd;
    return cmd;
  }
  private static Command glIndexPointerListIBM;
  public static Command glIndexPointerListIBM() {
    if (glIndexPointerListIBM != null)
      return glIndexPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", IndexPointerType());
    cmd.extension = GL_IBM_vertex_array_lists();
    glIndexPointerListIBM = cmd;
    return cmd;
  }
  private static Command glVertexStream4dvATI;
  public static Command glVertexStream4dvATI() {
    if (glVertexStream4dvATI != null)
      return glVertexStream4dvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4dvATI = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexAttribLOffsetEXT;
  public static Command glVertexArrayVertexAttribLOffsetEXT() {
    if (glVertexArrayVertexAttribLOffsetEXT != null)
      return glVertexArrayVertexAttribLOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexAttribLOffsetEXT = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateIndexedAMD;
  public static Command glBlendFuncSeparateIndexedAMD() {
    if (glBlendFuncSeparateIndexedAMD != null)
      return glBlendFuncSeparateIndexedAMD;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("srcRGB", BlendingFactor());
    cmd.addParam("dstRGB", BlendingFactor());
    cmd.addParam("srcAlpha", BlendingFactor());
    cmd.addParam("dstAlpha", BlendingFactor());
    glBlendFuncSeparateIndexedAMD = cmd;
    return cmd;
  }
  private static Command glGetnTexImageARB;
  public static Command glGetnTexImageARB() {
    if (glGetnTexImageARB != null)
      return glGetnTexImageARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glGetnTexImageARB = cmd;
    return cmd;
  }
  private static Command glMemoryBarrierEXT;
  public static Command glMemoryBarrierEXT() {
    if (glMemoryBarrierEXT != null)
      return glMemoryBarrierEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("barriers", MemoryBarrierMask());
    cmd.extension = GL_EXT_shader_image_load_store();
    glMemoryBarrierEXT = cmd;
    return cmd;
  }
  private static Command glEnableClientStateIndexedEXT;
  public static Command glEnableClientStateIndexedEXT() {
    if (glEnableClientStateIndexedEXT != null)
      return glEnableClientStateIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glEnableClientStateIndexedEXT = cmd;
    return cmd;
  }
  private static Command glTexStorageMem1DEXT;
  public static Command glTexStorageMem1DEXT() {
    if (glTexStorageMem1DEXT != null)
      return glTexStorageMem1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalFormat", _null_());
    cmd.extension = GL_EXT_memory_object();
    glTexStorageMem1DEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP2uiv;
  public static Command glMultiTexCoordP2uiv() {
    if (glMultiTexCoordP2uiv != null)
      return glMultiTexCoordP2uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP2uiv = cmd;
    return cmd;
  }
  private static Command glCompressedTextureSubImage2DEXT;
  public static Command glCompressedTextureSubImage2DEXT() {
    if (glCompressedTextureSubImage2DEXT != null)
      return glCompressedTextureSubImage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedTextureSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glTextureStorage3DMultisample;
  public static Command glTextureStorage3DMultisample() {
    if (glTextureStorage3DMultisample != null)
      return glTextureStorage3DMultisample;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureStorage3DMultisample = cmd;
    return cmd;
  }
  private static Command glTextureStorage2DEXT;
  public static Command glTextureStorage2DEXT() {
    if (glTextureStorage2DEXT != null)
      return glTextureStorage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureStorage2DEXT = cmd;
    return cmd;
  }
  private static Command glIsImageHandleResidentARB;
  public static Command glIsImageHandleResidentARB() {
    if (glIsImageHandleResidentARB != null)
      return glIsImageHandleResidentARB;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_bindless_texture();
    glIsImageHandleResidentARB = cmd;
    return cmd;
  }
  private static Command glPresentFrameKeyedNV;
  public static Command glPresentFrameKeyedNV() {
    if (glPresentFrameKeyedNV != null)
      return glPresentFrameKeyedNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.addParam("target0", _null_());
    cmd.addParam("target1", _null_());
    cmd.extension = GL_NV_present_video();
    glPresentFrameKeyedNV = cmd;
    return cmd;
  }
  private static Command glGetNamedBufferParameterivEXT;
  public static Command glGetNamedBufferParameterivEXT() {
    if (glGetNamedBufferParameterivEXT != null)
      return glGetNamedBufferParameterivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexBufferObjectParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedBufferParameterivEXT = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirectCountARB;
  public static Command glMultiDrawArraysIndirectCountARB() {
    if (glMultiDrawArraysIndirectCountARB != null)
      return glMultiDrawArraysIndirectCountARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ARB_indirect_parameters();
    glMultiDrawArraysIndirectCountARB = cmd;
    return cmd;
  }
  private static Command glDisableiOES;
  public static Command glDisableiOES() {
    if (glDisableiOES != null)
      return glDisableiOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glDisableiOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1fARB;
  public static Command glMultiTexCoord1fARB() {
    if (glMultiTexCoord1fARB != null)
      return glMultiTexCoord1fARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1fARB = cmd;
    return cmd;
  }
  private static Command glGetNamedBufferParameterui64vNV;
  public static Command glGetNamedBufferParameterui64vNV() {
    if (glGetNamedBufferParameterui64vNV != null)
      return glGetNamedBufferParameterui64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexBufferObjectParameter());
    cmd.extension = GL_NV_shader_buffer_load();
    glGetNamedBufferParameterui64vNV = cmd;
    return cmd;
  }
  private static Command glTextureImage2DEXT;
  public static Command glTextureImage2DEXT() {
    if (glTextureImage2DEXT != null)
      return glTextureImage2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureImage2DEXT = cmd;
    return cmd;
  }
  private static Command glCheckFramebufferStatusEXT;
  public static Command glCheckFramebufferStatusEXT() {
    if (glCheckFramebufferStatusEXT != null)
      return glCheckFramebufferStatusEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = FramebufferStatus();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glCheckFramebufferStatusEXT = cmd;
    return cmd;
  }
  private static Command glBeginConditionalRender;
  public static Command glBeginConditionalRender() {
    if (glBeginConditionalRender != null)
      return glBeginConditionalRender;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", TypeEnum());
    glBeginConditionalRender = cmd;
    return cmd;
  }
  private static Command glBlendEquation;
  public static Command glBlendEquation() {
    if (glBlendEquation != null)
      return glBlendEquation;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    cmd.extension = GL_ARB_imaging();
    glBlendEquation = cmd;
    return cmd;
  }
  private static Command glGenerateMipmap;
  public static Command glGenerateMipmap() {
    if (glGenerateMipmap != null)
      return glGenerateMipmap;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glGenerateMipmap = cmd;
    return cmd;
  }
  private static Command glTexStorage2DMultisample;
  public static Command glTexStorage2DMultisample() {
    if (glTexStorage2DMultisample != null)
      return glTexStorage2DMultisample;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    glTexStorage2DMultisample = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayIndexediv;
  public static Command glGetVertexArrayIndexediv() {
    if (glGetVertexArrayIndexediv != null)
      return glGetVertexArrayIndexediv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetVertexArrayIndexediv = cmd;
    return cmd;
  }
  private static Command glVertexStream1iATI;
  public static Command glVertexStream1iATI() {
    if (glVertexStream1iATI != null)
      return glVertexStream1iATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1iATI = cmd;
    return cmd;
  }
  private static Command glPathParameterivNV;
  public static Command glPathParameterivNV() {
    if (glPathParameterivNV != null)
      return glPathParameterivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PathParameter());
    cmd.extension = GL_NV_path_rendering();
    glPathParameterivNV = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4x2dv;
  public static Command glUniformMatrix4x2dv() {
    if (glUniformMatrix4x2dv != null)
      return glUniformMatrix4x2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix4x2dv = cmd;
    return cmd;
  }
  private static Command glGetHandleARB;
  public static Command glGetHandleARB() {
    if (glGetHandleARB != null)
      return glGetHandleARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_shader_objects();
    glGetHandleARB = cmd;
    return cmd;
  }
  private static Command glGetSeparableFilterEXT;
  public static Command glGetSeparableFilterEXT() {
    if (glGetSeparableFilterEXT != null)
      return glGetSeparableFilterEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", SeparableTargetEXT());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_convolution();
    glGetSeparableFilterEXT = cmd;
    return cmd;
  }
  private static Command glProgramPathFragmentInputGenNV;
  public static Command glProgramPathFragmentInputGenNV() {
    if (glProgramPathFragmentInputGenNV != null)
      return glProgramPathFragmentInputGenNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("genMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glProgramPathFragmentInputGenNV = cmd;
    return cmd;
  }
  private static Command glStencilFunc;
  public static Command glStencilFunc() {
    if (glStencilFunc != null)
      return glStencilFunc;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", StencilFunction());
    glStencilFunc = cmd;
    return cmd;
  }
  private static Command glTexCoordP2uiv;
  public static Command glTexCoordP2uiv() {
    if (glTexCoordP2uiv != null)
      return glTexCoordP2uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP2uiv = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementArrayAPPLE;
  public static Command glMultiDrawElementArrayAPPLE() {
    if (glMultiDrawElementArrayAPPLE != null)
      return glMultiDrawElementArrayAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_APPLE_element_array();
    glMultiDrawElementArrayAPPLE = cmd;
    return cmd;
  }
  private static Command glSecondaryColorPointerEXT;
  public static Command glSecondaryColorPointerEXT() {
    if (glSecondaryColorPointerEXT != null)
      return glSecondaryColorPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_EXT_secondary_color();
    glSecondaryColorPointerEXT = cmd;
    return cmd;
  }
  private static Command glSamplerParameterIivEXT;
  public static Command glSamplerParameterIivEXT() {
    if (glSamplerParameterIivEXT != null)
      return glSamplerParameterIivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_EXT_texture_border_clamp();
    glSamplerParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glGetProgramLocalParameterfvARB;
  public static Command glGetProgramLocalParameterfvARB() {
    if (glGetProgramLocalParameterfvARB != null)
      return glGetProgramLocalParameterfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glGetProgramLocalParameterfvARB = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribivARB;
  public static Command glGetVertexAttribivARB() {
    if (glGetVertexAttribivARB != null)
      return glGetVertexAttribivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_vertex_program();
    glGetVertexAttribivARB = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4x2fv;
  public static Command glUniformMatrix4x2fv() {
    if (glUniformMatrix4x2fv != null)
      return glUniformMatrix4x2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix4x2fv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2sARB;
  public static Command glMultiTexCoord2sARB() {
    if (glMultiTexCoord2sARB != null)
      return glMultiTexCoord2sARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2sARB = cmd;
    return cmd;
  }
  private static Command glGetActiveVaryingNV;
  public static Command glGetActiveVaryingNV() {
    if (glGetActiveVaryingNV != null)
      return glGetActiveVaryingNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_transform_feedback();
    glGetActiveVaryingNV = cmd;
    return cmd;
  }
  private static Command glMultiDrawArrays;
  public static Command glMultiDrawArrays() {
    if (glMultiDrawArrays != null)
      return glMultiDrawArrays;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArrays = cmd;
    return cmd;
  }
  private static Command glVertexArrayTexCoordOffsetEXT;
  public static Command glVertexArrayTexCoordOffsetEXT() {
    if (glVertexArrayTexCoordOffsetEXT != null)
      return glVertexArrayTexCoordOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayTexCoordOffsetEXT = cmd;
    return cmd;
  }
  private static Command glCreateShader;
  public static Command glCreateShader() {
    if (glCreateShader != null)
      return glCreateShader;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ShaderType());
    glCreateShader = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x2dv;
  public static Command glProgramUniformMatrix4x2dv() {
    if (glProgramUniformMatrix4x2dv != null)
      return glProgramUniformMatrix4x2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix4x2dv = cmd;
    return cmd;
  }
  private static Command glTexGenfvOES;
  public static Command glTexGenfvOES() {
    if (glTexGenfvOES != null)
      return glTexGenfvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_texture_cube_map();
    glTexGenfvOES = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirect;
  public static Command glMultiDrawArraysIndirect() {
    if (glMultiDrawArraysIndirect != null)
      return glMultiDrawArraysIndirect;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysIndirect = cmd;
    return cmd;
  }
  private static Command glMatrixIndexPointerOES;
  public static Command glMatrixIndexPointerOES() {
    if (glMatrixIndexPointerOES != null)
      return glMatrixIndexPointerOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_OES_matrix_palette();
    glMatrixIndexPointerOES = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameter4fARB;
  public static Command glProgramLocalParameter4fARB() {
    if (glProgramLocalParameter4fARB != null)
      return glProgramLocalParameter4fARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramLocalParameter4fARB = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2dv;
  public static Command glUniformMatrix2dv() {
    if (glUniformMatrix2dv != null)
      return glUniformMatrix2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix2dv = cmd;
    return cmd;
  }
  private static Command glMapParameterfvNV;
  public static Command glMapParameterfvNV() {
    if (glMapParameterfvNV != null)
      return glMapParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_evaluators();
    glMapParameterfvNV = cmd;
    return cmd;
  }
  private static Command glIsNameAMD;
  public static Command glIsNameAMD() {
    if (glIsNameAMD != null)
      return glIsNameAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("identifier", _null_());
    cmd.extension = GL_AMD_name_gen_delete();
    glIsNameAMD = cmd;
    return cmd;
  }
  private static Command glGetNamedFramebufferParameteriv;
  public static Command glGetNamedFramebufferParameteriv() {
    if (glGetNamedFramebufferParameteriv != null)
      return glGetNamedFramebufferParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetFramebufferParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetNamedFramebufferParameteriv = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirectAMD;
  public static Command glMultiDrawArraysIndirectAMD() {
    if (glMultiDrawArraysIndirectAMD != null)
      return glMultiDrawArraysIndirectAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysIndirectAMD = cmd;
    return cmd;
  }
  private static Command glCopyConvolutionFilter1DEXT;
  public static Command glCopyConvolutionFilter1DEXT() {
    if (glCopyConvolutionFilter1DEXT != null)
      return glCopyConvolutionFilter1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_convolution();
    glCopyConvolutionFilter1DEXT = cmd;
    return cmd;
  }
  private static Command glTexParameterxOES;
  public static Command glTexParameterxOES() {
    if (glTexParameterxOES != null)
      return glTexParameterxOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_OES_fixed_point();
    glTexParameterxOES = cmd;
    return cmd;
  }
  private static Command glGetTrackMatrixivNV;
  public static Command glGetTrackMatrixivNV() {
    if (glGetTrackMatrixivNV != null)
      return glGetTrackMatrixivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetTrackMatrixivNV = cmd;
    return cmd;
  }
  private static Command glGetActiveAttrib;
  public static Command glGetActiveAttrib() {
    if (glGetActiveAttrib != null)
      return glGetActiveAttrib;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", AttributeType());
    glGetActiveAttrib = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4dvEXT;
  public static Command glProgramUniformMatrix4dvEXT() {
    if (glProgramUniformMatrix4dvEXT != null)
      return glProgramUniformMatrix4dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix4dvEXT = cmd;
    return cmd;
  }
  private static Command glBlitFramebufferANGLE;
  public static Command glBlitFramebufferANGLE() {
    if (glBlitFramebufferANGLE != null)
      return glBlitFramebufferANGLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    cmd.addParam("filter", BlitFramebufferFilter());
    cmd.extension = GL_ANGLE_framebuffer_blit();
    glBlitFramebufferANGLE = cmd;
    return cmd;
  }
  private static Command glGetTexParameterIuivOES;
  public static Command glGetTexParameterIuivOES() {
    if (glGetTexParameterIuivOES != null)
      return glGetTexParameterIuivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_OES_texture_border_clamp();
    glGetTexParameterIuivOES = cmd;
    return cmd;
  }
  private static Command glMatrixTranslatefEXT;
  public static Command glMatrixTranslatefEXT() {
    if (glMatrixTranslatefEXT != null)
      return glMatrixTranslatefEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixTranslatefEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2fv;
  public static Command glUniformMatrix2fv() {
    if (glUniformMatrix2fv != null)
      return glUniformMatrix2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix2fv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1dvARB;
  public static Command glMultiTexCoord1dvARB() {
    if (glMultiTexCoord1dvARB != null)
      return glMultiTexCoord1dvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1dvARB = cmd;
    return cmd;
  }
  private static Command glQueryCounter;
  public static Command glQueryCounter() {
    if (glQueryCounter != null)
      return glQueryCounter;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_ARB_timer_query();
    glQueryCounter = cmd;
    return cmd;
  }
  private static Command glColorTableSGI;
  public static Command glColorTableSGI() {
    if (glColorTableSGI != null)
      return glColorTableSGI;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_SGI_color_table();
    glColorTableSGI = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribIiv;
  public static Command glGetVertexAttribIiv() {
    if (glGetVertexAttribIiv != null)
      return glGetVertexAttribIiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    glGetVertexAttribIiv = cmd;
    return cmd;
  }
  private static Command glCopyMultiTexImage1DEXT;
  public static Command glCopyMultiTexImage1DEXT() {
    if (glCopyMultiTexImage1DEXT != null)
      return glCopyMultiTexImage1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyMultiTexImage1DEXT = cmd;
    return cmd;
  }
  private static Command glColorPointerEXT;
  public static Command glColorPointerEXT() {
    if (glColorPointerEXT != null)
      return glColorPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_EXT_vertex_array();
    glColorPointerEXT = cmd;
    return cmd;
  }
  private static Command glPointParameterfvEXT;
  public static Command glPointParameterfvEXT() {
    if (glPointParameterfvEXT != null)
      return glPointParameterfvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_point_parameters();
    glPointParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glBindBufferRangeNV;
  public static Command glBindBufferRangeNV() {
    if (glBindBufferRangeNV != null)
      return glBindBufferRangeNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_NV_transform_feedback();
    glBindBufferRangeNV = cmd;
    return cmd;
  }
  private static Command glClearNamedFramebufferfv;
  public static Command glClearNamedFramebufferfv() {
    if (glClearNamedFramebufferfv != null)
      return glClearNamedFramebufferfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    cmd.extension = GL_ARB_direct_state_access();
    glClearNamedFramebufferfv = cmd;
    return cmd;
  }
  private static Command glBindVideoCaptureStreamBufferNV;
  public static Command glBindVideoCaptureStreamBufferNV() {
    if (glBindVideoCaptureStreamBufferNV != null)
      return glBindVideoCaptureStreamBufferNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("frame_region", _null_());
    cmd.extension = GL_NV_video_capture();
    glBindVideoCaptureStreamBufferNV = cmd;
    return cmd;
  }
  private static Command glTextureStorage2D;
  public static Command glTextureStorage2D() {
    if (glTextureStorage2D != null)
      return glTextureStorage2D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureStorage2D = cmd;
    return cmd;
  }
  private static Command glTexStorageMem2DMultisampleEXT;
  public static Command glTexStorageMem2DMultisampleEXT() {
    if (glTexStorageMem2DMultisampleEXT != null)
      return glTexStorageMem2DMultisampleEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalFormat", _null_());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_EXT_memory_object();
    glTexStorageMem2DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glFlushStaticDataIBM;
  public static Command glFlushStaticDataIBM() {
    if (glFlushStaticDataIBM != null)
      return glFlushStaticDataIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_IBM_static_data();
    glFlushStaticDataIBM = cmd;
    return cmd;
  }
  private static Command glGetProgramStringNV;
  public static Command glGetProgramStringNV() {
    if (glGetProgramStringNV != null)
      return glGetProgramStringNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetProgramStringNV = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectuivEXT;
  public static Command glGetQueryObjectuivEXT() {
    if (glGetQueryObjectuivEXT != null)
      return glGetQueryObjectuivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glGetQueryObjectuivEXT = cmd;
    return cmd;
  }
  private static Command glTextureStorage1D;
  public static Command glTextureStorage1D() {
    if (glTextureStorage1D != null)
      return glTextureStorage1D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureStorage1D = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribdv;
  public static Command glGetVertexAttribdv() {
    if (glGetVertexAttribdv != null)
      return glGetVertexAttribdv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glGetVertexAttribdv = cmd;
    return cmd;
  }
  private static Command glTextureViewEXT;
  public static Command glTextureViewEXT() {
    if (glTextureViewEXT != null)
      return glTextureViewEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_texture_view();
    glTextureViewEXT = cmd;
    return cmd;
  }
  private static Command glPathParameterfvNV;
  public static Command glPathParameterfvNV() {
    if (glPathParameterfvNV != null)
      return glPathParameterfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PathParameter());
    cmd.extension = GL_NV_path_rendering();
    glPathParameterfvNV = cmd;
    return cmd;
  }
  private static Command glBeginTransformFeedbackEXT;
  public static Command glBeginTransformFeedbackEXT() {
    if (glBeginTransformFeedbackEXT != null)
      return glBeginTransformFeedbackEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("primitiveMode", PrimitiveType());
    cmd.extension = GL_EXT_transform_feedback();
    glBeginTransformFeedbackEXT = cmd;
    return cmd;
  }
  private static Command glIsImageHandleResidentNV;
  public static Command glIsImageHandleResidentNV() {
    if (glIsImageHandleResidentNV != null)
      return glIsImageHandleResidentNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsImageHandleResidentNV = cmd;
    return cmd;
  }
  private static Command glVertexP3uiv;
  public static Command glVertexP3uiv() {
    if (glVertexP3uiv != null)
      return glVertexP3uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexP3uiv = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureEXT;
  public static Command glFramebufferTextureEXT() {
    if (glFramebufferTextureEXT != null)
      return glFramebufferTextureEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_EXT_geometry_shader();
    glFramebufferTextureEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1iv;
  public static Command glMultiTexCoord1iv() {
    if (glMultiTexCoord1iv != null)
      return glMultiTexCoord1iv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1iv = cmd;
    return cmd;
  }
  private static Command glColorFragmentOp3ATI;
  public static Command glColorFragmentOp3ATI() {
    if (glColorFragmentOp3ATI != null)
      return glColorFragmentOp3ATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", FragmentOpATI());
    cmd.extension = GL_ATI_fragment_shader();
    glColorFragmentOp3ATI = cmd;
    return cmd;
  }
  private static Command glProgramBufferParametersIivNV;
  public static Command glProgramBufferParametersIivNV() {
    if (glProgramBufferParametersIivNV != null)
      return glProgramBufferParametersIivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_parameter_buffer_object();
    glProgramBufferParametersIivNV = cmd;
    return cmd;
  }
  private static Command glStencilThenCoverStrokePathNV;
  public static Command glStencilThenCoverStrokePathNV() {
    if (glStencilThenCoverStrokePathNV != null)
      return glStencilThenCoverStrokePathNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coverMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glStencilThenCoverStrokePathNV = cmd;
    return cmd;
  }
  private static Command glDebugMessageInsertKHR;
  public static Command glDebugMessageInsertKHR() {
    if (glDebugMessageInsertKHR != null)
      return glDebugMessageInsertKHR;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.addParam("type", DebugType());
    cmd.addParam("severity", DebugSeverity());
    cmd.extension = GL_KHR_debug();
    glDebugMessageInsertKHR = cmd;
    return cmd;
  }
  private static Command glReleaseKeyedMutexWin32EXT;
  public static Command glReleaseKeyedMutexWin32EXT() {
    if (glReleaseKeyedMutexWin32EXT != null)
      return glReleaseKeyedMutexWin32EXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glReleaseKeyedMutexWin32EXT = cmd;
    return cmd;
  }
  private static Command glGetCompressedTexImageARB;
  public static Command glGetCompressedTexImageARB() {
    if (glGetCompressedTexImageARB != null)
      return glGetCompressedTexImageARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_ARB_texture_compression();
    glGetCompressedTexImageARB = cmd;
    return cmd;
  }
  private static Command glTextureStorage3D;
  public static Command glTextureStorage3D() {
    if (glTextureStorage3D != null)
      return glTextureStorage3D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureStorage3D = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x2fv;
  public static Command glProgramUniformMatrix4x2fv() {
    if (glProgramUniformMatrix4x2fv != null)
      return glProgramUniformMatrix4x2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix4x2fv = cmd;
    return cmd;
  }
  private static Command glBindMultiTextureEXT;
  public static Command glBindMultiTextureEXT() {
    if (glBindMultiTextureEXT != null)
      return glBindMultiTextureEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glBindMultiTextureEXT = cmd;
    return cmd;
  }
  private static Command glMapNamedBufferRange;
  public static Command glMapNamedBufferRange() {
    if (glMapNamedBufferRange != null)
      return glMapNamedBufferRange;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", BufferAccessMask());
    cmd.extension = GL_ARB_direct_state_access();
    glMapNamedBufferRange = cmd;
    return cmd;
  }
  private static Command glClearNamedFramebufferfi;
  public static Command glClearNamedFramebufferfi() {
    if (glClearNamedFramebufferfi != null)
      return glClearNamedFramebufferfi;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    cmd.extension = GL_ARB_direct_state_access();
    glClearNamedFramebufferfi = cmd;
    return cmd;
  }
  private static Command glNamedRenderbufferStorageMultisample;
  public static Command glNamedRenderbufferStorageMultisample() {
    if (glNamedRenderbufferStorageMultisample != null)
      return glNamedRenderbufferStorageMultisample;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedRenderbufferStorageMultisample = cmd;
    return cmd;
  }
  private static Command glGetTexParameterIivEXT;
  public static Command glGetTexParameterIivEXT() {
    if (glGetTexParameterIivEXT != null)
      return glGetTexParameterIivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_texture_border_clamp();
    glGetTexParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glCombinerParameterfNV;
  public static Command glCombinerParameterfNV() {
    if (glCombinerParameterfNV != null)
      return glCombinerParameterfNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glCombinerParameterfNV = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribfv;
  public static Command glGetVertexAttribfv() {
    if (glGetVertexAttribfv != null)
      return glGetVertexAttribfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glGetVertexAttribfv = cmd;
    return cmd;
  }
  private static Command glPointParameterx;
  public static Command glPointParameterx() {
    if (glPointParameterx != null)
      return glPointParameterx;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glPointParameterx = cmd;
    return cmd;
  }
  private static Command glSampleMaskEXT;
  public static Command glSampleMaskEXT() {
    if (glSampleMaskEXT != null)
      return glSampleMaskEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("invert", Boolean());
    cmd.extension = GL_EXT_multisample();
    glSampleMaskEXT = cmd;
    return cmd;
  }
  private static Command glCopyTextureSubImage2DEXT;
  public static Command glCopyTextureSubImage2DEXT() {
    if (glCopyTextureSubImage2DEXT != null)
      return glCopyTextureSubImage2DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyTextureSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glResetHistogram;
  public static Command glResetHistogram() {
    if (glResetHistogram != null)
      return glResetHistogram;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.extension = GL_ARB_imaging();
    glResetHistogram = cmd;
    return cmd;
  }
  private static Command glMaterialxvOES;
  public static Command glMaterialxvOES() {
    if (glMaterialxvOES != null)
      return glMaterialxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_OES_fixed_point();
    glMaterialxvOES = cmd;
    return cmd;
  }
  private static Command glGetFinalCombinerInputParameterivNV;
  public static Command glGetFinalCombinerInputParameterivNV() {
    if (glGetFinalCombinerInputParameterivNV != null)
      return glGetFinalCombinerInputParameterivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("variable", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glGetFinalCombinerInputParameterivNV = cmd;
    return cmd;
  }
  private static Command glPointParameteri;
  public static Command glPointParameteri() {
    if (glPointParameteri != null)
      return glPointParameteri;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glPointParameteri = cmd;
    return cmd;
  }
  private static Command glPointParameterf;
  public static Command glPointParameterf() {
    if (glPointParameterf != null)
      return glPointParameterf;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glPointParameterf = cmd;
    return cmd;
  }
  private static Command glGetnConvolutionFilterARB;
  public static Command glGetnConvolutionFilterARB() {
    if (glGetnConvolutionFilterARB != null)
      return glGetnConvolutionFilterARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glGetnConvolutionFilterARB = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribIivEXT;
  public static Command glGetVertexAttribIivEXT() {
    if (glGetVertexAttribIivEXT != null)
      return glGetVertexAttribIivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_NV_vertex_program4();
    glGetVertexAttribIivEXT = cmd;
    return cmd;
  }
  private static Command glTexBufferARB;
  public static Command glTexBufferARB() {
    if (glTexBufferARB != null)
      return glTexBufferARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_buffer_object();
    glTexBufferARB = cmd;
    return cmd;
  }
  private static Command glTextureStorage2DMultisampleEXT;
  public static Command glTextureStorage2DMultisampleEXT() {
    if (glTextureStorage2DMultisampleEXT != null)
      return glTextureStorage2DMultisampleEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureStorage2DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glReadnPixelsARB;
  public static Command glReadnPixelsARB() {
    if (glReadnPixelsARB != null)
      return glReadnPixelsARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glReadnPixelsARB = cmd;
    return cmd;
  }
  private static Command glTexCoordPointerEXT;
  public static Command glTexCoordPointerEXT() {
    if (glTexCoordPointerEXT != null)
      return glTexCoordPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_EXT_vertex_array();
    glTexCoordPointerEXT = cmd;
    return cmd;
  }
  private static Command glFragmentLightModelfSGIX;
  public static Command glFragmentLightModelfSGIX() {
    if (glFragmentLightModelfSGIX != null)
      return glFragmentLightModelfSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FragmentLightModelParameterSGIX());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightModelfSGIX = cmd;
    return cmd;
  }
  private static Command glLightModelxv;
  public static Command glLightModelxv() {
    if (glLightModelxv != null)
      return glLightModelxv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    glLightModelxv = cmd;
    return cmd;
  }
  private static Command glTexStorageMem3DMultisampleEXT;
  public static Command glTexStorageMem3DMultisampleEXT() {
    if (glTexStorageMem3DMultisampleEXT != null)
      return glTexStorageMem3DMultisampleEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalFormat", _null_());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_EXT_memory_object();
    glTexStorageMem3DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glMapBufferRange;
  public static Command glMapBufferRange() {
    if (glMapBufferRange != null)
      return glMapBufferRange;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("access", BufferAccessMask());
    cmd.extension = GL_ARB_map_buffer_range();
    glMapBufferRange = cmd;
    return cmd;
  }
  private static Command glIsFramebuffer;
  public static Command glIsFramebuffer() {
    if (glIsFramebuffer != null)
      return glIsFramebuffer;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_framebuffer_object();
    glIsFramebuffer = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribArrayObjectfvATI;
  public static Command glGetVertexAttribArrayObjectfvATI() {
    if (glGetVertexAttribArrayObjectfvATI != null)
      return glGetVertexAttribArrayObjectfvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glGetVertexAttribArrayObjectfvATI = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribiv;
  public static Command glGetVertexAttribiv() {
    if (glGetVertexAttribiv != null)
      return glGetVertexAttribiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glGetVertexAttribiv = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage1DARB;
  public static Command glCompressedTexSubImage1DARB() {
    if (glCompressedTexSubImage1DARB != null)
      return glCompressedTexSubImage1DARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_texture_compression();
    glCompressedTexSubImage1DARB = cmd;
    return cmd;
  }
  private static Command glCoverStrokePathInstancedNV;
  public static Command glCoverStrokePathInstancedNV() {
    if (glCoverStrokePathInstancedNV != null)
      return glCoverStrokePathInstancedNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("pathNameType", PathElementType());
    cmd.addParam("coverMode", PathCoverMode());
    cmd.addParam("transformType", PathTransformType());
    cmd.extension = GL_NV_path_rendering();
    glCoverStrokePathInstancedNV = cmd;
    return cmd;
  }
  private static Command glClearNamedFramebufferiv;
  public static Command glClearNamedFramebufferiv() {
    if (glClearNamedFramebufferiv != null)
      return glClearNamedFramebufferiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    cmd.extension = GL_ARB_direct_state_access();
    glClearNamedFramebufferiv = cmd;
    return cmd;
  }
  private static Command glTexStorage3DEXT;
  public static Command glTexStorage3DEXT() {
    if (glTexStorage3DEXT != null)
      return glTexStorage3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_texture_storage();
    glTexStorage3DEXT = cmd;
    return cmd;
  }
  private static Command glGetProgramBinary;
  public static Command glGetProgramBinary() {
    if (glGetProgramBinary != null)
      return glGetProgramBinary;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("binaryFormat", _null_());
    cmd.extension = GL_ARB_get_program_binary();
    glGetProgramBinary = cmd;
    return cmd;
  }
  private static Command glElementPointerAPPLE;
  public static Command glElementPointerAPPLE() {
    if (glElementPointerAPPLE != null)
      return glElementPointerAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_APPLE_element_array();
    glElementPointerAPPLE = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectiv;
  public static Command glGetQueryObjectiv() {
    if (glGetQueryObjectiv != null)
      return glGetQueryObjectiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    glGetQueryObjectiv = cmd;
    return cmd;
  }
  private static Command glIsProgramPipelineEXT;
  public static Command glIsProgramPipelineEXT() {
    if (glIsProgramPipelineEXT != null)
      return glIsProgramPipelineEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_separate_shader_objects();
    glIsProgramPipelineEXT = cmd;
    return cmd;
  }
  private static Command glColorP4uiv;
  public static Command glColorP4uiv() {
    if (glColorP4uiv != null)
      return glColorP4uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glColorP4uiv = cmd;
    return cmd;
  }
  private static Command glBindTransformFeedback;
  public static Command glBindTransformFeedback() {
    if (glBindTransformFeedback != null)
      return glBindTransformFeedback;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BindTransformFeedbackTarget());
    cmd.extension = GL_ARB_transform_feedback2();
    glBindTransformFeedback = cmd;
    return cmd;
  }
  private static Command glPointParameterfEXT;
  public static Command glPointParameterfEXT() {
    if (glPointParameterfEXT != null)
      return glPointParameterfEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_point_parameters();
    glPointParameterfEXT = cmd;
    return cmd;
  }
  private static Command glGetPathParameterivNV;
  public static Command glGetPathParameterivNV() {
    if (glGetPathParameterivNV != null)
      return glGetPathParameterivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PathParameter());
    cmd.extension = GL_NV_path_rendering();
    glGetPathParameterivNV = cmd;
    return cmd;
  }
  private static Command glObjectLabel;
  public static Command glObjectLabel() {
    if (glObjectLabel != null)
      return glObjectLabel;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("identifier", ObjectIdentifier());
    cmd.extension = GL_KHR_debug();
    glObjectLabel = cmd;
    return cmd;
  }
  private static Command glVDPAUGetSurfaceivNV;
  public static Command glVDPAUGetSurfaceivNV() {
    if (glVDPAUGetSurfaceivNV != null)
      return glVDPAUGetSurfaceivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vdpau_interop();
    glVDPAUGetSurfaceivNV = cmd;
    return cmd;
  }
  private static Command glVertexStream1fvATI;
  public static Command glVertexStream1fvATI() {
    if (glVertexStream1fvATI != null)
      return glVertexStream1fvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1fvATI = cmd;
    return cmd;
  }
  private static Command glGetTransformFeedbackiv;
  public static Command glGetTransformFeedbackiv() {
    if (glGetTransformFeedbackiv != null)
      return glGetTransformFeedbackiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TransformFeedbackPName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTransformFeedbackiv = cmd;
    return cmd;
  }
  private static Command glVertexAttribParameteriAMD;
  public static Command glVertexAttribParameteriAMD() {
    if (glVertexAttribParameteriAMD != null)
      return glVertexAttribParameteriAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_AMD_interleaved_elements();
    glVertexAttribParameteriAMD = cmd;
    return cmd;
  }
  private static Command glGetProgramResourceLocationIndex;
  public static Command glGetProgramResourceLocationIndex() {
    if (glGetProgramResourceLocationIndex != null)
      return glGetProgramResourceLocationIndex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.extension = GL_ARB_program_interface_query();
    glGetProgramResourceLocationIndex = cmd;
    return cmd;
  }
  private static Command glGetImageTransformParameterfvHP;
  public static Command glGetImageTransformParameterfvHP() {
    if (glGetImageTransformParameterfvHP != null)
      return glGetImageTransformParameterfvHP;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_HP_image_transform();
    glGetImageTransformParameterfvHP = cmd;
    return cmd;
  }
  private static Command glIsBufferARB;
  public static Command glIsBufferARB() {
    if (glIsBufferARB != null)
      return glIsBufferARB;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_vertex_buffer_object();
    glIsBufferARB = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribLui64vNV;
  public static Command glGetVertexAttribLui64vNV() {
    if (glGetVertexAttribLui64vNV != null)
      return glGetVertexAttribLui64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_NV_vertex_attrib_integer_64bit();
    glGetVertexAttribLui64vNV = cmd;
    return cmd;
  }
  private static Command glProgramParameteriARB;
  public static Command glProgramParameteriARB() {
    if (glProgramParameteriARB != null)
      return glProgramParameteriARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ProgramParameterPName());
    cmd.extension = GL_ARB_geometry_shader4();
    glProgramParameteriARB = cmd;
    return cmd;
  }
  private static Command glActiveStencilFaceEXT;
  public static Command glActiveStencilFaceEXT() {
    if (glActiveStencilFaceEXT != null)
      return glActiveStencilFaceEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("face", StencilFaceDirection());
    cmd.extension = GL_EXT_stencil_two_side();
    glActiveStencilFaceEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4dARB;
  public static Command glMultiTexCoord4dARB() {
    if (glMultiTexCoord4dARB != null)
      return glMultiTexCoord4dARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4dARB = cmd;
    return cmd;
  }
  private static Command glGetPixelMapfv;
  public static Command glGetPixelMapfv() {
    if (glGetPixelMapfv != null)
      return glGetPixelMapfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glGetPixelMapfv = cmd;
    return cmd;
  }
  private static Command glVertexStream4svATI;
  public static Command glVertexStream4svATI() {
    if (glVertexStream4svATI != null)
      return glVertexStream4svATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4svATI = cmd;
    return cmd;
  }
  private static Command glTexEnvxvOES;
  public static Command glTexEnvxvOES() {
    if (glTexEnvxvOES != null)
      return glTexEnvxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_OES_fixed_point();
    glTexEnvxvOES = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameterI4uiEXT;
  public static Command glNamedProgramLocalParameterI4uiEXT() {
    if (glNamedProgramLocalParameterI4uiEXT != null)
      return glNamedProgramLocalParameterI4uiEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameterI4uiEXT = cmd;
    return cmd;
  }
  private static Command glFogCoordFormatNV;
  public static Command glFogCoordFormatNV() {
    if (glFogCoordFormatNV != null)
      return glFogCoordFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glFogCoordFormatNV = cmd;
    return cmd;
  }
  private static Command glGetIntegeri_vEXT;
  public static Command glGetIntegeri_vEXT() {
    if (glGetIntegeri_vEXT != null)
      return glGetIntegeri_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_EXT_multiview_draw_buffers();
    glGetIntegeri_vEXT = cmd;
    return cmd;
  }
  private static Command glColorMaterial;
  public static Command glColorMaterial() {
    if (glColorMaterial != null)
      return glColorMaterial;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("mode", ColorMaterialParameter());
    glColorMaterial = cmd;
    return cmd;
  }
  private static Command glGetConvolutionParameterfvEXT;
  public static Command glGetConvolutionParameterfvEXT() {
    if (glGetConvolutionParameterfvEXT != null)
      return glGetConvolutionParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_EXT_convolution();
    glGetConvolutionParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glReadnPixels;
  public static Command glReadnPixels() {
    if (glReadnPixels != null)
      return glReadnPixels;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_KHR_robustness();
    glReadnPixels = cmd;
    return cmd;
  }
  private static Command glCombinerInputNV;
  public static Command glCombinerInputNV() {
    if (glCombinerInputNV != null)
      return glCombinerInputNV;
    Command cmd = new Command(6);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("portion", _null_());
    cmd.addParam("variable", _null_());
    cmd.addParam("input", _null_());
    cmd.addParam("mapping", _null_());
    cmd.addParam("componentUsage", _null_());
    cmd.extension = GL_NV_register_combiners();
    glCombinerInputNV = cmd;
    return cmd;
  }
  private static Command glVDPAURegisterOutputSurfaceNV;
  public static Command glVDPAURegisterOutputSurfaceNV() {
    if (glVDPAURegisterOutputSurfaceNV != null)
      return glVDPAURegisterOutputSurfaceNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vdpau_interop();
    glVDPAURegisterOutputSurfaceNV = cmd;
    return cmd;
  }
  private static Command glMultiTexEnvfEXT;
  public static Command glMultiTexEnvfEXT() {
    if (glMultiTexEnvfEXT != null)
      return glMultiTexEnvfEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexEnvfEXT = cmd;
    return cmd;
  }
  private static Command glIsProgramPipeline;
  public static Command glIsProgramPipeline() {
    if (glIsProgramPipeline != null)
      return glIsProgramPipeline;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_separate_shader_objects();
    glIsProgramPipeline = cmd;
    return cmd;
  }
  private static Command glPathMemoryGlyphIndexArrayNV;
  public static Command glPathMemoryGlyphIndexArrayNV() {
    if (glPathMemoryGlyphIndexArrayNV != null)
      return glPathMemoryGlyphIndexArrayNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("fontTarget", _null_());
    cmd.extension = GL_NV_path_rendering();
    glPathMemoryGlyphIndexArrayNV = cmd;
    return cmd;
  }
  private static Command glCopyImageSubDataOES;
  public static Command glCopyImageSubDataOES() {
    if (glCopyImageSubDataOES != null)
      return glCopyImageSubDataOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("srcTarget", CopyBufferSubDataTarget());
    cmd.addParam("dstTarget", CopyBufferSubDataTarget());
    glCopyImageSubDataOES = cmd;
    return cmd;
  }
  private static Command glBindRenderbufferOES;
  public static Command glBindRenderbufferOES() {
    if (glBindRenderbufferOES != null)
      return glBindRenderbufferOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.extension = GL_OES_framebuffer_object();
    glBindRenderbufferOES = cmd;
    return cmd;
  }
  private static Command glVertexStream2ivATI;
  public static Command glVertexStream2ivATI() {
    if (glVertexStream2ivATI != null)
      return glVertexStream2ivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2ivATI = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3hvNV;
  public static Command glMultiTexCoord3hvNV() {
    if (glMultiTexCoord3hvNV != null)
      return glMultiTexCoord3hvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord3hvNV = cmd;
    return cmd;
  }
  private static Command glFramebufferDrawBuffersEXT;
  public static Command glFramebufferDrawBuffersEXT() {
    if (glFramebufferDrawBuffersEXT != null)
      return glFramebufferDrawBuffersEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", DrawBufferMode());
    cmd.extension = GL_EXT_direct_state_access();
    glFramebufferDrawBuffersEXT = cmd;
    return cmd;
  }
  private static Command glNewObjectBufferATI;
  public static Command glNewObjectBufferATI() {
    if (glNewObjectBufferATI != null)
      return glNewObjectBufferATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("usage", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glNewObjectBufferATI = cmd;
    return cmd;
  }
  private static Command glTextureStorage3DMultisampleEXT;
  public static Command glTextureStorage3DMultisampleEXT() {
    if (glTextureStorage3DMultisampleEXT != null)
      return glTextureStorage3DMultisampleEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureStorage3DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2bvOES;
  public static Command glMultiTexCoord2bvOES() {
    if (glMultiTexCoord2bvOES != null)
      return glMultiTexCoord2bvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord2bvOES = cmd;
    return cmd;
  }
  private static Command glGetProgramEnvParameterfvARB;
  public static Command glGetProgramEnvParameterfvARB() {
    if (glGetProgramEnvParameterfvARB != null)
      return glGetProgramEnvParameterfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glGetProgramEnvParameterfvARB = cmd;
    return cmd;
  }
  private static Command glMakeImageHandleResidentARB;
  public static Command glMakeImageHandleResidentARB() {
    if (glMakeImageHandleResidentARB != null)
      return glMakeImageHandleResidentARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", _null_());
    cmd.extension = GL_ARB_bindless_texture();
    glMakeImageHandleResidentARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1dv;
  public static Command glMultiTexCoord1dv() {
    if (glMultiTexCoord1dv != null)
      return glMultiTexCoord1dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1dv = cmd;
    return cmd;
  }
  private static Command glMatrixLoadTransposefEXT;
  public static Command glMatrixLoadTransposefEXT() {
    if (glMatrixLoadTransposefEXT != null)
      return glMatrixLoadTransposefEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixLoadTransposefEXT = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribLi64vNV;
  public static Command glGetVertexAttribLi64vNV() {
    if (glGetVertexAttribLi64vNV != null)
      return glGetVertexAttribLi64vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_NV_vertex_attrib_integer_64bit();
    glGetVertexAttribLi64vNV = cmd;
    return cmd;
  }
  private static Command glBlendEquationiOES;
  public static Command glBlendEquationiOES() {
    if (glBlendEquationiOES != null)
      return glBlendEquationiOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glBlendEquationiOES = cmd;
    return cmd;
  }
  private static Command glCopyImageSubData;
  public static Command glCopyImageSubData() {
    if (glCopyImageSubData != null)
      return glCopyImageSubData;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("srcTarget", CopyBufferSubDataTarget());
    cmd.addParam("dstTarget", CopyBufferSubDataTarget());
    glCopyImageSubData = cmd;
    return cmd;
  }
  private static Command glIsSync;
  public static Command glIsSync() {
    if (glIsSync != null)
      return glIsSync;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_sync();
    glIsSync = cmd;
    return cmd;
  }
  private static Command glMatrixRotatedEXT;
  public static Command glMatrixRotatedEXT() {
    if (glMatrixRotatedEXT != null)
      return glMatrixRotatedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixRotatedEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4fvARB;
  public static Command glMultiTexCoord4fvARB() {
    if (glMultiTexCoord4fvARB != null)
      return glMultiTexCoord4fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4fvARB = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsEXT;
  public static Command glMultiDrawElementsEXT() {
    if (glMultiDrawElementsEXT != null)
      return glMultiDrawElementsEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsEXT = cmd;
    return cmd;
  }
  private static Command glMap1xOES;
  public static Command glMap1xOES() {
    if (glMap1xOES != null)
      return glMap1xOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.extension = GL_OES_fixed_point();
    glMap1xOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1fv;
  public static Command glMultiTexCoord1fv() {
    if (glMultiTexCoord1fv != null)
      return glMultiTexCoord1fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    glMultiTexCoord1fv = cmd;
    return cmd;
  }
  private static Command glIsFenceNV;
  public static Command glIsFenceNV() {
    if (glIsFenceNV != null)
      return glIsFenceNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_fence();
    glIsFenceNV = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture3DOES;
  public static Command glFramebufferTexture3DOES() {
    if (glFramebufferTexture3DOES != null)
      return glFramebufferTexture3DOES;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_OES_texture_3D();
    glFramebufferTexture3DOES = cmd;
    return cmd;
  }
  private static Command glVertexP2ui;
  public static Command glVertexP2ui() {
    if (glVertexP2ui != null)
      return glVertexP2ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexP2ui = cmd;
    return cmd;
  }
  private static Command glGetFixedvOES;
  public static Command glGetFixedvOES() {
    if (glGetFixedvOES != null)
      return glGetFixedvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    cmd.extension = GL_OES_fixed_point();
    glGetFixedvOES = cmd;
    return cmd;
  }
  private static Command glLoadIdentityDeformationMapSGIX;
  public static Command glLoadIdentityDeformationMapSGIX() {
    if (glLoadIdentityDeformationMapSGIX != null)
      return glLoadIdentityDeformationMapSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", FfdMaskSGIX());
    cmd.extension = GL_SGIX_polynomial_ffd();
    glLoadIdentityDeformationMapSGIX = cmd;
    return cmd;
  }
  private static Command glHintPGI;
  public static Command glHintPGI() {
    if (glHintPGI != null)
      return glHintPGI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_PGI_misc_hints();
    glHintPGI = cmd;
    return cmd;
  }
  private static Command glBindRenderbuffer;
  public static Command glBindRenderbuffer() {
    if (glBindRenderbuffer != null)
      return glBindRenderbuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glBindRenderbuffer = cmd;
    return cmd;
  }
  private static Command glAlphaFuncxOES;
  public static Command glAlphaFuncxOES() {
    if (glAlphaFuncxOES != null)
      return glAlphaFuncxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", AlphaFunction());
    cmd.extension = GL_OES_fixed_point();
    glAlphaFuncxOES = cmd;
    return cmd;
  }
  private static Command glTexGeniOES;
  public static Command glTexGeniOES() {
    if (glTexGeniOES != null)
      return glTexGeniOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_texture_cube_map();
    glTexGeniOES = cmd;
    return cmd;
  }
  private static Command glUseProgramStages;
  public static Command glUseProgramStages() {
    if (glUseProgramStages != null)
      return glUseProgramStages;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stages", UseProgramStageMask());
    cmd.extension = GL_ARB_separate_shader_objects();
    glUseProgramStages = cmd;
    return cmd;
  }
  private static Command glNamedBufferDataEXT;
  public static Command glNamedBufferDataEXT() {
    if (glNamedBufferDataEXT != null)
      return glNamedBufferDataEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("usage", VertexBufferObjectUsage());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedBufferDataEXT = cmd;
    return cmd;
  }
  private static Command glProgramSubroutineParametersuivNV;
  public static Command glProgramSubroutineParametersuivNV() {
    if (glProgramSubroutineParametersuivNV != null)
      return glProgramSubroutineParametersuivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program5();
    glProgramSubroutineParametersuivNV = cmd;
    return cmd;
  }
  private static Command glSecondaryColorPointerListIBM;
  public static Command glSecondaryColorPointerListIBM() {
    if (glSecondaryColorPointerListIBM != null)
      return glSecondaryColorPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_IBM_vertex_array_lists();
    glSecondaryColorPointerListIBM = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTextureEXT;
  public static Command glNamedFramebufferTextureEXT() {
    if (glNamedFramebufferTextureEXT != null)
      return glNamedFramebufferTextureEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferTextureEXT = cmd;
    return cmd;
  }
  private static Command glAccum;
  public static Command glAccum() {
    if (glAccum != null)
      return glAccum;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", AccumOp());
    glAccum = cmd;
    return cmd;
  }
  private static Command glShadeModel;
  public static Command glShadeModel() {
    if (glShadeModel != null)
      return glShadeModel;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", ShadingModel());
    glShadeModel = cmd;
    return cmd;
  }
  private static Command glFragmentLightivSGIX;
  public static Command glFragmentLightivSGIX() {
    if (glFragmentLightivSGIX != null)
      return glFragmentLightivSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightivSGIX = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4fvARB;
  public static Command glUniformMatrix4fvARB() {
    if (glUniformMatrix4fvARB != null)
      return glUniformMatrix4fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_shader_objects();
    glUniformMatrix4fvARB = cmd;
    return cmd;
  }
  private static Command glGetVideoCaptureStreamfvNV;
  public static Command glGetVideoCaptureStreamfvNV() {
    if (glGetVideoCaptureStreamfvNV != null)
      return glGetVideoCaptureStreamfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glGetVideoCaptureStreamfvNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3bvOES;
  public static Command glMultiTexCoord3bvOES() {
    if (glMultiTexCoord3bvOES != null)
      return glMultiTexCoord3bvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord3bvOES = cmd;
    return cmd;
  }
  private static Command glClearNamedBufferData;
  public static Command glClearNamedBufferData() {
    if (glClearNamedBufferData != null)
      return glClearNamedBufferData;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_direct_state_access();
    glClearNamedBufferData = cmd;
    return cmd;
  }
  private static Command glFramebufferSamplePositionsfvAMD;
  public static Command glFramebufferSamplePositionsfvAMD() {
    if (glFramebufferSamplePositionsfvAMD != null)
      return glFramebufferSamplePositionsfvAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_AMD_framebuffer_sample_positions();
    glFramebufferSamplePositionsfvAMD = cmd;
    return cmd;
  }
  private static Command glCoverFillPathInstancedNV;
  public static Command glCoverFillPathInstancedNV() {
    if (glCoverFillPathInstancedNV != null)
      return glCoverFillPathInstancedNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("pathNameType", PathElementType());
    cmd.addParam("coverMode", PathCoverMode());
    cmd.addParam("transformType", PathTransformType());
    cmd.extension = GL_NV_path_rendering();
    glCoverFillPathInstancedNV = cmd;
    return cmd;
  }
  private static Command glTextureParameterIiv;
  public static Command glTextureParameterIiv() {
    if (glTextureParameterIiv != null)
      return glTextureParameterIiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureParameterIiv = cmd;
    return cmd;
  }
  private static Command glGetHistogramParameterfvEXT;
  public static Command glGetHistogramParameterfvEXT() {
    if (glGetHistogramParameterfvEXT != null)
      return glGetHistogramParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("pname", GetHistogramParameterPNameEXT());
    cmd.extension = GL_EXT_histogram();
    glGetHistogramParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexLevelParameterfvEXT;
  public static Command glGetMultiTexLevelParameterfvEXT() {
    if (glGetMultiTexLevelParameterfvEXT != null)
      return glGetMultiTexLevelParameterfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexLevelParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glCopyMultiTexSubImage3DEXT;
  public static Command glCopyMultiTexSubImage3DEXT() {
    if (glCopyMultiTexSubImage3DEXT != null)
      return glCopyMultiTexSubImage3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyMultiTexSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix4x2fvNV;
  public static Command glUniformMatrix4x2fvNV() {
    if (glUniformMatrix4x2fvNV != null)
      return glUniformMatrix4x2fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_NV_non_square_matrices();
    glUniformMatrix4x2fvNV = cmd;
    return cmd;
  }
  private static Command glCompressedMultiTexImage2DEXT;
  public static Command glCompressedMultiTexImage2DEXT() {
    if (glCompressedMultiTexImage2DEXT != null)
      return glCompressedMultiTexImage2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedMultiTexImage2DEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexSubImage3DEXT;
  public static Command glMultiTexSubImage3DEXT() {
    if (glMultiTexSubImage3DEXT != null)
      return glMultiTexSubImage3DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glMapParameterivNV;
  public static Command glMapParameterivNV() {
    if (glMapParameterivNV != null)
      return glMapParameterivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_evaluators();
    glMapParameterivNV = cmd;
    return cmd;
  }
  private static Command glProgramLocalParametersI4uivNV;
  public static Command glProgramLocalParametersI4uivNV() {
    if (glProgramLocalParametersI4uivNV != null)
      return glProgramLocalParametersI4uivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramLocalParametersI4uivNV = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameterI4uiNV;
  public static Command glProgramLocalParameterI4uiNV() {
    if (glProgramLocalParameterI4uiNV != null)
      return glProgramLocalParameterI4uiNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramLocalParameterI4uiNV = cmd;
    return cmd;
  }
  private static Command glHistogram;
  public static Command glHistogram() {
    if (glHistogram != null)
      return glHistogram;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("sink", Boolean());
    cmd.extension = GL_ARB_imaging();
    glHistogram = cmd;
    return cmd;
  }
  private static Command glClientActiveTexture;
  public static Command glClientActiveTexture() {
    if (glClientActiveTexture != null)
      return glClientActiveTexture;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    glClientActiveTexture = cmd;
    return cmd;
  }
  private static Command glVertexWeightPointerEXT;
  public static Command glVertexWeightPointerEXT() {
    if (glVertexWeightPointerEXT != null)
      return glVertexWeightPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_vertex_weighting();
    glVertexWeightPointerEXT = cmd;
    return cmd;
  }
  private static Command glTexFilterFuncSGIS;
  public static Command glTexFilterFuncSGIS() {
    if (glTexFilterFuncSGIS != null)
      return glTexFilterFuncSGIS;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("filter", _null_());
    cmd.extension = GL_SGIS_texture_filter4();
    glTexFilterFuncSGIS = cmd;
    return cmd;
  }
  private static Command glIsEnablediEXT;
  public static Command glIsEnablediEXT() {
    if (glIsEnablediEXT != null)
      return glIsEnablediEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glIsEnablediEXT = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisampleIMG;
  public static Command glRenderbufferStorageMultisampleIMG() {
    if (glRenderbufferStorageMultisampleIMG != null)
      return glRenderbufferStorageMultisampleIMG;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_IMG_multisampled_render_to_texture();
    glRenderbufferStorageMultisampleIMG = cmd;
    return cmd;
  }
  private static Command glGetTexEnviv;
  public static Command glGetTexEnviv() {
    if (glGetTexEnviv != null)
      return glGetTexEnviv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glGetTexEnviv = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribIuiv;
  public static Command glGetVertexAttribIuiv() {
    if (glGetVertexAttribIuiv != null)
      return glGetVertexAttribIuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    glGetVertexAttribIuiv = cmd;
    return cmd;
  }
  private static Command glHint;
  public static Command glHint() {
    if (glHint != null)
      return glHint;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HintTarget());
    cmd.addParam("mode", HintMode());
    glHint = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1iARB;
  public static Command glMultiTexCoord1iARB() {
    if (glMultiTexCoord1iARB != null)
      return glMultiTexCoord1iARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1iARB = cmd;
    return cmd;
  }
  private static Command glColorPointervINTEL;
  public static Command glColorPointervINTEL() {
    if (glColorPointervINTEL != null)
      return glColorPointervINTEL;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_INTEL_parallel_arrays();
    glColorPointervINTEL = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage3DOES;
  public static Command glCompressedTexSubImage3DOES() {
    if (glCompressedTexSubImage3DOES != null)
      return glCompressedTexSubImage3DOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_OES_texture_3D();
    glCompressedTexSubImage3DOES = cmd;
    return cmd;
  }
  private static Command glGetProgramParameterfvNV;
  public static Command glGetProgramParameterfvNV() {
    if (glGetProgramParameterfvNV != null)
      return glGetProgramParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetProgramParameterfvNV = cmd;
    return cmd;
  }
  private static Command glSetMultisamplefvAMD;
  public static Command glSetMultisamplefvAMD() {
    if (glSetMultisamplefvAMD != null)
      return glSetMultisamplefvAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_AMD_sample_positions();
    glSetMultisamplefvAMD = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterivEXT;
  public static Command glGetTextureParameterivEXT() {
    if (glGetTextureParameterivEXT != null)
      return glGetTextureParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetActiveUniform;
  public static Command glGetActiveUniform() {
    if (glGetActiveUniform != null)
      return glGetActiveUniform;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", AttributeType());
    glGetActiveUniform = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysEXT;
  public static Command glMultiDrawArraysEXT() {
    if (glMultiDrawArraysEXT != null)
      return glMultiDrawArraysEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysEXT = cmd;
    return cmd;
  }
  private static Command glCombinerOutputNV;
  public static Command glCombinerOutputNV() {
    if (glCombinerOutputNV != null)
      return glCombinerOutputNV;
    Command cmd = new Command(10);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("portion", _null_());
    cmd.addParam("abOutput", _null_());
    cmd.addParam("cdOutput", _null_());
    cmd.addParam("sumOutput", _null_());
    cmd.addParam("scale", _null_());
    cmd.addParam("bias", _null_());
    cmd.addParam("abDotProduct", Boolean());
    cmd.addParam("cdDotProduct", Boolean());
    cmd.addParam("muxSum", Boolean());
    cmd.extension = GL_NV_register_combiners();
    glCombinerOutputNV = cmd;
    return cmd;
  }
  private static Command glTexImage3DOES;
  public static Command glTexImage3DOES() {
    if (glTexImage3DOES != null)
      return glTexImage3DOES;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_OES_texture_3D();
    glTexImage3DOES = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferTexture1DEXT;
  public static Command glNamedFramebufferTexture1DEXT() {
    if (glNamedFramebufferTexture1DEXT != null)
      return glNamedFramebufferTexture1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedFramebufferTexture1DEXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexImageEXT;
  public static Command glGetMultiTexImageEXT() {
    if (glGetMultiTexImageEXT != null)
      return glGetMultiTexImageEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexImageEXT = cmd;
    return cmd;
  }
  private static Command glLightModelxvOES;
  public static Command glLightModelxvOES() {
    if (glLightModelxvOES != null)
      return glLightModelxvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    cmd.extension = GL_OES_fixed_point();
    glLightModelxvOES = cmd;
    return cmd;
  }
  private static Command glCopyColorTable;
  public static Command glCopyColorTable() {
    if (glCopyColorTable != null)
      return glCopyColorTable;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_imaging();
    glCopyColorTable = cmd;
    return cmd;
  }
  private static Command glHistogramEXT;
  public static Command glHistogramEXT() {
    if (glHistogramEXT != null)
      return glHistogramEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("sink", Boolean());
    cmd.extension = GL_EXT_histogram();
    glHistogramEXT = cmd;
    return cmd;
  }
  private static Command glTexCoordP3uiv;
  public static Command glTexCoordP3uiv() {
    if (glTexCoordP3uiv != null)
      return glTexCoordP3uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP3uiv = cmd;
    return cmd;
  }
  private static Command glBindImageTexture;
  public static Command glBindImageTexture() {
    if (glBindImageTexture != null)
      return glBindImageTexture;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("layered", Boolean());
    cmd.addParam("access", BufferAccessARB());
    cmd.addParam("format", InternalFormat());
    cmd.extension = GL_ARB_shader_image_load_store();
    glBindImageTexture = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameter4fEXT;
  public static Command glNamedProgramLocalParameter4fEXT() {
    if (glNamedProgramLocalParameter4fEXT != null)
      return glNamedProgramLocalParameter4fEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameter4fEXT = cmd;
    return cmd;
  }
  private static Command glWaitSync;
  public static Command glWaitSync() {
    if (glWaitSync != null)
      return glWaitSync;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flags", _null_());
    cmd.extension = GL_ARB_sync();
    glWaitSync = cmd;
    return cmd;
  }
  private static Command glListParameteriSGIX;
  public static Command glListParameteriSGIX() {
    if (glListParameteriSGIX != null)
      return glListParameteriSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ListParameterName());
    cmd.extension = GL_SGIX_list_priority();
    glListParameteriSGIX = cmd;
    return cmd;
  }
  private static Command glGetIntegerui64i_vNV;
  public static Command glGetIntegerui64i_vNV() {
    if (glGetIntegerui64i_vNV != null)
      return glGetIntegerui64i_vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glGetIntegerui64i_vNV = cmd;
    return cmd;
  }
  private static Command glTextureRenderbufferEXT;
  public static Command glTextureRenderbufferEXT() {
    if (glTextureRenderbufferEXT != null)
      return glTextureRenderbufferEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureRenderbufferEXT = cmd;
    return cmd;
  }
  private static Command glElementPointerATI;
  public static Command glElementPointerATI() {
    if (glElementPointerATI != null)
      return glElementPointerATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_ATI_element_array();
    glElementPointerATI = cmd;
    return cmd;
  }
  private static Command glVertexStream1sATI;
  public static Command glVertexStream1sATI() {
    if (glVertexStream1sATI != null)
      return glVertexStream1sATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1sATI = cmd;
    return cmd;
  }
  private static Command glExtIsProgramBinaryQCOM;
  public static Command glExtIsProgramBinaryQCOM() {
    if (glExtIsProgramBinaryQCOM != null)
      return glExtIsProgramBinaryQCOM;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glExtIsProgramBinaryQCOM = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x3fvEXT;
  public static Command glProgramUniformMatrix2x3fvEXT() {
    if (glProgramUniformMatrix2x3fvEXT != null)
      return glProgramUniformMatrix2x3fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix2x3fvEXT = cmd;
    return cmd;
  }
  private static Command glDrawRangeElementsBaseVertexEXT;
  public static Command glDrawRangeElementsBaseVertexEXT() {
    if (glDrawRangeElementsBaseVertexEXT != null)
      return glDrawRangeElementsBaseVertexEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawRangeElementsBaseVertexEXT = cmd;
    return cmd;
  }
  private static Command glGetObjectLabelEXT;
  public static Command glGetObjectLabelEXT() {
    if (glGetObjectLabelEXT != null)
      return glGetObjectLabelEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_debug_label();
    glGetObjectLabelEXT = cmd;
    return cmd;
  }
  private static Command glTextureView;
  public static Command glTextureView() {
    if (glTextureView != null)
      return glTextureView;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_view();
    glTextureView = cmd;
    return cmd;
  }
  private static Command glImportMemoryFdEXT;
  public static Command glImportMemoryFdEXT() {
    if (glImportMemoryFdEXT != null)
      return glImportMemoryFdEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("handleType", ExternalHandleType());
    cmd.extension = GL_EXT_memory_object_fd();
    glImportMemoryFdEXT = cmd;
    return cmd;
  }
  private static Command glMatrixMult3x2fNV;
  public static Command glMatrixMult3x2fNV() {
    if (glMatrixMult3x2fNV != null)
      return glMatrixMult3x2fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("matrixMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glMatrixMult3x2fNV = cmd;
    return cmd;
  }
  private static Command glVertexAttribP1ui;
  public static Command glVertexAttribP1ui() {
    if (glVertexAttribP1ui != null)
      return glVertexAttribP1ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP1ui = cmd;
    return cmd;
  }
  private static Command glLightEnviSGIX;
  public static Command glLightEnviSGIX() {
    if (glLightEnviSGIX != null)
      return glLightEnviSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightEnvParameterSGIX());
    cmd.extension = GL_SGIX_fragment_lighting();
    glLightEnviSGIX = cmd;
    return cmd;
  }
  private static Command glIsVertexArrayOES;
  public static Command glIsVertexArrayOES() {
    if (glIsVertexArrayOES != null)
      return glIsVertexArrayOES;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_OES_vertex_array_object();
    glIsVertexArrayOES = cmd;
    return cmd;
  }
  private static Command glDrawArraysIndirect;
  public static Command glDrawArraysIndirect() {
    if (glDrawArraysIndirect != null)
      return glDrawArraysIndirect;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ARB_draw_indirect();
    glDrawArraysIndirect = cmd;
    return cmd;
  }
  private static Command glIsPointInFillPathNV;
  public static Command glIsPointInFillPathNV() {
    if (glIsPointInFillPathNV != null)
      return glIsPointInFillPathNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_path_rendering();
    glIsPointInFillPathNV = cmd;
    return cmd;
  }
  private static Command glTextureStorageMem1DEXT;
  public static Command glTextureStorageMem1DEXT() {
    if (glTextureStorageMem1DEXT != null)
      return glTextureStorageMem1DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalFormat", _null_());
    cmd.extension = GL_EXT_memory_object();
    glTextureStorageMem1DEXT = cmd;
    return cmd;
  }
  private static Command glFragmentLightModelfvSGIX;
  public static Command glFragmentLightModelfvSGIX() {
    if (glFragmentLightModelfvSGIX != null)
      return glFragmentLightModelfvSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FragmentLightModelParameterSGIX());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightModelfvSGIX = cmd;
    return cmd;
  }
  private static Command glGetNamedFramebufferParameterivEXT;
  public static Command glGetNamedFramebufferParameterivEXT() {
    if (glGetNamedFramebufferParameterivEXT != null)
      return glGetNamedFramebufferParameterivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetFramebufferParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedFramebufferParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterIivEXT;
  public static Command glGetSamplerParameterIivEXT() {
    if (glGetSamplerParameterIivEXT != null)
      return glGetSamplerParameterIivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_EXT_texture_border_clamp();
    glGetSamplerParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glTexGenxvOES;
  public static Command glTexGenxvOES() {
    if (glTexGenxvOES != null)
      return glTexGenxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_fixed_point();
    glTexGenxvOES = cmd;
    return cmd;
  }
  private static Command glTextureParameteriv;
  public static Command glTextureParameteriv() {
    if (glTextureParameteriv != null)
      return glTextureParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureParameteriv = cmd;
    return cmd;
  }
  private static Command glIsTransformFeedback;
  public static Command glIsTransformFeedback() {
    if (glIsTransformFeedback != null)
      return glIsTransformFeedback;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_transform_feedback2();
    glIsTransformFeedback = cmd;
    return cmd;
  }
  private static Command glMapBufferRangeEXT;
  public static Command glMapBufferRangeEXT() {
    if (glMapBufferRangeEXT != null)
      return glMapBufferRangeEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("access", BufferAccessMask());
    cmd.extension = GL_EXT_map_buffer_range();
    glMapBufferRangeEXT = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateiOES;
  public static Command glBlendFuncSeparateiOES() {
    if (glBlendFuncSeparateiOES != null)
      return glBlendFuncSeparateiOES;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("srcRGB", BlendingFactor());
    cmd.addParam("dstRGB", BlendingFactor());
    cmd.addParam("srcAlpha", BlendingFactor());
    cmd.addParam("dstAlpha", BlendingFactor());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glBlendFuncSeparateiOES = cmd;
    return cmd;
  }
  private static Command glDrawRangeElements;
  public static Command glDrawRangeElements() {
    if (glDrawRangeElements != null)
      return glDrawRangeElements;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawRangeElements = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedbackStreamInstanced;
  public static Command glDrawTransformFeedbackStreamInstanced() {
    if (glDrawTransformFeedbackStreamInstanced != null)
      return glDrawTransformFeedbackStreamInstanced;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawTransformFeedbackStreamInstanced = cmd;
    return cmd;
  }
  private static Command glGetProgramEnvParameterIuivNV;
  public static Command glGetProgramEnvParameterIuivNV() {
    if (glGetProgramEnvParameterIuivNV != null)
      return glGetProgramEnvParameterIuivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glGetProgramEnvParameterIuivNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x2dvEXT;
  public static Command glProgramUniformMatrix3x2dvEXT() {
    if (glProgramUniformMatrix3x2dvEXT != null)
      return glProgramUniformMatrix3x2dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix3x2dvEXT = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterIuivOES;
  public static Command glGetSamplerParameterIuivOES() {
    if (glGetSamplerParameterIuivOES != null)
      return glGetSamplerParameterIuivOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_OES_texture_border_clamp();
    glGetSamplerParameterIuivOES = cmd;
    return cmd;
  }
  private static Command glVertexP2uiv;
  public static Command glVertexP2uiv() {
    if (glVertexP2uiv != null)
      return glVertexP2uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexP2uiv = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2x4fv;
  public static Command glUniformMatrix2x4fv() {
    if (glUniformMatrix2x4fv != null)
      return glUniformMatrix2x4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix2x4fv = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterIivOES;
  public static Command glGetSamplerParameterIivOES() {
    if (glGetSamplerParameterIivOES != null)
      return glGetSamplerParameterIivOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_OES_texture_border_clamp();
    glGetSamplerParameterIivOES = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirectAMD;
  public static Command glMultiDrawElementsIndirectAMD() {
    if (glMultiDrawElementsIndirectAMD != null)
      return glMultiDrawElementsIndirectAMD;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElementsIndirectAMD = cmd;
    return cmd;
  }
  private static Command glClipPlanefOES;
  public static Command glClipPlanefOES() {
    if (glClipPlanefOES != null)
      return glClipPlanefOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glClipPlanefOES = cmd;
    return cmd;
  }
  private static Command glInvalidateFramebuffer;
  public static Command glInvalidateFramebuffer() {
    if (glInvalidateFramebuffer != null)
      return glInvalidateFramebuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachments", _null_());
    glInvalidateFramebuffer = cmd;
    return cmd;
  }
  private static Command glLGPUCopyImageSubDataNVX;
  public static Command glLGPUCopyImageSubDataNVX() {
    if (glLGPUCopyImageSubDataNVX != null)
      return glLGPUCopyImageSubDataNVX;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("destinationGpuMask", _null_());
    cmd.addParam("srcTarget", _null_());
    cmd.addParam("dstTarget", _null_());
    cmd.extension = GL_NVX_linked_gpu_multicast();
    glLGPUCopyImageSubDataNVX = cmd;
    return cmd;
  }
  private static Command glVertexStream3dvATI;
  public static Command glVertexStream3dvATI() {
    if (glVertexStream3dvATI != null)
      return glVertexStream3dvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3dvATI = cmd;
    return cmd;
  }
  private static Command glMultiTexGenfvEXT;
  public static Command glMultiTexGenfvEXT() {
    if (glMultiTexGenfvEXT != null)
      return glMultiTexGenfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexGenfvEXT = cmd;
    return cmd;
  }
  private static Command glWaitSemaphoreEXT;
  public static Command glWaitSemaphoreEXT() {
    if (glWaitSemaphoreEXT != null)
      return glWaitSemaphoreEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("srcLayouts", TextureLayout());
    cmd.extension = GL_EXT_semaphore();
    glWaitSemaphoreEXT = cmd;
    return cmd;
  }
  private static Command glRenderGpuMaskNV;
  public static Command glRenderGpuMaskNV() {
    if (glRenderGpuMaskNV != null)
      return glRenderGpuMaskNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glRenderGpuMaskNV = cmd;
    return cmd;
  }
  private static Command glColorTableParameterivSGI;
  public static Command glColorTableParameterivSGI() {
    if (glColorTableParameterivSGI != null)
      return glColorTableParameterivSGI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("pname", ColorTableParameterPNameSGI());
    cmd.extension = GL_SGI_color_table();
    glColorTableParameterivSGI = cmd;
    return cmd;
  }
  private static Command glGetMultiTexEnvivEXT;
  public static Command glGetMultiTexEnvivEXT() {
    if (glGetMultiTexEnvivEXT != null)
      return glGetMultiTexEnvivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexEnvivEXT = cmd;
    return cmd;
  }
  private static Command glProgramLocalParametersI4ivNV;
  public static Command glProgramLocalParametersI4ivNV() {
    if (glProgramLocalParametersI4ivNV != null)
      return glProgramLocalParametersI4ivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramLocalParametersI4ivNV = cmd;
    return cmd;
  }
  private static Command glGetMultiTexGendvEXT;
  public static Command glGetMultiTexGendvEXT() {
    if (glGetMultiTexGendvEXT != null)
      return glGetMultiTexGendvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexGendvEXT = cmd;
    return cmd;
  }
  private static Command glTextureParameterIuiv;
  public static Command glTextureParameterIuiv() {
    if (glTextureParameterIuiv != null)
      return glTextureParameterIuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureParameterIuiv = cmd;
    return cmd;
  }
  private static Command glGetnColorTable;
  public static Command glGetnColorTable() {
    if (glGetnColorTable != null)
      return glGetnColorTable;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetnColorTable = cmd;
    return cmd;
  }
  private static Command glIsBuffer;
  public static Command glIsBuffer() {
    if (glIsBuffer != null)
      return glIsBuffer;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsBuffer = cmd;
    return cmd;
  }
  private static Command glTexSubImage2DEXT;
  public static Command glTexSubImage2DEXT() {
    if (glTexSubImage2DEXT != null)
      return glTexSubImage2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glTextureNormalEXT;
  public static Command glTextureNormalEXT() {
    if (glTextureNormalEXT != null)
      return glTextureNormalEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_EXT_texture_perturb_normal();
    glTextureNormalEXT = cmd;
    return cmd;
  }
  private static Command glExtTexObjectStateOverrideiQCOM;
  public static Command glExtTexObjectStateOverrideiQCOM() {
    if (glExtTexObjectStateOverrideiQCOM != null)
      return glExtTexObjectStateOverrideiQCOM;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_QCOM_extended_get();
    glExtTexObjectStateOverrideiQCOM = cmd;
    return cmd;
  }
  private static Command glBufferStorage;
  public static Command glBufferStorage() {
    if (glBufferStorage != null)
      return glBufferStorage;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferStorageTarget());
    cmd.addParam("flags", MapBufferUsageMask());
    cmd.extension = GL_ARB_buffer_storage();
    glBufferStorage = cmd;
    return cmd;
  }
  private static Command glPointParameterfSGIS;
  public static Command glPointParameterfSGIS() {
    if (glPointParameterfSGIS != null)
      return glPointParameterfSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIS_point_parameters();
    glPointParameterfSGIS = cmd;
    return cmd;
  }
  private static Command glShaderOp1EXT;
  public static Command glShaderOp1EXT() {
    if (glShaderOp1EXT != null)
      return glShaderOp1EXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glShaderOp1EXT = cmd;
    return cmd;
  }
  private static Command glTexImage3DEXT;
  public static Command glTexImage3DEXT() {
    if (glTexImage3DEXT != null)
      return glTexImage3DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_texture3D();
    glTexImage3DEXT = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedbackEXT;
  public static Command glDrawTransformFeedbackEXT() {
    if (glDrawTransformFeedbackEXT != null)
      return glDrawTransformFeedbackEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawTransformFeedbackEXT = cmd;
    return cmd;
  }
  private static Command glTexStorage3DMultisampleOES;
  public static Command glTexStorage3DMultisampleOES() {
    if (glTexStorage3DMultisampleOES != null)
      return glTexStorage3DMultisampleOES;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_OES_texture_storage_multisample_2d_array();
    glTexStorage3DMultisampleOES = cmd;
    return cmd;
  }
  private static Command glGetVariantPointervEXT;
  public static Command glGetVariantPointervEXT() {
    if (glGetVariantPointervEXT != null)
      return glGetVariantPointervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetVariantPointervEXT = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparateEXT;
  public static Command glBlendEquationSeparateEXT() {
    if (glBlendEquationSeparateEXT != null)
      return glBlendEquationSeparateEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    cmd.extension = GL_EXT_blend_equation_separate();
    glBlendEquationSeparateEXT = cmd;
    return cmd;
  }
  private static Command glSelectPerfMonitorCountersAMD;
  public static Command glSelectPerfMonitorCountersAMD() {
    if (glSelectPerfMonitorCountersAMD != null)
      return glSelectPerfMonitorCountersAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("enable", Boolean());
    cmd.extension = GL_AMD_performance_monitor();
    glSelectPerfMonitorCountersAMD = cmd;
    return cmd;
  }
  private static Command glColorP3ui;
  public static Command glColorP3ui() {
    if (glColorP3ui != null)
      return glColorP3ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glColorP3ui = cmd;
    return cmd;
  }
  private static Command glMapBuffer;
  public static Command glMapBuffer() {
    if (glMapBuffer != null)
      return glMapBuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("access", BufferAccessARB());
    glMapBuffer = cmd;
    return cmd;
  }
  private static Command glPathCommandsNV;
  public static Command glPathCommandsNV() {
    if (glPathCommandsNV != null)
      return glPathCommandsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coordType", _null_());
    cmd.extension = GL_NV_path_rendering();
    glPathCommandsNV = cmd;
    return cmd;
  }
  private static Command glMapNamedBufferEXT;
  public static Command glMapNamedBufferEXT() {
    if (glMapNamedBufferEXT != null)
      return glMapNamedBufferEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", BufferAccessARB());
    cmd.extension = GL_EXT_direct_state_access();
    glMapNamedBufferEXT = cmd;
    return cmd;
  }
  private static Command glClipControl;
  public static Command glClipControl() {
    if (glClipControl != null)
      return glClipControl;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("origin", ClipControlOrigin());
    cmd.addParam("depth", ClipControlDepth());
    cmd.extension = GL_ARB_clip_control();
    glClipControl = cmd;
    return cmd;
  }
  private static Command glBindLightParameterEXT;
  public static Command glBindLightParameterEXT() {
    if (glBindLightParameterEXT != null)
      return glBindLightParameterEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("value", LightParameter());
    cmd.extension = GL_EXT_vertex_shader();
    glBindLightParameterEXT = cmd;
    return cmd;
  }
  private static Command glBindBufferBase;
  public static Command glBindBufferBase() {
    if (glBindBufferBase != null)
      return glBindBufferBase;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_uniform_buffer_object();
    glBindBufferBase = cmd;
    return cmd;
  }
  private static Command glVertexAttribArrayObjectATI;
  public static Command glVertexAttribArrayObjectATI() {
    if (glVertexAttribArrayObjectATI != null)
      return glVertexAttribArrayObjectATI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    glVertexAttribArrayObjectATI = cmd;
    return cmd;
  }
  private static Command glGetCompressedTextureImageEXT;
  public static Command glGetCompressedTextureImageEXT() {
    if (glGetCompressedTextureImageEXT != null)
      return glGetCompressedTextureImageEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glGetCompressedTextureImageEXT = cmd;
    return cmd;
  }
  private static Command glIsOcclusionQueryNV;
  public static Command glIsOcclusionQueryNV() {
    if (glIsOcclusionQueryNV != null)
      return glIsOcclusionQueryNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_occlusion_query();
    glIsOcclusionQueryNV = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage3DOES;
  public static Command glCopyTexSubImage3DOES() {
    if (glCopyTexSubImage3DOES != null)
      return glCopyTexSubImage3DOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_OES_texture_3D();
    glCopyTexSubImage3DOES = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageEXT;
  public static Command glRenderbufferStorageEXT() {
    if (glRenderbufferStorageEXT != null)
      return glRenderbufferStorageEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_framebuffer_object();
    glRenderbufferStorageEXT = cmd;
    return cmd;
  }
  private static Command glWeightPointerOES;
  public static Command glWeightPointerOES() {
    if (glWeightPointerOES != null)
      return glWeightPointerOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_OES_matrix_palette();
    glWeightPointerOES = cmd;
    return cmd;
  }
  private static Command glBlendEquationiARB;
  public static Command glBlendEquationiARB() {
    if (glBlendEquationiARB != null)
      return glBlendEquationiARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    glBlendEquationiARB = cmd;
    return cmd;
  }
  private static Command glMultiTexImage1DEXT;
  public static Command glMultiTexImage1DEXT() {
    if (glMultiTexImage1DEXT != null)
      return glMultiTexImage1DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexImage1DEXT = cmd;
    return cmd;
  }
  private static Command glFeedbackBuffer;
  public static Command glFeedbackBuffer() {
    if (glFeedbackBuffer != null)
      return glFeedbackBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", FeedbackType());
    glFeedbackBuffer = cmd;
    return cmd;
  }
  private static Command glTexCoordFormatNV;
  public static Command glTexCoordFormatNV() {
    if (glTexCoordFormatNV != null)
      return glTexCoordFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glTexCoordFormatNV = cmd;
    return cmd;
  }
  private static Command glTexStorageMem3DEXT;
  public static Command glTexStorageMem3DEXT() {
    if (glTexStorageMem3DEXT != null)
      return glTexStorageMem3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalFormat", _null_());
    cmd.extension = GL_EXT_memory_object();
    glTexStorageMem3DEXT = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexAttribOffsetEXT;
  public static Command glVertexArrayVertexAttribOffsetEXT() {
    if (glVertexArrayVertexAttribOffsetEXT != null)
      return glVertexArrayVertexAttribOffsetEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexAttribOffsetEXT = cmd;
    return cmd;
  }
  private static Command glCullFace;
  public static Command glCullFace() {
    if (glCullFace != null)
      return glCullFace;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", CullFaceMode());
    glCullFace = cmd;
    return cmd;
  }
  private static Command glDetailTexFuncSGIS;
  public static Command glDetailTexFuncSGIS() {
    if (glDetailTexFuncSGIS != null)
      return glDetailTexFuncSGIS;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_SGIS_detail_texture();
    glDetailTexFuncSGIS = cmd;
    return cmd;
  }
  private static Command glTexGenfOES;
  public static Command glTexGenfOES() {
    if (glTexGenfOES != null)
      return glTexGenfOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_texture_cube_map();
    glTexGenfOES = cmd;
    return cmd;
  }
  private static Command glNamedBufferPageCommitmentEXT;
  public static Command glNamedBufferPageCommitmentEXT() {
    if (glNamedBufferPageCommitmentEXT != null)
      return glNamedBufferPageCommitmentEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("commit", Boolean());
    cmd.extension = GL_ARB_sparse_buffer();
    glNamedBufferPageCommitmentEXT = cmd;
    return cmd;
  }
  private static Command glGetFramebufferAttachmentParameterivOES;
  public static Command glGetFramebufferAttachmentParameterivOES() {
    if (glGetFramebufferAttachmentParameterivOES != null)
      return glGetFramebufferAttachmentParameterivOES;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_OES_framebuffer_object();
    glGetFramebufferAttachmentParameterivOES = cmd;
    return cmd;
  }
  private static Command glDisable;
  public static Command glDisable() {
    if (glDisable != null)
      return glDisable;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("cap", EnableCap());
    glDisable = cmd;
    return cmd;
  }
  private static Command glGetFenceivNV;
  public static Command glGetFenceivNV() {
    if (glGetFenceivNV != null)
      return glGetFenceivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_fence();
    glGetFenceivNV = cmd;
    return cmd;
  }
  private static Command glDebugMessageInsert;
  public static Command glDebugMessageInsert() {
    if (glDebugMessageInsert != null)
      return glDebugMessageInsert;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.addParam("type", DebugType());
    cmd.addParam("severity", DebugSeverity());
    cmd.extension = GL_KHR_debug();
    glDebugMessageInsert = cmd;
    return cmd;
  }
  private static Command glPixelTexGenSGIX;
  public static Command glPixelTexGenSGIX() {
    if (glPixelTexGenSGIX != null)
      return glPixelTexGenSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_SGIX_pixel_texture();
    glPixelTexGenSGIX = cmd;
    return cmd;
  }
  private static Command glAlphaFragmentOp1ATI;
  public static Command glAlphaFragmentOp1ATI() {
    if (glAlphaFragmentOp1ATI != null)
      return glAlphaFragmentOp1ATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", FragmentOpATI());
    cmd.extension = GL_ATI_fragment_shader();
    glAlphaFragmentOp1ATI = cmd;
    return cmd;
  }
  private static Command glBindTexGenParameterEXT;
  public static Command glBindTexGenParameterEXT() {
    if (glBindTexGenParameterEXT != null)
      return glBindTexGenParameterEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("unit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("value", TextureGenParameter());
    cmd.extension = GL_EXT_vertex_shader();
    glBindTexGenParameterEXT = cmd;
    return cmd;
  }
  private static Command glColorTableEXT;
  public static Command glColorTableEXT() {
    if (glColorTableEXT != null)
      return glColorTableEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("internalFormat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_paletted_texture();
    glColorTableEXT = cmd;
    return cmd;
  }
  private static Command glEnableiEXT;
  public static Command glEnableiEXT() {
    if (glEnableiEXT != null)
      return glEnableiEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glEnableiEXT = cmd;
    return cmd;
  }
  private static Command glGetTexEnvfv;
  public static Command glGetTexEnvfv() {
    if (glGetTexEnvfv != null)
      return glGetTexEnvfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glGetTexEnvfv = cmd;
    return cmd;
  }
  private static Command glTexGenivOES;
  public static Command glTexGenivOES() {
    if (glTexGenivOES != null)
      return glTexGenivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_texture_cube_map();
    glTexGenivOES = cmd;
    return cmd;
  }
  private static Command glGetProgramiv;
  public static Command glGetProgramiv() {
    if (glGetProgramiv != null)
      return glGetProgramiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ProgramPropertyARB());
    glGetProgramiv = cmd;
    return cmd;
  }
  private static Command glClipPlane;
  public static Command glClipPlane() {
    if (glClipPlane != null)
      return glClipPlane;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glClipPlane = cmd;
    return cmd;
  }
  private static Command glLabelObjectEXT;
  public static Command glLabelObjectEXT() {
    if (glLabelObjectEXT != null)
      return glLabelObjectEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_debug_label();
    glLabelObjectEXT = cmd;
    return cmd;
  }
  private static Command glGetShaderPrecisionFormat;
  public static Command glGetShaderPrecisionFormat() {
    if (glGetShaderPrecisionFormat != null)
      return glGetShaderPrecisionFormat;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.addParam("precisiontype", PrecisionType());
    cmd.extension = GL_ARB_ES2_compatibility();
    glGetShaderPrecisionFormat = cmd;
    return cmd;
  }
  private static Command glMaterialf;
  public static Command glMaterialf() {
    if (glMaterialf != null)
      return glMaterialf;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glMaterialf = cmd;
    return cmd;
  }
  private static Command glIsNamedBufferResidentNV;
  public static Command glIsNamedBufferResidentNV() {
    if (glIsNamedBufferResidentNV != null)
      return glIsNamedBufferResidentNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_shader_buffer_load();
    glIsNamedBufferResidentNV = cmd;
    return cmd;
  }
  private static Command glMateriali;
  public static Command glMateriali() {
    if (glMateriali != null)
      return glMateriali;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glMateriali = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameter4dvARB;
  public static Command glProgramLocalParameter4dvARB() {
    if (glProgramLocalParameter4dvARB != null)
      return glProgramLocalParameter4dvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramLocalParameter4dvARB = cmd;
    return cmd;
  }
  private static Command glVertexStream4fATI;
  public static Command glVertexStream4fATI() {
    if (glVertexStream4fATI != null)
      return glVertexStream4fATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4fATI = cmd;
    return cmd;
  }
  private static Command glColorMaskiEXT;
  public static Command glColorMaskiEXT() {
    if (glColorMaskiEXT != null)
      return glColorMaskiEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("r", Boolean());
    cmd.addParam("g", Boolean());
    cmd.addParam("b", Boolean());
    cmd.addParam("a", Boolean());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glColorMaskiEXT = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectui64v;
  public static Command glGetQueryObjectui64v() {
    if (glGetQueryObjectui64v != null)
      return glGetQueryObjectui64v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_timer_query();
    glGetQueryObjectui64v = cmd;
    return cmd;
  }
  private static Command glNamedRenderbufferStorage;
  public static Command glNamedRenderbufferStorage() {
    if (glNamedRenderbufferStorage != null)
      return glNamedRenderbufferStorage;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedRenderbufferStorage = cmd;
    return cmd;
  }
  private static Command glVertexStream3dATI;
  public static Command glVertexStream3dATI() {
    if (glVertexStream3dATI != null)
      return glVertexStream3dATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3dATI = cmd;
    return cmd;
  }
  private static Command glMaterialx;
  public static Command glMaterialx() {
    if (glMaterialx != null)
      return glMaterialx;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glMaterialx = cmd;
    return cmd;
  }
  private static Command glListParameterfvSGIX;
  public static Command glListParameterfvSGIX() {
    if (glListParameterfvSGIX != null)
      return glListParameterfvSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ListParameterName());
    cmd.extension = GL_SGIX_list_priority();
    glListParameterfvSGIX = cmd;
    return cmd;
  }
  private static Command glSampleMapATI;
  public static Command glSampleMapATI() {
    if (glSampleMapATI != null)
      return glSampleMapATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("swizzle", _null_());
    cmd.extension = GL_ATI_fragment_shader();
    glSampleMapATI = cmd;
    return cmd;
  }
  private static Command glConvolutionParameteriEXT;
  public static Command glConvolutionParameteriEXT() {
    if (glConvolutionParameteriEXT != null)
      return glConvolutionParameteriEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_EXT_convolution();
    glConvolutionParameteriEXT = cmd;
    return cmd;
  }
  private static Command glAccumxOES;
  public static Command glAccumxOES() {
    if (glAccumxOES != null)
      return glAccumxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", _null_());
    cmd.extension = GL_OES_fixed_point();
    glAccumxOES = cmd;
    return cmd;
  }
  private static Command glGetClipPlane;
  public static Command glGetClipPlane() {
    if (glGetClipPlane != null)
      return glGetClipPlane;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glGetClipPlane = cmd;
    return cmd;
  }
  private static Command glIsProgram;
  public static Command glIsProgram() {
    if (glIsProgram != null)
      return glIsProgram;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsProgram = cmd;
    return cmd;
  }
  private static Command glGetDoublei_vEXT;
  public static Command glGetDoublei_vEXT() {
    if (glGetDoublei_vEXT != null)
      return glGetDoublei_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glGetDoublei_vEXT = cmd;
    return cmd;
  }
  private static Command glIsVertexArrayAPPLE;
  public static Command glIsVertexArrayAPPLE() {
    if (glIsVertexArrayAPPLE != null)
      return glIsVertexArrayAPPLE;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_APPLE_vertex_array_object();
    glIsVertexArrayAPPLE = cmd;
    return cmd;
  }
  private static Command glGetPathTexGenfvNV;
  public static Command glGetPathTexGenfvNV() {
    if (glGetPathTexGenfvNV != null)
      return glGetPathTexGenfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texCoordSet", TextureUnit());
    cmd.addParam("pname", PathGenMode());
    cmd.extension = GL_NV_path_rendering();
    glGetPathTexGenfvNV = cmd;
    return cmd;
  }
  private static Command glSamplePatternEXT;
  public static Command glSamplePatternEXT() {
    if (glSamplePatternEXT != null)
      return glSamplePatternEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pattern", _null_());
    cmd.extension = GL_EXT_multisample();
    glSamplePatternEXT = cmd;
    return cmd;
  }
  private static Command glGetMapxvOES;
  public static Command glGetMapxvOES() {
    if (glGetMapxvOES != null)
      return glGetMapxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", GetMapQuery());
    cmd.extension = GL_OES_fixed_point();
    glGetMapxvOES = cmd;
    return cmd;
  }
  private static Command glBindProgramARB;
  public static Command glBindProgramARB() {
    if (glBindProgramARB != null)
      return glBindProgramARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glBindProgramARB = cmd;
    return cmd;
  }
  private static Command glClearBufferfv;
  public static Command glClearBufferfv() {
    if (glClearBufferfv != null)
      return glClearBufferfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    glClearBufferfv = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterfv;
  public static Command glGetSamplerParameterfv() {
    if (glGetSamplerParameterfv != null)
      return glGetSamplerParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glGetSamplerParameterfv = cmd;
    return cmd;
  }
  private static Command glClearBufferfi;
  public static Command glClearBufferfi() {
    if (glClearBufferfi != null)
      return glClearBufferfi;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    glClearBufferfi = cmd;
    return cmd;
  }
  private static Command glGetFragmentLightfvSGIX;
  public static Command glGetFragmentLightfvSGIX() {
    if (glGetFragmentLightfvSGIX != null)
      return glGetFragmentLightfvSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_fragment_lighting();
    glGetFragmentLightfvSGIX = cmd;
    return cmd;
  }
  private static Command glLightModeli;
  public static Command glLightModeli() {
    if (glLightModeli != null)
      return glLightModeli;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    glLightModeli = cmd;
    return cmd;
  }
  private static Command glGetTexLevelParameterfv;
  public static Command glGetTexLevelParameterfv() {
    if (glGetTexLevelParameterfv != null)
      return glGetTexLevelParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexLevelParameterfv = cmd;
    return cmd;
  }
  private static Command glDrawRangeElementsBaseVertexOES;
  public static Command glDrawRangeElementsBaseVertexOES() {
    if (glDrawRangeElementsBaseVertexOES != null)
      return glDrawRangeElementsBaseVertexOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawRangeElementsBaseVertexOES = cmd;
    return cmd;
  }
  private static Command glClearBufferiv;
  public static Command glClearBufferiv() {
    if (glClearBufferiv != null)
      return glClearBufferiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    glClearBufferiv = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameterI4uivNV;
  public static Command glProgramEnvParameterI4uivNV() {
    if (glProgramEnvParameterI4uivNV != null)
      return glProgramEnvParameterI4uivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramEnvParameterI4uivNV = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage2D;
  public static Command glCompressedTexSubImage2D() {
    if (glCompressedTexSubImage2D != null)
      return glCompressedTexSubImage2D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    glCompressedTexSubImage2D = cmd;
    return cmd;
  }
  private static Command glLightModelf;
  public static Command glLightModelf() {
    if (glLightModelf != null)
      return glLightModelf;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    glLightModelf = cmd;
    return cmd;
  }
  private static Command glSampleMaski;
  public static Command glSampleMaski() {
    if (glSampleMaski != null)
      return glSampleMaski;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", _null_());
    cmd.extension = GL_ARB_texture_multisample();
    glSampleMaski = cmd;
    return cmd;
  }
  private static Command glMatrixPushEXT;
  public static Command glMatrixPushEXT() {
    if (glMatrixPushEXT != null)
      return glMatrixPushEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixPushEXT = cmd;
    return cmd;
  }
  private static Command glGetNamedStringivARB;
  public static Command glGetNamedStringivARB() {
    if (glGetNamedStringivARB != null)
      return glGetNamedStringivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_shading_language_include();
    glGetNamedStringivARB = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterfv;
  public static Command glGetTextureParameterfv() {
    if (glGetTextureParameterfv != null)
      return glGetTextureParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureParameterfv = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedANGLE;
  public static Command glDrawElementsInstancedANGLE() {
    if (glDrawElementsInstancedANGLE != null)
      return glDrawElementsInstancedANGLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", PrimitiveType());
    cmd.extension = GL_ANGLE_instanced_arrays();
    glDrawElementsInstancedANGLE = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameteriv;
  public static Command glGetSamplerParameteriv() {
    if (glGetSamplerParameteriv != null)
      return glGetSamplerParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glGetSamplerParameteriv = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage1D;
  public static Command glCompressedTexSubImage1D() {
    if (glCompressedTexSubImage1D != null)
      return glCompressedTexSubImage1D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    glCompressedTexSubImage1D = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3dvARB;
  public static Command glMultiTexCoord3dvARB() {
    if (glMultiTexCoord3dvARB != null)
      return glMultiTexCoord3dvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3dvARB = cmd;
    return cmd;
  }
  private static Command glConvolutionParameteri;
  public static Command glConvolutionParameteri() {
    if (glConvolutionParameteri != null)
      return glConvolutionParameteri;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_ARB_imaging();
    glConvolutionParameteri = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterf;
  public static Command glConvolutionParameterf() {
    if (glConvolutionParameterf != null)
      return glConvolutionParameterf;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_ARB_imaging();
    glConvolutionParameterf = cmd;
    return cmd;
  }
  private static Command glBindTextureEXT;
  public static Command glBindTextureEXT() {
    if (glBindTextureEXT != null)
      return glBindTextureEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_texture_object();
    glBindTextureEXT = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseVertex;
  public static Command glDrawElementsInstancedBaseVertex() {
    if (glDrawElementsInstancedBaseVertex != null)
      return glDrawElementsInstancedBaseVertex;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsInstancedBaseVertex = cmd;
    return cmd;
  }
  private static Command glGetInvariantFloatvEXT;
  public static Command glGetInvariantFloatvEXT() {
    if (glGetInvariantFloatvEXT != null)
      return glGetInvariantFloatvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetInvariantFloatvEXT = cmd;
    return cmd;
  }
  private static Command glCreateQueries;
  public static Command glCreateQueries() {
    if (glCreateQueries != null)
      return glCreateQueries;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_ARB_direct_state_access();
    glCreateQueries = cmd;
    return cmd;
  }
  private static Command glBeginTransformFeedbackNV;
  public static Command glBeginTransformFeedbackNV() {
    if (glBeginTransformFeedbackNV != null)
      return glBeginTransformFeedbackNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("primitiveMode", PrimitiveType());
    cmd.extension = GL_NV_transform_feedback();
    glBeginTransformFeedbackNV = cmd;
    return cmd;
  }
  private static Command glImageTransformParameterfvHP;
  public static Command glImageTransformParameterfvHP() {
    if (glImageTransformParameterfvHP != null)
      return glImageTransformParameterfvHP;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_HP_image_transform();
    glImageTransformParameterfvHP = cmd;
    return cmd;
  }
  private static Command glClearBufferData;
  public static Command glClearBufferData() {
    if (glClearBufferData != null)
      return glClearBufferData;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferStorageTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glClearBufferData = cmd;
    return cmd;
  }
  private static Command glGetActiveAttribARB;
  public static Command glGetActiveAttribARB() {
    if (glGetActiveAttribARB != null)
      return glGetActiveAttribARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", AttributeType());
    cmd.extension = GL_ARB_vertex_shader();
    glGetActiveAttribARB = cmd;
    return cmd;
  }
  private static Command glGetImageHandleARB;
  public static Command glGetImageHandleARB() {
    if (glGetImageHandleARB != null)
      return glGetImageHandleARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("layered", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_bindless_texture();
    glGetImageHandleARB = cmd;
    return cmd;
  }
  private static Command glGetFloati_vNV;
  public static Command glGetFloati_vNV() {
    if (glGetFloati_vNV != null)
      return glGetFloati_vNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_NV_viewport_array();
    glGetFloati_vNV = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage3D;
  public static Command glCompressedTexSubImage3D() {
    if (glCompressedTexSubImage3D != null)
      return glCompressedTexSubImage3D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    glCompressedTexSubImage3D = cmd;
    return cmd;
  }
  private static Command glSwizzleEXT;
  public static Command glSwizzleEXT() {
    if (glSwizzleEXT != null)
      return glSwizzleEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("outX", _null_());
    cmd.addParam("outY", _null_());
    cmd.addParam("outZ", _null_());
    cmd.addParam("outW", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glSwizzleEXT = cmd;
    return cmd;
  }
  private static Command glCopyBufferSubData;
  public static Command glCopyBufferSubData() {
    if (glCopyBufferSubData != null)
      return glCopyBufferSubData;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("readTarget", CopyBufferSubDataTarget());
    cmd.addParam("writeTarget", CopyBufferSubDataTarget());
    cmd.extension = GL_ARB_copy_buffer();
    glCopyBufferSubData = cmd;
    return cmd;
  }
  private static Command glMatrixMultfEXT;
  public static Command glMatrixMultfEXT() {
    if (glMatrixMultfEXT != null)
      return glMatrixMultfEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixMultfEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x3dvEXT;
  public static Command glProgramUniformMatrix4x3dvEXT() {
    if (glProgramUniformMatrix4x3dvEXT != null)
      return glProgramUniformMatrix4x3dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix4x3dvEXT = cmd;
    return cmd;
  }
  private static Command glGetTextureParameteriv;
  public static Command glGetTextureParameteriv() {
    if (glGetTextureParameteriv != null)
      return glGetTextureParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureParameteriv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2bOES;
  public static Command glMultiTexCoord2bOES() {
    if (glMultiTexCoord2bOES != null)
      return glMultiTexCoord2bOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord2bOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2xOES;
  public static Command glMultiTexCoord2xOES() {
    if (glMultiTexCoord2xOES != null)
      return glMultiTexCoord2xOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord2xOES = cmd;
    return cmd;
  }
  private static Command glGenerateMultiTexMipmapEXT;
  public static Command glGenerateMultiTexMipmapEXT() {
    if (glGenerateMultiTexMipmapEXT != null)
      return glGenerateMultiTexMipmapEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glGenerateMultiTexMipmapEXT = cmd;
    return cmd;
  }
  private static Command glStencilThenCoverFillPathNV;
  public static Command glStencilThenCoverFillPathNV() {
    if (glStencilThenCoverFillPathNV != null)
      return glStencilThenCoverFillPathNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("fillMode", _null_());
    cmd.addParam("coverMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glStencilThenCoverFillPathNV = cmd;
    return cmd;
  }
  private static Command glVertexArrayFogCoordOffsetEXT;
  public static Command glVertexArrayFogCoordOffsetEXT() {
    if (glVertexArrayFogCoordOffsetEXT != null)
      return glVertexArrayFogCoordOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", FogCoordinatePointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayFogCoordOffsetEXT = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectuiv;
  public static Command glGetQueryObjectuiv() {
    if (glGetQueryObjectuiv != null)
      return glGetQueryObjectuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    glGetQueryObjectuiv = cmd;
    return cmd;
  }
  private static Command glGetTexLevelParameteriv;
  public static Command glGetTexLevelParameteriv() {
    if (glGetTexLevelParameteriv != null)
      return glGetTexLevelParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexLevelParameteriv = cmd;
    return cmd;
  }
  private static Command glExtGetTexLevelParameterivQCOM;
  public static Command glExtGetTexLevelParameterivQCOM() {
    if (glExtGetTexLevelParameterivQCOM != null)
      return glExtGetTexLevelParameterivQCOM;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_QCOM_extended_get();
    glExtGetTexLevelParameterivQCOM = cmd;
    return cmd;
  }
  private static Command glPassTexCoordATI;
  public static Command glPassTexCoordATI() {
    if (glPassTexCoordATI != null)
      return glPassTexCoordATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("swizzle", _null_());
    cmd.extension = GL_ATI_fragment_shader();
    glPassTexCoordATI = cmd;
    return cmd;
  }
  private static Command glMatrixLoadfEXT;
  public static Command glMatrixLoadfEXT() {
    if (glMatrixLoadfEXT != null)
      return glMatrixLoadfEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixLoadfEXT = cmd;
    return cmd;
  }
  private static Command glDrawMeshArraysSUN;
  public static Command glDrawMeshArraysSUN() {
    if (glDrawMeshArraysSUN != null)
      return glDrawMeshArraysSUN;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_SUN_mesh_array();
    glDrawMeshArraysSUN = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribPointervNV;
  public static Command glGetVertexAttribPointervNV() {
    if (glGetVertexAttribPointervNV != null)
      return glGetVertexAttribPointervNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetVertexAttribPointervNV = cmd;
    return cmd;
  }
  private static Command glGetnPixelMapusvARB;
  public static Command glGetnPixelMapusvARB() {
    if (glGetnPixelMapusvARB != null)
      return glGetnPixelMapusvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    cmd.extension = GL_ARB_robustness();
    glGetnPixelMapusvARB = cmd;
    return cmd;
  }
  private static Command glIsAsyncMarkerSGIX;
  public static Command glIsAsyncMarkerSGIX() {
    if (glIsAsyncMarkerSGIX != null)
      return glIsAsyncMarkerSGIX;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_SGIX_async();
    glIsAsyncMarkerSGIX = cmd;
    return cmd;
  }
  private static Command glTexParameterxv;
  public static Command glTexParameterxv() {
    if (glTexParameterxv != null)
      return glTexParameterxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glTexParameterxv = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x4fvEXT;
  public static Command glProgramUniformMatrix3x4fvEXT() {
    if (glProgramUniformMatrix3x4fvEXT != null)
      return glProgramUniformMatrix3x4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix3x4fvEXT = cmd;
    return cmd;
  }
  private static Command glBlendEquationEXT;
  public static Command glBlendEquationEXT() {
    if (glBlendEquationEXT != null)
      return glBlendEquationEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    cmd.extension = GL_EXT_blend_minmax();
    glBlendEquationEXT = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparateiEXT;
  public static Command glBlendEquationSeparateiEXT() {
    if (glBlendEquationSeparateiEXT != null)
      return glBlendEquationSeparateiEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glBlendEquationSeparateiEXT = cmd;
    return cmd;
  }
  private static Command glMakeImageHandleResidentNV;
  public static Command glMakeImageHandleResidentNV() {
    if (glMakeImageHandleResidentNV != null)
      return glMakeImageHandleResidentNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", _null_());
    glMakeImageHandleResidentNV = cmd;
    return cmd;
  }
  private static Command glGetFloatIndexedvEXT;
  public static Command glGetFloatIndexedvEXT() {
    if (glGetFloatIndexedvEXT != null)
      return glGetFloatIndexedvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glGetFloatIndexedvEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3sARB;
  public static Command glMultiTexCoord3sARB() {
    if (glMultiTexCoord3sARB != null)
      return glMultiTexCoord3sARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3sARB = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterIuivEXT;
  public static Command glGetSamplerParameterIuivEXT() {
    if (glGetSamplerParameterIuivEXT != null)
      return glGetSamplerParameterIuivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_EXT_texture_border_clamp();
    glGetSamplerParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glBindBuffersRange;
  public static Command glBindBuffersRange() {
    if (glBindBuffersRange != null)
      return glBindBuffersRange;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    glBindBuffersRange = cmd;
    return cmd;
  }
  private static Command glBeginQueryIndexed;
  public static Command glBeginQueryIndexed() {
    if (glBeginQueryIndexed != null)
      return glBeginQueryIndexed;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_ARB_transform_feedback3();
    glBeginQueryIndexed = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture3DEXT;
  public static Command glFramebufferTexture3DEXT() {
    if (glFramebufferTexture3DEXT != null)
      return glFramebufferTexture3DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glFramebufferTexture3DEXT = cmd;
    return cmd;
  }
  private static Command glGetVideoCaptureStreamivNV;
  public static Command glGetVideoCaptureStreamivNV() {
    if (glGetVideoCaptureStreamivNV != null)
      return glGetVideoCaptureStreamivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glGetVideoCaptureStreamivNV = cmd;
    return cmd;
  }
  private static Command glStencilFillPathInstancedNV;
  public static Command glStencilFillPathInstancedNV() {
    if (glStencilFillPathInstancedNV != null)
      return glStencilFillPathInstancedNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("pathNameType", PathElementType());
    cmd.addParam("fillMode", PathFillMode());
    cmd.addParam("transformType", PathTransformType());
    cmd.extension = GL_NV_path_rendering();
    glStencilFillPathInstancedNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x2dvEXT;
  public static Command glProgramUniformMatrix4x2dvEXT() {
    if (glProgramUniformMatrix4x2dvEXT != null)
      return glProgramUniformMatrix4x2dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix4x2dvEXT = cmd;
    return cmd;
  }
  private static Command glCopyColorSubTableEXT;
  public static Command glCopyColorSubTableEXT() {
    if (glCopyColorSubTableEXT != null)
      return glCopyColorSubTableEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    glCopyColorSubTableEXT = cmd;
    return cmd;
  }
  private static Command glGetDebugMessageLogARB;
  public static Command glGetDebugMessageLogARB() {
    if (glGetDebugMessageLogARB != null)
      return glGetDebugMessageLogARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("sources", DebugSource());
    cmd.addParam("types", DebugType());
    cmd.addParam("severities", DebugSeverity());
    cmd.extension = GL_ARB_debug_output();
    glGetDebugMessageLogARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordPointerEXT;
  public static Command glMultiTexCoordPointerEXT() {
    if (glMultiTexCoordPointerEXT != null)
      return glMultiTexCoordPointerEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexCoordPointerEXT = cmd;
    return cmd;
  }
  private static Command glClearNamedFramebufferuiv;
  public static Command glClearNamedFramebufferuiv() {
    if (glClearNamedFramebufferuiv != null)
      return glClearNamedFramebufferuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buffer", Buffer());
    cmd.extension = GL_ARB_direct_state_access();
    glClearNamedFramebufferuiv = cmd;
    return cmd;
  }
  private static Command glFragmentLightfvSGIX;
  public static Command glFragmentLightfvSGIX() {
    if (glFragmentLightfvSGIX != null)
      return glFragmentLightfvSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightfvSGIX = cmd;
    return cmd;
  }
  private static Command glDepthMask;
  public static Command glDepthMask() {
    if (glDepthMask != null)
      return glDepthMask;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flag", Boolean());
    glDepthMask = cmd;
    return cmd;
  }
  private static Command glTexSubImage3DOES;
  public static Command glTexSubImage3DOES() {
    if (glTexSubImage3DOES != null)
      return glTexSubImage3DOES;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_OES_texture_3D();
    glTexSubImage3DOES = cmd;
    return cmd;
  }
  private static Command glProgramVertexLimitNV;
  public static Command glProgramVertexLimitNV() {
    if (glProgramVertexLimitNV != null)
      return glProgramVertexLimitNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_geometry_program4();
    glProgramVertexLimitNV = cmd;
    return cmd;
  }
  private static Command glTexSubImage1D;
  public static Command glTexSubImage1D() {
    if (glTexSubImage1D != null)
      return glTexSubImage1D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexSubImage1D = cmd;
    return cmd;
  }
  private static Command glDeleteNamesAMD;
  public static Command glDeleteNamesAMD() {
    if (glDeleteNamesAMD != null)
      return glDeleteNamesAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("identifier", _null_());
    cmd.extension = GL_AMD_name_gen_delete();
    glDeleteNamesAMD = cmd;
    return cmd;
  }
  private static Command glTextureStorage1DEXT;
  public static Command glTextureStorage1DEXT() {
    if (glTextureStorage1DEXT != null)
      return glTextureStorage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureStorage1DEXT = cmd;
    return cmd;
  }
  private static Command glVertexPointerEXT;
  public static Command glVertexPointerEXT() {
    if (glVertexPointerEXT != null)
      return glVertexPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_EXT_vertex_array();
    glVertexPointerEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream1ivATI;
  public static Command glVertexStream1ivATI() {
    if (glVertexStream1ivATI != null)
      return glVertexStream1ivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1ivATI = cmd;
    return cmd;
  }
  private static Command glColorFragmentOp1ATI;
  public static Command glColorFragmentOp1ATI() {
    if (glColorFragmentOp1ATI != null)
      return glColorFragmentOp1ATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", FragmentOpATI());
    cmd.extension = GL_ATI_fragment_shader();
    glColorFragmentOp1ATI = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribArrayObjectivATI;
  public static Command glGetVertexAttribArrayObjectivATI() {
    if (glGetVertexAttribArrayObjectivATI != null)
      return glGetVertexAttribArrayObjectivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glGetVertexAttribArrayObjectivATI = cmd;
    return cmd;
  }
  private static Command glGetColorTableParameterivSGI;
  public static Command glGetColorTableParameterivSGI() {
    if (glGetColorTableParameterivSGI != null)
      return glGetColorTableParameterivSGI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("pname", GetColorTableParameterPNameSGI());
    cmd.extension = GL_SGI_color_table();
    glGetColorTableParameterivSGI = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2x3fv;
  public static Command glUniformMatrix2x3fv() {
    if (glUniformMatrix2x3fv != null)
      return glUniformMatrix2x3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix2x3fv = cmd;
    return cmd;
  }
  private static Command glTextureImage1DEXT;
  public static Command glTextureImage1DEXT() {
    if (glTextureImage1DEXT != null)
      return glTextureImage1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureImage1DEXT = cmd;
    return cmd;
  }
  private static Command glGetDebugMessageLogAMD;
  public static Command glGetDebugMessageLogAMD() {
    if (glGetDebugMessageLogAMD != null)
      return glGetDebugMessageLogAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("categories", _null_());
    cmd.extension = GL_AMD_debug_output();
    glGetDebugMessageLogAMD = cmd;
    return cmd;
  }
  private static Command glLightModelx;
  public static Command glLightModelx() {
    if (glLightModelx != null)
      return glLightModelx;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    glLightModelx = cmd;
    return cmd;
  }
  private static Command glQueryResourceNV;
  public static Command glQueryResourceNV() {
    if (glQueryResourceNV != null)
      return glQueryResourceNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("queryType", _null_());
    cmd.extension = GL_NV_query_resource();
    glQueryResourceNV = cmd;
    return cmd;
  }
  private static Command glTexSubImage2D;
  public static Command glTexSubImage2D() {
    if (glTexSubImage2D != null)
      return glTexSubImage2D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexSubImage2D = cmd;
    return cmd;
  }
  private static Command glColorTableParameterfvSGI;
  public static Command glColorTableParameterfvSGI() {
    if (glColorTableParameterfvSGI != null)
      return glColorTableParameterfvSGI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("pname", ColorTableParameterPNameSGI());
    cmd.extension = GL_SGI_color_table();
    glColorTableParameterfvSGI = cmd;
    return cmd;
  }
  private static Command glGetQueryivEXT;
  public static Command glGetQueryivEXT() {
    if (glGetQueryivEXT != null)
      return glGetQueryivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.addParam("pname", QueryParameterName());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glGetQueryivEXT = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexOffsetEXT;
  public static Command glVertexArrayVertexOffsetEXT() {
    if (glVertexArrayVertexOffsetEXT != null)
      return glVertexArrayVertexOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexOffsetEXT = cmd;
    return cmd;
  }
  private static Command glEdgeFlagPointerListIBM;
  public static Command glEdgeFlagPointerListIBM() {
    if (glEdgeFlagPointerListIBM != null)
      return glEdgeFlagPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pointer", Boolean());
    cmd.extension = GL_IBM_vertex_array_lists();
    glEdgeFlagPointerListIBM = cmd;
    return cmd;
  }
  private static Command glVertexStream3svATI;
  public static Command glVertexStream3svATI() {
    if (glVertexStream3svATI != null)
      return glVertexStream3svATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3svATI = cmd;
    return cmd;
  }
  private static Command glGetNamedBufferPointerv;
  public static Command glGetNamedBufferPointerv() {
    if (glGetNamedBufferPointerv != null)
      return glGetNamedBufferPointerv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexBufferObjectParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetNamedBufferPointerv = cmd;
    return cmd;
  }
  private static Command glIndexMaterialEXT;
  public static Command glIndexMaterialEXT() {
    if (glIndexMaterialEXT != null)
      return glIndexMaterialEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("mode", _null_());
    cmd.extension = GL_EXT_index_material();
    glIndexMaterialEXT = cmd;
    return cmd;
  }
  private static Command glMultiModeDrawArraysIBM;
  public static Command glMultiModeDrawArraysIBM() {
    if (glMultiModeDrawArraysIBM != null)
      return glMultiModeDrawArraysIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiModeDrawArraysIBM = cmd;
    return cmd;
  }
  private static Command glMatrixLoad3x2fNV;
  public static Command glMatrixLoad3x2fNV() {
    if (glMatrixLoad3x2fNV != null)
      return glMatrixLoad3x2fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("matrixMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glMatrixLoad3x2fNV = cmd;
    return cmd;
  }
  private static Command glCompressedMultiTexSubImage2DEXT;
  public static Command glCompressedMultiTexSubImage2DEXT() {
    if (glCompressedMultiTexSubImage2DEXT != null)
      return glCompressedMultiTexSubImage2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedMultiTexSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glTexSubImage3D;
  public static Command glTexSubImage3D() {
    if (glTexSubImage3D != null)
      return glTexSubImage3D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexSubImage3D = cmd;
    return cmd;
  }
  private static Command glCreateTextures;
  public static Command glCreateTextures() {
    if (glCreateTextures != null)
      return glCreateTextures;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_ARB_direct_state_access();
    glCreateTextures = cmd;
    return cmd;
  }
  private static Command glDrawBuffersIndexedEXT;
  public static Command glDrawBuffersIndexedEXT() {
    if (glDrawBuffersIndexedEXT != null)
      return glDrawBuffersIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("location", _null_());
    cmd.extension = GL_EXT_multiview_draw_buffers();
    glDrawBuffersIndexedEXT = cmd;
    return cmd;
  }
  private static Command glCompressedTextureSubImage1DEXT;
  public static Command glCompressedTextureSubImage1DEXT() {
    if (glCompressedTextureSubImage1DEXT != null)
      return glCompressedTextureSubImage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedTextureSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2x3dv;
  public static Command glUniformMatrix2x3dv() {
    if (glUniformMatrix2x3dv != null)
      return glUniformMatrix2x3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix2x3dv = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureMultisampleMultiviewOVR;
  public static Command glFramebufferTextureMultisampleMultiviewOVR() {
    if (glFramebufferTextureMultisampleMultiviewOVR != null)
      return glFramebufferTextureMultisampleMultiviewOVR;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    glFramebufferTextureMultisampleMultiviewOVR = cmd;
    return cmd;
  }
  private static Command glGetNamedRenderbufferParameteriv;
  public static Command glGetNamedRenderbufferParameteriv() {
    if (glGetNamedRenderbufferParameteriv != null)
      return glGetNamedRenderbufferParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", RenderbufferParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetNamedRenderbufferParameteriv = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameter4dARB;
  public static Command glProgramEnvParameter4dARB() {
    if (glProgramEnvParameter4dARB != null)
      return glProgramEnvParameter4dARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramEnvParameter4dARB = cmd;
    return cmd;
  }
  private static Command glGetTexImage;
  public static Command glGetTexImage() {
    if (glGetTexImage != null)
      return glGetTexImage;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetTexImage = cmd;
    return cmd;
  }
  private static Command glCopyTextureSubImage1DEXT;
  public static Command glCopyTextureSubImage1DEXT() {
    if (glCopyTextureSubImage1DEXT != null)
      return glCopyTextureSubImage1DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyTextureSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture1D;
  public static Command glFramebufferTexture1D() {
    if (glFramebufferTexture1D != null)
      return glFramebufferTexture1D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glFramebufferTexture1D = cmd;
    return cmd;
  }
  private static Command glLightModelxOES;
  public static Command glLightModelxOES() {
    if (glLightModelxOES != null)
      return glLightModelxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", LightModelParameter());
    cmd.extension = GL_OES_fixed_point();
    glLightModelxOES = cmd;
    return cmd;
  }
  private static Command glTexImage3DMultisample;
  public static Command glTexImage3DMultisample() {
    if (glTexImage3DMultisample != null)
      return glTexImage3DMultisample;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_ARB_texture_multisample();
    glTexImage3DMultisample = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x2dv;
  public static Command glProgramUniformMatrix3x2dv() {
    if (glProgramUniformMatrix3x2dv != null)
      return glProgramUniformMatrix3x2dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix3x2dv = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageOES;
  public static Command glRenderbufferStorageOES() {
    if (glRenderbufferStorageOES != null)
      return glRenderbufferStorageOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_OES_framebuffer_object();
    glRenderbufferStorageOES = cmd;
    return cmd;
  }
  private static Command glTexRenderbufferNV;
  public static Command glTexRenderbufferNV() {
    if (glTexRenderbufferNV != null)
      return glTexRenderbufferNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_NV_explicit_multisample();
    glTexRenderbufferNV = cmd;
    return cmd;
  }
  private static Command glMatrixRotatefEXT;
  public static Command glMatrixRotatefEXT() {
    if (glMatrixRotatefEXT != null)
      return glMatrixRotatefEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixRotatefEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2x4dv;
  public static Command glUniformMatrix2x4dv() {
    if (glUniformMatrix2x4dv != null)
      return glUniformMatrix2x4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix2x4dv = cmd;
    return cmd;
  }
  private static Command glGetColorTableEXT;
  public static Command glGetColorTableEXT() {
    if (glGetColorTableEXT != null)
      return glGetColorTableEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_paletted_texture();
    glGetColorTableEXT = cmd;
    return cmd;
  }
  private static Command glFlushMappedBufferRange;
  public static Command glFlushMappedBufferRange() {
    if (glFlushMappedBufferRange != null)
      return glFlushMappedBufferRange;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_map_buffer_range();
    glFlushMappedBufferRange = cmd;
    return cmd;
  }
  private static Command glGetTextureImageEXT;
  public static Command glGetTextureImageEXT() {
    if (glGetTextureImageEXT != null)
      return glGetTextureImageEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureImageEXT = cmd;
    return cmd;
  }
  private static Command glBindBufferBaseNV;
  public static Command glBindBufferBaseNV() {
    if (glBindBufferBaseNV != null)
      return glBindBufferBaseNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_NV_transform_feedback();
    glBindBufferBaseNV = cmd;
    return cmd;
  }
  private static Command glCopyConvolutionFilter2DEXT;
  public static Command glCopyConvolutionFilter2DEXT() {
    if (glCopyConvolutionFilter2DEXT != null)
      return glCopyConvolutionFilter2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_convolution();
    glCopyConvolutionFilter2DEXT = cmd;
    return cmd;
  }
  private static Command glTransformFeedbackVaryings;
  public static Command glTransformFeedbackVaryings() {
    if (glTransformFeedbackVaryings != null)
      return glTransformFeedbackVaryings;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufferMode", _null_());
    glTransformFeedbackVaryings = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameterI4iNV;
  public static Command glProgramLocalParameterI4iNV() {
    if (glProgramLocalParameterI4iNV != null)
      return glProgramLocalParameterI4iNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramLocalParameterI4iNV = cmd;
    return cmd;
  }
  private static Command glIsTexture;
  public static Command glIsTexture() {
    if (glIsTexture != null)
      return glIsTexture;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsTexture = cmd;
    return cmd;
  }
  private static Command glGetMapAttribParameterfvNV;
  public static Command glGetMapAttribParameterfvNV() {
    if (glGetMapAttribParameterfvNV != null)
      return glGetMapAttribParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_evaluators();
    glGetMapAttribParameterfvNV = cmd;
    return cmd;
  }
  private static Command glEnableiOES;
  public static Command glEnableiOES() {
    if (glEnableiOES != null)
      return glEnableiOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glEnableiOES = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisampleANGLE;
  public static Command glRenderbufferStorageMultisampleANGLE() {
    if (glRenderbufferStorageMultisampleANGLE != null)
      return glRenderbufferStorageMultisampleANGLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ANGLE_framebuffer_multisample();
    glRenderbufferStorageMultisampleANGLE = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture3D;
  public static Command glFramebufferTexture3D() {
    if (glFramebufferTexture3D != null)
      return glFramebufferTexture3D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glFramebufferTexture3D = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP4uiv;
  public static Command glMultiTexCoordP4uiv() {
    if (glMultiTexCoordP4uiv != null)
      return glMultiTexCoordP4uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP4uiv = cmd;
    return cmd;
  }
  private static Command glTexParameterxvOES;
  public static Command glTexParameterxvOES() {
    if (glTexParameterxvOES != null)
      return glTexParameterxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_OES_fixed_point();
    glTexParameterxvOES = cmd;
    return cmd;
  }
  private static Command glTexStorage2DEXT;
  public static Command glTexStorage2DEXT() {
    if (glTexStorage2DEXT != null)
      return glTexStorage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_texture_storage();
    glTexStorage2DEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture2D;
  public static Command glFramebufferTexture2D() {
    if (glFramebufferTexture2D != null)
      return glFramebufferTexture2D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glFramebufferTexture2D = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparateiOES;
  public static Command glBlendEquationSeparateiOES() {
    if (glBlendEquationSeparateiOES != null)
      return glBlendEquationSeparateiOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glBlendEquationSeparateiOES = cmd;
    return cmd;
  }
  private static Command glTexParameterIuiv;
  public static Command glTexParameterIuiv() {
    if (glTexParameterIuiv != null)
      return glTexParameterIuiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    glTexParameterIuiv = cmd;
    return cmd;
  }
  private static Command glGetUnsignedBytevEXT;
  public static Command glGetUnsignedBytevEXT() {
    if (glGetUnsignedBytevEXT != null)
      return glGetUnsignedBytevEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    cmd.extension = GL_EXT_memory_object();
    glGetUnsignedBytevEXT = cmd;
    return cmd;
  }
  private static Command glIsSemaphoreEXT;
  public static Command glIsSemaphoreEXT() {
    if (glIsSemaphoreEXT != null)
      return glIsSemaphoreEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_semaphore();
    glIsSemaphoreEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream4iATI;
  public static Command glVertexStream4iATI() {
    if (glVertexStream4iATI != null)
      return glVertexStream4iATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4iATI = cmd;
    return cmd;
  }
  private static Command glDrawElementArrayAPPLE;
  public static Command glDrawElementArrayAPPLE() {
    if (glDrawElementArrayAPPLE != null)
      return glDrawElementArrayAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_APPLE_element_array();
    glDrawElementArrayAPPLE = cmd;
    return cmd;
  }
  private static Command glGetFloatv;
  public static Command glGetFloatv() {
    if (glGetFloatv != null)
      return glGetFloatv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    glGetFloatv = cmd;
    return cmd;
  }
  private static Command glReadPixels;
  public static Command glReadPixels() {
    if (glReadPixels != null)
      return glReadPixels;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glReadPixels = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateiEXT;
  public static Command glBlendFuncSeparateiEXT() {
    if (glBlendFuncSeparateiEXT != null)
      return glBlendFuncSeparateiEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("srcRGB", BlendingFactor());
    cmd.addParam("dstRGB", BlendingFactor());
    cmd.addParam("srcAlpha", BlendingFactor());
    cmd.addParam("dstAlpha", BlendingFactor());
    cmd.extension = GL_EXT_draw_buffers_indexed();
    glBlendFuncSeparateiEXT = cmd;
    return cmd;
  }
  private static Command glGetOcclusionQueryivNV;
  public static Command glGetOcclusionQueryivNV() {
    if (glGetOcclusionQueryivNV != null)
      return glGetOcclusionQueryivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_occlusion_query();
    glGetOcclusionQueryivNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2fARB;
  public static Command glMultiTexCoord2fARB() {
    if (glMultiTexCoord2fARB != null)
      return glMultiTexCoord2fARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2fARB = cmd;
    return cmd;
  }
  private static Command glFragmentLightModelivSGIX;
  public static Command glFragmentLightModelivSGIX() {
    if (glFragmentLightModelivSGIX != null)
      return glFragmentLightModelivSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FragmentLightModelParameterSGIX());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightModelivSGIX = cmd;
    return cmd;
  }
  private static Command glGetFragmentMaterialivSGIX;
  public static Command glGetFragmentMaterialivSGIX() {
    if (glGetFragmentMaterialivSGIX != null)
      return glGetFragmentMaterialivSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glGetFragmentMaterialivSGIX = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedEXT;
  public static Command glDrawElementsInstancedEXT() {
    if (glDrawElementsInstancedEXT != null)
      return glDrawElementsInstancedEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    cmd.extension = GL_EXT_draw_instanced();
    glDrawElementsInstancedEXT = cmd;
    return cmd;
  }
  private static Command glVertexBlendEnviATI;
  public static Command glVertexBlendEnviATI() {
    if (glVertexBlendEnviATI != null)
      return glVertexBlendEnviATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexBlendEnviATI = cmd;
    return cmd;
  }
  private static Command glClampColorARB;
  public static Command glClampColorARB() {
    if (glClampColorARB != null)
      return glClampColorARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("clamp", _null_());
    cmd.extension = GL_ARB_color_buffer_float();
    glClampColorARB = cmd;
    return cmd;
  }
  private static Command glConvolutionFilter2D;
  public static Command glConvolutionFilter2D() {
    if (glConvolutionFilter2D != null)
      return glConvolutionFilter2D;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glConvolutionFilter2D = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectivARB;
  public static Command glGetQueryObjectivARB() {
    if (glGetQueryObjectivARB != null)
      return glGetQueryObjectivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_occlusion_query();
    glGetQueryObjectivARB = cmd;
    return cmd;
  }
  private static Command glGetHistogramParameterivEXT;
  public static Command glGetHistogramParameterivEXT() {
    if (glGetHistogramParameterivEXT != null)
      return glGetHistogramParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("pname", GetHistogramParameterPNameEXT());
    cmd.extension = GL_EXT_histogram();
    glGetHistogramParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetMapAttribParameterivNV;
  public static Command glGetMapAttribParameterivNV() {
    if (glGetMapAttribParameterivNV != null)
      return glGetMapAttribParameterivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_evaluators();
    glGetMapAttribParameterivNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x2fv;
  public static Command glProgramUniformMatrix3x2fv() {
    if (glProgramUniformMatrix3x2fv != null)
      return glProgramUniformMatrix3x2fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix3x2fv = cmd;
    return cmd;
  }
  private static Command glGetPathTexGenivNV;
  public static Command glGetPathTexGenivNV() {
    if (glGetPathTexGenivNV != null)
      return glGetPathTexGenivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texCoordSet", TextureUnit());
    cmd.addParam("pname", PathGenMode());
    cmd.extension = GL_NV_path_rendering();
    glGetPathTexGenivNV = cmd;
    return cmd;
  }
  private static Command glBufferPageCommitmentARB;
  public static Command glBufferPageCommitmentARB() {
    if (glBufferPageCommitmentARB != null)
      return glBufferPageCommitmentARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("commit", Boolean());
    cmd.extension = GL_ARB_sparse_buffer();
    glBufferPageCommitmentARB = cmd;
    return cmd;
  }
  private static Command glBeginQueryARB;
  public static Command glBeginQueryARB() {
    if (glBeginQueryARB != null)
      return glBeginQueryARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_occlusion_query();
    glBeginQueryARB = cmd;
    return cmd;
  }
  private static Command glConvolutionFilter1D;
  public static Command glConvolutionFilter1D() {
    if (glConvolutionFilter1D != null)
      return glConvolutionFilter1D;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glConvolutionFilter1D = cmd;
    return cmd;
  }
  private static Command glVertexArrayIndexOffsetEXT;
  public static Command glVertexArrayIndexOffsetEXT() {
    if (glVertexArrayIndexOffsetEXT != null)
      return glVertexArrayIndexOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", IndexPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayIndexOffsetEXT = cmd;
    return cmd;
  }
  private static Command glExtGetTexSubImageQCOM;
  public static Command glExtGetTexSubImageQCOM() {
    if (glExtGetTexSubImageQCOM != null)
      return glExtGetTexSubImageQCOM;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_QCOM_extended_get();
    glExtGetTexSubImageQCOM = cmd;
    return cmd;
  }
  private static Command glImportSemaphoreWin32HandleEXT;
  public static Command glImportSemaphoreWin32HandleEXT() {
    if (glImportSemaphoreWin32HandleEXT != null)
      return glImportSemaphoreWin32HandleEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("handleType", ExternalHandleType());
    cmd.extension = GL_EXT_semaphore_win32();
    glImportSemaphoreWin32HandleEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1dARB;
  public static Command glMultiTexCoord1dARB() {
    if (glMultiTexCoord1dARB != null)
      return glMultiTexCoord1dARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1dARB = cmd;
    return cmd;
  }
  private static Command glColorSubTableEXT;
  public static Command glColorSubTableEXT() {
    if (glColorSubTableEXT != null)
      return glColorSubTableEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glColorSubTableEXT = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayIntegervEXT;
  public static Command glGetVertexArrayIntegervEXT() {
    if (glGetVertexArrayIntegervEXT != null)
      return glGetVertexArrayIntegervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_EXT_direct_state_access();
    glGetVertexArrayIntegervEXT = cmd;
    return cmd;
  }
  private static Command glSecondaryColorP3ui;
  public static Command glSecondaryColorP3ui() {
    if (glSecondaryColorP3ui != null)
      return glSecondaryColorP3ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glSecondaryColorP3ui = cmd;
    return cmd;
  }
  private static Command glColorMaskiOES;
  public static Command glColorMaskiOES() {
    if (glColorMaskiOES != null)
      return glColorMaskiOES;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("r", Boolean());
    cmd.addParam("g", Boolean());
    cmd.addParam("b", Boolean());
    cmd.addParam("a", Boolean());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glColorMaskiOES = cmd;
    return cmd;
  }
  private static Command glIndexFormatNV;
  public static Command glIndexFormatNV() {
    if (glIndexFormatNV != null)
      return glIndexFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glIndexFormatNV = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage2DEXT;
  public static Command glCopyTexSubImage2DEXT() {
    if (glCopyTexSubImage2DEXT != null)
      return glCopyTexSubImage2DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glCopyTexSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3dvEXT;
  public static Command glProgramUniformMatrix3dvEXT() {
    if (glProgramUniformMatrix3dvEXT != null)
      return glProgramUniformMatrix3dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix3dvEXT = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisample;
  public static Command glRenderbufferStorageMultisample() {
    if (glRenderbufferStorageMultisample != null)
      return glRenderbufferStorageMultisample;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_framebuffer_object();
    glRenderbufferStorageMultisample = cmd;
    return cmd;
  }
  private static Command glGetPerfMonitorCounterInfoAMD;
  public static Command glGetPerfMonitorCounterInfoAMD() {
    if (glGetPerfMonitorCounterInfoAMD != null)
      return glGetPerfMonitorCounterInfoAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_AMD_performance_monitor();
    glGetPerfMonitorCounterInfoAMD = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribfvARB;
  public static Command glGetVertexAttribfvARB() {
    if (glGetVertexAttribfvARB != null)
      return glGetVertexAttribfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_vertex_program();
    glGetVertexAttribfvARB = cmd;
    return cmd;
  }
  private static Command glIsSampler;
  public static Command glIsSampler() {
    if (glIsSampler != null)
      return glIsSampler;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_sampler_objects();
    glIsSampler = cmd;
    return cmd;
  }
  private static Command glGetQueryObjecti64v;
  public static Command glGetQueryObjecti64v() {
    if (glGetQueryObjecti64v != null)
      return glGetQueryObjecti64v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_timer_query();
    glGetQueryObjecti64v = cmd;
    return cmd;
  }
  private static Command glDeformationMap3fSGIX;
  public static Command glDeformationMap3fSGIX() {
    if (glDeformationMap3fSGIX != null)
      return glDeformationMap3fSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FfdTargetSGIX());
    cmd.extension = GL_SGIX_polynomial_ffd();
    glDeformationMap3fSGIX = cmd;
    return cmd;
  }
  private static Command glGetBufferSubDataARB;
  public static Command glGetBufferSubDataARB() {
    if (glGetBufferSubDataARB != null)
      return glGetBufferSubDataARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_ARB_vertex_buffer_object();
    glGetBufferSubDataARB = cmd;
    return cmd;
  }
  private static Command glDrawPixels;
  public static Command glDrawPixels() {
    if (glDrawPixels != null)
      return glDrawPixels;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glDrawPixels = cmd;
    return cmd;
  }
  private static Command glSampleMaskIndexedNV;
  public static Command glSampleMaskIndexedNV() {
    if (glSampleMaskIndexedNV != null)
      return glSampleMaskIndexedNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", _null_());
    cmd.extension = GL_NV_explicit_multisample();
    glSampleMaskIndexedNV = cmd;
    return cmd;
  }
  private static Command glTexParameteriv;
  public static Command glTexParameteriv() {
    if (glTexParameteriv != null)
      return glTexParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    glTexParameteriv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1ivARB;
  public static Command glMultiTexCoord1ivARB() {
    if (glMultiTexCoord1ivARB != null)
      return glMultiTexCoord1ivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1ivARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4hvNV;
  public static Command glMultiTexCoord4hvNV() {
    if (glMultiTexCoord4hvNV != null)
      return glMultiTexCoord4hvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord4hvNV = cmd;
    return cmd;
  }
  private static Command glShaderBinary;
  public static Command glShaderBinary() {
    if (glShaderBinary != null)
      return glShaderBinary;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("binaryformat", _null_());
    cmd.extension = GL_ARB_ES2_compatibility();
    glShaderBinary = cmd;
    return cmd;
  }
  private static Command glTexImage2D;
  public static Command glTexImage2D() {
    if (glTexImage2D != null)
      return glTexImage2D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexImage2D = cmd;
    return cmd;
  }
  private static Command glCoverageModulationNV;
  public static Command glCoverageModulationNV() {
    if (glCoverageModulationNV != null)
      return glCoverageModulationNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("components", _null_());
    cmd.extension = GL_NV_framebuffer_mixed_samples();
    glCoverageModulationNV = cmd;
    return cmd;
  }
  private static Command glTexStorage3DMultisample;
  public static Command glTexStorage3DMultisample() {
    if (glTexStorage3DMultisample != null)
      return glTexStorage3DMultisample;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    glTexStorage3DMultisample = cmd;
    return cmd;
  }
  private static Command glMultiModeDrawElementsIBM;
  public static Command glMultiModeDrawElementsIBM() {
    if (glMultiModeDrawElementsIBM != null)
      return glMultiModeDrawElementsIBM;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiModeDrawElementsIBM = cmd;
    return cmd;
  }
  private static Command glFinalCombinerInputNV;
  public static Command glFinalCombinerInputNV() {
    if (glFinalCombinerInputNV != null)
      return glFinalCombinerInputNV;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("variable", _null_());
    cmd.addParam("input", _null_());
    cmd.addParam("mapping", _null_());
    cmd.addParam("componentUsage", _null_());
    cmd.extension = GL_NV_register_combiners();
    glFinalCombinerInputNV = cmd;
    return cmd;
  }
  private static Command glMultiDrawElements;
  public static Command glMultiDrawElements() {
    if (glMultiDrawElements != null)
      return glMultiDrawElements;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glMultiDrawElements = cmd;
    return cmd;
  }
  private static Command glTexImage3D;
  public static Command glTexImage3D() {
    if (glTexImage3D != null)
      return glTexImage3D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexImage3D = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterIuiv;
  public static Command glGetSamplerParameterIuiv() {
    if (glGetSamplerParameterIuiv != null)
      return glGetSamplerParameterIuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glGetSamplerParameterIuiv = cmd;
    return cmd;
  }
  private static Command glFramebufferRenderbufferOES;
  public static Command glFramebufferRenderbufferOES() {
    if (glFramebufferRenderbufferOES != null)
      return glFramebufferRenderbufferOES;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("renderbuffertarget", RenderbufferTarget());
    cmd.extension = GL_OES_framebuffer_object();
    glFramebufferRenderbufferOES = cmd;
    return cmd;
  }
  private static Command glNormalStream3fATI;
  public static Command glNormalStream3fATI() {
    if (glNormalStream3fATI != null)
      return glNormalStream3fATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3fATI = cmd;
    return cmd;
  }
  private static Command glPathParameteriNV;
  public static Command glPathParameteriNV() {
    if (glPathParameteriNV != null)
      return glPathParameteriNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PathParameter());
    cmd.extension = GL_NV_path_rendering();
    glPathParameteriNV = cmd;
    return cmd;
  }
  private static Command glNamedBufferStorage;
  public static Command glNamedBufferStorage() {
    if (glNamedBufferStorage != null)
      return glNamedBufferStorage;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flags", MapBufferUsageMask());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedBufferStorage = cmd;
    return cmd;
  }
  private static Command glBindBufferOffsetNV;
  public static Command glBindBufferOffsetNV() {
    if (glBindBufferOffsetNV != null)
      return glBindBufferOffsetNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_NV_transform_feedback();
    glBindBufferOffsetNV = cmd;
    return cmd;
  }
  private static Command glVertexAttribFormatNV;
  public static Command glVertexAttribFormatNV() {
    if (glVertexAttribFormatNV != null)
      return glVertexAttribFormatNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glVertexAttribFormatNV = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparate;
  public static Command glBlendFuncSeparate() {
    if (glBlendFuncSeparate != null)
      return glBlendFuncSeparate;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("sfactorRGB", BlendingFactor());
    cmd.addParam("dfactorRGB", BlendingFactor());
    cmd.addParam("sfactorAlpha", BlendingFactor());
    cmd.addParam("dfactorAlpha", BlendingFactor());
    glBlendFuncSeparate = cmd;
    return cmd;
  }
  private static Command glMultiDrawElementsIndirectCountARB;
  public static Command glMultiDrawElementsIndirectCountARB() {
    if (glMultiDrawElementsIndirectCountARB != null)
      return glMultiDrawElementsIndirectCountARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    cmd.extension = GL_ARB_indirect_parameters();
    glMultiDrawElementsIndirectCountARB = cmd;
    return cmd;
  }
  private static Command glBufferData;
  public static Command glBufferData() {
    if (glBufferData != null)
      return glBufferData;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("usage", BufferUsageARB());
    glBufferData = cmd;
    return cmd;
  }
  private static Command glMapControlPointsNV;
  public static Command glMapControlPointsNV() {
    if (glMapControlPointsNV != null)
      return glMapControlPointsNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("type", _null_());
    cmd.addParam("packed", Boolean());
    cmd.extension = GL_NV_evaluators();
    glMapControlPointsNV = cmd;
    return cmd;
  }
  private static Command glTextureSubImage3DEXT;
  public static Command glTextureSubImage3DEXT() {
    if (glTextureSubImage3DEXT != null)
      return glTextureSubImage3DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glTexBuffer;
  public static Command glTexBuffer() {
    if (glTexBuffer != null)
      return glTexBuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glTexBuffer = cmd;
    return cmd;
  }
  private static Command glGetPointeri_vEXT;
  public static Command glGetPointeri_vEXT() {
    if (glGetPointeri_vEXT != null)
      return glGetPointeri_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glGetPointeri_vEXT = cmd;
    return cmd;
  }
  private static Command glClientActiveTextureARB;
  public static Command glClientActiveTextureARB() {
    if (glClientActiveTextureARB != null)
      return glClientActiveTextureARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glClientActiveTextureARB = cmd;
    return cmd;
  }
  private static Command glTexImage1D;
  public static Command glTexImage1D() {
    if (glTexImage1D != null)
      return glTexImage1D;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glTexImage1D = cmd;
    return cmd;
  }
  private static Command glIsEnabledIndexedEXT;
  public static Command glIsEnabledIndexedEXT() {
    if (glIsEnabledIndexedEXT != null)
      return glIsEnabledIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glIsEnabledIndexedEXT = cmd;
    return cmd;
  }
  private static Command glCopyColorTableSGI;
  public static Command glCopyColorTableSGI() {
    if (glCopyColorTableSGI != null)
      return glCopyColorTableSGI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTargetSGI());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_SGI_color_table();
    glCopyColorTableSGI = cmd;
    return cmd;
  }
  private static Command glIsTextureHandleResidentNV;
  public static Command glIsTextureHandleResidentNV() {
    if (glIsTextureHandleResidentNV != null)
      return glIsTextureHandleResidentNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsTextureHandleResidentNV = cmd;
    return cmd;
  }
  private static Command glMatrixMultTranspose3x3fNV;
  public static Command glMatrixMultTranspose3x3fNV() {
    if (glMatrixMultTranspose3x3fNV != null)
      return glMatrixMultTranspose3x3fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("matrixMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glMatrixMultTranspose3x3fNV = cmd;
    return cmd;
  }
  private static Command glFragmentMaterialivSGIX;
  public static Command glFragmentMaterialivSGIX() {
    if (glFragmentMaterialivSGIX != null)
      return glFragmentMaterialivSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentMaterialivSGIX = cmd;
    return cmd;
  }
  private static Command glMatrixLoadTranspose3x3fNV;
  public static Command glMatrixLoadTranspose3x3fNV() {
    if (glMatrixLoadTranspose3x3fNV != null)
      return glMatrixLoadTranspose3x3fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("matrixMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glMatrixLoadTranspose3x3fNV = cmd;
    return cmd;
  }
  private static Command glPointAlongPathNV;
  public static Command glPointAlongPathNV() {
    if (glPointAlongPathNV != null)
      return glPointAlongPathNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_path_rendering();
    glPointAlongPathNV = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayIndexed64iv;
  public static Command glGetVertexArrayIndexed64iv() {
    if (glGetVertexArrayIndexed64iv != null)
      return glGetVertexArrayIndexed64iv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetVertexArrayIndexed64iv = cmd;
    return cmd;
  }
  private static Command glGetFramebufferAttachmentParameterivEXT;
  public static Command glGetFramebufferAttachmentParameterivEXT() {
    if (glGetFramebufferAttachmentParameterivEXT != null)
      return glGetFramebufferAttachmentParameterivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_EXT_framebuffer_object();
    glGetFramebufferAttachmentParameterivEXT = cmd;
    return cmd;
  }
  private static Command glTexImage2DMultisampleCoverageNV;
  public static Command glTexImage2DMultisampleCoverageNV() {
    if (glTexImage2DMultisampleCoverageNV != null)
      return glTexImage2DMultisampleCoverageNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_NV_texture_multisample();
    glTexImage2DMultisampleCoverageNV = cmd;
    return cmd;
  }
  private static Command glBufferStorageExternalEXT;
  public static Command glBufferStorageExternalEXT() {
    if (glBufferStorageExternalEXT != null)
      return glBufferStorageExternalEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("flags", MapBufferUsageMask());
    glBufferStorageExternalEXT = cmd;
    return cmd;
  }
  private static Command glGetBufferPointervOES;
  public static Command glGetBufferPointervOES() {
    if (glGetBufferPointervOES != null)
      return glGetBufferPointervOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_OES_mapbuffer();
    glGetBufferPointervOES = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparateOES;
  public static Command glBlendEquationSeparateOES() {
    if (glBlendEquationSeparateOES != null)
      return glBlendEquationSeparateOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    cmd.extension = GL_OES_blend_equation_separate();
    glBlendEquationSeparateOES = cmd;
    return cmd;
  }
  private static Command glDrawBuffersNV;
  public static Command glDrawBuffersNV() {
    if (glDrawBuffersNV != null)
      return glDrawBuffersNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", _null_());
    cmd.extension = GL_NV_draw_buffers();
    glDrawBuffersNV = cmd;
    return cmd;
  }
  private static Command glGetnColorTableARB;
  public static Command glGetnColorTableARB() {
    if (glGetnColorTableARB != null)
      return glGetnColorTableARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glGetnColorTableARB = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedback;
  public static Command glDrawTransformFeedback() {
    if (glDrawTransformFeedback != null)
      return glDrawTransformFeedback;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ARB_transform_feedback2();
    glDrawTransformFeedback = cmd;
    return cmd;
  }
  private static Command glVertexPointer;
  public static Command glVertexPointer() {
    if (glVertexPointer != null)
      return glVertexPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    glVertexPointer = cmd;
    return cmd;
  }
  private static Command glPathSubCommandsNV;
  public static Command glPathSubCommandsNV() {
    if (glPathSubCommandsNV != null)
      return glPathSubCommandsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("coordType", _null_());
    cmd.extension = GL_NV_path_rendering();
    glPathSubCommandsNV = cmd;
    return cmd;
  }
  private static Command glMultiTexParameterIivEXT;
  public static Command glMultiTexParameterIivEXT() {
    if (glMultiTexParameterIivEXT != null)
      return glMultiTexParameterIivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glTextureImage2DMultisampleCoverageNV;
  public static Command glTextureImage2DMultisampleCoverageNV() {
    if (glTextureImage2DMultisampleCoverageNV != null)
      return glTextureImage2DMultisampleCoverageNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_NV_texture_multisample();
    glTextureImage2DMultisampleCoverageNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3svARB;
  public static Command glMultiTexCoord3svARB() {
    if (glMultiTexCoord3svARB != null)
      return glMultiTexCoord3svARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3svARB = cmd;
    return cmd;
  }
  private static Command glCopyBufferSubDataNV;
  public static Command glCopyBufferSubDataNV() {
    if (glCopyBufferSubDataNV != null)
      return glCopyBufferSubDataNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("readTarget", CopyBufferSubDataTarget());
    cmd.addParam("writeTarget", CopyBufferSubDataTarget());
    cmd.extension = GL_NV_copy_buffer();
    glCopyBufferSubDataNV = cmd;
    return cmd;
  }
  private static Command glBufferStorageMemEXT;
  public static Command glBufferStorageMemEXT() {
    if (glBufferStorageMemEXT != null)
      return glBufferStorageMemEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_EXT_memory_object();
    glBufferStorageMemEXT = cmd;
    return cmd;
  }
  private static Command glPointParameteriv;
  public static Command glPointParameteriv() {
    if (glPointParameteriv != null)
      return glPointParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glPointParameteriv = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseInstanceEXT;
  public static Command glDrawElementsInstancedBaseInstanceEXT() {
    if (glDrawElementsInstancedBaseInstanceEXT != null)
      return glDrawElementsInstancedBaseInstanceEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", PrimitiveType());
    glDrawElementsInstancedBaseInstanceEXT = cmd;
    return cmd;
  }
  private static Command glGetProgramLocalParameterIuivNV;
  public static Command glGetProgramLocalParameterIuivNV() {
    if (glGetProgramLocalParameterIuivNV != null)
      return glGetProgramLocalParameterIuivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glGetProgramLocalParameterIuivNV = cmd;
    return cmd;
  }
  private static Command glCompressedMultiTexImage3DEXT;
  public static Command glCompressedMultiTexImage3DEXT() {
    if (glCompressedMultiTexImage3DEXT != null)
      return glCompressedMultiTexImage3DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedMultiTexImage3DEXT = cmd;
    return cmd;
  }
  private static Command glNormalStream3iATI;
  public static Command glNormalStream3iATI() {
    if (glNormalStream3iATI != null)
      return glNormalStream3iATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3iATI = cmd;
    return cmd;
  }
  private static Command glPushDebugGroup;
  public static Command glPushDebugGroup() {
    if (glPushDebugGroup != null)
      return glPushDebugGroup;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.extension = GL_KHR_debug();
    glPushDebugGroup = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirectBindlessCountNV;
  public static Command glMultiDrawArraysIndirectBindlessCountNV() {
    if (glMultiDrawArraysIndirectBindlessCountNV != null)
      return glMultiDrawArraysIndirectBindlessCountNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysIndirectBindlessCountNV = cmd;
    return cmd;
  }
  private static Command glGetObjectParameterivAPPLE;
  public static Command glGetObjectParameterivAPPLE() {
    if (glGetObjectParameterivAPPLE != null)
      return glGetObjectParameterivAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("objectType", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_object_purgeable();
    glGetObjectParameterivAPPLE = cmd;
    return cmd;
  }
  private static Command glVertexAttribLPointerEXT;
  public static Command glVertexAttribLPointerEXT() {
    if (glVertexAttribLPointerEXT != null)
      return glVertexAttribLPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.extension = GL_EXT_vertex_attrib_64bit();
    glVertexAttribLPointerEXT = cmd;
    return cmd;
  }
  private static Command glAlphaFuncx;
  public static Command glAlphaFuncx() {
    if (glAlphaFuncx != null)
      return glAlphaFuncx;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", AlphaFunction());
    glAlphaFuncx = cmd;
    return cmd;
  }
  private static Command glGetConvolutionParameterxvOES;
  public static Command glGetConvolutionParameterxvOES() {
    if (glGetConvolutionParameterxvOES != null)
      return glGetConvolutionParameterxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_OES_fixed_point();
    glGetConvolutionParameterxvOES = cmd;
    return cmd;
  }
  private static Command glInvalidateNamedFramebufferData;
  public static Command glInvalidateNamedFramebufferData() {
    if (glInvalidateNamedFramebufferData != null)
      return glInvalidateNamedFramebufferData;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("attachments", FramebufferAttachment());
    cmd.extension = GL_ARB_direct_state_access();
    glInvalidateNamedFramebufferData = cmd;
    return cmd;
  }
  private static Command glVertexAttribPointer;
  public static Command glVertexAttribPointer() {
    if (glVertexAttribPointer != null)
      return glVertexAttribPointer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    glVertexAttribPointer = cmd;
    return cmd;
  }
  private static Command glCoverageMaskNV;
  public static Command glCoverageMaskNV() {
    if (glCoverageMaskNV != null)
      return glCoverageMaskNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", Boolean());
    cmd.extension = GL_NV_coverage_sample();
    glCoverageMaskNV = cmd;
    return cmd;
  }
  private static Command glFragmentLightiSGIX;
  public static Command glFragmentLightiSGIX() {
    if (glFragmentLightiSGIX != null)
      return glFragmentLightiSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightiSGIX = cmd;
    return cmd;
  }
  private static Command glBlendFunciARB;
  public static Command glBlendFunciARB() {
    if (glBlendFunciARB != null)
      return glBlendFunciARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("src", BlendingFactor());
    cmd.addParam("dst", BlendingFactor());
    glBlendFunciARB = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2iARB;
  public static Command glMultiTexCoord2iARB() {
    if (glMultiTexCoord2iARB != null)
      return glMultiTexCoord2iARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2iARB = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterivEXT;
  public static Command glConvolutionParameterivEXT() {
    if (glConvolutionParameterivEXT != null)
      return glConvolutionParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_EXT_convolution();
    glConvolutionParameterivEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferRenderbufferEXT;
  public static Command glFramebufferRenderbufferEXT() {
    if (glFramebufferRenderbufferEXT != null)
      return glFramebufferRenderbufferEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("renderbuffertarget", RenderbufferTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glFramebufferRenderbufferEXT = cmd;
    return cmd;
  }
  private static Command glGetUnsignedBytei_vEXT;
  public static Command glGetUnsignedBytei_vEXT() {
    if (glGetUnsignedBytei_vEXT != null)
      return glGetUnsignedBytei_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_memory_object();
    glGetUnsignedBytei_vEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureLayerEXT;
  public static Command glFramebufferTextureLayerEXT() {
    if (glFramebufferTextureLayerEXT != null)
      return glFramebufferTextureLayerEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_EXT_texture_array();
    glFramebufferTextureLayerEXT = cmd;
    return cmd;
  }
  private static Command glActiveTextureARB;
  public static Command glActiveTextureARB() {
    if (glActiveTextureARB != null)
      return glActiveTextureARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glActiveTextureARB = cmd;
    return cmd;
  }
  private static Command glBlendEquationOES;
  public static Command glBlendEquationOES() {
    if (glBlendEquationOES != null)
      return glBlendEquationOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    cmd.extension = GL_OES_blend_subtract();
    glBlendEquationOES = cmd;
    return cmd;
  }
  private static Command glGenerateMipmapOES;
  public static Command glGenerateMipmapOES() {
    if (glGenerateMipmapOES != null)
      return glGenerateMipmapOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_OES_framebuffer_object();
    glGenerateMipmapOES = cmd;
    return cmd;
  }
  private static Command glNormalP3uiv;
  public static Command glNormalP3uiv() {
    if (glNormalP3uiv != null)
      return glNormalP3uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glNormalP3uiv = cmd;
    return cmd;
  }
  private static Command glBindBufferRangeEXT;
  public static Command glBindBufferRangeEXT() {
    if (glBindBufferRangeEXT != null)
      return glBindBufferRangeEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_EXT_transform_feedback();
    glBindBufferRangeEXT = cmd;
    return cmd;
  }
  private static Command glPointParameterfv;
  public static Command glPointParameterfv() {
    if (glPointParameterfv != null)
      return glPointParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glPointParameterfv = cmd;
    return cmd;
  }
  private static Command glCoverageOperationNV;
  public static Command glCoverageOperationNV() {
    if (glCoverageOperationNV != null)
      return glCoverageOperationNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("operation", _null_());
    cmd.extension = GL_NV_coverage_sample();
    glCoverageOperationNV = cmd;
    return cmd;
  }
  private static Command glNamedRenderbufferStorageMultisampleCoverageEXT;
  public static Command glNamedRenderbufferStorageMultisampleCoverageEXT() {
    if (glNamedRenderbufferStorageMultisampleCoverageEXT != null)
      return glNamedRenderbufferStorageMultisampleCoverageEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedRenderbufferStorageMultisampleCoverageEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexEnvfvEXT;
  public static Command glMultiTexEnvfvEXT() {
    if (glMultiTexEnvfvEXT != null)
      return glMultiTexEnvfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexEnvfvEXT = cmd;
    return cmd;
  }
  private static Command glClipPlanefIMG;
  public static Command glClipPlanefIMG() {
    if (glClipPlanefIMG != null)
      return glClipPlanefIMG;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("p", ClipPlaneName());
    cmd.extension = GL_IMG_user_clip_plane();
    glClipPlanefIMG = cmd;
    return cmd;
  }
  private static Command glIndexFuncEXT;
  public static Command glIndexFuncEXT() {
    if (glIndexFuncEXT != null)
      return glIndexFuncEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", _null_());
    cmd.extension = GL_EXT_index_func();
    glIndexFuncEXT = cmd;
    return cmd;
  }
  private static Command glGetnMapfvARB;
  public static Command glGetnMapfvARB() {
    if (glGetnMapfvARB != null)
      return glGetnMapfvARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MapTarget());
    cmd.addParam("query", MapQuery());
    cmd.extension = GL_ARB_robustness();
    glGetnMapfvARB = cmd;
    return cmd;
  }
  private static Command glClearBufferSubData;
  public static Command glClearBufferSubData() {
    if (glClearBufferSubData != null)
      return glClearBufferSubData;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glClearBufferSubData = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage3DOES;
  public static Command glCompressedTexImage3DOES() {
    if (glCompressedTexImage3DOES != null)
      return glCompressedTexImage3DOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_OES_texture_3D();
    glCompressedTexImage3DOES = cmd;
    return cmd;
  }
  private static Command glGetnMinmaxARB;
  public static Command glGetnMinmaxARB() {
    if (glGetnMinmaxARB != null)
      return glGetnMinmaxARB;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glGetnMinmaxARB = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectui64vEXT;
  public static Command glGetQueryObjectui64vEXT() {
    if (glGetQueryObjectui64vEXT != null)
      return glGetQueryObjectui64vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glGetQueryObjectui64vEXT = cmd;
    return cmd;
  }
  private static Command glGetMultiTexGenivEXT;
  public static Command glGetMultiTexGenivEXT() {
    if (glGetMultiTexGenivEXT != null)
      return glGetMultiTexGenivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetMultiTexGenivEXT = cmd;
    return cmd;
  }
  private static Command glProvokingVertex;
  public static Command glProvokingVertex() {
    if (glProvokingVertex != null)
      return glProvokingVertex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", VertexProvokingMode());
    cmd.extension = GL_ARB_provoking_vertex();
    glProvokingVertex = cmd;
    return cmd;
  }
  private static Command glGetTexLevelParameterxvOES;
  public static Command glGetTexLevelParameterxvOES() {
    if (glGetTexLevelParameterxvOES != null)
      return glGetTexLevelParameterxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetTexLevelParameterxvOES = cmd;
    return cmd;
  }
  private static Command glIsVertexAttribEnabledAPPLE;
  public static Command glIsVertexAttribEnabledAPPLE() {
    if (glIsVertexAttribEnabledAPPLE != null)
      return glIsVertexAttribEnabledAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_vertex_program_evaluators();
    glIsVertexAttribEnabledAPPLE = cmd;
    return cmd;
  }
  private static Command glGetNamedFramebufferParameterfvAMD;
  public static Command glGetNamedFramebufferParameterfvAMD() {
    if (glGetNamedFramebufferParameterfvAMD != null)
      return glGetNamedFramebufferParameterfvAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_AMD_framebuffer_sample_positions();
    glGetNamedFramebufferParameterfvAMD = cmd;
    return cmd;
  }
  private static Command glMaterialfv;
  public static Command glMaterialfv() {
    if (glMaterialfv != null)
      return glMaterialfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glMaterialfv = cmd;
    return cmd;
  }
  private static Command glDrawRangeElementArrayATI;
  public static Command glDrawRangeElementArrayATI() {
    if (glDrawRangeElementArrayATI != null)
      return glDrawRangeElementArrayATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ATI_element_array();
    glDrawRangeElementArrayATI = cmd;
    return cmd;
  }
  private static Command glEGLImageTargetRenderbufferStorageOES;
  public static Command glEGLImageTargetRenderbufferStorageOES() {
    if (glEGLImageTargetRenderbufferStorageOES != null)
      return glEGLImageTargetRenderbufferStorageOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    glEGLImageTargetRenderbufferStorageOES = cmd;
    return cmd;
  }
  private static Command glGetIntegerv;
  public static Command glGetIntegerv() {
    if (glGetIntegerv != null)
      return glGetIntegerv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetPName());
    glGetIntegerv = cmd;
    return cmd;
  }
  private static Command glGetVariantFloatvEXT;
  public static Command glGetVariantFloatvEXT() {
    if (glGetVariantFloatvEXT != null)
      return glGetVariantFloatvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glGetVariantFloatvEXT = cmd;
    return cmd;
  }
  private static Command glBlendEquationSeparateIndexedAMD;
  public static Command glBlendEquationSeparateIndexedAMD() {
    if (glBlendEquationSeparateIndexedAMD != null)
      return glBlendEquationSeparateIndexedAMD;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("modeRGB", BlendEquationModeEXT());
    cmd.addParam("modeAlpha", BlendEquationModeEXT());
    glBlendEquationSeparateIndexedAMD = cmd;
    return cmd;
  }
  private static Command glPNTrianglesiATI;
  public static Command glPNTrianglesiATI() {
    if (glPNTrianglesiATI != null)
      return glPNTrianglesiATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_pn_triangles();
    glPNTrianglesiATI = cmd;
    return cmd;
  }
  private static Command glFragmentMaterialfvSGIX;
  public static Command glFragmentMaterialfvSGIX() {
    if (glFragmentMaterialfvSGIX != null)
      return glFragmentMaterialfvSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentMaterialfvSGIX = cmd;
    return cmd;
  }
  private static Command glPixelMapuiv;
  public static Command glPixelMapuiv() {
    if (glPixelMapuiv != null)
      return glPixelMapuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glPixelMapuiv = cmd;
    return cmd;
  }
  private static Command glStencilFuncSeparateATI;
  public static Command glStencilFuncSeparateATI() {
    if (glStencilFuncSeparateATI != null)
      return glStencilFuncSeparateATI;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("frontfunc", StencilFunction());
    cmd.addParam("backfunc", StencilFunction());
    cmd.extension = GL_ATI_separate_stencil();
    glStencilFuncSeparateATI = cmd;
    return cmd;
  }
  private static Command glTextureLightEXT;
  public static Command glTextureLightEXT() {
    if (glTextureLightEXT != null)
      return glTextureLightEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_light_texture();
    glTextureLightEXT = cmd;
    return cmd;
  }
  private static Command glMatrixIndexPointerARB;
  public static Command glMatrixIndexPointerARB() {
    if (glMatrixIndexPointerARB != null)
      return glMatrixIndexPointerARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_ARB_matrix_palette();
    glMatrixIndexPointerARB = cmd;
    return cmd;
  }
  private static Command glEnableClientState;
  public static Command glEnableClientState() {
    if (glEnableClientState != null)
      return glEnableClientState;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    glEnableClientState = cmd;
    return cmd;
  }
  private static Command glPixelMapx;
  public static Command glPixelMapx() {
    if (glPixelMapx != null)
      return glPixelMapx;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    cmd.extension = GL_OES_fixed_point();
    glPixelMapx = cmd;
    return cmd;
  }
  private static Command glNormalPointerListIBM;
  public static Command glNormalPointerListIBM() {
    if (glNormalPointerListIBM != null)
      return glNormalPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    cmd.extension = GL_IBM_vertex_array_lists();
    glNormalPointerListIBM = cmd;
    return cmd;
  }
  private static Command glIsEnablediNV;
  public static Command glIsEnablediNV() {
    if (glIsEnablediNV != null)
      return glIsEnablediNV;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_NV_viewport_array();
    glIsEnablediNV = cmd;
    return cmd;
  }
  private static Command glAreTexturesResident;
  public static Command glAreTexturesResident() {
    if (glAreTexturesResident != null)
      return glAreTexturesResident;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("residences", Boolean());
    glAreTexturesResident = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedbackInstanced;
  public static Command glDrawTransformFeedbackInstanced() {
    if (glDrawTransformFeedbackInstanced != null)
      return glDrawTransformFeedbackInstanced;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawTransformFeedbackInstanced = cmd;
    return cmd;
  }
  private static Command glGetTextureLevelParameterfv;
  public static Command glGetTextureLevelParameterfv() {
    if (glGetTextureLevelParameterfv != null)
      return glGetTextureLevelParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureLevelParameterfv = cmd;
    return cmd;
  }
  private static Command glVideoCaptureStreamParameterivNV;
  public static Command glVideoCaptureStreamParameterivNV() {
    if (glVideoCaptureStreamParameterivNV != null)
      return glVideoCaptureStreamParameterivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glVideoCaptureStreamParameterivNV = cmd;
    return cmd;
  }
  private static Command glCullParameterfvEXT;
  public static Command glCullParameterfvEXT() {
    if (glCullParameterfvEXT != null)
      return glCullParameterfvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_cull_vertex();
    glCullParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glTexParameterfv;
  public static Command glTexParameterfv() {
    if (glTexParameterfv != null)
      return glTexParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    glTexParameterfv = cmd;
    return cmd;
  }
  private static Command glCopyMultiTexSubImage2DEXT;
  public static Command glCopyMultiTexSubImage2DEXT() {
    if (glCopyMultiTexSubImage2DEXT != null)
      return glCopyMultiTexSubImage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyMultiTexSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glClientAttribDefaultEXT;
  public static Command glClientAttribDefaultEXT() {
    if (glClientAttribDefaultEXT != null)
      return glClientAttribDefaultEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClientAttribMask());
    cmd.extension = GL_EXT_direct_state_access();
    glClientAttribDefaultEXT = cmd;
    return cmd;
  }
  private static Command glCheckFramebufferStatus;
  public static Command glCheckFramebufferStatus() {
    if (glCheckFramebufferStatus != null)
      return glCheckFramebufferStatus;
    Command cmd = new Command(1);
    cmd.returnGroup = FramebufferStatus();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glCheckFramebufferStatus = cmd;
    return cmd;
  }
  private static Command glGetLightiv;
  public static Command glGetLightiv() {
    if (glGetLightiv != null)
      return glGetLightiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glGetLightiv = cmd;
    return cmd;
  }
  private static Command glListParameterfSGIX;
  public static Command glListParameterfSGIX() {
    if (glListParameterfSGIX != null)
      return glListParameterfSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ListParameterName());
    cmd.extension = GL_SGIX_list_priority();
    glListParameterfSGIX = cmd;
    return cmd;
  }
  private static Command glGetnPixelMapfvARB;
  public static Command glGetnPixelMapfvARB() {
    if (glGetnPixelMapfvARB != null)
      return glGetnPixelMapfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    cmd.extension = GL_ARB_robustness();
    glGetnPixelMapfvARB = cmd;
    return cmd;
  }
  private static Command glBlendEquationIndexedAMD;
  public static Command glBlendEquationIndexedAMD() {
    if (glBlendEquationIndexedAMD != null)
      return glBlendEquationIndexedAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    glBlendEquationIndexedAMD = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstanced;
  public static Command glDrawElementsInstanced() {
    if (glDrawElementsInstanced != null)
      return glDrawElementsInstanced;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsInstanced = cmd;
    return cmd;
  }
  private static Command glMultiTexParameterfEXT;
  public static Command glMultiTexParameterfEXT() {
    if (glMultiTexParameterfEXT != null)
      return glMultiTexParameterfEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexParameterfEXT = cmd;
    return cmd;
  }
  private static Command glEdgeFlagv;
  public static Command glEdgeFlagv() {
    if (glEdgeFlagv != null)
      return glEdgeFlagv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flag", Boolean());
    glEdgeFlagv = cmd;
    return cmd;
  }
  private static Command glGetProgramResourcefvNV;
  public static Command glGetProgramResourcefvNV() {
    if (glGetProgramResourcefvNV != null)
      return glGetProgramResourcefvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.addParam("props", _null_());
    cmd.extension = GL_NV_path_rendering();
    glGetProgramResourcefvNV = cmd;
    return cmd;
  }
  private static Command glGetProgramBinaryOES;
  public static Command glGetProgramBinaryOES() {
    if (glGetProgramBinaryOES != null)
      return glGetProgramBinaryOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("binaryFormat", _null_());
    cmd.extension = GL_OES_get_program_binary();
    glGetProgramBinaryOES = cmd;
    return cmd;
  }
  private static Command glCopyTextureSubImage3DEXT;
  public static Command glCopyTextureSubImage3DEXT() {
    if (glCopyTextureSubImage3DEXT != null)
      return glCopyTextureSubImage3DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyTextureSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glMaterialiv;
  public static Command glMaterialiv() {
    if (glMaterialiv != null)
      return glMaterialiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glMaterialiv = cmd;
    return cmd;
  }
  private static Command glMulticastWaitSyncNV;
  public static Command glMulticastWaitSyncNV() {
    if (glMulticastWaitSyncNV != null)
      return glMulticastWaitSyncNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("waitGpuMask", _null_());
    cmd.extension = GL_NV_gpu_multicast();
    glMulticastWaitSyncNV = cmd;
    return cmd;
  }
  private static Command glMinmax;
  public static Command glMinmax() {
    if (glMinmax != null)
      return glMinmax;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("sink", Boolean());
    cmd.extension = GL_ARB_imaging();
    glMinmax = cmd;
    return cmd;
  }
  private static Command glVertexAttribP3ui;
  public static Command glVertexAttribP3ui() {
    if (glVertexAttribP3ui != null)
      return glVertexAttribP3ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP3ui = cmd;
    return cmd;
  }
  private static Command glVertexPointervINTEL;
  public static Command glVertexPointervINTEL() {
    if (glVertexPointervINTEL != null)
      return glVertexPointervINTEL;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_INTEL_parallel_arrays();
    glVertexPointervINTEL = cmd;
    return cmd;
  }
  private static Command glBindFramebuffer;
  public static Command glBindFramebuffer() {
    if (glBindFramebuffer != null)
      return glBindFramebuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glBindFramebuffer = cmd;
    return cmd;
  }
  private static Command glMakeBufferNonResidentNV;
  public static Command glMakeBufferNonResidentNV() {
    if (glMakeBufferNonResidentNV != null)
      return glMakeBufferNonResidentNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_shader_buffer_load();
    glMakeBufferNonResidentNV = cmd;
    return cmd;
  }
  private static Command glVertexStream2dvATI;
  public static Command glVertexStream2dvATI() {
    if (glVertexStream2dvATI != null)
      return glVertexStream2dvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2dvATI = cmd;
    return cmd;
  }
  private static Command glTransformFeedbackAttribsNV;
  public static Command glTransformFeedbackAttribsNV() {
    if (glTransformFeedbackAttribsNV != null)
      return glTransformFeedbackAttribsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufferMode", _null_());
    cmd.extension = GL_NV_transform_feedback();
    glTransformFeedbackAttribsNV = cmd;
    return cmd;
  }
  private static Command glIsFenceAPPLE;
  public static Command glIsFenceAPPLE() {
    if (glIsFenceAPPLE != null)
      return glIsFenceAPPLE;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_APPLE_fence();
    glIsFenceAPPLE = cmd;
    return cmd;
  }
  private static Command glColorTableParameteriv;
  public static Command glColorTableParameteriv() {
    if (glColorTableParameteriv != null)
      return glColorTableParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("pname", ColorTableParameterPNameSGI());
    cmd.extension = GL_ARB_imaging();
    glColorTableParameteriv = cmd;
    return cmd;
  }
  private static Command glDrawBuffersEXT;
  public static Command glDrawBuffersEXT() {
    if (glDrawBuffersEXT != null)
      return glDrawBuffersEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("bufs", _null_());
    cmd.extension = GL_EXT_draw_buffers();
    glDrawBuffersEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x4dvEXT;
  public static Command glProgramUniformMatrix2x4dvEXT() {
    if (glProgramUniformMatrix2x4dvEXT != null)
      return glProgramUniformMatrix2x4dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix2x4dvEXT = cmd;
    return cmd;
  }
  private static Command glCopyTexImage1DEXT;
  public static Command glCopyTexImage1DEXT() {
    if (glCopyTexImage1DEXT != null)
      return glCopyTexImage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCopyTexImage1DEXT = cmd;
    return cmd;
  }
  private static Command glCreateShaderProgramvEXT;
  public static Command glCreateShaderProgramvEXT() {
    if (glCreateShaderProgramvEXT != null)
      return glCreateShaderProgramvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ShaderType());
    cmd.extension = GL_EXT_separate_shader_objects();
    glCreateShaderProgramvEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture;
  public static Command glFramebufferTexture() {
    if (glFramebufferTexture != null)
      return glFramebufferTexture;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    glFramebufferTexture = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameters4fvEXT;
  public static Command glNamedProgramLocalParameters4fvEXT() {
    if (glNamedProgramLocalParameters4fvEXT != null)
      return glNamedProgramLocalParameters4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameters4fvEXT = cmd;
    return cmd;
  }
  private static Command glGetVideoivNV;
  public static Command glGetVideoivNV() {
    if (glGetVideoivNV != null)
      return glGetVideoivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_present_video();
    glGetVideoivNV = cmd;
    return cmd;
  }
  private static Command glGetLightfv;
  public static Command glGetLightfv() {
    if (glGetLightfv != null)
      return glGetLightfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    glGetLightfv = cmd;
    return cmd;
  }
  private static Command glGetNamedRenderbufferParameterivEXT;
  public static Command glGetNamedRenderbufferParameterivEXT() {
    if (glGetNamedRenderbufferParameterivEXT != null)
      return glGetNamedRenderbufferParameterivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", RenderbufferParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedRenderbufferParameterivEXT = cmd;
    return cmd;
  }
  private static Command glCompressedTextureSubImage3D;
  public static Command glCompressedTextureSubImage3D() {
    if (glCompressedTextureSubImage3D != null)
      return glCompressedTextureSubImage3D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glCompressedTextureSubImage3D = cmd;
    return cmd;
  }
  private static Command glGetClipPlanefOES;
  public static Command glGetClipPlanefOES() {
    if (glGetClipPlanefOES != null)
      return glGetClipPlanefOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glGetClipPlanefOES = cmd;
    return cmd;
  }
  private static Command glFinishObjectAPPLE;
  public static Command glFinishObjectAPPLE() {
    if (glFinishObjectAPPLE != null)
      return glFinishObjectAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("object", _null_());
    cmd.extension = GL_APPLE_fence();
    glFinishObjectAPPLE = cmd;
    return cmd;
  }
  private static Command glGetRenderbufferParameterivOES;
  public static Command glGetRenderbufferParameterivOES() {
    if (glGetRenderbufferParameterivOES != null)
      return glGetRenderbufferParameterivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("pname", RenderbufferParameterName());
    cmd.extension = GL_OES_framebuffer_object();
    glGetRenderbufferParameterivOES = cmd;
    return cmd;
  }
  private static Command glMultiTexGendEXT;
  public static Command glMultiTexGendEXT() {
    if (glMultiTexGendEXT != null)
      return glMultiTexGendEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexGendEXT = cmd;
    return cmd;
  }
  private static Command glVertexArrayAttribFormat;
  public static Command glVertexArrayAttribFormat() {
    if (glVertexArrayAttribFormat != null)
      return glVertexArrayAttribFormat;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_direct_state_access();
    glVertexArrayAttribFormat = cmd;
    return cmd;
  }
  private static Command glFogCoordPointerListIBM;
  public static Command glFogCoordPointerListIBM() {
    if (glFogCoordPointerListIBM != null)
      return glFogCoordPointerListIBM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", FogPointerTypeIBM());
    cmd.extension = GL_IBM_vertex_array_lists();
    glFogCoordPointerListIBM = cmd;
    return cmd;
  }
  private static Command glVertexArrayAttribIFormat;
  public static Command glVertexArrayAttribIFormat() {
    if (glVertexArrayAttribIFormat != null)
      return glVertexArrayAttribIFormat;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribType());
    cmd.extension = GL_ARB_direct_state_access();
    glVertexArrayAttribIFormat = cmd;
    return cmd;
  }
  private static Command glGetPixelTransformParameterfvEXT;
  public static Command glGetPixelTransformParameterfvEXT() {
    if (glGetPixelTransformParameterfvEXT != null)
      return glGetPixelTransformParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_pixel_transform();
    glGetPixelTransformParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glMatrixLoad3x3fNV;
  public static Command glMatrixLoad3x3fNV() {
    if (glMatrixLoad3x3fNV != null)
      return glMatrixLoad3x3fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("matrixMode", _null_());
    cmd.extension = GL_NV_path_rendering();
    glMatrixLoad3x3fNV = cmd;
    return cmd;
  }
  private static Command glProgramLocalParameters4fvEXT;
  public static Command glProgramLocalParameters4fvEXT() {
    if (glProgramLocalParameters4fvEXT != null)
      return glProgramLocalParameters4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    glProgramLocalParameters4fvEXT = cmd;
    return cmd;
  }
  private static Command glDrawElementsBaseVertexOES;
  public static Command glDrawElementsBaseVertexOES() {
    if (glDrawElementsBaseVertexOES != null)
      return glDrawElementsBaseVertexOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsBaseVertexOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP1uiv;
  public static Command glMultiTexCoordP1uiv() {
    if (glMultiTexCoordP1uiv != null)
      return glMultiTexCoordP1uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP1uiv = cmd;
    return cmd;
  }
  private static Command glColorTableParameterfv;
  public static Command glColorTableParameterfv() {
    if (glColorTableParameterfv != null)
      return glColorTableParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("pname", ColorTableParameterPNameSGI());
    cmd.extension = GL_ARB_imaging();
    glColorTableParameterfv = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribPointerv;
  public static Command glGetVertexAttribPointerv() {
    if (glGetVertexAttribPointerv != null)
      return glGetVertexAttribPointerv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glGetVertexAttribPointerv = cmd;
    return cmd;
  }
  private static Command glCompressedTextureSubImage1D;
  public static Command glCompressedTextureSubImage1D() {
    if (glCompressedTextureSubImage1D != null)
      return glCompressedTextureSubImage1D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glCompressedTextureSubImage1D = cmd;
    return cmd;
  }
  private static Command glTexBumpParameterivATI;
  public static Command glTexBumpParameterivATI() {
    if (glTexBumpParameterivATI != null)
      return glTexBumpParameterivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_envmap_bumpmap();
    glTexBumpParameterivATI = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture2DOES;
  public static Command glFramebufferTexture2DOES() {
    if (glFramebufferTexture2DOES != null)
      return glFramebufferTexture2DOES;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_OES_framebuffer_object();
    glFramebufferTexture2DOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoordP1ui;
  public static Command glMultiTexCoordP1ui() {
    if (glMultiTexCoordP1ui != null)
      return glMultiTexCoordP1ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glMultiTexCoordP1ui = cmd;
    return cmd;
  }
  private static Command glIndexPointerEXT;
  public static Command glIndexPointerEXT() {
    if (glIndexPointerEXT != null)
      return glIndexPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", IndexPointerType());
    cmd.extension = GL_EXT_vertex_array();
    glIndexPointerEXT = cmd;
    return cmd;
  }
  private static Command glGetBufferSubData;
  public static Command glGetBufferSubData() {
    if (glGetBufferSubData != null)
      return glGetBufferSubData;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    glGetBufferSubData = cmd;
    return cmd;
  }
  private static Command glCompressedTextureSubImage2D;
  public static Command glCompressedTextureSubImage2D() {
    if (glCompressedTextureSubImage2D != null)
      return glCompressedTextureSubImage2D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_direct_state_access();
    glCompressedTextureSubImage2D = cmd;
    return cmd;
  }
  private static Command glDrawTransformFeedbackNV;
  public static Command glDrawTransformFeedbackNV() {
    if (glDrawTransformFeedbackNV != null)
      return glDrawTransformFeedbackNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_NV_transform_feedback2();
    glDrawTransformFeedbackNV = cmd;
    return cmd;
  }
  private static Command glGetFragmentLightivSGIX;
  public static Command glGetFragmentLightivSGIX() {
    if (glGetFragmentLightivSGIX != null)
      return glGetFragmentLightivSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_fragment_lighting();
    glGetFragmentLightivSGIX = cmd;
    return cmd;
  }
  private static Command glTexSubImage3DEXT;
  public static Command glTexSubImage3DEXT() {
    if (glTexSubImage3DEXT != null)
      return glTexSubImage3DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_texture3D();
    glTexSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glGetnPixelMapusv;
  public static Command glGetnPixelMapusv() {
    if (glGetnPixelMapusv != null)
      return glGetnPixelMapusv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glGetnPixelMapusv = cmd;
    return cmd;
  }
  private static Command glPathFogGenNV;
  public static Command glPathFogGenNV() {
    if (glPathFogGenNV != null)
      return glPathFogGenNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("genMode", PathGenMode());
    cmd.extension = GL_NV_path_rendering();
    glPathFogGenNV = cmd;
    return cmd;
  }
  private static Command glGetSubroutineIndex;
  public static Command glGetSubroutineIndex() {
    if (glGetSubroutineIndex != null)
      return glGetSubroutineIndex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetSubroutineIndex = cmd;
    return cmd;
  }
  private static Command glProgramStringARB;
  public static Command glProgramStringARB() {
    if (glProgramStringARB != null)
      return glProgramStringARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("format", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramStringARB = cmd;
    return cmd;
  }
  private static Command glIsList;
  public static Command glIsList() {
    if (glIsList != null)
      return glIsList;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    glIsList = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2ivARB;
  public static Command glMultiTexCoord2ivARB() {
    if (glMultiTexCoord2ivARB != null)
      return glMultiTexCoord2ivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2ivARB = cmd;
    return cmd;
  }
  private static Command glColorFragmentOp2ATI;
  public static Command glColorFragmentOp2ATI() {
    if (glColorFragmentOp2ATI != null)
      return glColorFragmentOp2ATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", FragmentOpATI());
    cmd.extension = GL_ATI_fragment_shader();
    glColorFragmentOp2ATI = cmd;
    return cmd;
  }
  private static Command glFramebufferSampleLocationsfvARB;
  public static Command glFramebufferSampleLocationsfvARB() {
    if (glFramebufferSampleLocationsfvARB != null)
      return glFramebufferSampleLocationsfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_ARB_sample_locations();
    glFramebufferSampleLocationsfvARB = cmd;
    return cmd;
  }
  private static Command glGetQueryBufferObjectui64v;
  public static Command glGetQueryBufferObjectui64v() {
    if (glGetQueryBufferObjectui64v != null)
      return glGetQueryBufferObjectui64v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetQueryBufferObjectui64v = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture2DMultisampleIMG;
  public static Command glFramebufferTexture2DMultisampleIMG() {
    if (glFramebufferTexture2DMultisampleIMG != null)
      return glFramebufferTexture2DMultisampleIMG;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_IMG_multisampled_render_to_texture();
    glFramebufferTexture2DMultisampleIMG = cmd;
    return cmd;
  }
  private static Command glGetString;
  public static Command glGetString() {
    if (glGetString != null)
      return glGetString;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("name", StringName());
    glGetString = cmd;
    return cmd;
  }
  private static Command glPathCoverDepthFuncNV;
  public static Command glPathCoverDepthFuncNV() {
    if (glPathCoverDepthFuncNV != null)
      return glPathCoverDepthFuncNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("func", DepthFunction());
    cmd.extension = GL_NV_path_rendering();
    glPathCoverDepthFuncNV = cmd;
    return cmd;
  }
  private static Command glGetSubroutineUniformLocation;
  public static Command glGetSubroutineUniformLocation() {
    if (glGetSubroutineUniformLocation != null)
      return glGetSubroutineUniformLocation;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetSubroutineUniformLocation = cmd;
    return cmd;
  }
  private static Command glTexGenf;
  public static Command glTexGenf() {
    if (glTexGenf != null)
      return glTexGenf;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glTexGenf = cmd;
    return cmd;
  }
  private static Command glTexGeni;
  public static Command glTexGeni() {
    if (glTexGeni != null)
      return glTexGeni;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glTexGeni = cmd;
    return cmd;
  }
  private static Command glIsFramebufferEXT;
  public static Command glIsFramebufferEXT() {
    if (glIsFramebufferEXT != null)
      return glIsFramebufferEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_framebuffer_object();
    glIsFramebufferEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2dvEXT;
  public static Command glProgramUniformMatrix2dvEXT() {
    if (glProgramUniformMatrix2dvEXT != null)
      return glProgramUniformMatrix2dvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix2dvEXT = cmd;
    return cmd;
  }
  private static Command glBlitNamedFramebuffer;
  public static Command glBlitNamedFramebuffer() {
    if (glBlitNamedFramebuffer != null)
      return glBlitNamedFramebuffer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", ClearBufferMask());
    cmd.addParam("filter", BlitFramebufferFilter());
    cmd.extension = GL_ARB_direct_state_access();
    glBlitNamedFramebuffer = cmd;
    return cmd;
  }
  private static Command glTexGend;
  public static Command glTexGend() {
    if (glTexGend != null)
      return glTexGend;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    glTexGend = cmd;
    return cmd;
  }
  private static Command glGetBooleani_v;
  public static Command glGetBooleani_v() {
    if (glGetBooleani_v != null)
      return glGetBooleani_v;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("data", Boolean());
    glGetBooleani_v = cmd;
    return cmd;
  }
  private static Command glGetQueryiv;
  public static Command glGetQueryiv() {
    if (glGetQueryiv != null)
      return glGetQueryiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.addParam("pname", QueryParameterName());
    glGetQueryiv = cmd;
    return cmd;
  }
  private static Command glGetVariantBooleanvEXT;
  public static Command glGetVariantBooleanvEXT() {
    if (glGetVariantBooleanvEXT != null)
      return glGetVariantBooleanvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.addParam("data", Boolean());
    cmd.extension = GL_EXT_vertex_shader();
    glGetVariantBooleanvEXT = cmd;
    return cmd;
  }
  private static Command glBindBufferBaseEXT;
  public static Command glBindBufferBaseEXT() {
    if (glBindBufferBaseEXT != null)
      return glBindBufferBaseEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_EXT_transform_feedback();
    glBindBufferBaseEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream4ivATI;
  public static Command glVertexStream4ivATI() {
    if (glVertexStream4ivATI != null)
      return glVertexStream4ivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4ivATI = cmd;
    return cmd;
  }
  private static Command glGetnHistogram;
  public static Command glGetnHistogram() {
    if (glGetnHistogram != null)
      return glGetnHistogram;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetnHistogram = cmd;
    return cmd;
  }
  private static Command glGetActiveAtomicCounterBufferiv;
  public static Command glGetActiveAtomicCounterBufferiv() {
    if (glGetActiveAtomicCounterBufferiv != null)
      return glGetActiveAtomicCounterBufferiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", AtomicCounterBufferPName());
    cmd.extension = GL_ARB_shader_atomic_counters();
    glGetActiveAtomicCounterBufferiv = cmd;
    return cmd;
  }
  private static Command glMapNamedBufferRangeEXT;
  public static Command glMapNamedBufferRangeEXT() {
    if (glMapNamedBufferRangeEXT != null)
      return glMapNamedBufferRangeEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", BufferAccessMask());
    cmd.extension = GL_EXT_direct_state_access();
    glMapNamedBufferRangeEXT = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameter4fvARB;
  public static Command glProgramEnvParameter4fvARB() {
    if (glProgramEnvParameter4fvARB != null)
      return glProgramEnvParameter4fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramEnvParameter4fvARB = cmd;
    return cmd;
  }
  private static Command glGetVideouivNV;
  public static Command glGetVideouivNV() {
    if (glGetVideouivNV != null)
      return glGetVideouivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_present_video();
    glGetVideouivNV = cmd;
    return cmd;
  }
  private static Command glPointParameterxv;
  public static Command glPointParameterxv() {
    if (glPointParameterxv != null)
      return glPointParameterxv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glPointParameterxv = cmd;
    return cmd;
  }
  private static Command glGetnPixelMapuivARB;
  public static Command glGetnPixelMapuivARB() {
    if (glGetnPixelMapuivARB != null)
      return glGetnPixelMapuivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    cmd.extension = GL_ARB_robustness();
    glGetnPixelMapuivARB = cmd;
    return cmd;
  }
  private static Command glIsTextureHandleResidentARB;
  public static Command glIsTextureHandleResidentARB() {
    if (glIsTextureHandleResidentARB != null)
      return glIsTextureHandleResidentARB;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_bindless_texture();
    glIsTextureHandleResidentARB = cmd;
    return cmd;
  }
  private static Command glNamedFramebufferDrawBuffer;
  public static Command glNamedFramebufferDrawBuffer() {
    if (glNamedFramebufferDrawBuffer != null)
      return glNamedFramebufferDrawBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("buf", ColorBuffer());
    cmd.extension = GL_ARB_direct_state_access();
    glNamedFramebufferDrawBuffer = cmd;
    return cmd;
  }
  private static Command glTextureStorage3DEXT;
  public static Command glTextureStorage3DEXT() {
    if (glTextureStorage3DEXT != null)
      return glTextureStorage3DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureStorage3DEXT = cmd;
    return cmd;
  }
  private static Command glGetObjectBufferfvATI;
  public static Command glGetObjectBufferfvATI() {
    if (glGetObjectBufferfvATI != null)
      return glGetObjectBufferfvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_array_object();
    glGetObjectBufferfvATI = cmd;
    return cmd;
  }
  private static Command glEvalMesh1;
  public static Command glEvalMesh1() {
    if (glEvalMesh1 != null)
      return glEvalMesh1;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MeshMode1());
    glEvalMesh1 = cmd;
    return cmd;
  }
  private static Command glEvalMesh2;
  public static Command glEvalMesh2() {
    if (glEvalMesh2 != null)
      return glEvalMesh2;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MeshMode2());
    glEvalMesh2 = cmd;
    return cmd;
  }
  private static Command glFramebufferParameteri;
  public static Command glFramebufferParameteri() {
    if (glFramebufferParameteri != null)
      return glFramebufferParameteri;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("pname", FramebufferParameterName());
    cmd.extension = GL_ARB_framebuffer_no_attachments();
    glFramebufferParameteri = cmd;
    return cmd;
  }
  private static Command glGetObjectParameterivARB;
  public static Command glGetObjectParameterivARB() {
    if (glGetObjectParameterivARB != null)
      return glGetObjectParameterivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_shader_objects();
    glGetObjectParameterivARB = cmd;
    return cmd;
  }
  private static Command glTexImage3DMultisampleCoverageNV;
  public static Command glTexImage3DMultisampleCoverageNV() {
    if (glTexImage3DMultisampleCoverageNV != null)
      return glTexImage3DMultisampleCoverageNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_NV_texture_multisample();
    glTexImage3DMultisampleCoverageNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x3fv;
  public static Command glProgramUniformMatrix2x3fv() {
    if (glProgramUniformMatrix2x3fv != null)
      return glProgramUniformMatrix2x3fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix2x3fv = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureFaceARB;
  public static Command glFramebufferTextureFaceARB() {
    if (glFramebufferTextureFaceARB != null)
      return glFramebufferTextureFaceARB;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("face", TextureTarget());
    cmd.extension = GL_ARB_geometry_shader4();
    glFramebufferTextureFaceARB = cmd;
    return cmd;
  }
  private static Command glTexStorageMem2DEXT;
  public static Command glTexStorageMem2DEXT() {
    if (glTexStorageMem2DEXT != null)
      return glTexStorageMem2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalFormat", _null_());
    cmd.extension = GL_EXT_memory_object();
    glTexStorageMem2DEXT = cmd;
    return cmd;
  }
  private static Command glGetnPixelMapuiv;
  public static Command glGetnPixelMapuiv() {
    if (glGetnPixelMapuiv != null)
      return glGetnPixelMapuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glGetnPixelMapuiv = cmd;
    return cmd;
  }
  private static Command glTexCoordP2ui;
  public static Command glTexCoordP2ui() {
    if (glTexCoordP2ui != null)
      return glTexCoordP2ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP2ui = cmd;
    return cmd;
  }
  private static Command glGetLightxvOES;
  public static Command glGetLightxvOES() {
    if (glGetLightxvOES != null)
      return glGetLightxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", LightName());
    cmd.addParam("pname", LightParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetLightxvOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4bvOES;
  public static Command glMultiTexCoord4bvOES() {
    if (glMultiTexCoord4bvOES != null)
      return glMultiTexCoord4bvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord4bvOES = cmd;
    return cmd;
  }
  private static Command glIndexPointer;
  public static Command glIndexPointer() {
    if (glIndexPointer != null)
      return glIndexPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", IndexPointerType());
    glIndexPointer = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameter4fvEXT;
  public static Command glNamedProgramLocalParameter4fvEXT() {
    if (glNamedProgramLocalParameter4fvEXT != null)
      return glNamedProgramLocalParameter4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameter4fvEXT = cmd;
    return cmd;
  }
  private static Command glClearTexSubImage;
  public static Command glClearTexSubImage() {
    if (glClearTexSubImage != null)
      return glClearTexSubImage;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_clear_texture();
    glClearTexSubImage = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureLayer;
  public static Command glFramebufferTextureLayer() {
    if (glFramebufferTextureLayer != null)
      return glFramebufferTextureLayer;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_ARB_framebuffer_object();
    glFramebufferTextureLayer = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribLdv;
  public static Command glGetVertexAttribLdv() {
    if (glGetVertexAttribLdv != null)
      return glGetVertexAttribLdv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexAttribEnum());
    cmd.extension = GL_ARB_vertex_attrib_64bit();
    glGetVertexAttribLdv = cmd;
    return cmd;
  }
  private static Command glVertexP4uiv;
  public static Command glVertexP4uiv() {
    if (glVertexP4uiv != null)
      return glVertexP4uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexP4uiv = cmd;
    return cmd;
  }
  private static Command glGetTexParameterxv;
  public static Command glGetTexParameterxv() {
    if (glGetTexParameterxv != null)
      return glGetTexParameterxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexParameterxv = cmd;
    return cmd;
  }
  private static Command glSampleCoveragexOES;
  public static Command glSampleCoveragexOES() {
    if (glSampleCoveragexOES != null)
      return glSampleCoveragexOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("invert", Boolean());
    cmd.extension = GL_OES_fixed_point();
    glSampleCoveragexOES = cmd;
    return cmd;
  }
  private static Command glGetSamplerParameterIiv;
  public static Command glGetSamplerParameterIiv() {
    if (glGetSamplerParameterIiv != null)
      return glGetSamplerParameterIiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glGetSamplerParameterIiv = cmd;
    return cmd;
  }
  private static Command glVertexAttribPointerNV;
  public static Command glVertexAttribPointerNV() {
    if (glVertexAttribPointerNV != null)
      return glVertexAttribPointerNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_program();
    glVertexAttribPointerNV = cmd;
    return cmd;
  }
  private static Command glVertexStream4sATI;
  public static Command glVertexStream4sATI() {
    if (glVertexStream4sATI != null)
      return glVertexStream4sATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4sATI = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix2x3dv;
  public static Command glProgramUniformMatrix2x3dv() {
    if (glProgramUniformMatrix2x3dv != null)
      return glProgramUniformMatrix2x3dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix2x3dv = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture2DEXT;
  public static Command glFramebufferTexture2DEXT() {
    if (glFramebufferTexture2DEXT != null)
      return glFramebufferTexture2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glFramebufferTexture2DEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3x2fvNV;
  public static Command glUniformMatrix3x2fvNV() {
    if (glUniformMatrix3x2fvNV != null)
      return glUniformMatrix3x2fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_NV_non_square_matrices();
    glUniformMatrix3x2fvNV = cmd;
    return cmd;
  }
  private static Command glPathGlyphRangeNV;
  public static Command glPathGlyphRangeNV() {
    if (glPathGlyphRangeNV != null)
      return glPathGlyphRangeNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("fontTarget", PathFontTarget());
    cmd.addParam("fontStyle", PathFontStyle());
    cmd.addParam("handleMissingGlyphs", PathHandleMissingGlyphs());
    cmd.extension = GL_NV_path_rendering();
    glPathGlyphRangeNV = cmd;
    return cmd;
  }
  private static Command glProgramBufferParametersIuivNV;
  public static Command glProgramBufferParametersIuivNV() {
    if (glProgramBufferParametersIuivNV != null)
      return glProgramBufferParametersIuivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_parameter_buffer_object();
    glProgramBufferParametersIuivNV = cmd;
    return cmd;
  }
  private static Command glBinormalPointerEXT;
  public static Command glBinormalPointerEXT() {
    if (glBinormalPointerEXT != null)
      return glBinormalPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_coordinate_frame();
    glBinormalPointerEXT = cmd;
    return cmd;
  }
  private static Command glStencilFillPathNV;
  public static Command glStencilFillPathNV() {
    if (glStencilFillPathNV != null)
      return glStencilFillPathNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("fillMode", PathFillMode());
    cmd.extension = GL_NV_path_rendering();
    glStencilFillPathNV = cmd;
    return cmd;
  }
  private static Command glGetError;
  public static Command glGetError() {
    if (glGetError != null)
      return glGetError;
    Command cmd = new Command(0);
    cmd.returnGroup = ErrorCode();
    glGetError = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseVertexOES;
  public static Command glDrawElementsInstancedBaseVertexOES() {
    if (glDrawElementsInstancedBaseVertexOES != null)
      return glDrawElementsInstancedBaseVertexOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsInstancedBaseVertexOES = cmd;
    return cmd;
  }
  private static Command glVertexStream3fATI;
  public static Command glVertexStream3fATI() {
    if (glVertexStream3fATI != null)
      return glVertexStream3fATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3fATI = cmd;
    return cmd;
  }
  private static Command glCombinerParameteriNV;
  public static Command glCombinerParameteriNV() {
    if (glCombinerParameteriNV != null)
      return glCombinerParameteriNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glCombinerParameteriNV = cmd;
    return cmd;
  }
  private static Command glGetGraphicsResetStatus;
  public static Command glGetGraphicsResetStatus() {
    if (glGetGraphicsResetStatus != null)
      return glGetGraphicsResetStatus;
    Command cmd = new Command(0);
    cmd.returnGroup = GraphicsResetStatus();
    cmd.extension = GL_KHR_robustness();
    glGetGraphicsResetStatus = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameterI4uivEXT;
  public static Command glNamedProgramLocalParameterI4uivEXT() {
    if (glNamedProgramLocalParameterI4uivEXT != null)
      return glNamedProgramLocalParameterI4uivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameterI4uivEXT = cmd;
    return cmd;
  }
  private static Command glPointParameterivNV;
  public static Command glPointParameterivNV() {
    if (glPointParameterivNV != null)
      return glPointParameterivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_point_sprite();
    glPointParameterivNV = cmd;
    return cmd;
  }
  private static Command glNormalPointerEXT;
  public static Command glNormalPointerEXT() {
    if (glNormalPointerEXT != null)
      return glNormalPointerEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    cmd.extension = GL_EXT_vertex_array();
    glNormalPointerEXT = cmd;
    return cmd;
  }
  private static Command glLogicOp;
  public static Command glLogicOp() {
    if (glLogicOp != null)
      return glLogicOp;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("opcode", LogicOp());
    glLogicOp = cmd;
    return cmd;
  }
  private static Command glMatrixScaledEXT;
  public static Command glMatrixScaledEXT() {
    if (glMatrixScaledEXT != null)
      return glMatrixScaledEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixScaledEXT = cmd;
    return cmd;
  }
  private static Command glGetPathColorGenivNV;
  public static Command glGetPathColorGenivNV() {
    if (glGetPathColorGenivNV != null)
      return glGetPathColorGenivNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("color", PathColor());
    cmd.addParam("pname", PathGenMode());
    cmd.extension = GL_NV_path_rendering();
    glGetPathColorGenivNV = cmd;
    return cmd;
  }
  private static Command glUnmapNamedBuffer;
  public static Command glUnmapNamedBuffer() {
    if (glUnmapNamedBuffer != null)
      return glUnmapNamedBuffer;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_direct_state_access();
    glUnmapNamedBuffer = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstancedEXT;
  public static Command glDrawArraysInstancedEXT() {
    if (glDrawArraysInstancedEXT != null)
      return glDrawArraysInstancedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_EXT_draw_instanced();
    glDrawArraysInstancedEXT = cmd;
    return cmd;
  }
  private static Command glVertexStream2svATI;
  public static Command glVertexStream2svATI() {
    if (glVertexStream2svATI != null)
      return glVertexStream2svATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2svATI = cmd;
    return cmd;
  }
  private static Command glGetTextureImage;
  public static Command glGetTextureImage() {
    if (glGetTextureImage != null)
      return glGetTextureImage;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureImage = cmd;
    return cmd;
  }
  private static Command glPixelTransformParameterfvEXT;
  public static Command glPixelTransformParameterfvEXT() {
    if (glPixelTransformParameterfvEXT != null)
      return glPixelTransformParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_pixel_transform();
    glPixelTransformParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glIsBufferResidentNV;
  public static Command glIsBufferResidentNV() {
    if (glIsBufferResidentNV != null)
      return glIsBufferResidentNV;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_shader_buffer_load();
    glIsBufferResidentNV = cmd;
    return cmd;
  }
  private static Command glClientWaitSyncAPPLE;
  public static Command glClientWaitSyncAPPLE() {
    if (glClientWaitSyncAPPLE != null)
      return glClientWaitSyncAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = SyncStatus();
    cmd.addParam("flags", SyncObjectMask());
    cmd.extension = GL_APPLE_sync();
    glClientWaitSyncAPPLE = cmd;
    return cmd;
  }
  private static Command glVertexStream2dATI;
  public static Command glVertexStream2dATI() {
    if (glVertexStream2dATI != null)
      return glVertexStream2dATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream2dATI = cmd;
    return cmd;
  }
  private static Command glCopyImageSubDataNV;
  public static Command glCopyImageSubDataNV() {
    if (glCopyImageSubDataNV != null)
      return glCopyImageSubDataNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("srcTarget", CopyBufferSubDataTarget());
    cmd.addParam("dstTarget", CopyBufferSubDataTarget());
    glCopyImageSubDataNV = cmd;
    return cmd;
  }
  private static Command glColorP3uiv;
  public static Command glColorP3uiv() {
    if (glColorP3uiv != null)
      return glColorP3uiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glColorP3uiv = cmd;
    return cmd;
  }
  private static Command glClientWaitSync;
  public static Command glClientWaitSync() {
    if (glClientWaitSync != null)
      return glClientWaitSync;
    Command cmd = new Command(1);
    cmd.returnGroup = SyncStatus();
    cmd.addParam("flags", SyncObjectMask());
    cmd.extension = GL_ARB_sync();
    glClientWaitSync = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayIntegeri_vEXT;
  public static Command glGetVertexArrayIntegeri_vEXT() {
    if (glGetVertexArrayIntegeri_vEXT != null)
      return glGetVertexArrayIntegeri_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_EXT_direct_state_access();
    glGetVertexArrayIntegeri_vEXT = cmd;
    return cmd;
  }
  private static Command glTexParameterIivEXT;
  public static Command glTexParameterIivEXT() {
    if (glTexParameterIivEXT != null)
      return glTexParameterIivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_texture_border_clamp();
    glTexParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage1DARB;
  public static Command glCompressedTexImage1DARB() {
    if (glCompressedTexImage1DARB != null)
      return glCompressedTexImage1DARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_compression();
    glCompressedTexImage1DARB = cmd;
    return cmd;
  }
  private static Command glPatchParameteriEXT;
  public static Command glPatchParameteriEXT() {
    if (glPatchParameteriEXT != null)
      return glPatchParameteriEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PatchParameterName());
    cmd.extension = GL_EXT_tessellation_shader();
    glPatchParameteriEXT = cmd;
    return cmd;
  }
  private static Command glTexPageCommitmentEXT;
  public static Command glTexPageCommitmentEXT() {
    if (glTexPageCommitmentEXT != null)
      return glTexPageCommitmentEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("commit", Boolean());
    cmd.extension = GL_EXT_sparse_texture();
    glTexPageCommitmentEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexImage2DEXT;
  public static Command glMultiTexImage2DEXT() {
    if (glMultiTexImage2DEXT != null)
      return glMultiTexImage2DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexImage2DEXT = cmd;
    return cmd;
  }
  private static Command glGetRenderbufferParameteriv;
  public static Command glGetRenderbufferParameteriv() {
    if (glGetRenderbufferParameteriv != null)
      return glGetRenderbufferParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("pname", RenderbufferParameterName());
    cmd.extension = GL_ARB_framebuffer_object();
    glGetRenderbufferParameteriv = cmd;
    return cmd;
  }
  private static Command glPixelMapusv;
  public static Command glPixelMapusv() {
    if (glPixelMapusv != null)
      return glPixelMapusv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("map", PixelMap());
    glPixelMapusv = cmd;
    return cmd;
  }
  private static Command glEnableVertexAttribAPPLE;
  public static Command glEnableVertexAttribAPPLE() {
    if (glEnableVertexAttribAPPLE != null)
      return glEnableVertexAttribAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_vertex_program_evaluators();
    glEnableVertexAttribAPPLE = cmd;
    return cmd;
  }
  private static Command glGetNamedProgramLocalParameterIuivEXT;
  public static Command glGetNamedProgramLocalParameterIuivEXT() {
    if (glGetNamedProgramLocalParameterIuivEXT != null)
      return glGetNamedProgramLocalParameterIuivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedProgramLocalParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glPatchParameterfv;
  public static Command glPatchParameterfv() {
    if (glPatchParameterfv != null)
      return glPatchParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PatchParameterName());
    cmd.extension = GL_ARB_tessellation_shader();
    glPatchParameterfv = cmd;
    return cmd;
  }
  private static Command glGetTexParameterPointervAPPLE;
  public static Command glGetTexParameterPointervAPPLE() {
    if (glGetTexParameterPointervAPPLE != null)
      return glGetTexParameterPointervAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_APPLE_texture_range();
    glGetTexParameterPointervAPPLE = cmd;
    return cmd;
  }
  private static Command glNormalFormatNV;
  public static Command glNormalFormatNV() {
    if (glNormalFormatNV != null)
      return glNormalFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glNormalFormatNV = cmd;
    return cmd;
  }
  private static Command glMemoryBarrierByRegion;
  public static Command glMemoryBarrierByRegion() {
    if (glMemoryBarrierByRegion != null)
      return glMemoryBarrierByRegion;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("barriers", MemoryBarrierMask());
    cmd.extension = GL_ARB_ES3_1_compatibility();
    glMemoryBarrierByRegion = cmd;
    return cmd;
  }
  private static Command glGetSeparableFilter;
  public static Command glGetSeparableFilter() {
    if (glGetSeparableFilter != null)
      return glGetSeparableFilter;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", SeparableTargetEXT());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glGetSeparableFilter = cmd;
    return cmd;
  }
  private static Command glNormalStream3bvATI;
  public static Command glNormalStream3bvATI() {
    if (glNormalStream3bvATI != null)
      return glNormalStream3bvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3bvATI = cmd;
    return cmd;
  }
  private static Command glGetNamedProgramivEXT;
  public static Command glGetNamedProgramivEXT() {
    if (glGetNamedProgramivEXT != null)
      return glGetNamedProgramivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", ProgramPropertyARB());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedProgramivEXT = cmd;
    return cmd;
  }
  private static Command glVertexP4ui;
  public static Command glVertexP4ui() {
    if (glVertexP4ui != null)
      return glVertexP4ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexP4ui = cmd;
    return cmd;
  }
  private static Command glGetGraphicsResetStatusARB;
  public static Command glGetGraphicsResetStatusARB() {
    if (glGetGraphicsResetStatusARB != null)
      return glGetGraphicsResetStatusARB;
    Command cmd = new Command(0);
    cmd.returnGroup = GraphicsResetStatus();
    cmd.extension = GL_ARB_robustness();
    glGetGraphicsResetStatusARB = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterfvEXT;
  public static Command glGetTextureParameterfvEXT() {
    if (glGetTextureParameterfvEXT != null)
      return glGetTextureParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glTexParameterIuivOES;
  public static Command glTexParameterIuivOES() {
    if (glTexParameterIuivOES != null)
      return glTexParameterIuivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_OES_texture_border_clamp();
    glTexParameterIuivOES = cmd;
    return cmd;
  }
  private static Command glGetFramebufferParameteriv;
  public static Command glGetFramebufferParameteriv() {
    if (glGetFramebufferParameteriv != null)
      return glGetFramebufferParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_ARB_framebuffer_no_attachments();
    glGetFramebufferParameteriv = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1xvOES;
  public static Command glMultiTexCoord1xvOES() {
    if (glMultiTexCoord1xvOES != null)
      return glMultiTexCoord1xvOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord1xvOES = cmd;
    return cmd;
  }
  private static Command glVertexBlendEnvfATI;
  public static Command glVertexBlendEnvfATI() {
    if (glVertexBlendEnvfATI != null)
      return glVertexBlendEnvfATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexBlendEnvfATI = cmd;
    return cmd;
  }
  private static Command glProgramParameter4dNV;
  public static Command glProgramParameter4dNV() {
    if (glProgramParameter4dNV != null)
      return glProgramParameter4dNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glProgramParameter4dNV = cmd;
    return cmd;
  }
  private static Command glObjectLabelKHR;
  public static Command glObjectLabelKHR() {
    if (glObjectLabelKHR != null)
      return glObjectLabelKHR;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("identifier", ObjectIdentifier());
    cmd.extension = GL_KHR_debug();
    glObjectLabelKHR = cmd;
    return cmd;
  }
  private static Command glGetMultisamplefvNV;
  public static Command glGetMultisamplefvNV() {
    if (glGetMultisamplefvNV != null)
      return glGetMultisamplefvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_explicit_multisample();
    glGetMultisamplefvNV = cmd;
    return cmd;
  }
  private static Command glEndQueryEXT;
  public static Command glEndQueryEXT() {
    if (glEndQueryEXT != null)
      return glEndQueryEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", QueryTarget());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glEndQueryEXT = cmd;
    return cmd;
  }
  private static Command glGetQueryBufferObjectuiv;
  public static Command glGetQueryBufferObjectuiv() {
    if (glGetQueryBufferObjectuiv != null)
      return glGetQueryBufferObjectuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetQueryBufferObjectuiv = cmd;
    return cmd;
  }
  private static Command glTexBufferRange;
  public static Command glTexBufferRange() {
    if (glTexBufferRange != null)
      return glTexBufferRange;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_ARB_texture_buffer_range();
    glTexBufferRange = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4x3fvEXT;
  public static Command glProgramUniformMatrix4x3fvEXT() {
    if (glProgramUniformMatrix4x3fvEXT != null)
      return glProgramUniformMatrix4x3fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix4x3fvEXT = cmd;
    return cmd;
  }
  private static Command glSpriteParameteriSGIX;
  public static Command glSpriteParameteriSGIX() {
    if (glSpriteParameteriSGIX != null)
      return glSpriteParameteriSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_sprite();
    glSpriteParameteriSGIX = cmd;
    return cmd;
  }
  private static Command glDrawArraysInstancedBaseInstance;
  public static Command glDrawArraysInstancedBaseInstance() {
    if (glDrawArraysInstancedBaseInstance != null)
      return glDrawArraysInstancedBaseInstance;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glDrawArraysInstancedBaseInstance = cmd;
    return cmd;
  }
  private static Command glTexParameterIivOES;
  public static Command glTexParameterIivOES() {
    if (glTexParameterIivOES != null)
      return glTexParameterIivOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_OES_texture_border_clamp();
    glTexParameterIivOES = cmd;
    return cmd;
  }
  private static Command glGetRenderbufferParameterivEXT;
  public static Command glGetRenderbufferParameterivEXT() {
    if (glGetRenderbufferParameterivEXT != null)
      return glGetRenderbufferParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("pname", RenderbufferParameterName());
    cmd.extension = GL_EXT_framebuffer_object();
    glGetRenderbufferParameterivEXT = cmd;
    return cmd;
  }
  private static Command glGetnHistogramARB;
  public static Command glGetnHistogramARB() {
    if (glGetnHistogramARB != null)
      return glGetnHistogramARB;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_robustness();
    glGetnHistogramARB = cmd;
    return cmd;
  }
  private static Command glIsPointInStrokePathNV;
  public static Command glIsPointInStrokePathNV() {
    if (glIsPointInStrokePathNV != null)
      return glIsPointInStrokePathNV;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_NV_path_rendering();
    glIsPointInStrokePathNV = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparateOES;
  public static Command glBlendFuncSeparateOES() {
    if (glBlendFuncSeparateOES != null)
      return glBlendFuncSeparateOES;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("srcRGB", BlendingFactor());
    cmd.addParam("dstRGB", BlendingFactor());
    cmd.addParam("srcAlpha", BlendingFactor());
    cmd.addParam("dstAlpha", BlendingFactor());
    cmd.extension = GL_OES_blend_func_separate();
    glBlendFuncSeparateOES = cmd;
    return cmd;
  }
  private static Command glReadBufferIndexedEXT;
  public static Command glReadBufferIndexedEXT() {
    if (glReadBufferIndexedEXT != null)
      return glReadBufferIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("src", ReadBufferMode());
    cmd.extension = GL_EXT_multiview_draw_buffers();
    glReadBufferIndexedEXT = cmd;
    return cmd;
  }
  private static Command glGetFramebufferParameterivEXT;
  public static Command glGetFramebufferParameterivEXT() {
    if (glGetFramebufferParameterivEXT != null)
      return glGetFramebufferParameterivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetFramebufferParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetFramebufferParameterivEXT = cmd;
    return cmd;
  }
  private static Command glProgramEnvParametersI4ivNV;
  public static Command glProgramEnvParametersI4ivNV() {
    if (glProgramEnvParametersI4ivNV != null)
      return glProgramEnvParametersI4ivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramEnvParametersI4ivNV = cmd;
    return cmd;
  }
  private static Command glGetNamedFramebufferAttachmentParameteriv;
  public static Command glGetNamedFramebufferAttachmentParameteriv() {
    if (glGetNamedFramebufferAttachmentParameteriv != null)
      return glGetNamedFramebufferAttachmentParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetNamedFramebufferAttachmentParameteriv = cmd;
    return cmd;
  }
  private static Command glMatrixLoaddEXT;
  public static Command glMatrixLoaddEXT() {
    if (glMatrixLoaddEXT != null)
      return glMatrixLoaddEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixLoaddEXT = cmd;
    return cmd;
  }
  private static Command glGetOcclusionQueryuivNV;
  public static Command glGetOcclusionQueryuivNV() {
    if (glGetOcclusionQueryuivNV != null)
      return glGetOcclusionQueryuivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_occlusion_query();
    glGetOcclusionQueryuivNV = cmd;
    return cmd;
  }
  private static Command glGetTextureSubImage;
  public static Command glGetTextureSubImage() {
    if (glGetTextureSubImage != null)
      return glGetTextureSubImage;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetTextureSubImage = cmd;
    return cmd;
  }
  private static Command glVertexArrayNormalOffsetEXT;
  public static Command glVertexArrayNormalOffsetEXT() {
    if (glVertexArrayNormalOffsetEXT != null)
      return glVertexArrayNormalOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayNormalOffsetEXT = cmd;
    return cmd;
  }
  private static Command glGetTransformFeedbackVaryingEXT;
  public static Command glGetTransformFeedbackVaryingEXT() {
    if (glGetTransformFeedbackVaryingEXT != null)
      return glGetTransformFeedbackVaryingEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_EXT_transform_feedback();
    glGetTransformFeedbackVaryingEXT = cmd;
    return cmd;
  }
  private static Command glProvokingVertexEXT;
  public static Command glProvokingVertexEXT() {
    if (glProvokingVertexEXT != null)
      return glProvokingVertexEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", VertexProvokingMode());
    cmd.extension = GL_EXT_provoking_vertex();
    glProvokingVertexEXT = cmd;
    return cmd;
  }
  private static Command glTrackMatrixNV;
  public static Command glTrackMatrixNV() {
    if (glTrackMatrixNV != null)
      return glTrackMatrixNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("matrix", _null_());
    cmd.addParam("transform", _null_());
    cmd.extension = GL_NV_vertex_program();
    glTrackMatrixNV = cmd;
    return cmd;
  }
  private static Command glConvolutionParameteriv;
  public static Command glConvolutionParameteriv() {
    if (glConvolutionParameteriv != null)
      return glConvolutionParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_ARB_imaging();
    glConvolutionParameteriv = cmd;
    return cmd;
  }
  private static Command glResetHistogramEXT;
  public static Command glResetHistogramEXT() {
    if (glResetHistogramEXT != null)
      return glResetHistogramEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", HistogramTargetEXT());
    cmd.extension = GL_EXT_histogram();
    glResetHistogramEXT = cmd;
    return cmd;
  }
  private static Command glGetCombinerInputParameterfvNV;
  public static Command glGetCombinerInputParameterfvNV() {
    if (glGetCombinerInputParameterfvNV != null)
      return glGetCombinerInputParameterfvNV;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("portion", _null_());
    cmd.addParam("variable", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glGetCombinerInputParameterfvNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3xOES;
  public static Command glMultiTexCoord3xOES() {
    if (glMultiTexCoord3xOES != null)
      return glMultiTexCoord3xOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_fixed_point();
    glMultiTexCoord3xOES = cmd;
    return cmd;
  }
  private static Command glSpriteParameterfSGIX;
  public static Command glSpriteParameterfSGIX() {
    if (glSpriteParameterfSGIX != null)
      return glSpriteParameterfSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_sprite();
    glSpriteParameterfSGIX = cmd;
    return cmd;
  }
  private static Command glGetVertexArrayiv;
  public static Command glGetVertexArrayiv() {
    if (glGetVertexArrayiv != null)
      return glGetVertexArrayiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexArrayPName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetVertexArrayiv = cmd;
    return cmd;
  }
  private static Command glVertexFormatNV;
  public static Command glVertexFormatNV() {
    if (glVertexFormatNV != null)
      return glVertexFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_NV_vertex_buffer_unified_memory();
    glVertexFormatNV = cmd;
    return cmd;
  }
  private static Command glGetProgramResourceIndex;
  public static Command glGetProgramResourceIndex() {
    if (glGetProgramResourceIndex != null)
      return glGetProgramResourceIndex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("programInterface", ProgramInterface());
    cmd.extension = GL_ARB_program_interface_query();
    glGetProgramResourceIndex = cmd;
    return cmd;
  }
  private static Command glProgramEnvParametersI4uivNV;
  public static Command glProgramEnvParametersI4uivNV() {
    if (glProgramEnvParametersI4uivNV != null)
      return glProgramEnvParametersI4uivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glProgramEnvParametersI4uivNV = cmd;
    return cmd;
  }
  private static Command glProgramParameter4fNV;
  public static Command glProgramParameter4fNV() {
    if (glProgramParameter4fNV != null)
      return glProgramParameter4fNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glProgramParameter4fNV = cmd;
    return cmd;
  }
  private static Command glMultiTexParameterfvEXT;
  public static Command glMultiTexParameterfvEXT() {
    if (glMultiTexParameterfvEXT != null)
      return glMultiTexParameterfvEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3bOES;
  public static Command glMultiTexCoord3bOES() {
    if (glMultiTexCoord3bOES != null)
      return glMultiTexCoord3bOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    cmd.extension = GL_OES_byte_coordinates();
    glMultiTexCoord3bOES = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterIuiv;
  public static Command glGetTextureParameterIuiv() {
    if (glGetTextureParameterIuiv != null)
      return glGetTextureParameterIuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureParameterIuiv = cmd;
    return cmd;
  }
  private static Command glQueryMatrixxOES;
  public static Command glQueryMatrixxOES() {
    if (glQueryMatrixxOES != null)
      return glQueryMatrixxOES;
    Command cmd = new Command(0);
    cmd.returnGroup = _null_();
    glQueryMatrixxOES = cmd;
    return cmd;
  }
  private static Command glVertexP3ui;
  public static Command glVertexP3ui() {
    if (glVertexP3ui != null)
      return glVertexP3ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexP3ui = cmd;
    return cmd;
  }
  private static Command glGetTexParameteriv;
  public static Command glGetTexParameteriv() {
    if (glGetTexParameteriv != null)
      return glGetTexParameteriv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexParameteriv = cmd;
    return cmd;
  }
  private static Command glGetPathMetricRangeNV;
  public static Command glGetPathMetricRangeNV() {
    if (glGetPathMetricRangeNV != null)
      return glGetPathMetricRangeNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("metricQueryMask", PathMetricMask());
    cmd.extension = GL_NV_path_rendering();
    glGetPathMetricRangeNV = cmd;
    return cmd;
  }
  private static Command glMultiTexBufferEXT;
  public static Command glMultiTexBufferEXT() {
    if (glMultiTexBufferEXT != null)
      return glMultiTexBufferEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexBufferEXT = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3hNV;
  public static Command glMultiTexCoord3hNV() {
    if (glMultiTexCoord3hNV != null)
      return glMultiTexCoord3hNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord3hNV = cmd;
    return cmd;
  }
  private static Command glAlphaToCoverageDitherControlNV;
  public static Command glAlphaToCoverageDitherControlNV() {
    if (glAlphaToCoverageDitherControlNV != null)
      return glAlphaToCoverageDitherControlNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_NV_alpha_to_coverage_dither_control();
    glAlphaToCoverageDitherControlNV = cmd;
    return cmd;
  }
  private static Command glVertexAttribIFormat;
  public static Command glVertexAttribIFormat() {
    if (glVertexAttribIFormat != null)
      return glVertexAttribIFormat;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_ARB_vertex_attrib_binding();
    glVertexAttribIFormat = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1fvARB;
  public static Command glMultiTexCoord1fvARB() {
    if (glMultiTexCoord1fvARB != null)
      return glMultiTexCoord1fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord1fvARB = cmd;
    return cmd;
  }
  private static Command glFragmentMaterialiSGIX;
  public static Command glFragmentMaterialiSGIX() {
    if (glFragmentMaterialiSGIX != null)
      return glFragmentMaterialiSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentMaterialiSGIX = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribPointervARB;
  public static Command glGetVertexAttribPointervARB() {
    if (glGetVertexAttribPointervARB != null)
      return glGetVertexAttribPointervARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_vertex_program();
    glGetVertexAttribPointervARB = cmd;
    return cmd;
  }
  private static Command glMapTexture2DINTEL;
  public static Command glMapTexture2DINTEL() {
    if (glMapTexture2DINTEL != null)
      return glMapTexture2DINTEL;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("access", _null_());
    cmd.addParam("layout", _null_());
    cmd.extension = GL_INTEL_map_texture();
    glMapTexture2DINTEL = cmd;
    return cmd;
  }
  private static Command glIsEnabled;
  public static Command glIsEnabled() {
    if (glIsEnabled != null)
      return glIsEnabled;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("cap", EnableCap());
    glIsEnabled = cmd;
    return cmd;
  }
  private static Command glVertexAttribP2uiv;
  public static Command glVertexAttribP2uiv() {
    if (glVertexAttribP2uiv != null)
      return glVertexAttribP2uiv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP2uiv = cmd;
    return cmd;
  }
  private static Command glClientActiveVertexStreamATI;
  public static Command glClientActiveVertexStreamATI() {
    if (glClientActiveVertexStreamATI != null)
      return glClientActiveVertexStreamATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glClientActiveVertexStreamATI = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedNV;
  public static Command glDrawElementsInstancedNV() {
    if (glDrawElementsInstancedNV != null)
      return glDrawElementsInstancedNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", PrimitiveType());
    glDrawElementsInstancedNV = cmd;
    return cmd;
  }
  private static Command glCopyTextureImage2DEXT;
  public static Command glCopyTextureImage2DEXT() {
    if (glCopyTextureImage2DEXT != null)
      return glCopyTextureImage2DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyTextureImage2DEXT = cmd;
    return cmd;
  }
  private static Command glIsQueryEXT;
  public static Command glIsQueryEXT() {
    if (glIsQueryEXT != null)
      return glIsQueryEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_disjoint_timer_query();
    glIsQueryEXT = cmd;
    return cmd;
  }
  private static Command glStateCaptureNV;
  public static Command glStateCaptureNV() {
    if (glStateCaptureNV != null)
      return glStateCaptureNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_NV_command_list();
    glStateCaptureNV = cmd;
    return cmd;
  }
  private static Command glGetQueryIndexediv;
  public static Command glGetQueryIndexediv() {
    if (glGetQueryIndexediv != null)
      return glGetQueryIndexediv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", QueryParameterName());
    cmd.extension = GL_ARB_transform_feedback3();
    glGetQueryIndexediv = cmd;
    return cmd;
  }
  private static Command glGetActiveSubroutineUniformName;
  public static Command glGetActiveSubroutineUniformName() {
    if (glGetActiveSubroutineUniformName != null)
      return glGetActiveSubroutineUniformName;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetActiveSubroutineUniformName = cmd;
    return cmd;
  }
  private static Command glTexBumpParameterfvATI;
  public static Command glTexBumpParameterfvATI() {
    if (glTexBumpParameterfvATI != null)
      return glTexBumpParameterfvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_envmap_bumpmap();
    glTexBumpParameterfvATI = cmd;
    return cmd;
  }
  private static Command glGetObjectParameterfvARB;
  public static Command glGetObjectParameterfvARB() {
    if (glGetObjectParameterfvARB != null)
      return glGetObjectParameterfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_shader_objects();
    glGetObjectParameterfvARB = cmd;
    return cmd;
  }
  private static Command glGetQueryBufferObjecti64v;
  public static Command glGetQueryBufferObjecti64v() {
    if (glGetQueryBufferObjecti64v != null)
      return glGetQueryBufferObjecti64v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glGetQueryBufferObjecti64v = cmd;
    return cmd;
  }
  private static Command glClipPlanexOES;
  public static Command glClipPlanexOES() {
    if (glClipPlanexOES != null)
      return glClipPlanexOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    cmd.extension = GL_OES_fixed_point();
    glClipPlanexOES = cmd;
    return cmd;
  }
  private static Command glGetTexParameterfv;
  public static Command glGetTexParameterfv() {
    if (glGetTexParameterfv != null)
      return glGetTexParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    glGetTexParameterfv = cmd;
    return cmd;
  }
  private static Command glStencilThenCoverStrokePathInstancedNV;
  public static Command glStencilThenCoverStrokePathInstancedNV() {
    if (glStencilThenCoverStrokePathInstancedNV != null)
      return glStencilThenCoverStrokePathInstancedNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("pathNameType", _null_());
    cmd.addParam("coverMode", _null_());
    cmd.addParam("transformType", _null_());
    cmd.extension = GL_NV_path_rendering();
    glStencilThenCoverStrokePathInstancedNV = cmd;
    return cmd;
  }
  private static Command glPointParameterxOES;
  public static Command glPointParameterxOES() {
    if (glPointParameterxOES != null)
      return glPointParameterxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_OES_fixed_point();
    glPointParameterxOES = cmd;
    return cmd;
  }
  private static Command glTextureParameteri;
  public static Command glTextureParameteri() {
    if (glTextureParameteri != null)
      return glTextureParameteri;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureParameteri = cmd;
    return cmd;
  }
  private static Command glDisablei;
  public static Command glDisablei() {
    if (glDisablei != null)
      return glDisablei;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    glDisablei = cmd;
    return cmd;
  }
  private static Command glTextureParameterf;
  public static Command glTextureParameterf() {
    if (glTextureParameterf != null)
      return glTextureParameterf;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureParameterf = cmd;
    return cmd;
  }
  private static Command glColorTable;
  public static Command glColorTable() {
    if (glColorTable != null)
      return glColorTable;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glColorTable = cmd;
    return cmd;
  }
  private static Command glBindBuffersBase;
  public static Command glBindBuffersBase() {
    if (glBindBuffersBase != null)
      return glBindBuffersBase;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    glBindBuffersBase = cmd;
    return cmd;
  }
  private static Command glExtGetBufferPointervQCOM;
  public static Command glExtGetBufferPointervQCOM() {
    if (glExtGetBufferPointervQCOM != null)
      return glExtGetBufferPointervQCOM;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_QCOM_extended_get();
    glExtGetBufferPointervQCOM = cmd;
    return cmd;
  }
  private static Command glIsEnablediOES;
  public static Command glIsEnablediOES() {
    if (glIsEnablediOES != null)
      return glIsEnablediOES;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_OES_draw_buffers_indexed();
    glIsEnablediOES = cmd;
    return cmd;
  }
  private static Command glGetCompressedMultiTexImageEXT;
  public static Command glGetCompressedMultiTexImageEXT() {
    if (glGetCompressedMultiTexImageEXT != null)
      return glGetCompressedMultiTexImageEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glGetCompressedMultiTexImageEXT = cmd;
    return cmd;
  }
  private static Command glGetnConvolutionFilter;
  public static Command glGetnConvolutionFilter() {
    if (glGetnConvolutionFilter != null)
      return glGetnConvolutionFilter;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetnConvolutionFilter = cmd;
    return cmd;
  }
  private static Command glTextureStorage2DMultisample;
  public static Command glTextureStorage2DMultisample() {
    if (glTextureStorage2DMultisample != null)
      return glTextureStorage2DMultisample;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureStorage2DMultisample = cmd;
    return cmd;
  }
  private static Command glMapNamedBuffer;
  public static Command glMapNamedBuffer() {
    if (glMapNamedBuffer != null)
      return glMapNamedBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("access", BufferAccessARB());
    cmd.extension = GL_ARB_direct_state_access();
    glMapNamedBuffer = cmd;
    return cmd;
  }
  private static Command glGetFloati_vEXT;
  public static Command glGetFloati_vEXT() {
    if (glGetFloati_vEXT != null)
      return glGetFloati_vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TypeEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glGetFloati_vEXT = cmd;
    return cmd;
  }
  private static Command glPushAttrib;
  public static Command glPushAttrib() {
    if (glPushAttrib != null)
      return glPushAttrib;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mask", AttribMask());
    glPushAttrib = cmd;
    return cmd;
  }
  private static Command glGetObjectLabel;
  public static Command glGetObjectLabel() {
    if (glGetObjectLabel != null)
      return glGetObjectLabel;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("identifier", _null_());
    cmd.extension = GL_KHR_debug();
    glGetObjectLabel = cmd;
    return cmd;
  }
  private static Command glMultiDrawArraysIndirectEXT;
  public static Command glMultiDrawArraysIndirectEXT() {
    if (glMultiDrawArraysIndirectEXT != null)
      return glMultiDrawArraysIndirectEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    glMultiDrawArraysIndirectEXT = cmd;
    return cmd;
  }
  private static Command glDrawElementArrayATI;
  public static Command glDrawElementArrayATI() {
    if (glDrawElementArrayATI != null)
      return glDrawElementArrayATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_ATI_element_array();
    glDrawElementArrayATI = cmd;
    return cmd;
  }
  private static Command glMemoryBarrier;
  public static Command glMemoryBarrier() {
    if (glMemoryBarrier != null)
      return glMemoryBarrier;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("barriers", MemoryBarrierMask());
    cmd.extension = GL_ARB_shader_image_load_store();
    glMemoryBarrier = cmd;
    return cmd;
  }
  private static Command glMapBufferOES;
  public static Command glMapBufferOES() {
    if (glMapBufferOES != null)
      return glMapBufferOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("access", BufferAccessARB());
    cmd.extension = GL_OES_mapbuffer();
    glMapBufferOES = cmd;
    return cmd;
  }
  private static Command glTextureStorageSparseAMD;
  public static Command glTextureStorageSparseAMD() {
    if (glTextureStorageSparseAMD != null)
      return glTextureStorageSparseAMD;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("internalFormat", InternalFormat());
    cmd.addParam("flags", TextureStorageMaskAMD());
    cmd.extension = GL_AMD_sparse_texture();
    glTextureStorageSparseAMD = cmd;
    return cmd;
  }
  private static Command glSamplerParameterIuiv;
  public static Command glSamplerParameterIuiv() {
    if (glSamplerParameterIuiv != null)
      return glSamplerParameterIuiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", SamplerParameterName());
    cmd.extension = GL_ARB_sampler_objects();
    glSamplerParameterIuiv = cmd;
    return cmd;
  }
  private static Command glIsNamedStringARB;
  public static Command glIsNamedStringARB() {
    if (glIsNamedStringARB != null)
      return glIsNamedStringARB;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ARB_shading_language_include();
    glIsNamedStringARB = cmd;
    return cmd;
  }
  private static Command glBindFramebufferOES;
  public static Command glBindFramebufferOES() {
    if (glBindFramebufferOES != null)
      return glBindFramebufferOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_OES_framebuffer_object();
    glBindFramebufferOES = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameterI4ivEXT;
  public static Command glNamedProgramLocalParameterI4ivEXT() {
    if (glNamedProgramLocalParameterI4ivEXT != null)
      return glNamedProgramLocalParameterI4ivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameterI4ivEXT = cmd;
    return cmd;
  }
  private static Command glTexBufferRangeOES;
  public static Command glTexBufferRangeOES() {
    if (glTexBufferRangeOES != null)
      return glTexBufferRangeOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_OES_texture_buffer();
    glTexBufferRangeOES = cmd;
    return cmd;
  }
  private static Command glFramebufferTexture2DDownsampleIMG;
  public static Command glFramebufferTexture2DDownsampleIMG() {
    if (glFramebufferTexture2DDownsampleIMG != null)
      return glFramebufferTexture2DDownsampleIMG;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("textarget", TextureTarget());
    cmd.extension = GL_IMG_framebuffer_downsample();
    glFramebufferTexture2DDownsampleIMG = cmd;
    return cmd;
  }
  private static Command glColorP4ui;
  public static Command glColorP4ui() {
    if (glColorP4ui != null)
      return glColorP4ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glColorP4ui = cmd;
    return cmd;
  }
  private static Command glCompressedMultiTexSubImage1DEXT;
  public static Command glCompressedMultiTexSubImage1DEXT() {
    if (glCompressedMultiTexSubImage1DEXT != null)
      return glCompressedMultiTexSubImage1DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedMultiTexSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glGetPerfMonitorCounterDataAMD;
  public static Command glGetPerfMonitorCounterDataAMD() {
    if (glGetPerfMonitorCounterDataAMD != null)
      return glGetPerfMonitorCounterDataAMD;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_AMD_performance_monitor();
    glGetPerfMonitorCounterDataAMD = cmd;
    return cmd;
  }
  private static Command glBindProgramNV;
  public static Command glBindProgramNV() {
    if (glBindProgramNV != null)
      return glBindProgramNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glBindProgramNV = cmd;
    return cmd;
  }
  private static Command glGetProgramEnvParameterIivNV;
  public static Command glGetProgramEnvParameterIivNV() {
    if (glGetProgramEnvParameterIivNV != null)
      return glGetProgramEnvParameterIivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glGetProgramEnvParameterIivNV = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x4dv;
  public static Command glProgramUniformMatrix3x4dv() {
    if (glProgramUniformMatrix3x4dv != null)
      return glProgramUniformMatrix3x4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix3x4dv = cmd;
    return cmd;
  }
  private static Command glVideoCaptureStreamParameterfvNV;
  public static Command glVideoCaptureStreamParameterfvNV() {
    if (glVideoCaptureStreamParameterfvNV != null)
      return glVideoCaptureStreamParameterfvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glVideoCaptureStreamParameterfvNV = cmd;
    return cmd;
  }
  private static Command glPathTexGenNV;
  public static Command glPathTexGenNV() {
    if (glPathTexGenNV != null)
      return glPathTexGenNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texCoordSet", PathColor());
    cmd.addParam("genMode", PathGenMode());
    cmd.extension = GL_NV_path_rendering();
    glPathTexGenNV = cmd;
    return cmd;
  }
  private static Command glImageTransformParameterfHP;
  public static Command glImageTransformParameterfHP() {
    if (glImageTransformParameterfHP != null)
      return glImageTransformParameterfHP;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_HP_image_transform();
    glImageTransformParameterfHP = cmd;
    return cmd;
  }
  private static Command glGetTexGenfvOES;
  public static Command glGetTexGenfvOES() {
    if (glGetTexGenfvOES != null)
      return glGetTexGenfvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("coord", TextureCoordName());
    cmd.addParam("pname", TextureGenParameter());
    cmd.extension = GL_OES_texture_cube_map();
    glGetTexGenfvOES = cmd;
    return cmd;
  }
  private static Command glPixelDataRangeNV;
  public static Command glPixelDataRangeNV() {
    if (glPixelDataRangeNV != null)
      return glPixelDataRangeNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_pixel_data_range();
    glPixelDataRangeNV = cmd;
    return cmd;
  }
  private static Command glPointParameterfvARB;
  public static Command glPointParameterfvARB() {
    if (glPointParameterfvARB != null)
      return glPointParameterfvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_point_parameters();
    glPointParameterfvARB = cmd;
    return cmd;
  }
  private static Command glVertexAttribLPointer;
  public static Command glVertexAttribLPointer() {
    if (glVertexAttribLPointer != null)
      return glVertexAttribLPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.extension = GL_ARB_vertex_attrib_64bit();
    glVertexAttribLPointer = cmd;
    return cmd;
  }
  private static Command glGetMapParameterfvNV;
  public static Command glGetMapParameterfvNV() {
    if (glGetMapParameterfvNV != null)
      return glGetMapParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_evaluators();
    glGetMapParameterfvNV = cmd;
    return cmd;
  }
  private static Command glGetMinmaxParameterfvEXT;
  public static Command glGetMinmaxParameterfvEXT() {
    if (glGetMinmaxParameterfvEXT != null)
      return glGetMinmaxParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("pname", GetMinmaxParameterPNameEXT());
    cmd.extension = GL_EXT_histogram();
    glGetMinmaxParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glProgramBinary;
  public static Command glProgramBinary() {
    if (glProgramBinary != null)
      return glProgramBinary;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("binaryFormat", _null_());
    cmd.extension = GL_ARB_get_program_binary();
    glProgramBinary = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2fvARB;
  public static Command glUniformMatrix2fvARB() {
    if (glUniformMatrix2fvARB != null)
      return glUniformMatrix2fvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_shader_objects();
    glUniformMatrix2fvARB = cmd;
    return cmd;
  }
  private static Command glVertexAttribP2ui;
  public static Command glVertexAttribP2ui() {
    if (glVertexAttribP2ui != null)
      return glVertexAttribP2ui;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glVertexAttribP2ui = cmd;
    return cmd;
  }
  private static Command glVertexStream4fvATI;
  public static Command glVertexStream4fvATI() {
    if (glVertexStream4fvATI != null)
      return glVertexStream4fvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream4fvATI = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameter4fARB;
  public static Command glProgramEnvParameter4fARB() {
    if (glProgramEnvParameter4fARB != null)
      return glProgramEnvParameter4fARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glProgramEnvParameter4fARB = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterfv;
  public static Command glConvolutionParameterfv() {
    if (glConvolutionParameterfv != null)
      return glConvolutionParameterfv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_ARB_imaging();
    glConvolutionParameterfv = cmd;
    return cmd;
  }
  private static Command glUnmapBufferOES;
  public static Command glUnmapBufferOES() {
    if (glUnmapBufferOES != null)
      return glUnmapBufferOES;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", _null_());
    cmd.extension = GL_OES_mapbuffer();
    glUnmapBufferOES = cmd;
    return cmd;
  }
  private static Command glCompressedTexSubImage3DARB;
  public static Command glCompressedTexSubImage3DARB() {
    if (glCompressedTexSubImage3DARB != null)
      return glCompressedTexSubImage3DARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.extension = GL_ARB_texture_compression();
    glCompressedTexSubImage3DARB = cmd;
    return cmd;
  }
  private static Command glDrawElementsIndirect;
  public static Command glDrawElementsIndirect() {
    if (glDrawElementsIndirect != null)
      return glDrawElementsIndirect;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    cmd.extension = GL_ARB_draw_indirect();
    glDrawElementsIndirect = cmd;
    return cmd;
  }
  private static Command glUniformMatrix2x4fvNV;
  public static Command glUniformMatrix2x4fvNV() {
    if (glUniformMatrix2x4fvNV != null)
      return glUniformMatrix2x4fvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_NV_non_square_matrices();
    glUniformMatrix2x4fvNV = cmd;
    return cmd;
  }
  private static Command glBindBufferOffsetEXT;
  public static Command glBindBufferOffsetEXT() {
    if (glBindBufferOffsetEXT != null)
      return glBindBufferOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.extension = GL_EXT_transform_feedback();
    glBindBufferOffsetEXT = cmd;
    return cmd;
  }
  private static Command glVertexArrayVertexAttribIOffsetEXT;
  public static Command glVertexArrayVertexAttribIOffsetEXT() {
    if (glVertexArrayVertexAttribIOffsetEXT != null)
      return glVertexArrayVertexAttribIOffsetEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribEnum());
    cmd.extension = GL_EXT_direct_state_access();
    glVertexArrayVertexAttribIOffsetEXT = cmd;
    return cmd;
  }
  private static Command glGetMinmaxEXT;
  public static Command glGetMinmaxEXT() {
    if (glGetMinmaxEXT != null)
      return glGetMinmaxEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_histogram();
    glGetMinmaxEXT = cmd;
    return cmd;
  }
  private static Command glGetPathColorGenfvNV;
  public static Command glGetPathColorGenfvNV() {
    if (glGetPathColorGenfvNV != null)
      return glGetPathColorGenfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("color", PathColor());
    cmd.addParam("pname", PathGenMode());
    cmd.extension = GL_NV_path_rendering();
    glGetPathColorGenfvNV = cmd;
    return cmd;
  }
  private static Command glBlendFuncSeparatei;
  public static Command glBlendFuncSeparatei() {
    if (glBlendFuncSeparatei != null)
      return glBlendFuncSeparatei;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("srcRGB", BlendingFactor());
    cmd.addParam("dstRGB", BlendingFactor());
    cmd.addParam("srcAlpha", BlendingFactor());
    cmd.addParam("dstAlpha", BlendingFactor());
    glBlendFuncSeparatei = cmd;
    return cmd;
  }
  private static Command glFogxOES;
  public static Command glFogxOES() {
    if (glFogxOES != null)
      return glFogxOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", FogPName());
    cmd.extension = GL_OES_fixed_point();
    glFogxOES = cmd;
    return cmd;
  }
  private static Command glTexImage2DMultisample;
  public static Command glTexImage2DMultisample() {
    if (glTexImage2DMultisample != null)
      return glTexImage2DMultisample;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_ARB_texture_multisample();
    glTexImage2DMultisample = cmd;
    return cmd;
  }
  private static Command glObjectPurgeableAPPLE;
  public static Command glObjectPurgeableAPPLE() {
    if (glObjectPurgeableAPPLE != null)
      return glObjectPurgeableAPPLE;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("objectType", _null_());
    cmd.addParam("option", _null_());
    cmd.extension = GL_APPLE_object_purgeable();
    glObjectPurgeableAPPLE = cmd;
    return cmd;
  }
  private static Command glViewportSwizzleNV;
  public static Command glViewportSwizzleNV() {
    if (glViewportSwizzleNV != null)
      return glViewportSwizzleNV;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("swizzlex", _null_());
    cmd.addParam("swizzley", _null_());
    cmd.addParam("swizzlez", _null_());
    cmd.addParam("swizzlew", _null_());
    cmd.extension = GL_NV_viewport_swizzle();
    glViewportSwizzleNV = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord3fARB;
  public static Command glMultiTexCoord3fARB() {
    if (glMultiTexCoord3fARB != null)
      return glMultiTexCoord3fARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord3fARB = cmd;
    return cmd;
  }
  private static Command glDisableClientStateiEXT;
  public static Command glDisableClientStateiEXT() {
    if (glDisableClientStateiEXT != null)
      return glDisableClientStateiEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glDisableClientStateiEXT = cmd;
    return cmd;
  }
  private static Command glTextureSubImage2DEXT;
  public static Command glTextureSubImage2DEXT() {
    if (glTextureSubImage2DEXT != null)
      return glTextureSubImage2DEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureSubImage2DEXT = cmd;
    return cmd;
  }
  private static Command glFragmentLightfSGIX;
  public static Command glFragmentLightfSGIX() {
    if (glFragmentLightfSGIX != null)
      return glFragmentLightfSGIX;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("light", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_fragment_lighting();
    glFragmentLightfSGIX = cmd;
    return cmd;
  }
  private static Command glVertexStream3iATI;
  public static Command glVertexStream3iATI() {
    if (glVertexStream3iATI != null)
      return glVertexStream3iATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream3iATI = cmd;
    return cmd;
  }
  private static Command glBindParameterEXT;
  public static Command glBindParameterEXT() {
    if (glBindParameterEXT != null)
      return glBindParameterEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("value", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glBindParameterEXT = cmd;
    return cmd;
  }
  private static Command glDrawElementsBaseVertexEXT;
  public static Command glDrawElementsBaseVertexEXT() {
    if (glDrawElementsBaseVertexEXT != null)
      return glDrawElementsBaseVertexEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    glDrawElementsBaseVertexEXT = cmd;
    return cmd;
  }
  private static Command glGetColorTableParameterfvEXT;
  public static Command glGetColorTableParameterfvEXT() {
    if (glGetColorTableParameterfvEXT != null)
      return glGetColorTableParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ColorTableTarget());
    cmd.addParam("pname", GetColorTableParameterPNameSGI());
    cmd.extension = GL_EXT_paletted_texture();
    glGetColorTableParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glRasterSamplesEXT;
  public static Command glRasterSamplesEXT() {
    if (glRasterSamplesEXT != null)
      return glRasterSamplesEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("fixedsamplelocations", Boolean());
    cmd.extension = GL_EXT_raster_multisample();
    glRasterSamplesEXT = cmd;
    return cmd;
  }
  private static Command glNormalStream3dATI;
  public static Command glNormalStream3dATI() {
    if (glNormalStream3dATI != null)
      return glNormalStream3dATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3dATI = cmd;
    return cmd;
  }
  private static Command glGetVertexAttribdvNV;
  public static Command glGetVertexAttribdvNV() {
    if (glGetVertexAttribdvNV != null)
      return glGetVertexAttribdvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_vertex_program();
    glGetVertexAttribdvNV = cmd;
    return cmd;
  }
  private static Command glGetProgramLocalParameterdvARB;
  public static Command glGetProgramLocalParameterdvARB() {
    if (glGetProgramLocalParameterdvARB != null)
      return glGetProgramLocalParameterdvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glGetProgramLocalParameterdvARB = cmd;
    return cmd;
  }
  private static Command glIsSyncAPPLE;
  public static Command glIsSyncAPPLE() {
    if (glIsSyncAPPLE != null)
      return glIsSyncAPPLE;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_APPLE_sync();
    glIsSyncAPPLE = cmd;
    return cmd;
  }
  private static Command glGetQueryObjectuivARB;
  public static Command glGetQueryObjectuivARB() {
    if (glGetQueryObjectuivARB != null)
      return glGetQueryObjectuivARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_ARB_occlusion_query();
    glGetQueryObjectuivARB = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix3x4fv;
  public static Command glProgramUniformMatrix3x4fv() {
    if (glProgramUniformMatrix3x4fv != null)
      return glProgramUniformMatrix3x4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_separate_shader_objects();
    glProgramUniformMatrix3x4fv = cmd;
    return cmd;
  }
  private static Command glFramebufferReadBufferEXT;
  public static Command glFramebufferReadBufferEXT() {
    if (glFramebufferReadBufferEXT != null)
      return glFramebufferReadBufferEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", ReadBufferMode());
    cmd.extension = GL_EXT_direct_state_access();
    glFramebufferReadBufferEXT = cmd;
    return cmd;
  }
  private static Command glTextureParameterfv;
  public static Command glTextureParameterfv() {
    if (glTextureParameterfv != null)
      return glTextureParameterfv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_ARB_direct_state_access();
    glTextureParameterfv = cmd;
    return cmd;
  }
  private static Command glGetMaterialxvOES;
  public static Command glGetMaterialxvOES() {
    if (glGetMaterialxvOES != null)
      return glGetMaterialxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetMaterialxvOES = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord2dARB;
  public static Command glMultiTexCoord2dARB() {
    if (glMultiTexCoord2dARB != null)
      return glMultiTexCoord2dARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord2dARB = cmd;
    return cmd;
  }
  private static Command glPolygonModeNV;
  public static Command glPolygonModeNV() {
    if (glPolygonModeNV != null)
      return glPolygonModeNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("mode", PolygonMode());
    cmd.extension = GL_NV_polygon_mode();
    glPolygonModeNV = cmd;
    return cmd;
  }
  private static Command glTextureStorageMem2DMultisampleEXT;
  public static Command glTextureStorageMem2DMultisampleEXT() {
    if (glTextureStorageMem2DMultisampleEXT != null)
      return glTextureStorageMem2DMultisampleEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("internalFormat", _null_());
    cmd.addParam("fixedSampleLocations", Boolean());
    cmd.extension = GL_EXT_memory_object();
    glTextureStorageMem2DMultisampleEXT = cmd;
    return cmd;
  }
  private static Command glGetNamedBufferPointervEXT;
  public static Command glGetNamedBufferPointervEXT() {
    if (glGetNamedBufferPointervEXT != null)
      return glGetNamedBufferPointervEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", VertexBufferObjectParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedBufferPointervEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3x4fv;
  public static Command glUniformMatrix3x4fv() {
    if (glUniformMatrix3x4fv != null)
      return glUniformMatrix3x4fv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    glUniformMatrix3x4fv = cmd;
    return cmd;
  }
  private static Command glGetTexEnvxv;
  public static Command glGetTexEnvxv() {
    if (glGetTexEnvxv != null)
      return glGetTexEnvxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    glGetTexEnvxv = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage3D;
  public static Command glCompressedTexImage3D() {
    if (glCompressedTexImage3D != null)
      return glCompressedTexImage3D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCompressedTexImage3D = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord1hvNV;
  public static Command glMultiTexCoord1hvNV() {
    if (glMultiTexCoord1hvNV != null)
      return glMultiTexCoord1hvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_NV_half_float();
    glMultiTexCoord1hvNV = cmd;
    return cmd;
  }
  private static Command glUnmapBuffer;
  public static Command glUnmapBuffer() {
    if (glUnmapBuffer != null)
      return glUnmapBuffer;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("target", BufferTargetARB());
    glUnmapBuffer = cmd;
    return cmd;
  }
  private static Command glMultiTexParameterIuivEXT;
  public static Command glMultiTexParameterIuivEXT() {
    if (glMultiTexParameterIuivEXT != null)
      return glMultiTexParameterIuivEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glGetnTexImage;
  public static Command glGetnTexImage() {
    if (glGetnTexImage != null)
      return glGetnTexImage;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetnTexImage = cmd;
    return cmd;
  }
  private static Command glReadnPixelsEXT;
  public static Command glReadnPixelsEXT() {
    if (glReadnPixelsEXT != null)
      return glReadnPixelsEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_robustness();
    glReadnPixelsEXT = cmd;
    return cmd;
  }
  private static Command glCopyMultiTexSubImage1DEXT;
  public static Command glCopyMultiTexSubImage1DEXT() {
    if (glCopyMultiTexSubImage1DEXT != null)
      return glCopyMultiTexSubImage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCopyMultiTexSubImage1DEXT = cmd;
    return cmd;
  }
  private static Command glGetConvolutionFilter;
  public static Command glGetConvolutionFilter() {
    if (glGetConvolutionFilter != null)
      return glGetConvolutionFilter;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTarget());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glGetConvolutionFilter = cmd;
    return cmd;
  }
  private static Command glConservativeRasterParameteriNV;
  public static Command glConservativeRasterParameteriNV() {
    if (glConservativeRasterParameteriNV != null)
      return glConservativeRasterParameteriNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_conservative_raster_pre_snap_triangles();
    glConservativeRasterParameteriNV = cmd;
    return cmd;
  }
  private static Command glEnableIndexedEXT;
  public static Command glEnableIndexedEXT() {
    if (glEnableIndexedEXT != null)
      return glEnableIndexedEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", EnableCap());
    cmd.extension = GL_EXT_direct_state_access();
    glEnableIndexedEXT = cmd;
    return cmd;
  }
  private static Command glUniformMatrix3x4dv;
  public static Command glUniformMatrix3x4dv() {
    if (glUniformMatrix3x4dv != null)
      return glUniformMatrix3x4dv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_ARB_gpu_shader_fp64();
    glUniformMatrix3x4dv = cmd;
    return cmd;
  }
  private static Command glPointParameterfARB;
  public static Command glPointParameterfARB() {
    if (glPointParameterfARB != null)
      return glPointParameterfARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ARB_point_parameters();
    glPointParameterfARB = cmd;
    return cmd;
  }
  private static Command glGetClipPlanex;
  public static Command glGetClipPlanex() {
    if (glGetClipPlanex != null)
      return glGetClipPlanex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glGetClipPlanex = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4sARB;
  public static Command glMultiTexCoord4sARB() {
    if (glMultiTexCoord4sARB != null)
      return glMultiTexCoord4sARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4sARB = cmd;
    return cmd;
  }
  private static Command glGetnCompressedTexImage;
  public static Command glGetnCompressedTexImage() {
    if (glGetnCompressedTexImage != null)
      return glGetnCompressedTexImage;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glGetnCompressedTexImage = cmd;
    return cmd;
  }
  private static Command glNormalStream3ivATI;
  public static Command glNormalStream3ivATI() {
    if (glNormalStream3ivATI != null)
      return glNormalStream3ivATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glNormalStream3ivATI = cmd;
    return cmd;
  }
  private static Command glVertexAttribLFormatNV;
  public static Command glVertexAttribLFormatNV() {
    if (glVertexAttribLFormatNV != null)
      return glVertexAttribLFormatNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribType());
    cmd.extension = GL_NV_vertex_attrib_integer_64bit();
    glVertexAttribLFormatNV = cmd;
    return cmd;
  }
  private static Command glShaderOp2EXT;
  public static Command glShaderOp2EXT() {
    if (glShaderOp2EXT != null)
      return glShaderOp2EXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", _null_());
    cmd.extension = GL_EXT_vertex_shader();
    glShaderOp2EXT = cmd;
    return cmd;
  }
  private static Command glGetActiveSubroutineName;
  public static Command glGetActiveSubroutineName() {
    if (glGetActiveSubroutineName != null)
      return glGetActiveSubroutineName;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("shadertype", ShaderType());
    cmd.extension = GL_ARB_shader_subroutine();
    glGetActiveSubroutineName = cmd;
    return cmd;
  }
  private static Command glGetClipPlanef;
  public static Command glGetClipPlanef() {
    if (glGetClipPlanef != null)
      return glGetClipPlanef;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("plane", ClipPlaneName());
    glGetClipPlanef = cmd;
    return cmd;
  }
  private static Command glNamedProgramStringEXT;
  public static Command glNamedProgramStringEXT() {
    if (glNamedProgramStringEXT != null)
      return glNamedProgramStringEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("format", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramStringEXT = cmd;
    return cmd;
  }
  private static Command glProgramUniformMatrix4fvEXT;
  public static Command glProgramUniformMatrix4fvEXT() {
    if (glProgramUniformMatrix4fvEXT != null)
      return glProgramUniformMatrix4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("transpose", Boolean());
    cmd.extension = GL_EXT_direct_state_access();
    glProgramUniformMatrix4fvEXT = cmd;
    return cmd;
  }
  private static Command glMatrixFrustumEXT;
  public static Command glMatrixFrustumEXT() {
    if (glMatrixFrustumEXT != null)
      return glMatrixFrustumEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixFrustumEXT = cmd;
    return cmd;
  }
  private static Command glTexCoordP1ui;
  public static Command glTexCoordP1ui() {
    if (glTexCoordP1ui != null)
      return glTexCoordP1ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", TexCoordPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glTexCoordP1ui = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage1D;
  public static Command glCompressedTexImage1D() {
    if (glCompressedTexImage1D != null)
      return glCompressedTexImage1D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCompressedTexImage1D = cmd;
    return cmd;
  }
  private static Command glGetTexEnvxvOES;
  public static Command glGetTexEnvxvOES() {
    if (glGetTexEnvxvOES != null)
      return glGetTexEnvxvOES;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureEnvTarget());
    cmd.addParam("pname", TextureEnvParameter());
    cmd.extension = GL_OES_fixed_point();
    glGetTexEnvxvOES = cmd;
    return cmd;
  }
  private static Command glStencilOpSeparate;
  public static Command glStencilOpSeparate() {
    if (glStencilOpSeparate != null)
      return glStencilOpSeparate;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("face", StencilFaceDirection());
    cmd.addParam("sfail", StencilOp());
    cmd.addParam("dpfail", StencilOp());
    cmd.addParam("dppass", StencilOp());
    glStencilOpSeparate = cmd;
    return cmd;
  }
  private static Command glPixelTransformParameterfEXT;
  public static Command glPixelTransformParameterfEXT() {
    if (glPixelTransformParameterfEXT != null)
      return glPixelTransformParameterfEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_EXT_pixel_transform();
    glPixelTransformParameterfEXT = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterfEXT;
  public static Command glConvolutionParameterfEXT() {
    if (glConvolutionParameterfEXT != null)
      return glConvolutionParameterfEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_EXT_convolution();
    glConvolutionParameterfEXT = cmd;
    return cmd;
  }
  private static Command glGetFloati_vOES;
  public static Command glGetFloati_vOES() {
    if (glGetFloati_vOES != null)
      return glGetFloati_vOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    cmd.extension = GL_OES_viewport_array();
    glGetFloati_vOES = cmd;
    return cmd;
  }
  private static Command glGetProgramLocalParameterIivNV;
  public static Command glGetProgramLocalParameterIivNV() {
    if (glGetProgramLocalParameterIivNV != null)
      return glGetProgramLocalParameterIivNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_gpu_program4();
    glGetProgramLocalParameterIivNV = cmd;
    return cmd;
  }
  private static Command glGetMinmax;
  public static Command glGetMinmax() {
    if (glGetMinmax != null)
      return glGetMinmax;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", MinmaxTargetEXT());
    cmd.addParam("reset", Boolean());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_ARB_imaging();
    glGetMinmax = cmd;
    return cmd;
  }
  private static Command glSetFenceNV;
  public static Command glSetFenceNV() {
    if (glSetFenceNV != null)
      return glSetFenceNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("condition", _null_());
    cmd.extension = GL_NV_fence();
    glSetFenceNV = cmd;
    return cmd;
  }
  private static Command glCompressedTexImage2D;
  public static Command glCompressedTexImage2D() {
    if (glCompressedTexImage2D != null)
      return glCompressedTexImage2D;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    glCompressedTexImage2D = cmd;
    return cmd;
  }
  private static Command glMultiTexCoord4dvARB;
  public static Command glMultiTexCoord4dvARB() {
    if (glMultiTexCoord4dvARB != null)
      return glMultiTexCoord4dvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureUnit());
    cmd.extension = GL_ARB_multitexture();
    glMultiTexCoord4dvARB = cmd;
    return cmd;
  }
  private static Command glLoadProgramNV;
  public static Command glLoadProgramNV() {
    if (glLoadProgramNV != null)
      return glLoadProgramNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_NV_vertex_program();
    glLoadProgramNV = cmd;
    return cmd;
  }
  private static Command glGetTextureParameterIuivEXT;
  public static Command glGetTextureParameterIuivEXT() {
    if (glGetTextureParameterIuivEXT != null)
      return glGetTextureParameterIuivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_EXT_direct_state_access();
    glGetTextureParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glCopyPixels;
  public static Command glCopyPixels() {
    if (glCopyPixels != null)
      return glCopyPixels;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", PixelCopyType());
    glCopyPixels = cmd;
    return cmd;
  }
  private static Command glConvolutionParameterfvEXT;
  public static Command glConvolutionParameterfvEXT() {
    if (glConvolutionParameterfvEXT != null)
      return glConvolutionParameterfvEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("pname", ConvolutionParameterEXT());
    cmd.extension = GL_EXT_convolution();
    glConvolutionParameterfvEXT = cmd;
    return cmd;
  }
  private static Command glNamedProgramLocalParameterI4iEXT;
  public static Command glNamedProgramLocalParameterI4iEXT() {
    if (glNamedProgramLocalParameterI4iEXT != null)
      return glNamedProgramLocalParameterI4iEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glNamedProgramLocalParameterI4iEXT = cmd;
    return cmd;
  }
  private static Command glTexStorage1DEXT;
  public static Command glTexStorage1DEXT() {
    if (glTexStorage1DEXT != null)
      return glTexStorage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_texture_storage();
    glTexStorage1DEXT = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage3D;
  public static Command glCopyTexSubImage3D() {
    if (glCopyTexSubImage3D != null)
      return glCopyTexSubImage3D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glCopyTexSubImage3D = cmd;
    return cmd;
  }
  private static Command glGetnSeparableFilter;
  public static Command glGetnSeparableFilter() {
    if (glGetnSeparableFilter != null)
      return glGetnSeparableFilter;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", SeparableTargetEXT());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glGetnSeparableFilter = cmd;
    return cmd;
  }
  private static Command glNormalP3ui;
  public static Command glNormalP3ui() {
    if (glNormalP3ui != null)
      return glNormalP3ui;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", NormalPointerType());
    cmd.extension = GL_ARB_vertex_type_2_10_10_10_rev();
    glNormalP3ui = cmd;
    return cmd;
  }
  private static Command glGetGraphicsResetStatusKHR;
  public static Command glGetGraphicsResetStatusKHR() {
    if (glGetGraphicsResetStatusKHR != null)
      return glGetGraphicsResetStatusKHR;
    Command cmd = new Command(0);
    cmd.returnGroup = GraphicsResetStatus();
    cmd.extension = GL_KHR_robustness();
    glGetGraphicsResetStatusKHR = cmd;
    return cmd;
  }
  private static Command glIsObjectBufferATI;
  public static Command glIsObjectBufferATI() {
    if (glIsObjectBufferATI != null)
      return glIsObjectBufferATI;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_ATI_vertex_array_object();
    glIsObjectBufferATI = cmd;
    return cmd;
  }
  private static Command glIglooInterfaceSGIX;
  public static Command glIglooInterfaceSGIX() {
    if (glIglooInterfaceSGIX != null)
      return glIglooInterfaceSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    glIglooInterfaceSGIX = cmd;
    return cmd;
  }
  private static Command glReadBufferNV;
  public static Command glReadBufferNV() {
    if (glReadBufferNV != null)
      return glReadBufferNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_NV_read_buffer();
    glReadBufferNV = cmd;
    return cmd;
  }
  private static Command glGetCombinerStageParameterfvNV;
  public static Command glGetCombinerStageParameterfvNV() {
    if (glGetCombinerStageParameterfvNV != null)
      return glGetCombinerStageParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners2();
    glGetCombinerStageParameterfvNV = cmd;
    return cmd;
  }
  private static Command glDrawElementsInstancedBaseVertexBaseInstance;
  public static Command glDrawElementsInstancedBaseVertexBaseInstance() {
    if (glDrawElementsInstancedBaseVertexBaseInstance != null)
      return glDrawElementsInstancedBaseVertexBaseInstance;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", PrimitiveType());
    glDrawElementsInstancedBaseVertexBaseInstance = cmd;
    return cmd;
  }
  private static Command glGenerateMipmapEXT;
  public static Command glGenerateMipmapEXT() {
    if (glGenerateMipmapEXT != null)
      return glGenerateMipmapEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.extension = GL_EXT_framebuffer_object();
    glGenerateMipmapEXT = cmd;
    return cmd;
  }
  private static Command glDrawRangeElementsEXT;
  public static Command glDrawRangeElementsEXT() {
    if (glDrawRangeElementsEXT != null)
      return glDrawRangeElementsEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.addParam("type", DrawElementsType());
    cmd.extension = GL_EXT_draw_range_elements();
    glDrawRangeElementsEXT = cmd;
    return cmd;
  }
  private static Command glPixelStoref;
  public static Command glPixelStoref() {
    if (glPixelStoref != null)
      return glPixelStoref;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelStoreParameter());
    glPixelStoref = cmd;
    return cmd;
  }
  private static Command glIsFramebufferOES;
  public static Command glIsFramebufferOES() {
    if (glIsFramebufferOES != null)
      return glIsFramebufferOES;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_OES_framebuffer_object();
    glIsFramebufferOES = cmd;
    return cmd;
  }
  private static Command glStencilFuncSeparate;
  public static Command glStencilFuncSeparate() {
    if (glStencilFuncSeparate != null)
      return glStencilFuncSeparate;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", StencilFaceDirection());
    cmd.addParam("func", StencilFunction());
    glStencilFuncSeparate = cmd;
    return cmd;
  }
  private static Command glGetProgramEnvParameterdvARB;
  public static Command glGetProgramEnvParameterdvARB() {
    if (glGetProgramEnvParameterdvARB != null)
      return glGetProgramEnvParameterdvARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_ARB_fragment_program();
    glGetProgramEnvParameterdvARB = cmd;
    return cmd;
  }
  private static Command glPixelStorei;
  public static Command glPixelStorei() {
    if (glPixelStorei != null)
      return glPixelStorei;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelStoreParameter());
    glPixelStorei = cmd;
    return cmd;
  }
  private static Command glCheckNamedFramebufferStatusEXT;
  public static Command glCheckNamedFramebufferStatusEXT() {
    if (glCheckNamedFramebufferStatusEXT != null)
      return glCheckNamedFramebufferStatusEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = FramebufferStatus();
    cmd.addParam("target", FramebufferTarget());
    cmd.extension = GL_EXT_direct_state_access();
    glCheckNamedFramebufferStatusEXT = cmd;
    return cmd;
  }
  private static Command glGetInteger64i_v;
  public static Command glGetInteger64i_v() {
    if (glGetInteger64i_v != null)
      return glGetInteger64i_v;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TypeEnum());
    glGetInteger64i_v = cmd;
    return cmd;
  }
  private static Command glClearTexSubImageEXT;
  public static Command glClearTexSubImageEXT() {
    if (glClearTexSubImageEXT != null)
      return glClearTexSubImageEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    glClearTexSubImageEXT = cmd;
    return cmd;
  }
  private static Command glGetTextureLevelParameteriv;
  public static Command glGetTextureLevelParameteriv() {
    if (glGetTextureLevelParameteriv != null)
      return glGetTextureLevelParameteriv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", GetTextureParameter());
    cmd.extension = GL_ARB_direct_state_access();
    glGetTextureLevelParameteriv = cmd;
    return cmd;
  }
  private static Command glPixelStorex;
  public static Command glPixelStorex() {
    if (glPixelStorex != null)
      return glPixelStorex;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelStoreParameter());
    cmd.extension = GL_OES_fixed_point();
    glPixelStorex = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage1D;
  public static Command glCopyTexSubImage1D() {
    if (glCopyTexSubImage1D != null)
      return glCopyTexSubImage1D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glCopyTexSubImage1D = cmd;
    return cmd;
  }
  private static Command glDrawCommandsNV;
  public static Command glDrawCommandsNV() {
    if (glDrawCommandsNV != null)
      return glDrawCommandsNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("primitiveMode", _null_());
    cmd.extension = GL_NV_command_list();
    glDrawCommandsNV = cmd;
    return cmd;
  }
  private static Command glPathColorGenNV;
  public static Command glPathColorGenNV() {
    if (glPathColorGenNV != null)
      return glPathColorGenNV;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("color", PathColor());
    cmd.addParam("genMode", PathGenMode());
    cmd.addParam("colorFormat", _null_());
    cmd.extension = GL_NV_path_rendering();
    glPathColorGenNV = cmd;
    return cmd;
  }
  private static Command glTexBufferEXT;
  public static Command glTexBufferEXT() {
    if (glTexBufferEXT != null)
      return glTexBufferEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_texture_buffer();
    glTexBufferEXT = cmd;
    return cmd;
  }
  private static Command glMatrixMultTransposefEXT;
  public static Command glMatrixMultTransposefEXT() {
    if (glMatrixMultTransposefEXT != null)
      return glMatrixMultTransposefEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", MatrixMode());
    cmd.extension = GL_EXT_direct_state_access();
    glMatrixMultTransposefEXT = cmd;
    return cmd;
  }
  private static Command glMultiDrawRangeElementArrayAPPLE;
  public static Command glMultiDrawRangeElementArrayAPPLE() {
    if (glMultiDrawRangeElementArrayAPPLE != null)
      return glMultiDrawRangeElementArrayAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_APPLE_element_array();
    glMultiDrawRangeElementArrayAPPLE = cmd;
    return cmd;
  }
  private static Command glSpriteParameterivSGIX;
  public static Command glSpriteParameterivSGIX() {
    if (glSpriteParameterivSGIX != null)
      return glSpriteParameterivSGIX;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_SGIX_sprite();
    glSpriteParameterivSGIX = cmd;
    return cmd;
  }
  private static Command glGetCombinerInputParameterivNV;
  public static Command glGetCombinerInputParameterivNV() {
    if (glGetCombinerInputParameterivNV != null)
      return glGetCombinerInputParameterivNV;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("portion", _null_());
    cmd.addParam("variable", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners();
    glGetCombinerInputParameterivNV = cmd;
    return cmd;
  }
  private static Command glGetProgramPipelineiv;
  public static Command glGetProgramPipelineiv() {
    if (glGetProgramPipelineiv != null)
      return glGetProgramPipelineiv;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PipelineParameterName());
    cmd.extension = GL_ARB_separate_shader_objects();
    glGetProgramPipelineiv = cmd;
    return cmd;
  }
  private static Command glRenderbufferStorageMultisampleCoverageNV;
  public static Command glRenderbufferStorageMultisampleCoverageNV() {
    if (glRenderbufferStorageMultisampleCoverageNV != null)
      return glRenderbufferStorageMultisampleCoverageNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", RenderbufferTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_NV_framebuffer_multisample_coverage();
    glRenderbufferStorageMultisampleCoverageNV = cmd;
    return cmd;
  }
  private static Command glGetNamedFramebufferAttachmentParameterivEXT;
  public static Command glGetNamedFramebufferAttachmentParameterivEXT() {
    if (glGetNamedFramebufferAttachmentParameterivEXT != null)
      return glGetNamedFramebufferAttachmentParameterivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("pname", FramebufferAttachmentParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedFramebufferAttachmentParameterivEXT = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage2D;
  public static Command glCopyTexSubImage2D() {
    if (glCopyTexSubImage2D != null)
      return glCopyTexSubImage2D;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glCopyTexSubImage2D = cmd;
    return cmd;
  }
  private static Command glDrawRangeElementArrayAPPLE;
  public static Command glDrawRangeElementArrayAPPLE() {
    if (glDrawRangeElementArrayAPPLE != null)
      return glDrawRangeElementArrayAPPLE;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", PrimitiveType());
    cmd.extension = GL_APPLE_element_array();
    glDrawRangeElementArrayAPPLE = cmd;
    return cmd;
  }
  private static Command glGetProgramivARB;
  public static Command glGetProgramivARB() {
    if (glGetProgramivARB != null)
      return glGetProgramivARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.addParam("pname", ProgramPropertyARB());
    cmd.extension = GL_ARB_fragment_program();
    glGetProgramivARB = cmd;
    return cmd;
  }
  private static Command glGetPointervKHR;
  public static Command glGetPointervKHR() {
    if (glGetPointervKHR != null)
      return glGetPointervKHR;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_KHR_debug();
    glGetPointervKHR = cmd;
    return cmd;
  }
  private static Command glTextureParameterIuivEXT;
  public static Command glTextureParameterIuivEXT() {
    if (glTextureParameterIuivEXT != null)
      return glTextureParameterIuivEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glTextureParameterIuivEXT = cmd;
    return cmd;
  }
  private static Command glProgramParameteriEXT;
  public static Command glProgramParameteriEXT() {
    if (glProgramParameteriEXT != null)
      return glProgramParameteriEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", ProgramParameterPName());
    cmd.extension = GL_EXT_geometry_shader4();
    glProgramParameteriEXT = cmd;
    return cmd;
  }
  private static Command glPointSizePointerOES;
  public static Command glPointSizePointerOES() {
    if (glPointSizePointerOES != null)
      return glPointSizePointerOES;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.extension = GL_OES_point_size_array();
    glPointSizePointerOES = cmd;
    return cmd;
  }
  private static Command glBlendEquationi;
  public static Command glBlendEquationi() {
    if (glBlendEquationi != null)
      return glBlendEquationi;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", BlendEquationModeEXT());
    glBlendEquationi = cmd;
    return cmd;
  }
  private static Command glMaterialxv;
  public static Command glMaterialxv() {
    if (glMaterialxv != null)
      return glMaterialxv;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("pname", MaterialParameter());
    glMaterialxv = cmd;
    return cmd;
  }
  private static Command glWindowRectanglesEXT;
  public static Command glWindowRectanglesEXT() {
    if (glWindowRectanglesEXT != null)
      return glWindowRectanglesEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("mode", _null_());
    cmd.extension = GL_EXT_window_rectangles();
    glWindowRectanglesEXT = cmd;
    return cmd;
  }
  private static Command glGetConvolutionFilterEXT;
  public static Command glGetConvolutionFilterEXT() {
    if (glGetConvolutionFilterEXT != null)
      return glGetConvolutionFilterEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", ConvolutionTargetEXT());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_convolution();
    glGetConvolutionFilterEXT = cmd;
    return cmd;
  }
  private static Command glGetNamedProgramLocalParameterIivEXT;
  public static Command glGetNamedProgramLocalParameterIivEXT() {
    if (glGetNamedProgramLocalParameterIivEXT != null)
      return glGetNamedProgramLocalParameterIivEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    cmd.extension = GL_EXT_direct_state_access();
    glGetNamedProgramLocalParameterIivEXT = cmd;
    return cmd;
  }
  private static Command glCopyTexSubImage3DEXT;
  public static Command glCopyTexSubImage3DEXT() {
    if (glCopyTexSubImage3DEXT != null)
      return glCopyTexSubImage3DEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    glCopyTexSubImage3DEXT = cmd;
    return cmd;
  }
  private static Command glGetBufferParameterui64vNV;
  public static Command glGetBufferParameterui64vNV() {
    if (glGetBufferParameterui64vNV != null)
      return glGetBufferParameterui64vNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", BufferTargetARB());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_shader_buffer_load();
    glGetBufferParameterui64vNV = cmd;
    return cmd;
  }
  private static Command glPNTrianglesfATI;
  public static Command glPNTrianglesfATI() {
    if (glPNTrianglesfATI != null)
      return glPNTrianglesfATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_ATI_pn_triangles();
    glPNTrianglesfATI = cmd;
    return cmd;
  }
  private static Command glGetVideoCaptureStreamdvNV;
  public static Command glGetVideoCaptureStreamdvNV() {
    if (glGetVideoCaptureStreamdvNV != null)
      return glGetVideoCaptureStreamdvNV;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_video_capture();
    glGetVideoCaptureStreamdvNV = cmd;
    return cmd;
  }
  private static Command glProgramEnvParameters4fvEXT;
  public static Command glProgramEnvParameters4fvEXT() {
    if (glProgramEnvParameters4fvEXT != null)
      return glProgramEnvParameters4fvEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("target", _null_());
    glProgramEnvParameters4fvEXT = cmd;
    return cmd;
  }
  private static Command glIsTextureEXT;
  public static Command glIsTextureEXT() {
    if (glIsTextureEXT != null)
      return glIsTextureEXT;
    Command cmd = new Command(0);
    cmd.returnGroup = Boolean();
    cmd.extension = GL_EXT_texture_object();
    glIsTextureEXT = cmd;
    return cmd;
  }
  private static Command glCreateSyncFromCLeventARB;
  public static Command glCreateSyncFromCLeventARB() {
    if (glCreateSyncFromCLeventARB != null)
      return glCreateSyncFromCLeventARB;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("flags", _null_());
    cmd.extension = GL_ARB_cl_event();
    glCreateSyncFromCLeventARB = cmd;
    return cmd;
  }
  private static Command glSeparableFilter2DEXT;
  public static Command glSeparableFilter2DEXT() {
    if (glSeparableFilter2DEXT != null)
      return glSeparableFilter2DEXT;
    Command cmd = new Command(4);
    cmd.returnGroup = _null_();
    cmd.addParam("target", SeparableTargetEXT());
    cmd.addParam("internalformat", InternalFormat());
    cmd.addParam("format", PixelFormat());
    cmd.addParam("type", PixelType());
    cmd.extension = GL_EXT_convolution();
    glSeparableFilter2DEXT = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureARB;
  public static Command glFramebufferTextureARB() {
    if (glFramebufferTextureARB != null)
      return glFramebufferTextureARB;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_ARB_geometry_shader4();
    glFramebufferTextureARB = cmd;
    return cmd;
  }
  private static Command glSecondaryColorPointer;
  public static Command glSecondaryColorPointer() {
    if (glSecondaryColorPointer != null)
      return glSecondaryColorPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", ColorPointerType());
    glSecondaryColorPointer = cmd;
    return cmd;
  }
  private static Command glAlphaFragmentOp2ATI;
  public static Command glAlphaFragmentOp2ATI() {
    if (glAlphaFragmentOp2ATI != null)
      return glAlphaFragmentOp2ATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("op", FragmentOpATI());
    cmd.extension = GL_ATI_fragment_shader();
    glAlphaFragmentOp2ATI = cmd;
    return cmd;
  }
  private static Command glMultiTexParameteriEXT;
  public static Command glMultiTexParameteriEXT() {
    if (glMultiTexParameteriEXT != null)
      return glMultiTexParameteriEXT;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("texunit", TextureUnit());
    cmd.addParam("target", TextureTarget());
    cmd.addParam("pname", TextureParameterName());
    cmd.extension = GL_EXT_direct_state_access();
    glMultiTexParameteriEXT = cmd;
    return cmd;
  }
  private static Command glGetQueryObjecti64vEXT;
  public static Command glGetQueryObjecti64vEXT() {
    if (glGetQueryObjecti64vEXT != null)
      return glGetQueryObjecti64vEXT;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", QueryObjectParameterName());
    cmd.extension = GL_EXT_disjoint_timer_query();
    glGetQueryObjecti64vEXT = cmd;
    return cmd;
  }
  private static Command glPixelTransferf;
  public static Command glPixelTransferf() {
    if (glPixelTransferf != null)
      return glPixelTransferf;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTransferParameter());
    glPixelTransferf = cmd;
    return cmd;
  }
  private static Command glCompressedTextureImage1DEXT;
  public static Command glCompressedTextureImage1DEXT() {
    if (glCompressedTextureImage1DEXT != null)
      return glCompressedTextureImage1DEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", TextureTarget());
    cmd.addParam("internalformat", InternalFormat());
    cmd.extension = GL_EXT_direct_state_access();
    glCompressedTextureImage1DEXT = cmd;
    return cmd;
  }
  private static Command glPixelTransferi;
  public static Command glPixelTransferi() {
    if (glPixelTransferi != null)
      return glPixelTransferi;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("pname", PixelTransferParameter());
    glPixelTransferi = cmd;
    return cmd;
  }
  private static Command glFogCoordPointer;
  public static Command glFogCoordPointer() {
    if (glFogCoordPointer != null)
      return glFogCoordPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", FogPointerTypeEXT());
    glFogCoordPointer = cmd;
    return cmd;
  }
  private static Command glFramebufferTextureMultiviewOVR;
  public static Command glFramebufferTextureMultiviewOVR() {
    if (glFramebufferTextureMultiviewOVR != null)
      return glFramebufferTextureMultiviewOVR;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.extension = GL_OVR_multiview();
    glFramebufferTextureMultiviewOVR = cmd;
    return cmd;
  }
  private static Command glPushDebugGroupKHR;
  public static Command glPushDebugGroupKHR() {
    if (glPushDebugGroupKHR != null)
      return glPushDebugGroupKHR;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("source", DebugSource());
    cmd.extension = GL_KHR_debug();
    glPushDebugGroupKHR = cmd;
    return cmd;
  }
  private static Command glVertexAttribIPointer;
  public static Command glVertexAttribIPointer() {
    if (glVertexAttribIPointer != null)
      return glVertexAttribIPointer;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("type", VertexAttribPointerType());
    glVertexAttribIPointer = cmd;
    return cmd;
  }
  private static Command glVertexStream1dvATI;
  public static Command glVertexStream1dvATI() {
    if (glVertexStream1dvATI != null)
      return glVertexStream1dvATI;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("stream", _null_());
    cmd.extension = GL_ATI_vertex_streams();
    glVertexStream1dvATI = cmd;
    return cmd;
  }
  private static Command glFramebufferRenderbuffer;
  public static Command glFramebufferRenderbuffer() {
    if (glFramebufferRenderbuffer != null)
      return glFramebufferRenderbuffer;
    Command cmd = new Command(3);
    cmd.returnGroup = _null_();
    cmd.addParam("target", FramebufferTarget());
    cmd.addParam("attachment", FramebufferAttachment());
    cmd.addParam("renderbuffertarget", RenderbufferTarget());
    cmd.extension = GL_ARB_framebuffer_object();
    glFramebufferRenderbuffer = cmd;
    return cmd;
  }
  private static Command glCombinerStageParameterfvNV;
  public static Command glCombinerStageParameterfvNV() {
    if (glCombinerStageParameterfvNV != null)
      return glCombinerStageParameterfvNV;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("stage", _null_());
    cmd.addParam("pname", _null_());
    cmd.extension = GL_NV_register_combiners2();
    glCombinerStageParameterfvNV = cmd;
    return cmd;
  }
  private static Command glAreProgramsResidentNV;
  public static Command glAreProgramsResidentNV() {
    if (glAreProgramsResidentNV != null)
      return glAreProgramsResidentNV;
    Command cmd = new Command(1);
    cmd.returnGroup = Boolean();
    cmd.addParam("residences", Boolean());
    cmd.extension = GL_NV_vertex_program();
    glAreProgramsResidentNV = cmd;
    return cmd;
  }
  private static Command glActiveTexture;
  public static Command glActiveTexture() {
    if (glActiveTexture != null)
      return glActiveTexture;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("texture", TextureUnit());
    glActiveTexture = cmd;
    return cmd;
  }
  private static Command glVertexAttribFormat;
  public static Command glVertexAttribFormat() {
    if (glVertexAttribFormat != null)
      return glVertexAttribFormat;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("type", _null_());
    cmd.addParam("normalized", Boolean());
    cmd.extension = GL_ARB_vertex_attrib_binding();
    glVertexAttribFormat = cmd;
    return cmd;
  }
  private static Command glDisableClientState;
  public static Command glDisableClientState() {
    if (glDisableClientState != null)
      return glDisableClientState;
    Command cmd = new Command(1);
    cmd.returnGroup = _null_();
    cmd.addParam("array", EnableCap());
    glDisableClientState = cmd;
    return cmd;
  }
  private static Command glBindMaterialParameterEXT;
  public static Command glBindMaterialParameterEXT() {
    if (glBindMaterialParameterEXT != null)
      return glBindMaterialParameterEXT;
    Command cmd = new Command(2);
    cmd.returnGroup = _null_();
    cmd.addParam("face", MaterialFace());
    cmd.addParam("value", MaterialParameter());
    cmd.extension = GL_EXT_vertex_shader();
    glBindMaterialParameterEXT = cmd;
    return cmd;
  }
}
